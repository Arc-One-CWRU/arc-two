<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>Demo3D.Core</name>
    </assembly>
    <members>
        <member name="P:Demo3D.Utilities.TDConnexion.Enabled">
            <summary>
            Gets or sets a value indicating whether input from this device should be acted on.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.BackupStrategy">
            <summary>
            Represents the manner in which backups are saved.
            </summary>
        </member>
        <member name="F:Demo3D.Utilities.BackupStrategy.None">
            <summary>
            Don't keep any backups.
            </summary>
        </member>
        <member name="F:Demo3D.Utilities.BackupStrategy.One">
            <summary>
            Keep only the most recent backup.
            </summary>
        </member>
        <member name="F:Demo3D.Utilities.BackupStrategy.All">
            <summary>
            Keep and number all previous backups.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.BackupManager">
            <summary>
            Class to facilitate automatic backing up of files when saving.
            Even when backups are not being kept, this class should still be used when saving important things such as models and catalogs.
            This is because it ensures that they are saved in such a way that nothing is lost in the event of a crash during saving.
            Having instantiated this class, the file should be saved to SavePath.
            Once saved, the Backup method should be called.
            </summary>
        </member>
        <member name="F:Demo3D.Utilities.BackupManager.strategy">
            <summary>
            Our backup strategy.
            </summary>
        </member>
        <member name="F:Demo3D.Utilities.BackupManager.actualPath">
            <summary>
            The path of the file that we're trying to save.
            </summary>
        </member>
        <member name="F:Demo3D.Utilities.BackupManager.temporaryPath">
            <summary>
            The temporary path we're saving to to avoid loss of data (if we're using one).
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.BackupManager.SavePath">
            <summary>
            Gets the full name and path that should be used to save the file.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.BackupManager.UsingTemporaryPath">
            <summary>
            Gets a value indicating whether a temporary path is being used to guard against errors during saving.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.BackupManager.#ctor(System.String,Demo3D.Utilities.BackupStrategy)">
            <summary>
            Initializes a new instance of the BackupManager class.
            </summary>
            <param name="path">The full name and path of the file to be saved.</param>
            <param name="strategy">The backup strategy to use.</param>
        </member>
        <member name="M:Demo3D.Utilities.BackupManager.Backup">
            <summary>
            Implements the specified backup strategy.
            This should be called after the file has been saved to SavePath.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.CustomPropertyDescriptorFactory.CustomPropertyDescriptor">
            <summary>
            A PropertyDescriptor wrapping up a CustomProperty as if it were a real property.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomPropertyDescriptorFactory.CustomPropertyDescriptor.CustomProperty">
            <summary>
            Gets the CustomProperty instance being wrapped by this CustomPropertyDescriptor.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyDescriptorFactory.CreateDescriptor(Demo3D.Utilities.CustomProperty)">
            <summary>
            Creates a PropertyDescriptor to wrap a CustomProperty as if it were a real property.
            </summary>
            <param name="customProperty">The CustomProperty instance to wrap with a PropertyDescriptor.</param>
            <returns>The PropertyDescriptor created to wrap the given CustomProperty.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyDescriptorFactory.GetCustomProperty(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Checks if a PropertyDescriptor actually represents a CustomProperty and if so returns the CustomProperty.
            </summary>
            <param name="propertyDescriptor">The PropertyDescriptor to check.</param>
            <returns>The CustomProperty represented by the given descriptor if it does represent a CustomProperty; otherwise, null.</returns>
        </member>
        <member name="T:Demo3D.Utilities.CustomProperty">
            <summary>
            Represents a property for a Visual that has been added by the user.
            Custom properties can be listened to for changes and also bound to tags for emulation purposes.
            </summary>
        </member>
        <member name="F:Demo3D.Utilities.CustomProperty.Owner">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;CustomProperty.Owner.Description&quot;]/value" /></summary>
        </member>
        <member name="F:Demo3D.Utilities.CustomProperty.DefaultCategory">
            <summary>The default category name to be used when creating new custom properties.</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.Name">
            <summary>Name of the custom property</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.Description">
            <summary>The description of the custom property.</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.ReadOnly">
            <summary>Whether the custom property can be edited in the user interface or not.</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.Hidden">
            <summary>Whether the custom property is hidden in the user interface or not.</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.AutoGenerated">
            <summary>This custom property is generated and shouldn't be deleted by the user.</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.CreationSource">
            <exclude /> [EditorBrowsable(EditorBrowsableState.Never)]
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.Category">
            <summary>The category for the custom property (Defaults to CustomProperty.DefaultCategory).</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.Persistent">
            <summary>Should the custom property be written to disk.</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.CustomUnit">
            <summary>
            Gets or sets the custom units currently being used, or null if the default is being used.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.UpdatedScript">
            <summary>Occurs whenever the custom property value changes.</summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.UpdatedScriptExists">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.UpdatedScriptVS">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.UpdatedScriptVSExists">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.InitialExpression">
            <summary>Gets or sets an expression for the initial value of this custom property.</summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.OnBeforeValueChanged">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.S_AssignValue(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.OnAfterValueChanged(Demo3D.PLC.Comms.DataValue@)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.OnAfterValueChangedNative(Demo3D.Common.ValueStruct)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.AssignWait(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.RemovePropertyChangedEventHandler">
            <summary>
            Disconnect PropertyChanged delegates.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.RefreshUnderlyingEnumType(System.Type)">
            <summary>
            When using custom enums in C# within Demo3D Properties, make sure that we recreate the CustomProperty with
            the "new" type, and not the "old" one if possible.
            </summary>
            <param name="newType">New underlying <see cref="T:System.Type" /></param>
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.RefreshUnderlyingType(System.Type)">
            <summary>
            When using custom classes in C# within Demo3D Properties, make sure that we recreate the CustomProperty with
            the "new" type, and not the "old" one if possible.
            </summary>
            <param name="newType">New underlying <see cref="T:System.Type" /></param>
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.#ctor">
            <summary>
            Empty constructor for serialization.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.Rename(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.Modify(System.String,System.Type,System.Object,System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.TypeEnumName">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.Initialize">
            <summary>
            Initializes the value of this custom property by evaluating the InitalExpression property, if one is present.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.CustomProperty.EnumWrapper">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Utilities.CustomProperty.UpdatedPropertyDescriptor">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.ToString">
            <summary>
            Name of the custom property.
            </summary>
            <returns>The name of the custom property as a string.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomProperty.Clone">
            <summary>
            Create a clone of the custom property.
            </summary>
            <returns>A copy of the custom property.</returns>
        </member>
        <member name="T:Demo3D.Utilities.IAddResourcesInUse">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.CustomPropertyCollectionAspect">
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.CustomPropertyCollectionAspect.Collection">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.AddResourcesInUse(Demo3D.Visuals.SharedResources,Demo3D.Visuals.SharedResources)">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.FindReferences(System.Object,System.Type,System.Collections.ArrayList)">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Reindex">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Defined(System.String)">
            <summary>
            Is a custom property name defined.
            </summary>
            <param name="name">Custom property name to check for is it defined.</param>
            <returns>true if the custom property is defined, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Add(System.String,System.Type,System.Object,System.String)">
            <summary>
             Add a non-virtual property.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Define(System.String,System.Type,System.Object,System.String)">
            <summary>
            Defined a new custom property, or modify an existing one.
            </summary>
            <param name="name">Name of the custom property.</param>
            <param name="type">Type to set the custom property value to be.</param>
            <param name="val">Value of the custom property.</param>
            <param name="description">Description of the custom property.</param>
            <returns>New or modified custom property object.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.RemoveCachedDescriptor(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Clear">
            <summary>
            Remove all custom properties from the collection.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Remove(System.String)">
            <summary>
            Remove a custom property by name.
            </summary>
            <param name="name">Name of the custom property to remove.</param>
            <returns>true if the custom property existed and was removed, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.SwitchDocument(Demo3D.Visuals.Document,Demo3D.Visuals.Document)">
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.CustomPropertyCollectionAspect.Items">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Get(System.String)">
            <summary>
            Find an existing custom property by name.
            </summary>
            <param name="name">Name of the custom property to find.</param>
            <returns>The custom property if it exists, otherwise null.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.ToString">
            <summary>
            A string version of all the custom property names.
            </summary>
            <returns>A string version of all the custom property names.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.Clone">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollectionAspect.GetEnumerator">
            <summary>
            The collection of custom properties.
            </summary>
            <returns>The collection of custom properties.</returns>
        </member>
        <member name="T:Demo3D.Utilities.CustomPropertyCollection">
            <summary>
            The collection of custom properties on a Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomPropertyCollection.Visual">
            <summary>
            The visual owner of the custom property collection.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.AddResourcesInUse(Demo3D.Visuals.SharedResources,Demo3D.Visuals.SharedResources)">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.FindReferences(System.Object,System.Type,System.Collections.ArrayList)">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Reindex">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Defined(System.String)">
            <summary>
            Is a custom property name defined.
            </summary>
            <param name="name">Custom property name to check for is it defined.</param>
            <returns>true if the custom property is defined, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Add(System.String,System.Type,System.Object,System.String)">
            <summary>
            Define a new custom property, or modify an existing one.
            <para>Equivalent to <see cref="M:Demo3D.Utilities.CustomPropertyCollection.Define(System.String,System.Type,System.Object,System.String)" /></para>
            </summary>
            <param name="name">Name of the custom property.</param>
            <param name="type">Type to set the custom property value to be.</param>
            <param name="val">Value of the custom property.</param>
            <param name="description">Description of the custom property.</param>
            <returns>New or modified custom property object.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Define(System.String,System.Type,System.Object,System.String)">
            <summary>
            Define a new custom property, or modify an existing one.
            <para>Equivalent to <see cref="M:Demo3D.Utilities.CustomPropertyCollection.Add(System.String,System.Type,System.Object,System.String)" /></para>
            </summary>
            <param name="name">Name of the custom property.</param>
            <param name="type">Type to set the custom property value to be.</param>
            <param name="val">Value of the custom property.</param>
            <param name="description">Description of the custom property.</param>
            <returns>New or modified custom property object.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.RemoveCachedDescriptor(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Clear">
            <summary>
            Remove all custom properties from the collection.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Remove(System.String)">
            <summary>
            Remove a custom property by name.
            </summary>
            <param name="name">Name of the custom property to remove.</param>
            <returns>true if the custom property existed and was removed, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.SwitchDocument(Demo3D.Visuals.Document,Demo3D.Visuals.Document)">
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.CustomPropertyCollection.Items">
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.CustomPropertyCollection.PersistentItems">
            <summary>
            Internal Only
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Get(System.String)">
            <summary>
            Find an existing custom property by name.
            </summary>
            <param name="name">Name of the custom property to find.</param>
            <returns>The custom property if it exists, otherwise null.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.ToString">
            <summary>
            A string version of all the custom property names.
            </summary>
            <returns>A string version of all the custom property names.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.GetProperties(System.Attribute[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.GetProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.Clone">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyCollection.GetEnumerator">
            <summary>
            The collection of custom properties.
            </summary>
            <returns>The collection of custom properties.</returns>
        </member>
        <member name="T:Demo3D.Utilities.CustomPropertyOnValueChangedFrame">
            <summary>
            A script-friendly version of CustomProperty.OnValueChanged.
            Although RunScriptNow will execute callbacks immediately, it uses separate threads; this means if those
            threads throw exceptions, suspend (block) or hit breakpoints, it won't directly affect the calling thread.
            An assignment would return and the subsequent code would execute as if nothing had happened.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.ExcelExporter.Export(System.Data.DataTable,System.String)">
            <summary>
            Exports the passed in DataTable to the supplied path. If there is already a file in the supplied path it is overwritten. 
            </summary>
            <param name="table">The DataTable to export.</param>
            <param name="pathName">The exported file path.</param>
        </member>
        <member name="M:Demo3D.Utilities.ExcelExporter.Export(System.Data.DataTable,System.String,System.Boolean)">
            <summary>
            Exports the passed in DataTable to the supplied path. 
            If there is already a file in the supplied path, appendToExistingXlsFile will determine whether to overwrite or append to the existing file (only applicable for Xls format). 
            </summary>
            <param name="table">The DataTable to export.</param>
            <param name="pathName">The exported file path.</param>
            <param name="appendToExistingXlsFile">
                If appendToExistingFile is true and the pathName is in Xls format, pre-existing worksheets in the file will be unchanged (except for the newly added table).
                Pre-existing worksheets will be overwritten in the case where they have the same name as the table being exported.
                If appendToExistingFile is false or the pathName is not in Xls format, the existing file will be overwritten.
            </param>
        </member>
        <member name="M:Demo3D.Utilities.ExcelExporter.Export(System.Data.DataSet,System.String)">
            <summary>
            Exports the passed in DataSet to the supplied path. If there is already a file in the supplied path it is overwritten. 
            </summary>
            <param name="dataSet">The DataSet to export.</param>
            <param name="pathName">The exported file path.</param>
        </member>
        <member name="M:Demo3D.Utilities.ExcelExporter.Export(System.Data.DataSet,System.String,System.Boolean)">
            <summary>
            Exports the passed in DataSet to the supplied path. 
            If there is already a file in the supplied path, appendToExistingXlsFile will determine whether to overwrite or append to the existing file (only applicable for Xls format). 
            </summary>
            <param name="dataSet">The DataSet to export.</param>
            <param name="pathName">The exported file path.</param>
            <param name="appendToExistingXlsFile">
                If appendToExistingXlsFile is true and the pathName is in Xls format, pre-existing worksheets in the file will be unchanged (except for the newly added tables from the DataSet).
                Pre-existing worksheets will be overwritten in the case where they have the same name as a table being exported from the DataSet.
                If appendToExistingXlsFile is false or the pathName is not in Xls format, the existing file will be overwritten.
            </param>
        </member>
        <member name="M:Demo3D.Utilities.ExcelExporter.EscapeCsv(System.Object)">
            <summary>
            Handle CSV special cases.
            http://en.wikipedia.org/wiki/Comma-separated_values#Basic_rules_and_examples
            
            Any field may be quoted (that is, enclosed within double-quote characters). Some fields must be quoted, as specified in following rules:
            - Fields with embedded commas or double-quote characters must be quoted.
            - Each of the embedded double-quote characters must be represented by a pair of double-quote characters.
            - Fields with embedded line breaks must be quoted.
            - In CSV implementations that do trim leading or trailing spaces, fields with such spaces as meaningful data must be quoted
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.FileCompression.CreateOutputStream(System.String,System.String,System.Drawing.Image,Demo3D.Visuals.UserResourceLibrary,Demo3D.Visuals.PointCloudLibrary,Demo3D.Visuals.DrawingBlockLibrary,Demo3D.Experiments.Analysis)">
            <summary>
            Creates a Stream object which can be used to write out a compressed document.
            </summary>
            <param name="path">The full path of the file to write out.</param>
            <param name="documentName">The name of the document file itself within the compressed file.</param>
            <param name="thumbnail">The thumbnail image to use.</param>
            <param name="userResources">A UserResourceLibrary instance containing any user resources to write out.</param>
            <param name="pointClouds">A PointCloudLibrary instance containing any point clouds with vertices to write out.</param>
            <param name="drawingBlocks">A DrawingBlockLibrary instance containing any drawing blocks with vertices to write out.</param>
            <param name="analysis">The Analysis.xslx file.</param>
            <returns>A Stream instance which the content of the document should be written out to (note the stream should then be disposed).</returns>
        </member>
        <member name="M:Demo3D.Utilities.FileCompression.CreateEntry(System.IO.Compression.ZipArchive,System.String,System.Byte[])">
            <summary>
            Add a new entry to the ZipArchive (or ZipOutputStream).
            Write the bytes[] data to the stream and close it if bytes is not null,
            Otherwise return a still open Stream object for the caller to write to the stream.
            </summary>
            <param name="archive">Optional archive to write to.</param>
            <param name="entryName">Name of the zip file entry.</param>
            <param name="data">Optional data to write to the zip file entry.</param>
            <returns>A stream that can be written to for the entry by the caller.</returns>
        </member>
        <member name="M:Demo3D.Utilities.FileCompression.CreateInputStream(System.String,System.String,Demo3D.Common.TemporaryFiles)">
            <summary>
            Creates a Stream object which can be used to read in a compressed document.
            </summary>
            <param name="path">The full path of the file to read in.</param>
            <param name="extension">The extension of the document within the compressed file.</param>
            <param name="tfs"><see cref="T:Demo3D.Common.TemporaryFiles" /> list of <see cref="T:Demo3D.Common.TemporaryFile" />'s used to read</param>
            <returns>A Stream instance which can be used to read in the file (note that the stream should then be disposed).</returns>
        </member>
        <member name="M:Demo3D.Utilities.FileCompression.Load(System.String,System.String)">
            <summary>
            Load the Xml Document stored in the specified path.
            This may involve extracting it from a ZIP file or de-compressing it.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.FileCompression.LoadCompressedFileBytes(System.String,System.String)">
            <summary>
            Loads any file from a compressed file into a byte array.
            </summary>
            <param name="path">The path of the compressed file to load the file from.</param>
            <param name="compressedFilePath"></param>
        </member>
        <member name="M:Demo3D.Utilities.FileCompression.LoadUserResources(System.String,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Loads the data from the user resource files in a compressed file into a UserResourceLibrary object.
            </summary>
            <param name="path">The path of the compressed file to load the user resources from.</param>
            <param name="userResources">The instance of UserResourceLibrary to populate with data.</param>
        </member>
        <member name="M:Demo3D.Utilities.FileCompression.LoadBuffers(System.String,Demo3D.Visuals.PointCloudLibrary,Demo3D.Visuals.DrawingBlockLibrary,Demo3D.Visuals.Document)">
            <summary>
            Loads point cloud data from a compressed file into a PointCloudLibrary.
            </summary>
            <param name="path">The path of the compressed file to load the user resources from.</param>
            <param name="pointClouds">The instance of PointCloudLibrary to populate with data.</param>
            <param name="drawingBlocks"></param>
            <param name="doc"></param>
        </member>
        <member name="M:Demo3D.Utilities.GlobalizeControls.GlobalizeWindow(Demo3D.Gui.IMainWindow)">
            <summary>
            Iterate through controls on a form substituting the strings with ones
            from the Demo3D.Globalization.dll assembly for the current Culture
            </summary>
            
        </member>
        <member name="M:Demo3D.Utilities.ImageQuality.GetJpegEncoderParameters(System.Int32)">
            <summary>
            Get an EncoderParameters object that represents a percentage quality
            for a JPEG file.
            http://vbforums.com/showthread.php?p=2038463
            </summary>
            <param name="quality">Percentage quaility level (0=worst, 100=best).</param>
        </member>
        <member name="M:Demo3D.Utilities.ImageQuality.GetJpegEncoderInfo">
            <summary>
            Get the Jpeg image encoder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Utilities.ImageQuality.GetEncoderInfo(System.String)">
            <summary>
            Return the encoder for the given mime type.
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html/frlrfSystemDrawingImagingEncoderClassQualityTopic.asp
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.VisualArrayPropertyEditor">
            <summary>
            This allows editing of arrays of visual properties where new
            items have their owner set automatically.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.PropertiesUpdatedHandler">
            <summary>
            Callback for properties being updated.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.IGetVisual">
            <summary>
            Classes that are related to a particular visual. 
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.IAttachToVisual">
            <summary>
            Classes that allow themselves to be attached to visuals. If you find that you
            want to throw an exception in the setter, or that it doesn't make sense for your class,
            then you probably want to use IGetVisual.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.IAttachToVisualExtensions">
            <summary>
            Extension to allow setting of the visual using "object?.SetVisual(v)".
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.IOwnedByVisual">
            <summary>
            An object that is owned by a visual.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.VisualDescriptor">
            <summary>
            This convoluted mess is necessary because SimplePropertyDescriptor is
            protected within TypeConverter.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.ChildrenProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.OwnedProperties">
            <summary>
            Globalized properties that are owned by a visual.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.OwnedProperties.UpdateMeshProperty``1(``0@,``0,System.String)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.OwnedProperties.UpdateMeshProperty``1(``0@,``0,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.OwnedProperties.UpdatePhysicsProperty``1(``0@,``0,System.String)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.OwnedProperties.UpdatePhysicsProperty``1(``0@,``0,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.OwnedProperties.UpdateMeshAndPhysicsProperty``1(``0@,``0,System.String)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.OwnedProperties.UpdateMeshAndPhysicsProperty``1(``0@,``0,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.OwnedProperties.IgnoreMeshUpdates">
            <summary>
            Ignore updates to properties that affect the mesh
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.OwnedProperties.NotifyPropertyUpdate(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Tell the application that a property has been updated.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.CustomizedProperties">
            <summary>
            Properties owned by a visual with some runtime custom properties.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.CustomizedProperties.NativeTypeName">
            <summary>
            Get or Set the preferred NativeObject type name to be used for this Visual.
            If blank it will use the [Auto] class of the Script on this Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomizedProperties.NativeObjectTypeName">
            <summary>
            Get the type name of the NativeObject that has been assigned to this Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomizedProperties.SetScriptNativeTypeName(Demo3D.Visuals.ScriptContainer,System.String)">
            <summary>
            Atomically set the Script and NativeTypeName together but only create the NativeObject once.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomizedProperties.ChildrenProperties">
            <summary>
            Expose Owner's children as properties (for PropertyGrid)
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.CustomizedProperties.GetDefaultSimpleProperties">
            <summary>
            Get the default set of simple properties for this object.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomizedProperties.AddDefaultSimpleProperties(Demo3D.Visuals.PropertyAliasCollection)">
            <summary>
            Should override for each derived class and add in default properties.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomizedProperties.Initialize">
            <summary>
            Initializes the custom properties by applying their initial expressions (where present).
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.CustomizedProperties.OnReset">
            <summary>
            Reset script that can appear on Scene.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChartBase.AddCounter(Demo3D.Utilities.Performance.ChartCounter)">
            <summary>
            Add a performance chart counter.
            </summary>
            <param name="chartCoutner">Chart counter to add.</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChartBase.RemoveCounter(Demo3D.Utilities.Performance.ChartCounter)">
            <summary>
            Remove a performance chart counter.
            </summary>
            <param name="chartCounter">chart counter to be removed.</param>
            <returns>True if the chart is now empty.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChartBase.Sample(System.Double)">
            <summary>
            Chart update tick.
            </summary>
            <param name="sampleIntervalS">The sampling interval (seconds).</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChartBase.Dispose">
            <summary>
            Chart disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChartCounter.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChartCounter.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChooserModel.PerfCounterOption.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChooserModel.PerfCounterOption.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChooserModel.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.ChooserModel.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.HistogramProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.HistogramProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.CanvasChartBase.Render(System.Windows.Size,System.Windows.Media.DrawingContext)">
            <summary>
            Request render.
            </summary>
            <param name="size">The canvas size.</param>
            <param name="dc">Drawing context.</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.CanvasChartBase.Update(System.Double)">
            <summary>
            Chart update tick.
            </summary>
            <param name="sampleIntervalS">The sampling interval (seconds).</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.PerformanceChartModel.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Utilities.Performance.PerformanceChartModel.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.Performance.PerformanceChartWpf">
            <summary>
            Interaction logic for PerformanceChart.xaml
            </summary>
            <summary>
            PerformanceChartWpf
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.PerformanceChartWpf.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.Performance.PerformanceValueChooser">
            <summary>
            Interaction logic for PerformanceValueChooser.xaml
            </summary>
            <summary>
            PerformanceValueChooser
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Performance.PerformanceValueChooser.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.RandomNumber">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.RegistrySupport">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.RegistrySupport.GetRegAppKeyStatic(System.String,System.Boolean)">
            <summary>
            Get or create a top level registry key for the software to store configuration
            settings in.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.ScriptConstraints.CompressScriptsBySource(Demo3D.Utilities.ScriptConstraints.IResourceContainer)">
            <summary>
            Find all scripts with the same content, regardless of the name, and replace them with a single script that has that content. Pick the shortest script name as the new script name.
            This should be called once only for documents that are being upgraded.
            </summary>
            <param name="doc">The document whose scripts are to be compressed</param>
            <returns>True if the document was modifed, false otherwise</returns>
        </member>
        <member name="M:Demo3D.Utilities.ScriptConstraints.MakeScriptNamesUnique(Demo3D.Utilities.ScriptConstraints.IResourceContainer)">
            <summary>
            Find all scripts with the different content but same name and rename all but one of the scripts to give them unique names (e.g. ScrLib -&gt; ScrLib1, ScrLib2, ScrLib3... etc.)
            In theory, this will only need calling once for documents being upgraded; from that point forwards, ScriptConstraints should ensure that script names
            are unique.
            </summary>
            <param name="doc">Document containing the scripts</param>
            <returns>True if the document was modified, false otherwise</returns>
        </member>
        <member name="M:Demo3D.Utilities.ScriptConstraints.UpgradeDocument(Demo3D.Utilities.ScriptConstraints.IResourceContainer)">
            <summary>
            Apply the required constraints to an existing document 
            </summary>
            <param name="doc">Document to be upgraded</param>
            <returns>True if the document was modified</returns>
        </member>
        <member name="M:Demo3D.Utilities.ScriptConstraints.MergeResources(System.Collections.ArrayList,Demo3D.Visuals.SharedResources,Demo3D.Visuals.SharedResources,Demo3D.Utilities.ScriptConstraints.ICollisionHandler)">
            <summary>
            Merge the resources for visuals into destResources, applying script constraints. The collisionHandler deals with the
            differences between Document and Catalog targets when we have a name match but different content.
            
            We're copying a component from source to destination, so you might think that the source container should be considered
            read-only, and midifications would only be done on the destination container.  But if there is a clash in the destination,
            we can't rummage around in the destination container to resolve the clash.  Our only option is to the components in the
            source.  So we always resolve any clash in the source container first, such that the final merging of the scripts from
            source to destination becomes a simple case of copying them over - no clash.
            
            For example, say there are scripts in the source and destination with the same name and content, but different guids.
            We modify the source container (model of catalog) to rekey the guid of the source script to that of the destination script.
            We do this because we have access to all the source components to change them, whereas we don't have access to any of the
            destination components.  In this example, once we've changed the guid in the source, merging becomes simple - a no-op in
            fact.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.ScriptConstraints.IsExistingLatest(Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.ScriptContainer)">
            <summary>
            Returns true if <paramref name="existingScript" /> is deemed to be the latest script.
            Order of preference from highest to lowest is package version, assembly version, modified.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.SharpZipLibExtensions.CheckZipDefaultCodePage(System.Nullable{System.Int32})">
            <summary>
            In Demo3D models/catalogs (zip files) saved in Demo3D 2016 10.0.0.6735 and earlier, the filenames
            used are not unicode, but in the "codepage" of the machine that saved them. Certain locales, eg "English / Europe"
            have a CodePage of 1. This is not usable within SharpZipLib. So, attempt to set it to a value. See D-5343.
            Allow it to be directly set from the command line
            </summary>
            <param name="UserSpecifiedCodePage">User specified codepage, or null.</param>
        </member>
        <member name="T:Demo3D.Utilities.IUndoableEdit">
            <summary>
            Provide the methods to control undoing and redoing from the UndoRedoManager
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.IUndoableEdit.Undo">
            <summary>
            Executed when undo is called on this edit from the UndoManager
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.IUndoableEdit.Redo">
            <summary>
            Executed when redo is called on this edit from the UndoManager
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.UndoableEdit">
            <summary>
            <para>FOR BACKWARD COMPATIBILITY ONLY</para>
            Use <see cref="T:Demo3D.Utilities.IUndoableEdit" /> instead.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.IUndoManager">
            <summary>
            The undo manager interface
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.IUndoManager.Undo">
            <summary>
            Undo the last edit in the Undo Manager
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.IUndoManager.Redo">
            <summary>
            Redo the last undone edit.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.IUndoManager.AddEdit(Demo3D.Utilities.IUndoableEdit)">
            <summary>
            Add an edit to the undo manager
            </summary>
            <param name="edit">The edit to add</param>
        </member>
        <member name="T:Demo3D.Utilities.UndoManagerChangedEventHandler">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.UndoManagerAction">
            <summary>
            Describes the action that caused an <see cref="E:Demo3D.Utilities.UndoManager.UndoManagerChanged" /> event.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.UndoManagerChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Demo3D.Utilities.UndoManager.UndoManagerChanged" /> event
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Utilities.UndoManagerChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.UndoManager">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.DistanceProperty.op_Implicit(System.Single)~Demo3D.Utilities.DistanceProperty">
            <summary>
            Implicitly converts a float to an instance of DistanceProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of DistanceProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.DistanceProperty.op_Implicit(System.Double)~Demo3D.Utilities.DistanceProperty">
            <summary>
            Implicitly converts a double to an instance of DistanceProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of DistanceProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.SpeedProperty.op_Implicit(System.Single)~Demo3D.Utilities.SpeedProperty">
            <summary>
            Implicitly converts a float to an instance of SpeedProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of SpeedProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.SpeedProperty.op_Implicit(System.Double)~Demo3D.Utilities.SpeedProperty">
            <summary>
            Implicitly converts a double to an instance of SpeedProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of SpeedProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AngularSpeedProperty.op_Implicit(System.Single)~Demo3D.Utilities.AngularSpeedProperty">
            <summary>
            Implicitly converts a float to an instance of SpeedProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of SpeedProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AngularSpeedProperty.op_Implicit(System.Double)~Demo3D.Utilities.AngularSpeedProperty">
            <summary>
            Implicitly converts a double to an instance of SpeedProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of SpeedProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AccelerationProperty.op_Implicit(System.Single)~Demo3D.Utilities.AccelerationProperty">
            <summary>
            Implicitly converts a float to an instance of AccelerationProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of AccelerationProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AccelerationProperty.op_Implicit(System.Double)~Demo3D.Utilities.AccelerationProperty">
            <summary>
            Implicitly converts a double to an instance of AccelerationProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of AccelerationProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AngularAccelerationProperty.op_Implicit(System.Single)~Demo3D.Utilities.AngularAccelerationProperty">
            <summary>
            Implicitly converts a float to an instance of AccelerationProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of AccelerationProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AngularAccelerationProperty.op_Implicit(System.Double)~Demo3D.Utilities.AngularAccelerationProperty">
            <summary>
            Implicitly converts a double to an instance of AccelerationProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of AccelerationProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AngleProperty.op_Implicit(System.Single)~Demo3D.Utilities.AngleProperty">
            <summary>
            Implicitly converts a float to an instance of AngleProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of AngleProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AngleProperty.op_Implicit(System.Double)~Demo3D.Utilities.AngleProperty">
            <summary>
            Implicitly converts a double to an instance of AngleProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of AngleProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AngleProperty.op_Implicit(System.Int32)~Demo3D.Utilities.AngleProperty">
            <summary>
            Implicitly converts an int to an instance of AngleProperty.
            </summary>
            <param name="value">The int value to convert.</param>
            <returns>A new instance of AngleProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.TimeProperty.op_Implicit(System.Single)~Demo3D.Utilities.TimeProperty">
            <summary>
            Implicitly converts a float to an instance of TimeProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of TimeProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.TimeProperty.op_Implicit(System.Double)~Demo3D.Utilities.TimeProperty">
            <summary>
            Implicitly converts a double to an instance of TimeProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of TimeProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.PercentageProperty.op_Implicit(System.Single)~Demo3D.Utilities.PercentageProperty">
            <summary>
            Implicitly converts a float to an instance of PercentageProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of PercentageProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.PercentageProperty.op_Implicit(System.Double)~Demo3D.Utilities.PercentageProperty">
            <summary>
            Implicitly converts a double to an instance of PercentageProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of PercentageProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.VolumeProperty.op_Implicit(System.Single)~Demo3D.Utilities.VolumeProperty">
            <summary>
            Implicitly converts a float to an instance of VolumeProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of VolumeProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.VolumeProperty.op_Implicit(System.Double)~Demo3D.Utilities.VolumeProperty">
            <summary>
            Implicitly converts a double to an instance of VolumeProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of VolumeProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.VolumeFlowRateProperty.op_Implicit(System.Single)~Demo3D.Utilities.VolumeFlowRateProperty">
            <summary>
            Implicitly converts a float to an instance of VolumeProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of VolumeProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.VolumeFlowRateProperty.op_Implicit(System.Double)~Demo3D.Utilities.VolumeFlowRateProperty">
            <summary>
            Implicitly converts a double to an instance of VolumeProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of VolumeProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AreaProperty.op_Implicit(System.Single)~Demo3D.Utilities.AreaProperty">
            <summary>
            Implicitly converts a float to an instance of AreaProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of AreaProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.AreaProperty.op_Implicit(System.Double)~Demo3D.Utilities.AreaProperty">
            <summary>
            Implicitly converts a double to an instance of AreaProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of AreaProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.PressureProperty.op_Implicit(System.Single)~Demo3D.Utilities.PressureProperty">
            <summary>
            Implicitly converts a float to an instance of PressureProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of PressureProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.PressureProperty.op_Implicit(System.Double)~Demo3D.Utilities.PressureProperty">
            <summary>
            Implicitly converts a double to an instance of PressureProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of PressureProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.PowerProperty.op_Implicit(System.Single)~Demo3D.Utilities.PowerProperty">
            <summary>
            Implicitly converts a float to an instance of PowerProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of PowerProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.PowerProperty.op_Implicit(System.Double)~Demo3D.Utilities.PowerProperty">
            <summary>
            Implicitly converts a double to an instance of PowerProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of PowerProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.DensityProperty.op_Implicit(System.Single)~Demo3D.Utilities.DensityProperty">
            <summary>
            Implicitly converts a float to an instance of DensityProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of DensityProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.DensityProperty.op_Implicit(System.Double)~Demo3D.Utilities.DensityProperty">
            <summary>
            Implicitly converts a double to an instance of DensityProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of DensityProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.TemperatureProperty.op_Implicit(System.Single)~Demo3D.Utilities.TemperatureProperty">
            <summary>
            Implicitly converts a float to an instance of TemperatureProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of TemperatureProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.TemperatureProperty.op_Implicit(System.Double)~Demo3D.Utilities.TemperatureProperty">
            <summary>
            Implicitly converts a double to an instance of TemperatureProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of TemperatureProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.ForceProperty.op_Implicit(System.Single)~Demo3D.Utilities.ForceProperty">
            <summary>
            Implicitly converts a float to an instance of ForceProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of ForceProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.ForceProperty.op_Implicit(System.Double)~Demo3D.Utilities.ForceProperty">
            <summary>
            Implicitly converts a double to an instance of ForceProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of ForceProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.TorqueProperty.op_Implicit(System.Single)~Demo3D.Utilities.TorqueProperty">
            <summary>
            Implicitly converts a float to an instance of TorqueProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of TorqueProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.TorqueProperty.op_Implicit(System.Double)~Demo3D.Utilities.TorqueProperty">
            <summary>
            Implicitly converts a double to an instance of TorqueProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of TorqueProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.MassProperty.op_Implicit(System.Single)~Demo3D.Utilities.MassProperty">
            <summary>
            Implicitly converts a float to an instance of MassProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of MassProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.MassProperty.op_Implicit(System.Double)~Demo3D.Utilities.MassProperty">
            <summary>
            Implicitly converts a double to an instance of MassProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of MassProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.VoltageProperty.op_Implicit(System.Single)~Demo3D.Utilities.VoltageProperty">
            <summary>
            Implicitly converts a float to an instance of VoltageProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of VoltageProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.VoltageProperty.op_Implicit(System.Double)~Demo3D.Utilities.VoltageProperty">
            <summary>
            Implicitly converts a double to an instance of VoltageProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of VoltageProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CurrentProperty.op_Implicit(System.Single)~Demo3D.Utilities.CurrentProperty">
            <summary>
            Implicitly converts a float to an instance of CurrentProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of CurrentProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CurrentProperty.op_Implicit(System.Double)~Demo3D.Utilities.CurrentProperty">
            <summary>
            Implicitly converts a double to an instance of CurrentProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of CurrentProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.FrequencyProperty.op_Implicit(System.Single)~Demo3D.Utilities.FrequencyProperty">
            <summary>
            Implicitly converts a float to an instance of FrequencyProperty.
            </summary>
            <param name="value">The float value to convert.</param>
            <returns>A new instance of FrequencyProperty with the supplied value.</returns>
        </member>
        <member name="M:Demo3D.Utilities.FrequencyProperty.op_Implicit(System.Double)~Demo3D.Utilities.FrequencyProperty">
            <summary>
            Implicitly converts a double to an instance of FrequencyProperty.
            </summary>
            <param name="value">The double value to convert.</param>
            <returns>A new instance of FrequencyProperty with the supplied value.</returns>
        </member>
        <member name="T:Demo3D.Utilities.CustomPropertyConverter`1">
            <summary>
            Base class for specific type converters that allows for the possibility of the property being a custom property that overrides the global units.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyConverter`1.GetUnit(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the units to use for the conversion.
            </summary>
            <param name="property">The PropertyDescriptor for the property being converted.</param>
            <returns>A UnitDescriptor representing the units to use for the conversion.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyConverter`1.#ctor(Demo3D.Utilities.UnitType)">
            <summary>
            Initializes a new instance of the CustomPropertyConverter class.
            </summary>
            <param name="unitType">The default unit type for the property.</param>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A Type that represents the type you want to convert from.</param>
            <returns>true if this converter can perform the conversion; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Utilities.CustomPropertyConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The CultureInfo to use as the current culture.</param>
            <param name="value">The Object to convert.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:Demo3D.Visuals.AnimatorEvent">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AnimatorEventArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AnimatorEventHandler">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AnimationCancelledException">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Animator">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Animator.UpdateSimulationState">
            <summary>
            After an animation has completed moving a conveyor, poke the simulation state to tell loads that they may
            not be where they thought they were
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Animator.ForceComplete">
            <summary>
            Complete the animation now without Cancelling it and throwing an exception.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ArcAnimator">
            <summary>
            Move visual without physics. Target visual must be either doc.Scene (or null), the visual itself or visual.Parent
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.ArcAnimator.lastTimeDelta">
            <summary>
            The value of the time delta the last time UpdateMatrix was called.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ArcAnimator.CanAnimate(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Can this Animator animate <paramref name="visual" /> with respect to <paramref name="relativeVisual" />?
            </summary>
            <param name="visual">Visual to animate</param>
            <param name="relativeVisual">Visual to animate relative to</param>
            <returns>true if animator can be used, false if not</returns>
        </member>
        <member name="M:Demo3D.Visuals.BindingAnimator.TransformFromWorldToPlane(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <summary>
            Convert world location to a location local to joint on the Y-axis plane at [0,0,0]
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BvhAnimator">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BvhAnimator.GetFrame(Demo3D.Visuals.Visual,Demo3D.Bvh.Hierarchy,System.Collections.Generic.List{Demo3D.Visuals.BvhMapping},System.Int32)">
            <summary>
            Get solution set of destination rotations for a given frame at a given hierechy root.
            This can be used to extract a single hand position for example.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BvhAnimator.GetPose(Demo3D.Visuals.Visual,System.Collections.Generic.List{Demo3D.Visuals.BvhMapping})">
            <summary>
            Get solution set of destination rotations for the initial pose with no joint rotations.
            This can be used to reset the initial state for a single hand position for example.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BvhExtractor">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BvhMapping">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.HarmonicAnimator">
            <summary>
            Move a visual in simple harmonic motion (http://en.wikipedia.org/wiki/Simple_harmonic_motion)
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MatrixAnimator">
            <summary>
            Move visual without physics.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MatrixAnimator.lastTimeDelta">
            <summary>
            The value of the time delta the last time UpdateMatrix was called.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.NullAnimator">
            <summary>
            "Do Nothing" animator, just wait the specified amount of time before "OnMoveToCompleted"
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IPointGenerator">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PathSmoothedWithRadius">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PathAnimator">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PathAnimator.DistanceToTarget(System.Int32)">
            <summary>
            Length of path from points[index] to end of path
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ProcessAnimator">
            <summary>
            Process that has fixed duration, and can be disabled, and allows custom animation
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.RotationMatrixAnimator">
            <summary>
            Move visual without physics.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.RotationMatrixAnimator.lastTimeDelta">
            <summary>
            The value of the time delta the last time UpdateMatrix was called.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StraightLineAnimator">
            <summary>
            Move visual without physics. Target visual must be either doc.Scene (or null), the visual itself or visual.Parent
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.StraightLineAnimator.lastTimeDelta">
            <summary>
            The value of the time delta the last time UpdateMatrix was called.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightLineAnimator.CanAnimate(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Can this Animator animate <paramref name="visual" /> with respect to <paramref name="relativeVisual" />?
            </summary>
            <param name="visual">Visual to animate</param>
            <param name="relativeVisual">Visual to animate relative to</param>
            <returns>true if animator can be used, false if not</returns>
        </member>
        <member name="T:Demo3D.Visuals.ExportableVisualAspect">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ExportableVisualAspect_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ExportableVisualAspect.ContextVisual">
            <summary>The Visual that represents the top level part or assembly from the CAD package.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ExportableVisualAspect.AspectId">
            <summary>An internal CAD-package specific Id for the Aspect.</summary>
        </member>
        <member name="T:Demo3D.Visuals.BindableVisualAspect">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;BindableVisualAspect_Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.AspectBindableItemNameMapping">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AspectBindableItemNameStore">
            <summary>
            A store of bindable item names managed by an aspect.
            </summary>
            <remarks>
            This class is used to generate binding names for bindable items managed by an aspect.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.AspectBindableItemNameStore.owner">
            <summary>
            The owning aspect.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AspectBindableItemNameStore.scheme">
            <summary>
            The scheme to use when naming aspects.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AspectBindableItemNameStore.mapped">
            <summary>
            Bindable items that have been assigned binding names different from their property names.
            This mapping is serialized out to ensure persistence.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AspectBindableItemNameStore.unmapped">
            <summary>
            Bindable items that have been assigned binding names equal to their property names.
            </summary>
            <remarks>
            We store this set in order to know whether a bindable item has a binding name managed by the aspect.
            This list is not serialized out.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.AspectBindableItemNameStore.Owner">
            <summary>
            The owning aspect.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AspectBindableItemNameStore.Scheme">
            <summary>
            The scheme to use when naming aspects.
            </summary>
            <remarks>
            Changing this property will rename all managed bindable items.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemNameStore.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemNameStore.BindingName(System.String)">
            <summary>
            Generates a binding name for the given property name according to the naming scheme.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>The generated binding name.</returns>
            <exception cref="T:System.ArgumentException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemNameStore.Release(System.String)">
            <summary>
            Releases the binding name for the given property name.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>Whether the binding name was found and released.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemNameStore.Update">
            <summary>
            Updates all bindable item names.
            </summary>
            <remarks>
            This function should be called after the aspect name changes.
            This function is called automatically after the naming scheme changes.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemNameStore.RenameOwnedBindableItem(System.String,System.String)">
            <summary>
            Searches for a bindable item belonging to the aspect and renames it.
            </summary>
            <param name="oldBindingName">The current binding name for the bindable item.</param>
            <param name="newBindingName">The new binding name for the bindable item.</param>
            <returns>Whether the bindable item was renamed.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemNameStore.FindOwnedBindableItem(System.String)">
            <summary>
            Finds a bindable item owned by the aspect with the specified binding name.
            </summary>
            <param name="bindingName">The binding name.</param>
            <returns>The found bindable item.</returns>
        </member>
        <member name="T:Demo3D.Visuals.AspectBindableItemNamingScheme">
            <summary>
            Binding name generation schemes.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AspectBindableItemNamingScheme.PropertyName">
            <summary>
            The binding name will be equal to the property name.
            </summary>
            <remarks>
            This scheme is provided for backwards compatibility purposes.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.AspectBindableItemNamingScheme.UniqueMangled">
            <summary>
            The binding name will be generated by mangling the property name with
            the aspect name (if not empty). The generated name will be made unique
            to the visual by introducing a number if required.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemName.Generate(Demo3D.Visuals.AspectComponentBase,System.String,Demo3D.Visuals.AspectBindableItemNamingScheme)">
            <summary>
            Generates binding name for the specified property name.
            </summary>
            <remarks>
            If the specified scheme is <see cref="F:Demo3D.Visuals.AspectBindableItemNamingScheme.UniqueMangled" />
            then the binding name returned should be unique on the aspect's visual.
            </remarks>
            <param name="aspect">The aspect on which the property exists.</param>
            <param name="propertyName">The property name.</param>
            <param name="scheme">The naming scheme.</param>
            <returns>The generated binding name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemName.Find(Demo3D.Visuals.Visual,Demo3D.Visuals.AspectComponentBase,System.String)">
            <summary>
            Tries to find a bindable item on the provided visual with the specified binding name.
            </summary>
            <remarks>
            This function will not look for bindable items on the specified aspect to be excluded.
            </remarks>
            <param name="visual">The visual.</param>
            <param name="excluded">An aspect to exclude when searching.</param>
            <param name="bindingName">The binding name to find.</param>
            <returns>The found bindable item.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectBindableItemName.Mangle(System.String,System.String,System.Int32)">
            <summary>
            Generates a mangled binding name.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="propertyName">The proeprty name.</param>
            <param name="index">The index which may be used to satisfy uniqueness.</param>
            <returns>The mangled name.</returns>
        </member>
        <member name="T:Demo3D.Visuals.IAspectComponent">
            <summary>
            Aspects that implement this will be compatible with the AspectViewer
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAspectComponent.IsEnabled">
            <summary>
            The value for whether the aspect is enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAspectComponent.IsCollapsed">
            <summary>
            Collapse or expand the aspect in the Aspect Viewer.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.AspectComponentBase">
            <summary>
            Base class for aspects, supports live updating of property values in the AspectViewer, using the SetProperty method
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.AspectComponentBase.IsEnabledChanged">
            <summary>
            Occurs when the value of <see cref="P:Demo3D.Visuals.AspectComponentBase.IsEnabled" /> changes.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.AspectComponentBase.OnNameChanged">
            <summary>
            Occurs when the <see cref="P:Demo3D.Visuals.AspectComponentBase.Name" /> of an aspect changes.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AspectComponentBase.IsVerbose">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.Name">
            <summary>A unique name for the aspect</summary>
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.IsInitialized">
            <summary>
            Gets the value of whether or not this aspect has been initialized. An aspect is initialized during the scenes initialization when starting a model.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.IsReadOnly">
            <summary>
            When true, disable editing in the Aspect Viewer
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.IsCollapsed">
            <inheritdoc cref="P:Demo3D.Visuals.IAspectComponent.IsCollapsed" />
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.AspectContainer">
            <summary>
            The aspect container that this aspect has been added to.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.IsEnabled">
            <inheritdoc cref="P:Demo3D.Visuals.IAspectComponent.IsEnabled" />
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.AspectManagedBy">
            <summary>
            The Aspect that this is managed by.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AspectComponentBase.BindingNameStore">
            <summary>
            Manages binding names for aspect bindable items.
            </summary>
            <remarks>
            This *may* be null if no bindable items are managed by the aspect.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.ShouldSerializeIsCollapsed">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.ShouldSerializeIsEnabled">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.CopyAspect(Demo3D.Visuals.AspectComponentBase)">
            <summary>
            Copy an aspect.
            </summary>
            <param name="acb">The aspect to copy.</param>
            <returns>An <see cref="T:Demo3D.Visuals.ICopiedAspects" /> object containing the aspect if copying was successful, or null if unsuccessful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.CopyAspects(System.Collections.Generic.IEnumerable{Demo3D.Visuals.AspectComponentBase})">
            <summary>
            Copy a collection of aspects.
            </summary>
            <param name="acbs">The aspect collection to copy.</param>
            <returns>An <see cref="T:Demo3D.Visuals.ICopiedAspects" /> object containing the aspects if copying was successful, or null if unsuccessful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.CopyAspects(Demo3D.Visuals.Visual)">
            <summary>
            Copy all aspects on a visual.
            </summary>
            <param name="visual">The visual to copy aspects from.</param>
            <returns>An <see cref="T:Demo3D.Visuals.ICopiedAspects" /> object containing the aspects if copying was successful, or null if unsuccessful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.DoOnAdded">
            <summary>
            Invoke Aspect.OnAdded and Aspect.OnEnabled if appropriate
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.Destroy(Demo3D.Visuals.AspectComponentBase)">
            <summary>
            Remove the desired aspect from the aspect's container.
            </summary>
            <param name="aspect">The aspect to be removed.</param>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.OnAssigned">
            <summary>
            Called when assigned to an aspect container, this should never be invoked manually.
            No other aspects should be accessed within this method.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.CanAdd(System.String@)">
            <summary>
            Determine whether the aspect can be added to the AspectContainer.
            </summary>
            <param name="reasonForFailure">The string reference to assign the reason for failure.</param>
            <returns>True if the aspect can be added, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.OnAdded">
            <summary>
            Called when all other aspects have been added to an aspect container, this should never be invoked manually
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.OnRemoved">
            <summary>
            Called when removed from an aspect container, this should never be invoked manually
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.OnEnabled">
            <summary>
            Called when enabled, this should never be invoked manually
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.OnDisabled">
            <summary>
            Called when disabled, this should never be invoked manually
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.OnInitialize">
            <summary>
            Called when the aspect container is Initialized, this should never be invoked manually
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.OnReset">
            <summary>
            Called when the aspect container is Reset, this should never be invoked manually
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.ResetOnAdded">
            <summary>
            Called when switching document. This will allow the on added method to be invoked on the new document
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.FindAspect``1">
            <summary>
            Find an aspect of the desired type in this aspect's container.
            </summary>
            <typeparam name="T">The type of the aspect to find.</typeparam>
            <returns>The matching aspect if one is found, otherwise null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.FindCreateAspect``1">
            <summary>
            Find or, if one isn't found, create an aspect of the desired type in this aspect's container.
            </summary>
            <typeparam name="T">The type of the aspect to find or create.</typeparam>
            <returns>The matching aspect if one is found, otherwise a newly created aspect.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.FindCreateManagedAspect``1(Demo3D.Visuals.AspectComponentBase)">
            <summary>
            Find or, if one isn't found, create a managed aspect of the desired type in this aspect's container. The managed aspect will be owned by the declared aspect.
            </summary>
            <typeparam name="T">The type of the aspect to find or create.</typeparam>
            <param name="manager">The manager of the found aspect.</param>
            <returns>The matching aspect if one is found, otherwise a newly created aspect.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.RemoveAspect``1">
            <summary>
            Remove the aspect of the desired type from this aspect's container.
            </summary>
            <typeparam name="T">The type of aspect to remove</typeparam>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.RemoveAspect(System.Object)">
            <summary>
            Remove the desired aspect from this aspect's container.
            </summary>
            <param name="aspect">The aspect to remove</param>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.RemoveManagedAspects">
            <summary>
            Remove all aspects that are being managed by this aspect..
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.CleanupBindingAPI">
            <summary>
            Remove all bindable items that have been added to the binding api via <see cref="M:Demo3D.Visuals.AspectComponentBase.UpdateBindingAPI" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.UpdateBindingAPI">
            <summary>
            If this aspect implements <see cref="T:Demo3D.Visuals.IBindableItemOwner" />, this method performs the following for each <see cref="T:Demo3D.Visuals.BindableItem" />:<br />
            If the aspect is disabled OR the item is not part of the binding interface (see <see cref="P:Demo3D.Visuals.BindableItem.IsBindingInterface" />), then remove it from the binding API.<br />
            Otherwise, if the item is part of the binding interface AND the item does not already have a declared binding (see <see cref="P:Demo3D.Visuals.BindableItem.HasBindingInterface" />), add the item to the binding API.<br />
            Any bindable items that are added to the binding API will appear in the IO browser grid and can be further utilized for controls testing.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.SerializableDependency(Demo3D.Visuals.Visual)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.SerializableDependency(Demo3D.Visuals.SerializableObject)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.BindingName(System.String)">
            <summary>
            Retrieves or generates a binding name for an aspect property.
            </summary>
            <remarks>
            The property name must be unique to the aspect.
            </remarks>
            <param name="propertyName">The name of the property.</param>
            <returns>The binding name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.ReleaseBindingName(System.String)">
            <summary>
            Releases the generated binding name for an aspect property.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>Whether the generated binding name was found and released.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AspectComponentBase.ToString">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.VisualAspect">
            <summary>
            Simple base class to avoid typing AspectComponent&lt;Visual&gt; everywhere
            and to give the same basic functionality to Aspect script writers as NativeObject script writers.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IAspectContainer">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.IAspectContainer.AddAspects(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Add multiple aspects at once. All aspects are added to the container first, and then aspect.OnAdded is invoked after
            </summary>
            <param name="aspects">The aspects to add.</param>
        </member>
        <member name="M:Demo3D.Visuals.IAspectContainer.RemoveAspect(System.Object)">
            <summary>
            Remove the aspect and all dependencies
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="M:Demo3D.Visuals.IAspectContainer.RemoveFailedAspect(System.Object)">
            <summary>
            Remove an aspect that failed to add. This does not raise any events or trigger AspectComponentBase.DoOnRemoved
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="P:Demo3D.Visuals.IAspectContainer.Id">
            <summary>
            The Id of the aspect container
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IRenderAspectContainer">
            <summary>
            An IAspectContainer which has a transform
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AspectContainerBase.OnAspectAdded(System.Object,Demo3D.Visuals.IAspectContainer,Demo3D.Visuals.SerializableObjectLibrary,System.Boolean)">
            <summary>
            
            </summary>
            <param name="aspect"></param>
            <param name="container"></param>
            <param name="library"></param>
            <param name="delayOnAdded"></param>
            <returns>Returns false if the aspect could not be added. Always returns true if OnAdded is delayed</returns>
        </member>
        <member name="M:Demo3D.Visuals.AspectContainerBase.DoAspectOnAdded(Demo3D.Visuals.Document,Demo3D.Visuals.AspectComponentBase,System.Boolean,System.Boolean)">
            <summary>
            Atte
            </summary>
            <param name="doc"></param>
            <param name="managedAspect"></param>
            <param name="allowInitialize"></param>
            <param name="notifyAdded"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.AspectContainer">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AspectContainer.AddAspect(System.Object,Demo3D.Visuals.IAspectContainer,Demo3D.Visuals.SerializableObjectLibrary)">
            <summary>
            Add an aspect to the container
            </summary>
            <param name="aspect">Aspect to be added</param>
            <param name="container">The container which the aspect is being added to</param>
            <param name="library">When not null, add the aspect to this library</param>
        </member>
        <member name="M:Demo3D.Visuals.AspectContainer.RemoveReloadingAspect(System.Object)">
            <summary>
            Dont remove aspect from the registry,
            used when reloading aspects.
            </summary>
            <param name="aspect"></param>
        </member>
        <member name="M:Demo3D.Visuals.AspectContainer.RemoveAspect(System.Object,Demo3D.Visuals.SerializableObjectLibrary)">
            <summary>
            Remove an aspect from the container
            </summary>
            <param name="aspect">Aspect to be removed</param>
            <param name="library">When not null, remove the aspect from the library</param>
        </member>
        <member name="F:Demo3D.Visuals.Aspects.SerializableObjectCopyHelper.shallowCopyTypes">
            <summary>
            A collection of types which should never be deep copied
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Aspects.SerializableObjectCopyHelper.DeepCopy``1(``0,System.Collections.Generic.List{Demo3D.Common.PWSerializer.SerializedReferenceData},System.Collections.Generic.Dictionary{System.Object,System.Collections.Generic.List{Demo3D.Common.PWSerializer.SerializedReferenceData}},System.Collections.Generic.List{System.Action{Demo3D.Visuals.Document}},System.Collections.Generic.Dictionary{System.Object,System.Object})">
            <summary>
            Create a deep copy of the object
            </summary>
            <typeparam name="T">Object type.</typeparam>
            <param name="original">Object to copy.</param>
            <param name="resolveToList">A list of references that need resolving after the deep copy.</param>
            <param name="resolveFromMapping">A mapping of objects and their id that needs mapping</param>
            <param name="postProcessActions">A list of actions that are invoked after resolving.</param>
            <param name="copiedReferences">Dictionary of already copied objects (Keys: original objects, Values: their copies).</param>
            <returns></returns>
        </member>
        <member name="F:Demo3D.Visuals.CopiedAspectsPasteMode.Default">
            <summary>
            Paste the aspects unconditionally.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CopiedAspectsPasteMode.ReplaceExisting">
            <summary>
            Paste the aspects, or replace aspects of the same type if they exist.<br />
            If more than one aspect of the same type exists, paste onto the aspect found first.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CopiedAspectsPasteMode.SkipDuplicates">
            <summary>
            Paste the aspects, unless a duplicate type is found, then the aspect is not pasted.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ICopiedAspects.Paste(System.Collections.Generic.IEnumerable{Demo3D.Visuals.IAspectContainer},Demo3D.Visuals.CopiedAspectsPasteMode)">
            <summary>
            Paste an aspect onto a collection of aspect containers.
            </summary>
            <param name="aspectContainers">Target aspect containers</param>
            <param name="pasteMode">Paste mode</param>
        </member>
        <member name="M:Demo3D.Visuals.ICopiedAspects.Paste(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual},Demo3D.Visuals.CopiedAspectsPasteMode)">
            <summary>
            Paste an aspect onto a collection of visuals.
            </summary>
            <param name="visuals">Target visuals</param>
            <param name="pasteMode">Paste mode</param>
        </member>
        <member name="M:Demo3D.Visuals.ICopiedAspects.Paste(Demo3D.Visuals.Visual,Demo3D.Visuals.CopiedAspectsPasteMode)">
            <summary>
            Paste an aspect onto a visual.
            </summary>
            <param name="visual">Target visual</param>
            <param name="pasteMode">Paste mode</param>
        </member>
        <member name="T:Demo3D.Visuals.IDeepCopyResolvable">
            <summary>
            When deep copying, this tells SerializableObjectCopyHelper to resolve it as a reference rather than attempting to copy the object.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObject.SerializableDependency(Demo3D.Visuals.Visual)">
            <summary>
            Whether the specified visual depends on the serializable object.
            </summary>
            <remarks>
            When serializing out a visual, all serializable objects that the visual depends on are
            also serialized out.
            </remarks>
            <param name="visual">The visual.</param>
            <returns>True if the visual depends on the serializable object, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObject.SerializableDependency(Demo3D.Visuals.SerializableObject)">
            <summary>
            Whether the specified object depends on the serializable object.
            </summary>
            <remarks>
            When serializing out this object, all serializable objects that the this object depends on are
            also serialized out.
            </remarks>
            <param name="so">The object to test.</param>
            <returns>True if this object depends on the serializable object, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObject.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SerializableObject.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AspectViewer.AddMultipleItems.AddMultipleItemsView">
            <summary>
            Interaction logic for AddMultipleItemsView.xaml
            </summary>
            <summary>
            AddMultipleItemsView
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AspectViewer.AddMultipleItems.AddMultipleItemsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MessageAttribute">
            <summary>
            Markup for scripting functions to indicate that they handle messages
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PublicMemberAttribute">
            <summary>
            Markup for functions to indicate they cannot be accessed from foreign visuals
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.NoDocumentationAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualAttribute">
            <summary>
            Indicates the class for the visuals property bag.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ContextAttribute">
            <summary>
            Mark Visual methods that can be called from the context menu
            for the current selection.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContextAttribute.RequiresRunCapability">
            Show in all tool menus by default
        </member>
        <member name="M:Demo3D.Visuals.ContextAttribute.#ctor(System.String,System.Int32)">
            <summary>
            Show this method in the context menu when a Visual of this
            type appears in the current selection. The specified label
            is shown to the user. Currently the method must be public, non-static 
            and take no arguments. Return value is ignored.
            </summary>
            <param name="labelForMenu"></param>
            <param name="order"></param>
        </member>
        <member name="M:Demo3D.Visuals.ContextAttribute.#ctor(System.String)">
            <summary>
            Show this method in the context menu when a Visual of this
            type appears in the current selection. The specified label
            is shown to the user. Currently the method must be public, non-static 
            and take no arguments. Return value is ignored.
            </summary>
            <param name="labelForMenu"></param>
        </member>
        <member name="M:Demo3D.Visuals.ContextAttribute.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Show this method in the context menu when a Visual of this
            type appears in the current selection AND the specified predicate property returns true. The specified label
            is shown to the user. Currently the method must be public, non-static 
            and take no arguments. Return value is ignored.
            </summary>
            <param name="labelForMenu"></param>
            <param name="predicatePropertyName"></param>
            <param name="order"></param>
        </member>
        <member name="M:Demo3D.Visuals.ContextAttribute.#ctor(System.String,System.String)">
            <summary>
            Show this method in the context menu when a Visual of this
            type appears in the current selection AND the specified predicate property returns true. The specified label
            is shown to the user. Currently the method must be public, non-static 
            and take no arguments. Return value is ignored.
            </summary>
            <param name="labelForMenu"></param>
            <param name="predicatePropertyName"></param>
        </member>
        <member name="M:Demo3D.Visuals.ContextAttribute.#ctor(System.String,Demo3D.Visuals.ToolMenu,System.Int32)">
            <summary>
            Show this method in the context menu when a Visual of this
            type appears in the current selection. The specified label
            is shown to the user. Currently the method must be public, non-static 
            and take no arguments. Return value is ignored.
            </summary>
            <param name="labelForMenu"></param>
            <param name="menu"></param>
            <param name="order"></param>
        </member>
        <member name="M:Demo3D.Visuals.ContextAttribute.#ctor(System.String,Demo3D.Visuals.ToolMenu)">
            <summary>
            Show this method in the context menu when a Visual of this
            type appears in the current selection. The specified label
            is shown to the user. Currently the method must be public, non-static 
            and take no arguments. Return value is ignored.
            </summary>
            <param name="labelForMenu"></param>
            <param name="menu"></param>
        </member>
        <member name="T:Demo3D.Visuals.AutoAttribute">
            <summary>
            Attribute used in C# Scripting to indicate that a property, field or method should be auto wired on initialize.
            Also used on classes to automatically set the NativeTypeName field.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoAttribute.Name">
            <summary>
            Override method or property name with this name instead,
            e.g. This will bind the method RunMyEvent() to the custom event property MyEvent:
                [Auto("MyEvent")] void RunMyEvent() { ... }
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoAttributeHelper.WireScriptReference(Demo3D.Visuals.IAutoAttributeWireable,System.String,System.Reflection.MethodInfo,Demo3D.Visuals.ScriptReference,System.Action@)">
            <summary>
            Try to bind the method info a ScriptReference..
            </summary>
            <param name="autoWireable"></param>
            <param name="eventName">The name of the event. This may be the name passed to [Auto("<eventName>")]
                                    or the name of the method if no override specified.</eventName></param>
            <param name="m">The methodInfo to bind to a ScriptReference instance.</param>
            <param name="scriptRef">The candidate ScriptReference to match with the methodInfo.</param>
            <param name="errorHandler">This will be set to an action if false is returned and will log the error when invoked.</param>
        </member>
        <member name="M:Demo3D.Visuals.AutoAttributeHelper.GetAllAutoFields(System.Type)">
            <summary>
            Get all fields including private fields from base classes.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoAttributeHelper.GetAllAutoProperties(System.Type)">
            <summary>
            Get all properties including private properties from base classes.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBindingInterfaceOwner.Id">
            <summary>
            The Id of the IBindingInterfaceOwner object.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBindingInterfaceOwner.Owner">
            <summary>
            The owning visual of the IBindingInterfaceOwner object.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAutoAttributeWireable.AutoWireableTarget">
            <summary>
            The object that is being autowired
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IAutoAttributeWireable.AddRemoveListenerAction(System.Reflection.MethodInfo,System.Action)">
            <summary>
            Add an action to invoke when removing the auto wired event listeners
            </summary>
            <param name="methodInfo">The auto wired method info.</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:Demo3D.Visuals.IAutoAttributeWireable.AddRemoveCustomPropAction(System.String,System.Action)">
            <summary>
            Add an action to invoke when removing the auto wired custom properties
            </summary>
            <param name="name">The name of the custom property</param>
            <param name="action">The action to invoke</param>
        </member>
        <member name="M:Demo3D.Visuals.IAutoAttributeWireable.RemoveEventListeners">
            <summary>
            Run all actions that have been added by <see cref="M:Demo3D.Visuals.IAutoAttributeWireable.AddRemoveListenerAction(System.Reflection.MethodInfo,System.Action)" />
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IAutoAttributeWireable.RemoveCustomProps">
            <summary>
            Run all actions that have been added by <see cref="M:Demo3D.Visuals.IAutoAttributeWireable.AddRemoveCustomPropAction(System.String,System.Action)" />
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.DirectoryName">
            <summary>
            Name of directory to store AutoSave files in
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.AutoSaveDirectory">
            <summary>
            Full path to AutoSave directory
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.AutoSavePrefix">
            <summary>
            Prefix before AutoSave file name - usually "", but in the case of specifying "." as the Directory, set it as "."
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.UseLocalTime">
            <summary>
            Wrapper to determine if we should use local time in AutoSave file names
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoSave.Path.CreateDirectory">
            <summary>
            Make sure AutoSave directory exists
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.AutoSave.Path.FileTimeComparer">
            <summary>
            Comparer sorting on newest to oldest file modification times
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.Paths">
            <summary>
            Return all AutoSave paths corresponding to this (original) filename in newest to oldest order
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoSave.Path.Prune(System.UInt32)">
            <summary>
            Prune AutoSave files
            </summary>
            <param name="filesToKeep"></param>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.IsAutoSave">
            <summary>
            Is this an AutoSave file?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.OriginalPath">
            <summary>
            Path name corresponding to file that created the AutoSave file (otherwise, just the original path)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Path.NewPath">
            <summary>
            Generate new AutoSave path based on the current path
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoSave.Manager.Suspend">
            <summary>
            Suspend the processing of events
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoSave.Manager.Resume">
            <summary>
            Resume the processing of events
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoSave.Manager.plural(System.UInt32,System.String)">
            <summary>
            Generate text handling non-plural form, i.e. 2 seconds, 1 second
            </summary>
            <param name="value">Value to display</param>
            <param name="unit">Text for units</param>
            <returns>Possibly pluralised string</returns>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Manager.IsAutoSaveOn">
            <summary>
            Return true if AutoSave is on in the options
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Manager.DocumentNeedsAutoSave">
            <summary>
            Does Document need auto saving (currently ignoring unnamed Documents)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Manager.IsRunning">
            <summary>
            Is App running a model (true if there is no app, or that play/fast forward is active)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoSave.Manager.SecondsToString(System.UInt32)">
            <summary>
            Convert time in seconds to a user friendly string
            </summary>
            <param name="time">Time in seconds</param>
            <returns>User friendly time sttring</returns>
        </member>
        <member name="P:Demo3D.Visuals.AutoSave.Manager.TitleText">
            <summary>
            Text to append to the title bar
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AutoSave.Manager.SetTitle">
            <summary>
            Update title bar in app
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BackgroundTaskViewer.BackgroundTaskViewerView">
            <summary>
            Interaction logic for BackgroundTaskViewerView.xaml
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BackgroundTaskViewer.BackgroundTaskViewerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BackgroundTaskViewer.BackgroundTaskState">
            <summary>
            The state of a background task.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BackgroundTaskViewer.IBackgroundProgress">
            <summary>
            Interface to update the progress of a background task.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BackgroundTaskViewer.IBackgroundProgress.ReportStatus(System.String)">
            <summary>
            Update the current status of the background task.
            </summary>
            <param name="status">The new status</param>
        </member>
        <member name="M:Demo3D.Visuals.BackgroundTaskViewer.IBackgroundProgress.ReportState(Demo3D.Visuals.BackgroundTaskViewer.BackgroundTaskState)">
            <summary>
            Update the current state of the background task
            </summary>
            <param name="state">The new state</param>
        </member>
        <member name="T:Demo3D.Visuals.BackgroundTaskViewer.IBackgroundTaskViewer">
            <summary>
            Interface for adding and removing tasks to the background task viewer.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BackgroundTaskViewer.IBackgroundTaskViewer.CreateBackgroundProgress(System.String,System.String,Demo3D.Visuals.BackgroundTaskViewer.BackgroundTaskState,System.Double,System.Boolean)">
            <summary>
            Create and add a background progress to the UI.
            </summary>
            <param name="title">The title of the task</param>
            <param name="initialStatus">The initial status</param>
            <param name="initialState">The initial state</param>
            <param name="maxProgress">Max progress, set to -1 to hide the progress bar</param>
            <param name="isPersistent">When persistent, the task will not be removed on a reset or opening a new model.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.BackgroundTaskViewer.IBackgroundTaskViewer.Remove(Demo3D.Visuals.BackgroundTaskViewer.IBackgroundProgress)">
            <summary>
            Remove a task
            </summary>
            <param name="progress">Task to remove from the viewer</param>
        </member>
        <member name="T:Demo3D.Visuals.BarrierProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BarrierVisual">
            <summary>
            Summary description for BarrierVisual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BarrierVisual.ResolvedLength">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BarrierVisual.ResolvedHeight">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BarrierVisual.ResolvedDepth">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BarrierVisual.Configure">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BarrierVisual.InstallConnectorListeners">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BarrierVisual.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BarrierVisual.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.AutoFitLength">
            <summary>
            When attached to a floor use its BarrierLength for the length.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.AutoFitHeight">
            <summary>
            When attached to a floor use its BarrierHeight for the height.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.AutoFitDepth">
            <summary>
            When attached to a floor use its BarrierDepth for the depth.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.Depth">
            <summary>
            The depth of the barrier.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.Height">
            <summary>
            The height of the barrier.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BarrierVisual.Length">
            <summary>
            The length of the barrier.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BarrierConnector">
            <summary>
            The connector on each edge of a floor visual to allow walls to be connected to floors
            be connected to each other.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BarrierEndConnector">
            <summary>
            The connector on each edge of a floor visual to allow walls to be connected to floors
            be connected to each other.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BarrierBoundaryConnector">
            <summary>
            The connector on each edge of a floor visual to allow walls to be connected to floors
            be connected to each other.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.LoadReleaseStrategy">
            <summary>
            Sequence - Release in the order they appear in the Items list.
            Distribution - Release using the quantity/total quantity as the probability that item will be released.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.LoadCreatorItem">
            <summary>
            Properties of an individual Load Creator Item.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorItem.Clone">
            <summary>
            Override ICloneable Clone method to copy load creator item.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BasicLoadCreatorProperties">
            <summary>
            Parameters for a load creation point.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.strategy">
            <summary>
            Sequence or Distribution release strategy
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.items">
            <summary>
            List of LoadCreatorItem
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.retryCreateAfter">
            <summary>
            If a load can't be created retry after 'n' seconds (default=1)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.firstLoadAfter">
            <summary>
            How many seconds to wait for the first load
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.releaseRate">
            <summary>
            Release loads every 'ReleaseRate' seconds
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.releaseRateVariability">
            <summary>
            Random adjustment to the 'ReleaseRate' in seconds
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.delayRate">
            <summary>
            Introduce a delay after 'DelayRate' loads created. Another name for this could be 'ReleaseCount'.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.delayRateCounter">
            <summary>
            Counter used to implement DelayRate, when this reaches 1, the delayDur will fire
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.delayRateVariability">
            <summary>
            Random adjustment to the 'DelayRate' in loads. Another name for this could be 'ReleaseCountVariability'.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.delayDur">
            <summary>
            How long to delay after 'DelayRate +/- DelayRateVariability' loads created.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.delayDurVariability">
            <summary>
            Random adjustment to 'DelayDur' in seconds.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.loadRotation">
            <summary>
            Initial orientation of a load
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.rotationVariability">
            <summary>
            Random adjustment to the initial orientation of a load
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.enabled">
            <summary>
            Is the load creator actively generating loads? Only used when the Owner cannot be found.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.sequenceNumber">
            <summary>
            Where are we in the current sequence?
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.inDelay">
            <summary>
            Set to true when a delay starts and false when the next load is created after a delay
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.deleteLoadsWhenFloorHit">
            <summary>
            Start delete timer when loads hit floor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.onLoadCreated">
            <summary>
            Script to fire when a load is created
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.onDelayStart">
            <summary>
            Script to fire when a delay starts
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.onDelayEnd">
            <summary>
            Script to fire when a delay ends
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BasicLoadCreatorProperties.ports">
            <summary>
            Support for PLC interface to control load generation.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ILoadCreator">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CreateLoadHandler">
            <summary>
            This is the delegate used to create loads.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.LoadCreationScheduler">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreationScheduler.Generator">
            <summary>
            Allow the random number generator to be overridden for load creation.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreationScheduler.Connected">
            <summary>
            Is the load creator connected to anything
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.WillGenerateLoads">
            <summary>
            Will the schedule and the property state generate any loads?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.NextItem">
            <summary>
            Pass call to sequence and distribution algorithms.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.TotalQuantity">
            <summary>
            The total number of loads in the sequence.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.Vary(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Random double in the range rate +/- variability.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.Vary(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Random int in the range rate +/- variability.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.ScheduleFirst">
            <summary>
            Schedule the first load in the to be created now
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.ScheduleNext">
            <summary>
            Schedule the next load to be created in the future
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.ScheduleBackoff">
            <summary>
            For some reason a load couldn't be created backoff for a 
            while and try again later.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreationScheduler.CreateLoad">
            <summary>
            Create a load at the load creation point if possible.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BasicLoadProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BasicLoadProperties.GetMeshKey">
            <summary>
            Use the same key as BoxProperties.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BasicLoadVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BasicLoadVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="F:Demo3D.Visuals.MeshIndexMode.None">
            <summary>The visual is rendered elsewhere. Eg. ControlPoint</summary>
        </member>
        <member name="F:Demo3D.Visuals.MeshIndexMode.Unbatched">
            <summary>The visual is rendered individually. Eg. DrawingBlockVisual, LoadCreator, PhotoEye</summary>
        </member>
        <member name="F:Demo3D.Visuals.MeshIndexMode.Batched">
            <summary>The visual is rendered as a batch. Eg ImportedMeshVisual, BoxVisual. The visual must be derived 
             from or an instance of MeshObject</summary>
        </member>
        <member name="T:Demo3D.Visuals.BBoxCollisionSpace">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BillOfMaterialsAspect.GetBillOfMaterialsDescription">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BillOfMaterialsAspect.GetBillOfMaterialsCode">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BillOfMaterialsAspect.GetBillOfMaterialsCost">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.BillOfMaterials.Plugin.BomControlWinForms.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BillOfMaterials.Plugin.BomControlWinForms.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Visuals.BillOfMaterials.Plugin.BomControlWinForms.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItemExpression.FindBindableItem(Demo3D.Visuals.Document,Demo3D.Script.DotNode)">
            <summary>
            Return the bindable property reference from a DotNode (or null).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItemExpression.FindBindableItems(Demo3D.Visuals.Document,Demo3D.Script.Statement)">
            <summary>
            Find visual bindable property references in a Statement.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsGeometryAspect">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;PhysicsGeometryAspect_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometryAspect.UseAncestorBody">
            <summary>Whether to allow the rigid body to be found on an ancestor visual (if false the geometry can only be used by this specific visual's physics body).</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometryAspect.ReportSpecificChildVisual">
            <summary>Whether the specific visual that blocked/cleared a collision sensor will be reported, even when it is set to UseAncestorBody=True.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometryAspect.FrictionMaterial">
            <summary>The friction material for the physics geometry.</summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGeometryAspect.DestroyStaticPhysics">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGeometryAspect.CreatePhysics">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BoxPhysicsAspect">
            <summary>Box physics geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxPhysicsAspect.Location">
            <summary>The (local) location for the box geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxPhysicsAspect.Rotation">
            <summary>The (local) rotation for the box geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxPhysicsAspect.Size">
            <summary>The dimensions for the box geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxPhysicsAspect.Scale">
            <summary>The scale for the box geometry.</summary>
        </member>
        <member name="T:Demo3D.Visuals.BoxTubeCollisionType">
            <summary>
            The physics primitive type to use for the box tube visual.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StylePropertyBase">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.StylePropertyValue">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.StylePropertyLayerValue">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Style">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.StyleManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.StyleEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BoxTubeCornerStyle">
            <summary>
            The corner style for a box tube visual.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BoxTubeEnd">
            <summary>
            The properties for the end of a box tube.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BoxTubeCorner">
            <summary>
            The properties for the corner of a box tube.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IStyled">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BoxTubeProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BoxTubeVisual">
            <summary>
            Extruded box visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BoxTubeVisual.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BoxTubeVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BoxTubeVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.StyleSetName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.StyleName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Style">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.StyleManager">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.SideXminVisible">
            <summary>Is the left side visible (X minimum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.SideXmaxVisible">
            <summary>Is the right side visible (X maximum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.SideZminVisible">
            <summary>Is the bottom side visible (Z minimum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.SideZmaxVisible">
            <summary>Is the top side visible (Z maximum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CornerStyle">
            <summary>The style of the corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CornerRadius">
            <summary>The radius of the corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.EndYmin">
            <summary>Description of how to render the bottom cap of the box tube (Minimum Y).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.EndYmax">
            <summary>Description of how to render the top cap of the box tube (Maximum Y).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CentreX">
            <summary>Description of how to render the bar at along the central X axis.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CentreZ">
            <summary>Description of how to render the bar at along the central Z axis.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CornerXminZmin">
            <summary>Description of how to render the bottom left corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CornerXminZmax">
            <summary>Description of how to render the top left corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CornerXmaxZmin">
            <summary>Description of how to render the bottom right corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CornerXmaxZmax">
            <summary>Description of how to render the top right corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Width">
            <summary>The width of the box tube (X axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Height">
            <summary>The height of the box tube (Y axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Depth">
            <summary>The depth of the box tube (Z axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Thickness">
            <summary>The thickness of the outer edges.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.OuterMaterial">
            <summary>The outer material used to render the box tube. The center x and z materials can be used to configure the inner material for the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Color">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Dimensions">
            <summary>The width, height and depth of the box tube as a Vector3.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CollisionType">
            <summary>Hints at the type of physics collision geometry to be used. Selecting "Bounding Box" will usually yield the greatest performance, although the geometry will usually poorly approximate the mesh. The "Convex-Hull" option usually provides the best trade-off in terms of accuracy and performance. You may select "Convex-Hull Decomposition" to achieve greater accuracy, whilst "Triangle Mesh" should only be used in specific cases.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.ConvexHullDecomposition">
            <summary>Parameters that control the fidelity when decomposing the mesh into a set of convex-hulls.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Density">
            <summary>The density of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CurveAngle">
            <summary>When non zero this extrudes the box tube around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.CurveRadius">
            <summary>When CurveAngle is non zero this extrudes the box tube around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.NumSegments">
            <summary>When CurveAngle is non zero this extrudes the box tube around a curve with a radius of CurveRadius with this number of segments to the box tube. The default is 20.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Skew">
            <summary>The skew in X and Z of the top of the box tube (maximum Y) from the bottom of the box tube (minimum Y).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxTubeVisual.Scale">
            <summary>The ratio in X and Z of the top of the box tube (maximum Y) to the bottom of the box tube (minimum Y).</summary>
        </member>
        <member name="T:Demo3D.Visuals.BoxTextureMode">
            <summary>
            The texture mapping algorithm to use for the box visual.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BoxProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BoxVisual">
            <summary>
            The physics primitive type to use for the box visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BoxVisual.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BoxVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Props">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BoxVisual.AttachToProperties">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.ControlPoints">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BoxVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BoxVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BoxVisual.IsPhysicsDefinitelyDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Volume">
            <summary>
            The volume of the BoxVisual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.SurfaceArea">
            <summary>
            The surface area of the BoxVisual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.CellsWide">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.CellsHigh">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.CellsDeep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Width">
            <summary>The width of the box (X axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Height">
            <summary>The height of the box (Y axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Depth">
            <summary>The depth of the box (Z axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Material">
            <summary>The color and texture of the box.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.ExtraMaterials">
            <summary>Used when TextureMode is set to something other than Default.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.TextureMode">
            <summary>Default just uses Material on each face. DVD uses Material as the texture for the back, spine and front, and ExtraMaterials[0] for the other faces. Letter uses Material for the top, ExtraMaterial[0] for the bottom and ExtraMaterial[1] for the sides.</summary>
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Color">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Dimensions">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.BoxVisual.Density">
            <summary>The mass per unit volume of the box. The mass is calculated from the volume of the box.</summary>
        </member>
        <member name="T:Demo3D.Visuals.CameraProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CameraVisual">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Camera">
            <summary>
            Class for managing the state of a camera.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Camera.DefaultFovY">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.Camera.DefaultUpVector">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Camera.PreRender(Demo3D.Visuals.IView)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Camera.Position">
            <summary>
            The Camera Position in X,Y,Z coordinates, looking at the origin.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Camera.Target">
            <summary>
            The Camera Translation in X,Y,Z coordinates away from origin.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Camera.HeadYawPitchRoll">
            <summary>
            Camera rotation offset useful for VR headsets (in radians).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Camera.FovY">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Camera.FieldOfViewY">
            <summary>
            The field of view Y in degrees.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Camera.Aperture">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Camera.BlurSamples">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Camera.NearClippingDistance">
            <summary>
            The near clipping distance for the orthographic camera.
            This defaults to 0, which means no clipping regardless of the distance of the camera
            from the focal point. Any other value sets the near clipping plane to that value.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Camera.FarClippingDistance">
            <summary>
            The near clipping distance for the orthographic camera.
            This defaults to 0, which means no clipping regardless of the distance of the camera
            from the focal point. Any other value sets the near clipping plane to that value.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Camera.Zoom(System.Double)">
            <summary>
            Get closer or further away from the target.
            </summary>
            <param name="z">Distance to move.</param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.ZoomAlong(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Get closer along an axis towards a world location.
            </summary>
            <param name="dir">Direction vector for camera.</param>
            <param name="worldLoc">World location to look at.</param>
            <param name="z">Distance from world location along dir vector.</param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.Pan(Microsoft.DirectX.Vector3)">
            <summary>
            Move the camera perpendicular to the camera/target vector.
            </summary>
            <param name="trans">Distance to move the camera position and target in world coordinates (meters).</param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.Rotate(System.Double,System.Double)">
            <summary>
            Rotate the camera position keeping the target at the center.
            </summary>
            <param name="yaw">Yaw around the y-axis, in radians.</param>
            <param name="pitch">Pitch around the x-axis, in radians.</param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.RotateSnapped(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rotate and snap to angle intervals the camera position keeping the target at the center.
            </summary>
            <param name="initialYaw">Initial yaw when starting the rotation, in radians.</param>
            <param name="initialPitch">Initial pitch when starting the rotation, in radians</param>
            <param name="totalYaw">Total yaw since rotation started, in radians.</param>
            <param name="totalPitch">Total pitch since rotation started, in radians.</param>
            <param name="snapInterval">Angle interval to snap to, in radians.</param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.RotateOffCenter(System.Double,System.Double,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Camera.RotateAroundOffCenter(System.Double,System.Double,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Camera.RotateCamera(System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Camera.SetFromVisual(Demo3D.Visuals.Visual)">
            <summary>
            Place the camera at the same position and orientation as the visual (looking down its positive Z axis).
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.Walk(System.Double,System.Double,System.Boolean)">
            <summary>
            Move camera and target/focus around in the X/Z plane as if walking.
            </summary>
            <param name="x">Distance to move left/right.</param>
            <param name="z">Distance to move forward/backward.</param>
            <param name="maintainY">Maintain direction of Y-Axis</param>
        </member>
        <member name="P:Demo3D.Visuals.Camera.HeadTarget">
            <summary>
            Calculate the head target given the HeadYawPitchRoll offset for VR.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Camera.Rotation">
            <summary>
            Calculate the current rotation of the camera.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Camera.GetMatrix">
            <summary>
            Get the matrix to position the camera.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Camera.PlanViewRotation">
            <summary>
            Rotation of Plan View (in radians)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Camera.GetAxes(Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Get the rotation axes including the HeadYawPitchRoll offset.
            </summary>
            <param name="viewVector">The forward vector of the camera.</param>
            <param name="rightVector">The right vector of the camera.</param>
            <param name="upVector">The up vector of the camera.</param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.GetBodyAxes(Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Get the rotation axes excluding the HeadYawPitchRoll offset.
            </summary>
            <param name="viewVector">The forward vector of the camera.</param>
            <param name="rightVector">The right vector of the camera.</param>
            <param name="upVector">The up vector of the camera.</param>
        </member>
        <member name="M:Demo3D.Visuals.Camera.GetBodyMatrix">
            <summary>
            Get the orientation of the camera body without the HeadYawPitchRoll offset.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Camera.EnsureValid">
            <summary>
            Make sure that there are no Infinity or NaN in the camera components.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Camera.ToString">
            <summary>
            String version of the camera position.
            </summary>
            <returns>String version of the camera position.</returns>
        </member>
        <member name="T:Demo3D.Visuals.CanvasProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FactoryEventArgs">
            <summary>
            Arguments to an event updating the visual factories for a catalog.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.FactoryDelegate">
            <summary>
            Delegate for notifying listeners of Catalog factory change events.
            </summary>
            <param name="sender">Catalog to which a visual factor has been added or removed.</param>
            <param name="args">The visual factory that has been added or removed.</param>
        </member>
        <member name="T:Demo3D.Visuals.Catalog">
            <summary>
            Class for implementing a persistent collection of visual factory objects.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Catalog.FactoryAdded">
            <summary>
            Called when a visual factory has been added to the catalog.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Catalog.FactoryRemoved">
            <summary>
            Called when a visual factory has been removed from the catalog.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Catalog.FolderRemoved">
            <summary>
            Called when a folder has been removed from the catalog.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Catalog.NeedsSaveListeners">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Catalog.Folder">
            <summary>
            Class for implementing a folder or visual factories and folders within a catalog.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Folder.Parent">
            <summary>
            Parent folder in the catalog (or empty for no parent).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Folder.Name">
            <summary>
            Name of the folder in the catalog.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Folder.FullName">
            <summary>
            The full path of the folder in the catalog (made from Parent and Name).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.Folder.ToString">
            <summary>
            Returns the FullName of the catalog folder.
            </summary>
            <returns>Returns the FullName of the catalog folder.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.Folder.MakeName(System.String,System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Folder.IsRoot">
            <summary>
            Whether the folder is at the top level of the catalog or not.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Catalog.FileExtension">
            <summary>
            The file extension to be used for catalogs including the '.'/period.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Catalog.FileExtensionXml">
            <summary>The file extension to be used for catalogs in source control format including the '.'/period.</summary>
        </member>
        <member name="F:Demo3D.Visuals.Catalog.CurrentFileFormat">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Catalog.PathName">
            <summary>
            The full path of the catalog on disk.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.ThrowIfReadOnly">
            <summary>
            This should always be called before allowing modifications to the catalog.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.IsLoading">
            <summary>
            Indicates if LoadFromFile is in progress
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Catalog.SignedAs">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Catalog.#ctor(Demo3D.Visuals.IBuilder,System.String)">
            <summary>
            Create a new catalog.
            </summary>
            <param name="app">Application to create the catalog for.</param>
            <param name="pathName">The full path of the catalog on disk for use when saving.</param>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.Dispose">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Catalog.App">
            <summary>The application object that this catalog is attached to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Name">
            <summary>The name of the catalog.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Image">
            <summary>The icon image to use for the catalog in the catalog explorer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Resources">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Notes">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Catalog.Notes.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.ReadOnly">
            <summary>Whether the catalog can be edited or not. This is read from the read-only state of the catalog file on disk initially.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.InitialFileFormat">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Catalog.HasChangedOnDisk">
            <summary>Whether the original catalog file on disk has changed since the catalog was loaded. This may have happened if more than one instance of the application is running.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.HasErrors">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Version">
            <summary>The version number of the catalog.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Description">
            <summary>A description of the catalog.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Author">
            <summary>The name of the author that last edited in the catalog.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.NeedsSave">
            <summary>Whether the catalog has been modified and needs saving to disk since it was last loaded.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.RenameFolder(System.String,System.String)">
            <summary>
            Rename the specified folder, remaining in same parent folder.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Catalog.Item(System.Int32)">
            <summary>
            Indexer declaration to get the nth VisualFactory from a catalog.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.FindLoadFactoryIndexes(Demo3D.Visuals.IBuilder,Demo3D.Visuals.SharedResources)">
            <summary>
            Return a list of int indexes of visual factories which represent loads.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.AttemptCompileAll(System.Boolean,System.Boolean)">
            <summary>
            Attempt to compile all the scripts within this catalog.
            </summary>
            <param name="force">Compile the scripts even if they are already compiled.</param>
            <param name="fix">Attempt to automatically fix scripts.</param>
            <remarks>This looks very similar to Demo3D.Gui.Controls.CatalogLoader.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.Save(Demo3D.Common.Serializer,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Catalog.Save(System.String,System.Drawing.Image,System.Boolean)">
            <summary>
            DO NOT make public. Recommended to have <paramref name="throwIfReadOnly" /> true.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Catalog.FactoriesSerializer">
            <summary>
            Class for serializing and deserializing the "Factories" entry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.FactoriesSerializer.#ctor">
            <summary>
            Initializes a new instance of the FactoriesSerializer class for serializing factories.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.FactoriesSerializer.#ctor(Demo3D.Visuals.Catalog)">
            <summary>
            Initializes a new instance of the FactoriesSerializer class for deserializing factories.
            </summary>
            <param name="catalog"></param>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.FactoriesSerializer.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Deserializes a catalog's "Factories" entry.
            </summary>
            <param name="entryReader">A SerializerEntryReader for reading the entry corresponding to this object..</param>
            <returns>null, as no factories object is needed.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.FactoriesSerializer.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes a catalog's factories.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="value">The object to serialize.</param>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Catalog.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Catalog.LoadedHeader">
            <summary>The state of the catalog when it was last loaded.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Catalog.SetSignedAs(System.String)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.TagsCollection">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ChainConveyorProperties">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ChainConveyor">
            <summary>
            Class encapsulating the physics and rendering of a chain conveyor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.CloneAsCurve">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.LeftSideWidth">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.RightSideWidth">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.LeftSideStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.RightSideStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.LeftSideHeight">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.RightSideHeight">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.SideModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.AdjustConnectorPositions">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.GetSidePhysicsWidthOffset(Demo3D.Visuals.ConveyorSideProperties)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.GetCenterPhysicsWidthtOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.SurfaceLength">
            <summary>
            Circumference of the whole belt.
            </summary>
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.UseSurfaceMaterial">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.UseSurfaceSideMaterial">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.CreateNonCachedMeshes">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainConveyor.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.ChainWidth">
            <summary>The width of a single chain.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.ChainThickness">
            <summary>The thickness or height of the chain.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainConveyor.ChainColor">
            <summary>The color of the chain.</summary>
        </member>
        <member name="T:Demo3D.Visuals.ChainJointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ChainRevoluteJointProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainJointVisual.CreatePhysicsJoints">
            <summary>
            Destroys any existing physics joints and creates all the physics joints.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainJointVisual.DestroyPhysicsJoints">
            <summary>
            Destroys all physics joints.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainJointVisual.AfterCreatePhysics(Demo3D.Visuals.PhysicsObject)">
            <summary>
            Updates the flags that indicate whether the links have had their physics created and
            creates or destroys joints accordingly.
            </summary>
            <param name="link">The link that has had its physics created.</param>
        </member>
        <member name="M:Demo3D.Visuals.ChainJointVisual.BeforeDestroyPhysics(Demo3D.Visuals.PhysicsObject)">
            <summary>
            Updates the flags that indicate whether the links have had their physics created and
            creates or destroys joints accordingly.
            </summary>
            <param name="link">The link that is about to have its physics destroyed.</param>
        </member>
        <member name="M:Demo3D.Visuals.ChainJointVisual.CreateOrDestroyPhysicsJoints">
            <summary>
            Creates or destroys physics joints according to whether both links have had their
            physics created.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainJointVisual.UpdatePhysicsFlags">
            <summary>
            Called whenever the link properties for the joint are changed. Updates the flags that
            indicate whether physics has been created for the links and creates or destroys physics
            joints accordingly.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ChainTransferProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ChainTransferVisual">
            <summary>
            Class encapsulating the behavior of 90 degree chain transfer conveyor visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ChainTransferVisual.activateBinding">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.Motor">
            <summary>The speed, direction and power status of the transfer chain's motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.IsActivated">
            <summary>Whether or not the chain transfer is up (or moving to the up position).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.IsInTransit">
            <summary>Whether or not the chain transfer is moving between the up and down positions.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.IsInUpPosition">
            <summary>Whether or not the chain transfer is at its up position.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.IsInDownPosition">
            <summary>Whether or not the chain transfer is at its down position.</summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.Reset">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.Dispose">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.AttachToProperties">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.Props">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.ChainLength">
            <summary>The length of the transfer chain.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.CurrentLiftPosition">
            <summary>The physical position of the lift. The lift is at position 0 when down.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.LiftState">
            <summary>The logical position of the lift. The lift can be either Up, Down or InTransit.</summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.CreateMovementSurface">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.LeftSideWidth">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.RightSideWidth">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.LeftSideStep">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.RightSideStep">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.LeftSideHeight">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.RightSideHeight">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.Width">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ChainTransfer.Width.Description&quot;]/value" /></summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.SurfaceLength">
            <summary>
            Circumference of the whole chain.
            </summary>
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.UseSurfaceMaterial">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.UseSurfaceSideMaterial">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.CreatePhysics(System.Boolean,System.Boolean)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.IsPhysicsDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.AttachedVisual">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.DetachFromVisual">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.AttachDirection">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.AttachType">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.SidesReversed">
            <summary>
            When snapped, the local angle is either 0 or 180 degrees. 
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.ContextMenuLiftUpDown">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.Scan">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.ScanAccept">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.ScanProcess">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.ScanDeliver">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTransferVisual.SetScanNeededOnAttached">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.InitialLiftState">
            <summary>The position of the lift after a project reset.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.LiftHeight">
            <summary>The distance above the conveyor surface that the chain lifts to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.LiftDuration">
            <summary>Duration of the lifting sequence.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.RestHeight">
            <summary>The distance below the conveyor surface that the chain descends to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.AttachOffset">
            <summary>Attach the chain with an offset from the conveyor center. This can be used to get a chain to overlap two conveyors.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.CutWidthFactor">
            <summary>The ratio of the width of the chain to the width of any conveyor cutouts. 1.0 means cut the same width as the chain, 1.5 means an extra 50%, etc.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.SnapToRollers">
            <summary>If true then the chain transfer will only appear between the rollers. If false the transfer can be positioned inside a roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.CutConveyorForwards">
            <summary>When attached to a conveyor should a cutout be made in the direction of the chain motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.CutConveyorReverse">
            <summary>When attached to a conveyor should a cutout be made opposite to the direction of the chain motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.ChainCount">
            <summary>The number of chains to show.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.ChainSeparation">
            <summary>The internal distance between the chains.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.ChainWidth">
            <summary>The width of a single chain.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.ChainThickness">
            <summary>The thickness (or height) of the chain.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.ChainLengthFactor">
            <summary>The length of the transfer chain expressed as a fraction of the parent conveyor's width.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.TransferDuration">
            <summary>Duration of the transfer sequence. The chain will at the correct speed in order to make the transfer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.MaxForce">
            <summary>The maximum force used by the lift when operating.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.Density">
            <summary>The mass of the lift per unit volume.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.Mass">
            <summary>The mass of the chain transfer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.Kinematic">
            <summary>Move the chain transfer kinematically instead of dynamically which means the lift will move with infinite force.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.OnLiftUp">
            <summary>Occurs when the lift reaches the up position.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTransferVisual.OnLiftDown">
            <summary>Occurs when the lift reaches the down position.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Clipboard">
            <summary>
            Clipboard is the class that gets serialized to/from the Windows clipboard
            and contains an XML definition of the selection.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.CopyToXmlDocument(System.Collections.IList,Demo3D.Visuals.SharedResources,System.Object,System.Boolean)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Create an XML Document from a list of visuals, embedding the shared resources
            (meshes, images, etc.) if an external shared resource object not provided.
            </summary>
            <param name="selection">List of Visuals to be serialized.</param>
            <param name="srcRes">This is the source for visual resources.</param>
            <param name="extraData"></param>
            <param name="visualsOnly"></param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.CopyToXmlDocumentStream(System.Collections.IList,Demo3D.Visuals.SharedResources,System.Object,System.Boolean)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Create an XML Document from a list of visuals, embedding the shared resources
            (meshes, images, etc.) if an external shared resource object not provided.
            </summary>
            <param name="selection">List of Visuals to be serialized.</param>
            <param name="srcRes">This is the source for visual resources.</param>
            <param name="extraData"></param>
            <param name="visualsOnly"></param>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.Clipboard.lastClipboard">
            <summary>
            Workaround for clipboard size limits when copying large models/selections.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.CopyToClipboard(System.Collections.ArrayList,System.Object)">
            <summary>
            Copy the list of visuals to the Windows clipboard.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.CopyFactoriesToClipboard(Demo3D.Visuals.SharedResources,Demo3D.Visuals.IDisplay,System.Collections.ArrayList,System.Object)">
            <summary>
            Copy the list of visual factories to the Windows clipboard.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.PointsInternally(System.Collections.ArrayList,Demo3D.Visuals.Visual)">
            <summary>
            Is visual either directly in the visual list, or an ancestor of one of the visuals in the visual list
            (Used to see if we should clear listeners, or leave them because they are internal to the visuals being copied)
            </summary>
            <param name="visuals">List of visuals to check</param>
            <param name="visual">Visual to</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.UnwrappedPasteFromXmlDocument(Demo3D.Visuals.Document,System.String,Demo3D.Visuals.SharedResources,Demo3D.Visuals.VisualRenameRule,System.Object@,System.Boolean)">
            <summary>
            <para>DO NOT CALL DIRECTLY</para>
            <para>
            Call via the wrapper above <see cref="M:Demo3D.Visuals.Clipboard.PasteFromXmlDocument(Demo3D.Visuals.Document,System.String,Demo3D.Visuals.SharedResources,Demo3D.Visuals.VisualRenameRule,System.Object@,System.Boolean)" />.
            </para>
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.PasteFromClipboard(Demo3D.Visuals.Document,System.Object@)">
            <summary>
            Return the list of visuals that are on the Windows clipboard.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.GetClipboardXml">
            <summary>
            Get the current pastable selection from the clipboard if there is one.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Clipboard.CanPasteFromClipboard">
            <summary>
            Does the Windows clipboard contain a set of visuals or not?
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectionsEditor">
            <summary>
            Interaction logic for ConnectionsEditor.xaml
            </summary>
            <summary>
            ConnectionsEditor
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionsEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IConnectable">
            <summary>
            Implemented by objects that can be connected to other IConnectable objects (normally Visuals).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectedListener">
            <summary>
            Connection notifications; the two argument connectors have been connected.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.DisconnectedListener">
            <summary>
            Disconnection notifications; the two argument connectors have been disconnected.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectorAlignmentStyle">
            <summary>
            Represents the way in which objects align with each other when they snap together. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorAlignmentStyle.Complete">
            <summary>
            The object being moved rotates such that its normal is completely opposite to the other object's normal.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorAlignmentStyle.Horizontal">
            <summary>
            The object being moved rotates only about the Y-axis.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorAlignmentStyle.None">
            <summary>
            The object being moved does not require alignment.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectorSnapStyle">
            <summary>
            Represents the way in which objects snap together when connecting. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorSnapStyle.Complete">
            <summary>
            The object being moved is translated so the joining connectors are snapped together.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorSnapStyle.Horizontal">
            <summary>
            The object being moved is translated only across the xz plane. This is useful for vertical lifts where connectors can be various heights.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorSnapStyle.None">
            <summary>
            The object being moved doesn't snap into position.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectionReference">
            <summary>
            Reference to a connector that contains all necessary information required to reconnect or disconnect the connector in full at a later time. 
            </summary>
            <remarks>
            This class is similar to <see cref="T:Demo3D.Visuals.ConnectorReference" />, but also stores references to the connectors to which the reference connector is connected.
            <list type="bullet">
            <item><description>Used to undo/redo deleted connectors.</description></item>
            <item><description>The initial connector ordering is retained.</description></item>
            </list>
            </remarks>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.ConnectionReference.document">
            <summary>
            Document to which the visual of the connector belonged.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectionReference.parentID">
            <summary>
            Unique ID of the visual to which the connector belonged.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectionReference.name">
            <summary>
            The name of the connector.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectionReference.connections">
            <summary>
            List of connectors that the connector was connected to.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectionReference.indices">
            <summary>
            List of indicies corresponding to the position of the connector in each of the connections above.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.#ctor">
            <summary>
            Default constructor as required for deserialization.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.#ctor(Demo3D.Visuals.Document,Demo3D.Visuals.Connector)">
            <summary>
            Constructor.
            </summary>
            <param name="document">The document to which the visual of the connector belonged.</param>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.ConnectBidirectional">
            <summary>
            Restores the connections that were present at the time the ConnectionReference was created.
            </summary>
            <remarks>
            Some older components, such as the Mezzanine, are loaded in with unidirectional connections.
            <list type="bullet">
            <item><description>Attempts to restore conections bidirectionally where they don't already exist.</description></item>
            <item><description>Only retores the unidirectional connection if a bidirectional connection was not present to begin with.</description></item>
            <item><description>The order of the connections is preserved.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.DisconnectBidirectional">
            <summary>
            Removes the connections that were present at the time the ConnectionReference was created.
            </summary>
            <remarks>
            <list type="bullet">
            <item><description>Removes connections bidirectionally where they currently exist.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Used to load the ConnectionReference from a serialized string.
            </summary>
            <param name="entryReader">Serialization entry reader.</param>
            <returns>The deserialized ConnectionReference object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Used to write the ConnectionReference to a serialized string.
            </summary>
            <param name="serializer">The serializer.</param>
            <param name="value">Unused.</param>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.Equals(System.Object)">
            <summary>
            Whether two ConnectionReference reference the same connector.
            </summary>
            <param name="obj">The other ConnectionReference to compare for equality against.</param>
            <returns>True if the two ConnectionReference reference the same connector, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectionReference.GetHashCode">
            <summary>
            Dummy <see cref="M:System.Object.GetHashCode" /> implemention to avoid compiler warning.
            <para>It is not correct due to the <see cref="M:Demo3D.Visuals.ConnectionReference.Equals(System.Object)" />
            method on this class; if a.Equals(b) is true then a.GetHashCode() *must* equal b.GetHashCode()
            for successful use within a <see cref="T:System.Collections.Generic.Dictionary`2" /> type object.
            </para>
            </summary>
            <remarks>Will throw an exception in DEBUG mode.</remarks>
            <returns>A hash code for the current object.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConnectorReference">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorReference.ReadPostProcess(Demo3D.Common.Serializer)">
            <summary>
            Tries to find and assign the connector that this instance references.
            If this instance is deserialized before the referenced connector is, then call this method after deserializing is complete to go and find the connector.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorReference.ReadPostProcess(Demo3D.Visuals.Document)">
            <summary>
            Tries to find and assign the connector that this instance references.
            If this instance is deserialized before the referenced connector is, then call this method after deserializing is complete to go and find the connector.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorReference.Equals(System.Object)">
            <summary>
            Whether the specified connector reference references the same connector.
            </summary>
            <remarks>
            Two connector references are determined to reference the same connector if they have the same connector name on the same parent.
            </remarks>
            <param name="obj">The other connector reference to compare for equality against.</param>
            <returns>True if the two connector references reference the same connector, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorReference.GetHashCode">
            <summary>
            Dummy <see cref="M:System.Object.GetHashCode" /> implemention to avoid compiler warning.
            <para>It is not correct due to the <see cref="M:Demo3D.Visuals.ConnectorReference.Equals(System.Object)" />
            method on this class; if a.Equals(b) is true then a.GetHashCode() *must* equal b.GetHashCode()
            for successful use within a <see cref="T:System.Collections.Generic.Dictionary`2" /> type object.
            </para>
            </summary>
            <remarks>Will throw an exception in DEBUG mode.</remarks>
            <returns>A hash code for the current object.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.TransferDirection">
            <summary>
            Direction transfers can be made in or out of a connector (or neither or both).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.TransferDirection.None">
            <summary>
            No transfers should be made through this connector.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.TransferDirection.In">
            <summary>
            This connector allows incoming transfers.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.TransferDirection.Out">
            <summary>
            This connector allows outgoing transfers.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.TransferDirection.InOut">
            <summary>
            This connector allows incoming and outgoing transfers.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectorPair">
            <summary>
            Represents a pair of connectors.
            This class is used in some algorithms that reason about connector paths.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorPair.From">
            <summary>
            The from connector.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConnectorPair.To">
            <summary>
            The to connector.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorPair.#ctor(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <summary>
            Construct a connector pair.
            </summary>
            <param name="from">The from connector.</param>
            <param name="to">The to connector.</param>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorPair.ToString">
            <summary>
            A string of "from -&gt; to".
            </summary>
            <returns>A string of "from -&gt; to".</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorPair.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorPair.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorPair.op_Equality(Demo3D.Visuals.ConnectorPair,Demo3D.Visuals.ConnectorPair)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorPair.op_Inequality(Demo3D.Visuals.ConnectorPair,Demo3D.Visuals.ConnectorPair)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Connector">
            <summary>
            Represents a location on an IConnectable object that another IConnectable
            object can connect to, via a suitable Connector of its own.
            
            When two Connectors are connected, their owning objects must be translated
            in space so that the respective Connector Location points coincide.
            
            Additionally, the orientation Normal may be used to align the two objects.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Connector.Alignment">
            <summary>
            Controls how to align two IConnectable objects (Visuals) when calling Connector.Connect().
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Connector.Alignment.None">
            <summary>
            No alignment should be made.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Connector.Alignment.Closest">
            <summary>
            The IConnectables should be aligned. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Connector.Alignment.Inline">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Connector.PropertyWrapperType">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.Disconnect(Demo3D.Visuals.IConnectable,System.String)">
            <summary>
            Disconnect a named connector.
            </summary>
            <param name="from">Owner of the connector.</param>
            <param name="fromName">Name of the connector to disconnect.</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.Connect(Demo3D.Visuals.IConnectable,System.String,Demo3D.Visuals.IConnectable,System.String,System.Boolean,System.Boolean)">
            <summary>
            Connect two named connectors together with parameters determining whether and how the connectables (Visuals) should move when aligned.
            </summary>
            <param name="from">From IConnectable (Visual).</param>
            <param name="fromName">From connector name.</param>
            <param name="to">To IConnectable (Visual).</param>
            <param name="toName">To connector name.</param>
            <param name="align">Should the IConnectable objects (Visuals) be aligned based on the connector.</param>
            <param name="allowMultiple">Should this connection be added to existing connectors or replace all existing connections.</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.Connect(Demo3D.Visuals.IConnectable,System.String,Demo3D.Visuals.IConnectable,System.String,Demo3D.Visuals.Connector.Alignment,System.Boolean)">
            <summary>
            Connect two named connectors together with parameters determining whether and how the connectables (Visuals) should move when aligned.
            </summary>
            <param name="from">From IConnectable (Visual).</param>
            <param name="fromName">From connector name.</param>
            <param name="to">To IConnectable (Visual).</param>
            <param name="toName">To connector name.</param>
            <param name="align">How to align from and to.</param>
            <param name="allowMultiple">Should this connection be added to existing connectors or replace all existing connections.</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.Connect(Demo3D.Visuals.IConnectable,System.String,Demo3D.Visuals.IConnectable,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Connect two named connectors together with parameters determining whether and how the connectables (Visuals) should move when aligned.
            </summary>
            <param name="from">From IConnectable (Visual).</param>
            <param name="fromName">From connector name.</param>
            <param name="to">To IConnectable (Visual).</param>
            <param name="toName">To connector name.</param>
            <param name="align">Should the IConnectable objects (Visuals) be aligned based on the connector.</param>
            <param name="allowMultiple">Should this connection be added to existing connectors or replace all existing connections.</param>
            <param name="centerSnap">Snap connector to center of other connector instead of the closest point on the connection line.</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.Connect(Demo3D.Visuals.IConnectable,System.String,Demo3D.Visuals.IConnectable,System.String,Demo3D.Visuals.Connector.Alignment,System.Boolean,System.Boolean)">
            <summary>
            Connect two named connectors together with parameters determining whether and how the connectables (Visuals) should move when aligned.
            </summary>
            <param name="from">From IConnectable (Visual).</param>
            <param name="fromName">From connector name.</param>
            <param name="to">To IConnectable (Visual).</param>
            <param name="toName">To connector name.</param>
            <param name="align">Should the IConnectable objects (Visuals) be aligned based on the connector</param>
            <param name="allowMultiple">Should this connection be added to existing connectors or replace all existing connections.</param>
            <param name="centerSnap">Snap connector to center of other connector instead of the closest point on the connection line.</param>
        </member>
        <member name="T:Demo3D.Visuals.Connector.ProximityInfo">
            <summary>
            Class representing the results of Connector.Closest to find the closest connectors between two Visuals (IConnectables).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Connector.Closest(Demo3D.Visuals.IConnectable,Demo3D.Visuals.IConnectable)">
            <summary>
            Find the closest connectors between two IConnectable objects (normally Visuals).
            </summary>
            <param name="a">First connectable.</param>
            <param name="b">Second connectable.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ToVisualLocation">
            <summary>
            The center of the connector as a VisualLocation.
            </summary>
            <returns>The center of the connector as a VisualLocation.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Connector.Find(Demo3D.Visuals.Connector[],System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.Find(Demo3D.Visuals.IConnectable,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.IsConnectableConnected(Demo3D.Visuals.IConnectable)">
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.Connector.ConnectedListeners">
            <summary>
            Called when this connector is connected to.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Connector.DisconnectedListeners">
            <summary>
            Called just before this connector is disconnected from.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Connector.AfterDisconnectedListeners">
            <summary>
            Called just after this connector is disconnected from.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.MaxAllowedConnections">
            <summary>
            Optional limit to the number of connectors that this connector can connect to.
            This is int.MaxValue by default making it effectively unlimited.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Connectors">
            <summary>
            All connectors that are connected to this one.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Name">
            <summary>
            The name of the connector.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.ConnectedTo">
            <summary>
            The first connector this connector is connected to, or null if no connected at all.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.WidthFactor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Connector.AlignmentStyle">
            <summary>Defines the manner in which objects align to each other when snapped together.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.SnapStyle">
            <summary>Defines the manner in which objects snap to each other when connecting.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.DefaultAlignmentStyle">
            <summary>
            Gets the default alignment style for this connector.
            </summary>
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Connector.DefaultSnapStyle">
            <summary>
            Gets the default snap style for this connector.
            </summary>
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Connector.ConnectionWorldLocation">
            <summary>If connected then this is the effective location of the connection in world coordinates.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Connector.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.#ctor(Demo3D.Visuals.Visual,System.String,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Create a new connector.
            </summary>
            <param name="parent">Visual to add connector to.</param>
            <param name="name">Name of connector.</param>
            <param name="start">Connector start location relative to parent visual.</param>
            <param name="end">Connector end location relative to parent visual.</param>
            <param name="normal">Connector normal relative to parent visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ToString">
            <summary>
            Connected "name:visual" string.
            </summary>
            <returns>Connected "name:visual" string.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Enabled">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Connector.IsConnected">
            <summary>
            Is this connector connected to other connectors?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Center">
            <summary>Mid-point between Start and End locations in the visual's space.</summary>
            <returns>Center of the connector</returns>
        </member>
        <member name="P:Demo3D.Visuals.Connector.WorldCenter">
            <summary>
            Get the center of the connector in world coordinates
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.WorldStart">
            <summary>
            Get the start of the connector in world coordinates.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.WorldEnd">
            <summary>
            Get the end of the connector in world coordinates.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Length">
            <summary>
            Get the length of the connector.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.WorldNormal">
            <summary>
            The world normal of the connector.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ApplyOffsets">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.CanConnectTo(Demo3D.Visuals.Connector)">
            <summary>
            Indicate if the two Connectors may actually be connected. This allows
            connectors for different purposes. The GUI may use this to provide visual
            feedback when the user drags an object near to another object.
            </summary>
            <param name="c">The connector to test</param>
            <returns>true if the connectors may be connected</returns>
        </member>
        <member name="M:Demo3D.Visuals.Connector.IsMatch(System.String,System.String[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AngularDistanceFrom(Demo3D.Visuals.Connector)">
            <summary>
            Find distance between the world normals as the difference between their
            world-Y rotations, snapped to 5 degree increments
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Connector.DistanceFrom(Demo3D.Visuals.Connector)">
            <summary>
            Calculates the distance of the centers of this connector to
            the extents (start-&gt;end) of another connector.
            </summary>
            <param name="c">The remote connector</param>
            <returns>Distance between this connector and connector c</returns>
        </member>
        <member name="M:Demo3D.Visuals.Connector.NotifyDisconnectEachWay(Demo3D.Visuals.Connector)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.NotifyConnectEachWay(Demo3D.Visuals.Connector)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.ConnectTo(Demo3D.Visuals.Connector,System.Boolean)">
            <summary>
            Connect two objects together. The method must take care of the placement and
            orientation of the respective visual objects.
            </summary>
            <param name="c">The Connector of the existing placed Object</param>
            <param name="align">Align the connectors on connect</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ConnectTo(Demo3D.Visuals.Connector,System.Boolean,System.Boolean)">
            <summary>
            Connect two objects together. The method must take care of the placement and
            orientation of the respective visual objects.
            </summary>
            <param name="c">The Connector of the existing placed Object</param>
            <param name="align">Align the connectors on connect</param>
            <param name="allowMultiple">Allow multiple connections</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ConnectTo(Demo3D.Visuals.Connector,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Connect two objects together. The method must take care of the placement and
            orientation of the respective visual objects.
            </summary>
            <param name="c">The Connector of the existing placed Object</param>
            <param name="align">Align the connectors on connect</param>
            <param name="allowMultiple">Allow multiple connections</param>
            <param name="centerSnap">Snap connector to center of object</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ConnectTo(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector.Alignment)">
            <summary>
            Connect this and another connector together.
            </summary>
            <param name="c">The Connector to connect to</param>
            <param name="alignment">How to align the connectors on connect</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ConnectTo(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector.Alignment,System.Boolean,System.Boolean)">
            <summary>
            Connect this and another connector together.
            </summary>
            <param name="c">The Connector to connect to</param>
            <param name="alignment">How to align the connectors on connect</param>
            <param name="allowMultiple">Allow multiple connections</param>
            <param name="centerSnap">Snap connector to center of object</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ConnectTo(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector.Alignment,System.Boolean,System.Boolean,System.Action)">
            <summary>
            Connect this and another connector together (<b>Only usable from C# scripting, not JScript</b>).
            </summary>
            <param name="c">The Connector to connect to.</param>
            <param name="alignment">How to align the connectors on connect.</param>
            <param name="allowMultiple">Allow multiple connections.</param>
            <param name="centerSnap">Snap connector to center of object.</param>
            <param name="action"><see cref="T:System.Action" /> to run just prior to notifying of new connections.</param>
            <remarks>This method is only usable from CSharp scripting, and not JScript.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.Connector.GetConnectionWorldLocation(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <summary>
            Find center of an overlapping connector region.
            </summary>
            <param name="from">The first connector.</param>
            <param name="to">The second connector.</param>
            <returns>The world location of the most central overlap between two connector lines.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Connector.GetConnectionWorldLocation">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.DisconnectAll">
            <summary>
            Disconnect all connectors
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Connector.DisconnectFrom(Demo3D.Visuals.Connector)">
            <summary>
            Disconnect two objects from each other. The orientation is left the
            same after disconnection.
            </summary>
            <param name="c">The connector to disconnect</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.UnstoreConnector(Demo3D.Visuals.Connector)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AlignConnectors(Demo3D.Visuals.Connector.Alignment)">
            <summary>
            Align the parent of this connector to be in line with the connector it is connected to.
            Modify the transform of the parent of this connector to align to 
            the Normal of the ConnectedTo connector.
            This doesn't do a centerSnap on the connectors.
            </summary>
            <param name="alignment">The alignment algorithm to use for aligning the visuals that are connected.</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.AlignConnectors(Demo3D.Visuals.Connector.Alignment,System.Boolean)">
            <summary>
            Align the parent of this connector to be in line with the connector it is connected to.
            Modify the transform of the parent of this connector to align to 
            the Normal of the ConnectedTo connector.
            </summary>
            <param name="alignment">The alignment algorithm to use for aligning the visuals that are connected.</param>
            <param name="centerSnap">Whether to snap the centers or not.</param>
        </member>
        <member name="M:Demo3D.Visuals.Connector.AngleXOf(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AngleYOf(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AngleZOf(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AngleXBetween(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AngleYBetween(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AngleZBetween(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.AlignConnectors">
            <summary>
             Align the parent of this connector to be in line with the connector it is connected to.
             Modify the transform of the parent of this connector to align to 
             the Normal of the ConnectedTo connector.
             This doesn't do a centerSnap on the connectors and the alignment algorithm is Alignment.Closest.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.SimulationTransferMotorVisual">
            <summary>In Linear Physics, this indicates the motor visual to use for the transfer speed of loads. If not set then it defaults to conveyor that owns the connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.SimulationTransferEnabled">
            <summary>When true, in Linear Physics, a virtual sensor and stop blade are added to the ongoing conveyor that this conveyor will merge into via this outgoing connector. This enables a simple level of overlap avoidance without adding in explicit sensors and stops by hand.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.SimulationTransferPadding">
            <summary>In Linear Physics, if SimulationTransferEnabled is true, this extends the sensor on the next conveyor back this distance. This allows the next conveyor to act as a main line and not block while a load is being transferred from this conveyor. This cannot be negative as that would cause loads to overlap.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.SimulationTransferSize">
            <summary>In Linear Physics, if not zero, this value overrides the width of the outgoing conveyor for the transfer zone size.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.SimulationTransferRotateAfterAngle">
            <summary>In Linear Physics, if the angle between two conveyors is less than this number then the load will transfer be in the same orientation it is in on the current conveyor. If the angle is greater than this number then the load will be rotated by 90 degrees. Set this to 180 to prevent loads rotating from their current orientation. The default is 80 degrees.</summary>
        </member>
        <member name="F:Demo3D.Visuals.Connector.SimulationTransferRotateAfterAngleDefault">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Connector.TransferDirection">
            <summary>Used by the Transfer protocol (as implemented in many QuickStart components) to define in which direction this connector allows transfers to take place. A value of "In" means that the component receive loads on this connector. A value of "Out" means that the component will deliver loads on this connector. A value of "InOut" means the component will receive and deliver loads on this component. A value of "None" means that the component will neither receive nor deliver loads on this connector. For example, "Start" connectors usually have this property set to "In"; "End" connectors usually have it set to "Out"; "Left" and "Right" connectors might have it set to "InOut"; connectors that are used for snapping end-effectors (for example) would have it set to "None", since they are not used for transferring loads. The component will consider the TransferDirection of the partner connector to find the effective TransferDirection; for example, if this connector is set to "In", then the other connector must be set to "Out" or "InOut" for a transfer to be possible.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.AllowsTransferIn">
            <summary>Indicates whether this connector allows inbound transfers, i.e., TransferDirection == In or InOut.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.AllowsTransferOut">
            <summary>Indicates whether this connector allows outbound transfers, i.e., TransferDirection == Out or InOut.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Parent">
            <summary>The Visual that owns this connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Start">
            <summary>Location of start extent of the connector. The distance from Start to End defines the connector's width.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.End">
            <summary>Location of end extent of the connector. The distance from Start to End defines the connector's width.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Normal">
            <summary>Direction of the connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.BoundaryOffset">
            <summary>The horizontal offset perpendicular to the connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.HeightOffset">
            <summary>The vertical offset perpendicular to the connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.KeepInBounds">
            <summary>With AutoConnect=True, then the snapping action also allows the visual with the shortest connector (distance from Start to End) to slide along the length of the longer partner connector (on the other visual). The KeepInBounds property (of the longer connector) defines whether the longer connector will allow the shorter connector to extend its length beyond the length of the longer connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.AutoConnect">
            <summary>If true then connector will snap to other connectors with AutoConnect enabled when brought close together (see also SnapDistance)</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.SnapDistance">
            <summary>Distance at which AutoConnect (if set to True) will come into effect.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.AutoConfigure">
            <summary>If true, then the visual will reconfigure the connector to the built-in defaults upon reset. Set this to false if you have modified one of the built-in connectors (for example, "Start" on a conveyor).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Type">
            <summary>Optional type value that allows the connector to be identified in the Allowed and Disallowed properties of other connectors</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Allowed">
            <summary>List of connector Types that are allowed to connect with this connector. If empty then all connectors are allowed, as long as they are not named explicitly in the Disallowed list.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.Disallowed">
            <summary>List of connector Types that are not allowed to connect to this connector. If a Type appears in both Allowed and Disallowed, then Disallowed takes priority, and the Type is disallowed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.ReparentOnConnect">
            <summary>When true, the owning visual will be reparented to the partner connector's owning visual. This is useful for creating components such as interchangeable robot end-effectors, which need to become part of the robot component when snapped into position.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.ControlPointEnabled">
            <summary>If true, then the control point will be shown to indicate location, name and orientation of this connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.ControlPointSize">
            <summary>Size of the control point, when enabled.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.TextHeight">
            <summary>Height of the text label on the connector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Connector.AllAspects">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.IsConnectedTo(Demo3D.Visuals.Connector)">
            <summary>
            Is this connector connected to the other connector.
            </summary>
            <param name="other">The other connector.</param>
            <returns>true if the connectors are connected.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Connector.IsConnectedTo(Demo3D.Visuals.Visual)">
            <summary>
            Is this connector connected to the other visual via one of its connectors.
            </summary>
            <param name="other">The other visual.</param>
            <returns>true if the connector is connected to one of the other visual's connectors.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Connector.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Connector.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Connector.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Connector.FindAspect``1">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.FindCreateAspect``1">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.FindCreateManagedAspect``1(Demo3D.Visuals.AspectComponentBase)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.FindAspect(System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Connector.FindCreateAspect(System.Type)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConveyorConnector">
            <summary>
            Connector for connecting conveyor sections together. In general, a Conveyor has
            "Start", "End", connectors and additionally for straight conveyors "Left" and "Right"
            connectors. Start connectors may only connect to End connectors. 
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorConnector.PropertyWrapperType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ConveyorConnector.Flattened">
            <summary>If true then this will keep the connector horizontal regardless of the Incline Angle setting.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorConnector.DefaultAlignmentStyle">
            <summary>
            Gets the default alignment style for this connector.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorConnector.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorConnector.#ctor(Demo3D.Visuals.Visual,System.String,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ConveyorConnector.Position">
            <summary>The distance along the connector that this connector is primarily connected to.</summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorConnector.CanConnectTo(Demo3D.Visuals.Connector)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorConnector.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorConnector.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ConveyorConnectorProperty">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorConnectorProperty.#ctor(Demo3D.Visuals.ConveyorConnector)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ConveyorConnectorProperty.Flattened">
            <summary>If true then this will keep the connector horizontal regardless of the Incline Angle setting.</summary>
        </member>
        <member name="T:Demo3D.Visuals.SimpleConnectorProperty">
            <summary>
            A simplified view of a connector property.
            Used for listing the connectors that a connector is connected to.
            Used to avoid infinite recursion that would otherwise occur when using the
            ConnectorProperty class and when two connectors are connected to each other.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SimpleConnectorProperty.#ctor(Demo3D.Visuals.Connector)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConnectorProperty">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorProperty.#ctor(Demo3D.Visuals.Connector)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.FindConnector(System.String)">
            <summary>
            Find a named connector on a conveyor object, e.g. "Start"
            </summary>
            <param name="name">Name of the connector to search for.</param>
            <returns>The connector matching the supplied name, or null if no connector exists with that name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.ConnectedVisual(System.String)">
            <summary>
            Find the visual that is attached to the supplied connectorName.
            </summary>
            <param name="connectorName">Name of the connector to search for.</param>
            <returns>The visual connected to the connector matching the supplied name, or null if no connector exists with that name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.AddConnector(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.AddConnector(Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.RemoveConnector(System.String)">
            <summary>
            Remove a connector with a certain name.
            </summary>
            <param name="name">Name of the connector to remove.</param>
            <remarks>
            This could create problems if removing the built-in "Start" and "End" connectors for visuals such as conveyors.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.FindCreateConnector(System.String)">
            <summary>
            Find or create a connector of the supplied name.
            </summary>
            <param name="name">The name of the connector to find or create.</param>
            <returns>An existing connector of the supplied name or a new connector if not found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.ConnectTo(System.String,Demo3D.Visuals.Visual,System.String)">
            <summary>
            Connect the visual to another visual with the corresponding connector names.
            This connection replaces any existing connections on this or the other visual's connector.
            </summary>
            <param name="connectorName">The connector on this visual.</param>
            <param name="other">The other visual to connect to.</param>
            <param name="otherConnectorName">The name of the connector on the other visual to connect to.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="ConnectTo" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.ConnectTo(System.String,Demo3D.Visuals.Visual,System.String,System.Boolean)">
            <summary>
            Connect the visual to another visual with the corresponding connector names.
            This connection replaces any existing connections on this or the other visual's connector,
            unless allowMultiple is true, in which case this connection is added to existing connections.
            </summary>
            <param name="connectorName">The connector on this visual.</param>
            <param name="other">The other visual to connect to.</param>
            <param name="otherConnectorName">The name of the connector on the other visual to connect to.</param>
            <param name="allowMultiple">If true, add connection to existing connections, if false then replace existing connections.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="ConnectTo" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.ConnectorsAspect.Disconnect(System.String)">
            <summary>
            Disconnect any connections on the supplied connector name.
            </summary>
            <param name="connectorName">The name of the connector to remove all connections for.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Disconnect" />
            </example>
        </member>
        <member name="T:Demo3D.Visuals.Constraints.ConstraintProperty">
            <summary>
            The constraint property should exist with the name on each visual.
            The position and normal are local to the visual owning the half of the constraint pair.
            The offset is the total offset of both halves of the constraint.
            If either side is suppressed then noth sides are suppressed.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Constraints.ConstraintPropertyConverter">
            <summary>
            Allow the constraint to be expanded and edited.
            Allow the offset of the constraint to be edited if not suppressed.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Constraints.ConstraintPair">
            <summary>
            Temporary object used to solve each half of a constraint.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Constraints.ConstraintPair.AngleBetweenLines(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return the absolute angle between two lines (always positive).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Constraints.ConstraintPair.AngleBetweenLinesAboutAxis(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return the angle between two lines about an axis (can be positive or negative).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Constraints.ConstraintPair.GetInsertWorldAxis">
            <summary>
            Look for associated Insert constraint that will tell us the axis to rotate around
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ContainerProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ContainerVisual">
            <summary>
            Class for representing boxes with sloping sides and optional faces.
            This is mostly used for representing the physics and graphics of a simple tote or crate object.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ContainerVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ContainerVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <summary>
            Only 4 points needed for all corners and then more for dividers.
            Side:
            -----
             ot +-----+ it
                 \     \
                  |     |
                   \     + ib
                 ob +
                 
            Plan:
            -----
                     Back
              0 +------------+ 1
            Left|            |Right
                |            | 
              3 +------------+ 2
                     Front
            o - outer, i - inner, t - top, b- bottom
            
            </summary>
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.Width">
            <summary>The width of the outer edges at the top of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.Height">
            <summary>The height of the Container from the top to the bottom.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.Depth">
            <summary>The depth of the outer edges at the top of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.Thickness">
            <summary>The thickness of the sides of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.BaseRatio">
            <summary>The ratio of the bottom base of the Container to the top opening of the Container. 1.0 will mean square sides, 0.9 (the default) makes the sides taper in to 10% smaller than the top.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.Material">
            <summary>The color and optional texture of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.CollisionType">
            <summary>Hints at the type of physics collision geometry to be used. Selecting "Bounding Box" indicates that the container should be treated as a box, which works best when moving Containers as a 'Load' on a conveyor. Other options indicate that the container should be treated as a concave object, allowing items to fall into it, which works best when the container is a deflector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.BackRatio">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Container.BackRatio.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.FrontRatio">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Container.FrontRatio.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.HasBack">
            <summary>The container can be used as a pigeon hole if this is false.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.HasFront">
            <summary>The container can be used as a pigeon hole if this is false.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.HasBottom">
            <summary>The container can be used as a funnel if this is false.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.HasTop">
            <summary>Whether the container has a top or not. Useful for creating hollow shapes such as pallets.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.HasLeft">
            <summary>Whether the container has a left side or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ContainerVisual.HasRight">
            <summary>Whether the container has a right side or not.</summary>
        </member>
        <member name="T:Demo3D.Visuals.ControllerCamera">
            <summary>
            Drive the camera with a joystick/gamepad/steering wheel.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.XBox360Controller">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.XamlReference">
            <summary>
            Custom property type that can hold per-instance XAML data or a reference to a shared UserResource.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.XamlTextDataSource">
            <summary>
            Wrapper for XamlReference class allowing use of TextEditor control, which requires an ITextEditorDataSource to operate on.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.XamlTypeEditor">
            <summary>
            Editor for XamlReference type. Wrapper for the TextEditor control.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ControlPointMovedDelegate">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ControlPoints">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ControlPoint">
            <summary>
            ControlPoints are used to resize visuals. For example, conveyor length,
            box dimensions. Hold Shift to allow resizing in vertical direction.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ControlPoint.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <param name="view">View to use when updating location</param>
        </member>
        <member name="P:Demo3D.Visuals.ControlPoint.Enabled">
            <summary>
            The control point should be rendered and draggable. 
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ControlPoint.IsBeingDragged">
            <summary>
            The control point is currently being dragged so if it is moved it affects its parent.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ControlPoint.Selected">
            <summary>
            The control point has been selected standalone.
            Selected control points have their own properties and are rendered in red.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ControlPoint.Activated">
            <summary>
            The control point is Enabled and is now visible
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.GetMeshKey">
            <summary>
            Use the same key as BoxProperties.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.GetToolTip(Microsoft.DirectX.Vector3,Demo3D.Visuals.ExprContext)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.RenderWithoutChildren(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.RenderControlPoint(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.OnMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.RenderLine(Microsoft.DirectX.Vector3[],System.Drawing.Color,System.Double,System.UInt32)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ControlPoint.NearlyEqual(System.Single,System.Single,System.Single)">
            <summary>
            <para>OBSOLETE. Use <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)" /> instead.</para>
            <para>Test if <paramref name="a" /> is equal to <paramref name="b" /> (within <paramref name="e" /> tolerance)</para>
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a" /> and <paramref name="b" /></returns>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ControlPoint.AlignToFloorAllowed">
            <summary>
            Used to disable AlignToFloor from the context menu
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ControlPoint.SetInitialPositionAllowed">
            <summary>
            Used to disable SetInitialPosition from the context menu
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectorControlPointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConnectorControlPoint">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ConnectorControlPoint.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConnectorControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ConnectorControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.VisualPropertyReferenceControlPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualReferenceControlPoint">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.VisualReferenceControlPoint.RenderReference">
            <summary>
            Render the visual reference (if any) even if not Enabled
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VisualReferenceControlPoint.MeshMaterials">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.VisualReferenceControlPoint.AllowedReferencesMeshRenderer">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualReferenceControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.VisualReferenceControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.VisualReferenceControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.LocationControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LocationControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.LocationControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.LocationControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.ControlPointPropertyDescriptor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ControlPointPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            This controls whether modifications in the property go bold or not!
            https://social.msdn.microsoft.com/Forums/en-US/bea22738-907f-40bf-9330-8bbcdd67ada1/readonly-propertygrid?forum=winforms
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.ControlPointProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Double2PropertyControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Double2PropertyControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Double2PropertyControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.DoublePropertyControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DoublePropertyControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.DoublePropertyControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.DoublePropertyControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.FixedDoublePropertyControlPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IndirectPropertyControlPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.OffsetPropertyControlPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AxisControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AxisControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.AxisControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.AxisControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.RotationControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RotationControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.RotationControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.RotationControlPoint.AxisRotationMatrixLocal">
            <summary>
            Rotation matrix for each X, Y, Z matrix
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.RotationControlPoint.RotationCenterMatrix">
            <summary>
            Matrix for the rotation center, combined with the axis rotation matrix
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.RotationControlPoint.ClosestArrowLocation">
            <summary>
            There is a mathematical (non-iterative) way to do this, but the intuition for 
            it escapes me for now. Maybe after a few days back at work ... - DD 1/1/17
            It also depends on the view that we're rendering
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.RotationControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.RenderableLine">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.BasicPropertyViewerDictionary">
            <summary>
            BasicPropertyViewerDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.BasicPropertyViewerDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.CustomEnumControl">
            <summary>
            Interaction logic for CustomEnumControl.xaml
            </summary>
            <summary>
            CustomEnumControl
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.CustomEnumControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.CustomPropertyValueControl">
            <summary>
            CustomPropertyValueControl
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.CustomPropertyValueControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.DoublePropertyControl">
            <summary>
            DoublePropertyControl
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.DoublePropertyControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.LinkedUnitsAttributeControl">
            <summary>
            Interaction logic for LinkedUnitsAttributeEditor.xaml
            </summary>
            <summary>
            LinkedUnitsAttributeControl
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.LinkedUnitsAttributeControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.Controls.MeshMaterialPropertyControl">
            <summary>
            Interaction logic for MeshMaterialPropertyControl.xaml
            </summary>
            <summary>
            MeshMaterialPropertyControl
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.Controls.MeshMaterialPropertyControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.Vector3Control">
            <summary>
            Interaction logic for Vector3PropertyControl.xaml
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.Vector3PropertyControl">
            <summary>
            Interaction logic for Vector3PropertyControl.xaml
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.VectorControlBase">
            <summary>
            VectorControlBase
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.VectorControlBase.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.ExtrusionProfilePropertyViewerDictionary">
            <summary>
            ExtrusionProfilePropertyViewerDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.ExtrusionProfilePropertyViewerDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.TextEditorsPropertyViewerDictionary">
            <summary>
            TextEditorsPropertyViewerDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.TextEditorsPropertyViewerDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.CorePropertyViewer.VisualLocationPropertyViewerDictionary">
            <summary>
            VisualLocationPropertyViewerDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.CorePropertyViewer.VisualLocationPropertyViewerDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.ImportedMeshDialog.ImportedMeshDialog">
            <summary>
            Interaction logic for ImportedMeshDialog.xaml
            </summary>
            <summary>
            ImportedMeshDialog
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.ImportedMeshDialog.ImportedMeshDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Controls.WpfRenderHost">
            <summary>
            Interaction logic for WpfRenderHost.xaml
            </summary>
            <summary>
            WpfRenderHost
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Controls.WpfRenderHost.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConvexExtrusionPhysicsAspect">
            <summary>Convex-extrusion physics geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexExtrusionPhysicsAspect.Profile">
            <summary>The extrusion profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexExtrusionPhysicsAspect.Path">
            <summary>The extrusion path.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexExtrusionPhysicsAspect.StepLength">
            <summary>The length of each extrusion step.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexExtrusionPhysicsAspect.CollisionMargin">
            <summary>The collision margin hint for the convex segments.</summary>
        </member>
        <member name="T:Demo3D.Visuals.ConvexPhysicsAspect">
            <summary>Convex physics geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexPhysicsAspect.Location">
            <summary>The (local) location for the convex geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexPhysicsAspect.Rotation">
            <summary>The (local) rotation for the convex geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexPhysicsAspect.CollisionMargin">
            <summary>The collision margin hint for the convex geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConvexPhysicsAspect.Scale">
            <summary>The scale for the convex geometry.</summary>
        </member>
        <member name="T:Demo3D.Visuals.ConveyorAspect">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ConveyorAspect_Description&quot;]/value" /></summary>
        </member>
        <member name="E:Demo3D.Visuals.ConveyorAspect.OnMotorChangedListeners">
            <summary>
            An event that is triggered whenever the conveyor is assigned a different motor.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ConveyorAspect.OnMotorChanged">
            <summary>
            An event that is triggered whenever the conveyor is assigned a different motor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorAspect.UseAncestorBody">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ConveyorAspect_UseAncestorBody_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorAspect.ReportSpecificChildVisual">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ConveyorAspect_ReportSpecificChildVisual_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorAspect.Motor">
            <summary>The motor that drives the conveyor surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorAspect.OnProcessContact">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ConveyorAspect_OnProcessContact_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorAspect.OnReportCollisionImpulse">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ConveyorAspect_OnReportCollisionImpulse_Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.ConveyorMesh.PointMapper">
            <summary>
            Maps an ExtrusionProfile Vector2 point to a Vector3 point for use in curve
            section rail extrusions.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConveyorMesh.BeltModules.BeltCenterPointMapper">
            <summary>
            Maps an ExtrusionProfile Vector2 point to a Vector3 point for use in curve
            section rail extrusions.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMesh.BeltModules.TextureLengthRatio(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Get Multiplier to turn a real distance along the length of a conveyor into a texture length.
            <param name="tileWidth">Zero means use imageAspectRatio</param>
            <param name="tileLength"></param>
            <param name="surfaceWidth"></param>
            <param name="numTilesWide"></param>
            <param name="surfaceLength"></param>
            <param name="numTilesLong"></param>
            <param name="imageAspectRatio"></param>
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMesh.BeltModules.TextureWidthRatio(System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double)">
            <summary>
            Get Multiplier to turn a real distance across the width of a conveyor into a texture length.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMesh.BeltModules.BeltWithTextures(Demo3D.Visuals.MeshBuilder,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32,System.Double,System.Double,System.Boolean,Demo3D.Visuals.CylinderCollisionType,Demo3D.Visuals.CylinderCollisionType)">
            <summary>
            Handle belt surface + side or single roller plus end (horizLen == radius*2).
            
               p4   LEFT                           p5
                 +--------------------------------+
                /                                /|
            p0 /                                / |              (+y)
              +--------------------------------+p1|               |
              |   +                            |  +p6             | (+z)
              | p7                             | /                |/
              |                                |/          (-x)---/---(+x)
              +--------------------------------+                 /|
            p3  RIGHT                         p2              (-z)|
                                                                  |
                                                                 (-y)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMesh.RollerModules.InnerRail(Demo3D.Visuals.CurveConveyorProperties,Demo3D.Visuals.MeshBuilder,Demo3D.Visuals.ConveyorSideProperties)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <remarks>See <see cref="M:Demo3D.Visuals.CurveConveyor.AddInnerRailGeom(Demo3D.Visuals.PhysicsCompoundGeometry)" /> for equivalent code for Physics.</remarks>
            <param name="p"></param>
            <param name="mb"></param>
            <param name="side"></param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMesh.RollerModules.OuterRail(Demo3D.Visuals.CurveConveyorProperties,Demo3D.Visuals.MeshBuilder,Demo3D.Visuals.ConveyorSideProperties)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <remarks>See <see cref="M:Demo3D.Visuals.CurveConveyor.AddOuterRailGeom(Demo3D.Visuals.PhysicsCompoundGeometry)" /> for equivalent code for Physics.</remarks>
            <param name="p"></param>
            <param name="mb"></param>
            <param name="side"></param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMesh.RollerModules.V3(Microsoft.DirectX.Vector2)">
            <summary>
            Maps an ExtrusionProfile polygon point into a Vector3 point prior to an extrusion.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMesh.RollerModules.V3N(Microsoft.DirectX.Vector2)">
            <summary>
            Maps an ExtrusionProfile polygon point into a Vector3 point prior to an extrusion.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ISpeedProvider">
            <summary>
            Interface to allow anything to 
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorProperties.ClearEventListeners">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MotorProperties.SpeedCache">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MotorProperties.SpeedCacheValid">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MotorProperties.NotifySpeedListeners(System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MotorProperties.Reset">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MotorProperties.ToString">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MotorProperties.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MotorProperties.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ConveyorMotorProperties">
            <summary>
            The state of a conveyor motor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorMotorProperties.ToString">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AngularMotorProperties.ToString">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DimensionlessMotorProperties.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.RollerConveyorCenterCollisionType">
            <summary>
            The physics collision geometry type to use for the center of roller conveyor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.RollerConveyorCenterCollisionType.Auto">
            <summary>
            Automatically select for best performance.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.RollerConveyorCenterCollisionType.Box">
            <summary>
            Use object-oriented bounding box.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.RollerConveyorCenterCollisionType.Cylinder">
            <summary>
            Use cylinders to model rollers.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.RollerConveyorCenterCollisionType.ConvexHull">
            <summary>
            Use convex-hull decomposition.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.RollerConveyorCenterCollisionType.TriangleMesh">
            <summary>
            Use the triangle mesh.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.RollerConveyorCenterCollisionType.VisualOnly">
            <summary>
            No physics geometry.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BeltConveyorCenterCollisionType">
            <summary>
            The physics collision geometry type to use for the center of belt conveyor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BeltConveyorCenterCollisionType.Auto">
            <summary>
            Automatically select for best performance.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BeltConveyorCenterCollisionType.Box">
            <summary>
            Use object-oriented bounding box.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BeltConveyorCenterCollisionType.ConvexHull">
            <summary>
            Use convex-hull decomposition.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BeltConveyorCenterCollisionType.TriangleMesh">
            <summary>
            Use the triangle mesh.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BeltConveyorCenterCollisionType.VisualOnly">
            <summary>
            No physics geometry.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConveyorSideCollisionType">
            <summary>
            The physics collision geometry type to use for the sides of conveyors.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConveyorSideCollisionType.Box">
            <summary>
            Use object-oriented bounding box.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConveyorSideCollisionType.ConvexHull">
            <summary>
            Use convex-hull decomposition.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MovementStatus">
            <summary>
            Conveyor motor movement categorization.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MovementStatus.None">
            <summary>
            The conveyor motor is not moving.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MovementStatus.Steady">
            <summary>
            The conveyor motor is moving at constant speed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MovementStatus.Accelerating">
            <summary>
            The conveyor motor is accelerating.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MovementStatus.Decelerating">
            <summary>
            The conveyor motor is decelerating.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PulseGenerationMode">
            <summary>
            Pulse generation mode.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PulseGenerationMode.Auto">
            <summary>
            Automatically select.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PulseGenerationMode.Model">
            <summary>
            Model generated pulses.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PulseGenerationMode.Hardware">
            <summary>
            Hardware generated pulses.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ReportCollisionImpulseDelegate">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorSideProperties.FlipH">
            <summary>
            Horizontally flips all polygons in the side profile.  
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorSideProperties.FlipV">
            <summary>
            Vertically flips all polygons in the side profile.  
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorSideProperties.ReverseDirection">
            <summary>
            Reverses direction of all polygons in the side profile.  
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorProperties.AddDefaultSimpleProperties(Demo3D.Visuals.PropertyAliasCollection)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorProperties.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorProperties.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.IAttachPhysicsObjects">
            <summary>
            Loads can attach to this.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConveyorVisual">
            <summary>
            Abstract class representing the behavior of conveyor visuals with a motor, and length and width. 
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConveyorVisual.ConveyorSide">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.OnMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.motorSpeedBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.accelerationBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.decelerationBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.motorStateBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.motorForwardsBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.motorOnForwardsBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.motorOnReverseBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.pulseBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.pulseCountBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.distanceAtPulseBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.speedAtPulseBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.motorMovementStatusBinding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.controlPoints">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.MovementSurface">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.IsPhysicsDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.AddBinding(Demo3D.Visuals.BindableItem)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.IsMotorOn">
            <summary>Whether the motor is on or off.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.IsMotorForwards">
            <summary>Whether the motor direction is forwards or not. </summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.IsMotorOnForwards">
            <summary></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.IsMotorOnReverse">
            <summary></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.MotorSpeed">
            <summary>The current speed of the motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.PulseCount">
            <summary>The number of pulses that the conveyor motor has counted so far. The conveyor DistanceTravelled/PulseDistance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.PulseState">
            <summary>The current state of the pulse for the conveyor motor.</summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.WaitForNoMovement">
            <summary>
            If the conveyor Motor is off, wait until the conveyor has stopped decelerating and is now not moving.
            <para>NOTE: This will throw an exception if the conveyor Motor is on.</para>
            </summary>
            <returns>A task representing the wait.</returns>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.TransferCompleteSensor">
            <summary>
            Return the attached sensor visual that is used to signal "TransferComplete" for PLC transfers.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.Scan">
            <summary>
            In a PLC scan try to do one of Accept OR Process OR Deliver.
            This method is called from the PLC object on the Document and should never be 
            called explicitly.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.SetScanNeededOnAttached">
            <summary>
            Add anything directly attached to the scanList and set their ScanNeeded flag.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.AttachToProperties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.Reset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.ControlPoints">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.ClearControlPoints">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.Height">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.LeftSideWidth">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.RightSideWidth">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.LeftSideStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.RightSideStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.LeftSideHeight">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.RightSideHeight">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <summary>
            Main constructor as called by the VisualFactory. It shouldn't be necessary
            to override this method unless you have tasks that should only be performed
            when being created by a factory, and not during deserialization.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.ToString">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceTextureImageRatio">
            <summary>
            The aspect ratio of the texture of the conveyor surface
            </summary>
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceLength">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.UseSurfaceMaterial">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.UseSurfaceSideMaterial">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.NumSurfaceMaterials">
            <summary>
            NOTE: This is a bodge for use with PropertyLinkedMaterials (which is also a bodge) - D-7826 / D-7112
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.PickMeshColor">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.OffsetOfLocal(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.OffsetOf(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.LocalNormalAt(System.Double,System.Double,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.NormalAt(System.Double,System.Double,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.GetAccessoryAngleAt(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.GetAccessoryDirectionAt(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.GetMovementDirectionAt(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.WorldMatrixOf(System.Double,System.Double,System.Double)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.MovementSurfaceIsForwards">
            <summary>
            Determine if a positive increase in position is moving forwards over the surface or not
            Used in Simulation instead of looking at the MotorDirection, since now Injectors can be
            both Infeeds and Outfeeds (and an Outfeed logically reverses the surface)
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.TransformTrackToWorld(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a tracking location to a world location. Offset is Props.Tracking.Offset, and is used to
            translate the [0,0,0] away from [start of conveyor, top of roller, center of roller].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.TransformWorldToTrack(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a world location into a tracking location. Offset is Props.Tracking.Offset, and is used to
            translate the [0,0,0] away from [start of conveyor, top of roller, center of roller].
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.ShowLegs">
            <summary>
            Has the scene object overriden the drawing of legs?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.CreateNonCachedMeshes">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.CreateMovementSurface">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.CreateConnectors">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.InstallConnectorListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.ConveyorEnd_ConnectedListeners(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <summary>
            Override ShowEndSupport if the end connector:
            1) Isn't connected
            2) Is connected to something of a different type, i.e. Conveyor to ASRS 
            3) Connector offset of this conveyor and start connector offset of the next conveyor &gt; 0.
            NOTE: Always show start leg.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.ConveyorEnd_DisconnectedListeners(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <summary>
            If end is disconnected then show end support.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.CutSidesFor(Demo3D.Visuals.ConveyorConnector,Demo3D.Visuals.Visual,Demo3D.Visuals.ConveyorConnector)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.CancelCutouts(Demo3D.Visuals.ConveyorConnector,Demo3D.Visuals.Visual,Demo3D.Visuals.ConveyorConnector)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.ConveyorVisual.showCenterModule">
            <summary>
            Used to keep track of the legacy ShowCenterModule property while deserializing.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.Next">
            <summary>
            Convenience properties for accessing attached conveyors.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.CreateCenterLine">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ConveyorVisual.RenderWithoutChildren(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.PulseEnabled">
            <summary>Are pulses enabled for this conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.PulseGenerationMode">
            <summary>The mode through which pulses should be generated.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.NotifyDistances">
            <summary>The list of distances at which to fire the OnNotifyDistance event. Once the distance is reached the event is fired at that distance is removed from the list.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.NotifySpeeds">
            <summary>The list of speeds at which to fire the OnNotifySpeed event.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.NotifySpeedChanges">
            <summary>The list of speed changes at which to fire the OnNotifySpeedChange event.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.PulseDistance">
            <summary>How far the conveyor should travel before emitting a pulse.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.LastPulseDistance">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Conveyor.LastPulseDistance.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.PulseHighRatio">
            <summary>How long during a pulse should the signal remain high. This is a number from 0 to 1.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnNotifyDistance">
            <summary>Occurs when the conveyor has traveled the distance indicated by the next entry in the NotifyDistances list.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnNotifySpeed">
            <summary>Occurs whenever the conveyor attains certain speeds entered in the NotifySpeeds list.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnNotifySpeedChange">
            <summary>Occurs whenever the conveyor's speed changes by the magnitudes entered in the NotifySpeedChanges list.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnNotifyMovementStatus">
            <summary>Occurs whenever the characterization of the motor's movement changes.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnMotorOn">
            <summary>Occurs when the conveyor motor is turned on. This allows a single point where the motors for multiple sub-assemblies can be turned on as well.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnMotorOff">
            <summary>Occurs when the conveyor motor is turned off. This allows a single point where the motors for multiple sub-assemblies can be turned off as well.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnSimulationTransfer">
            <summary>Called in linear physics when a load is able to transfer from one conveyor to another. This allows custom control over how the transfer appears and how long it takes.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnProcessContact">
            <summary>Occurs when processing volumetric physics contact points. Arguments are the sender, the load visual and the contact details (of type ContactInfo). Implementing this handler can severely impact performance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OnReportCollisionImpulse">
            <summary>Reports collision impulses. Reporting of impulses must be enabled on the Scene. Implementing this handler can severely impact performance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.StartConnectorOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.EndConnectorOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.ConveyorHeight">
            <summary>The distance from the floor to the top of the conveyor surface (top of roller or belt).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.BankAngle">
            <summary>This is the angle to rotate the conveyor along the direction of the conveyor. This can be used to produce nose overs or unders or baggage carousels.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.MotorVisual">
            <summary>If set then the motor for the specified conveyor is used to drive this conveyor as well. The direction arrow will disappear for this conveyor and only be shown for the other conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.Motor">
            <summary>The speed, direction and power status of the conveyor's motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.Ports">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.MotorDistance">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Conveyor.MotorDistance.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.ShowStartSupport">
            <summary>Whether the start support is shown or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.ShowEndSupport">
            <summary>Whether the end support is shown or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.OverrideShowEndSupport">
            <summary>If True will set ShowEndSupport True or False when the end connector is connected to another conveyor or not. It defaults to True.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.CenterVisible">
            <summary>Whether the graphics of the center of the conveyor are visible or not (e.g. rollers, belt, etc.). Defaults to True.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.CenterPhysicsEnabled">
            <summary>Whether the physics of the conveyor surface is enabled or not. Defaults to True.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.ShowCenterLine">
            <summary>Shows a center line for a conveyor even if the conveyor itself doesn't show anything. Useful when using conveyors as vehicle tracks.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.CenterLineColor">
            <summary>The color of the center line for a conveyor. Useful when using conveyors as vehicle tracks.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.FrictionFactor">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.FrictionMaterial">
            <summary>The name of the material to be use to determine the coefficient of friction when in contact with another friction material.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.FrictionMaterial2">
            <summary>The name of the material to be use to determine the coefficient of anisotropic friction when in contact with another friction material.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.UseFrictionMaterial2">
            <summary>Whether to enable anisotropic friction or not. Defaults to False. An example usage of this is with a gravity roller where FrictionMaterial has a very low coefficient of friction and FrictionMaterial2 is something like Steel to represent a spinning roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceTileWidth">
            <summary>If 0 then the tiles long are based on the conveyor width, keeping the texture square. If greater than 0 then this is the distance along the width of the conveyor that the surface texture should be shown until it repeats.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceTileLength">
            <summary>If 0 then the tiles long are based on the conveyor width, keeping the texture square. If greater than 0 then this is the distance along the conveyor that the surface texture should be shown until it repeats.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceTilesWide">
            <summary>The number of times to repeat the surface material texture along the width of the conveyor surface. This defaults to 1.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceTilesLong">
            <summary>If 0 then the tiles long are based on the conveyor width, keeping the texture square. Use a number greater than 0 to specify the exact number of times the surface material texture should repeat along the length of the conveyor surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceMaterial">
            <summary>The color and texture of the surface of the conveyor (belt, roller or chain). This texture moves with the surface on the conveyor at the motor speed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SurfaceSideMaterial">
            <summary>The color and texture of the sides or end of the conveyor (belt, roller or chain).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.ShowMotorArrow">
            <summary>Whether to show an arrow indicating the direction of the motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.ShowMotorVisualArrow">
            <summary>Whether to show an arrow indicating the direction of the motor - Only applicable when the conveyor has a Motor Visual. </summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SimulationStatic">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Conveyor.SimulationStatic.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SimulationCenterOffset">
            <summary>In linear and planar physics, this is the offset from the center that the load should travel down. This is only applied in PlanarPhysics if SimulationCenterSnap is true.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SimulationCenterSnap">
            <summary>In planar physics, this states whether the load should snap to the center of the conveyor when the load arrives at that conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SimulationRotationSnap">
            <summary>In linear and planar physics, this states whether the load rotation should snap to orient it with the conveyor direction when the load arrives at that conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SimulationPreferredPhysicsMode">
            <summary>The preferred physics mode to be used for this conveyor. The default is linear but if this isn't support by the edition it will default back to planar physics. The document level physics mode sets the overall default. Volumetric will override everything. Planar will override everything except for where the preference is for Volumetric.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorVisual.SimulationPhysicsMode">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.CoreVisualProperties">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CoreVisualProperties.TransferState">
            <summary>
            An empty TransferState implies TransferStateEnabled=true.
            If TransferState is missing then TransferStateEnabled=false.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoreVisualProperties.OnReset">
            <summary>
                Reset script that can appear on Scene.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ICoreVisualAspect">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CoreVisual.Props">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.CoreVisual.CoreVisualAspectContainer">
            <summary>
            Keeps a list of all aspects we don't want serialized out
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoreVisual.AllAspects">
            <summary>
                Returns all the aspects for this Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.FindCreateAspect``1">
            <summary>
                Finds an aspect if it exists or adds a new one if it doesn't exist.
            </summary>
            <typeparam name="T">The type of the aspect.</typeparam>
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.FindCreateAspect(System.Type)">
            <summary>
                Finds an aspect if it exists or Adds a new one if it doesn't exist.
            </summary>
            <param name="type">The type of the aspect.</param>
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.FindAspect(System.Type)">
            <summary>
                Finds and returns an aspect of a given type.
            </summary>
            <param name="type">The type of the aspect to find.</param>
            <returns>The aspect, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.FindAspect``1">
            <summary>
                Finds and returns an aspect of a given type.
            </summary>
            <typeparam name="T">The type of the aspect to find.</typeparam>
            <returns>The aspect, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.FindAspects``1">
            <summary>
                Find all aspects that can be cast to the given type.
            </summary>
            <typeparam name="T">The type of the aspect to find.</typeparam>
            <returns>All aspects that can be cast as the given type.</returns>
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.OpenMessageChannel(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CoreVisual.SimState">
            ** <exclude /> */
        </member>
        <member name="P:Demo3D.Visuals.CoreVisual.MoveSimulator">
            ** <exclude /> */
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.ClearSimState">
            ** <exclude /> */
        </member>
        <member name="M:Demo3D.Visuals.CoreVisual.SimulateLoad(Demo3D.Visuals.Visual)">
            <summary>
                Indicates that this Visual should now be in control of simulating the supplied load.
            </summary>
            <remarks>
                This will only have an effect if the model is running in Planar or Linear physics.
                In Volumetric physics this call will be silently ignored.
            </remarks>
            <param name="load">The visual to be simulated.</param>
        </member>
        <member name="P:Demo3D.Visuals.CoreVisual.WorldMinimumY">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.CurveBeltConveyorProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.CurveBeltConveyor.CreateMesh">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.SurfaceLength">
            <summary>
            Circumference of the whole belt.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CurveBeltConveyor.AddCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveBeltConveyor.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.CenterProfile">
            <summary>A profile of the conveyor center module.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.BeltWidth">
            <summary>The width of the belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.BeltColor">
            <summary>The color of the belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.BeltDiameter">
            <summary>Diameter of the belt ends and therefore the height of the belt itself.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.BeltCenterHeight">
            <summary>This overrides the BeltDiameter if UseBeltCenterHeight is true.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.UseBeltCenterHeight">
            <summary>When true, BeltCenterHeight overrides BeltDiameter to specify the height of the belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.BeltCapStart">
            <summary>This determines how to display the graphics for the start of a belt conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveBeltConveyor.BeltCapEnd">
            <summary>This determines how to display the graphics for the end of a belt conveyor.</summary>
        </member>
        <member name="T:Demo3D.Visuals.CurveConveyorBodyType">
            <summary>
            The physics mode for a curve conveyor visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CurveConveyorBodyType.Deflector">
            <summary>
            The conveyor does not move using dynamic physics (The default).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CurveConveyorBodyType.Vehicle">
            <summary>
            The conveyor can move using dynamic physics. Combine this with Kinematic in order to get loads to move with a conveyor when it moves without parenting them to the conveyor.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CurveConveyorProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyorProperties.CenterHeight">
            Diameter of the center (rollers/belt) not including the sides
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyorProperties.InnerSide">
            Height of the center (rollers/belt)
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyorProperties.StepAngleGraphics">
            Width of the center (rollers/belt/etc.)
            
        </member>
        <member name="T:Demo3D.Visuals.CurveConveyor">
            <summary>
            Abstract class encapsulating the behavior of a curved conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.CreateMovementSurface">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddPreciseBeltGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.ComputeTrapezoidBeltSectionPoints(System.Double,System.Double)">
            <summary>
            Returns a list of points that approximates the convex-hull of the section of belt
            between the two provided angles.
            </summary>
            <remarks>
            The returnes list of points only approximates the convex-hull since it may be possible
            to eliminate some points (especially for large angles). The resolution of the
            convex-hull is determined by the <see cref="P:Demo3D.Visuals.CurveConveyor.StepAngle" />.
            </remarks>
            <param name="startRadians">The starting angle for the section (in radians).</param>
            <param name="endRadians">The ending angle for the section (in radians).</param>
            <returns>A list of points that approximates the convex-hull.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddConvexProfileConvexHullGeom(System.Collections.Generic.List{Demo3D.Visuals.PhysicsConvexHullGeometry},Demo3D.Visuals.ConveyorSideProperties,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>
            Creates a collision geometry that approximates the conveyor side with a convex profile.
            </summary>
            <remarks>
            This is currently called by CreateSideConvexHullSectionGeometry when a convex side profile is detected.
            </remarks>
            <returns>The collision geometry that approximates the conveyor side with a convex profile.</returns>
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.CreateBeltBoxSectionGeometry(System.Double,System.Double,Microsoft.DirectX.Vector3@)">
            <summary>
            Creates a box collision geometry that approximates the center belt.
            </summary>
            <remarks>
            This should only be used when the <see cref="P:Demo3D.Visuals.CurveConveyorProperties.InclineAngle" /> and
            <see cref="P:Demo3D.Visuals.CurveConveyorProperties.BankAngle" /> are zero.
            </remarks>
            <param name="startRadians">The starting angle for the belt.</param>
            <param name="endRadians">The ending angle for the belt.</param>
            <param name="offset">The local-space offset for the created box geometry.</param>
            <returns>The box collision geometry that approximates the belt.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddBoxCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddConvexHullCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddTriangleMeshCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.CenterModule(Demo3D.Visuals.MeshBuilder)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddInnerRailGeom(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <summary>
            Add physics for the inner rail.
            </summary>
            <remarks>
            <see cref="M:Demo3D.Visuals.ConveyorMesh.RollerModules.InnerRail(Demo3D.Visuals.CurveConveyorProperties,Demo3D.Visuals.MeshBuilder,Demo3D.Visuals.ConveyorSideProperties)" /> for the equivalent code for graphics.</remarks>
            <param name="compound">Physics Geom to add the rail to.</param>
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.AddOuterRailGeom(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <summary>
            Add physics for the outer rail.
            </summary>
            <remarks>
            <see cref="M:Demo3D.Visuals.ConveyorMesh.RollerModules.OuterRail(Demo3D.Visuals.CurveConveyorProperties,Demo3D.Visuals.MeshBuilder,Demo3D.Visuals.ConveyorSideProperties)" /> for the equivalent code for graphics.</remarks>
            <param name="compound">Physics Geom to add the rail to.</param>
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.CreateConnectors">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.CurveConveyor.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.Kinematic">
            <summary>Move the conveyor kinematically instead of dynamically meaning the conveyor will move with infinite force.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.CurveConveyorBodyType">
            <summary>Whether the curved conveyor is static (Deflector) or movable (Vehicle).</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.CenterDiameter">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;CurveConveyor.CenterDiameter.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.CenterHeight">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;CurveConveyor.CenterHeight.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.InnerSide">
            <summary>The inside edge conveyor profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.OuterSide">
            <summary>The outside edge conveyor profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.InnerRadius">
            <summary>The distance from the curve origin to the inside edge of the rollers/belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.Angle">
            <summary>The turning angle of the conveyor in degrees. Positive values are clockwise.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.Elevation">
            <summary>How far the conveyor should lift (or descend, if negative) as it turns. A value of 0 creates a flat curve, non-zero creates a spiral.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.StepAngleGraphics">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.PhysicsTaperRatio">
            <summary>The taper ratio for the physics of a curved conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.OuterRadius">
            <summary>The distance from the curve origin to the outside edge of the rollers/belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.Radius">
            <summary>The distance from the curve origin to the center of the rollers/belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.InnerLength">
            <summary>The length along the inner radius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.OuterLength">
            <summary>The length along the outer radius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveConveyor.InclineAngle">
            <summary>The angle that the curve conveyor is inclined at in degrees (usually 5, 10, 15, 20, 25 or 30). Must be between -89 and 89.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CurveRollerConveyor.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveRollerConveyor.AddCylinderCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveRollerConveyor.AddCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CurveRollerConveyor.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CustomMessageBox.AutoCloseTimeout">
            <summary>
            Number of seconds to wait before closing the message box. Use 0 to keep the dialog open indefinitely.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CustomMessageBox.AutoCloseAction">
            <summary>
            Action to execute if the message box is automatically closed
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CylinderLoadProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CylinderLoadVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.CylinderLoadVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.CylinderLoadVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CylinderPhysicsAspect">
            <summary>Cylinder physics geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderPhysicsAspect.Location">
            <summary>The (local) location for the cylinder geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderPhysicsAspect.Rotation">
            <summary>The (local) rotation for the cylinder geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderPhysicsAspect.Length">
            <summary>The length for the cylinder geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderPhysicsAspect.Radius">
            <summary>The radius for the cylinder geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderPhysicsAspect.Scale">
            <summary>The scale for the cylinder geometry.</summary>
        </member>
        <member name="T:Demo3D.Visuals.CylinderTextureMode">
            <summary>
            The texture mapping algorithm to use for the cylinder visual.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CylinderCollisionType">
            <summary>
            The physics primitive type to use for the cylinder visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CylinderCollisionType.Box">
            <summary>
            Bounding box for cylinder physics.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CylinderCollisionType.Cylinder">
            <summary>
            Accurate cylinder physics. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CylinderCollisionType.ConvexHull">
            <summary>
            Tightly wraps the accurate cylinder physics.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CylinderCollisionType.ConvexHullDecomposition">
            <summary>
            Decomposes the cylinder geometry into a set of convex-hulls.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CylinderCollisionType.ChordBox">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.CylinderCollisionType.VisualOnly">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CylinderProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CylinderVisual">
            <summary>
            Cylinder primitive for physics and rendering.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CylinderVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.CylinderVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Slices">
            <summary>The number of sides the cylinder has in plan view. A higher number produces a more accurate cylinder, but takes longer to draw.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Radius">
            <summary>The radius of the cylinder (in the X/Z plane).</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.RadiusRatio">
            <summary>This controls how elliptical the cylinder is.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.ConeRatio">
            <summary>Ratio of the radii at either end. A ratio of 1 will create a cylinder, a ratio of 0 will create a cone</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.InnerRadius">
            <summary>The radius of the cylinder's hollow section.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.StartAngle">
            <summary>The starting angle for the cylinder. </summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Angle">
            <summary>How much of the cylinder is drawn.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Length">
            <summary>The length of the cylinder along its main axis (Y axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.CurveAngle">
            <summary>When non zero this extrudes the cylinder around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.CurveRadius">
            <summary>When CurveAngle is non zero this extrudes the cylinder around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.CurveSegments">
            <summary>When CurveAngle is non zero this extrudes the cylinder around a curve with a radius of CurveRadius with this number of segments to the curve. The default is 20.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.PhysicsCurveSegments">
            <summary>The number of convex-hulls to form the cylinder's collision geometry from. This is only applicable when the collision type is set to convex-hull.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.ConvexHullDecomposition">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Cylinder.ConvexHullDecomposition.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Skew">
            <summary>When CurveAngle is non zero this skews the extruded cylinder this distance between the start and the end of the curve.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Material">
            <summary>The color and texture of the cylinder's surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.ExtraMaterials">
            <summary>Used when TextureMode is set to something other than Default.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.TextureMode">
            <summary>Default just uses Material on each face and all modes use Material on the outer edge. All modes except Default use ExtraMaterials[0] on the top face, and Can, Donut and Tire use ExtraMaterials[1] on the bottom face. Donut and Tire use ExtraMaterials[2] on the end faces (when the cylinder is open) and Tire uses ExtraMaterials[3] on the inside edge (when the cylinder is hollow).</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.CollisionType">
            <summary>Hints at the type of physics collision geometry to be used. Selecting "Bounding Box" will usually yield the greatest performance, although the geometry will usually poorly approximate the cylinder. The "Cylinder" option allows the physics engine to use any inbuilt cylinder primitive geometry. The "Convex-Hull" option tightly wraps the mesh but may also perform some simplistic convex decomposition. The "Convex-Hull Decomposition" option approximates the mesh by a set of convex hulls. The "Triangle Mesh" option should only be used in specific cases where no other option is suitable.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Diameter">
            <summary>The diameter of the cylinder.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.InnerDiameter">
            <summary>The diameter of the hollow section.</summary>
        </member>
        <member name="P:Demo3D.Visuals.CylinderVisual.Density">
            <summary>The mass per unit volume of the box. The mass is calculated from the volume of the box.</summary>
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.Constants.ZNEAR">
            <summary>
            The values of 0 to 0.1 create some very strange rendering effects. A value
            of 0.05 lets you zoom in very close to the scene objects.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.D3DDevice.UseHardwareTransformAndLight">
            <summary>
            This flag is used the first time a D3DDevice is constructed so
            to create a device with a new setting means a restart.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DDevice.ForceWeakReferenceRemoval">
            <summary>
            UNIT TEST ONLY
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DDisplay">
            <summary>
            Class that implements the IDisplay interface using Direct3D.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DDisplay.#ctor(Demo3D.Renderers.IRenderControlBase,System.Windows.Forms.IWin32Window)">
            <summary>
            
            </summary>
            <param name="control"></param>
            <param name="window"></param>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DDisplay.#ctor(Demo3D.Renderers.IRenderControlBase,System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Creates a new display. PrepareForControl resizes the device to fit the control, 
            use false to avoid resizing displays already on the device.
            </summary>
            <param name="control"></param>
            <param name="window"></param>
            <param name="prepareForControl"></param>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DDisplay.DrawPrimitives(Demo3D.Renderers.Meshes.MeshFormat,SlimDX.Direct3D9.VertexBuffer,Demo3D.Visuals.MeshMaterial)">
            <summary>
            Draw a primitive with a constant material.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DDisplay.DrawPrimitives(Demo3D.Renderers.Meshes.MeshFormat,SlimDX.Direct3D9.VertexBuffer)">
            <summary>
            Draw a primitive with a different material at each vertex.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DDisplay.GetNextStrip(Microsoft.DirectX.Vector3[],System.Int32@)">
            <summary>
            Iterate through line-strips given a line-list
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.TransparentMeshSubset">
            <summary>
            Alpha channels need to be drawn last so build up a list of mesh subsets
            which have alpha channels while the rendering is taking place. Then 
            render these at the end just after the floor is rendered.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DAnimationController.SetupBoneMatrices(SlimDX.Direct3D9.Frame,SlimDX.Direct3D9.Frame)">
            <summary>This method will set the bone matrices for a frame</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DAnimationController.SetupBoneMatrices(SlimDX.Direct3D9.Frame,Demo3D.Visuals.Direct3D.D3DMeshContainer)">
            <summary>Sets the bone matrices for a mesh container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DVisualFrame.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DVisualFrame.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DRawMeshAnimation">
            <summary>
            An animation created when importing raw. Supports supplying of a custom time, rather than using the document time. UseCustomTime must be true to override the time.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMeshAnimation">
            <summary>SimpleAnimation Sample Class</summary>
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.D3DMeshAnimation.meshData">
            <summary>
            Store the serialized version here until we need to desrialize it.
            If mesh is null then look at bytes.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.D3DMeshAnimation.ShadowMaterial">
            <summary>Update the frames matrices and combine it with it's parents</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshAnimation.DrawFrame(Demo3D.Visuals.Direct3D.D3DDisplay,SlimDX.Direct3D9.Frame,Demo3D.Visuals.MeshMaterial[])">
            <summary>Draw a frame and all child and sibling frames</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshAnimation.DrawMeshContainer(Demo3D.Visuals.Direct3D.D3DDisplay,Demo3D.Visuals.Direct3D.D3DMeshContainer,Demo3D.Visuals.MeshMaterial[])">
            <summary>Render a mesh container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshAnimation.RenderSubset(Demo3D.Visuals.Direct3D.D3DDisplay,SlimDX.Direct3D9.Mesh,System.Int32,Demo3D.Visuals.MeshMaterial)">
            <summary>
            Direct copy of D3DMesh.RenderSubset.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshAnimation.GenerateSkinnedMesh(Demo3D.Visuals.Direct3D.D3DMeshContainer)">
            <summary>
            Generate the skinned mesh information
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshAnimation.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshAnimation.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshAnimation.ConvertMeshContainerToMesh(Demo3D.Visuals.Direct3D.D3DMeshContainer)">
            <summary>Render a mesh container</summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMeshContainer">
            <summary>
            The mesh container class that will hold the animation data
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshContainer.GetBones">
            <summary>Retrieve the bone combinations used for this container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshContainer.SetBones(SlimDX.Direct3D9.BoneCombination[])">
            <summary>Set the bone combinations used for this container</summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshContainer.BoneMatrixBuffer">
            <summary>World Matrix By Index Buffer for Rending using HLSL</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshContainer.GetFrames">
            <summary>Retrieve the animation frames used for this container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshContainer.SetFrames(Demo3D.Visuals.IFrame[])">
            <summary>Set the animation frames used for this container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshContainer.GetOffsetMatrices">
            <summary>Retrieve the offset matrices used for this container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshContainer.SetOffsetMatrices(Microsoft.DirectX.Matrix[])">
            <summary>Set the offset matrices used for this container</summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshContainer.NumberAttributes">
            <summary>Total number of attributes this mesh container contains</summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshContainer.NumberInfluences">
            <summary>Total number of influences this mesh container contains</summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshContainer.NumberPaletteEntries">
            <summary>Total number of palette entries this mesh container contains</summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.AnimationAllocation">
            <summary>
            AllocateHierarchy derived class
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.AnimationAllocation.#ctor(Demo3D.Visuals.Direct3D.D3DMeshAnimation)">
            <summary>Create new instance of this class</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.AnimationAllocation.CreateFrame(System.String)">
            <summary>Create a new frame</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.AnimationAllocation.CreateMeshContainer(System.String,SlimDX.Direct3D9.MeshData,SlimDX.Direct3D9.ExtendedMaterial[],SlimDX.Direct3D9.EffectInstance[],System.Int32[],SlimDX.Direct3D9.SkinInfo)">
            <summary>Create a new mesh container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.AnimationAllocation.CreateMeshContainer(System.String,SlimDX.Direct3D9.MeshData,Microsoft.DirectX.Direct3D.ExtendedMaterial[],SlimDX.Direct3D9.EffectInstance[],System.Int32[],SlimDX.Direct3D9.SkinInfo)">
            <summary>Create a new mesh container</summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.SkinningBone.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.SkinningBone.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.FontCache">
            <summary>
            Cache for Font objects
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMeshMultilineText">
            <summary>
            Multi-line text mesh.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.D3DMeshMultilineText.material">
            <summary>
            Material to use when rendering each line of text.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshMultilineText.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshMultilineText.#ctor(SlimDX.Direct3D9.Device,System.Drawing.FontFamily,System.Drawing.FontStyle,System.String,System.Double,System.Double,System.Double,Demo3D.Visuals.MeshMaterial,Demo3D.Visuals.HorizontalAlign,Demo3D.Visuals.VerticalAlign)">
            <summary>
            Constructor.
            </summary>
            <param name="device">The device.</param>
            <param name="family">The font family for the text.</param>
            <param name="style">The style for the text (e.g. bold, italic, etc).</param>
            <param name="text">The text string, including line breaks ('\n' and '\r\n').</param>
            <param name="lineHeight">The value of the line height property.</param>
            <param name="lineSpacing">The spacing between line of text proportional to the line height.</param>
            <param name="depth">The depth for the text mesh.</param>
            <param name="material">The material to use when rendering the mesh.</param>
            <param name="halign">The horizontal alignment for the text.</param>
            <param name="valign">The vertical alignment for the text.</param>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshMultilineText.CreateMesh">
            <summary>
            Creates the multi-line text mesh asynchronously.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshMultilineText.CreateMesh(System.Boolean)">
            <summary>
            Creates the multi-line text mesh.
            </summary>
            <param name="Invoke">Whether to create the mesh asynchronously.</param>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMeshText">
            <summary>
            A text mesh with the given text
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.Font">
            <summary>
            Font to use when generating the text mesh.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.Text">
            <summary>
            Text to render.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.Depth">
            <summary>
            Depth for the mesh.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.LineHeight">
            <summary>
            Height property for the text visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.LineHeightInM">
            <summary>
            Line height for the font in meters.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.LineSpacing">
            <summary>
            Space between lines of text as a proportion of the font spacing
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.HorizontalAlignment">
            <summary>
            Horizontal alignment type.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMeshText.VerticalAlignment">
            <summary>
            Vertical alignment type.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshText.Align(SlimDX.Direct3D9.Mesh,Demo3D.Visuals.HorizontalAlign,Demo3D.Visuals.VerticalAlign,System.Single)">
            <summary>
            Aligns the provided mesh according to the specified horizontal and vertical alignment types.
            </summary>
            <remarks>
            This method returns the pre-alignment bounding box. This is just to provide an efficiency saving
            for when we are working with multi-line text meshes.
            </remarks>
            <param name="mesh">The mesh to align.</param>
            <param name="halign">The horizontal alignment type.</param>
            <param name="valign">The vertical alignment type.</param>
            <param name="scale">The scaling factor from design units to scene space units.</param>
            <returns>The boulding box for the pre-aligned mesh (i.e. before alignment).</returns>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMeshBox">
            <summary>
            A box mesh with the given dimensions
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMeshSphere">
            <summary>
            A sphere mesh with the given dimensions
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMeshCylinder">
            <summary>
            A cylinder mesh with the given dimensions
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DTextureImage">
            <summary>
            Supports textures in the following file formats:
            .bmp, .emf, .exif, .gif, .ico, .jpg, .png, .tiff, and .wmf
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTextureImage.#ctor(System.Drawing.Image,System.Byte[])">
            For serializer
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTextureImage.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTextureImage.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DTextureMemory">
            <summary>
            Supports textures in the following file formats:
            .bmp, .dds, .dib, .hdr, .jpg, .pfm, .png, .ppm, and .tga
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.D3DTextureMemory.image">
            texture file bytes
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTextureMemory.#ctor">
            cached rendered version for GUI display
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTextureMemory.#ctor(SlimDX.Direct3D9.ImageInformation,System.Byte[])">
            For serializer
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTextureMemory.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTextureMemory.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.D3DTexture.animating">
            compressed version for use with graphics card
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.#ctor(System.Int32,System.Int32,System.Boolean)">
            For serializer
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.FromFile(System.String)">
            <summary>
            Load a texture from a file as an image or as a texture file.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.FromImage(System.Drawing.Image,System.Byte[])">
            <summary>
            Create a texture from an existing image.
            NOTE: A copy of the image is made locally so the image passed in needs
            to be Dispose'd elsewhere.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.CreateTexture">
            <summary>
            Unpack a mesh from a local serialized bytestream if necessary.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DTexture.Image">
            <summary>
            Convert texture to an Image for display in the GUI.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DTexture.RawFormat">
            <summary>
            Accessing the image from another thread can cause issues (System.InvalidOperationException: Object is currently in use elsewhere.)
            Provide a theadsafe accessor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.ChangeTextureFormat(SlimDX.Direct3D9.Device,SlimDX.Direct3D9.Texture,SlimDX.Direct3D9.Format,SlimDX.Direct3D9.Usage,SlimDX.Direct3D9.Pool,System.Int32)">
            <summary>
            Change texture format, ruffly based on the source code of
            Microsoft's dxtex tool (c).
            Basically we are just creating a new texture and load all mipmap
            surfaces with help of SurfaceLoader.FromSurface into the new format.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.GetLowestPowerOf2Count(System.Int32)">
            <summary>
            Returns the lowest power of 2 from a given check value,
            also returns always 1 or more (2 for 2, 3 for 4, 4 for 8, etc.)
            E.g. 432 returns 8 for 256, 18 returns 5 for 16, etc.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DTexture.IsTextureFormatSupported(SlimDX.Direct3D9.Format)">
            <summary>
            Verify the supplied texture format can be rendered using the current
            back buffer format.
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DTextureWriteable">
            <summary>
            A texture that is intended to be updated, not immutable.
            This is used for WebBrowserVisual and SVG rendering.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.D3DMesh">
            <summary>
            Visual object which encapsulates a Mesh and represents a pickable object
            all using Direct3D.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.D3DMesh.meshData">
            <summary>
            Store the serialized version here until we need to desrialize it.
            If mesh is null then look at bytes.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMesh.IgnoreVerticesOnOptimizeInMeshPropertySetter">
            <summary>
            <para>
            Oh, just don't ask.
            </para>
            <para>
            We had to add <see cref="F:SlimDX.Direct3D9.MeshOptimizeFlags.IgnoreVertices" /> in the <see cref="P:Demo3D.Visuals.Direct3D.D3DMesh.Mesh" /> property setter when calling
            <see cref="M:SlimDX.Direct3D9.Mesh.OptimizeInPlace(SlimDX.Direct3D9.MeshOptimizeFlags)" /> for D-6304 (after part of change for D-5875 which changed the code in the setter
            for getting the attribute data), but this then caused D-7210.
            </para>
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMesh.MeshVolume">
            <summary>
            Method 1) http://stackoverflow.com/questions/1406029/how-to-calculate-the-volume-of-a-3d-mesh-object-the-surface-of-which-is-made-up
            Method 2) http://www.gamedev.net/page/resources/_/technical/game-programming/area-and-volume-calculations-r2247
            Method 3) http://www.gamedev.net/topic/312027-is-it-possible-to-calculate-the-volume-for-a-mesh/
            Still looking for a definite numerically stable method... Currently using Method2.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.NormalsEqual(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Consider two normals equal if they are within 5 degrees of each other.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.DeserializeMesh">
            <summary>
            Unpack a mesh from a local serialized bytestream if necessary.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.GetVerticesFromIndices(System.Int32[],Microsoft.DirectX.Vector3[]@,System.Boolean,Microsoft.DirectX.Vector3[]@)">
            <summary>
            Get vertex information at the specified indices.
            </summary>
            <param name="indices">The indices of the vertices.</param>
            <param name="positions">The positions of the vertices.</param>
            <param name="wantNormals">When true, get the normal of the vertices.</param>
            <param name="normals">The normals of the vertices. The value will be null when wantNormals is false.</param>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.PickWorldFrustum(Microsoft.DirectX.Plane[],Microsoft.DirectX.Matrix)">
            <summary>
            Check all the vertexes on a mesh, if any are contained by the 
            frustum then the mesh is picked. Not ideal but good enough.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.FixVertexOrder(SlimDX.Direct3D9.Mesh)">
            <summary>
            Make sure vertex order is aligned with normals, reverse if not.
            </summary>
            <param name="mesh"></param>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.D3DMesh.HasWeldedVertices">
            <summary>
            When generating a position only mesh for a shadow volume this will 
            provide massive performance if set to true. It may however generate
            shadow artifacts if the mesh isn't clean. This is set in the
            Inventor import for example where meshes are squeeky clean.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.SmoothNormals(System.Double,System.Double)">
            <summary>
            Smooth Normals of vertices that are on edges of adjacent faces.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMesh.Optimize">
            <summary>
            Optimize mesh to make common attributes render together.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshWithMaterials.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.D3DMeshWithMaterials.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.DotXMeshLoader">
            <summary>
            Utility classes to help load/save meshes and their textures.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.DotXMeshLoader.FixAmbientMaterial(Microsoft.DirectX.Direct3D.ExtendedMaterial[])">
            <summary>
            Black ambient doesn't do us any favours although setting it to diffuse doesn't feel right either
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.DotXMeshLoader.LoadTextures(Microsoft.DirectX.Direct3D.ExtendedMaterial[],System.String,Demo3D.Visuals.TextureLibrary)">
            <summary>
            Cache textures locally.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Direct3D.MeshDataContainer">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.Direct3D.MeshDataContainer.meshDataBytes">
            <summary>
            Store the serialized version here until we need to desrialize it.
            If mesh is null then look at bytes.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Direct3D.MeshDataContainer.MeshVolume">
            <summary>
            Method 1) http://stackoverflow.com/questions/1406029/how-to-calculate-the-volume-of-a-3d-mesh-object-the-surface-of-which-is-made-up
            Method 2) http://www.gamedev.net/page/resources/_/technical/game-programming/area-and-volume-calculations-r2247
            Method 3) http://www.gamedev.net/topic/312027-is-it-possible-to-calculate-the-volume-for-a-mesh/
            Still looking for a definite numerically stable method... Currently using Method2.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.MeshDataContainer.DeserializeMesh">
            <summary>
            Unpack a mesh from a local serialized bytestream if necessary.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.VertexIterator.#ctor(SlimDX.Direct3D9.VertexBuffer,SlimDX.Direct3D9.VertexElement[])">
            <summary>
            Enumerate vertices of a single buffer.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Direct3D.VertexIterator.ContainsElement(SlimDX.Direct3D9.DeclarationUsage)">
            <summary>
            Does the vertex stream contain a particular usage (e.g. DeclarationUsage.Normal)?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.D3D9DeviceCaps.CheckSupportsHardwareTransformAndLight">
            <summary>
            Check the capabilities of the graphics card are capable of
            performing the vertex, matrix and light processing operations in hardware.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.D3D9DeviceCaps.Demo3D#Visuals#IDeviceCaps#CheckSupportsHardwareInstancing(Demo3D.Visuals.IDevice)">
            <summary>
            Check the capabilities of the graphics card are capable of
            rendering multiple instances of a mesh in a single call.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.D3D9DeviceCaps.CheckAndSetMultiSample(SlimDX.Direct3D9.PresentParameters,System.Int32)">
            <summary>
            Set a multisample level equal to or less than the supplied level that the device can support.
            Try a 24 bit z buffer first, then 16 bit, with 8, 4, 1 bit stencils.
            Then drop the stencil anmd try again.
            </summary>
            <returns>Returns number of bits of hardware stencil supported.</returns>
        </member>
        <member name="M:Demo3D.Visuals.D3D9DeviceCaps.CheckAndSetDepthAndMultiSample(SlimDX.Direct3D9.PresentParameters,SlimDX.Direct3D9.Format,System.Int32)">
            <summary>
            Get the closest level of multisampling that can be used to the value supplied.
            Always uses 32 bit color (Format.A8R8G8B8).
            </summary>
            <returns>True if any value was found to be OK for the device at the supplied z-buffer depth</returns>
        </member>
        <member name="M:Demo3D.Visuals.D3D9DeviceCaps.IsDeviceMultiSampleOK(SlimDX.Direct3D9.Format,SlimDX.Direct3D9.Format,SlimDX.Direct3D9.MultisampleType,System.Boolean)">
            <summary>
            Check an individual multisample type.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.StencilDepth">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.NumLights">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.MaxActiveLights">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.CullBackFaces">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.LightingEnable">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.SpecularEnable">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.AlphaBlendEnable">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.ZBufferEnable">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.ZBufferWriteEnable">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.NormalizeNormals">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.PointSize">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.MultiSampleLevel">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.MipMappingEnabled">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.DepthBias">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.World">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.View">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.Projection">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.Ambient">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.Texture0">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.TextureFilter">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.TextureFactor">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.CullMode">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.Material">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.VertexShaderVersion">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.PixelShaderVersion">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.VertexFormat">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.StreamSource0">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.IndexBuffer">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.VertexBlend">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDevice.IndexedVertexBlendEnable">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDevice.SetLight(System.Int32,Demo3D.Visuals.ILight)">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDevice.EnableLight(System.Int32,System.Boolean)">
            <summary>
            D3D9 Only
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDeviceCaps.CheckSupportsHardwareInstancing(Demo3D.Visuals.IDevice)">
            <summary>
            Check the capabilities of the graphics card are capable of
            rendering multiple instances of a mesh in a single call.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IDeviceFactory">
            <summary>
            Interface to create an IDevice
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDeviceFactory.CreateDevice(Demo3D.Renderers.IRenderControlBase,System.IntPtr)">
            <summary>
            Create an IDevice
            </summary>
            <param name="control">The control to use for the device</param>
            <param name="windowHandle">The handle for the main window for the device</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IDeviceUtil.RegisterSlimDXCleanup">
            <summary>
            <para>This ensures any remaining SlimDX objects are disposed on application exit,
            before SlimDX gets the chance to log debug information about them (and slow down the application exit).</para>
            <para>Must be called before the SlimDX ObjectTable is created to subscribe to the events before SlimDX does.</para>
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IDisplay">
            <summary>
            Interface that should be implemented for a single or multiport display.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.ProjectionFrustum">
            <summary>
            Get the current perspective projection as a set of planes for clipping.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.FullScreen">
            <summary>
            Fullscreen setting of display (defaults to false)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.Visual">
            <summary>
            Convenience definition for Document.Visual
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.DrawLines(Microsoft.DirectX.Vector3[],System.Drawing.Color,System.Single,System.UInt32,System.Boolean)">
            <summary>
            Adds a small z offset after view proj matrix to stop z-fighting
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.CreateMesh(Demo3D.Visuals.MeshBuilder)">
            <summary>
            Use a MeshBuilder instance to define a mesh, and use this method
            to convert it into an IMesh that can then be rendered.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.CreateMesh(Demo3D.Renderers.Meshes.MeshData)">
            <summary>
            Create a mesh from the raw 3D data. This is use by importers.
            </summary>
            <param name="mesh"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.CreateMesh(System.Collections.Generic.List{Demo3D.BREP.Entity})">
            <summary>
            Create a mesh from the boundary representation data. This is use by importers.
            </summary>
            <param name="brep">Boundary Representation list.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.EnableDiffuseLighting(System.Boolean)">
            <summary>
            Enable/Disable diffuse lighting for current render in progress.
            </summary>
            <param name="enable"></param>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.DepthBias">
            <summary>
            Offset polygons against existing polygons. 0 - no offset 16 - maximum offset.
            Floor is drawn at 0, shadows at 8 and everthing else at 16.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.ShadowRenderStyle">
            <summary>
            Use the PickMesh for drawing shadows or the real mesh if not solid
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.RenderShadowsStage">
            <summary>
            During the render of an object it should check to see if it's in shadow mode
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.MaterialLocked">
            <summary>
            Ignore any attempt to override the material while this is true.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.TextureLocked">
            <summary>
            Ignore any attempt to override the texture while this is true.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.RenderWorld">
            <summary>
            True if the world should be rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.RenderTransparent">
            <summary>
            True if transparent objects should be rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.MultiSampleLevel">
            <summary>
            Sets the anti alias level. 0 means no anti-aliasing.
            If the display doesn't support the supplied anti-aliasing level
            then the highest supported is set.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.LoadMesh(System.String)">
            <summary>
            Load a mesh from a .x file.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.LoadTexture(System.String)">
            <summary>
            Load a texture from a file.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.CreateTexture(System.Drawing.Image)">
            <summary>
            Create a texture from an existing Image.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.NumFacesRendered">
            <summary>
            Statistics about the number of faces rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.NumVertexesRendered">
            <summary>
            Statistics about the number of vertices rendered.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IDisplay.IsKeyPressed(System.Windows.Forms.Keys)">
            <summary>
            Is a key pressed or not currently?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.VertexShaderVersion">
            <summary>
            What version is the vertex shader (0 if not supported)?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDisplay.PixelShaderVersion">
            <summary>
            What version is the pixel shader (0 if not supported)?
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IView">
            <summary>
            Interface that abstracts a single camera view port in a multiple port
            display.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IView.DisplaySettingsProps">
            <summary>
            The display settings used when rendering the view.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IView.OutlineRendererEffect">
            <summary>
            The effect used to render outlines
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IView.Tag">
            <summary>
            INTERANAL USE ONLY
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IView.RenderToImage(System.Single,System.Single,Demo3D.Visuals.MeshRenderer)">
            <summary>
            Render the view to an image.
            </summary>
            <param name="width">The width of the created image.</param>
            <param name="height">The height of the created image.</param>
            <param name="renderer">The renderer to use for the render.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IView.RenderToByteArray(System.Single,System.Single,Demo3D.Visuals.MeshRenderer,Demo3D.Renderers.Textures.TextureFormat)">
            <summary>
            Render the view to a byte array
            </summary>
            <param name="width">The width of the created image.</param>
            <param name="height">The height of the created image.</param>
            <param name="renderer">The renderer to use for the render.</param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IView.Snapshot(System.Boolean)">
            <summary>
            A screen dump of the current displayed image. Will be used to generate
            previews for the palette.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IView.ApplyCustomCursorFromResource(System.Reflection.Assembly,System.String)">
            <summary>
            Apply a cursor, loaded from a resource in the specified assembly.
            </summary>
            <param name="assembly">The assembly where the cursor comes from</param>
            <param name="resourceName">The name of the resource</param>
        </member>
        <member name="M:Demo3D.Visuals.IView.ApplyReflectionTexture(Demo3D.Visuals.MeshMaterial,System.String)">
            <summary>
            Apply the reflection texture to a material effect
            </summary>
            <param name="material">The material to apply the reflection to</param>
            <param name="effectParameterName">The name of the reflection texture parameter</param>
        </member>
        <member name="T:Demo3D.Visuals.IViewExtensions">
            <summary>
            Extension methods for the IView interface. (interfaces don't support methods, just stubs)
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.IViewExtensions.GetAspect(Demo3D.Visuals.IView)">
            <summary>
            Should really be an extension property but they don't exist yet.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IViewFactory">
            <summary>
            Interface to create an IView
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IViewFactory.CreateView(Demo3D.Visuals.IDisplay,Demo3D.Renderers.IRenderControlBase)">
            <summary>
            Create an IView.
            </summary>
            <param name="display">The display used to create the view.</param>
            <param name="control">The control where the view will be rendered to.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IViewFactory.CreateView(Demo3D.Visuals.IDisplay,Demo3D.Renderers.IRenderControlBase,System.String)">
            <summary>
            Create an IView.
            </summary>
            <param name="display">The display used to create the view.</param>
            <param name="control">The control where the view will be rendered to.</param>
            <param name="name">The name of the view.</param>
            <returns></returns>
        </member>
        <member name="P:Demo3D.Visuals.RenderPane.ActivePane">
            <summary>
            The last render pane pane that was interacted with
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.D3DRenderer.GameControllerEnabledUpdatedHandler(System.Object,System.EventArgs)">
            <summary>
            Updates the state of the game controller button according to whether the game controller is enabled.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Visuals.D3DRenderer.StereoTrackerEnabledUpdatedHandler(System.Object,System.EventArgs)">
            <summary>
            Updates the state of the head tracking button according to whether head tracking is enabled.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="T:Demo3D.Visuals.DeflectorAspect">
            <summary>Deflectors physics group.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DeflectorAspect.BlocksSensor">
            <summary>Whether the deflector acts (only) to block collision sensors.</summary>
        </member>
        <member name="T:Demo3D.Visuals.DisplaySerializer">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DisplaySerializer.ParseType(System.String)">
            <summary>
            Parses the supplied text as a type name and returns the relevant Type instance.
            </summary>
            <param name="text">The text representing the type name.</param>
            <returns>An instance of Type corresponding to the type name supplied if one is found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.DisplaySerializer.ResolveReferences(Demo3D.Visuals.Document,Demo3D.Visuals.SerializableObjectLibrary,System.Collections.Generic.List{Demo3D.Common.PWSerializer.SerializedReferenceData})">
            <summary>
            Attempt to resolve references using the visuals/aspects in the document
            </summary>
            <param name="doc">The document to find references in</param>
            <param name="objectLibrary">The SerializableObjectLibrary to find references in</param>
            <param name="data">The data that needs resolving</param>
        </member>
        <member name="M:Demo3D.Visuals.DistanceField.XYToInt(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get int value of x,y pos,
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="pixelSize"></param>
            <param name="offset">0 - Red, 1 - Green, 2 - Blue</param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.DiverterComponent">
            <summary>
            The type of divert component graphic to use.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.DiverterRollerConveyorProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DiverterRollerConveyor">
            <summary>
            Class encapsulating the behavior of an angled divert roller or wheel conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.DiverterRollerConveyor.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DiverterRollerConveyor.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.DiverterRollerConveyor.UseSurfaceSideMaterial">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.DiverterRollerConveyor.DiverterComponent">
            <summary>Show as Roller or Ball.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DiverterRollerConveyor.NumRollersAcrossWidth">
            <summary>The number of rollers or balls across the width of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DiverterRollerConveyor.ShowDivertAngle">
            <summary>Whether or not to show the divert angle or not. When false the graphic of the divert won't reflect the divert angle. Simulation performance will be higher with this set to false as the mesh will not need to be recalculated when the angle changes.</summary>
        </member>
        <member name="T:Demo3D.Visuals.DocumentNeedsSaveChangedDelegate">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DocumentVars">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IDocument">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ITypeResolver">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Document">
            <summary>
            The Document class is the root for the currently loaded document.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.FileExtension">
            <summary>The file extension to be used for documents including the '.'/period.</summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.FileExtensionXml">
            <summary>The file extension to be used for documents in source control format including the '.'/period.</summary>
        </member>
        <member name="E:Demo3D.Visuals.Document.NeedsSaveChangedListeners">
            <summary>
            Event called when NeedsSave changes - used to put the (*) in the title if the document needs saving.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Document.NeedsSaveSetListeners">
            <summary>
            Event called when NeedsSave is set (even if it is unchanged) - Used for the AutoSave feature.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindDotNetType(System.String)">
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.Document.ResetListeners">
            <summary>
            Occurs when the document is reset.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.AllowAspectMethodInvoking">
            <summary>
            When true, allow aspects to invoke their OnAdded, OnInitialized etc methods.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.LoadedHeader">
            <summary>This will only be set for documents that have been loaded from disk</summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Visual">
            <summary>
            Top-level visual for the document
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Cameras">
            <summary>
            The collection of views in the model.
            This is a mapping of string names to Camera objects.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.DefaultCamera">
            <summary>
            The name of the default View when loading or saving (looked up in Cameras).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.EventQueue">
            <summary>
            The simulation dispatcher for scheduling asynchronous or future actions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.HasNeverBeenSaved">
            <summary>
            True for new documents that haven't been saved yet, false if the model has been loaded.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.Path">
            <summary>Filename for this document, empty for a new or unsaved document.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Application">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.App">
            <summary>The application hosting the document.</summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.RedrawTarget">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.Notes">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.References">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.Random">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Document.DeleteListenersOnReset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.UndoRedoManager">
            <summary>
            The undo manager used to control undo's and redo's.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.#ctor">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.#ctor(Demo3D.Visuals.IBuilder)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.#ctor(Demo3D.Visuals.IBuilder,Demo3D.Visuals.IDisplay)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.UserVars">
            <summary>
            Temporary place for scripting to place variables, that will survive across resets. These values
            are *not* to be serialized.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.BBoxLockManager">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.LockManager">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.StateLockManager">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RegisterAction(Demo3D.Script.Function)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.Experiments">
            <summary>
            The collection of experiments in Sim3D that can be run in batch.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.Get``1(System.Collections.Hashtable,System.String,``0)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RegisterAction(System.Collections.Hashtable)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindScript(System.Type)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindScript(System.Reflection.Assembly)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindScriptForAssemblyName(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindTypeInScripts(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ToVisual(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisual(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Fillet(System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Fillet(Demo3D.Visuals.StraightConveyor,Demo3D.Visuals.StraightConveyor,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Fillet(Demo3D.Visuals.StraightConveyor,Demo3D.Visuals.StraightConveyor,System.Double,Demo3D.Visuals.CurveConveyor)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.DocumentEdition">
            <summary>
            The edition that the document was last saved in.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.ClearScene">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.LayersUpdated">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.UpdateCAD">
            <summary>
            Check if imported CAD has changed and re-import.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.Header.GetVersionString">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Header.GetVersion">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Header.GetProductString">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Document.Header.CompanyOverride">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Header.GetCompanyString">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.NeedsSave">
            <summary>
            Whether the current document has been modified and needs saving.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Script">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.Resources">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.IsCurrent">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.PhysicsEngine">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindConveyors(Demo3D.Visuals.BBox)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindDeflectors(Demo3D.Visuals.BBox)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindSensors(Demo3D.Visuals.BBox)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindLoads(Demo3D.Visuals.BBox)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVehicles(Demo3D.Visuals.BBox)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Redraw">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.EditAllowed">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.AssertLocked">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ExecuteWithNoParent(System.Collections.IList,System.Action{System.Collections.Generic.List{Demo3D.Visuals.Visual}})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ExecuteWithNoParent(System.Collections.Generic.List{Demo3D.Visuals.Visual},System.Action{System.Collections.Generic.List{Demo3D.Visuals.Visual}})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ExecuteWithNoParent(Demo3D.Visuals.Visual,System.Action{Demo3D.Visuals.Visual})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.AddVisual(Demo3D.Visuals.Visual)">
            <summary>
            Add a visual to the document parented to the scene.
            This is most useful when new visuals have been created but are not yet in the visual hierarchy.
            </summary>
            <param name="visual">Visual to add to the document.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.AddVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Add a visual to the document with a specified parent.
            This is most useful when new visuals have been created but are not yet in the visual hierarchy.
            </summary>
            <param name="visual">Visual to add to the document.</param>
            <param name="parent">Parent to add the visual to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.SwitchDocumentAndCollectVisuals(System.Collections.Generic.List{Demo3D.Visuals.Visual},Demo3D.Visuals.Visual,Demo3D.Visuals.VisualRenameRule)">
            <summary>
            <para>This is *ONLY* designed for use in <see cref="M:Demo3D.Visuals.Document.AddVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.VisualRenameRule)" />. It was a "local function" in
            this method, but this caused lambda memory allocations.</para>
            Recursive function to switch a visual and all its children to this Document, recording the list of visuals involved.
            </summary>
            <param name="visuals">Cumulative list of all visuals traversed.</param>
            <param name="v">Starting point visual for this recursion.</param>
            <param name="r">RenameRule for this recursion.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.AddVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.VisualRenameRule)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.AddVisuals(System.Collections.IEnumerable,Demo3D.Visuals.VisualRenameRule)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.AddVisuals(System.Collections.IEnumerable,System.Collections.IEnumerable,Demo3D.Visuals.VisualRenameRule)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisual(Demo3D.Visuals.VisualFactory)">
            <summary>
            Create a visual given a visual factory.
            This is mostly used to create specific visuals from catalogs.
            </summary>
            <param name="factory">Visual factory to create a visual tree from.</param>
            <returns>A new tree of visuals based on the supplied visual factory.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisual(System.String)">
            <summary>
            Create a visual given a visual factory name.
            This can be a type such as "BoxVisual" or a name of a catalog component loaded into the current application.
            </summary>
            <param name="factoryName">The type name or catalog component name of the visual to create.</param>
            <returns>Returns null if no factory can be found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisual``1">
            <summary>
            Create a new visual of a given type such as BoxVisual.
            </summary>
            <typeparam name="T">A type derived from Visual.</typeparam>
            <returns>A default constructed version of the specific type.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisualWithProperties``1(Demo3D.Visuals.VisualProperties)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.DestroyVisual(Demo3D.Visuals.Visual)">
            <summary>
            Delete this visual and remove it from the document.
            </summary>
            <remarks>
            Consider using <see cref="M:Demo3D.Visuals.Visual.Delete" /> instead.
            </remarks>
            <param name="visual">Visual to destroy</param>
        </member>
        <member name="T:Demo3D.Visuals.Document.DisconnectVisualFlags">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.DisconnectVisual(System.Collections.IList,Demo3D.Visuals.Visual,Demo3D.Visuals.Document.DisconnectVisualFlags)">
            <summary>
            Disconnect any connectors on a visual which aren't connected to visuals
            in the excepttList.
            </summary>
            <param name="exceptList">Keep connected to these visuals.</param>
            <param name="visual">Visual to disconnect from other visuals.</param>
            <param name="flags"></param>
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindLayer(System.String)">
            <summary>
            Find a layer by name.
            </summary>
            <param name="name">Name of the layer to find.</param>
            <returns>The existing layer if it exists, otherwise null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.GetLayer(System.String)">
            <summary>
            Find or create a layer by name.
            </summary>
            <param name="name">The name of the layer to find or create.</param>
            <returns>The existing or new layer.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.PurgeLayers">
            <summary>
            Remove all unused layers from the document.
            </summary>
            <returns>true if layers were removed, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateRegisteredScript(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RegisterScript(Demo3D.Visuals.ScriptContainer)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.HookChannels(Demo3D.Visuals.Visual)">
            <summary>
            Find all the "Channel" properties, and re-hook them into the ResetListeners - recursive
            </summary>
            <param name="visual">Visual to start the process off from (usually doc.Scene)</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Initialize">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.EventLogPath">
            <summary>
            Log events to this file, if null don't log events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.LogEvent(System.String)">
            <summary>
            Output event diagnostics to the current EventLogPath if not null.
            </summary>
            <param name="message">The message to log to the EventLogPath.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.DumpState">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.DumpState(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.DeleteLoadDuringReset(Demo3D.Visuals.Visual)">
            <summary>
            Helper for deleting loads during the call to Reset(). Recursive into groups containing loads and/or groups containing loads, etc.
            </summary>
            <param name="load">Load (or group containing loads or groups of load)</param>
            <returns>true if load/group deleted</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Reset">
            <summary>
            Reset the current document.
            Normally this is done using the user interface.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.Error(System.String,System.Object)">
            <summary>
            Log an error message.
            </summary>
            <param name="errorMessage">The error message.</param>
            <param name="context">The context for the error message (e.g. a Visual).</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Warning(System.String,System.Object)">
            <summary>
            Log a warning message.
            </summary>
            <param name="warningMessage">The warning message.</param>
            <param name="context">The context for the warning message (e.g. a Visual).</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Info(System.String,System.Object)">
            <summary>
            Log an info message.
            </summary>
            <param name="infoMessage">The info message.</param>
            <param name="context">The context for the info message (e.g. a Visual).</param>
        </member>
        <member name="P:Demo3D.Visuals.Document.Name">
            <summary>
            The file name of the document without the extension.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Scene">
            <summary>
            The top level SceneVisual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.TagServerConnections">
            <summary>
            Tag Server connections.
            <para>For internal Demo3D use - do *NOT* make public, since we now store tag server information for
            all editions that can "access connections" (<see cref="M:Demo3D.Licensing.IEditionExtensions.CanAccessConnections(Demo3D.Licensing.IEdition,Demo3D.Visuals.Document)" />)
            or "save document" (<see cref="M:Demo3D.Licensing.IEdition.CanSaveDocument(Demo3D.Visuals.Document)" />), since we don't want to strip out tag server information.
            </para>
            <remarks>
            <see cref="P:Demo3D.Visuals.Document.Connections" /> is the publicly accessible one, which only returns valid data in the case that the edition
            can "access connections" (<see cref="M:Demo3D.Licensing.IEditionExtensions.CanAccessConnections(Demo3D.Licensing.IEdition,Demo3D.Visuals.Document)" />).
            </remarks>
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.CanModifyTagServerConnections">
            <summary>
            Are we allowed to modify the TagServerConnections?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.ThrowUnlessCanModifyTagServerConnections">
            <summary>
            Throw an exception if CanModifyTagServerConnections is false.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Connections">
            <summary>
            Tag Server connections (if available).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.TagImporterProperties">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.TagImporterFileName">
            <summary>
            The path to the tag server definitions file used when Import is pressed in the TagBrowser.
            This is equivalent to TagImporterProperties.FileName.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.ImportTags(System.String,Demo3D.TagServer.TagImporterConfiguration,Demo3D.TagServer.IServer)">
            <summary>
            Load tag definitions and server configurations from disk.
            The path used is TagImporterFileName (equivalent to TagImporterProperties.FileName).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.VisualIdMap">
            <summary>
            This has the same lifetime as the document and is used while
            editing the model as well as while saving it.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.CheckMap">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.Visuals">
            <summary>
            Use an enumerator to walk the scene tree.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisual(System.Guid)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisuals(System.Guid[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.SetVisualId(Demo3D.Visuals.Visual,System.Guid)">
            <summary>
            Undo the current visual/guid binding if there is one and introduce
            a new binding. NOTE: The Visual.Id field needs to be updated
            after this.
            </summary>
            <param name="visual"></param>
            <param name="id"></param>
        </member>
        <member name="M:Demo3D.Visuals.Document.GetIds(System.Collections.IList)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.GetVisuals(System.Guid[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.VisualRegistryLookup(System.String)">
            <summary>
            Like VisualRegistryGetAll, but don't insert an empty list if it is not present
            </summary>
            <param name="name">Visual name to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.VisualRegistryRemove(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.VisualRegistryAdd(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.VisualRegistryContains(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.VisualRegistryGet(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisualExhaustively(System.String,System.String)">
            <summary>
            Finds a visual from its partial name, and a property that we know exists on the visual.
            FindVisual will, for each part of the path, only look at the first visual of that name it finds.
            This method will however look exhaustively for a match, and so where there are duplicated visual names it will succeed where FindVisual fails.
            </summary>
            <param name="name">The full name of the visual to find.</param>
            <param name="propertyName">A property known to exist on the visual (or null).</param>
            <returns>The named visual if it was found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisualsByName(System.String)">
            <summary>
            Find all the visuals in the document scene with a given name.
            </summary>
            <param name="name">The name of the visual to search for.</param>
            <returns>A list of visuals whose Name property matches the supplied name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisualByName(System.String)">
            <summary>
            Find the first visual in the document scene with a given name.
            </summary>
            <param name="name">The name of the visual to search for.</param>
            <returns>The first visual whose Name property matches the supplied name.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Document.IsReady">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisual(System.String)">
            <summary>
            Find Visual by name, return one of them if there are multiple visuals,
            but warn if there are more than one.
            </summary>
            <param name="name">Visual name to search for.</param>
            <returns>The first visual whose name property matches the supplied name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindAnyVisual(System.String)">
            <summary>
            Find Visual by name, return one of them if there are multiple visuals,
            but do not warn if there are more than one.
            </summary>
            <param name="name">Visual name to search for.</param>
            <returns>The first visual whose name property matches the supplied name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindCreateVisual(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Attempt to find a child of the parent visual with the specified name. If it fails to find one, create one instead.
            </summary>
            <param name="parent">The Visual whose children to find</param>
            <param name="name">The name of the Visual to find</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.GetVisualUniqueName(Demo3D.Visuals.ExprString,Demo3D.Visuals.ExprContext)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RegisterVisual(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.UnregisterVisual(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindType``1">
            <summary>
            Enumerate all visuals of a specified type.
            </summary>
            <remarks>
            The returned collection <b><u>IS NOT SAFE</u></b> to iterate over and to call functions that add or remove Visuals
            of the supplied type from the Scene, e.g. <see cref="M:Demo3D.Visuals.Visual.Delete" />.
            </remarks>
            <typeparam name="T">A <see cref="T:Demo3D.Visuals.Visual" /> or a type derived from <see cref="T:Demo3D.Visuals.Visual" />.</typeparam>
            <returns>A collection of visuals of the specified type.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindType(System.Type,System.Boolean)">
            <summary>
            Enumerate all visuals of a specified type.
            </summary>
            <remarks>
            The returned collection <b><u>IS SAFE</u></b> to iterate over and to call functions that add or remove Visuals
            of the supplied type from the Scene, e.g. <see cref="M:Demo3D.Visuals.Visual.Delete" />, <b><u>ONLY IF</u></b> <paramref name="copy" /> is true.
            </remarks>
            <param name="type">The <see cref="T:System.Type" /> of visual to search for.</param>
            <param name="copy">If true, then make sure that returned collection is not referenced anywhere else (see remarks), if false, it may be.</param>
            <returns>A list of visuals of the supplied type.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindType(System.Type)">
            <summary>
            Enumerate all visuals of a specified type.
            </summary>
            <remarks>
            The returned collection <b><u>IS SAFE</u></b> to iterate over and to call functions that add or remove Visuals
            of the supplied type from the Scene, e.g. <see cref="M:Demo3D.Visuals.Visual.Delete" />.
            </remarks>
            <param name="type">The <see cref="T:System.Type" /> of visual to search for.</param>
            <returns>A list of visuals of the supplied type.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.AddToVisualsByType(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RemoveFromVisualsByType(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.TableCustomProperties">
            <summary>
            List of all CustomProperties of type TableReference in the scene.
            This is a cache which is cleared on reset.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Lights">
            <summary>
            Find all the LightVisual visuals in the Scene.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.Unload">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Finalize">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.Dispose">
            <summary>
            Free any resources this object uses, don't expect to reuse it
            afterwards. Use Clear() if you wish to reuse the object
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Document.IsDisposing">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.IsDisposed">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Document.ConnectorSerializer">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Document.LookOptions">
            <summary>
            Options when looking for visuals.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.LookOptions.Default">
            <summary>
            Include only visible and selectable visuals.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.LookOptions.All">
            <summary>
            Look for all visuals.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.LookOptions.IncludeInvisible">
            <summary>
            Include invisible visuals.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.LookOptions.IncludeNonSelectable">
            <summary>
            Include non-selectable visuals.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.LookOptions.LookInsideGroups">
            <summary>
            Look inside groups.
            </summary>
            <remarks>
            If used then the child visual that was found will be returned. Otherwise, the group
            will be returned.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.Document.LookOptions.IgnoreSelectParentWhenPicked">
            <summary>
            Ignore <see cref="P:Demo3D.Visuals.Visual.SelectParentWhenPicked" /> properties.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.LookOptions.AdjustLookFromPosition">
            <summary>
            Move the "look" position very slightly "down" the direction to avoid cases where the
            "look" position is on the surface of a visible object and we don't want to "find" this
            visual. This is the default for LookDown when using a Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.LookDown(Demo3D.Visuals.Visual,Demo3D.Visuals.Document.LookOptions)">
            <summary>
            Find the first visual below the lookFrom visual with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.
            </summary>
            <param name="lookFrom">The visual to look below.</param>
            <param name="options">The options for the look.</param>
            <returns>The first visual below the lookFrom visual with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.LookDown(Demo3D.Visuals.Visual,System.Int32)">
            <summary>
            Find the first visual below the lookFrom visual with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.
            </summary>
            <param name="lookFrom">The visual to look below.</param>
            <param name="options">The options for the look.</param>
            <returns>The first visual below the lookFrom visual with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.</returns>
            <remarks>This is just a helper function for use within JScript</remarks>
        </member>
        <member name="M:Demo3D.Visuals.Document.LookDown(Demo3D.Visuals.Visual)">
            <summary>
            Find the first visual below the lookFrom visual.
            </summary>
            <param name="lookFrom">The visual to look below.</param>
            <returns>The first visual below the lookFrom visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.LookDown(Microsoft.DirectX.Vector3,Demo3D.Visuals.Document.LookOptions)">
            <summary>
            Find the first visual below the lookFrom world location with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.
            </summary>
            <param name="lookFrom">The world location to look below.</param>
            <param name="options">The options for the look.</param>
            <returns>The first visual below the lookFrom world location with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.LookDown(Microsoft.DirectX.Vector3,System.Int32)">
            <summary>
            Find the first visual below the lookFrom world location with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.
            </summary>
            <param name="lookFrom">The world location to look below.</param>
            <param name="options">The options for the look.</param>
            <returns>The first visual below the lookFrom world location with the given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.</returns>
            <remarks>This is just a helper function for use within JScript</remarks>
        </member>
        <member name="M:Demo3D.Visuals.Document.LookDown(Microsoft.DirectX.Vector3)">
            <summary>
            Find the first visual below the lookFrom world location.
            </summary>
            <param name="lookFrom">The world location to look below.</param>
            <returns>The first visual below the lookFrom world location.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Look(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Demo3D.Visuals.Document.LookOptions)">
            <summary>
            Find the first visual from a location and in a direction with given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.
            </summary>
            <param name="lookFrom">The world location to look from.</param>
            <param name="direction">The world direction to look.</param>
            <param name="options">The options for the look.</param>
            <returns>The first visual from a location and in a direction with given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Look(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Int32)">
            <summary>
            Find the first visual from a location and in a direction with given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.
            </summary>
            <param name="lookFrom">The world location to look from.</param>
            <param name="direction">The world direction to look.</param>
            <param name="options">The options for the look.</param>
            <returns>The first visual from a location and in a direction with given <see cref="T:Demo3D.Visuals.Document.LookOptions" />.</returns>
            <remarks>This is just a helper function for use within JScript</remarks>
        </member>
        <member name="M:Demo3D.Visuals.Document.Look(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Find the first visual from a location and in a direction.
            </summary>
            <param name="lookFrom">The world location to look from.</param>
            <param name="direction">The world direction to look.</param>
            <returns>The first visual from a location and in a direction.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.PickAll(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.PurgeScripts">
            <summary>
            Remove all unused scripts from the document.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.PurgePortsProperties">
            <summary>
            Reset legacy "Ports" property for all visuals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.PrivateRemoveDuplicateOrSimilarScripts(Demo3D.Visuals.ScriptContainer,System.Boolean)">
            <summary>
            For the given script, look for similarly named scripts that have the "same contents", and replace the duplicates
            with this script, or if force is true, just replace similarly named scripts with this script.
            </summary>
            <param name="s">Source <see cref="T:Demo3D.Visuals.ScriptContainer" /></param>
            <param name="force">If true, don't do the "contents" check, assume we want the replacement to happen</param>
            <remarks>Explicitly not publically documented, you need to know what you're doing!</remarks>
            <returns>Number of scripts removed</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.RemoveDuplicateScripts(Demo3D.Visuals.ScriptContainer)">
            <summary>
            For the given script, look for similarly named scripts that have the "same contents", and replace the duplicates
            with this script
            </summary>
            <param name="s">Source <see cref="T:Demo3D.Visuals.ScriptContainer" /></param>
            <remarks>Explicitly not publically documented, you need to know what you're doing!</remarks>
            <returns>Number of scripts removed</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.RemoveDuplicateScripts(System.String)">
            <summary>
            For the given script, look for similarly named scripts that have the "same contents", and replace the duplicates
            with this script
            </summary>
            <param name="script">Source <see cref="T:Demo3D.Visuals.ScriptContainer" /> to find by name</param>
            <remarks>Explicitly not publically documented, you need to know what you're doing!</remarks>
            <returns>Number of scripts removed</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.RemoveSimilarScripts(Demo3D.Visuals.ScriptContainer)">
            <summary>
            For the given script, look for similarly named scripts and replace them with this script
            </summary>
            <param name="s">Source <see cref="T:Demo3D.Visuals.ScriptContainer" /></param>
            <remarks>Explicitly not publically documented, you need to know what you're doing!</remarks>
            <returns>Number of scripts removed</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.RemoveSimilarScripts(System.String)">
            <summary>
            For the given script, look for similarly named scripts and replace them with this script
            </summary>
            <param name="script">Source <see cref="T:Demo3D.Visuals.ScriptContainer" /> to find by name</param>
            <remarks>Explicitly not publically documented, you need to know what you're doing!</remarks>
            <returns>Number of scripts removed</returns>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Document.IsApplicationDocument">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.SignedAs">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.SetSignedAs(System.String)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Document.FileFormat">
            <summary>
            <para>The internal file format for .demo3d files (doesn't apply to .demo3dx files currently).</para>
            <para>DO NOT add support for the commented values in editions earlier than 2021, they are used to prevent files from loading in these editions.</para>
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.FileFormat._2005_">
            <summary>
            Format 1: The original save file format from 2005.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.FileFormat._2008_">
            <summary>
            Format 2: 16-Sep-08. Indicates that ScriptConstraints.UpgradeDocument() has been called. Older formats will 
            trigger the upgrade when loaded.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.FileFormat._2020_">
            <summary>
            Format 3: Zipped .demo3dx format that stores meshes and textures directly in the .zip, not as base64 encoded
            strings inside the main XML. This reduces file size and massively improves load and save times.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Document.SignedFileFormat">
            <summary>
            <para>This is the same underlying file format as <see cref="T:Demo3D.Visuals.Document.FileFormat" />, but only available in 2021 and onwards. Loading will fail in older editions.</para>
            <para>Used for signed catalogs/documents.</para>
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Document.DefaultFileFormat">
            <summary>
            New files with be zipped .demo3dx files. Old files will retain their previous format unless upgraded explicitly.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.IsLoading">
            <summary>
            Is the document currently loading.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.Load(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.LoadWithoutPhysics(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.DebugNativeScripts">
            <summary>
            Indicate to the script compiler that debug DLLs with PDBs should be generated.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.ConvertToDll(Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.Document,Demo3D.Visuals.INeedsSave)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.ConvertToDLL(Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.Document,Demo3D.Visuals.ConvertToDLLOptions)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.HasBOM(System.Byte[])">
            <summary>
            Does array start with a Byte-Order-Marker (BOM).
            </summary>
            <param name="data">Data to check.</param>
            <returns>True if there is a BOM, false if data is null or there is not a BOM.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.MatchBOMs(System.Byte[],System.Byte[]@)">
            <summary>
            Given two sets of data, make the new data have the same BOM'ness as the old data.
            </summary>
            <param name="oldProjectBytes">Old data.</param>
            <param name="newProjectBytes">New data, which is changed to match the BOM'ness of the old data.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.UpdateProjectReferences(Demo3D.Visuals.ScriptContainer,System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            See <see cref="M:Demo3D.Visuals.Document.UpdateProjectReferences(Microsoft.Build.Evaluation.Project,Demo3D.Visuals.ScriptContainer,System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})" />. Does nothing if the script does not have project source.
            </summary>
            <param name="script">The script for which the project references will be updated to match the import script references.</param>
            <param name="library">The library containing the scripts referenced by <paramref name="script" />, and <paramref name="script" /> itself.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.UpdateProjectReferences(Microsoft.Build.Evaluation.Project,Demo3D.Visuals.ScriptContainer,System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            <para>Replaces existing project references in the project with new ones defined using the import script references from the script, and script keys from the library.</para>
            <para>Also updates the native source of the script if a project file exists.</para>
            </summary>
            <param name="project">The project to update the project references for.</param>
            <param name="script">The corresponding script for <paramref name="project" />, which contains the import script references.</param>
            <param name="library">The library containing the scripts referenced by <paramref name="script" />, and <paramref name="script" /> itself.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.ImportVisualStudioProject(Microsoft.Build.Evaluation.ProjectCollection,System.Collections.Generic.List{Demo3D.Visuals.ScriptContainer},Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.ScriptType,System.String)">
            <summary>
            Import Visual Studio Project of type Project or CSharp.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.GetProjectPath(Demo3D.Visuals.ScriptContainer,System.String,System.Boolean)">
            <summary>
            <para>Gets the full path of the .csproj for the given script container as it is, or as it is expected to be, in the given solution directory.</para>
            <para>If <paramref name="useFileSystem" /> is true, <paramref name="solutionDir" /> is searched for the .csproj. 
            If <paramref name="useFileSystem" /> is false, the script's native sources are searched for the .csproj.</para>
            <para>If no .csproj is found, the expected .csproj path is returned. See <see cref="M:Demo3D.Visuals.Document.GetExpectedProjectPath(Demo3D.Visuals.ScriptContainer,System.String)" />.</para>
            </summary>
            <param name="script">The script to get the .csproj path for.</param>
            <param name="solutionDir">The directory the returned path should be prefixed by.</param>
            <param name="useFileSystem">If true, <paramref name="solutionDir" /> is searched for the .csproj. If false, the script's native sources are searched for the .csproj.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.AddProjectReference(Microsoft.Build.Construction.ProjectItemGroupElement,Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.ScriptContainer)">
            <summary>
            Adds a reference to the project associated with <paramref name="referencedScript" /> to <paramref name="referencesGroup" />, which should be associated with the project of <paramref name="script" />.
            </summary>
            <param name="referencesGroup">The item group to add the ProjectReference to.</param>
            <param name="script">The referencing script.</param>
            <param name="referencedScript">The referenced script.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateScriptVisualStudioFiles(Demo3D.Visuals.ScriptContainer,Microsoft.Build.Evaluation.ProjectCollection,System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer},System.String,System.Boolean,System.Boolean,System.Boolean,Demo3D.Common.TemporaryFiles)">
            <summary>
            Create project and write out sources for a script
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.AddScriptDLLReferences(Demo3D.Visuals.ScriptContainer,Microsoft.Build.Evaluation.Project,System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            Adds references to the DLLs from any DLL projects or 'catalog encrypter' scripts referenced by the given script to the given project.
            </summary>
            <param name="script">The script to add DLL references for.</param>
            <param name="project">The project to add the DLL references to.</param>
            <param name="library">The library containing all scripts referenced by <paramref name="script" />.</param>
            <returns>Returns true if any references were added to the project.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisualStudioFiles(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a solution and project in order to build this model in Visual Studio.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindVisualStudioWithCSharpSupport(Demo3D.Visuals.IBuilder)">
            <summary>
            Find Installed Visual Studio that supports C#.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Document.SourceCodeSuspendWatcher">
            <summary>
            Do using (new SourceCodeSuspendWatcher()) { ... } to prevent file changes being broadcast.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.SourceCodeSuspendWatcher.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.SourceCodeSuspendWatcher.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.DebugAttach">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.AttemptCompileAll(System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.GetRotation(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.FindUserResource(System.String)">
            <summary>
            Gets the UserResource instance with the specified path within this document's user resources.
            </summary>
            <param name="localPath">The local path of the user resource within this document.</param>
            <returns>The user resource matching the localPath.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="UserResource" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Document.FindUserResource(Demo3D.Visuals.UserResourceReference)">
            <summary>
            Gets the UserResource instance with the specified UserResourceReference within this document's user resources.
            </summary>
            <param name="userResourceReference">The UserResourceReference of the user resource within this document.</param>
            <returns>The user resource matching the userResourceReference.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="UserResource" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Document.HandleRenamedUserResource(System.String,System.String)">
            <summary>
            Checks if a recently renamed user resource is referenced by any UserResourceReference properties and updates them (prompting the user).
            </summary>
            <param name="oldPath">The previous local path of the user resource.</param>
            <param name="newPath">The new local path of the user resource.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.HandleRenamedUserResourceDirectory(System.String,System.String)">
            <summary>
            Checks if a recently renamed user resource directory affects any UserResourceReference properties and updates them (prompting the user).
            </summary>
            <param name="oldPath">The previous local path of the user resource directory.</param>
            <param name="newPath">The new local path of the user resource directory.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Export(System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Document.IsSaving">
            <summary>
            Is the document currently saving.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.Save">
            <summary>
            Save the current document to disk with a thumbnail based on the Default view.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.Save(System.Drawing.Image)">
            <summary>
            Save the current document to disk with a custom thumbnail.
            </summary>
            <param name="thumbnail">Thumbnail image to use for the document.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.SavePrivate(System.Drawing.Image)">
            <summary>
            Save the current document to disk with a custom thumbnail.
            </summary>
            <param name="thumbnail">Thumbnail image to use for the document.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.SaveToXmlDemo3D(Demo3D.Visuals.FileBasedSerializer,System.Drawing.Image,Demo3D.Visuals.SharedResources,Demo3D.Utilities.BackupManager,System.String,System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <summary>
            Save selected visuals from this document to specified path in .demo3dx format
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.SaveToXmlDemo3D(System.Drawing.Image,Demo3D.Utilities.BackupManager,Demo3D.Visuals.SharedResources)">
            <summary>
            Save this document to .demo3dx format
            </summary>
            <param name="thumbnail"></param>
            <param name="backupManager"></param>
            <param name="resourcesInUse"></param>
        </member>
        <member name="M:Demo3D.Visuals.Document.GetThumbnail(System.String)">
            <summary>
            Get a thumbnail from a document.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.GetThumbnail(System.String,System.Nullable{System.Drawing.Size})">
            <summary>
            Get a thumbnail from a document given the size of image required.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.NotInAppDocument(Demo3D.Visuals.Visual)">
            <summary>
            Check that visual is parented to a Scene object and that that scene is in the app document.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScript``1(System.String,Demo3D.Visuals.ScriptReference{``0},``0)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScript``2(System.String,Demo3D.Visuals.ScriptReference{``0,``1},``0,``1)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScript``3(System.String,Demo3D.Visuals.ScriptReference{``0,``1,``2},``0,``1,``2)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScript``4(System.String,Demo3D.Visuals.ScriptReference{``0,``1,``2,``3},``0,``1,``2,``3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScript(System.String,Demo3D.Visuals.ScriptReference,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``1(System.String,Demo3D.Visuals.ScriptReference{``0},``0)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``2(System.String,Demo3D.Visuals.ScriptReference{``0,``1},``0,``1)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``3(System.String,Demo3D.Visuals.ScriptReference{``0,``1,``2},``0,``1,``2)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``4(System.String,Demo3D.Visuals.ScriptReference{``0,``1,``2,``3},``0,``1,``2,``3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow(System.String,Demo3D.Visuals.ScriptReference,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``1(Demo3D.Visuals.ScriptReference{``0},``0)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``2(Demo3D.Visuals.ScriptReference{``0,``1},``0,``1)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``3(Demo3D.Visuals.ScriptReference{``0,``1,``2},``0,``1,``2)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow``4(Demo3D.Visuals.ScriptReference{``0,``1,``2,``3},``0,``1,``2,``3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunScriptNow(Demo3D.Visuals.ScriptReference,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RunNow(Demo3D.Script.Function,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ConstructScriptThread(Demo3D.Script.Function,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ConstructScriptThread(Demo3D.Visuals.ScriptReference,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisuals(System.String)">
            <summary>
            Create all visuals from an XML Document.
            </summary>
            <param name="xml">The XML string to create the visual tree from.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisual(System.Xml.XmlDocument)">
            <summary>
            Create a single visual from an XmlDocument.
            </summary>
            <param name="xml">The XML document to create the visual tree from.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.CreateVisualFromSerialized(System.String)">
            <summary>
            Create a single visual from a serialized version of the visual.
            </summary>
            <param name="serialized">The XML string to create the visual tree from.</param>
        </member>
        <member name="P:Demo3D.Visuals.Document.Time">
            <summary>
            The current simulation time.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.EventTimeStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.MechanismsTimeStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.PhysicsTimeStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.PhysicsEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.LoadsCollide">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.VehiclesCollide">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.ConnectOnLoad">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.ActionCatalog">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Assert(System.Boolean,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Print(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.CurrentThread">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.Wait(System.Double)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Document.ModelInvokeRequiredException">
            <summary>
            Thrown if certain <see cref="T:Demo3D.Visuals.Document" /> methods, e.g. <see cref="M:Demo3D.Visuals.Document.Run(System.Action)" />, are called from a thread where
            <see cref="P:Demo3D.Visuals.IBuilder.ModelInvokeRequired" /> is true.
            <para>
            NOTE: The <see cref="T:Demo3D.Visuals.Document.ModelInvokeRequiredException" /> doesn't escape, but it lets the throw be caught within a debugger if the Exception
            settings are correct.
            </para>
            <remarks>
            Technically, it is the <see cref="M:Demo3D.Visuals.Document.IsModelInvokeRequired(System.String)" /> method that throws the exception, it is just placed in certain methods of
            <see cref="T:Demo3D.Visuals.Document" /> likely to be called from scripting when attempting true multithreading.
            </remarks>
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Document.IsModelInvokeRequired(System.String)">
            <summary>
            Check that whoever has called this is in the model thread.
            <para>
            NOTE: The <see cref="T:Demo3D.Visuals.Document.ModelInvokeRequiredException" /> doesn't escape, but it lets the throw be caught within a debugger if the Exception
            settings are correct.
            </para>
            </summary>
            <param name="member">Name of the member that this was called from.</param>
            <returns>true if call is in the correct thread.</returns>
            <exception cref="T:Demo3D.Visuals.Document.ModelInvokeRequiredException">Internally thrown and caught if we are not in the correct thread.</exception>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(System.Double,Demo3D.Script.Function,System.Object[])">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Schedule a function to be called with given arguments after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="function">The function to be invoked.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled function.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.RunDo(Demo3D.Script.Function,System.Object[])">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Implements the JScript "do { }" block.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.RunDo(System.Action)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Implements the Optimized JScript "do { }" block.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(Demo3D.Script.Function,System.Object[])">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Schedule a function to be called with given arguments after a delay in simulation time.
            </summary>
            <param name="function">The function to be invoked.</param>
            <param name="args">The arguments to pass to the function.</param>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled function.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(System.Double,System.Delegate,System.Object[])">
            <summary>
            Schedule a delegate to be called with given arguments after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="function">The delegate to be invoked.</param>
            <param name="args">The arguments to pass to the delegate.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(System.Delegate,System.Object[])">
            <summary>
            Schedule a delegate to be called with given arguments in the current time-step.
            </summary>
            <param name="function">The delegate to be invoked.</param>
            <param name="args">The arguments to pass to the delegate.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(System.Double,System.Action)">
            <summary>
            Schedule an action to be called after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="action">Action to be invoked.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(System.Action)">
            <summary>
            Schedule an action to be called in the current time-step.
            </summary>
            <param name="action">Action to be invoked.</param>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(System.Double,System.Func{System.Collections.IEnumerable})">
            <summary>
            Schedule a coroutine to be called after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="coroutine">Coroutine to be invoked.</param>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Start(System.Func{System.Collections.IEnumerable})">
            <summary>
            Schedule a coroutine to be called in the current time-step.
            </summary>
            <param name="coroutine">Coroutine to be invoked.</param>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run(System.Func{System.Collections.IEnumerable})">
            <summary>
            Schedule a coroutine to be called in the current time-step.
            </summary>
            <param name="coroutine">Coroutine to be invoked.</param>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``1(System.Func{``0,System.Collections.IEnumerable},``0)">
            <summary>
            Schedule a coroutine to be called in the current time-step.
            </summary>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <typeparam name="T">Type of first argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``2(System.Func{``0,``1,System.Collections.IEnumerable},``0,``1)">
            <summary>
            Schedule a coroutine to be called in the current time-step.
            </summary>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <param name="arg2">Second argument to coroutine.</param>
            <typeparam name="T1">Type of first argument to coroutine.</typeparam>
            <typeparam name="T2">Type of second argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``3(System.Func{``0,``1,``2,System.Collections.IEnumerable},``0,``1,``2)">
            <summary>
            Schedule a coroutine to be called in the current time-step.
            </summary>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <param name="arg2">Second argument to coroutine.</param>
            <param name="arg3">Third argument to coroutine.</param>
            <typeparam name="T1">Type of first argument to coroutine.</typeparam>
            <typeparam name="T2">Type of second argument to coroutine.</typeparam>
            <typeparam name="T3">Type of third argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``4(System.Func{``0,``1,``2,``3,System.Collections.IEnumerable},``0,``1,``2,``3)">
            <summary>
            Schedule a coroutine to be called in the current time-step.
            </summary>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <param name="arg2">Second argument to coroutine.</param>
            <param name="arg3">Third argument to coroutine.</param>
            <param name="arg4">Fourth argument to coroutine.</param>
            <typeparam name="T1">Type of first argument to coroutine.</typeparam>
            <typeparam name="T2">Type of second argument to coroutine.</typeparam>
            <typeparam name="T3">Type of third argument to coroutine.</typeparam>
            <typeparam name="T4">Type of fourth argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``1(System.Double,System.Func{``0,System.Collections.IEnumerable},``0)">
            <summary>
            Schedule a coroutine to be called after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <typeparam name="T">Type of first argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``2(System.Double,System.Func{``0,``1,System.Collections.IEnumerable},``0,``1)">
            <summary>
            Schedule a coroutine to be called after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <param name="arg2">Second argument to coroutine.</param>
            <typeparam name="T1">Type of first argument to coroutine.</typeparam>
            <typeparam name="T2">Type of second argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``3(System.Double,System.Func{``0,``1,``2,System.Collections.IEnumerable},``0,``1,``2)">
            <summary>
            Schedule a coroutine to be called after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <param name="arg2">Second argument to coroutine.</param>
            <param name="arg3">Third argument to coroutine.</param>
            <typeparam name="T1">Type of first argument to coroutine.</typeparam>
            <typeparam name="T2">Type of second argument to coroutine.</typeparam>
            <typeparam name="T3">Type of third argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Document.Run``4(System.Double,System.Func{``0,``1,``2,``3,System.Collections.IEnumerable},``0,``1,``2,``3)">
            <summary>
            Schedule a coroutine to be called after a delay in simulation time.
            </summary>
            <param name="delay">Simulation time from now in seconds.</param>
            <param name="coroutine">Coroutine to be invoked.</param>
            <param name="arg1">First argument to coroutine.</param>
            <param name="arg2">Second argument to coroutine.</param>
            <param name="arg3">Third argument to coroutine.</param>
            <param name="arg4">Fourth argument to coroutine.</param>
            <typeparam name="T1">Type of first argument to coroutine.</typeparam>
            <typeparam name="T2">Type of second argument to coroutine.</typeparam>
            <typeparam name="T3">Type of third argument to coroutine.</typeparam>
            <typeparam name="T4">Type of fourth argument to coroutine.</typeparam>
            <returns>An <see cref="T:Demo3D.EventQueue.ITask" /> representing the scheduled coroutine.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Document.MeshVisualMappingEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.GeneratorRegistry">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Document.IsResetting">
            <summary>
            Is the document currently being reset.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.IsExperimentRunning">
            <summary>
            Is an experiment currently running?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.PulseDriver">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.AddMeshVisual(Demo3D.Visuals.MeshObject)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.RemoveMeshVisual(Demo3D.Visuals.MeshObject)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.WatchVisualProperty(Demo3D.Visuals.Visual,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ClearWatchedVisualProperties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.StopWatchingVisualProperty(Demo3D.Visuals.Visual,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.IsBeingWatched(Demo3D.Visuals.Visual,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.WatchVisual(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.ClearWatchedVisuals">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.StopWatchingVisual(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.IsBeingWatched(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Document.CompatibleWith2020SaveFormat">
            <summary>
            Temporary method to stop saving out 2020-format files if they will not reload or fall foul of email spam/virus filters.
            </summary>
            <returns>True if this <see cref="T:Demo3D.Visuals.Document" /> can be saved in 2020 format.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Document.CanAccessTelegrams">
            <summary>
            Are we allowed to access and modify HLE telegrams?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.Telegrams">
            <summary>
            Telegrams for high level emulation.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Document.IOBrowserConfiguration">
            <summary>
            <para> FOR INTERNAL USE ONLY. </para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.NullMesh">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ConvertToDLLOptions">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ConvertToDLLOptions.ObfuscationCommand">
            <summary>
            Overrides the obfuscation command from the application settings (<see cref="P:Demo3D.Gui.GeneralOptions.ObfuscationCommand" />), if set.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.DocumentUpdateScriptsExt">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.DocumentUpdateScriptsExt.EmptyVersion">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DocumentUpdateScriptsExt.IsEmpty(System.Version)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DocumentUpdateScriptsExt.UpdateScripts(Demo3D.Visuals.Document)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DocXS">
            <summary>
            Public interface for creating temporay documents that we can import visuals into, save and create thumbnails for.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DocXS.CloneEmpty(Demo3D.Visuals.Document)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.DocXS.GetThumbnail(Demo3D.Visuals.Visual,System.Int32,Demo3D.Gui.ThumbnailGeneratorOptions)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.DocXS.Import(Demo3D.Visuals.Document,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockLibrary.Item(Demo3D.Visuals.DrawingBlockReference)">
            <summary>
            Get a mesh given a mesh key.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockLibrary.Item(Demo3D.Visuals.DrawingBlock)">
            <summary>
            Get an existing or new mesh key given a mesh
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockLibrary.Count">
            <summary>
            How many meshes are stored in this library?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockLibrary.Clear">
            <summary>
            Clear out all meshes from the library.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockLibrary.MergeFrom(Demo3D.Visuals.DrawingBlockLibrary)">
            <summary>
            Merge the textures from the supplied library into this library.
            </summary>
            <param name="lib"></param>
        </member>
        <member name="T:Demo3D.Visuals.DrawingAttributes">
            <summary>
            Common attributes used for drawing primitives
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DrawingPrimitives">
            <summary>
            A collection of primitives that can be drawn in one call to display.DrawPrimitives. For example,
            straight lines that are all the same width and color.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DrawingBlockPrimitives">
            <summary>
            Device-specific form of the primitives logically defined in a DrawingBlock that is 
            optimized for fast rendering, by bundling together all primitives of the same type
            and color.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DrawingBlock">
            <summary>
            A collection of drawing primitives, mapping directly to DXF entity definitions found in either a
            BLOCK or ENTITIES section. This class should allow us to reproduce the original DXF drawing, and 
            to avoid duplication of entity definitions when the same BLOCK is INSERTed multiple times.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlock.AddPoint(System.Collections.Generic.Dictionary{Microsoft.DirectX.Vector3,System.Int32},System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly},Microsoft.DirectX.Vector3)">
            <summary>
            Add a point to the indices and vertices (if it hasn't been added already)
            </summary>
            <param name="map">The map to check if the pont has already been added</param>
            <param name="indices">The list of indices</param>
            <param name="vertices">The list of vertices</param>
            <param name="point">The point to add</param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.DrawingBlockProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DrawingBlockVisual">
            <summary>
            Class that is used to render a set of lines as a single object.
            This class is used to host imported CAD line drawings (e.g. from DXF or DWG files) but can also be used for custom line drawings in the scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.DrawingBlock">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.BREPDefinition">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.PickExcludingChildrenFromWorldFrustum(Microsoft.DirectX.Plane[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.LineIntersectsFrustum(Microsoft.DirectX.Plane[],Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Check the line (p0, p1) is contained inside the frustum described by the bounding
            planes 'frustum'. For each plane if both points of the line are underneath the 
            plane then the line is outside the whole frustum.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.WorldMinimumY">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.BoundingBoxExcludingChildren">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.BoundingSphereExcludingChildren">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.CreateMesh">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.RenderPrimitives(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.IsVisible">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.CalculateVisible(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.RenderWithoutChildren(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.IsClipped(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.CreatePolyLine(Demo3D.Visuals.Document,Microsoft.DirectX.Vector3[],System.Drawing.Color)">
            <summary>
            Create a new DrawingBlockVisual which contains a list of line {start,end} pairs.
            </summary>
            <param name="doc">The document to add the visual to.</param>
            <param name="points">The array of {start,end} line pairs.</param>
            <param name="lineColor">The color of the new line list</param>
            <returns>A new DrawingBlockVisual which contains a list of line {start,end} pairs.</returns>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.CreateLine(Demo3D.Visuals.Document,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Drawing.Color)">
            <summary>
            Create a new DrawingBlockVisual which contains a single line.
            </summary>
            <param name="doc">The document to add the visual to.</param>
            <param name="lineStart">The start point of the line local to the new Visual.</param>
            <param name="lineEnd">The end point of the line local to the new Visual.</param>
            <param name="lineColor">The color of the new line.</param>
            <returns>A new DrawingBlockVisual which contains a single line.</returns>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.CreateLine(Demo3D.Visuals.Document,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,System.Drawing.Color)">
            <summary>
            Create a new DrawingBlockVisual which contains a single line with a specific width.
            </summary>
            <param name="doc">The document to add the visual to.</param>
            <param name="lineStart">The start point of the line local to the new Visual.</param>
            <param name="lineEnd">The end point of the line local to the new Visual.</param>
            <param name="lineWidth">The width of the new line.</param>
            <param name="lineColor">The color of the new line.</param>
            <returns>A new DrawingBlockVisual which contains a single line.</returns>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.FlattenDrawing">
            <summary>
            Flatten the Drawing Visual into the X-Z plane
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.Recenter">
            <summary>
            Move the origin of the Drawing Visual to it's bounding box centre
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DrawingBlockVisual.Transform(Microsoft.DirectX.Matrix)">
            <summary>
            Transform the Drawing Visual by appling the transform matrix to it's vertices
            </summary>
            <param name="transform">Matrix to be applied to the drawing</param>
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.Volume">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.SurfaceArea">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.FaceCount">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.DrawingBlockRef">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.DrawingBlockVisual.Visible">
            <summary>Is the drawing visible or not.</summary>
        </member>
        <member name="M:Demo3D.Visuals.DuplicateResourcesHandler.FindDuplicates(System.IProgress{System.Double})">
            <summary>
            This should be done on a background thread.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DuplicateResourcesHandler.RemoveDuplicates">
            <summary>
            This should be done on the main thread, or with the document locked.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DuplicateResourcesHandler.PruneDuplicates(Demo3D.Visuals.Document,System.Action)">
            <summary>
            Find duplicates on a separate thread
            </summary>
            <param name="document">The current document</param>
            <param name="onComplete">Action to invoke once complete</param>
        </member>
        <member name="T:Demo3D.Visuals.DynamicConnector">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FBDynamicConnector">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FrontDynamicConnector">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BackDynamicConnector">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.LRDynamicConnector">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.LeftDynamicConnector">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.RightDynamicConnector">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DynamicFixedJointAspect">
            <summary>A dynamic (physics) fixed joint.</summary>
        </member>
        <member name="T:Demo3D.Visuals.DynamicJointAspect">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;DynamicJointAspect_Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.DynamicJointAspect.DynamicParameterValueChanged">
            <summary>
            Delegate for joint parameter value changed events.
            </summary>
            <remarks>
            The parameter index identifies the parameter.
            </remarks>
            <param name="joint">The joint.</param>
            <param name="index">The parameter index.</param>
            <param name="newValue">The new parameter value.</param>
            <param name="oldValue">The old parameter value.</param>
        </member>
        <member name="E:Demo3D.Visuals.DynamicJointAspect.OnParameterValueChanged">
            <summary>
            Event that is triggered when a parameter value changes.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicJointAspect.OtherVisual">
            <summary>The optional base that the visual's rigid body is moved relative to (leave blank for the world).</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicJointAspect.PhysicsCreated">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;DynamicJointAspect_PhysicsCreated_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicJointAspect.PhysicsNotCreated">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;DynamicJointAspect_PhysicsNotCreated_Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.DynamicPrismaticJointAspect">
            <summary>A dynamic (physics) prismatic joint.</summary>
        </member>
        <member name="E:Demo3D.Visuals.DynamicPrismaticJointAspect.OnMotorChangedListeners">
            <summary>
            An event that is triggered whenever the joint is assigned a different motor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicPrismaticJointAspect.Axis">
            <summary>The (local) axis along which the visual's rigid body is permitted to translate.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicPrismaticJointAspect.Distance">
            <summary>The current translation distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicPrismaticJointAspect.LimitsEnabled">
            <summary>Whether the prismatic joint has limits enabled on the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicPrismaticJointAspect.LowerLimit">
            <summary>The lower limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicPrismaticJointAspect.UpperLimit">
            <summary>The upper limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicPrismaticJointAspect.MaximumForce">
            <summary>The maximum force that can be used to drive the rigid body in order to achive the target speed of the motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicPrismaticJointAspect.Motor">
            <summary>The motor that drives the rigid body.</summary>
        </member>
        <member name="T:Demo3D.Visuals.DynamicRevoluteJointAspect">
            <summary>A dynamic (physics) revolute joint.</summary>
        </member>
        <member name="E:Demo3D.Visuals.DynamicRevoluteJointAspect.OnMotorChangedListeners">
            <summary>
            An event that is triggered whenever the joint is assigned a different motor.
            </summary>
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;DynamicRevoluteJointAspect_OnMotorChangedListeners_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.Axis">
            <summary>The (local) axis the defines the plane in which the visual's rigid body is permitted to rotate.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.Anchor">
            <summary>The (local) point about which the visual's rigid body is permitted to rotate.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.Angle">
            <summary>The current rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.LimitsEnabled">
            <summary>Whether the revolute joint has limits enabled on the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.LowerLimit">
            <summary>The lower limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.UpperLimit">
            <summary>The upper limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.MaximumTorque">
            <summary>The maximum torque that can be applied to achieve the motor's target speed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicRevoluteJointAspect.Motor">
            <summary>The motor that drives the rigid body.</summary>
        </member>
        <member name="T:Demo3D.Visuals.DynamicSphericalJointAspect">
            <summary>A dynamic (physics) spherical joint.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DynamicSphericalJointAspect.Anchor">
            <summary>The (local) point about which the visual's rigid body is permitted to pivot.</summary>
        </member>
        <member name="T:Demo3D.Visuals.EventRecord">
            <summary>
            A record of a past or future event based on the time and underlying action.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ExtrusionPolygon">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ExtrusionProfile">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ExtrusionPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ExtrusionProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ExtrusionVisual">
            <summary>
            Summary description for ExtrusionVisual.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ExtrusionVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ExtrusionVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ExtrusionVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ExtrusionVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.FileBasedSerializer.ExportDirectory(System.String,System.String)">
            <summary>
            Export the contents of a serialized directory to a path on disk.
            </summary>
            <param name="path">The path to store the exported files.</param>
            <param name="directory">The serialized directory to export files from.</param>
        </member>
        <member name="M:Demo3D.Visuals.FileBasedSerializer.ImportDirectory(System.String,System.String)">
            <summary>
            Import the contents of a path on disk into a serialized directory.
            </summary>
            <param name="path">The path containing the files to import.</param>
            <param name="directory">The serialized directory to import files to.</param>
        </member>
        <member name="M:Demo3D.Visuals.FileBasedSerialization.CreateDirectory(Demo3D.Common.Serializer,System.String)">
            <summary>
            Ensure that containing folder for the given path exists
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FileBasedSerialization.ConvertToRealPath(Demo3D.Common.Serializer,System.String)">
            <summary>
            Take a model-relative path, or path with variables and use context information from the serializer
            to create a real path
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FileBasedSerialization.DefaultFolderForManifestFile(System.String)">
            <summary>
            Convert /folder/file.ext to /folder/file
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FileBasedSerialization.DefaultRootFolder(Demo3D.Common.Serializer)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.FloorCollisionType">
            <summary>
            The physics collision geometry type to use for the floor surface.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.FloorPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FloorPointCollection">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FloorControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.FloorControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.FloorCutControlPointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FloorCutControlPoint">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.FloorCutControlPoint.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.FloorCutControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.FloorCornerControlPointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FloorCornerControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorCornerControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.FloorEdgeControlPointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FloorEdgeControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorEdgeControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.FloorVisual">
            <summary>
            FloorVisual represents a floor which isn't the scene floor, such as a mezzanine.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.FloorForVisual(Demo3D.Visuals.Visual,System.Int32)">
            <summary>
            Find the closest floor as a parent, skipping 'n' levels.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.SetProperties(System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.SnapPointToGrid(Microsoft.DirectX.Vector2)">
            <summary>
            Snap a point to the grid using the current grid settings.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.SetAsDefaultFloor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.ToggleCornerReshapeEnabled">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.AddVertex">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.RemoveVertex">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.AddCut">
            <summary>
            Add a Floor cut.
            
                |                                    |
                |     q[2]       q[1]                |
                |       O---------O                  |
                |       |         |                  |
                |      s|    P    |s                 |
                |  d1   | s1 | s0 |       d0         |
                x-------O....p....O------------------x
               p1     q[3]       q[0]                 p0
                                          
            P - Mouse click point for inset
            p - projection of P onto p0-&gt;p1
            O - New points to add to the floor point array (q:0,1,2,3)
            s - Size of cut out square
            
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.AddJut">
            <summary>
            Add a Floor cut.
            
                |                                    |
                |     q[2]       q[1]                |
                |       O---------O                  |
                |       |         |                  |
                |      s|    P    |s                 |
                |  d1   | s1 | s0 |       d0         |
                x-------O....p....O------------------x
               p1     q[3]       q[0]                 p0
                                          
            P - Mouse click point for inset
            p - projection of P onto p0-&gt;p1
            O - New points to add to the floor point array (q:0,1,2,3)
            s - Size of cut out square
            
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.AddGap">
            <summary>
            Add a Floor gap.
            
                |                                    |
                |                                    |
                |                                    |
                |                                    |
                |            P                       |
                |                                    |
                x-------O....p....O------------------x
               p1     q[1]       q[0]                 p0
                                          
            P - Mouse click point for inset
            p - projection of P onto p0-&gt;p1
            O - New points to add to the floor point array (q:0,3)
            s - Size of cut out square
            
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.ToggleSupport">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.AddVertex(System.Int32,Microsoft.DirectX.Vector2,System.Int32,System.Boolean)">
            <summary>
            Add in a new vertex at a point in the list and clone the 
            barrier if there is one.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.RenderShadowWithoutChildren(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.GetNeighboringPoints(Demo3D.Visuals.FloorPoint)">
            <summary>
            Takes in a point and returns its neighbours; the previous point and the next point.
            </summary>
            <param name="point">The input point</param>
            <returns>Previous point and next point relative to the input.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.EdgeTest(Demo3D.Visuals.FloorPoint,Demo3D.Visuals.FloorPoint,System.Collections.ArrayList)">
            <summary>
            Checks whether all edges between two points intersect with any other floor edges
            </summary>
            <param name="startPoint">Start point</param>
            <param name="endPoint">End point</param>
            <param name="floorPoints">List of floor points</param>
            <returns>True if edge collision has been detected. False if no edge collision detected.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.SurfaceNormalTest">
            <summary>
            Checks whether all polygons are facing up.
            </summary>
            <returns>False if all polygons are facing the correct direction. True otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.OnMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            If conveyor changes Height or Rotation then support stands must be reconfigured.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.Area">
            <summary>
            Get area of floor based on the floor control points
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FloorVisual.NotifyOnFloorHit(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.Points">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FloorDepth">
            <summary>The depth of the floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.BarrierDepth">
            <summary>The depth any attached barriers that have AutoFitDepth set to true.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.BarrierHeight">
            <summary>The height any attached barriers that have AutoFitHeight set to true.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.SupportWidth">
            <summary>The width of the floor supports.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.SupportDepth">
            <summary>The depth of the floor supports.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.BarrierInset">
            <summary>How far the barrier is inset in from the edge of the floor. A negative value will move the barrier outside the floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.SupportInset">
            <summary>How far the support is inset in from the edge of the floor. A negative value will move the support outside the floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FloorPlateHeight">
            <summary>The thickness of the floor plate.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FloorMaterial">
            <summary>The color, reflectivity and specularity of the floor surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.SupportMaterial">
            <summary>The color, reflectivity and specularity of the supports.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.CornerReshapeEnabled">
            <summary>Show control points on every corner and allow flexible reshaping of non-square floors.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.ShowFloor">
            <summary>Whether to show the floor or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.ShowSupports">
            <summary>Whether to show the supports or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.ShowBarrier">
            <summary>Whether to show any attached barriers or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FloorY">
            <summary>The offset in the vertical direction of the bottom of the support from the floor indicated by FloorLevel.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FloorLevel">
            <summary>The floor supports will stretch down this many additional levels.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.DeleteLoadsAfter">
            <summary>When a load hits the floor it will automatically be deleted after this number of seconds provided its 'Delete When Floor Hit' flag is set</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FrictionFactor">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FrictionMaterial">
            <summary>The name of the material to be use to determine the coefficient of friction when in contact with another friction material.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.CollisionType">
            <summary>Hints at the type of physics collision geometry to be used.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.ConvexHullDecomposition">
            <summary>Parameters that control the fidelity when decomposing the mesh into a set of convex-hulls.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.Kinematic">
            <summary>Moving floors require a kinematic rigid body for friction to be applied to contacting loads.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.Reflectivity">
            <summary>The reflectivity of the material. 0 is non-reflective, 100 is a mirror. 10 is a good value for conveyor surfaces.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.GridSize">
            <summary>The size of the grid squares used when snapping control points during a drag.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.SnapToGrid">
            <summary>Whether control points should snap to the grid when they're dragged.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.Height">
            <summary>The height of the floor above the floor indicated by FloorLevel.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.FloorTileSize">
            <summary>The width/length of the floor tile texture in model space.</summary>
        </member>
        <member name="P:Demo3D.Visuals.FloorVisual.OnFloorHit">
            <summary>Occurs when a load first contacts the floor.</summary>
        </member>
        <member name="T:Demo3D.Visuals.CornerConnector">
            <summary>
            The connector on each corner of the floor visual to allow dimensions to be
            locked to the floor points.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.EdgeConnector">
            <summary>
            The connector on each side of a floor visual to allow floors and stairs to
            be connected to each other.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BoundaryConnector">
            <summary>
            The connector on each edge of a floor visual to allow walls to be connected to floors
            be connected to each other.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.Configuration`1">
            <summary>
            A single variable containing a reference to a configuration object.
            </summary>
            <typeparam name="T">The configuration object type.</typeparam>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.Configuration`1.Setter">
            <summary>
            A function that takes the current value and returns a new copy with the required modifications.
            Should return <paramref name="currentValue" /> if nothing was modified.
            </summary>
            <param name="currentValue">The current value of the variable.</param>
            <param name="userState">The value passed to <see cref="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Configuration`1.Set(Demo3D.Visuals.CoSimulation.FrameAdvancer.Configuration{`0}.Setter,System.Object)" /></param>
            <returns>A copy of the current value with the required modifications.</returns>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.Configuration`1.Value">
            <summary>
            The current value.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Configuration`1.Set(Demo3D.Visuals.CoSimulation.FrameAdvancer.Configuration{`0}.Setter,System.Object)">
            <summary>
            Sets a new value.
            </summary>
            <param name="setter">A function that takes the current value and returns a new copy with the required modifications.</param>
            <param name="userState">Parameter to <paramref name="setter" /></param>.
            <returns>True if the value was changed.</returns>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameStartListeners">
            <summary>
            Raised when the model is about to start.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameStopListeners">
            <summary>
            Raised when the model is stopped.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.Properties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Properties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Properties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameAdvancedListeners">
            <summary>
            Raised every 10th second while the model is running.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.StartModel">
            <summary>
            Start the model.  (Must be called in the GuiThread.)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopModel(System.Boolean)">
            <summary>
            Request the model to stop and (optionally) block until it does.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RequestStop">
            <summary>
            Request the model to stop, but don't wait.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.TemporaryState(Demo3D.Visuals.CoSimulation.FrameAdvancer.State)">
            <summary>
            Temporarily set the performance state.
            </summary>
            <param name="newState">The new state.</param>
            <returns>The state to restore.</returns>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Reset">
            <summary>
            Reset the FrameAdvancer state.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRenderer">
            <summary>
            The GUI frame renderer thread.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRenderer.FrameRendered">
            <summary>
            Raised when a frame has been rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRenderer.FrameRate">
            <summary>
            The frame rate selected by the user (in fps of real time).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRenderer.RequestRenderAsyncVoid">
            <summary>
            An external request to render a frame (ie from outside the FrameAdvancer).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRenderer.Starting">
            <summary>
            Model is starting.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRenderer.Stopping">
            <summary>
            Model is about to stop.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRenderer.Stopped">
            <summary>
            Model is stopping.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.frameRenderer">
            <summary>
            The GUI frame renderer thread.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRendered">
            <summary>
            Raised when a frame has been rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.FrameRate">
            <summary>
            The frame rate selected by the user (in fps of real time).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.MinFrameRateMultiplier">
            <summary>
            The maximum frame rate multiplier selected by the user.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RenderTime">
            <summary>
            The time (in ms) that it took to render the previous frame.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RequestRender">
            <summary>
            Request a render.  If the current thread is the GUI thread, then the render is performed immediately.
            Otherwise it's marked to be run later in the GUI tick timer.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.MechanismsAdvancer">
            <summary>
            The MechanismAdvancer ticks the mechanisms forward.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.mechanismsAdvancer">
            <summary>
            The MechanismsAdvancer processes the mechanisms.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelAdvancer">
            <summary>
            The ModelAdvancer ticks the model forward.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelAdvancer.StatusRealtimeLag">
            <summary>
            Our real time lag.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelInvoke">
            <summary>
            A queue of events to fire in the model thread.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelInvoke.EnqueueAction(Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelInvokeAction)">
            <summary>
            Enqueues an action to be performed in the model thread.
            </summary>
            <param name="action">Action to call.</param>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelInvoke.IsEmpty">
            <summary>
            True if there's nothing to invoke.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelInvoke.DispatchModelInvoke">
            <summary>
            Executes all pending ModelInvoke events.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelInvokeRequired">
            <summary>
            Determines whether the calling thread is the model simulation thread.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelInvokeRequiredForDocumentRun">
            <summary>
            Determines whether the calling thread is the model simulation thread.
            </summary>
            <remarks>This is a temporary workaround to stop spurious "document.Run not called from model thread" errors.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.AssertModelLocked(Demo3D.Visuals.Document)">
            <summary>
            Asserts that the calling thread is the model simulation thread, or that the calling thread
            holds the Document lock.
            </summary>
            <param name="doc">The current document.</param>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.modelInvoke">
            <summary>
            A queue of events to fire in the model thread.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelBeginInvoke(System.Action{System.Object},System.Object)">
            <summary>
            Execute a callback in the model thread.  If the calling thread is the model thread then the
            callback is executed immediately, otherwise it's scheduled to be executed at the next opportunity.
            </summary>
            <param name="callback">The callback to execute.</param>
            <param name="state">Argument to pass to the callback.</param>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelBeginInvoke(System.Action)">
            <summary>
            Execute a callback in the model thread.  If the calling thread is the model thread then the
            callback is executed immediately, otherwise it's scheduled to be executed at the next opportunity.
            </summary>
            <param name="callback">The callback to execute.</param>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.PhysicsAdvancer">
            <summary>
            The PhysicsAdvancer ticks the physics forward.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.physicsAdvancer">
            <summary>
            The PhysicsAdvancer ticks the physics forward.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SingleStep">
            <summary>
            Delegate for single stepping the simulators.
            </summary>
            <param name="tickTime">The current time.</param>
            <param name="extendStep">
            How much extra time we'd like the step to process.  The caller should return how much of that
            extra time it was able to process.
            </param>
            <returns>The requested next step size.</returns>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer">
            <summary>
            Manages real time, and the real time to model time synchronization.
            Calls <see cref="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SingleStep" /> at the interval that it requests, multiplied by the current runtime speed.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.Statistics">
            <summary>
            GUI properties and statistics.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.SimulationThread">
            <summary>
            Accurate simulation thread.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.GuiThread">
            <summary>
            Simulation running in the GUI thread.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.RunSynchronously">
            <summary>
            Run the frame advancer in the thread that calls Start.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.StatusRealtimeLag">
            <summary>
            Our real time lag.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.SimulationTimerTick">
             <summary>
             Called repeatedly to advance the model.  This method synchronises model time with real time.
             It's called either in the gui thread or in a separate thread (depending on the mode).
             </summary>
             <returns>
             null: stop model;
             MinValue: poll after pausing a short time (1ms);
             else the real time we want to sleep before being called again.
             </returns>
             <remarks>
                 === BEFORE STEP === : ============== STEP ============= : ===== AFTER STEP =======
             
                    +-------------------&gt;---------------&gt;----- STEP -----+
              M     |                +------------------&gt;----- STEP -----|---------------&gt;--------+
              O     |                |                                   |                        |
              D     |                |                                   V                        V
              E  modelTime     nextModelTime                          modelTime             nextModelTime
              L     |                |                                   |                        |
                    |                |-------- adjustmentModelTime ------|--- nextStepDuration ---|
                    |                |                                   |                        |
             ================================================================================================
             ================================================================================================
                                     |                                   |           |            |
                                     |-------- adjustmentRealTime -------|--- CPU ---|-- PAUSE ---|
              R                      |                                   |           |            |
              E                nextRealTime                           tickTime      now     nextRealTime
              A                      |                                   |                        ^
              L                      |                                   |                        |
                                     +------------------&gt;----- STEP ----------------------&gt;-------+
                                     |                                   |
                               the time we expected to be called      the time we actually got called
            
             </remarks>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.IsSimulationThread">
            <summary>
            This tells us if the current thread is the simulation thread.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.RunWorld">
            <summary>
            Starts stepping and calling <see cref="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SingleStep" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.Wake">
            <summary>
            Wake/interrupt the sleeping model.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.Join">
            <summary>
            Wait for the simulation to stop.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealTimeAdvancer.Reset">
            <summary>
            Called on reset.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunSynchronously">
            <summary>
            Run the frame advancer in the thread that calls Start.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.StatusRealtimeLag">
            <summary>
            Our current real-time lag.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration">
            <summary>
            RunConfiguration represents the configuration that the user has set.
            So for example, if the user presses the real-time button, then RealTime is
            set in the RunConfiguration, even though we're not actually currently running in real time
            until the user also presses Run.  So RunConfiguration will state RealTime even though
            <see cref="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode" /> does not.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.RealtimeMode">
            <summary>
            We will skip frames if behind realtime.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.VideoCapture">
            <summary>
            Video frame capture mode.  We will ensure we capture every frame.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.FastForward">
            <summary>
            Fast forward mode.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.FastForwardSpeed">
            <summary>
            If non-zero, speed multiplier to run at (This controls the ratio between model time and real time).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.StopAfterNextFrame">
            <summary>
            Stop after then next GUI frame rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.StopAfterNextEvent">
            <summary>
            Stop after the next event executed.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current">
            <summary>
            The current value of <see cref="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current.SetRealtimeMode(System.Boolean)">
            <summary>
            Set the configured realtime mode.
            If the FrameAdvancer is running, then it may be stopped and restarted in order to apply the new configuration.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current.SetVideoCapture(System.Boolean)">
            <summary>
            Set the configured video-capture mode.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current.SetFastForward">
            <summary>
            Configure the FrameAdvancer to run fast forward.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current.SetFastForwardSpeed(System.Double)">
            <summary>
            Connfigure the Fast Forward speed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current.SetStopAfterNextFrame">
            <summary>
            Configure the FrameAdvancer to stop after the next frame.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current.SetStopAfterNextEvent">
            <summary>
            Configure the FrameAdvancer to stop after the next event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration.Current.SetNormal">
            <summary>
            Clear the stop-after configuration.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.runConfig">
            <summary>
            RunConfiguration represents the configuration that the user has set.
            So for example, if the user presses the real-time button, then RealTime is
            set in the runConfig, even though we're not actually currently running in real time
            until the user also presses Run.  So RunConfiguration will state RealTime even though
            <see cref="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.runMode" /> does not.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RealtimeMode">
            <summary>
            Set the configured realtime mode.
            If the FrameAdvancer is running, then it may be stopped and restarted in order to apply the new configuration.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Start">
            <summary>
            Start the model.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.FastForward">
            <summary>
            Start the model in FastForward mode.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.FastForwardSpeed">
            <summary>
            If non-zero, speed multiplier to run at.  (This controls the ratio between model time and real time.)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Step(System.Double)">
            <summary>
            Single step the model.
            </summary>
            <returns>The Stop at Time event on the event queue.</returns>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.StepToNextEvent">
            <summary>
            Single step the model to the next event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.StepToNextFrame">
            <summary>
            Single step the model to the next frame.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.Stop">
            <summary>
            Stop the model.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode">
            <summary>
            Represents the current mode of the FrameAdvancer.
            Eg we're currently running or not, or we're currently running real-time or not... etc.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RunFlags">
            <summary>
            These are the run state flags.
            They're immutable during a run, and tell us how a run will be executed.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RunProgress">
            <summary>
            These flags are dynamic and tell us about the progress of the run.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Running">
            <summary>
            Running flag is set.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.GuiThread">
            <summary>
            GuiThread flag is set.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.FastForward">
            <summary>
            FastForward flag is set.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.FastForwardSpeed">
            <summary>
            If non-zero, speed multiplier to run at (This controls the ratio between model time and real time).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RealTime">
            <summary>
            RealTime flag is set.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.VideoCapture">
            <summary>
            RealTime flag is set.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.StopAfterNextEvent">
            <summary>
            StopAfterNextEvent flag is set.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.StopAfterNextFrame">
            <summary>
            StopAfterNextFrame flag is set.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Paused">
            <summary>
            The FrameAdvancer is paused while the video capture frame buffer is full.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Starting">
            <summary>
            The FrameAdvancer is starting.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Stopping">
            <summary>
            The FrameAdvancer is stopping.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.StartingOrStopping">
            <summary>
            The FrameAdvancer is starting or stopping.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.StopNow">
            <summary>
            True if !Running or Stopping
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RunningInThread">
            <summary>
            The FrameAdvancer is running (not starting or stopping), and it's running in a separate thread (not the GUI thread).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RunningFast">
            <summary>
            The FrameAdvancer is running fast-forward.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RunningMaxSpeed">
            <summary>
            The FrameAdvancer is running fast-forward at max speed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RunningNormalSpeed">
            <summary>
            The FrameAdvancer is running, and we're running at normal speed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.RunModeChanged(Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration)">
            <summary>
            Returns true if the new runConfiguration would change the run mode.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Current">
            <summary>
            The current value of <see cref="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Current.SetStarting(Demo3D.Visuals.CoSimulation.FrameAdvancer.RunConfiguration)">
            <summary>
            The FrameAdvancer about to start with a specific (immutable) configuration.
            </summary>
            <param name="runConfiguration">The current run configuration.</param>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Current.SetStarted">
            <summary>
            The FrameAdvancer has started.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Current.SetPaused(System.Boolean)">
            <summary>
            The FrameAdvancer has started.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Current.SetStopping">
            <summary>
            The FrameAdvancer is about to stop.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunMode.Current.SetStopped">
            <summary>
            The FrameAdvancer has stopped.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.runMode">
            <summary>
            The current run mode.
            Eg we're currently running or not, or we're currently running real-time or not... etc.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.Running">
            <summary>
            Model is running.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunningFast">
            <summary>
            Model is running fast-forward.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunningInThread">
            <summary>
            Model is running in a private thread (not the GUI thread).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.RunningNormalSpeed">
            <summary>
            Model is running in the GUI thread.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.CurrentMode">
            <summary>
            The current <see cref="T:Demo3D.Visuals.RunMode" />.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.Paused">
            <summary>
            The FrameAdvancer is paused while the video frame buffer is full.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelTimeNow(Demo3D.Visuals.IBuilder)">
            <summary>
            The current model time.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer">
            <summary>
            The SimulationAdvancer ticks all the simulators forward.
            This is the <see cref="T:Demo3D.Time.CoSimulation.ICoSimulationMaster" />.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.StepState">
            <summary>
            Step state machine.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.StepState.Starting">
            <summary>
            Before the first step.  NextStepTime required.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.StepState.NextStep">
            <summary>
            Before the first step, or AfterStep has been executed (we're in between steps).  New step required.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.StepState.BeforeExecuted">
            <summary>
            Before has been executed.  Step required.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.StepState.StepExecuted">
            <summary>
            Step has been executed.  After required.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState">
            <summary>
            Time-based state for one simulator.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.StartModelTime">
            <summary>
            The time we started running.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.StartSystemTime">
            <summary>
            The simulator wall time we started running.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.Interrupted">
            <summary>
            This simulator interrupted.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.NextStepBeginTime">
            <summary>
            The expected begin time of the next step.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.NextStepEndTime">
            <summary>
            The next step end time.  (Null before the first step executes.)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.StepSize">
            <summary>
            The size of the step requested in virtual time.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.Overrun">
            <summary>
            The amount of virtual time that the simulator overran. (Or negative for an underrun.)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.UnexpectedPending">
            <summary>
            True if the simulator was still <see cref="F:Demo3D.Time.CoSimulation.CoSimulatorStatus.Pending" /> after it was expected to have completed its step.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.StartStepTime">
            <summary>
            The real time we started the current / last step.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.Duration">
            <summary>
            The actual real time the simulator spent running the step.
            </summary>
            <remarks>
            Typically the simulator status is only checked at the time its expected to have finished its step.  If a step runs faster
            and finishes earlier than required (which is normal) then this property will record a longer time than was actually taken.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.RunLocked(Demo3D.Time.ModelTime)">
            <summary>
            True if this simulator is still running its step.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics">
            <summary>
            GUI properties and statistics.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics.Name">
            <summary>
            Co-simulator name.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics.Flags">
            <summary>
            Simulator control.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics.MaxStep">
            <summary>
            The co-simulator preferred maximum step size.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics.MinStep">
            <summary>
            The co-simulator preferred minimum step size.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics.ValidSpeeds">
            <summary>
            The ranges of speeds this simulator can run at.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics.Steps">
            <summary>
            Number of steps performed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Statistics.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager">
            <summary>
            Manages one simulator.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators">
            <summary>
            Manages all the simulators.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.AddSimulator(Demo3D.Time.CoSimulation.ICoSimulator,Demo3D.Time.ModelTime,System.Double,System.Action)">
            <summary>
            Add a new simulator.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.RemoveSimulator(Demo3D.Time.CoSimulation.ICoSimulator)">
            <summary>
            Remove a simulator.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.Clear">
            <summary>
            Clear the list of simulators.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.GetAll">
            <summary>
            Return the current list of simulators.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.GetSynchronized">
            <summary>
            Return the current list of <see cref="F:Demo3D.Time.CoSimulation.OperatingMode.Synchronized" /> simulators.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.NegotiateSpeed(System.Double)">
            <summary>
            Negotiate speed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.Starting(Demo3D.Time.ModelTime,System.Double)">
            <summary>
            Simulation starting.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Simulators.Stopped">
            <summary>
            Simulation stopped.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer">
            <summary>
            Manages model time, and co-simulator model time synchronization.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.CurrentTime">
            <summary>
            The current model time.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.AdjustStep(Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager,Demo3D.Time.ModelTime)">
            <summary>
            A simulator said it'd process 'step' time but it didn't.  PLC simulators for example.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.CheckStep(Demo3D.Time.RealTime,Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager)">
            <summary>
            Check that Step processed the correct amount of time.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.CheckStatus(Demo3D.Time.RealTime,Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager[],System.Boolean@)">
            <summary>
            Check <see cref="F:Demo3D.Time.CoSimulation.CoSimulatorStatus.Pending" /> simulators.
            Return 'unexpectedPending' if any are still unexpectedly pending (ie still pending after their expected stepEndTime).
            Return false on error (we stopped).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.ExtendStep(Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager[],Demo3D.Time.ModelTime@)">
            <summary>
            Attempt to accomodate the caller by extending our step size.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.ExecuteBeforeStep(Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager[])">
            <summary>
            Execute <see cref="M:Demo3D.Time.CoSimulation.ICoSimulator.BeforeStep(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)" /> for all simulators that are ready.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.ExecuteStep(Demo3D.Time.RealTime,Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager)">
            <summary>
            Execute a step for one simulator that's ready to step.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.ExecuteStep(Demo3D.Time.RealTime,Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager[])">
            <summary>
            Execute a step for each simulator that's ready to step.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.ExecuteAfterStep(Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager[])">
            <summary>
            Execute <see cref="M:Demo3D.Time.CoSimulation.ICoSimulator.AfterStep(Demo3D.Time.ModelTime)" /> for all simulators that have finished their step.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.ModelTimeAdvancer.SimulationTick(Demo3D.Time.RealTime,Demo3D.Time.ModelTime@)">
            <summary>
            Called repeatedly to advance the model.  This method works entirely in model time.
            It synchronises all the simulations together in model time.
            </summary>
            <returns>
            null: stop model;
            MinValue: poll after pausing a short time (ie 1ms);
            MaxValue: we want to run max fast forward;
            else next step duration.
            </returns>
            <remarks>
            <para>
            We move the simulation forward in steps.  We first wait for an amount of real time, and then "pull" the model
            forward an equivalent amount of model time.  See <see cref="M:Demo3D.Time.CoSimulation.ICoSimulator.Step(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)" /> remarks.
            </para>
            <para>
            Consider two steps, x and y.
             1)   Sleep for 'x' seconds.
             2)   Pull the simulators forward by 'x' using <see cref="M:Demo3D.Time.CoSimulation.ICoSimulator.Step(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)" />.
                  This may execute in the background in separate threads.
             3)   Sleep for 'y' seconds.
                  Based on the expected next event times returned by Step in #2 - returned in the parameter nextStep.
             4)   Check that the simulators actually finished pulling forward by 'x'.
             4.1) If they're unexpectedly still Pending, then sleep for a jiffy and poll.
             4.2) If we discover that they actually pulled forward by 'x+n' then
                     a) Adjust the previous step by recomputing <see cref="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.NextStepBeginTime" />, then
                     b) Possibly recompute <see cref="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.TimeState.NextStepEndTime" /> to accomodate <see cref="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.SimulatorManager.MinStep" />.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.AddSimulator(Demo3D.Time.CoSimulation.ICoSimulator)">
            <summary>
            Add a new simulator.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.RemoveSimulator(Demo3D.Time.CoSimulation.ICoSimulator)">
            <summary>
            Remove a simulator.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SimulationAdvancer.Clear">
            <summary>
            Clear the list of simulators.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.simulationAdvancer">
            <summary>
            The SimulationAdvancer ticks all the simulators forward.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.ModelStep">
            <summary>
            Raised after the BeforeStep stage but just before stepping the simulators.
            End step actions called just after stepping the simulators but before the AfterStep stage.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus">
            <summary>
            Speed status.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.RenderSpeedChanged">
            <summary>
            Raised when the render speed is recalculated.
            Parameters are fps and renderPercentage.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.ModelSpeedChanged">
            <summary>
            Raised when the model speed is recalculated.
            Parameters are speedState, statusSpeed and overallStatusSpeed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.FPS">
            <summary>
            Frames per second rendered since last update.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.RenderPercentage">
            <summary>
            Percentage of real time spent rendering.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.StatusSpeed">
            <summary>
            Speed since last update.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.OverallStatusSpeed">
            <summary>
            Speed since model start.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.ModelAdvanced(Demo3D.Time.ModelTime)">
            <summary>
            Updates <see cref="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.StatusSpeed" /> and <see cref="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.OverallStatusSpeed" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.FrameRendered(Demo3D.Time.RealTime)">
            <summary>
            Updates <see cref="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.FPS" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.Starting">
            <summary>
            Notify that the model is starting.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.SpeedStatus.Reset">
            <summary>
            Notify that the model has been reset.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.speedStatus">
            <summary>
            Records and measures speed status.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.FPS">
            <summary>
            Frames per second rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.StatusSpeed">
            <summary>
            Current speed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.OverallStatusSpeed">
            <summary>
            Overall speed since model start.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopTime">
            <summary>
            Stop At and Stop After Time
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopTime.StopAtTime">
            <summary>
            The configured "stop at" time.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopTime.StopAfterDuration">
            <summary>
            The configured "stop after" time.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopTime.Starting(Demo3D.Time.ModelTime)">
            <summary>
            Model starting.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopTime.Reset">
            <summary>
            Model reset.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CoSimulation.FrameAdvancer.stopTime">
            <summary>
            Stop At and Stop After time configuration.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopAtTime">
            <summary>
            Gets the "stop at" time.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.CoSimulation.FrameAdvancer.StopAfterDuration">
            <summary>
            Gets the "stop after" duration.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.FrameMaterials">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IFrameDatabase">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FrameDatabaseOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FrameDatabase">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FrameDatabase.#ctor(Demo3D.Visuals.Document,Demo3D.Visuals.FrameDatabaseOptions)">
            <summary>
            Create a frame database from in memory objects.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrameDatabase.GetItems">
            <summary>
            Get all CustomRibbonManager IRibbonItems that are Items or CheckItems
            </summary>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.FrameRecord">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FrameRecord.Flush">
            <summary>
            Set Last.Value to be the only value at time 0.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CameraRecord">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.FrameRecordBase.rawId">
            Use the id in case it is deleted and the delete is undone
        </member>
        <member name="T:Demo3D.Visuals.FrameRecordUpdate">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FrameEntry`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FrameUpdates`1">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FrameUpdates`1.Flush">
            <summary>
            Set Last.Value to be the only value at time 0.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.FrameUpdateType">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.FrictionMaterialReference.DefaultFactor">
            <summary>
            The most commonly used friction factor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrictionMaterialReference.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Deserializes this object.
            </summary>
            <param name="entryReader">A SerializerEntryReader for reading the entry corresponding to this object.</param>
            <returns>The new deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FrictionMaterialReference.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes this object.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="value">The object to serialize.</param>
        </member>
        <member name="T:Demo3D.Visuals.FrictionMaterialReferenceConverter">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.FrictionMaterialLibrary.MergeFrom(Demo3D.Visuals.FrictionMaterialLibrary)">
            <summary>
            Merge the meshes from the supplied library into this library.
            </summary>
            <param name="FrictionMaterialLib"></param>
        </member>
        <member name="M:Demo3D.Visuals.FrictionConfiguration.Add(System.String,System.String,System.Double)">
            <summary>
            Add a new friction combination if it doesn't exist already.
            If it does exist set the coefficient of the existing combination.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrictionConfiguration.Add(Demo3D.Visuals.FrictionMaterialCombination)">
            <summary>
            Override default Add to ensure uniqueness of combinations.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrictionConfiguration.Remove(System.String,System.String)">
            <summary>
            Remove a friction combination.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrictionConfiguration.RemoveMaterial(System.String)">
            <summary>
            Remove all combinations for a given material name.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrictionConfiguration.ClearCache">
            <summary>
            Allow scripting users to have control over cleaing the cache in 
            case they manage to circumvent it.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrictionConfiguration.CreateDefaults">
            <summary>
            Create Friction Combination Defaults.
            Based on the following sources form the web:
            http://www.carbidedepot.com/formulas-frictioncoefficient.htm
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FrictionConfiguration.GetHashCode">
            <summary>
            Dummy <see cref="M:System.Object.GetHashCode" /> implemention to avoid compiler warning.
            <para>It is not correct due to the <see cref="M:Demo3D.Visuals.FrictionConfiguration.Equals(System.Object)" />
            method on this class; if a.Equals(b) is true then a.GetHashCode() *must* equal b.GetHashCode()
            for successful use within a <see cref="T:System.Collections.Generic.Dictionary`2" /> type object.
            </para>
            </summary>
            <remarks>Will throw an exception in DEBUG mode.</remarks>
            <returns>A hash code for the current object.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.FrictionConfigurationConverter">
            <summary>
            Only display 3 digits after the decimal place for doubles.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.GeneratorReferenceConverter">
            <summary>
            Allow the generator reference name to be edited as a string.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.GeneratorReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Allow a texture name to be deleted.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.GeneratorReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            We can only convert texture references to strings (for display).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.TriMesh">
            <summary>
            Cache the vertices and face indices so that we can render the trimesh geom
            in the physics engine.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.GeomFromMesh.Convert(Demo3D.Visuals.IMesh)">
            <summary>
            Convert an IMesh (currently Direct3D mesh) to an ODE.Geoms.TriMesh geom.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.GroupObject">
            <summary>
            GroupObject is a Visual that isn't abstract.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.HierarchyImageString">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.TopMostGroup(Demo3D.Visuals.Visual)">
            <summary>
            The furthest owning group for this visual, or null.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.ClosestGroup(Demo3D.Visuals.Visual)">
            <summary>
            The closest owning group for this visual, or null.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.#ctor(System.Collections.IList)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.#ctor(System.Collections.IList,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.Construct(System.Collections.IList,System.Boolean,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.SetKinematic(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.SetPhysicsEnabled(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.WorldMinimumY">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.GetWorldCenter(System.Collections.IList)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.Members">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.ReleaseMembers">
            <summary>
            Reparent all children of the GroupObject to the Group's Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.AttachToProperties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.PickWorldFrustum(Microsoft.DirectX.Plane[],System.Collections.ArrayList)">
            <summary>
             If a child of the group is picked make sure the group is picked instead.
            </summary>
            <param name="frustum"></param>
            <param name="hits"></param>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.MeshBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.MeshBoundingSphere">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.Volume">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.VolumeOfChildren">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.SurfaceArea">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.SurfaceAreaOfChildren">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.VertexCountOfChildren">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.FaceCount">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.FaceCountOfChildren">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.GetConnectors(Demo3D.Visuals.Visual,System.Collections.ArrayList)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.IsConnected">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.Scan">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupObject.SetScanNeededOnAttached(System.Collections.ArrayList)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.Ports">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.SelectChildWhenPicked">
            <summary>If a group is selected allow the selected child's properties to be edited but keep the group together still while dragging. StrictPicking controls whether only immediate children of the group are considered, or all descendants.</summary>
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.AllowUngroup">
            <summary>Whether or not the group can be ungrouped using the user interface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.GroupObject.StrictPicking">
            <summary>If true, then picking any descendant of the group will pick the group, otherwise only picking immediate children will pick the group. It is unlikely you want this set as false. See also SelectChildWhenPicked.</summary>
        </member>
        <member name="T:Demo3D.Visuals.GroupProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupVisuals.Group(System.Collections.IList,System.Boolean,System.Boolean)">
            <summary>
            Create a group from a list of visuals
            </summary>
            <param name="visuals"></param>
            <param name="recenter"></param>
            <param name="matrixFromFirstVisual"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.GroupVisuals.ReparentPreservingInitialWorldMatrix(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupVisuals.AddMember(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GroupVisuals.GetWorldCenter(System.Collections.IList)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.HandrailProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.HandrailVisual">
            <summary>
            Summary description for HandrailVisual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.MeshMaterials">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.HandrailVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.ShowStartPost">
            <summary>
            Whether or not to show the start post for the handrail.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.ShowEndPost">
            <summary>
            Whether or not to show the end post for the handrail.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.RailMaterial">
            <summary>
            The color, reflectivity and specularity of the rails.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.PostMaterial">
            <summary>
            The color, reflectivity and specularity of the posts.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.PostSpan">
            <summary>
            The distance between the posts. Additional posts are added at this distance from the start post until the end post is reached.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.Radius">
            <summary>
            The radius of the handrail.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.HandrailVisual.Rails">
            <summary>
            The number of horizontal rails to create for the handrail. The default is 2.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IRedraw">
            <summary>
            Used in the catalog editor window as well.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.IRedraw.ShouldRender(Demo3D.Visuals.Visual)">
            <summary>
            Allow overriding of display and picking for this visual.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ImportEventArgs">
            <summary>
            <see cref="T:System.EventArgs" /> supplied to <see cref="E:Demo3D.Visuals.IBuilder.AfterFileImported" /> events.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ImportEventArgs.ImportPath">
            <summary>
            The full path of the imported file including the extension.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ImportEventArgs.Visual">
            <summary>
            The root visual of the resulting import.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CatalogEventArgs">
            <summary>
            <see cref="T:System.EventArgs" /> supplied to <see cref="E:Demo3D.Visuals.IBuilder.AfterCatalogLoaded" /> or <see cref="E:Demo3D.Visuals.IBuilder.BeforeCatalogClosed" /> events.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CatalogEventArgs.Catalog">
            <summary>
            <see cref="F:Demo3D.Visuals.CatalogEventArgs.Catalog" /> that generated event.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.CatalogEventArgs.Exception">
            <summary>
            Any <see cref="F:Demo3D.Visuals.CatalogEventArgs.Exception" /> that was generated by the catalog, or null.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.CatalogEventArgs.#ctor(Demo3D.Visuals.Catalog,System.Exception)">
            <summary>
            Constructor.
            </summary>
            <param name="catalog"><see cref="F:Demo3D.Visuals.CatalogEventArgs.Catalog" /> generating the event.</param>
            <param name="exception">Any <see cref="F:Demo3D.Visuals.CatalogEventArgs.Exception" /> that was generated by the catalog, or null.</param>
        </member>
        <member name="P:Demo3D.Visuals.ICatalogManager.ActiveCatalogView">
            <summary>
            The Catalog View that was last active.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IAutoSaveManager">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IAutoSaveManager.Suspend">
            <summary>
            Suspend the AutoSaveManager timed event processing (keeps a count of suspends)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IAutoSaveManager.Resume">
            <summary>
            Resume the AutoSaveManager timed event processing if enabled (when suspend count is less than 1)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAutoSaveManager.TitleText">
            <summary>
            Text to append to the Title Bar
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IAutoSaveManager.DocumentNeedsSaveChanged(Demo3D.Visuals.Document,System.Boolean,System.Boolean)">
            <summary>
            Called when the doc.NeedsSave is changed
            </summary>
            <param name="doc">Document</param>
            <param name="oldValue">Old value of doc.NeedsSave</param>
            <param name="newValue">New value of doc.NeedsSave</param>
        </member>
        <member name="P:Demo3D.Visuals.IAutoSaveManager.UseLocalTime">
            <summary>
            Return whether AutoSave filenames use local time or UTC time
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAutoSaveManager.Location">
            <summary>
            Return the AutoSave location (e.g. AutoSave, ., c:/Users/Andrew)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IAutoSave.AutoSave">
            <summary>
            Perform an AutoSave if required
            </summary>
            <returns>Was the AutoSave successful?</returns>
        </member>
        <member name="T:Demo3D.Visuals.RedrawAtEnd">
            <summary>
            Suspend redraws for the scope of a using statement.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.UdpClientEventArgs">
            <summary>
            This interface clearly defines the API required by the ITool implementations
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.RedrawEventArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ToolRenderedEventArgs">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ToolRenderedEventArgs.Tool">
            <summary>
            The tool that just rendered
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectedEventArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DisconnectedEventArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ModelStartEventArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ModelStartEventHandler">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IDragItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IVisualFactoryDrag">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IVisualFactoryDrag.Factory">
            <summary>
            The factory used to create the visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IVisualFactoryDrag.OnVisualCreated(Demo3D.Visuals.Visual)">
            <summary>
            Occurs when a visual has been created from the drag drop operation.
            </summary>
            <param name="visual">The created visual.</param>
        </member>
        <member name="T:Demo3D.Visuals.IFeatureInfo">
            <summary>
            Information about available feature. Currently an IFeatureInfo is only in existence (as returned from FindFeature and GetFeature) if the feature is licensed and activated.
            It's possible that in the future IFeatures will return features that have expired or are currently in use, so you should check IsActivated
            A feature is the subject of any license. For example, "Demo3D Professional Edition 2020" is a feature, but content creators for Emulate3D may also require that a particular (custom) feature is enabled.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IFeatures">
            <summary>
            Information about available features. Use this interface from plugins and scripting to find if features are available.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IFeatures.FindFeature(System.String)">
            <summary>
            Returns an IFeatureInfo if feature is found. Check IsActivated to see if the feature is actually available (it may be expired for example).
            Use this call if you wish to see if the feature is already available, but without attempting to allocate a license if it isn't. 
            </summary>
            <param name="name">Name of feature</param>
            <returns>An IFeatureInfo if the feature is found in the current set of licensed features, null otherwise. Always check IsActivated</returns>
        </member>
        <member name="M:Demo3D.Visuals.IFeatures.GetFeature(System.String)">
            <summary>
            Returns an IFeatureInfo if feature is found, and attempts to allocated (from NLS/ULS) if not found.
            Check IsActivated to see if the feature is actually available (it may be expired for example).
            </summary>
            <param name="name">Name of feature</param>
            <returns>An IFeatureInfo if the feature is found in the current set of licensed features, null otherwise. Always check IsActivated</returns>
        </member>
        <member name="T:Demo3D.Visuals.IBuilder">
            <summary>
            The top level application interface. This class provides services which apply to the whole application and are not specific to the currently loaded document.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Features">
            <summary>
            Returns <see cref="T:Demo3D.Visuals.IFeatures" /> instance which can tell you which features are available and their status.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Edition">
            <summary>
            Returns the <see cref="T:Demo3D.Licensing.IEdition" /> of this instance of Demo3D.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Version">
            <summary>
            Return the 4 digit <see cref="P:Demo3D.Visuals.IBuilder.Version" /> of this instance of Demo3D.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.IsCommandLineApplication">
            <summary>
            Returns whether this instance of Demo3D is a CommandLine instance.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.IsThisParallelInstance">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Returns whether this instance of Demo3D is a Parallel instance.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.UserData">
            <summary>
            Application level user data storage.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.UserVars">
            <summary>
            Application level user key-value pair storage.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.PhysicsModeUpdated">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.OnStartUsingPhysics(System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.OnStopUsingPhysics(System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.AssertModelLocked">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.EnqueueListenerEvent(System.EventHandler,System.Object,System.EventArgs)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.EnqueueRequired">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ModelInvoke(System.EventHandler,System.Object,System.EventArgs)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.ModelInvokeRequiredForDocumentRun">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenUdp(System.Object,System.Int32,Demo3D.Visuals.UdpClientEventHandler)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenUdp(System.Object,System.String,System.Int32,Demo3D.Visuals.UdpClientEventHandler)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenUdp(System.Object,System.Int32,Demo3D.Visuals.UdpClientEventHandler,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenUdp(System.Object,System.String,System.Int32,Demo3D.Visuals.UdpClientEventHandler,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenTcp(System.Object,System.Int32,System.EventHandler)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenTcp(System.Object,System.Int32,System.EventHandler,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenTcpPacket(System.Object,Demo3D.Gui.TcpPacketConfiguration,Demo3D.Gui.TcpPacketEventHandler)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ListenTcpPacket(System.Object,Demo3D.Gui.TcpPacketConfiguration,Demo3D.Gui.TcpPacketEventHandler,System.Boolean)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Listeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StopListeners">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.ExternalScript">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Animating">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.AviEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.ExportingMovie">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.RunToTime(System.Double,Demo3D.Visuals.RunMode)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StartRunning(Demo3D.Visuals.RunMode)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StartRunningFast(System.Double,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StartRunningFast(System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StopRunning">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.CoSimulationMaster">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.Import(System.String,System.Object,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.Import(System.String,System.Boolean,Demo3D.Visuals.Raw.CADImportSettings)">
            <summary>
            Import a file into the scene
            </summary>
            <param name="filename">Path to file</param>
            <param name="showDialogs">Show dialogs including options and progress updates</param>
            <param name="cadImportSettings">Import settings</param>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NewDocument">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.OpenDocument(System.String,System.Boolean,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.OpenDocument(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SaveWorld">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.SceneAnimation">
            <summary>
            Access scene animation.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.BackgroundTaskViewer">
            <summary>
            Interface for adding background tasks to the status bar view.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.RenderManager">
            <summary>
            Interface for adding additional renderers.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Camera">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ImportExtrusionProfile(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.CreateVisuals(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.CreateView(System.String,System.Drawing.Size,System.Drawing.Point)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.CreateCatalog(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.LoadCatalog(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.FindCatalog(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.FindVisualFactoryByTypeName(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.FindCatalogForFactory(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.FindVisualFactory(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Catalogs">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.BeforeNewDocument">
            <summary>
            <see cref="T:System.EventHandler" /> called before a New Document is created, first parameter is the <see cref="T:Demo3D.Visuals.IBuilder" /> as an <see cref="T:System.Object" />, and second is null.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterNewDocument">
            <summary>
            <see cref="T:System.EventHandler" /> called after a New Document is created, first parameter is the <see cref="T:Demo3D.Visuals.IBuilder" /> as an <see cref="T:System.Object" />, and second is null.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.BeforeDocumentLoaded">
            <summary>
            <see cref="T:System.EventHandler" /> called before a New Document is loaded, first parameter is the <see cref="T:Demo3D.Visuals.IBuilder" /> as an <see cref="T:System.Object" />, and second is null.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterDocumentLoaded">
            <summary>
            <see cref="T:System.EventHandler" /> called after a New Document is loaded, first parameter is the <see cref="T:Demo3D.Visuals.IBuilder" /> as an <see cref="T:System.Object" />, and second is null.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.BeforeDocumentSaved">
            <summary>
            <see cref="T:System.EventHandler" /> called before a Document is saved, first parameter is the <see cref="T:Demo3D.Visuals.IBuilder" /> as an <see cref="T:System.Object" />, and second is null.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterDocumentSaved">
            <summary>
            <see cref="T:System.EventHandler" /> called after a Document is saved, first parameter is the <see cref="T:Demo3D.Visuals.IBuilder" /> as an <see cref="T:System.Object" />, and second is null.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.BeforeCatalogLoaded">
            <summary>
            <see cref="T:System.EventHandler" /> called before a Catalog is loaded.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterCatalogLoaded">
            <summary>
            <see cref="T:System.EventHandler" /> called after a Catalog is loaded, first parameter is the <see cref="T:Demo3D.Visuals.Catalog" /> as an <see cref="T:System.Object" />, and second is a <see cref="T:Demo3D.Visuals.CatalogEventArgs" /> as a <see cref="T:System.EventArgs" />.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.BeforeCatalogClosed">
            <summary>
            <see cref="T:System.EventHandler" /> called before a Catalog is unloaded, first parameter is the <see cref="T:Demo3D.Visuals.Catalog" /> as an <see cref="T:System.Object" />, and second is a <see cref="T:Demo3D.Visuals.CatalogEventArgs" /> as a <see cref="T:System.EventArgs" />.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterCatalogClosed">
            <summary>
            <see cref="T:System.EventHandler" /> called after a Catalog is unloaded.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterCSharpCodeCompiled">
            <summary>
            <see cref="T:System.EventHandler" /> called after some C# code is compiled.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterFileImported">
            <summary>
            <see cref="T:System.EventHandler" /> called after a File is imported, first parameter is the <see cref="T:Demo3D.Visuals.IBuilder" /> as an <see cref="T:System.Object" />, and second is a <see cref="T:Demo3D.Visuals.ImportEventArgs" /> as a <see cref="T:System.EventArgs" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyAfterFileImported(Demo3D.Visuals.ImportEventArgs)">
            <summary>
            Call this to notify interested listeners to examine (re)imported CAD.
            </summary>
            <param name="args">The arguments for the post import event.</param>
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AppInitialized">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AppClosing">
            <summary>
            <see cref="T:System.EventHandler" /> called when the app is closing.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.WhenDocumentLoaded(System.Action)">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.ResetListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.StartedListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.StoppedListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.VisualAddedListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterVisualAddedListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.VisualRemovedListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.AfterVisualRemovedListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyOnVisualAdded(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyOnVisualRemoved(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyOnAfterVisualRemoved(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyBeforeCatalogLoaded(Demo3D.Visuals.Catalog)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyAfterCatalogLoaded(Demo3D.Visuals.Catalog,System.Exception)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyBeforeCatalogClosed(Demo3D.Visuals.Catalog)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyAfterCatalogClosed">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyAfterCSharpCodeCompiled(System.Reflection.Assembly)">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.BeforeRedrawListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyBeforeRedraw(System.Double)">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.ToolRenderedListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyToolRendered(Demo3D.Visuals.ITool)">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.ConnectedListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.IBuilder.DisconnectedListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyOnConnected(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.NotifyOnDisconnected(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.FrameRate">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.MinFrameRateMultiplier">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.PhysicsTimeStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Display">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.DebuggingEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.RenderTime">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.CurrentRunSpeed">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.OverallRunSpeed">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.RequestedRunSpeed">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.EndInvoke(System.IAsyncResult)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.SelectGeometryManager">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.QuickPropertiesManager">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.GetRegAppKey(System.Boolean)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.CompanyDataDirectory">
            My Documents/Demo3D
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.EditionDataDirectory">
            AppData/Roaming/Emulate3D/
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.RefreshPropertiesGrid">
            AppData/Roaming/Emulate3D/Emulate3D Ultimate Edition 20xx/
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.FloatingTexture">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.Parameters">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.CustomEdit(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SnapshotDepthData(Demo3D.Gui.RenderMapInfo)">
            <summary>
            Get the depth data as an array or image
            </summary>
            <param name="info">Information on how to render the depth map.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SnapshotColorData(Demo3D.Gui.RenderMapInfo)">
            <summary>
            Get the color data as an array or image
            </summary>
            <param name="info">Information on how to render the color map.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.Focus(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.FocusWithoutSelect(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.Follow(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.FollowPointOfView(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SetCamera(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SetCamera(System.String,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SetCamera(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SetCamera(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SetCamera(Demo3D.Visuals.Visual,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SetCamera(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.FreezeCamera">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.UpdateCameraList">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.PlanViewLocked">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.OpenAvi">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.OpenAvi(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.CloseAvi">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StartVideoRecording">
            <summary>
            Start recording the scene, opens a dialog to set the file path, end with <see cref="M:Demo3D.Visuals.IBuilder.StopVideoRecording" /> 
            </summary>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StartVideoRecording(System.String)">
            <summary>
            Start recording the scene, end with <see cref="M:Demo3D.Visuals.IBuilder.StopVideoRecording" /> 
            </summary>
            <param name="videoFileName">Where to save the movie, file extension determines movie format</param>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StartVideoRecording(Demo3D.Gui.MovieFormats.Demo3DMovieExportFormat)">
            <summary>
            Start recording the scene, end with <see cref="M:Demo3D.Visuals.IBuilder.StopVideoRecording" /> 
            </summary>
            <param name="format">Format to export the movie</param>
            <returns>true if sucessful</returns>
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.StopVideoRecording">
            <summary>
            Stop recording the scene
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.ContextForScript">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.LoadAssembly(System.Reflection.AssemblyName)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.GetBottomPane">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ClearSearchResults">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.AddSearchResult(Demo3D.Visuals.ScriptContainer,System.String,System.Int32,System.Int32,System.String,Demo3D.Visuals.ScriptType)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.AddSearchResult(Demo3D.Visuals.PropertySearchResult)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.SetTitle">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.GenerateThumbnail(System.Int32)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.DisplaySettings">
            <summary>
            Interaction with the GUI to enable/disable things like ShowDirectionArrows. 
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.QuickMovie">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.CloseTooltip">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.CreateTooltip(System.Object,System.Double,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.DisposeTooltip">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.IBuilder.AutoSaveManager">
            <summary>
            AutoSaving Support (IAutoSave implicit)
            </summary>
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.IBuilder.ShowFeedManager">
            <summary>
            Show the package feed manager.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PropertySearchResult">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.IControlPanelProvider">
            <summary>
            Aspects that implement this interface will open a control panel when its owning Visual is selected.
            The default behaviour is to close the panel when the visual is unselected.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IControlPanelProvider.KeepControlPanelOpen">
            <summary>
            When true, keeps the control panel open after changing selection
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IControlPanelProvider.ControlPanelTitle">
            <summary>
            Title of the control panel
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IControlPanelProvider.CreateControlPanelContents">
            <summary>
            The contents to show in the control panel, currently supports Winform or WPF controls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.IControlPanelProvider.OnControlPanelOpening">
            <summary>
            Called before the control panel is opened
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IControlPanelProvider.OnControlPanelClosing">
            <summary>
            Called before the control panel is closed
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IDocumentProvider">
            <summary>
            Interface to get the <see cref="P:Demo3D.Visuals.IDocumentProvider.Document" />.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IDocumentProvider.Document">
            <summary>
            Get the <see cref="P:Demo3D.Visuals.IDocumentProvider.Document" />.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InverseKinematics.DegreeOfFreedom.Stiffness">
            <summary>
            The higher the stiffness, the less likely it will be to move and
            lower stiffness joints will move in preference to this joint.
            The range of stiffness is between 0 and 1 where 1 is stiff and 0
            is free to move.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.InverseKinematics.RotationDegreeOfFreedom">
            <summary>
            Rotational freedom. Where min and max are both 0 there is no constraint.
            Min and Max are in degrees.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.InverseKinematics.TranslationDegreeOfFreedom">
            <summary>
            Translation freedom. Where min and max are both 0 there is no constraint.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.InverseKinematics.InverseKinematicsLink">
            <summary>
            Limit up to 6 degrees of freedom for a link in an inverse kinematic chain.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InverseKinematics.InverseKinematicsLink.IsRoot">
            <summary>
            Stop the upwards kinematic chain at this link.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.InverseKinematics.JointSet.Tweak">
            <summary>
            Tweak is added and then subtracted to each joint value during each iteration to see which takes the end effector closer to the target
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.InverseKinematics.JointSet.GradientMultiplier">
            <summary>
            GradientMultiplier is used to scale the result of the tweaking
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InverseKinematics.JointSet.SolveRotateToPoint(Microsoft.DirectX.Vector3)">
            <summary>
            Single arm rotating until its tip meets a point
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InverseKinematics.JointSet.SolveRotateToRadius(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Single arm rotating until its tip meets a circle
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PeopleTargetAnimator.Completed">
            <summary>
            The target animator never completes, it runs continuously until cancelled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PeopleGazeAnimator.Completed">
            <summary>
            The gaze animator never completes, it runs continuously until cancelled.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PeopleSolution">
            <summary>
            A solution set for visual matrix updates.
            By default solutions are for rotation only, unless the Origin of the matrix is supplied.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PeopleSolver">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PeopleSolver.SolveHips(Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.Visual,Demo3D.Visuals.PeopleSolution)">
            <summary>
            Move and align hips, constrained to standing height or kneeling to touch the floor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleSolver.SolveArm(Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.Visual,Demo3D.Visuals.Hand,Demo3D.Visuals.PeopleSolution)">
            <summary>
            Orient the shoulder and elbow to maintain the shouler to hand grip constraints.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleSolver.SolveLeg(Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.Visual,Demo3D.Visuals.Hand,Demo3D.Visuals.PeopleSolution)">
            <summary>
            Constrain the feet to be stationary and bend the knees to match the hip-ankle constraints.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleSolver.SolveHand(Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.Visual,Demo3D.Visuals.Hand,Demo3D.Visuals.PeopleSolution)">
            <summary>
            Constrain the hands to be stationary and bend the knees to match the hip-ankle constraints.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleSolver.SolveHAL(Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.PeopleSolution,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Demo3D.Visuals.PeopleSolution)">
            <summary>
            Solve Human-Arm-Like joint chain. This covers arms, legs and the spine with sensible constraints.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleSolver.SolvePlaneHAL(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Quaternion@)">
            <summary>
            Calculate Analytical solution for Human-Arm-Like joint set, should-elbow-wrist or hip-knee-ankle.
            </summary>
            <returns>true if a solution was found within the constraints of the HAL chain, otherwise false indicating that other body parts need to be moved to satisfy the constraint.</returns>
        </member>
        <member name="P:Demo3D.Visuals.ImageLibrary.Item(Demo3D.Visuals.ImageReference)">
            <summary>
            Get a image given a image key.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ImageLibrary.Item(System.Drawing.Image)">
            <summary>
            Get an existing or new image key given a image
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ImageLibrary.MergeFrom(Demo3D.Visuals.ImageLibrary)">
            <summary>
            Merge the images from the supplied library into this library.
            </summary>
            <param name="imageLib"></param>
        </member>
        <member name="P:Demo3D.Visuals.ImageLibrary.Count">
            <summary>
            How many images are stored in this library?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ImageLibrary.Clear">
            <summary>
            Clear out all images from the library.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IMaterialProvidedOnDemand">
            <summary>
            Interface to show that the materials can change from logic within the MeshMaterials getter.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IMesh">
            <summary>
            Interface for mesh objects
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.Render(Demo3D.Visuals.IDisplay,Demo3D.Visuals.MeshMaterial[])">
            <summary>
            Render this object.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.RenderInstances(Demo3D.Visuals.IDisplay,System.Collections.Generic.List{Microsoft.DirectX.Matrix},System.Collections.Generic.List{Demo3D.Visuals.MeshMaterial[]})">
            <summary>
            Handle rendering multiple instances of 
            </summary>
            <param name="display"></param>
            <param name="instances"></param>
            <param name="materials"></param>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.PickWorldFrustum(Microsoft.DirectX.Plane[],Microsoft.DirectX.Matrix)">
            <summary>
            Pick this object given an input frustum and add it to the hits list.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.Transform(Microsoft.DirectX.Matrix)">
            <summary>
            Can be used to recenter a mesh around 0,0,0 using translate or 
            to rotate the mesh by 90 degrees around one its axes to reorient it.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.Scale">
            <summary>
            Get current scale.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.Scale(Microsoft.DirectX.Vector3)">
            <summary>
            Rescale the mesh around 0,0,0 and leave the normals the same.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.Simplify(System.Single)">
            <summary>
            Simplify the mesh by reducing the number of vertices and faces.
            1.0 = full accuracy, 0.0 = minimal accuracy.
            </summary>
            <param name="accuracy">The accuracy value to use.</param>
            <returns>True if the mesh was successfully simplified.</returns>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.Recenter">
            <summary>
            Make the center of the mesh (0,0,0) to allow easy syncing with PhysicsGeoms.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.UnsmoothNormals(System.Double)">
            <summary>
            Make the normals perpendicular the faces, not smoothed, when the angle
            between adjacent faces is greater than the unsmoothedAboveAngle.
            A good default is RadiansOf(60 degrees).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.SmoothNormals(System.Double,System.Double)">
            <summary>
            Smooth the normals for adjoining points where the faces are less than the
            smoothBelowAngle. Good defaults are RadiansOf(60 degrees) and 0.001 (1mm).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.ComputeNormals">
            <summary>
            Replace existing normals with smooth normals generated from the geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.FlipNormals">
            <summary>
            Imported meshes can have their normals the wrong way around.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.FlipVertexOrder">
            <summary>
            Imported meshes can have their vertex order clockwise or counter clockwise.
            This should flip between the two.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.FixVertexOrder">
            <summary>
            Imported meshes can have their face vertex order clockwise or counter clockwise.
            This should work out which should be flipped based on face and vertex normals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.AddReverseFaces">
            <summary>
            Some imported models, espcially from tools like AutoCAD, don't have any
            face vertex order which is required for optimal rendering. To work around
            this AddReverseFaces will render  front and back faces. This slows things down.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.WeldVertices">
            <summary>
            Imported meshes can often have all their face vertices duplicated,
            this puts identical vertices back together again, speeding things up.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMesh.GetShadowVolume(Demo3D.Visuals.ShadowVolume.ShadowAlgorithm,Microsoft.DirectX.Vector3,System.Single,Microsoft.DirectX.Matrix)">
            <summary>
            Return a shadow volume given a certain light direction and height.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IMesh.Name">
            <summary>
            Name of this mesh. Probably should be the name of the file it was imported from.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IMesh.MeshFacePositionsNormalized">
            <summary>
            Get the position only mesh face vertices in a large array for simple mesh analysis
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IMesh.MeshVolume">
            <summary>
            Get the volume enclosed within the mesh (always using the mesh data)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IMesh.Volume">
            <summary>
            Get the volume enclosed within the mesh (but with overloads to correctly compute it for certain shapes)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IMesh.MeshSurfaceArea">
            <summary>
            Get the surface area of the mesh (always using the mesh data)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IMesh.SurfaceArea">
            <summary>
            Get the surface area of the mesh (but with overloads to correctly compute it for certain shapes)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IMesh.Id">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IMesh.IsPersistant">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.IMesh.Clone">
            <summary>
            Clone this <see cref="T:Demo3D.Visuals.IMesh" />.
            </summary>
            <returns>Clone of this <see cref="T:Demo3D.Visuals.IMesh" />.</returns>
        </member>
        <member name="M:Demo3D.Visuals.IMeshAnimation.GetAnimationController">
            <summary>
            Returns a copy of the animation controller if there is one.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IMeshDataContainer">
            <summary>
            Interface for objects that contain <see cref="T:Demo3D.Renderers.Meshes.MeshData" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IMeshDataContainer.GetMeshData">
            <summary>
            Extract the underlying mesh data in a rendering API neutral data structure.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ImageBackFace">
            <summary>
            Control how the back of the imported image visual is displayed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ImageBackFace.None">
            <summary>
            Display nothing on the back (make it fully transparent).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ImageBackFace.BackgroundColor">
            <summary>
            Display the diffuse color (no image).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ImageBackFace.Image">
            <summary>
            Display the image on the back as well as the front.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ImportedImageProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedImageProperties.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ImportedImageVisual">
            <summary>
            Class that is used to render a set an image.
            This class is used to render imported 2D images (e.g. from PNG or JPEG files).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedImageVisual.ClearControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedImageVisual.CreateFromImage(Demo3D.Visuals.Document,System.Drawing.Image,System.String)">
            <summary>
            Create a new ImportedImageVisual parented to the scene of the supplied document from the supplied Image.
            </summary>
            <param name="doc">Document to add image visual to.</param>
            <param name="image">Image to display on the image visual.</param>
            <param name="name">Name of the visual and the texture.</param>
            <returns>New imported image visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ImportedImageVisual.LoadFromFile(Demo3D.Visuals.Document,System.String)">
            <summary>
            Create a new ImportedImageVisual parented to the scene of the supplied document from a file.
            </summary>
            <param name="doc">Document to add image visual to.</param>
            <param name="fileName">Path of the image file to import.</param>
            <returns>New imported image visual.</returns>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedImageVisual.MeshControlPointMoved">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedImageVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <summary>
            Create double sided flat plane to store textured mesh.
            +p0         p1
            |
            Y    (0,0)
            |
            |p3         p2 
            +------X------
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedImageVisual.OnMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Treat images that are coincident with the floor differently so shadows
            appear on them.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.BackFace">
            <summary>The back face of an imported image can be a solid color (Background Color), a repeat of the image (Image) or nothing at all (None).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.Material">
            <summary>The material for an imported image is the image itself plus an overriding color. This color is also used for the back face background color.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.TextureCoords">
            <summary>The Texture Coords allow an imported image to be cropped. The top left of the image is (0,0) and the bottom right of the image is (1,1).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.ScreenCoords">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ImportedImage.ScreenCoords.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.DisplayMode">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ImportedImage.DisplayMode.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.MaintainAspectRatio">
            <summary>If the width or height is changed, alter the other to maintain the original image aspect ratio.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.WidthScale">
            <summary>A scale factor multiplied by the width of the original image to get the Width. 1 unit is 100 pixels.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.HeightScale">
            <summary>A scale factor multiplied by the height of the original image to get the Height. 1 unit is 100 pixels.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.CopyWidthScale">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.CopyHeightScale">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.Width">
            <summary>The width of the image.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.Height">
            <summary>The height of the image.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedImageVisual.Svg">
            <summary>Configure the image using Scalable Vector Graphics XML markup standard. This allows a vector definition for the graphics to be displayed on the image as if it was a drawing canvas. Updating the Svg text updates the image visual.</summary>
        </member>
        <member name="T:Demo3D.Visuals.ImportedMeshProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ImportedMeshVisual">
            <summary>
            Class that is used to render a set of triangles as a single object.
            This class is used to host imported 3D CAD drawings (e.g. from Autodesk Inventor or SOLIDWORKS files).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.AnimationController">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.SetMesh(Demo3D.Visuals.IMesh)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.SetProperties(System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.Rescale(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.LoadFromFile(Demo3D.Visuals.Document,System.String,Demo3D.Visuals.UserScaleDelegate)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.CreateFromMesh(Demo3D.Visuals.Document,Demo3D.Visuals.IMesh)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.CreateFromMesh(Demo3D.Visuals.Document,Demo3D.Visuals.IMesh,Demo3D.Visuals.MeshMaterial[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.CreateFrameHierarchy(Demo3D.Visuals.ImportedMeshVisual)">
            <summary>
            If mesh is animated and contains a hierarchy create child visuals that
            map onto that hierarchy which can then have their animation switched on
            or off.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.HasTextureMaterial">
            <summary>
            Used to disable texture tools if the visual does not have textures
            Prevents the user altering texture coordinates without visual feedback
            </summary>
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.MenuRotateTextureLeft">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.MenuRotateTextureRight">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.MenuFlipTextureH">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.MenuFlipTextureV">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.RemoveFace">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.ApplySettings(Demo3D.Visuals.IMesh,Demo3D.Visuals.MeshSettings)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.FlattenMesh">
            <summary>
            Flatten the Mesh Visual into the X-Z plane
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.CalculateScale(Demo3D.Visuals.BSphere)">
            <summary>
            Scale to between 10mm and 10m.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.CalculateScale(Demo3D.Visuals.BBox)">
            <summary>
            Scale height to between 10mm and 10m.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.RenderMesh(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.RenderShadowMesh(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ImportedMeshVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.CollisionType">
            <summary>Hints at the type of physics collision geometry to be used. Selecting "Bounding Box" will usually yield the greatest performance, although the geometry will usually poorly approximate the mesh. The "Convex-Hull" option usually provides the best trade-off in terms of accuracy and performance. You may select "Convex-Hull Decomposition" to achieve greater accuracy, whilst "Triangle Mesh" should only be used in specific cases.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.ConvexHullDecomposition">
            <summary>Parameters that control the fidelity when decomposing the mesh into a set of convex-hulls.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Scale">
            <summary>A scale factor for the whole 3D model. The ratios of the width, depth and height and maintained.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.MeshAccuracy">
            <summary>The accuracy with which to draw the mesh. When set to 1.0 the full mesh is rendered. Lower will attempt to reduce the face and vertex count to reduce the burden on the graphics card.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Material">
            <summary>The main material for the imported mesh.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Materials">
            <summary>A list of colors and optional textures associated with parts of the 3D model.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.MaintainAspectRatio">
            <summary>Keep the ratios of the width, height and depth the same as the 3D model is scaled.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Animation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.AutoMeshUpdate">
            <summary>Recreate mesh when any dimensions change. If true, you don't need a PropertiesUpdated() call</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Width">
            <summary>The width of the bounding box of the imported 3D model.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Height">
            <summary>The height of the bounding box of the imported 3D model.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Depth">
            <summary>The depth of the bounding box of the imported 3D model.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ImportedMeshVisual.Dimensions">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ImportedMesh.Dimensions.Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.ImportedMeshControlPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConvexHullDecompositionProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ConvexHullDecompositionProperties.Resolution">
            <summary>
            The maximum number of voxels generated during the voxelization stage.
            </summary>
            <remarks>
            Increase for greater accuracy in approximating geometric features at a cost to the time
            taken to decompose the mesh. Supplied value must be in the range [10000, 2000000].
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.ConvexHullDecompositionProperties.MaxVerticesPerConvexHull">
            <summary>
            The maximum number of vertices for each generated convex-hull.
            </summary>
            <remarks>
            Increase for greater accuracy in approximating convex features at a cost to the physics
            simulation performance. Supplied value must be in the range [4, 1024].
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.ConvexHullDecompositionProperties.Concavity">
            <summary>
            The maximum permitted concavity.
            </summary>
            <remarks>
            Decrease for greater accuracy in approximating concave features at a cost to the total
            number of convex-hulls generated and hence the physics simulation performance. Supplied
            value must be in the range [0, 1].
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.AnimationProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.INeedsSave">
            <summary>
            Interface providing the ability to indicate that an object needs saving having been modified.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.INeedsSave.NeedsSave">
            <summary>
             Gets or sets a value indicating whether the object has been modified and needs saving.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.InjectorConveyorProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyorProperties.ShortSideLength">
            Diameter of the center (rollers/belt) not including the sides
        </member>
        <member name="T:Demo3D.Visuals.InjectorRollerConveyorProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.InjectorBeltConveyorProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.InjectorConveyor">
            <summary>
            Abstract class representing the behavior of injector conveyor visuals with a motor, short side length, angle and width. 
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.InjectorConveyorControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.InjectorConveyorControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.Width">
            <summary>The width of the injector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.Length">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.LeftSideWidth">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.RightSideWidth">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.LeftSideStep">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.RightSideStep">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.LeftSideHeight">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.RightSideHeight">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.Radians">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.LongSideLength">
            <summary>The length of the longest side of the injector conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.StartPadding">
            <summary>The distance from the start of the conveyor element to the start of the side rail.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.EndPadding">
            <summary>The distance from the end of the conveyor element to the end of the side rail.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.LeftPadding">
            <summary>Padding between the conveyor surface and left side</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.RightPadding">
            <summary>Padding between the conveyor surface and right side</summary>
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.SideModule(Demo3D.Visuals.MeshBuilder)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.PickModule(Demo3D.Visuals.MeshBuilder)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.SurfaceLength">
            <summary>
            Circumference of a single roller, override for belt injector.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.UseSurfaceMaterial">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.UseSurfaceSideMaterial">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.AddBoxCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.AddTriangleMeshCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.AddConvexHullCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.CreateConnectors">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.InstallConnectorListeners">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.CreateMovementSurface">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.InjectorConveyor_ConnectionListeners(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <summary>
            When the angled end is connected to a straight conveyor, the long side extends to the side width of the connected conveyor. Otherwise it will reset to the default length.
            Also determines if the connector is connected/disconnected in order to update the EndSupportStand's visibilty.  
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.ConveyorEnd_ConnectedListeners(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <summary>
            Override ShowEndSupport if the connector nearest the EndSupport (could be end or start connector depending on InfeedOutFeedType):
            1) Isn't connected
            2) Is connected to something of a different type, i.e. Conveyor to ASRS 
            3) Connector offset of this conveyor and start connector offset of the next conveyor &gt; 0.
            NOTE: Always show start leg.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.ConveyorEnd_DisconnectedListeners(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <summary>
            If the connector nearest the EndSupport is disconnected then show end support.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.IsEndSupportConnector(Demo3D.Visuals.Connector)">
            <summary>
            Returns true if the connector belongs to the EndSupport "end" of the conveyor (taking into account the InfeedOutFeedType swaps connector ends). 
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.CenterModule(Demo3D.Visuals.MeshBuilder)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.InjectorConveyor.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.LeftSide">
            <summary>The settings for the left hand side of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.RightSide">
            <summary>The settings for the right hand side of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.Angle">
            <summary>The angle of the injector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.ExtraLength">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.CenterDiameter">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.ShortSideLength">
            <summary>The length of the shortest side of the injector conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorConveyor.InfeedOutfeedType">
            <summary>Whether the injector is an infeed or an outfeed conveyor.</summary>
        </member>
        <member name="T:Demo3D.Visuals.InjectorBeltConveyor">
            <summary>
            Class encapsulating the behavior of a injector belt conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorBeltConveyor.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorBeltConveyor.CenterModule(Demo3D.Visuals.MeshBuilder)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorBeltConveyor.AddCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorBeltConveyor.BeltWidth">
            <summary>The width of the belt injector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorBeltConveyor.BeltLength">
            <summary>The length of the belt injector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorBeltConveyor.BeltDiameter">
            <summary>The diameter of the belt injector.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorBeltConveyor.BeltColor">
            <summary>The color of the belt injector.</summary>
        </member>
        <member name="T:Demo3D.Visuals.InjectorRollerConveyor">
            <summary>
            Class encapsulating the behavior of a injector roller conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorRollerConveyor.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorRollerConveyor.CenterModule(Demo3D.Visuals.MeshBuilder)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorRollerConveyor.UseSurfaceSideMaterial">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorRollerConveyor.AddCylinderCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.InjectorRollerConveyor.AddCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.InjectorRollerConveyor.RollerCount">
            <summary>The number of rollers along the length of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorRollerConveyor.RollerDiameter">
            <summary>The diameter of an individual roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorRollerConveyor.RollerWidth">
            <summary>The width of a roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorRollerConveyor.RollerPitch">
            <summary>The gap between each roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.InjectorRollerConveyor.RollerColor">
            <summary>The color to display for a roller.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Autodesk.InventorImportOptions">
            <summary>
            Options to control the importing of models from Inventor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Autodesk.InventorImportOptions.ImportKeyParameters">
            <summary>
            Gets or sets a value indicating whether the Annotations should be imported or not enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Autodesk.InventorImportOptions.ImportConstraints">
            <summary>
            Gets or sets a value indicating whether the constraints should be imported or not enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Autodesk.InventorImportOptions.ImportAnnotations">
            <summary>
            Gets or sets a value indicating whether the Annotations should be imported or not enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Autodesk.InventorImportOptions.ShowImportDialogNextTime">
            <summary>
            Gets or sets a value indicating whether the import dialog should appear on the next import.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Autodesk.InventorImportOptions.MinimumVolume">
            <summary>
            Gets or sets a value indicating the minimum volume of part that should be imported.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VisualDisplayMode">
            <summary>
            Control whether a visual is displayed in world space or screen space.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualDisplayMode.WorldSpace">
            <summary>
            Use the WorldMatrix to display the Visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualDisplayMode.ScreenSpace">
            <summary>
            Use the ScreenCoords to display the Visual.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IAccessoryProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AttachDirection">
            <summary>
            Specify how to align the object's X-Axis with the Visual's "forwards" direction (e.g. X-Axis for a Straight Conveyor).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AttachDirection.Forwards">
            <summary>
            Align object's X-Axis with the Visual's forward direction.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AttachDirection.Reverse">
            <summary>
             Align object's X-Axis with the Visual's reverse direction.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.AttachDirection.Nearest">
            <summary>
            Align object's X-Axis to the closest direction.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IVisualAccessory">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IVisualAccessory.AttachType">
            <summary>
            For example, LoadCreator returns ConveyorVisual for AttachType.
            Vehicle returns TrackVisual
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConveyorAccessory">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConveyorAccessory.IsDependentProperty(System.String,System.Int32[])">
            <summary>
            Check if the property name should cause an update of the accessory.
            TODO: Make virtual if we need to.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorAccessory.Configure">
            <summary>
            Make sure the property constraint is maintained if there is one.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConveyorAccessory.PropertiesUpdated(System.String)">
            <summary>
            Adjust the position when properties are updated.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorAccessory.Offset">
            <summary>
            The offset from the position in local coordinates.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ConveyorAccessory.Angle">
            <summary>
            The angle to set at the position (in radians).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IVisualProcessor">
            <summary>
            Interface to allow classes to apply a process to a visual (sub)tree.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IVisualProcessor.Process(Demo3D.Visuals.Visual)">
            <summary>
            Process the visual subtree.
            </summary>
            <param name="root">The root of the visual subtree.</param>
        </member>
        <member name="T:Demo3D.Visuals.JointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.JointVisual">
            <summary>
            Abstract class encapsulating the behavior of a physics joint (constraint) between other visuals.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.JointVisual.fixedAxis">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.JointVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.JointVisual.IsVisible">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.Reset">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.JointVisual.JointAxis">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.JointVisual.JointLocation">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.EnableJointBodies(Demo3D.Visuals.PhysicsJoint)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.NotifyParentsOfHierarchyChange">
            <summary>
            A child visual has been inserted or removed from the hierarchy
            further down.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.NotifyChildrenOfHierarchyChange">
            <summary>
            A parent visual has been inserted or removed from the hierarchy
            higher up.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.JointVisual.ParentRigidBody">
            <summary>
            If looking for a parent rigid body to create a fixed joint for
            stop here and return null as the joint visual is in charge of joints.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.GetChildRigidBodyList(System.Collections.ArrayList)">
            <summary>
            If looking for child rigid bodies to create a joint for stop here
            as the joint visual is in charge of joints.
            </summary>
            <param name="rigidBodyList"></param>
        </member>
        <member name="F:Demo3D.Visuals.JointVisual.physicsJoints">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.JointVisual.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.JointVisual.ParentJoint">
            <summary>
            Before joints were visuals they were properties on a physics object
            under the name ParentJoint.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualActionCatalog">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualActionPrototype">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualActionContext">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.KJE.ICacheKeyComparer`1">
            <summary>
            Cache key comparer.
            </summary>
            <typeparam name="KeyType">The key type.</typeparam>
        </member>
        <member name="T:Demo3D.Visuals.KJE.CacheVector3Comparer">
            <summary>
            Cache key comparer for 3D vectors.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.CacheMatrixComparer">
            <summary>
            Cache key comparer for 3D affine matrices.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.Cache`2">
            <summary>
            A general distance-associative cache.
            </summary>
            <typeparam name="KeyType">The key type (upon which distances between keys can be calculated).</typeparam>
            <typeparam name="ValueType">The value type.</typeparam>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Cache`2.Capacity">
            <summary>
            The maximum capacity.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Cache`2.Count">
            <summary>
            The current number of entries.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Cache`2.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            It is recommended to use as small a capacity as possible so as to ensure that accesses
            via the <see cref="M:Demo3D.Visuals.KJE.Cache`2.TryGetNearest(`0,Demo3D.Visuals.KJE.ICacheKeyComparer{`0},`0@,`1@)" />
            method are reasonably fast.
            </remarks>
            <param name="capacity">The maximum capacity for the cache.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Cache`2.Add(`0,`1)">
            <summary>
            Adds the specified key-value pair to the cache.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Cache`2.TryGetNearest(`0,Demo3D.Visuals.KJE.ICacheKeyComparer{`0},`0@,`1@)">
            <summary>
            Tries to get the value associated with the key nearest to the specified key.
            </summary>
            <remarks>
            This is an O(n) operation, where n is the number of entries in the cache.
            </remarks>
            <param name="key">The key.</param>
            <param name="comparer">The comparer to use for comparing distances of keys.</param>
            <param name="nearestKey">The key closest to the specified key.</param>
            <param name="nearestValue">The value for the key closest to the specified key.</param>
            <returns>True if a value was obtained, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Cache`2.IncrementAccess(System.Int32)">
            <summary>
            Increments the access counter for the specified entry in the cache.
            </summary>
            <remarks>
            The entry is bubbled up so as to keep entries sorted by number of accesses in descending
            order. This is O(n) in the worst case, but O(1) in the average case.
            </remarks>
            <param name="index">The index for the entry.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Cache`2.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.Conversion">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.KJE.Expressions.Tokenizer.reader">
            <summary>
            The input stream.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Expressions.Tokenizer.Character">
            <summary>
            The current character.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Expressions.Tokenizer.Token">
            <summary>
            The current token.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Expressions.Tokenizer.Number">
            <summary>
            The numeric value.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Expressions.Tokenizer.Identifier">
            <summary>
            The identifier string.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Tokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The input stream to tokenize.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Tokenizer.NextCharacter">
            <summary>
            Reads the next character from the input stream and stores it as the current
            character.
            </summary>
            <remarks>
            Stores the special null character if EOF is read.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Tokenizer.NextToken">
            <summary>
            Reads the next token from the input stream and stores it as the current token.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Parser.Parse">
            <summary>
            Parses an entire expression until EOF is reached.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Parser.ParseAddSubtract">
            <summary>
            Parses a chain of add/subtract operators.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Parser.ParseMultiplyDivide">
            <summary>
            Parses a chain of multiply/divide operators.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Parser.ParseUnary">
            <summary>
            Parses a chain of unary operators.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Expressions.Parser.ParseLeaf">
            <summary>
            Parses a number, constant, parameter or function.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Link(Demo3D.Visuals.Visual)">
            <summary>
            Determines the kinematic link for the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <returns>The link for the visual (or null).</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Mechanism(Demo3D.Visuals.Visual)">
            <summary>
            Determines the mechanism for the specified visual.
            </summary>
            <remarks>
            This function looks up the hierarchy and finds the first ancestor with a mechanism aspect. The visual may
            not be moved by the mechanism.
            </remarks>
            <param name="visual">The visual.</param>
            <returns>The mechanism for the visual (or null).</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.TryGet(Demo3D.Visuals.Visual,Demo3D.Visuals.KJE.MechanismAspect@,Demo3D.Visuals.KJE.KinematicLink@)">
            <summary>
            Tries to detemine the mechanism and link for the specified visual.
            </summary>
            <remarks>
            This function is stronger than <see cref="M:Demo3D.Visuals.KJE.Helper.Mechanism(Demo3D.Visuals.Visual)" /> and <see cref="M:Demo3D.Visuals.KJE.Helper.Link(Demo3D.Visuals.Visual)" />. This function
            will only return true if it found a link and a mechanism for the specified visual, where the mechanism
            contains the found link. This guarantees that the mechanism found moves the specified visual.
            </remarks>
            <param name="visual">The visual.</param>
            <param name="mechanism">The mechanism for the specified visual (or null).</param>
            <param name="link">The link for the specified visual (or null).</param>
            <returns>True if the mechanism and link were determined, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Joints(Demo3D.Visuals.KJE.MechanismAspect,Demo3D.Visuals.KJE.KinematicLink)">
            <summary>
            Determines all joints in the specified mechanism bound to the specified link.
            </summary>
            <param name="mechanism">The mechanism.</param>
            <param name="link">The link.</param>
            <returns>The array of joints in the mechanism bound to the link (or null).</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.NearestMechanism(Demo3D.Visuals.Visual)">
            <summary>
            Attempts to find a mechanism aspect in the vicinity of the visual in the visual
            hierarchy. This function can visit every visual in the scene. Do NOT use this unless you
            absolutely need to and certainly do NOT call this during simulation.
            </summary>
            <remarks>
            This function will return a mechanism aspect if one exists in the scene. If this
            function returns null then no mechanism aspect exists in the scene. This function will
            first check the visual provided for a mechanism aspect. If that fails then it will look
            up the hierarchy. If that fails then it will look down the hierarchy. If that fails then
            it will check every visual in the scene and return the mechanism aspect on the visual
            closest to the provided visual.
            </remarks>
            <param name="visual">The visual to start exploring from.</param>
            <returns>A mechanism aspect, hopefully somewhere near the visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Discover(Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Discovers the set of connected joint graphs from the provided mechanism aspect.
            </summary>
            <remarks>
            A connected joint graph is a graph of links (nodes) connected by joints (edges) where a
            path exists between every node in the graph. You can think of such connected graphs as
            logical mechanisms. However, note that this doesn't take into account passive parameter
            expressions, which may cross the graph boundaries.
            </remarks>
            <param name="mechanism">The mechanism aspect from which to discover connected graphs.</param>
            <returns>The discovered set of connected graphs.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Explore(Demo3D.Visuals.Visual)">
            <summary>
            Explores a connected graph of joints, finding all connected joints.
            </summary>
            <param name="visual">The visual from which to start exploration.</param>
            <returns>The list of joints in the kinematic sub-graph of the specified joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Explore(Demo3D.Visuals.KJE.KinematicJoint)">
            <summary>
            Explores a connected graph of joints, finding all connected joints.
            </summary>
            <param name="joint">The joint from which to start exploration.</param>
            <returns>The list of joints in the kinematic sub-graph of the specified joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Explore(Demo3D.Visuals.KJE.KinematicJoint,Demo3D.Visuals.KJE.KinematicJoint[],System.Collections.Generic.HashSet{Demo3D.Visuals.KJE.KinematicJoint})">
            <summary>
            Explores a connected graph of joints, finding all connected joints.
            </summary>
            <remarks>
            Exploration stops at grounded links.
            </remarks>
            <param name="joint">The joint to explore.</param>
            <param name="allJoints">All the joints that could possibly be explored.</param>
            <param name="seen">The set of explored joints.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.ReapplyFixedJoints(Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Reapplies the all enabled fixed joints, causing the links for their referenced visuals to be merged.
            </summary>
            <remarks>
            This does not unapply any fixed joints that were disabled, removed or had their visual list changed.
            Instead, you must call <see cref="M:Demo3D.Visuals.KJE.Helper.Repopulate(Demo3D.Visuals.KJE.MechanismAspect)" /> to reconstruct the mechanism from the
            joint descriptions.
            </remarks>
            <param name="mechanism">The mechanism.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Repopulate(Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Repopulates the specified mechanism aspect from joint description aspects down the
            visual hierarchy.
            </summary>
            <param name="mechanism">The mechanism aspect to be repopulated.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.FindAspectsForMechanism``1(Demo3D.Visuals.Visual)">
            <summary>
            Finds all aspects of the specified type for visuals falling under the purview of the specified mechanism
            visual.
            </summary>
            <typeparam name="T">The type of aspect to find.</typeparam>
            <param name="mechanismVisual">The mechanism visual.</param>
            <returns>The collection of aspects found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Transform(Microsoft.DirectX.Matrix,Demo3D.Visuals.KJE.KinematicLink,Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Returns the specified world-space transformation matrix in the local-space of the
            specified link.
            </summary>
            <param name="worldTransform">The world-space transformation matrix.</param>
            <param name="link">The link.</param>
            <param name="mechanism">The mechanism.</param>
            <returns>The transform in the local-space of the link.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.Transform(Microsoft.DirectX.Matrix,Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Returns the specified world-space transformation matrix in the space of the specified
            mechanism.
            </summary>
            <param name="worldTransform">The world-space transformation matrix.</param>
            <param name="mechanism">The mechanism.</param>
            <returns>The transform in the local-space of the mechanism.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.TransformToMechanism(Microsoft.DirectX.Matrix,Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Returns the specified world-space transformation matrix in the space of the specified
            mechanism.
            </summary>
            <param name="worldTransform">The world-space transformation matrix.</param>
            <param name="mechanism">The mechanism.</param>
            <returns>The transform in the local-space of the mechanism.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.TransformToMechanismInitial(Microsoft.DirectX.Matrix,Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Returns the specified world-space transformation matrix in the initial space of the
            specified mechanism.
            </summary>
            <param name="worldTransform">The world-space transformation matrix.</param>
            <param name="mechanism">The mechanism.</param>
            <returns>The transform in the local-space of the initial mechanism's triad.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.TransformPointToMechanism(Microsoft.DirectX.Vector3,Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Returns the specified world-space point in the space of the specified mechanism.
            </summary>
            <param name="worldPoint">The world-space point.</param>
            <param name="mechanism">The mechanism.</param>
            <returns>The point in the local-space of the mechanism.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.TransformToWorld(Microsoft.DirectX.Matrix,Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Returns the specified mechanism-space transformation matrix in the space of the world.
            </summary>
            <param name="mechanismTransform">The mechanism-space transformation matrix.</param>
            <param name="mechanism">The mechanism.</param>
            <returns>The transform in world-space.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Helper.TransformWorldToLocal(Microsoft.DirectX.Matrix,Demo3D.Visuals.Visual)">
            <summary>
            Returns the specified world-space transformation matrix in the local-space of the
            specified visual.
            </summary>
            <param name="worldTransform">The world-space transformation matrix.</param>
            <param name="visual">The visual.</param>
            <returns>The transform in the local-space of the visual.</returns>
        </member>
        <member name="F:Demo3D.Visuals.KJE.AngleType.Discontinuous">
            <summary>
            The parameter represents an angle that is discontinuous, ending at bounds or infinity.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.AngleType.Continuous">
            <summary>
            The parameter represents an angle that is continuous and normalized to the wrap-around
            interval [0, 360]. Limits restrict a range on this wrap-around interval. Both limits
            must be specified to restrict a range.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.ParameterType.Dimensionless">
            <summary>
            The parameter is dimensionless.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.ParameterType.Distance">
            <summary>
            The parameter represents a distance.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.ParameterType.AngleDiscontinuous">
            <summary>
            The parameter represents an angle that is discontinuous, ending at bounds or infinity.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.ParameterType.AngleContinuous">
            <summary>
            The parameter represents an angle that is continuous and normalized to the wrap-around
            interval [0, 360]. Limits restrict a range on this wrap-around interval. Both limits
            must be specified to restrict a range.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.KJEPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.KJE.MechanismPreSolveListener">
            <summary>
            Delegate for subscribers to an event that is triggered before the mechanism is solved during
            the usual time-stepping routine.
            </summary>
            <param name="aspect">The mechanism aspect that is about to be solved.</param>
        </member>
        <member name="T:Demo3D.Visuals.KJE.MechanismSolvedListener">
            <summary>
            Delegate for subscribers to an event that is triggered after the mechanism has been solved
            during the usual time-stepping routine.
            </summary>
            <param name="aspect">The mechanism aspect that has been solved.</param>
        </member>
        <member name="T:Demo3D.Visuals.KJE.InteractableChangedListener">
            <summary>
            Delegate for subscribers to an event that is triggered after changes to the mechanism may have
            caused links to have changed their interactable status.
            </summary>
            <param name="aspect">The mechanism aspect.</param>
        </member>
        <member name="T:Demo3D.Visuals.KJE.InteractionListener">
            <summary>
            Delegate for subscribers to an event that is triggered on attempting to interact with a
            kinematic link.
            </summary>
            <param name="aspect">The mechanism aspect.</param>
            <param name="visual">The visual that the user attemted to interact with.</param>
            <param name="interactable">Whether the visual is interactable.</param>
        </member>
        <member name="T:Demo3D.Visuals.KJE.StartInteractionListener">
            <summary>
            Delegate for subscribers to an event that is triggered on attempting to start interacting
            with a kinematic link.
            </summary>
            <param name="aspect">The mechanism aspect.</param>
            <param name="visual">The visual that the user attemted to interact with.</param>
            <param name="interactable">Whether the visual is interactable.</param>
        </member>
        <member name="T:Demo3D.Visuals.KJE.EndInteractionListener">
            <summary>
            Delegate for subscribers to an event that is triggered ending attempts to interact with a
            kinematic link.
            </summary>
            <param name="aspect">The mechanism aspect.</param>
            <param name="visual">The visual that the user attemted to interact with.</param>
            <param name="interactable">Whether the visual is interactable.</param>
        </member>
        <member name="T:Demo3D.Visuals.KJE.MechanismCorruptedException">
            <summary>
            Exception that is thrown when the mechanism is corrupted.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.LinkMode">
            <summary>
            Link modes.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.ParameterMode">
            <summary>
            Parameter modes.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.ParameterMode.ForwardKinematic">
            <summary>
            The parameter is driven by the user either by directly setting the value or through the
            use of a motor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.ParameterMode.InverseKinematic">
            <summary>
            The parameter is determined by the solver in order to satisfy any goals and loop closure
            constraints.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.ParameterMode.Passive">
            <summary>
            The parameter is driven by a user-defined expression in terms of one or more other
            parameters.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.Objective">
            <summary>
            Goal objectives.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.IGoal">
            <summary>
            Goal interface.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.Goal">
            <summary>
            Transient goal.
            </summary>
            <remarks>
            Transient goals are removed from the mechanism after the mechanism has been solved.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.Link">
            <summary>
            The link for the TCP.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.LocalTCP">
            <summary>
            The transform for the TCP local to the link.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.Target">
            <summary>
            The transform for the target local to the mechanism.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.CoordinateSystem">
            <summary>
            The coordinate system for the <see cref="P:Demo3D.Visuals.KJE.Goal.LocalTCP" /> and <see cref="P:Demo3D.Visuals.KJE.Goal.Target" /> matrices.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.Objective">
            <summary>
            The objective for the goal.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.Locked">
            <summary>
            Whether the goal should be solved using only the first joint up the chain from the link.
            </summary>
            <remarks>
            The solver may be unable to solve the loop closure constraints if this property is set
            to true. It should generally only be used for mechanisms without any closed loops.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.Persistent">
            <summary>
            Whether the goal should persist until explicitly removed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.Goal.Render">
            <summary>
            Whether the goal should be rendered.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Goal.OnAdded(Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Called when the goal is added to a mechanism.
            </summary>
            <param name="mechanism">The mechanism that the goal was added to.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Goal.OnRemoved(Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Called when the goal is removed from a mechanism.
            </summary>
            <param name="mechanism">The mechanism that the goal was removed from.</param>
        </member>
        <member name="T:Demo3D.Visuals.KJE.PersistentGoal">
            <summary>
            Persistent goal.
            </summary>
            <remarks>
            Persistent goals remain added to one or more mechanisms until explicitly removed from those
            mechanisms (or until the persistent goal has been disposed).
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.KJE.PersistentGoal.mechanisms">
            <summary>
            The list of mechanisms to which the goal has been added.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.Link">
            <summary>
            The link for the TCP.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.LocalTCP">
            <summary>
            The transform for the TCP local to the link.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.Target">
            <summary>
            The transform for the target local to the mechanism.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.CoordinateSystem">
            <summary>
            The coordinate system for the <see cref="P:Demo3D.Visuals.KJE.PersistentGoal.LocalTCP" /> and <see cref="P:Demo3D.Visuals.KJE.PersistentGoal.Target" /> matrices.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.Objective">
            <summary>
            The objective for the goal.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.Locked">
            <summary>
            Whether the goal should be solved using only the first joint up the chain from the link.
            </summary>
            <remarks>
            The solver may be unable to solve the loop closure constraints if this property is set
            to true. It should generally only be used for mechanisms without any closed loops.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.Persistent">
            <summary>
            Whether the goal should persist until explicitly removed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.PersistentGoal.Render">
            <summary>
            Whether the goal should be rendered.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.PersistentGoal.OnAdded(Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Called when the goal is added to a mechanism.
            </summary>
            <param name="mechanism">The mechanism that the goal was added to.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.PersistentGoal.OnRemoved(Demo3D.Visuals.KJE.MechanismAspect)">
            <summary>
            Called when the goal is removed from a mechanism.
            </summary>
            <param name="mechanism">The mechanism that the goal was removed from.</param>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.mechanism">
            <summary>
            The KJE mechanism.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.links">
            <summary>
            Bijective mapping from Demo3D links to KJE links.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.joints">
            <summary>
            Bijective mapping from Demo3D joints to KJE joints.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.solverType">
            <summary>
            The type of solver.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.solverSettings">
            <summary>
            The solver settings.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.coordinateSystem">
            <summary>
            The coordinate system for the mechanism.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.subscriptions">
            <summary>
            The set of visuals that we are subscribed to receive events from.
            </summary>
            <remarks>
            When we subscribe for events, we subscribe for events on a particular
            VisualEventsAspect. That aspect may change (may be removed from the visual) and so we
            also need to store the particular VisualEventsAspect that we subscribed for events on.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.goals">
            <summary>
            The goals to be solved. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.cachedVisuals">
            <summary>
            The cached visuals for the links.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.cachedInitialMatrices">
            <summary>
            The cached initial matrices local to the link.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.cachedOrderedVisuals">
            <summary>
            The cached list of visuals for all the links, ordered by hierarchy so that ancestors
            come before descendants.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.worldToMechanismMatrix">
            <summary>
            The world-to-mechanism matrix.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.added">
            <summary>
            Whether the aspect has been added to an aspect container.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.disableRebuildCount">
            <summary>
            The number of times that rebuild has been disabled.
            </summary>
            <remarks>
            A value of n indicates that rebuild has been disabled n times. When zero rebuild is
            enabled. This allows for batch edits without the inefficiency of rebuilding after
            setting every property.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.drawer">
            <summary>
            Debug drawer.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.render">
            <summary>
            Whether the mechanism should be rendered.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.built">
            <summary>
            Whether the mechanism was built since the previous solve.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.mechanismPreSolveListener">
            <summary>
            Called before the mechanism is solved.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.mechanismSolvedListener">
            <summary>
            Called after the mechanism has been solved.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.interactableChangedListener">
            <summary>
            Called after links may have changed their interactable status.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.interactionListener">
            <summary>
            Called after attempting to interact with a link.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.startInteractionListener">
            <summary>
            Called after attempting to begin interacting with a link.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.MechanismAspect.endInteractionListener">
            <summary>
            Called after ending an attempted interaction with a link.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.Document">
            <summary>
            The document in which the mechanism aspect lives.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.App">
            <summary>
            The application.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.Manager">
            <summary>
            The mechanism manager.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.RebuildDisabled">
            <summary>
            Whether rebuilding is disabled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.Render">
            <summary>
            Whether the mechanism should be rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.SolverType">
            <summary>
            The solver type.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.SolverSettings">
            <summary>
            Solver settings.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.CoordinateSystem">
            <summary>
            The coordinate system to use internally.
            </summary>
            <remarks>
            Mechanism can use a different coordinate system internally to that used by Demo3D. This
            allows mechanism to function in the same way as the CAD software in whcih they were
            designed.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.Links">
            <summary>
            The list of links that compose the mechanism.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.Joints">
            <summary>
            The list of joints that compose the mechanism.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.MechanismAspect.IsDisposing">
            <summary>
            Whether the aspect is currently being disposed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.KJE.MechanismAspect.OnMechanismPreSolve">
            <summary>
            Event triggered just before the mechanism is solved during the usual time-stepping
            routine.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.KJE.MechanismAspect.OnMechanismSolved">
            <summary>
            Event triggered after the mechanism has been solved during the usual time-stepping
            routine.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.KJE.MechanismAspect.OnInteractableChanged">
            <summary>
            Event triggered after links may have changed their interactable status.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.KJE.MechanismAspect.OnInteraction">
            <summary>
            Event triggered after attempting to interact with a link.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.KJE.MechanismAspect.OnStartInteraction">
            <summary>
            Event triggered after attempting to start interacting with a link.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.KJE.MechanismAspect.OnEndInteraction">
            <summary>
            Event triggered after ending attempting to interact with a link.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.UpdateSolverType(Demo3D.Visuals.KJE.SolverType)">
            <summary>
            Updates the solver type and creates the appropriate solver along with the parameters for
            the solver.
            </summary>
            <param name="solverType">The new solver type.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.CreateSolverSettings">
            <summary>
            Creates the solver settings for the current solver type.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.TriggerOnMechanismSolved">
            <summary>
            Triggers the <see cref="E:Demo3D.Visuals.KJE.MechanismAspect.OnMechanismSolved" /> event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.TriggerOnMechanismPreSolve">
            <summary>
            Triggers the <see cref="E:Demo3D.Visuals.KJE.MechanismAspect.OnMechanismPreSolve" /> event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.TriggerOnInteractableChanged">
            <summary>
            Triggers the <see cref="E:Demo3D.Visuals.KJE.MechanismAspect.OnInteractableChanged" /> event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.TriggerOnInteraction(Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Triggers the <see cref="E:Demo3D.Visuals.KJE.MechanismAspect.OnInteraction" /> event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.TriggerOnStartInteraction(Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Triggers the <see cref="E:Demo3D.Visuals.KJE.MechanismAspect.OnStartInteraction" /> event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.TriggerOnEndInteraction(Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Triggers the <see cref="E:Demo3D.Visuals.KJE.MechanismAspect.OnEndInteraction" /> event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Clear">
            <summary>
            Clears the mechanism, removing all joints and links.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.App_ToolRendered(System.Object,Demo3D.Visuals.ToolRenderedEventArgs)">
            <summary>
            Render callback.
            </summary>
            <param name="sender">The application.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.RenderGoals">
            <summary>
            Renders any goals currently added to the mechanism.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnReset">
            <summary>
            Resets the mechanism by resetting all links, joints and animators.
            </summary>
            <remarks>
            All links and joints are reset to their initial positions.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnInitialize">
            <summary>
            Called when the model is initialized.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.CheckJointNames">
            <summary>
            Looks for any joints with invalid, reserved or duplicate names.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.CheckPhysics">
            <summary>
            Looks for any static or dynamic physics on any visuals moved by the mechanism and logs
            warnings.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Enable">
            <summary>
            Enables the mechanism.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Disable">
            <summary>
            Disables the mechanism.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnAssigned">
            <summary>
            Called after the mechanism aspect has been assigned to a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnAdded">
            <summary>
            Called after the mechanism aspect has been added to a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnRemoved">
            <summary>
            Called after the mechanism aspect has been removed from a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnEnabled">
            <summary>
            Called when the user requests to enable the aspect.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnDisabled">
            <summary>
            Called when the user requests to disable the aspect.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Solution(Demo3D.Visuals.KJE.Goal[],Demo3D.Visuals.KJE.KinematicJoint[],System.Collections.Generic.IDictionary{Demo3D.Visuals.KJE.KinematicJoint,System.Double[]},System.Collections.Generic.IDictionary{Demo3D.Visuals.KJE.KinematicJoint,System.Double[]},System.Collections.Generic.IDictionary{Demo3D.Visuals.KJE.KinematicLink,Microsoft.DirectX.Matrix},System.Collections.Generic.IDictionary{Demo3D.Visuals.KJE.KinematicJoint,Microsoft.DirectX.Matrix})">
            <summary>
            Solves the mechanism without applying the solution.
            </summary>
            <param name="goals">The optional array of goals to solve.</param>
            <param name="subset">The optional array of joints to solve.</param>
            <param name="initial">The optional initial guess to the solution.</param>
            <param name="solution">The optional solution for all joint parameters (to be populated).</param>
            <param name="linkMatrices">The optional dictionary into which the solved link matrices should be stored.</param>
            <param name="jointMatrices">The optional dictionary into which the solved joint matrices should be stored.</param>
            <returns>The solution that the solver terminated with.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Solve">
            <summary>
            Solves and applies the solution.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Solve(System.Boolean)">
            <summary>
            Solves and applies the solution.
            </summary>
            <param name="sync">Whether to sync from KJE to Demo3D after solving.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Solve(Demo3D.Visuals.KJE.IGoal[])">
            <summary>
            Solves with the additional specified goals and applies the solution.
            </summary>
            <param name="goals">The additional goals to satisfy.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Solve(Demo3D.Visuals.KJE.IGoal[],System.Boolean)">
            <summary>
            Solves with the additional specified goals.
            </summary>
            <param name="goals">The additional goals to satisfy.</param>
            <param name="sync">Whether to sync from KJE to Demo3D after solving.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Solve(Demo3D.Visuals.KJE.IGoal[],Demo3D.Visuals.KJE.KinematicJoint[])">
            <summary>
            Solves the specified subset of joints with the additional specified goals.
            </summary>
            <param name="goals">The additional goals to satisfy.</param>
            <param name="joints">The joints to solve.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Solve(Demo3D.Visuals.KJE.IGoal[],Demo3D.Visuals.KJE.KinematicJoint[],System.Boolean)">
            <summary>
            Solves the specified subset of joints with the additional specified goals.
            </summary>
            <param name="goals">The additional goals to satisfy.</param>
            <param name="joints">The joints to solve.</param>
            <param name="sync">Whether to sync from KJE to Demo3D after solving.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Step(System.Boolean,System.Boolean)">
            <summary>
            Steps the mechanism.
            </summary>
            <remarks>
            This function will return false if a solve was not required.
            </remarks>
            <param name="sync">Whether to sync from KJE to Demo3D after solving.</param>
            <param name="updateFromMotors">Whether forward kinematic perameter values should be updated from their motors.</param>
            <returns>Whether the mechanism was solved.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.PreStep">
            <summary>
            Prepares the mechanism for manual stepping.
            </summary>
            <remarks>
            This function must be called once before <see cref="M:Demo3D.Visuals.KJE.MechanismAspect.Step" /> is called.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Step">
            <summary>
            Solves the mechanism and applies solutions, moving any visuals.
            </summary>
            <remarks>
            Forward kinematic parameters are not updated from motors.
            You must call <see cref="M:Demo3D.Visuals.KJE.MechanismAspect.PreStep" /> once before calling this function.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Rebuild">
            <summary>
            Tears down and rebuilds the internal KJE mechanism.
            </summary>
            <remarks>
            The internal KJE mechanism must be rebuilt when you add or remove any joints or links,
            or when you change the mode of any parameters. This function regenerates the kinematic
            graph. The mechanism is rebuilt automatically when the model is reset.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Demolish">
            <summary>
            Tears down any existing KJE mechanism.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Build">
            <summary>
            Builds the KJE mechanism if one does not already exist.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.IsGrounded">
            <summary>
            Checks whether a mechanism is empty or grounded at one or more joints.
            </summary>
            <returns>True if the mechanism is grounded (or empty), false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.UpdateExpressionParameterReferences">
            <summary>
            When parameter expressions are created, the native joints may not have been created.
            This function recurses down the expression tree, setting the native joints for any
            parameter expressions.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.UpdateExpressionParameterReferences(KJE.Expression)">
            <summary>
            When parameter expressions are created, the native joints may not have been created.
            This function recurses down the expression tree, setting the native joints for any
            parameter expressions.
            </summary>
            <param name="expression">The expression.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Interactable(Demo3D.Visuals.KJE.KinematicLink)">
            <summary>
            Whether the specified link can be interacted with through inverse kinematics.
            </summary>
            <remarks>
            A link can be interacted with if it is operating in <see cref="F:Demo3D.Visuals.KJE.LinkMode.Kinematic" />
            mode and if there exists no path from a grounded link to the link with all joints having
            all parameters operating in <see cref="F:Demo3D.Visuals.KJE.ParameterMode.ForwardKinematic" /> mode.
            </remarks>
            <param name="kinematicLink">The link.</param>
            <returns>True if the link can be interacted with through inverse kinematics, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.SubscribeForInteractions">
            <summary>
            Subscribes to be notified of any interactions on all of the descendants of the mechanism
            visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.UnsubscribeForInteractions">
            <summary>
            Unsubscribes to be notified of any interactions on all of the descendants of the
            mechanism visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.SubscribeForInteractions(Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Subscribes to be notified of any interactions on the specified visual.
            </summary>
            <param name="visual">The visual for which to subscribe for interaction events.</param>
            <param name="interactable">Whether the visual is interactable.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.UnsubscribeForInteractions(Demo3D.Visuals.Visual)">
            <summary>
            Unsubscribes to be notified of any interactions on the specified visual.
            </summary>
            <param name="visual">The visual for which to unsubscribe for interaction events.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnInteract_NativeListeners(Demo3D.Visuals.Visual,Demo3D.Visuals.InteractionInfo)">
            <summary>
            Callback function to receive interaction events.
            </summary>
            <param name="sender">The visual that was interacted with.</param>
            <param name="info">The details of the interaction that was made.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnStartInteraction_NativeListeners(Demo3D.Visuals.Visual,Demo3D.Visuals.InteractionInfo)">
            <summary>
            Callback function to receive start interaction events.
            </summary>
            <param name="sender">The visual that we are starting to interact with.</param>
            <param name="info">The details of the initial interaction that was made.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnEndInteraction_NativeListeners(Demo3D.Visuals.Visual,Demo3D.Visuals.InteractionInfo)">
            <summary>
            Callback function to receive end interaction events.
            </summary>
            <param name="sender">The visual that we are stopping to interact with.</param>
            <param name="info">The details of the final interaction that was made.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.OnDeleted_NativeListeners(Demo3D.Visuals.Visual)">
            <summary>
            Callback function to receive visual deleted events.
            </summary>
            <param name="sender">The visual that is being deleted.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.AddGoal(Demo3D.Visuals.KJE.IGoal)">
            <summary>
            Adds a goal to the mechanism to be solved.
            </summary>
            <param name="goal">The goal.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.RemoveGoal(Demo3D.Visuals.KJE.IGoal)">
            <summary>
            Removes a goal from the mechanism.
            </summary>
            <param name="goal">The goal.</param>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.ClearGoals">
            <summary>
            Removes all goals from the mechanism.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.SyncFromKJE(System.Boolean)">
            <summary>
            Updates all the Demo3D kinematic joints and links from KJE.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.SyncToKJE(System.Boolean)">
            <summary>
            Updates all the KJE joints and links from Demo3D.
            </summary>
            <returns>Whether a solve is required.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.RegenerateCaches">
            <summary>
            Regenerates caches used for moving visuals to their new (solved) locations.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.UpdateForwardKinematicParametersFromMotors">
            <summary>
            Updates all forward kinematic parameters with the values from their motors.
            </summary>
            <remarks>
            This is performed prior to solving.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Contains(Demo3D.Visuals.KJE.KinematicLink)">
            <summary>
            Determines whether the mechanism contains the specified link.
            </summary>
            <param name="link">The link.</param>
            <returns>True if the mechanism contains the link, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.Contains(Demo3D.Visuals.KJE.KinematicJoint)">
            <summary>
            Determines whether the mechanism contains the specified joint.
            </summary>
            <param name="joint">The joint.</param>
            <returns>True if the mechanism contains the joint, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.FindJoint(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Attempts to find the joints that connects the specified base visual to the specified
            effector visual.
            </summary>
            <param name="visual">The effector visual.</param>
            <param name="baseVisual">The base visual (specify null for ground).</param>
            <returns>The joint bound to links that contain the specified visuals.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.FindCreateJoint``1(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Attempts to find the joint that connects the specified base visual to the specified
            effector visual. If no existing joint exists then attempts to create a new joint of the
            specified type bound to links containing the specified visuals.
            </summary>
            <typeparam name="T">The type of kinematic joint.</typeparam>
            <param name="visual">The effector visual.</param>
            <param name="baseVisual">The base visual (specify null for ground).</param>
            <returns>Existing or new joint bound to links that contain the specified visuals.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.FindLink(Demo3D.Visuals.Visual)">
            <summary>
            Attempts to find the link that contains the specified visual.
            </summary>
            <param name="visual">The visual (specify null for ground).</param>
            <returns>The link that contains the visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.FindCreateLink(Demo3D.Visuals.Visual)">
            <summary>
            Attempts to find the link that contains the specified visual. If no existing link exists
            then attempts to create a new link containing the specified visual.
            </summary>
            <param name="visual">The visual (specify null for ground).</param>
            <returns>Existing or new link that contains the visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.PurgeLinks">
            <summary>
            Removes all unreferenced links.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.MechanismAspect.FindCreateGroundedLink">
            <summary>
            Finds or creates a grounded link.
            </summary>
            <returns>The grounded link.</returns>
        </member>
        <member name="T:Demo3D.Visuals.KJE.SolverType">
            <summary>
            Inverse kinematic solvers.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.SolverType.None">
            <summary>
            No solver (any inverse kinematic parameters are not solved).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.SolverType.LBFGSB">
            <summary>
            Limited Memory Bounded Broyden-Fletcher-Goldfarb-Shanno (L-BFGS-B) Quasi-Newton solver.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.SolverType.SLSQP">
            <summary>
            Sequential Least-Squares Quadratic Programming (SLSQP) Quasi-Newton solver.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.SolverType.HPSQP">
            <summary>
            High Performance Sequantial Quadratic Programming (HPSQP) Quasi-Newton solver.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.PenaltyProfile">
            <summary>
            Penalty multiple profiles.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.PenaltyProfile.Linear">
            <summary>
            The penalty multiple will be ramped up by linearly interpolating between the starting
            and ending penalty multiples.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.PenaltyProfile.Quadratic">
            <summary>
            The penalty multiple will be ramped up by quadratically interpolating between the
            starting and ending penalty multiples.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.PenaltyProfile.Cubic">
            <summary>
            The penalty multiple will be ramped up by cubically interpolating between the starting
            and ending penalty multiples.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.PenaltyProfile.Quartic">
            <summary>
            The penalty multiple will be ramped up by quartically interpolating between the
            starting and ending penalty multiples.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.PenaltyProfile.Quintic">
            <summary>
            The penalty multiple will be ramped up by quintically interpolating between the starting
            and ending penalty multiples.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.DifferentiationMode">
            <summary>
            Differentiation methods.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.KJE.DifferentiationMode.Numeric">
            <summary>
            Numerical differentiation approximates partial derivatives by evaluating the penalty
            function one or more times for each variable and using finite differences approximation.
            </summary>
            <remarks>
            This method is robust and resilient to singularities, but can be slow for mechanisms
            containing many inverse kinematic parameters. The finite differences step must be chosen
            carefully so as to obtain gradients to a sufficient accuracy.
            
            The time complexity of this method is O(n^2), where n is the number of inverse kinematic
            parameters. The O(n) penalty function evaluations are performed concurrently over
            multiple threads.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.KJE.DifferentiationMode.ComplexStep">
            <summary>
            Complex-step differentiation obtains partial derivatives to floating point precision by
            evaluating the penalty function once for each variable on complex-valued numbers.
            </summary>
            <remarks>
            This method is generally unable to cope with singularities. Whist every effort is made
            to avoid singularities in the penalty function, it is possible that this method could
            fail.
            
            The time complexity of this method is O(n^2), where n is the number of inverse kinematic
            parameters. The O(n) penalty function evaluations are performed concurrently over
            multiple threads.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.KJE.DifferentiationMode.AutomaticReverseMode">
            <summary>
            Reverse mode automatic differentiation obtains partial derivatives to floating point
            precision by evaluating the penalty function once on a special expression type.
            </summary>
            <remarks>
            This method is generally unable to cope with singularities. Whist every effort is made
            to avoid singularities in the penalty function, it is possible that this method could
            fail.
            
            The time complexity of this method is O(n), where n is the number of inverse kinematic
            parameters. This method can be orders of magnitude faster than other methods for
            mechanisms with many inverse kinematic parameters.
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.KJE.SolverSettings">
            <summary>
            Common solver settings.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings">
            <summary>
            Solver settings for Quasi-Newton methods.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.ValueTarget">
            <summary>
            The target/optimum value for the objective function.
            </summary>
            <remarks>
            The solver will terminate when the objective function value is within
            <see cref="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.ValueEpsilon" /> of this value.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.ValueEpsilon">
            <summary>
            The epsilon value that specifies the minimum change in objective function value between
            iterations for the solver to continue.
            </summary>
            <remarks>
            The solver will terminate when the change in objective function value between iterations
            does not exceed this value.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.GradientEpsilon">
            <summary>
            The epsilon value that specifies the minimum change in the gradient between iterations
            for the solver to continue.
            </summary>
            <remarks>
            The solver will terminate when the change in the length of the gradient vector between
            iterations does not exceed this value.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.VariableEpsilon">
            <summary>
            The epsilon value that specifies the minuimum change in the variables between iterations
            for the solver to continue.
            </summary>
            <remarks>
            The solver will terminate when the length of the change in the variable vector between
            iterations does not exceed this value.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.MaximumInnerIterations">
            <summary>
            The maximum number of inner iterations to perform.
            </summary>
            <remarks>
            Inner iterations are used to find the minimum of the penalty function for a given
            penalty multiple. If the solver is unable to converge to a solution then you may need to
            increase the number of inner iterations.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.OuterIterations">
            <summary>
            The number of solves to perform, each time scaling the penalty multiple.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.DifferentiationMode">
            <summary>
            The method to use for evaluating gradients.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.PenaltyProfile">
            <summary>
            The penalty multiple profile to use.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.PenaltyMultipleStart">
            <summary>
            The penalty multiple to use for the first outer iteration in cases where more than one
            outer iteration is being performed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.KJE.QuasiNewtonSolverSettings.PenaltyMultipleEnd">
            <summary>
            The penalty multiple to use for the last outer iteration.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.KJE.Utilities.SignedAngularDistanceToTarget(System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Determines the signed angle to move from the specified <paramref name="angle" /> to as
            close to the specified <paramref name="target" /> as possible whilst satisfying the
            limits.
            </summary>
            <remarks>
            If the limits are invalid (infinite or NaN) then no limits is imposed and the distance
            is the shortest distance between the angle and the target.
            
            If the angle provided violates the limits then the distance is the distance between the
            angle and the target (or the closest limit to the target if the target violates the
            limits) by moving in the direction of the closest limit to the current angle.
            
            If the angle provided satisfies the limits then the distance is the distance between the
            angle and the target (or the closest limit to the target if the target violates the
            limits) in the direction that avoids violating the limits.
            
            A positive distance returned indicates that the movement should be in the anti-clockwise
            direction. A negative distance indicates that the movement should be in the clockwise
            direction.
            </remarks>
            <param name="angle">The current angle in radians (does not need to be normalized).</param>
            <param name="target">The target angle in radians (does not need to be normalized).</param>
            <param name="upper">The upper limit in radians (does not need to be normalized).</param>
            <param name="lower">The lower limit in radians (does not need to be normalized).</param>
            <param name="directionHint">Hint as to the direction of the motor (used if the target is invalid).</param>
            <returns>The signed distance to move from the angle to as close to the target as possible whilst avoiding limits.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PathConversion">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.LayerReference">
            <summary>
            A weak, serializable, immutable reference to a Layer.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LayerReference.name">
            <summary>
            Name of the layer that we are referencing.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.LayerReference.Name">
            <summary>
            The name of the layer being referenced.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.LayerReference.AsParent">
            <summary>
            Whether the layer being referenced is the same as the parent visual's layer.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="name">The name of the layer to reference.</param>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.#ctor(Demo3D.Visuals.Layer)">
            <summary>
            Constructor.
            </summary>
            <param name="layer">The layer to reference.</param>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.op_Explicit(System.String)~Demo3D.Visuals.LayerReference">
            <summary>
            Explicit conversion from string (layer name).
            </summary>
            <param name="name">The name of the layer to reference.</param>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.op_Explicit(Demo3D.Visuals.Layer)~Demo3D.Visuals.LayerReference">
            <summary>
            Explicit conversion from a layer.
            </summary>
            <param name="layer">The layer to reference.</param>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.Clone">
            <summary>
            Clones the LayerReference, returning the copy.
            </summary>
            <returns>Copy of this layer reference.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.ToString">
            <summary>
            String representation of the layer being referenced.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.op_Equality(Demo3D.Visuals.LayerReference,Demo3D.Visuals.LayerReference)">
            <summary>
            Whether the two specified layer references reference the same layer.
            </summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>True if the layer references reference the same layer, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.op_Inequality(Demo3D.Visuals.LayerReference,Demo3D.Visuals.LayerReference)">
            <summary>
            Whether the two specified layer references reference different layers.
            </summary>
            <param name="a">The left operand.</param>
            <param name="b">The right operand.</param>
            <returns>True if the layer references reference different layers, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.Equals(System.Object)">
            <summary>
            Whether the specified layer reference references the same layer as this layer reference.
            </summary>
            <param name="obj">The other layer reference to compare.</param>
            <returns>True if the specified layer reference references the same layer as this one, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LayerReference.GetHashCode">
            <summary>
            Generates a hash code.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LayerLibrary.MergeFrom(Demo3D.Visuals.LayerLibrary)">
            <summary>
            Merge the meshes from the supplied library into this library.
            </summary>
            <param name="layerLib"></param>
        </member>
        <member name="T:Demo3D.Visuals.LiftProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.LiftVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LiftVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.LightProperties">
            <summary>
            Summary description for Light.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.LightVisual">
            <summary>
            Class encapsulating the behavior of a light visual (spot, point and directional).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LightVisual.DirectionalOuterAngle">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.LightVisual.PointSphereRadius">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.LightVisual.ConeLength">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LightVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.IncludeInSelectAll">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Materials">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LightVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.IsVisible">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LightVisual.MenuEnableDisableLight">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LightVisual.MenuChangeLightType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Ambient">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Specular">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Position">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Light.Position.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Direction">
            <summary>Retrieves or sets the direction in which the light is pointing in world space.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Direction4">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Enabled">
            <summary>If True then this joint is powered by a motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.CastsShadows">
            <summary>Shows whether the light casts shadows or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.LightType">
            <summary>One of Directional, Point or Spot. Directional is equivalent to using a point light source at an infinite distance.  Point has a position in space and radiates light in all directions. Spot is similar to a point light, except that the area of illumination is limited to a cone. A Spot light has a direction and several other parameters that determine the shape of the cone it produces</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.Diffuse">
            <summary>Retrieves or sets the diffuse color emitted by the light. </summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.AttenuationRange">
            <summary>Retrieves or sets the distance beyond which the light has no effect.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.AttenuationConstant">
            <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.AttenuationLinear">
            <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.AttenuationQuadratic">
            <summary>Retrieves or sets a value that specifies how light intensity changes over distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.SpotlightFalloff">
            <summary>Retrieves or sets the decrease in illumination between a spotlight's inner cone (the angle specified by InnerConeAngle) and the outer edge of the outer cone (the angle specified by OuterConeAngle).</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.SpotlightInnerAngle">
            <summary>Retrieves or sets the angle, in degrees, of a spotlight's inner cone; that is, the fully illuminated spotlight cone.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LightVisual.SpotlightOuterAngle">
            <summary>Retrieves or sets the angle, in degrees, that defines the outer edge of a spotlight's outer cone.</summary>
        </member>
        <member name="T:Demo3D.Visuals.LoadAspect">
            <summary>Loads physics group.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadAspect.DeleteOnReset">
            <summary>Whether the load should be deleted on reset.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadAspect.DeleteWhenFloorHit">
            <summary>Whether the load should be deleted if it contacts the floor.</summary>
        </member>
        <member name="T:Demo3D.Visuals.ILoadAspectManager">
            <summary>
            An interface for any aspect that is to manage a LoadAspect.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ILoadAspectManager.DeleteWhenFloorHit">
            <summary>Whether the load should be deleted if it contacts the floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ILoadAspectManager.DeleteOnReset">
            <summary>Whether the load should be deleted on reset.</summary>
        </member>
        <member name="T:Demo3D.Visuals.LoadCreatorProperties">
            <summary>
            Parameters for a load creation point.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorProperties.centerLine">
            <summary>
            Percentage offset from center line of conveyor (50% by default)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorProperties.centerLineVariability">
            <summary>
            Random adjustment to centerLineOffset (0.0 for none)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorProperties.position">
            <summary>
            Distance from start of owning conveyor, if set
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorProperties.congestionZone">
            <summary>
            Enable a built in congestion zone which is the width of the conveyor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorProperties.initialHeight">
            <summary>
            Initial height of the load above top of roller.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorProperties.attachToConveyor">
            <summary>
            Whether or not to attach to a conveyor
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorProperties.initialConveyorVelocity">
            <summary>
            Whether or not to attach to a conveyor
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.LoadCreatorVisual">
            <summary>
            Introduce loads into the Events according to a plan (number and frequency).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorVisual.releaseEnabledBinding">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.FactoryImages">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Factories">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.FactoryResources">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.SetFactories(System.Windows.Forms.ImageList,System.Collections.ArrayList,Demo3D.Visuals.SharedResources)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.SortFactories(System.Windows.Forms.ImageList,System.Collections.ArrayList)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.Reset">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.EditLoadCreationProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.CalculateTimeToNextRelease(System.Boolean)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Generator">
            <summary>
            Allow the random number generator for load creation to be overridden.
            This value is not saved to disk and must be set using script when needed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.#ctor">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.Dispose">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.SetProperties(System.Object)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Props">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.DefaultFactory(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.GetMeshKey">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.CreateNonCachedMeshes">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Args">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.OrderLoad">
            <summary>
            Place an order load from a load creator.
            The order may not be satisfied straight away so a future result value is returned.
            </summary>
            <returns>Future result value for the ordered load.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.CreateLoadVisual(Demo3D.Visuals.Visual)">
            <summary>
            Create a new load based on an existing load.
            </summary>
            <param name="templateLoad">Existing template load.</param>
            <returns>New load created by cloning the template load.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.CreateLoadVisual(Demo3D.Visuals.VisualFactory)">
            <summary>
            Create a new load based on a load factory (usually from a catalog).
            </summary>
            <param name="factory">Visual factory to create load from.</param>
            <returns>New load based on the visual factory.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.CanCreateLoad">
            <summary>
            Can a load currently be created (i.e. the congestion zone is clear).
            </summary>
            <returns>true if a load can be created now, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.ConfigureLoad(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.NotifyOnLoadCreated(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.InternalCreateLoadVisual(Demo3D.Visuals.VisualFactory,Demo3D.Visuals.Visual)">
            <summary>
            Create load using factory or given load, can return null if load cannot be created, or
            if the OnLoadCreated deletes original load, it can return a disposed object
            </summary>
            <param name="factory">Factory to use (overrides loadObj)</param>
            <param name="loadObj">Already created object (overridden by factory)</param>
            <returns>Created load, which could be null or disposed</returns>
        </member>
        <member name="F:Demo3D.Visuals.LoadCreatorVisual.CongestionZoneName">
            <summary>
            Expected name of CongestionZone child visual on load creator.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.StartZoneCongested">
            <summary>
            True if the load creation zone isn't set or it's congested.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.IsPhysicsDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Connected">
            <summary>
            True if the load creator is connected to a conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.AttachDirection">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.AttachType">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.DetachFromVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.AttachedVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.AttachedConveyor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.ParentToConveyor(Demo3D.Visuals.ConveyorVisual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.AttachToProperties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.Initialize">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.Reparent(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.SetupListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.GetToolTip(Microsoft.DirectX.Vector3,Demo3D.Visuals.ExprContext)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.EnableDisableLoadCreation">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Ports">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.Scan">
            <summary>
            No accept or process, just deliver for load creators.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.SetScanNeededOnAttached">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.LoadCreatorVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Scheduler">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.InDelay">
            <summary>Indicates that the load creator is currently in a delay period. See DelayDur and DelayRate properties.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.DeleteLoadsWhenFloorHit">
            <summary>If this is true and load created touches the floor at any time it will be deleted after the number of seconds defined by the 'Delete Loads After' setting for the project. If this is false then the load specific setting will be used.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.SequenceNumber">
            <summary>The sequence number of the next load to be created. The sequence number of first load to be created is 0.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.ReleaseEnabled">
            <summary>If true then new loads will be created. If false then no loads will be created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.ReleaseStrategy">
            <summary>If Sequence then loads will be created in the sequence defined in the Loads list. If Distribution then loads will be picked at random from the loads list and created in a random order using a uniform distribution.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.RetryCreateAfter">
            <summary>If a load can't be created for whatever reason then wait for this number of seconds and then try to recreate the load again.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.FirstLoadAfter">
            <summary>Wait this number of seconds before the first load is created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.ReleaseRate">
            <summary>The number of seconds between the creation of each load.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.ReleaseRateVariability">
            <summary>A random adjustment to the release time to the next load (Release Interval +/- this value).</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.ItemsVisual">
            <summary>When set this will get the Items list of LoadCreatorItem objects from the specified property on the specified visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Items">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.DelayRate">
            <summary>Add a delay to the release of the next load after this number of loads have been created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.DelayRateVariability">
            <summary>A random adjustment to the number of loads to be created before there is a delay (Delay Interval +/- this value).</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.DelayDur">
            <summary>The time in seconds to delay the creation of the next load once the number of loads created has hit the Delay Interval.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.DelayDurVariability">
            <summary>A random adjustment to the load creation delay time once a delay has occurred (Delay Duration +/- this value).</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.LoadRotation">
            ** <exclude /> */ [EditorBrowsable(EditorBrowsableState.Never)] public double Rotation { get { return Props.Rotation; } set { Props.Rotation = value; } }
             <summary>Create new loads rotated around the X, Y and Z axes (angles in degrees).</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.RotationVariability">
            <summary>A random adjustment to the rotation angle that a load is created with.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.OnLoadCreated">
            <summary>Occurs after a load is created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.OnDelayStart">
            <summary>Occurs when the delay period starts.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.OnDelayEnd">
            <summary>Occurs when the delay period ends.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.InitialConveyorVelocity">
            <summary>Whether or not to set the load velocity to be equal to the conveyor velocity in volumetric physics. In linear and planar this happens automatically.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.InitialHeight">
            <summary>The height from which to drop new loads.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.CenterLine">
            <summary>A percentage offset from the center line of a conveyor that the load should be created at. 0% means as far to the left as possible, 100% means as far to the right as possible. 50% follows the center line which is the default.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.CenterLineVariability">
            <summary>A random percentage adjustment to the center line creation point of a load</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.Position">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.CongestionZone">
            <summary>If true the load creator will not create any loads if there is a existing load close to the  load creator</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.AttachToConveyor">
            <summary>If True, then the object will snap itself to the center line of a conveyor surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.OnAttachToVisual">
            <summary>Occurs when a load creator is attached to a conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadCreatorVisual.OnDetachFromVisual">
            <summary>Occurs when a load creator is detached from a conveyor.</summary>
        </member>
        <member name="T:Demo3D.Visuals.LoadProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.LoadObject">
            <summary>
            Container for visual load objects. LoadObjects move on ConveyorVisuals.
            The Render() method queries the EventQueue for the load's current Path displacement,
            and uses the current conveyor's movement surface to update its location and orientation
            in 3D space.
            
            The LoadObject caches its location each time it enters a new conveyor, since the
            result from the movement surface is a transformation from the entry point of the 
            conveyor (displacement == 0).
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshMaterial.ExecuteRuntimeOptimizationCallbacks">
            <summary>
            Let the optimization know that the material is changing
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshMaterial.EqualsIgnoringDiffuse(Demo3D.Visuals.MeshMaterial)">
            <summary>
            Compare all components EXCEPT Diffuse color, for use in batching renderer.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshMaterial.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshMaterial.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DefaultMatrixPropertyAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MatrixStack">
            <summary>
            Defines an origin for some targeted operation, such as vehicle or robot movement. The
            use of a stack model allows offsets to be easily expressed without the need for matrix
            multiplications.
            In addition, objects of varying types may be used to express an origin. For example:
            - Visual
            - Vector3
            - Matrix
            - VisualLocation
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MergeVisualsException">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MergeVisualsException.#ctor(System.String)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MergeVisuals">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MergeVisuals.MergeVisualType">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MergeVisuals.Merge(System.Collections.ArrayList,Demo3D.Visuals.MergeVisuals.MergeVisualType)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MergeVisuals.CreateMeshFromVisuals(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual},System.Boolean,System.Boolean,System.Action{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Creates a new mesh from all the visuals in a list. Note that vertices keep their world position.
            </summary>
            <param name="visuals"></param>
            <param name="includeChildren"></param>
            <param name="recenter"></param>
            <param name="progressAction"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.MergeVisuals.CreateExtendedMaterials(Demo3D.Visuals.MeshMaterial[])">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MeshBuilder">
            <summary>
            Helper class for building meshes. It manages the memory allocation, face
            definition, vertex definition, and default normal calculations.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.Edge.#ctor(Microsoft.DirectX.Vector3[],System.Int32,System.Int32)">
            <summary>
            The adjacent points on edges before P1 and after P2.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddFace(Demo3D.Visuals.MeshBuilder.Face)">
            <summary>
            Add a flat face as a face.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddFace(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Add a flat face with standard normals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddFace(System.Int32,System.Int32,System.Int32)">
            <summary>
            Add a face based using indexes of vertexes already added.
            </summary>
            <param name="i0"></param>
            <param name="i1"></param>
            <param name="i2"></param>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddFace(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Add a flat or curved face defined by normals at the points.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddFace(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Add a flat or curved face defined by normals at the points.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddFace(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Add a flat or curved face defined by normals at the points,
            with additional texture coordinates.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddCountedEdge(Demo3D.Visuals.MeshBuilder.Face,System.Int32,System.Int32,System.Collections.Generic.Dictionary{Demo3D.Visuals.MeshBuilder.Edge,System.Int32})">
            <summary>
            Add the shared edges of a face into a dictionary of edges to count
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AddSharedVertex(Demo3D.Visuals.MeshBuilder.Edge,Microsoft.DirectX.Vector3,System.Collections.Generic.Dictionary{Microsoft.DirectX.Vector3,System.Collections.Generic.List{Demo3D.Visuals.MeshBuilder.Edge}})">
            <summary>
            Add the shared edges of a face into a dictionary of edges to count
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.GetCountedEdges(System.Collections.Generic.List{Demo3D.Visuals.MeshBuilder.Face})">
            <summary>
            Get the edges of faces which aren't shared ready for extrusion.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.Extrude(System.Collections.Generic.List{Demo3D.Visuals.MeshBuilder.Face},Microsoft.DirectX.Matrix[])">
            <summary>
            Extrude a set of faces by transforming the original set of
            faces according to the matrix steps. The matrix is carried
            along with each step, and multipled by each step's matrix.
            No roller-smoothing is done in this version, but it should
            be easy to transplant. 
            This version seems a little more intuitive to set up the
            step matrixes for.
            </summary>
            <param name="faceSet"></param>
            <param name="steps"></param>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.CylinderCap(System.Collections.Generic.List{Microsoft.DirectX.Vector3},System.Boolean,Microsoft.DirectX.Matrix,System.Double)">
            <summary>
            Draws half-cylindrical start/end caps.
            </summary>
            <param name="vertices">The vertices that form the conveyor profile.</param>
            <param name="startCap">Whether to draw a start cap (true) or end cap (false).</param>
            <param name="transform">The transformation matrix to apply to the vertices.</param>
            <param name="textureLengthRatio"></param>
            <returns>The left and right hand side radii for the cylinder.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.ExtrudeEdges(System.Collections.Generic.List{Demo3D.Visuals.MeshBuilder.Edge},Microsoft.DirectX.Matrix[],System.Double,System.Func{Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2},Demo3D.Visuals.CylinderCollisionType,Demo3D.Visuals.CylinderCollisionType)">
            <summary>
            Extrudes the provided list of edges along the array of matrix transform steps and with
            the specified start and end caps.
            </summary>
            <param name="edges">The list of edges to extrude.</param>
            <param name="steps">The list of matrices which defines the path along which to extrude the edges.</param>
            <param name="stepAngle">The angle (in degrees) for each step.</param>
            <param name="mapTextureUV">The co-ordinate mapping of material textures onto the object.</param>
            <param name="startCap">The type of start cap.</param>
            <param name="endCap">The type of end cap.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.MakeDiscFaces(System.Int32,System.Double)">
            <summary>
            Create faces for a disc (circle) that is centred at [0,0,0],
            extending in the X and Y planes, with a radius passed in.
            Extrude this disc along the Z axis to make a cylinder.
            Extrude this disc along the Z axis with a scale factor on the 
            X and Y planes to make a frustum (cone).
            </summary>
            <param name="numFaces"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.MakeDiscEdges(System.Int32,System.Double)">
            <summary>
            Create edges for a disc (circle) that is centred at [0,0,0],
            extending in the X and Y planes, with a radius passed in.
            Extrude this disc along the Z axis to make a cylinder.
            Extrude this disc along the Z axis with a scale factor on the 
            X and Y planes to make a frustum (cone).
            </summary>
            <param name="numEdges"></param>
            <param name="radius"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawCylinder(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Draw a cylinder.
            The length of the cylinder extends along Z axis.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawCylinder(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Double,Demo3D.Visuals.CylinderTextureMode,System.Drawing.Color)">
            <summary>
            Draw a cylinder with a specified texture mode.
            The length of the cylinder extends along Z axis.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawConicalFrustum(System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Initial face is 2*radius wide, and end face is 2*radius*scale wide.
            Length of axis is defined by length.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.MakeRectVerticesYZ(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create points for a 3D rectangle with a constant X (clockwise for DirectX).
            
                                    +Y
            (left, top)              |
                 0--------1          |
                 |        |          |
                 |        | (height) |
                 |        |          |
                 3--------2          |
                  (width)            |
            +Z ----------------------+
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.MakeRectVerticesXZ(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create points for a 3D rectangle with a constant Y (clockwise for DirectX).
            
            +Z
             | (left, front)
             |    0--------1
             |    |        |
             |    |        | depth
             |    |        |
             |    3--------2
             |      width
            -+--------------------- +X
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Extrude rectangular face through a given angle. With innerRadius equal to 0
            and angleInRadians as 2PI, this would draw a cylinder with radius 1.0 and
            length 1.0, that is oriented along the Y axis (top to bottom).
            Used to draw plain (undetailed) curved conveyor sections.
            </summary>
            <param name="yOffset"></param>
            <param name="radius"></param>
            <param name="innerRadius"></param>
            <param name="outerRadius"></param>
            <param name="height"></param>
            <param name="angleInDegrees"></param>
            <param name="stepAngle"></param>
            <param name="elevation"></param>
            <param name="twistAngleInDegrees"></param>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawBox(System.Double,System.Double,System.Double)">
            <summary>
               p4          p5
                 +--------+
                /        /|
            p0 /        / |       (+y)
              +--------+p1|        |
              |   +    |  +p6      | (+z)
              | p7     | /         |/
              |        |/   (-x)---/---(+x)
              +--------+          /|
            p3          p2     (-z)|
                                   |
                                  (-y)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.AngleBetweenVectors(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Calculate the angle between two vectors in radians (must be unit vectors).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.SmoothNormals(System.Single,System.Single)">
            <summary>
            If two points are the same point or close enough and the angles between
            the normals is less than or equal to the smoothAngle then average
            the two normals smoothing the surface. 
            </summary>
            <param name="smoothAngle">Angle to smooth below in degrees</param>
            <param name="epsilon">Distance to consider points adjacent</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawWall(System.Double,System.Double,System.Double,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Wall visual with scalable textures along the inner, outer, side and top faces.
            This mesh has 4 materials: Inner, Outer, Side, Top.
            
               p4              p5                                    Texture
                 +------------+                       t0+-------+ - - - - - - - - - -+t1
                /            /|                         |                            |
            p0 /            / |       (+y)          0,-1+-------+1,-1                |
              +------------+p1|        |                +       |                    |
              |   +        |  +p6      | (+z)           |       |                    |
              |    p7      | /         |/               |       |                    |
              |            |/   (-x)---/---(+x)      0,0+-------+ - - - - - - - - - -+
              +------------+          /|              t3                             t2
            p3              p2     (-z)|                  
                                       |
                                      (-y)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawTexturedBox(System.Double,System.Double,System.Double)">
            <summary>
               p4          p5                    0,0         Texture
                 +--------+                         +-----+-----+
                /        /|                         |           |
            p0 /        / |       (+y)              |           |
              +--------+p1|        |                +           +
              |   +    |  +p6 (0)  | (+z)           |           |
              | p7     | /         |/               |           |
              |        |/   (-x)---/---(+x)         +-----+-----+
              +--------+          /|                             1,1
            p3          p2 (1) (-z)|
                                   |
                                  (-y)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawTexturedBox0(System.Double,System.Double,System.Double)">
            <summary>
               p4          p5                    0,0        Textures
                 +--------+                         +-----+-----+
                /        /|                         |  0  |  1  |
            p0 /        / |       (+y)              | Top | Bot |
              +--------+p1|        |                +-----+-----+
              |   +    |  +p6      | (+z)           |  2  |  3  |
              | p7     | /         |/               |Side1|Side2|
              |        |/   (-x)---/---(+x)         +-----+-----+
              +--------+          /|                             1,1
            p3          p2     (-z)|
                                   |
                                  (-y)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawDVDBox(System.Double,System.Double,System.Double)">
            <summary>
            Egded box is used for drawing DVDs, CDs, Books, Magazines, Product Boxes, etc.
            Anything where the there is a cover texture and a side material/texture.
            The edgeOverlap is how much the edge bleeds onto the top surface,
            think of the black border on a DVD case.
            
               p4          p5                    0,0         Texture
                 +--------+                         +-----+-----+
                /        /|                         |           |
            p0 /        / |       (+y)              |           |
              +--------+p1|        |                +           +
              |   +    |  +p6      | (+z)           |           |
              | p7     | /         |/               |           |
              |        |/   (-x)---/---(+x)         +-----+-----+
              +--------+          /|                             1,1
            p3          p2     (-z)|
                                   |
                                  (-y)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshBuilder.DrawLetterBox(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Egded box is used for drawing Envelopes, Parcels, etc.
            Anything where the there is a top texture, a bottom texture and a side material/texture.
            The edgeOverlap is how much the edge bleeds onto the top surface,
            think of the black border on a DVD case.
            
               p4          p5                    0,0         Texture
                 +--------+                         +-----+-----+
                /        /|                         |           |
            p0 /        / |       (+y)              |           |
              +--------+p1|        |                +           +
              |   +    |  +p6      | (+z)           |           |
              | p7     | /         |/               |           |
              |        |/   (-x)---/---(+x)         +-----+-----+
              +--------+          /|                             1,1
            p3          p2     (-z)|
                                   |
                                  (-y)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PrimitiveBuilder.DrawArc(System.Double,System.Double,System.Double,System.Double,System.Double,System.Drawing.Color)">
            <summary>
            All an
            </summary>
            <param name="radius">Radius of the arc</param>
            <param name="startAngle">Starting angle in degrees</param>
            <param name="endAngle">End angle in degrees</param>
            <param name="segmentAngle">How many degrees to draw with each straight line (11 for AutoCAD)</param>
            <param name="elevation">Difference in Y from start to end of curve</param>
            <param name="color">Color of the line</param>
        </member>
        <member name="T:Demo3D.Visuals.MeshBuilderTooComplex">
            <summary>
            This exception is thrown whenever the meshbuiilder is turned into a real mesh but that
            mesh size (number of vertices/faces) isn't supported.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshGeometry.Compress">
            <summary>
            Generate a new MeshGeometry object that only contains Positions that are used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshGeometry.GenerateNormals">
            <summary>
            Convert smoothing groups into normals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshGeometry.CalculateSurfaceNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Determine the normal to the plane defined by 3 points
            (origin, left and right).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshNode.AddChild(Demo3D.Visuals.MeshNode)">
            <summary>
            Add a child node to this node at the end of the NextSibling linked list.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshNode.CreateVisualFromNodes(System.Collections.Generic.List{Demo3D.Visuals.MeshNode},Demo3D.Visuals.Document,System.String,Demo3D.Visuals.UserScaleDelegate,Demo3D.Visuals.UserFlattenHierarchyDelegate)">
            <summary>
            Used by .3ds, .asc and .stl importers to convert a series of
            normals, vertices and faces into visuals with directx meshes.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshNode.CreateVisualFromNodes(System.Collections.Generic.List{Demo3D.Visuals.MeshNode},Demo3D.Visuals.Document,System.String,Demo3D.Visuals.UserScaleDelegate,Demo3D.Visuals.UserFlattenHierarchyDelegate,Demo3D.Visuals.MeshSettings)">
            <summary>
            Assume texture directory is same as the file.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshNode.CreateVisualFromNodes(System.Collections.Generic.List{Demo3D.Visuals.MeshNode},Demo3D.Visuals.Document,System.String,System.String,Demo3D.Visuals.UserScaleDelegate,Demo3D.Visuals.UserFlattenHierarchyDelegate,Demo3D.Visuals.MeshSettings)">
            <summary>
            Used to import meshes where units are known (VRML and Inventor).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshLibrary.Item(Demo3D.Visuals.MeshReference)">
            <summary>
            Get a mesh given a mesh key.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshLibrary.Item(Demo3D.Visuals.IMesh)">
            <summary>
            Get an existing or new mesh key given a mesh
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshLibrary.MergeFrom(Demo3D.Visuals.MeshLibrary)">
            <summary>
            Merge the meshes from the supplied library into this library.
            </summary>
            <param name="meshLib"></param>
        </member>
        <member name="P:Demo3D.Visuals.MeshLibrary.Count">
            <summary>
            How many meshes are stored in this library?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshLibrary.PersistentCount">
            <summary>
            How many persistent meshes are stored in this library?
            </summary>
            <returns>Number of meshes textures.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshLibrary.Clear">
            <summary>
            Clear out all meshes from the library.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshLoadProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MeshLoadVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshLoadVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshLoadVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.MeshLoadVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.MeshProperties">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshProperties.SerializedCSGTree">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MeshObject">
            <summary>
            Abstract class that holds a 3D mesh object that can be rendered.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MeshObject.ShadowVolume">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.MeshObject.meshMaterials">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.MeshObject.allowMeshVisualCaching">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.AllowMeshVisualCaching">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.MeshObject.UsePickMeshForShadows">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.#ctor">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.#ctor(Demo3D.Visuals.IMesh)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.Mesh">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.SetMesh(Demo3D.Visuals.IMesh)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.SetUncachedMesh(Demo3D.Visuals.IMesh)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.PickMesh">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.SnapMesh">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.SetProperties(System.Object)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.Props">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.ShowControlPoints">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.ShadowMesh">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.IsFloorVisual">
            <summary>
            Is this visual a floor visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.IsVisible">
            <summary>
            There is a mesh and the properties are set to visible.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.GetMeshKey">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.GetPickMeshKey">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.IgnoreCreateMesh">
            <summary>
            Only allow CreateMesh if it's not been created already  
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.CreateMesh">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.CreateMeshes">
            <summary>
            CreateMesh is deliberately not virtual so the cache cannot be overriden.
            Override CreateNonCachedMeshes to create meshes/vertex buffers not
            cached.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.ApplyCSGOperations(Demo3D.Visuals.IMesh)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.CreateNonCachedMeshes">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.PickBase(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.PickExcludingChildrenFromWorldFrustum(Microsoft.DirectX.Plane[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.IsVisibleForLOD(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.RenderOrphaned">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.CalculateVisible(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.RenderWithoutChildren(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.CalculateVisibleShadow(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.RenderShadowWithoutChildren(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.RenderMesh(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.RenderShadowMesh(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.GetRenderContext(Demo3D.Visuals.IDisplay)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.IsCastsShadow">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.IsClipped(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.IsShadowClipped(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.Color">
            <summary>
            The diffuse color of the first mesh material on the mesh object.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.Colors">
            <summary>
            The diffuse colors of the all the mesh materials on the mesh object.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.FadeToColor(System.Drawing.Color,System.Double)">
            <summary>
            Changes the color over a given time.
            This method blocks the current script until the transition is complete.
            </summary>
            <param name="color">The color to transition to.</param>
            <param name="seconds">How long the transition should take to complete in seconds.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FadeToColor" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.FadeToMultipleColors(System.Drawing.Color[],System.Double)">
            <summary>
            Changes the set of material colors over a given time.
            This method blocks the current script until the transition is complete.
            </summary>
            <param name="colors">The colors to transition to.</param>
            <param name="seconds">How long the transition should take to complete in seconds.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshObject.FadeToTransparency(System.Double,System.Double)">
            <summary>Change the transparency over a given time period. Note that this may have no effect if the visual has a texture in its material.</summary>
            <param name="transparency">Transparency to transition to. A value of 0.0 is fully transparent (see-through), and 1.0 is opaque.</param>
            <param name="seconds">How long the transition should take</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FadeToTransparency" />
            </example>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.MeshVolume">
            <summary>
            Volume of material enclosed by the triangular faces in the mesh. This requires a "closed" mesh, that the
            mesh does not have both front and back faces, and any overlap in the mesh will be counted multiple times.
            </summary>
            <returns>Volume in cubic meters</returns>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.Volume">
            <summary>
            Volume of material in shape - for certain shapes (e.g. box, sphere, cylinder) this is overridden and it is accurate
            Otherwise it is the volume enclosed by the triangular faces in the mesh. This requires a "closed" mesh, that the
            mesh does not have both front and back faces, and any overlap in the mesh will be counted multiple times.
            </summary>
            <returns>Volume in cubic meters</returns>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.MeshSurfaceArea">
            <summary>
            Surface area of the triangular faces in the mesh. This requires a "closed" mesh, that the
            mesh does not have both front and back faces, and any overlap in the mesh will be counted multiple times.
            </summary>
            <returns>Area in square meters</returns>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.SurfaceArea">
            <summary>
            Surface area of shape - for certain shapes (e.g. box, sphere, cylinder) this is overridden and it is accurate
            Otherwise it is the surface area of the triangular faces in the mesh. This requires a "closed" mesh, that the
            mesh does not have both front and back faces, and any overlap in the mesh will be counted multiple times.
            </summary>
            <returns>Area in square meters</returns>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.VertexCount">
            <summary>
            Number of vertices in the mesh
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.FaceCount">
            <summary>
            Number of triangular faces in the mesh
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.VisibleFrom">
            <summary>The object becomes visible when it's center is this distance from the camera or greater. The default is 0. Useful for level of detail control.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.VisibleTo">
            <summary>The object becomes invisible when it's center is this distance from the camera or greater. The default is Infinity. Useful for level of detail control, such as hiding small objects like bolts when they get far from the camera.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.ExportAllowed">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.CastsShadow">
            <summary>Shows whether this object casts a shadow or not. Useful for large objects such as warehouses where the walls shouldn't cast shadows on the conveyors.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.Visible">
            <summary>Indicates if the built-in visual is drawn. If not visible, the component will still operate as normal, allowing it to be grouped with an imported graphic for custom component types.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshObject.CSGOperations">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Mesh.CSGOperations.Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshPainter.IMeshPainter">
            <summary>
            Interface for painting colors directly on a Mesh.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.MeshPainterRayDesc,System.Drawing.Color)">
            <summary>
            Paint a point where the world ray intersects the mesh.
            </summary>
            <param name="worldRay">The ray in world coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.MeshPainterRayDesc,System.Func{System.Drawing.Color,System.Drawing.Color})">
            <summary>
            Paint a point where the world ray intersects the mesh.
            </summary>
            <param name="worldRay">The ray in world coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="onPaintAction">The action to execute when painting occurs. The return value of the action will be the color to paint</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintFromLocalRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.MeshPainterRayDesc,System.Drawing.Color)">
            <summary>
            Paint a point where the local ray intersects the mesh.
            </summary>
            <param name="localRay">The ray in local coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintAtWorldPosition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single,System.Drawing.Color)">
            <summary>
            Paint a point at the meshes world position.
            </summary>
            <param name="worldPos">The world position to paint.</param>
            <param name="worldNormal">The normal at the world position.</param>
            <param name="radius">The radius to paint.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintAtPosition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Demo3D.Visuals.MeshPainter.MeshPainterRayDesc,System.Drawing.Color)">
            <summary>
            Paint a point at the meshes local position.
            </summary>
            <param name="localPos">The local position to paint.</param>
            <param name="localNormal">The local normal at the local position.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintAtPosition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Demo3D.Visuals.MeshPainter.MeshPainterRayDesc,System.Func{System.Drawing.Color,System.Drawing.Color})">
            <summary>
            Paint a point at the meshes local position.
            </summary>
            <param name="localPos">The local position to paint.</param>
            <param name="localNormal">The local normal at the local position.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="onPaintAction">The action to execute when painting occurs. The return value of the action will be the color to paint</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintCircleFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.MultiRayMeshPainterCircleDesc,System.Drawing.Color)">
            <summary>
            Paint a circle using a series of rays. This will result in more accurate painting but will perform slower.
            </summary>
            <param name="worldRay">The ray at the center of the circle.</param>
            <param name="desc">The description of the multiray.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.PaintCircleFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.MultiRayMeshPainterCircleDesc,System.Func{System.Drawing.Color,System.Drawing.Color})">
            <summary>
            Paint a circle using a series of rays. This will result in more accurate painting but will perform slower.
            </summary>
            <param name="worldRay">The ray at the center of the circle.</param>
            <param name="desc">The description of the multiray.</param>
            <param name="onPaintAction">The action to execute when painting occurs. The return value of the action will be the color to paint</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.GetColorAtWorldPosition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Get the color at the world position of the mesh.
            </summary>
            <param name="worldPosition">The world position.</param>
            <param name="worldNormal">The normal at the world position.</param>
            <returns>The color at the world position</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.GetColorAtPosition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Get the color at the local position of the mesh.
            </summary>
            <param name="localPosition">The local position.</param>
            <param name="localNormal">The local normal at the local position.</param>
            <returns>The color at the local position</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.GetColorAtWorldRay(Demo3D.Visuals.Ray)">
            <summary>
            Get the color at the point where the ray intersects the mesh.
            </summary>
            <param name="worldRay">The world ray.</param>
            <returns>The color at the intersection</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.BeginPaint">
            <summary>
            Stop pixels being painted more than once until EndPaint has been called. Getting a pixel's color will also return the color of the pixel at the time that BeginPaint was called.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter.EndPaint">
            <summary>
            End the paint.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshPainter.IMeshPainter2">
            <summary>
            Interface for painting colors directly on a Mesh.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.MeshPainter.IMeshPainter2.OnMeshCreated">
            <summary>
            Event raised when the mesh is created.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.PaintVertex(System.Int32,System.Drawing.Color)">
            <summary>
            Paint a vertex.
            </summary>
            <param name="id">The index of the vertex</param>
            <param name="color">The color to paint the vertex</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.GetColorAtVertex(System.Int32)">
            <summary>
            Paint a vertex.
            </summary>
            <param name="id">The index of the vertex</param>
            <returns>The color of the vertex</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.PaintFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.SingleMeshPainter2RayDesc,System.Drawing.Color)">
            <summary>
            Paint a point where the world ray intersects the mesh.
            </summary>
            <param name="worldRay">The ray in world coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.PaintFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.SingleMeshPainter2RayDesc,System.Action{Demo3D.Visuals.MeshPainter.VertexHitDesc})">
            <summary>
            Paint a point where the local ray intersects the mesh.
            </summary>
            <param name="worldRay">The ray in local coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="onHitAction">The call back when a vertex is hit</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.PaintFromLocalRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.SingleMeshPainter2RayDesc,System.Action{Demo3D.Visuals.MeshPainter.VertexHitDesc})">
            <summary>
            Paint a point where the local ray intersects the mesh.
            </summary>
            <param name="localRay">The ray in local coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="onHitAction">The call back when a vertex is hit</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.PaintCircleFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.MultiRayMeshPainterCircleDesc,System.Drawing.Color)">
            <summary>
            Paint a circle using a series of rays. This will result in more accurate painting but will perform slower.
            </summary>
            <param name="worldRay">The ray at the center of the circle.</param>
            <param name="desc">The description of the multiray.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.PaintCircleFromWorldRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.MultiRayMeshPainterCircleDesc,System.Func{System.Drawing.Color,System.Drawing.Color})">
            <summary>
            Paint a circle using a series of rays. This will result in more accurate painting but will perform slower.
            </summary>
            <param name="worldRay">The ray at the center of the circle.</param>
            <param name="desc">The description of the multiray.</param>
            <param name="onPaintAction">The action to execute when painting occurs. The return value of the action will be the color to paint</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.GetColorAtWorldRay(Demo3D.Visuals.Ray)">
            <summary>
            Get the color at the point where the ray intersects the mesh.
            </summary>
            <param name="worldRay">The world ray.</param>
            <returns>The color at the intersection</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.IMeshPainter2.ApplyPaint">
            <summary>
            Apply any painted vertices to the mesh 
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainter.WorldMatrix">
            <summary>
            World Matrix of the owning visual
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainter.InverseWorldMatrix">
            <summary>
            Inverse World Matrix of the owning visual
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainter.Textures">
            <summary>
            Textures used for rendering. In order: Top, Bottom, Left, Right, Front, Back.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter.GetNormalAtHitPos(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3[],Microsoft.DirectX.Vector3[])">
            <summary>
            Use barycentric interpolation to get the normal at the hit position which is the same method that gpu pixel shaders use.
            </summary>
            <param name="hitPos"></param>
            <param name="triangleVertices"></param>
            <param name="triangleNormals"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter.BeginPaint">
            <summary>
            Stop pixels being painted more than once until EndPaint has been called. Getting a pixel's color will also return the color of the pixel at the time that BeginPaint was called.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter.EndPaint">
            <summary>
            End the paint.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter.OnReset">
            <summary>
            Clear cached index buffers.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshPainter.SingleMeshPainter2RayDesc">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.SingleMeshPainter2RayDesc.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            The description of a paint ray
            </summary>
            <param name="MaxDistance">The max distance a hit point can be from the source of a ray. Use double.PositiveInfinity for unlimited range</param>
            <param name="MaxRange">The max distance a vertex can be from the hit point.</param>
            <param name="MaxAngle">The max angle that a vertex's normal can be from the hit normal.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter2.LongestEdgeSubdivide(System.Collections.Generic.List{Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored},System.Collections.Generic.List{System.Int32},System.Single,System.Single,System.Single,Demo3D.Visuals.MeshPainter.MeshPainter2.Triangle@)">
            <summary>
            Split a face into 2 faces by splitting along the longest edge
            </summary>
            <param name="newVerts"></param>
            <param name="newIndices"></param>
            <param name="v2v1Length"></param>
            <param name="v3v1Length"></param>
            <param name="v3v2Length"></param>
            <param name="face"></param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter2.AllEdgesSubdivide(System.Collections.Generic.List{Microsoft.DirectX.Direct3D.CustomVertex.PositionNormalColored},System.Collections.Generic.List{System.Int32},Demo3D.Visuals.MeshPainter.MeshPainter2.Triangle@)">
            <summary>
            Divide a face into 4 faces by splitting along all edges
            </summary>
            <param name="newVerts"></param>
            <param name="newIndices"></param>
            <param name="face"></param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter2.PaintFromLocalRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.SingleMeshPainter2RayDesc,System.Drawing.Color)">
            <summary>
            Paint a point where the local ray intersects the mesh.
            </summary>
            <param name="localRay">The ray in local coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="color">The color to paint.</param>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPainter2.PaintFromLocalRay(Demo3D.Visuals.Ray,Demo3D.Visuals.MeshPainter.SingleMeshPainter2RayDesc,System.Action{Demo3D.Visuals.MeshPainter.VertexHitDesc})">
            <summary>
            Paint a point where the local ray intersects the mesh.
            </summary>
            <param name="localRay">The ray in local coordinates.</param>
            <param name="rayDesc">The description of the ray.</param>
            <param name="onHitAction">The call back when a vertex is hit</param>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainterRendererAspect.Painter">
            <summary>
            The painter used to draw on the mesh.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshPainter.MeshPainterRendererAspect2">
            <exclude />
            <summary>
            Internal Use only
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainterRendererAspect2.Painter">
            <summary>
            The painter used to draw on the mesh.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPaintTexture.PaintTexture">
            <summary>
            The raw texture
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPaintTexture.HasPaint">
            <summary>
            Has the texture been modified
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPaintTexture.BeginPaint">
            <summary>
            Stop pixels being painted more than once until EndPaint has been called. GetColor will also return the colors of the pixels at the time BeginPaint was called.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshPainter.MeshPaintTexture.Update">
            <summary>
            Upload the bytes to the new SlimDX texture
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshPainter.MeshPainterRayDesc">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainterRayDesc.HitRadius">
            <summary>
            The radius to paint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainterRayDesc.HitSteps">
            <summary>
            The steps when painting the hit radius.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPainter.MeshPainterRayDesc.MaxDistance">
            <summary>
            The max distance a ray can travel before being ignored
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshPainter.MultiRayMeshPainterCircleDesc">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MeshPhysicsAspect">
            <summary>Mesh physics geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPhysicsAspect.Location">
            <summary>The (local) location for the mesh geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPhysicsAspect.Rotation">
            <summary>The (local) rotation for the mesh geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPhysicsAspect.CollisionMargin">
            <summary>The collision margin hint for the mesh geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshPhysicsAspect.Scale">
            <summary>The scale for the mesh geometry.</summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshRendererCached">
            <summary>
            Collect all rendered meshes together and organize them by mesh, then 
            draw them at the end in mesh order.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshRendererInteractive">
            <summary>
            Class to render the scene interactively, cutting out parts that aren't needed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.MeshRendererInteractive.ForceHighDetail">
            <summary>
            Force meshes to be rendered in high detail (e.g. the floor).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshRendererSelected">
            <summary>
            Renders selected visuals only.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshRendererShadowEffect">
            <summary>
            Optimized renderer for shadows
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MessageListenersAspect.RegisterMessageSender(Demo3D.Visuals.Visual)">
            <summary>
            Remember who is sending us messages, so that we can unwire from them when we're deleted
            </summary>
            <param name="messageSender"></param>
        </member>
        <member name="M:Demo3D.Visuals.MessageListenersAspect.BuildArgsFromSendMessage(Demo3D.Script.Function,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.MessageListenersAspect.WireListeningTo(Demo3D.Visuals.Visual)">
            <summary>
            Wire [Message("...")] handlers from this visual's script to another visual's script references natively.
            This is called from Visual.AddMessageListener(v) on the visual 'v'.
              i.e. a.AddMessageListener(b) calls b.WireListeningTo(a)
            </summary>
            <param name="messageSender">The visual to be listened to for messages.</param>
        </member>
        <member name="T:Demo3D.Visuals.MinByReplacementExtension">
            <summary>
            Only Used for backward compatibility if both System.Linq and Demo3D.VehicleFramework namespaces are "using"ed.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MinByReplacementExtension.MinByReplacement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Only Used for backward compatibility if both System.Linq and Demo3D.VehicleFramework namespaces are "using"ed.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MinByReplacementExtension.MinByReplacement``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Only Used for backward compatibility if both System.Linq and Demo3D.VehicleFramework namespaces are "using"ed.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.EmptyModule">
            <summary>
            An empty module.
            NOTE: This serializes to null due to lack of properties.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.RollerModule">
            <summary>
            A roller module for conveyors or shelves.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BeltModule">
            <summary>
            A belt module for conveyors.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BoardModule">
            <summary>
            A chipboard module for shelves.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.SlatModule">
            <summary>
            A slat module for shelves.
            </summary>
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.FloorBufferModule">
            <summary>
            A floor buffer module for shelves.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MotionDirection">
            <summary>
            Motion directions.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionDirection.Forwards">
            <summary>
            Forwards.
            </summary>
            <remarks>
            Distance increases over time.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.MotionDirection.Reverse">
            <summary>
            Reverse/backwards.
            </summary>
            <remarks>
            Distance decreases over time.
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.MotionProfile">
            <summary>
            Motion characteristics.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionProfile.Direction">
            <summary>
            The current direction of travel.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionProfile.CurrentSpeed">
            <summary>
            The unsigned current speed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionProfile.MaxSpeed">
            <summary>
            The unsigned maximum speed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionProfile.Acceleration">
            <summary>
            The unsigned acceleration.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionProfile.Deceleration">
            <summary>
            The unsigned deceleration.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotionProfile.#ctor(Demo3D.Visuals.MotionDirection,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="direction">The current direction.</param>
            <param name="currentSpeed">The current (unsigned) speed.</param>
            <param name="maxSpeed">The maximum allowable (unsigned) speed.</param>
            <param name="acceleration">The (unsigned) acceleration.</param>
            <param name="deceleration">The (unsigned) deceleration.</param>
        </member>
        <member name="T:Demo3D.Visuals.MotionEventType">
            <summary>
            Motion event types.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEventType.Start">
            <summary>
            Speed is non-zero.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEventType.Stop">
            <summary>
            Speed is zero.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEventType.Accelerate">
            <summary>
            Acceleration is non-zero (positive).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEventType.Decelerate">
            <summary>
            Acceleration is non-zero (negative).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEventType.Steady">
            <summary>
            Acceleration is zero.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEventType.ChangeDirectionForwards">
            <summary>
            Direction of travel changed, now travelling forwards.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEventType.ChangeDirectionReverse">
            <summary>
            Direction of travel changed, now travelling backwards.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MotionEvent">
            <summary>
            Motion event.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEvent.Type">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MotionEvent.Time">
            <summary>
            The (relative) time at which the event occurs.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotionEvent.#ctor(Demo3D.Visuals.MotionEventType,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The event type.</param>
            <param name="time">The event time.</param>
        </member>
        <member name="T:Demo3D.Visuals.MotionSolver">
            <summary>
            Motion solver.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.AddEvent(Demo3D.Visuals.MotionEvent,System.Collections.Generic.List{Demo3D.Visuals.MotionEvent})">
            <summary>
            Adds an event to the end of the list of events.
            </summary>
            <param name="ev">The event.</param>
            <param name="events">The list of events.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.Time(System.Double,Demo3D.Visuals.MotionProfile)">
            <summary>
            Determines the time to travel to the specified signed displacement given the specified
            motion profile.
            </summary>
            <param name="signedDisplacement">The signed displacement.</param>
            <param name="profile">The motion profile.</param>
            <returns>The time to travel and stop at the signed displacement.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.Time(System.Double,Demo3D.Visuals.MotionProfile,System.Collections.Generic.List{Demo3D.Visuals.MotionEvent})">
            <summary>
            Determines the time to travel to the specified signed displacement given the specified
            motion profile. Populates the provided list with motion events.
            </summary>
            <param name="signedDisplacement">The signed displacement.</param>
            <param name="profile">The motion profile.</param>
            <param name="events">The list of motion events, which is to be populated.</param>
            <returns>The time to travel and stop at the signed displacement.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.UnsignedStoppingDistance(Demo3D.Visuals.MotionProfile)">
            <summary>
            Calculates the unsigned stopping distance given the magnitude of the current speed and
            the deceleration.
            </summary>
            <param name="profile">The motion profile.</param>
            <returns>The unsigned stopping distance.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.SignedStoppingDistance(Demo3D.Visuals.MotionProfile)">
            <summary>
            Calculates the signed stopping distance given the signed current speed and the
            deceleration.
            </summary>
            <param name="profile">The motion profile.</param>
            <returns>The signed stopping distance.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.StoppingTime(Demo3D.Visuals.MotionProfile)">
            <summary>
            Calculates the stopping time given the magnitude of the current speed and the
            deceleration.
            </summary>
            <param name="profile">The motion profile.</param>
            <returns>The stopping time.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.SolveQuadratic(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solves a quadratic equation of the form c1*x^2 + c2*x + c3 = 0.
            </summary>
            <param name="c1">The first coefficient.</param>
            <param name="c2">The second coefficient.</param>
            <param name="c3">The third coefficient.</param>
            <param name="root1">The first found root (or NaN if no solutions).</param>
            <param name="root2">The second found root (or NaN if one or fewer solutions).</param>
            <returns>Whether one ore more real solutions exist.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionSolver.TimeToAttainMaxSpeed(Demo3D.Visuals.MotorDirection,Demo3D.Visuals.MotionProfile,System.Collections.Generic.List{Demo3D.Visuals.MotionEvent})">
            <summary>
            Determines the time to attain the maximum speed in the target direction given the
            specified motion profile.
            </summary>
            <param name="targetDirection">The target direction.</param>
            <param name="profile">The motion profile.</param>
            <param name="events">The list of motion events, which is to be populated.</param>
            <returns>The time to attain the signed target speed.</returns>
        </member>
        <member name="T:Demo3D.Visuals.MotionPrompt">
            <summary>
            Motion prompt.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.MotionPrompt.Subscribers">
            <summary>
            Subscribers to motion events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotionPrompt.#ctor(Demo3D.Visuals.Visual)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">The owning visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotionPrompt.Reset">
            <summary>
            Cancels any scheduled events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotionPrompt.Update(Demo3D.Visuals.MotionProfile,System.Double)">
            <summary>
            Reschedules motion events.
            </summary>
            <remarks>
            If this function returns false then events were not scheduled. This could be because the
            motion is not solvable or because the target position is already achieved.
            </remarks>
            <param name="motionProfile">The motion characteristics.</param>
            <param name="displacement">The (signed) displacement to travel.</param>
            <returns>Whether events were scheduled.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionPrompt.Update(Demo3D.Visuals.MotionProfile,Demo3D.Visuals.MotorDirection)">
            <summary>
            Reschedules motion events.
            </summary>
            <remarks>
            Schedules events required for the motor to attain the maximum speed in the specified
            target direction given the specified motion characteristics.
            
            If this function returns false then events were not scheduled. This could be because the
            motion is not solvable or because the target position is already achieved.
            </remarks>
            <param name="motionProfile">The motion characteristics.</param>
            <param name="targetDirection">The target direction.</param>
            <returns>Whether events were scheduled.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotionPrompt.ScheduleEvent(System.Double,System.Action)">
            <summary>
            Schedules an event.
            </summary>
            <param name="timeFromNow">The relative time.</param>
            <param name="action">The action to be performed.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.BusSampleDriver.PublishPulses">
            <summary>
            Publishes pulses.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.BusSampleDriver.ScheduleBusSampleEvent(Demo3D.Visuals.MotorNotifier.ProtectedEventQueue.EventQueueAccess,System.Int64,Demo3D.EventQueue.Fixed)">
            <summary>
            Schedules the next bus sample publish event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.BusSampleDriver.UpdateOrScheduleEvents">
            <summary>
            Called to start the bus sample timer, or when a new generator is added that changes the bus sample time.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.MovementProfile.CalculateTimeToTravel(System.Double,System.Double)">
            <summary>
            Determines how long it takes for the conveyor to travel the specified distance given the
            conveyor's current speed, target speed and acceleration. 
            </summary>
            <param name="timeNow">The current time.</param>
            <param name="distance">The travel distance.</param>
            <returns>The time for the conveyor to travel the specified distance.</returns>
            <remarks>Returns a negative value if the conveyor will never travel the specified
            distance, due to zero speed and acceleration.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.MovementProfile.CalculateTimeToTravelLegacy(System.Double,System.Double)">
            <summary>
            Determines how long it takes for the conveyor to travel the specified distance given the
            conveyor's current speed, target speed and acceleration. 
            </summary>
            <param name="timeNow">The current time.</param>
            <param name="distance">The travel distance.</param>
            <returns>The time for the conveyor to travel the specified distance.</returns>
            <remarks>Returns a negative value if the conveyor will never travel the specified
            distance, due to zero speed and acceleration.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.MovementProfile.CalculateDistanceTravelled(System.Double,System.Double)">
            <summary>
            Determines the distance that will be travelled by the conveyor during the specified time
            period, given the conveyor's current speed, target speed and acceleration.
            </summary>
            <param name="timeNow">The current time.</param>
            <param name="time">The time period.</param>
            <returns>The distance that the conveyor will travel in the specified time period.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.MovementProfile.CalculateTimeToSpeed(System.Double,System.Double)">
            <summary>
            Determines how long it takes for the conveyor to attain the specified speed given the
            conveyor's current speed, target speed and acceleration/deceleration. 
            </summary>
            <param name="timeNow">The current time.</param>
            <param name="speed">The speed.</param>
            <returns>The time for the conveyor to attain the specified speed.</returns>
            <remarks>Returns a negative value if the conveyor will never attain the specified
            speed.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.NotifyDistance(Demo3D.Visuals.NotifyDistanceInfo)">
            <summary>
            Notifies subscribers to the "NotifyDistance" event for the specified distance.
            </summary>
            <param name="distanceInfo">The notify distance information.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.ScheduleDistanceEvent(Demo3D.Visuals.NotifyDistanceInfo)">
            <summary>
            Schedules a distance event for the specified notify distance information.
            </summary>
            <param name="distanceInfo">The notify distance information.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.ScheduleDistanceEventLegacy(Demo3D.Visuals.NotifyDistanceInfo)">
            <summary>
            Schedules a distance event for the specified notify distance information.
            </summary>
            <param name="distanceInfo">The notify distance information.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.CancelDistanceEvents">
            <summary>
            Cancels any existing distance events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.UpdateOrScheduleNotifyDistanceEvents">
            <summary>
            Adding new distances or setting the motor state, motor speed or motor acceleration means
            that the currently scheduled distance events are no longer valid. This method cancels
            these events before scheduling new events at the correct times.
            </summary>
            <remarks>
            This must be called whenever a distance is added/removed/changed or the motor's state,
            speed or acceleration is changed by the user.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.NotifySpeed(Demo3D.Visuals.NotifySpeedInfo)">
            <summary>
            Notifies subscribers to the "NotifySpeed" event for the specified speed.
            </summary>
            <param name="speedInfo">The notify speed information.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.ScheduleSpeedEvent(Demo3D.Visuals.NotifySpeedInfo)">
            <summary>
            Schedules a speed event for the specified notify speed information.
            </summary>
            <param name="speedInfo">The notify speed information.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.CancelSpeedEvents">
            <summary>
            Cancels any existing speed events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.UpdateOrScheduleNotifySpeedEvents">
            <summary>
            Adding new speeds or setting the motor state, motor speed or motor acceleration means
            that the currently scheduled speed events are no longer valid. This method cancels
            these events before scheduling new events at the correct times.
            </summary>
            <remarks>
            This must be called whenever a speed is added/removed/changed or the motor's state,
            speed or acceleration is changed by the user.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.NotifySpeedChange(Demo3D.Visuals.NotifySpeedChangeInfo)">
            <summary>
            Notifies subscribers to the "NotifySpeedChange" event for the specified speed change.
            </summary>
            <param name="speedChangeInfo">The notify speed change information.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.ScheduleSpeedChangeEvent(Demo3D.Visuals.NotifySpeedChangeInfo)">
            <summary>
            Schedules speed change events for the specified notify speed change information.
            </summary>
            <param name="speedChangeInfo">The notify speed change information.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.CancelSpeedChangeEvents">
            <summary>
            Cancels any existing speed change events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.Notifier.UpdateOrScheduleNotifySpeedChangeEvents">
            <summary>
            Adding new speed changes or setting the motor state, motor speed or motor acceleration
            means that the currently scheduled speed change events are no longer valid. This method
            cancels these events before scheduling new events at the correct times.
            </summary>
            <remarks>
            This must be called whenever a speed change is added/removed/changed or the motor's
            state, speed or acceleration is changed by the user.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.PulseGenerator.#ctor(Demo3D.Visuals.MotorNotifier.NotifierProperties,Demo3D.Visuals.MotorNotifier.MovementProfile.Reference)">
            <summary>
            Constructs a new pulse generator.
            </summary>
            <param name="props">Pulse properties.</param>
            <param name="movementReference">Movement profile.</param>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.PulseGenerator.DeterminePulseCount(System.Int32@,System.Double@,System.Double@)">
            <summary>
            Determines the pulse count from the distance travelled.
            </summary>
            <remarks>
            This is NOT accurate if the conveyor direction changes, since then the magnitude of the
            distance travelled starts decreasing and so the pulse count starts decreasing!
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.MotorNotifier.PulseGenerator.PulseCount">
            <summary>
            Returns the current pulse count.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.PulseGenerator.CountPulse">
            <summary>
            Computes the pulse count and notifies.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.PulseGenerator.DropPulse">
            <summary>
            Drops the pulse and schedules a "raise pulse" event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.PulseGenerator.RaisePulse">
            <summary>
            Raises the pulse and schedules a "drop pulse" event.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MotorNotifier.PulseGenerator.UpdateOrScheduleEvents(Demo3D.Visuals.MotorNotifier.ProtectedEventQueue,System.Boolean)">
            <summary>
            Setting the motor state, motor speed or motor acceleration means that the currently
            scheduled "raise pulse" and "drop pulse" events are no longer valid. This method cancels
            these events before scheduling new events at the correct times (determined by the new
            motor property values).
            </summary>
            <remarks>
            This must be called whenever the motor's state, speed or acceleration is changed by the
            user, otherwise we will get at least one pulse with incorrect staring time and/or
            duration.
            
            This method is also called to schedule the first pulse event.
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.MotorAspect`1">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.Name">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_Name_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.Props">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.ControlMode">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_ControlMode_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.StartSpeed">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_StartSpeed_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.StartTime">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_StartTime_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.CurrentSpeed">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_CurrentSpeed_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.CurrentAcceleration">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_CurrentAcceleration_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.IsSteady">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_IsSteady_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.DistanceTravelled">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_DistanceTravelled_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.InitialDistanceTravelled">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_InitialDistanceTravelled_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.InitialState">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_InitialState_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.State">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_State_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.Direction">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_Direction_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.Speed">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_Speed_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.Acceleration">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_Acceleration_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.Deceleration">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_Deceleration_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.TimeUntilStopped">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_TimeUntilStopped_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.TargetSpeed">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_TargetSpeed_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.PulseEnabled">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_PulseEnabled_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.GrayCode">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_GrayCode_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.MaxPulseCount">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_MaxPulseCount_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.MinPulseCount">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_MinPulseCount_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.PulseDistance">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_PulseDistance_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.PulseGenerationMode">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_PulseGenerationMode_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.PulseHighRatio">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_PulseHighRatio_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.PulseState">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_PulseState_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.PulseCount">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_PulseCount_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.OnMotorOn">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_OnMotorOn_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.OnMotorOff">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_OnMotorOff_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.OnNotifyDistance">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_OnNotifyDistance_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.OnNotifySpeed">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_OnNotifySpeed_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.OnNotifySpeedChange">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_OnNotifySpeedChange_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.OnNotifyMovementStatus">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;MotorAspect_T_OnNotifyMovementStatus_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.SpeedCache">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MotorAspect`1.SpeedCacheValid">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.MotorAspect`1.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConveyorMotorAspect">
            <summary>A conveyor motor.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.CalculateTime(Demo3D.Visuals.Motor.State@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the time at which the specified (signed) target position will be hit.
            </summary>
            <remarks>
            This function will determine the shortest time and doesn't require motion to come to a
            stop at the target position. In the case that the target position cannot be achieved
            then a negative time will be returned.
            
            This function makes the following assumptions, which the parameters must satisfy:
            
            1. The initial time is positive (&gt;= 0).
            3. The maximum acceleration <paramref name="amax" /> is finite and positive (&gt;= 0).
            4. The maximum deceleration <paramref name="dmax" /> is finite and positive (&gt;= 0).
            5. The maxumum position limit is greater than or equal to the minimum position limit.
            
            Failure to satisfy the assumptions will likely result in garbage being returned.
            </remarks>
            <returns>The time at which the target position is hit.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.CalculateState(Demo3D.Visuals.Motor.State@,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the state at time <paramref name="dt" /> forward from the initial state.
            </summary>
            <remarks>
            This function makes the following assumptions, which the parameters must satisfy:
            
            1. The initial time is positive (&gt;= 0).
            2. The time-step <paramref name="dt" /> is positive (&gt;= 0).
            3. The maximum acceleration <paramref name="amax" /> is finite and positive (&gt;= 0).
            4. The maximum deceleration <paramref name="dmax" /> is finite and positive (&gt;= 0).
            5. The maximum position limit is greater than or equal to the minimum position limit.
            
            Failure to satisfy the assumptions will likely result in garbage being returned.
            </remarks>
            <param name="initial">The initial state.</param>
            <param name="vd">The (signed) target velocity.</param>
            <param name="amax">The (unsigned) maximum acceleration (0 for infinite).</param>
            <param name="dmax">The (unsigned) maximum deceleration (0 for infinite).</param>
            <param name="smin">The (signed) minimum position (can be -Inf).</param>
            <param name="smax">The (signed) maximum position (can be +Inf).</param>
            <param name="dt">The time to step forward.</param>
            <returns>The state at time t0 + dt.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.AfterLimitHit(Demo3D.Visuals.Motor.State@,System.Double,System.Double)">
            <summary>
            Corrects the provided state for the specified time in the event that the position limits
            have been hit.
            </summary>
            <remarks>
            If we hit position limits then the time, velocity and acceleration properties will be
            for the point in time immediately before the limit is hit. However, we may request the
            state for a point in time after the limit is hit. This function advances the state to
            immediately after the limit was hit.
            </remarks>
            <remarks>
            This function makes the following assumptions, which the parameters must satisfy:
            
            1. The position of the provided state is at one of the limits.
            2. The positon remains at the limits throughout.
            
            Failure to satisfy the assumptions will likely result in garbage being returned.
            </remarks>
            <param name="state">The state immediately before a limit was hit.</param>
            <param name="smin">The (signed) minimum position (can be -Inf).</param>
            <param name="smax">The (signed) maximum position (can be +Inf).</param>
            <returns>The state immediately after a limit was hit.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.Cruise(Demo3D.Visuals.Motor.State@,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the state after cruising at the target velocity <paramref name="vd" /> for up
            to the specified time <paramref name="dt" />. If one of the position limits is hit then
            this function will return the state immediately before the limit is hit.
            </summary>
            <remarks>
            If a position limit is hit then the state returned may have non-zero velocity, since the
            state is returned at the point in time immediately before the limit is hit - i.e.
            state(t - (1/Inf)), where t is the time at which the limit is hit.
            
            This function makes the following assumptions, which the parameters must satisfy:
            
            1. The initial position satisfies the limits.
            2. The initial velocity is equal to the target velocity.
            
            Failure to satisfy the assumptions will likely result in garbage being returned.
            </remarks>
            <param name="initial">The initial state.</param>
            <param name="vd">The (signed) target velocity.</param>
            <param name="smin">The (signed) minimum position.</param>
            <param name="smax">The (signed) maximum position.</param>
            <param name="dt">The time over which to cruise.</param>
            <returns>The state at time (t0 + dt).</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.RampVelocity(Demo3D.Visuals.Motor.State@,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculates the state after ramping up the velocity from the initial velocity to the
            desired velocity, <paramref name="vd" />. If one of the position limits is hit then this
            function will return the state immediately before the limit is hit.
            </summary>
            <remarks>
            If a position limit is hit then the state returned may have non-zero velocity and
            non-zero acceleration, since the state is returned at the point in time immediately
            before the limit is hit - i.e. state(t - (1/Inf)), where t is the time at which the
            limit is hit.
            
            This function makes the following assumptions, which the parameters must satisfy:
            
            1. The initial position satisfies the limits.
            2. The ramp in velocity does not cross the v==0 boundary.
            2. The desired velocity will not be exceeded (overshot) at time t0 + dt.
            
            Failure to satisfy the assumptions will likely result in garbage being returned.
            </remarks>
            <param name="initial">The initial state.</param>
            <param name="vd">The (signed) target velocity.</param>
            <param name="dvdt">The (signed) change in velocity per unit time.</param>
            <param name="smin">The (signed) minimum position.</param>
            <param name="smax">The (signed) maximum position.</param>
            <param name="dt">The time over which to ramp the velocity.</param>
            <returns>The state at time (t0 + dt).</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.SolveRampVelocityTime(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Determines the time to travel from <paramref name="s0" /> to <paramref name="s1" /> given
            the (signed) initial velocity <paramref name="v0" /> and the (signed) constant change in
            velocity per unit time <paramref name="dvdt" />.
            </summary>
            <remarks>
            This function assumes that the velocity constantly increases or decreases over time
            according to <paramref name="dvdt" />, which is assumed constant over time. This function
            also assumes that <paramref name="dvdt" /> is non-zero.
            </remarks>
            <param name="s0">The (signed) initial position.</param>
            <param name="s1">The (signed) final position.</param>
            <param name="v0">The (signed) initial velocity.</param>
            <param name="dvdt">The (signed) constant change in velocity per unit time.</param>
            <returns>The time required to travel from s0 to s1 whilst linearly increasing the velocity according to dvdt.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.SolveQuadratic(System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Solves a general quadratic equation of the form ax^2 + bx + c = 0.
            </summary>
            <param name="a">The coefficient for the x^2 term.</param>
            <param name="b">The coefficient for the x term.</param>
            <param name="c">The coefficient for the constant term.</param>
            <param name="r1">The first real solution, or NaN.</param>
            <param name="r2">The second real solution, or NaN.</param>
            <returns>The number of real solutions.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.Calculator.SmallestPositive(System.Double,System.Double)">
            <summary>
            Determines the smallest positive element of the pair (a, b). If both elements are
            negative then it returns NaN.
            </summary>
            <param name="a">The first element of the pair.</param>
            <param name="b">The second element of the pair.</param>
            <returns>The smallest positive element of the pair, or NaN if both are negative.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Motor.IController.Motor">
            <summary>
            The motor to which the controller is attached.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IController.Attach(Demo3D.Visuals.Motor.MotorAspect)">
            <summary>
            Called when a motor attempts to attach the controller to itself.
            </summary>
            <remarks>
            If this function returns true then the <see cref="P:Demo3D.Visuals.Motor.IController.Motor" /> property must return the
            provided <paramref name="motor" /> until <see cref="M:Demo3D.Visuals.Motor.IController.Detach" /> is called.
            </remarks>
            <param name="motor">The motor that is attempting to attach the controller.</param>
            <returns>Whether the controller was attached to the motor.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IController.Detach">
            <summary>
            Called when a motor has detatched the controller.
            </summary>
            <remarks>
            After this function is called the <see cref="P:Demo3D.Visuals.Motor.IController.Motor" /> property must return null until
            <see cref="M:Demo3D.Visuals.Motor.IController.Attach(Demo3D.Visuals.Motor.MotorAspect)" /> is called. You should ensure that any locks acquired
            are released by this function.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IController.Pause">
            <summary>
            Called immediately after the motor has been paused.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IController.Resume(System.Double)">
            <summary>
            Called immediately after the motor has been resumed (following a pause).
            </summary>
            <param name="pauseDuration">The duration (in seconds) of the pause.</param>
        </member>
        <member name="P:Demo3D.Visuals.Motor.IEncoder.Motor">
            <summary>
            The motor to which the encoder is attached.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IEncoder.Attach(Demo3D.Visuals.Motor.MotorAspect)">
            <summary>
            Called when a motor attempts to attach the encoder to itself.
            </summary>
            <remarks>
            If this function returns true then the <see cref="P:Demo3D.Visuals.Motor.IEncoder.Motor" /> property must return the
            provided <paramref name="motor" /> until <see cref="M:Demo3D.Visuals.Motor.IEncoder.Detach" /> is called.
            </remarks>
            <param name="motor">The motor that is attempting to attach the encoder.</param>
            <returns>Whether the encoder was attached to the motor.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IEncoder.Detach">
            <summary>
            Called when a motor has detatched the encoder.
            </summary>
            <remarks>
            After this function is called the <see cref="P:Demo3D.Visuals.Motor.IEncoder.Motor" /> property must return null until
            <see cref="M:Demo3D.Visuals.Motor.IEncoder.Attach(Demo3D.Visuals.Motor.MotorAspect)" /> is called. You should ensure that any locks acquired
            are released by this function.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IEncoder.Pause">
            <summary>
            Called immediately after the motor has been paused.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.IEncoder.Resume(System.Double)">
            <summary>
            Called immediately after the motor has been resumed (following a pause).
            </summary>
            <param name="pauseDuration">The duration (in seconds) of the pause.</param>
        </member>
        <member name="T:Demo3D.Visuals.Motor.MotorAspect.Lock">
            <summary>
            A lock on a property of <see cref="T:Demo3D.Visuals.Motor.MotorAspect" />.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Motor.MotorAspect.Lock`1">
            <summary>
            A lock on a property of <see cref="T:Demo3D.Visuals.Motor.MotorAspect" />.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Lock`1.Get">
            <summary>
            Gets the value of the locked property.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the lock is not held.</exception>
            <returns>The value of the locked property.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Lock`1.Set(`0)">
            <summary>
            Sets the value of the locked property.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the lock is not held.</exception>
            <param name="value">The value for the locked property.</param>
        </member>
        <member name="T:Demo3D.Visuals.Motor.MotorAspect.Limit">
            <summary>
            Represents a set of limiting range for a <see cref="T:Demo3D.Visuals.Motor.MotorAspect" /> property.
            </summary>
            <remarks>
            The value for a property may be limited by a finite set of potentially overlapping
            ranges. The <see cref="T:Demo3D.Visuals.Motor.MotorAspect.Limit" /> stores the set of ranges and allows for querying the
            minimum and maximum allowable value for a property.
            
            For example, given the pair of ranges [-4, 7] and [0.5, 12], the most restrictive
            minimum value is 0.5 and the most restructive maximum value is 7. This is used to
            allow a single motor to be attached to multiple joints. Each joint may impose a limiting
            range on the motor. The motor's range of motion should then be restricted to the most
            restrictive minimum and maximum values, ensuring that the motor doesn't attempt to drive
            any joint beyond its limits.
            
            One caveat is that disjoint ranges may result in an infeasible permitted range. This is
            the case when the maximum of one range is less than the minimum for another. In such
            cases there is no allowable value. An exception will be triggered when such a case is
            detected and the range won't be added.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.min">
            <summary>
            The minimum value for the permitted range.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.max">
            <summary>
            The maximum value for the permitted range.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.ranges">
            <summary>
            The list of restrictive ranges.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.Limit.OnChanged">
            <summary>
            An event that is triggered when the minimum and/or maximum values for the permitted
            range change.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.Limit.Min">
            <summary>
            The most restrictive minimum value from the set of limiting ranges.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.Limit.Max">
            <summary>
            The most restrictive maximum value from the set of limiting ranges.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.Limit.Count">
            <summary>
            The number of restrictive ranges.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Limit.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Limit.Add(System.Double,System.Double)">
            <summary>
            Adds a restricting range to the limit.
            </summary>
            <param name="min">The minimum value for the restrictive range.</param>
            <param name="max">The maximum value for the restrictive range.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when adding the restrictive range would result in an infeasible permitted range.</exception>
            <returns>The restrictive range.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Limit.Remove(Demo3D.Visuals.Motor.MotorAspect.Limit.Range)">
            <summary>
            Removes the provided restrictive range.
            </summary>
            <remarks>
            Only used internally. Restrictive ranges should be removed by disposing them.
            </remarks>
            <param name="range">The restrictive range to remove.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Limit.Update">
            <summary>
            Updates the permitted range.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Limit.Clear">
            <summary>
            Clears all restrictive ranges from the limit.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Motor.MotorAspect.Limit.Range">
            <summary>
            A restrictive range.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.min">
            <summary>
            The minimum value for the restrictive range.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.max">
            <summary>
            The maximum value for the restrictive range.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.active">
            <summary>
            Whether the restrictive range is applied to a <see cref="T:Demo3D.Visuals.Motor.MotorAspect.Limit" />.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.removedAction">
            <summary>
            The action to be performed when the restrictive range is removed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.updatedAction">
            <summary>
            The action to be performed when the restrictive range is updated.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.Min">
            <summary>
            The minimum value for the restrictive range.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.Max">
            <summary>
            The maximum value for the restrictive range.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.Active">
            <summary>
            Whether the restrictive range is applied to a <see cref="T:Demo3D.Visuals.Motor.MotorAspect.Limit" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Limit.Range.#ctor(System.Double,System.Double,System.Action{Demo3D.Visuals.Motor.MotorAspect.Limit.Range},System.Action{Demo3D.Visuals.Motor.MotorAspect.Limit.Range})">
            <summary>
            Constructor.
            </summary>
            <param name="min">The minimum value for the restrictive range.</param>
            <param name="max">The maximum value for the restrictive range.</param>
            <param name="removedAction">The action to be performed when the restrictive range is removed.</param>
            <param name="updatedAction">The action to be performed when the restrictive range is updated.</param>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnBeforeReset">
            <summary>
            Event that is triggered immediately before the motor is reset.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnAfterReset">
            <summary>
            Event that is triggered immediately after the motor has been reset.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnUnitsChanged">
            <summary>
            Event that is triggered when the units are changed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnStateChanged">
            <summary>
            Event that is triggered when the state is changed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnDirectionChanged">
            <summary>
            Event that is triggered when the direction is changed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnTargetSpeedChanged">
            <summary>
            Event that is triggered when the target speed is changed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnMaxAccelerationChanged">
            <summary>
            Event that is triggered when the maximum acceleration is changed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnMaxDecelerationChanged">
            <summary>
            Event that is triggered when the maximum deceleration is changed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnMinPositionChanged">
            <summary>
            Event that is triggered when the minimum position is changed.
            </summary>
            <remarks>
            The minimum position specified is only a lower bound on the permitted range. The actual
            permitted range may be determined from multiple bounds. If you want to be notified when
            the permitted range changes then use <see cref="E:Demo3D.Visuals.Motor.MotorAspect.OnPositionLimitChanged" />.
            </remarks>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnMaxPositionChanged">
            <summary>
            Event that is triggered when the maximum position is changed.
            </summary>
            <remarks>
            The maxumum position specified is only an upper bound on the permitted range. The actual
            permitted range may be determined from multiple bounds. If you want to be notified when
            the permitted range changes then use <see cref="E:Demo3D.Visuals.Motor.MotorAspect.OnPositionLimitChanged" />.
            </remarks>
        </member>
        <member name="E:Demo3D.Visuals.Motor.MotorAspect.OnPositionLimitChanged">
            <summary>
            Event that is triggered when the actual permitted range on the position has changed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.TargetStateUnlocked">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.State" /> property is unlocked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.TargetDirectionUnlocked">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.TargetDirection" /> property is unlocked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.TargetSpeedUnlocked">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.TargetSpeed" /> property is unlocked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.MaxAccelerationUnlocked">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MaxAcceleration" /> property is unlocked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.MaxDecelerationUnlocked">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MaxDeceleration" /> property is unlocked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.MinPositionUnlocked">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MinPosition" /> property is unlocked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.MaxPositionUnlocked">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MaxPosition" /> property is unlocked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.MotorAspect.Name">
            <summary>The name for the motor.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Evaluate(System.Double)">
            <summary>
            Evaluates the kinematic properties of the motor at some future time.
            </summary>
            <param name="time">The (future) time at which to evaluate the state.</param>
            <returns>The state of the motor at the specified (future) time.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.Current">
            <summary>
            Determines the current kinematic properties of the motor.
            </summary>
            <returns>The current state of the motor.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.SetPosition(System.Double)">
            <summary>
            Sets the current position of the motor, subject to position limits.
            </summary>
            <remarks>
            Note that the position of the motor cannot be locked. This function should be used
            cautiously, since it is not lockable and some components may assume that changes in the
            position obey the kinematics of the motor.
            </remarks>
            <param name="value">The (signed) position for the motor.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.LimitPosition(System.Double,System.Double)">
            <summary>
            (Further) limits the range of positions to the specified range.
            </summary>
            <param name="min">The minimum value for the position.</param>
            <param name="max">The maximum value for the position.</param>
            <returns>The range, which must be held for the duration that the limit should be applied.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.TryLockTargetState">
            <summary>
            Tries to acquire a lock for the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.TargetState" /> property.
            </summary>
            <returns>The acquired lock, or null if something else currently holds a lock.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.TryLockTargetDirection">
            <summary>
            Tries to acquire a lock for the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.TargetDirection" /> property.
            </summary>
            <returns>The acquired lock, or null if something else currently holds a lock.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.TryLockTargetSpeed">
            <summary>
            Tries to acquire a lock for the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.TargetSpeed" /> property.
            </summary>
            <returns>The acquired lock, or null if something else currently holds a lock.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.TryLockMaxAcceleration">
            <summary>
            Tries to acquire a lock for the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MaxAcceleration" /> property.
            </summary>
            <returns>The acquired lock, or null if something else currently holds a lock.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.TryLockMaxDeceleration">
            <summary>
            Tries to acquire a lock for the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MaxDeceleration" /> property.
            </summary>
            <returns>The acquired lock, or null if something else currently holds a lock.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.TryLockMinPosition">
            <summary>
            Tries to acquire a lock for the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MinPosition" /> property.
            </summary>
            <returns>The acquired lock, or null if something else currently holds a lock.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.MotorAspect.TryLockMaxPosition">
            <summary>
            Tries to acquire a lock for the <see cref="P:Demo3D.Visuals.Motor.MotorAspect.MaxPosition" /> property.
            </summary>
            <returns>The acquired lock, or null if something else currently holds a lock.</returns>
        </member>
        <member name="T:Demo3D.Visuals.Motor.State">
            <summary>
            The state of motion at a particular point in time.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.State.Time">
            <summary>
            The (unsigned) time for the state.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.State.Position">
            <summary>
            The (signed) position at <see cref="F:Demo3D.Visuals.Motor.State.Time" />.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Motor.State.Velocity">
            <summary>
            The (signed) velocity at <see cref="F:Demo3D.Visuals.Motor.State.Time" />.
            </summary>
            <remarks>
            A positive value implies that the motor is travelling forwards whilst a negative
            value implies that the motor is travelling backwards. A zero value implies that the
            motor is stationary for a possibly infinitesimal time. You should check the
            magnitude of the <see cref="F:Demo3D.Visuals.Motor.State.Acceleration" /> to check whether the motor has stopped.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.Motor.State.Acceleration">
            <summary>
            The signed change in velocity at <see cref="F:Demo3D.Visuals.Motor.State.Time" />.
            </summary>
            <remarks>
            If the motor is travelling forwards (Velocity &gt; 0) then a positive value implies
            that the motor is accelerating and a negative value implies that the motor is
            decelerating.
            
            Conversely, if the motor is travelling backwards then a negative value implies that
            the motor is accelerating whilst a positive value implies that the motor is
            decelerating.
            
            If the motor is stationary (Velocity == 0) then a positive value implies that the
            motor is accelerating forwards whilst a negative value implies that the motor is
            accelerating backwards. A zero value indicates that the motor has stopped.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Motor.State.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="time">The (unsigned) time, t.</param>
            <param name="position">The (signed) position at time t.</param>
            <param name="velocity">The (signed) velocity at time t.</param>
            <param name="acceleration">The (signed) change in velocity at time t.</param>
        </member>
        <member name="T:Demo3D.Visuals.Motor.VariableSpeedMotor">
            <summary>
            A simple motor with basic variable speed control.
            </summary>
            <remarks>
            The motor doesn't expose any IO and is intended to be controlled by a controller. It is the
            controller that should expose any necessary IO for the purpose of controlling the motor.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Motor.VariableSpeedMotor.ApplyInitialStateOnReset">
            <summary>
            Whether the <see cref="P:Demo3D.Visuals.Motor.VariableSpeedMotor.InitialState" /> (as configured) should be applied on reset.
            </summary>
            <remarks>
            If set to true then the current state is set equal to the initial state on reset. If set
            to false then the current state is persistent across reset.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Motor.VariableSpeedMotor.InitialState">
            <summary>
            The initial state, which is applied on reset if <see cref="P:Demo3D.Visuals.Motor.VariableSpeedMotor.ApplyInitialStateOnReset" />
            is set to true.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.VariableSpeedMotor.TargetVelocity">
            <summary>
            The (signed) target velocity.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.VariableSpeedMotor.MaxAcceleration">
            <summary>
            The (unsigned) maximum acceleration.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.VariableSpeedMotor.MaxDeceleration">
            <summary>
            The (unsigned) maximum deceleration.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.VariableSpeedMotor.MinPosition">
            <summary>
            The (signed) minimum position.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Motor.VariableSpeedMotor.MaxPosition">
            <summary>
            The (signed) maximum position.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.SetTargetVelocity(System.Double,System.Double)">
            <summary>
            Sets the target velocity to the specified <paramref name="value" /> at the specified 
            <paramref name="time" />.
            </summary>
            <remarks>
            This method advances the time on the motor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="value">The new value for the (signed) target velocity.</param>
            <param name="time">The time at which the target velocity is changed.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.SetMaxAcceleration(System.Double,System.Double)">
            <summary>
            Sets the maximum acceleration to the specified <paramref name="value" /> at the specified
            <paramref name="time" />.
            </summary>
            <remarks>
            This method advances the time on the motor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="value">The new value for the (unsigned) maximum acceleration.</param>
            <param name="time">The time at which the maximum acceleration is changed.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.SetMaxDeceleration(System.Double,System.Double)">
            <summary>
            Sets the maximum deceleration to the specified <paramref name="value" /> at the specified
            <paramref name="time" />.
            </summary>
            <remarks>
            This method advances the time on the motor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="value">The new value for the (unsigned) maximum deceleration.</param>
            <param name="time">The time at which the maximum deceleration is changed.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.SetMinPosition(System.Double,System.Double)">
            <summary>
            Sets the minimum position to the specified <paramref name="value" /> at the specified
            <paramref name="time" />.
            </summary>
            <remarks>
            This method advances the time on the motor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="value">The new value for the (signed) minimum position.</param>
            <param name="time">The time at which the minimum position is changed.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.SetMaxPosition(System.Double,System.Double)">
            <summary>
            Sets the maximum position to the specified <paramref name="value" /> at the specified
            <paramref name="time" />.
            </summary>
            <remarks>
            This method advances the time on the motor.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="value">The new value for the (signed) maximum position.</param>
            <param name="time">The time at which the maximum position is changed.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.SetPosition(System.Double,System.Double)">
            <summary>
            Sets the position to the specified <paramref name="value" /> at the specified
            <paramref name="time" />.
            </summary>
            <remarks>
            This function can be used to teleport to a specific position. Note that the value
            specified is clamped to satisfy the position limits.
            </remarks>
            <param name="value">The new value for the (signed) position.</param>
            <param name="time">The time at which the position is changed.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.Evaluate(System.Double)">
            <summary>
            The state of the motor at the specified <paramref name="time" />.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="time">The time for which to determine the state.</param>
            <returns>The state at the specified time.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.Reset(System.Double)">
            <summary>
            Resets the motor.
            </summary>
            <remarks>
            The provided <paramref name="time" /> must be the time at which the motor is reset. After
            calling this method the state is reset. If <see cref="P:Demo3D.Visuals.Motor.VariableSpeedMotor.ApplyInitialStateOnReset" /> is
            set to true then the <see cref="P:Demo3D.Visuals.Motor.VariableSpeedMotor.InitialState" /> is applied. Conversely, if set to false
            then the motor is advanced to the provided <paramref name="time" /> before the time on
            the motor is reset to zero. In this case the motor will retain the position, velocity
            and acceleration that it had before resetting. Only the time will be reset to zero.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="time">The time at which the motor is to be reset.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.Initialize(System.Double)">
            <summary>
            Applies the initialization state if specified.
            </summary>
            <param name="time">The time at which the motor is initialized.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.Advance(System.Double)">
            <summary>
            Advances the time on the motor, updating the current motion state.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="time">The time that the motor should be advanced to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Motor.VariableSpeedMotor.Calculate(System.Double)">
            <summary>
            Calculates the motor's state at the specified <paramref name="time" />.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the time specified is earlier than the current time on the motor.
            </exception>
            <param name="time">The time.</param>
            <returns>The state at the specified time.</returns>
        </member>
        <member name="T:Demo3D.Visuals.ProcessContactDelegate">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ProcessContactDelegateVoid">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MovementSurface">
            <summary>
            Maps Events load location into 3d world place. The EventQueue
            models movement as a displacement along a path length. Each conveyor
            has a MovementSurface, which can translate that displacement into
            a 3D location and orientation.
            
            The MovementSurface also supplies the parameters for creating
            the Events Path object (Length and Speed).
            
            The default MovementSurface class is for a straight conveyor section.
            
            The Start and End locations are in the coordinate space of the owning
            Conveyor, ie relative to the conveyor. 
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MovementSurface.WakeUpBody(Demo3D.Visuals.PhysicsRigidBody)">
            <summary>
            Wake up sleepy loads.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AngledMovementSurface.AccessoryDirectionAt(Microsoft.DirectX.Vector3)">
            <summary>
            Accessories don't point in the same direction as the movement surface.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.RadiusMovementSurface">
            <summary>
            Conveyor sections that are arcs of a circle, starting at 12:00 and turning clockwise.
            Origin is assumed to be at [X=0,Z=0]
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.RadiusMovementSurface.Angle">
            <summary>
            Radians
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MoveOrigin.MoveOriginCenter(Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Transform the origin of the visual so it is centered in the visual's bounding box, optionally iterating over children.
            </summary>
            <param name="visual">Visual to be transformed</param>
            <param name="includeChildren">Option to iterate over children</param>
        </member>
        <member name="M:Demo3D.Visuals.MoveOrigin.MoveOriginTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <summary>
            Transform the origin of the visual so it's position is the one provided relative to the visuals parent.
            The rotation will not be modified
            </summary>
            <param name="visual">Visual to be transformed</param>
            <param name="position">Desired position of the origin</param>
        </member>
        <member name="M:Demo3D.Visuals.MoveOrigin.MoveOriginTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix)">
            <summary>
            Transform the origin of the visual so it becomes the matrix relative to the visuals parent
            </summary>
            <param name="visual">Visual to be transformed</param>
            <param name="matrix">Desired position of the origin</param>
        </member>
        <member name="M:Demo3D.Visuals.MoveOrigin.MoveOriginBy(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix)">
            <summary>
            Transform the origin of the visual by the transform matrix
            </summary>
            <param name="visual">Visual to be transformed</param>
            <param name="transform">Transform to be applied</param>
        </member>
        <member name="T:Demo3D.Visuals.MultiConvexPhysicsAspect">
            <summary>Multi-convex (convex-hull decomposition) physics geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MultiConvexPhysicsAspect.Location">
            <summary>The (local) location for the multi-convex geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MultiConvexPhysicsAspect.Rotation">
            <summary>The (local) rotation for the multi-convex geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MultiConvexPhysicsAspect.CollisionMargin">
            <summary>The collision margin hint for the multi-convex geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MultiConvexPhysicsAspect.Scale">
            <summary>The scale for the multi-convex geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.MultiConvexPhysicsAspect.DecompositionProperties">
            <summary>The parameters that control how the mesh is decomposed into a set of convex-hulls.</summary>
        </member>
        <member name="T:Demo3D.Visuals.NoteSet">
            <summary>
            The set of Rich Text Format (RTF) format notes for documenting catalogs and documents.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IBindableItemOwner">
            <summary>
            An object that contains bindable items.
            <see cref="T:Demo3D.Visuals.BindableItem" />
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IBindableItemOwner.BindableItems">
            <summary>
            Returns a list of bindable items owned by this object.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BindableItemValueChanged">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BindableItem">
            <summary>
            Base class for any bindable item.  Most common are the CustomProperties, but also specialised
            bindable properties such as Conveyor.IsMotorOn or PhotoEye.IsBlocked, etc.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BindableItem.ValueSource">
            <summary>
            The source of the value that's changing/changed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.BindableItem.ValueSourceChanged">
            <summary>
            Occurs when the value of the item changes, also providing information about the source of the new value, and whether the value was manually notified.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.BindableItem.ValueChangedListeners">
            <summary>
            BACKWARD COMAPTIBILITY ONLY. DO NOT USE.
            <para>Use <see cref="E:Demo3D.Visuals.BindableItem.ValueChanged" /> instead.</para>
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.BindableItem.ValueChanged">
            <summary>
            Occurs when the value of the item changes.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.BindableItem.BindingNameChanged">
            <summary>
            Occurs when the name of the item changes.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.BindingName">
            <summary>
            The name of the bindable item.  Usually the name of the custom property, but
            for other specialized items (such as Conveyor.IsMotorOn) returns the binding name ("IsMotorOn").
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.#ctor">
            <summary>
            Creates a new bindable item.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.#ctor(Demo3D.Visuals.Visual,System.String,System.Type,Demo3D.PLC.Comms.AccessRights,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Creates a new bindable item and attaches it to a visual.
            </summary>
            <param name="visual">The visual to attach to.</param>
            <param name="bindingName">The name of the item.</param>
            <param name="type">The type of the item.</param>
            <param name="defaultAccess">The default access rights.</param>
            <param name="allowedAccess">The allowed access rights.</param>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.Visual">
            <summary>
            Gets or sets the visual that this bindable item is attached to.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.Type">
            <summary>
            The declared .Net type of the item.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.PropertyName">
            <summary>
            Support for System.ComponentModel.PropertyChangedEventArgs
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.AllowedAccess">
            <summary>
            Returns the allowed access for external IO on this item.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.DefaultAccess">
            <summary>
            Returns the default access for external IO on this item.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.IOControl">
            <summary>
            Gets or sets a property to control how individual updates to this item are presented externally.
            </summary>
            <remarks>
            <para>
            By default, external IO is compressed such that changing the value of an item from (for example) 1 to 2 to 3,
            may result in only the value 3 being written externally (to a PLC or other server).
            Setting IOControl.PreserveAllUpdates forces each update (1 to 2, and 2 to 3) to be written externally.
            </para>
            <para>
            Setting IOControl.FastScanRate tells the caches to expect the value to change at high frequency.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.PreserveAllUpdates">
            <summary>
            <para>DO NOT USE. JUST DELETE THE CALL.</para>
            <para>VERY RELUCTANTLY re-add dummy method. WILL BE deleted for 2024. Support/Consulting need a big kick.</para>
            This has been a no-op since 2016.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.Value">
            <summary>
            Gets or sets the value of the item.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.ValueIs``1">
            <summary>
            Test whether the Value is of the given type.
            </summary>
            <typeparam name="T">Type to check the value is of.</typeparam>
            <returns>Whether the value is of type T or not.</returns>
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.ValueAs``1">
            <summary>
            Cast the value to a specific type if necessary.
            </summary>
            <typeparam name="T">Type to cast the value to.</typeparam>
            <returns>The Value cast to type T.</returns>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.IsBound">
            <summary>
            Returns true if this item is bound to a server item in the TagBrowser.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.IsBindingInterface">
            <summary>
            Declares a bindable item as part of the binding interface for a component.
            Yes: Bindable item is definitely part of the API.
            Maybe: Bindable item may be part of the API.
            No: Bindable item is definitely not part of the API.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.BindingInterface">
            <summary>
            Gets/sets if the bindable item has a declared binding interface.
            Normally, aspects manage the BAPI themselves.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.HasBindingInterface">
            <summary>
            Returns true if the bindable item has a declared binding interface.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem.Expression">
            <summary>
            Returns the full expression of the item.
            Includes the full name of the associated visual and the binding name.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.BindableItem.ExpressionChanged">
            <summary>
            Occurs when the Expression changes.  For example if the associated visual's name changes.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.DetachFromVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BindableItem.Clone">
            <summary>
            Creates a new BindableItem that is a copy of this item.
            </summary>
            <returns>A new copy of the BindableItem.</returns>
        </member>
        <member name="T:Demo3D.Visuals.BindableItem`1">
            <summary>
            Bind a server item to a value.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableItem`1.Value">
            <summary>
            Get or set the the BindableItem.Value in a typesafe way.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItem`1.op_Implicit(Demo3D.Visuals.BindableItem{`0})~`0">
            <summary>
            Implicitly extract value from the BindableItem<typeparamref name="T" /> wrapper.
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:Demo3D.Visuals.ReadFromServer`1">
            <summary>
            Bind a server item to a value.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.WriteToServer`1">
            <summary>
            Bind a server item to a value.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BindableItems">
            <summary>
            Class for searching visuals for bindable items.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItems.FindBindableItems(Demo3D.Visuals.IBindableItemOwner)">
            <summary>
            Find all bindable properties belonging to a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItems.FindBindableItems(System.Object)">
            <summary>
            Find all bindable properties belonging to a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItems.FindBindableItems(Demo3D.Visuals.Visual)">
            <summary>
            Find all bindable properties belonging to a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BindableItems.FindBindableItem(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Find a bindable property belonging to a visual by name.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.OPC.Plugin.ServerProperty">
            <summary>
            Self-contained property bag for a property grid giving some feedback and edit capabilities over an IServer.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IOutlineRendererEffect.Add(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual},Demo3D.Visuals.OutlineDescription)">
            <summary>
            Add a collection of visuals to rendered with an outline
            </summary>
            <param name="visuals">The visuals whose outline will be rendered</param>
            <param name="desc">The description of the outline</param>
        </member>
        <member name="M:Demo3D.Visuals.IOutlineRendererEffect.Add(Demo3D.Visuals.Visual,Demo3D.Visuals.OutlineDescription)">
            <summary>
            Add a visual to rendered with an outline
            </summary>
            <param name="visual">The visual whose outline will be rendered</param>
            <param name="desc">The description of the outline</param>
        </member>
        <member name="M:Demo3D.Visuals.IOutlineRendererEffect.Add(Demo3D.ControlPoints.IControlPoint,Demo3D.Visuals.OutlineDescription)">
            <summary>
            Add a control point to rendered with an outline
            </summary>
            <param name="cp">The control point whose outline will be rendered</param>
            <param name="desc">The description of the outline</param>
        </member>
        <member name="T:Demo3D.Visuals.OutlineRendererEffect">
            <summary>
            Optimized Effect renderer for outlines
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BeforeCreatePhysicsDelegate">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.AfterCreatePhysicsDelegate">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.BeforeDestroyPhysicsDelegate">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.AfterDestroyPhysicsDelegate">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.PhysicsBodyType">
            <summary>
            The physics to create for a PhysicsObject.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingCrossDirection">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingStopsEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingRightStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingLeftStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingForwardsStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingReverseStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingCrossPosition">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingCrossSpeedProfile">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingSpeedProfile">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingAngle">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingMode">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.TrackingDirection">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.Position">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.Port">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.InertiaTensorScale">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsProperties.FrictionFactor">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsProperties.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsProperties.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.PhysicsObject">
            <summary>
            Abstract class representing the a physical object of no particular shape.
            The derived classes implement different physics and graphics primitives such as boxes, spheres and cylinders.
            Physics objects can be used to represent the physics of loads, vehicles, sensors and deflectors. 
            The physics can also be disabled making them only graphical.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ContainsChildGeometry">
            <summary>
            Whether the physics object's body contains geometry for any of its children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.SilentlyUseParentBody">
            <summary>
            Whether the parent body should be used but it should appear as though it is not used
            when the geometry blocks sensors (D-5164).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.#ctor">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.Dispose">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.AddBlockingLoad(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.RemoveBlockingLoad(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ConnectorControlPoints">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ControlPoints">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.ClearControlPoints">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.NotifyOnDragStartVr">
            <summary>
            NotifyOnDragStart destroys physics which we don't want when using VR
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.Reset">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.Initialize">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Props">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AutoDisable">
            <summary>If True, then the body will disable itself after a certain period of inactivity. This is a physics optimization; inactive bodies will appear red in the physics view (press F8 to see physics view).</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.GravityEnabled">
            <summary>Whether the object is affected by gravity or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.BodyType">
            <summary>'Visual Only' is just the graphics. 'Load' will be available to load creators and be affected by gravity. 'Vehicle' is like a load but isn't transient and remains in the scene after a Reset. 'Deflector' is fixed in space and will deflect other objects. 'Sensor' is fixed in space but will fire scripts when other objects come into contact with it.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.FrictionMaterial">
            <summary>'Visual Only' is just the graphics. 'Load' will be available to load creators and be affected by gravity. 'Vehicle' is like a load but isn't transient and remains in the scene after a Reset. 'Deflector' is fixed in space and will deflect other objects. 'Sensor' is fixed in space but will fire scripts when other objects come into contact with it.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Softness">
            <summary>How tolerant this object is to penetration from other objects.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Mass">
            <summary>Set the mass of the body. Setting this changes the density according to the bounding box.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Kinematic">
            <summary>If True and BodyType is Vehicle, then this body may be animated (with MoveTo, for example) such that it will interact correctly with loads. This is useful for building lift platforms, shuttles, etc.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AngularDamping">
            <summary>Angular damping threshold for physics-based rotations</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.LinearDamping">
            <summary>The percentage of the rigid body's linear velocity that is lost per second. This can be used to simulate air resistance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AngularFactor">
            <summary>The world-space axes in which the rigid body is permitted to rotate. Values of one and zero specify that rotation is disabled and enabled respectively.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.LinearFactor">
            <summary>The world-space axes in which the rigid body is permitted to rotate. Values of one and zero specify that rotation is disabled and enabled respectively.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.LocalCenterOfMassOffset">
            <summary>The local-space offset that is applied to the rigid body's center of gravity. Not supported by ODE.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.CcdMotionThreshold">
            <summary>The distance in one time step above which continuous collision detection is enabled. Setting this to zero disables continuous collision detection for the body.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Solver">
            <summary>The constraint solver to use for the physics body (AGX Only).</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Speed">
            <summary>The current speed of the visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.UseParentBody">
            <summary>When true, this visual will not create a rigid body of its own, but add its geom to its parent. This is useful for creating components from several visuals that must remain internally stable.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.DeleteWhenFloorHit">
            <summary>If this is true and the body type is set to 'Load' and the load touches the floor at any time it will be deleted after the number of seconds defined by the 'Delete Loads After' setting for the project.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.DeleteOnReset">
            <summary>Whether the object should be deleted on reset or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Tracking">
            <summary>The properties to allow the object to track along and/or from side to side on a conveyor it is attached to. This allows vehicle movements like sorters, magic shoes, palletizers, etc.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingCrossDirection">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingStopsEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingRightStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingLeftStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingForwardsStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingReverseStop">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingCrossPosition">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingCrossSpeedProfile">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingSpeedProfile">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingAngle">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingMode">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.TrackingDirection">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.Position">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ClearedTimeout">
            <summary>The amount of time to wait from a clearing event until the OnClearedTimeout occurs. The event is not raised if the sensor is blocked during the timeout period.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.BlockedTimeout">
            <summary>The amount of time to wait from a blocking event until the OnBlockedTimeout occurs. The event is not raised if the sensor is cleared during the timeout period.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ClearedTime">
            <summary>The time the sensor was last cleared.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.BlockedTime">
            <summary>The time the sensor was last blocked.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.SenseMultipleLoads">
            <summary>If true the OnBlocked and OnCleared are called for every load that blocks or clears the sensor. If false the events are only fired for the first load that blocks the sensor. Subsequent touching loads keep it blocked and the OnCleared occurs for the first load when the last load is cleared.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AttachToConveyor">
            <summary>If True, then the object will snap itself to the center line of a conveyor surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AttachPosition">
            <summary>The offset to snap to on a conveyor, useful for building vehicles which track the inner side of a conveyor loop.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AttachDirection">
            <summary>When attaching to a conveyor snap with the X axis align Forwards, Reverse or Nearest where Nearest means snap either way favoring the current relative orientation of the object.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnAttachToVisual">
            <summary>Occurs when the physics object is attached to a conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnBlocked">
            <summary>Occurs when the sensor is blocked.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnBlockedTimeout">
            <summary>Occurs when the sensor has been blocked for BlockedTimeout seconds (BodyType must be Sensor).</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnCleared">
            <summary>Occurs when the sensor is cleared (BodyType must be Sensor).</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnClearedTimeout">
            <summary>Occurs when the sensor has been cleared for ClearedTimeout seconds (BodyType must be Sensor).</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnContact">
            <summary>Occurs when BodyType is Deflector and something collides with the object.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnContactTimeout">
            <summary>Occurs when BodyType is Deflector and the OnContactTimeout occurs.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnDetachFromVisual">
            <summary>Occurs when the physics object is detached from a conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnProcessContact">
            <summary>Occurs when processing volumetric physics contact points. Arguments are the sender, the load visual and the contact details (of type ContactInfo). Implementing this handler can severely impact performance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnReportCollisionImpulse">
            <summary>Reports collision impulses. Reporting of impulses must be enabled on the Scene. Implementing this handler can severely impact performance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ContactTimeout">
            <summary>The amount of time to wait from a contact event until the OnContactTimeout is fired.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ContactEnabled">
            <summary>If True, then the object will fire the OnContact event when another object collides with it. Objects usually bounce against other objects, so this property is set False after the event is raised.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnTargetHit">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnTargetHitX">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnTargetHitY">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnTargetHitZ">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.OnTrackingParentChanged">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.IK">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.IKRotation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.IKRotationEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.DeflectorBlocksSensors">
            <summary>
            If true then the deflector is able to block and clear sensors. Useful when attached to a moving conveyor or vehicle to see when it reaches a certain position.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.SetProperties(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.PositionUpdated">
            <summary>
            Called when the Position property has been updated and the visual should move to reflect the new property value/expression.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.AttachToProperties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.CreateGeometry">
            <summary>
            Creates the geometry for the physics body, or returns null if there is no collision
            geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.AddGeometryToCompound(Demo3D.Visuals.PhysicsCompoundGeometry,Demo3D.Visuals.PhysicsGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Adds the <paramref name="geometry" /> to the <paramref name="compound" />.
            </summary>
            <remarks>
            If the <paramref name="geometry" /> is a compound, then it is flattened before being
            added to the <paramref name="compound" />.
            </remarks>
            <param name="compound">The compound to which the geometry should be added.</param>
            <param name="geometry">The geometry to add.</param>
            <param name="accumulatedTransform">The accumulated transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.PopulateCompound(Demo3D.Visuals.PhysicsObject,Demo3D.Visuals.PhysicsCompoundGeometry,System.Int32)">
            <summary>
            Populates the <paramref name="compound" /> with the geometry belonging to the specified
            physics object and the geometry of any children that are set to
            <see cref="P:Demo3D.Visuals.PhysicsObject.UseParentBody" />.
            </summary>
            <remarks>
            Specity the number of <paramref name="levels" /> to be 1 in order to add only the
            geometry for the <paramref name="root" /> physics object. A value of 2 specifies that
            geometry is added for the <paramref name="root" /> physics object and its immediate
            children.
            </remarks>
            <param name="root">The physics object.</param>
            <param name="compound">The compound to be populated.</param>
            <param name="levels">The nummber of levels in the hierarchy to recurse.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.PopulateCompound(Demo3D.Visuals.PhysicsObject,Demo3D.Visuals.PhysicsObject,Demo3D.Visuals.PhysicsCompoundGeometry,Microsoft.DirectX.Matrix,System.Int32)">
            <summary>
            Populates the <paramref name="compound" /> with the geometry belonging to the specified
            physics object and the geometry of any children that are set to
            <see cref="P:Demo3D.Visuals.PhysicsObject.UseParentBody" />.
            </summary>
            <param name="root">The root physics object to which the compound will belong.</param>
            <param name="physicsObject">The physics object.</param>
            <param name="compound">The compound to be populated.</param>
            <param name="accumulatedTransform">The transformation matrix that transforms from the space of the root physics object to the space of the specified physics object.</param>
            <param name="levels">The nummber of levels in the hierarchy to recurse.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.AnnotateGeometryRecursive(Demo3D.Visuals.PhysicsGeometry,Demo3D.Visuals.PhysicsObject)">
            <summary>
            Annotates the geometry as belonging to the specified physics object.
            </summary>
            <param name="geometry">The geometry to annotate.</param>
            <param name="physicsObject">The physics object that the geometry belongs to.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.CreateGeometryInternal">
            <summary>
            Creates the physics object's geometry including the geometry of any children that are
            set to <see cref="P:Demo3D.Visuals.PhysicsObject.UseParentBody" />.
            </summary>
            <remarks>
            The geometry of any children that are set to <see cref="P:Demo3D.Visuals.PhysicsObject.UseParentBody" /> are included
            along with this physics object's geometry in a compound.
            
            If the physics object does not have any children that are set to
            <see cref="P:Demo3D.Visuals.PhysicsObject.UseParentBody" /> then only the geometry for this physics object is created
            and returned. However, if the geometry for this physics object is not a compound and
            <see cref="P:Demo3D.Visuals.PhysicsObject.LocalCenterOfMassOffset" /> is non-zero, then the geometry is placed inside
            of a compound (allowing some physics engines to shift the center of mass).
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.FindAncestorBody(System.Int32)">
            <summary>
            Traverses the visual hierarchy upwards, finding the first non-scene ancestor with a
            physics body.
            </summary>
            <param name="levels">The nummber of levels in the hierarchy to search.</param>
            <returns>The first ancestor with a physics body.</returns>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsObject.BeforeCreatePhysics">
            <summary>
            An event that is executed before physics is created for the physics object.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsObject.AfterCreatePhysics">
            <summary>
            An event that is executed after physics has been created for the physics object.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsObject.BeforeDestroyPhysics">
            <summary>
            An event that is executed before physics is destroyed for the physics object.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsObject.AfterDestroyPhysics">
            <summary>
            An event that is executed after physics has been destroyed for the physics object.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.CollisionBody">
            <summary>
            With composite rigid body hierarchies apply contact joints to the 
            top level body in the hierarchy
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.ParentRigidBody">
            <summary>
            Don't allow a fixed joint to the parent of a conveyor we're tracking on.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.NotifyChildrenOfHierarchyChange">
            <summary>
            If our Parent's rigid body has changed reevaluate joints and propagate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.IsOptimized(Demo3D.Visuals.Visual)">
            <summary>
            Should a visual be treated as a load and displayed in load chooser combo?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.IsFloor(Demo3D.Visuals.Visual)">
            <summary>
            Work out if the visual is a floor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.IsDeflector(Demo3D.Visuals.Visual)">
            <summary>
            Work out if we should get any properties from the deflector, like softness.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.IsSensor(Demo3D.Visuals.Visual)">
            <summary>
            Should a visual be treated as a sensor and not generate contact joints?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.IsLoad(Demo3D.Visuals.Visual)">
            <summary>
            Should a visual be treated as a load and displayed in load chooser combo?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.IsVehicle(Demo3D.Visuals.Visual)">
            <summary>
            Should a visual be treated as a vehicle and not removed on reset?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.IsTracking(Demo3D.Visuals.Visual)">
            <summary>
            Is visual tracking?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.HasContactSurface(Demo3D.Visuals.Visual)">
            <summary>
            Is some kind of movement surface or has an OnProcessContact script
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AttachType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsObject.AttachedVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <summary>Snap this accessory to a visual. An example of an accessory is a PhotoEye, or a BoxVisual that has AttachToConveyor=True. The LoadCreator is another example of an accessory.
            &lt;p&gt;
            The method reparents this accessory to the visual, orienting the accessory according to the "dir" parameter. 
            &lt;p&gt;
            This method is most useful for scripts that generate models, where photoeyes must be attached to conveyors. When models are built manually, Demo3D performs AttachToVisual() automatically when the accessory is brought close to the parent visual.</summary>
            <param name="visual">The visual to attach this accessory to. This is usually a conveyor.</param>
            <param name="dir">The orientation of the accessory. Allowed values are:
            &lt;ul&gt;
            &lt;li&gt;Forwards: X-axis of accessory points in the same direction of the parent visual
            &lt;li&gt;Reverse: X-axis of accessory points in opposite direction of the parent visual
            &lt;li&gt;Nearest: X axis aligns to closest orientation of parent's X-axis
            &lt;/ul&gt;</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AttachToVisual" />
            </example>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.DetachFromVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.PositionOf(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Demo3D.Visuals.ConveyorVisual@)">
            <summary>
            Position relative to a specific conveyor which may be current, in front or behind.
            This may also reparent if out of the bounds of the conveyor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.TransformTrackToWorld(Demo3D.Visuals.ConveyorVisual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Transform a tracking location to a world location. Offset is Props.Tracking.Offset, and is used to
            translate the [0,0,0] away from [start of conveyor, top of roller, center of roller].
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.TransformWorldToTrack(Demo3D.Visuals.ConveyorVisual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Transform a world location into a tracking location. Offset is Props.Tracking.Offset, and is used to
            translate the [0,0,0] away from [start of conveyor, top of roller, center of roller].
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsObject.RoutingInfo">
            <summary>
            Used when tracking to a target.
            TargetConveyor - the nearest reachable conveyor to the target location
            Route - a list of Connectors that take you from the current conveyor to the target conveyor
            NextConnector - the first connector in Route. This will be null (and Route empty) if the current 
            conveyor and target conveyor are the same
            NextConnectorX - the tracking X location of NextConnector. This is the tracking X location at which
            we need to change to the conveyor connected at NextConnector.
            CurrentRouteSection gives the adjusted X bounds for the current conveyor, together with the next/prev
            conveyors. The information is similar to NextConnector/NextConnectorX (which may disappear now). 
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.GetJunctionLocation(Demo3D.Visuals.Connector)">
            <summary>
            For wide conveyors (ie width &gt; 0), the location that Start/End connectors meet with Left/Right
            connectors is not the location that the tracking paths intersect. This method finds the intersection
            location for the tracking paths defined by such connections.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PhysicsObject.RouteSection">
            <summary>
            Abstraction of a conveyor section as used as part of a track. 
            Prev and Next will usually be the conveyors pointed to by the Start and End connectors respectively. 
            LowerX will be 0, unless the conveyor has its Start connected to the side of another conveyor, which
            means that LowerX will project backwards until it meets the main track path.
            UpperX will be the length of the conveyor, unless the End connector is connected to the side of another
            conveyor, whereby the it will project forwards until it meets the main track path.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.GetRouteSection(Demo3D.Visuals.ConveyorVisual,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.ClearRouteCache">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.GetRouteForTarget(Demo3D.Visuals.PhysicsObject.RoutingInfo,Demo3D.Visuals.ConveyorVisual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Boolean,System.Int32@)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.PhysicsObject.TrackingTargetControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.TrackingTargetControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsObject.TrackingTargetControlPoint.NotifyOnDragEnd">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.PhysicsType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.AngularSpeedProfile.CreepSpeed">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.AngularSpeedProfile.CreepDistance">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.SpeedProfilePropertyConverter">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SpeedProfile.CreepSpeed">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SpeedProfile.CreepDistance">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SpeedProfile.ForceCreep">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SpeedProfile.IsCreeping(System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SpeedProfile.GetSpeedAtDistance(System.Double)">
            <summary>
            How fast should we be going given a distance to the target.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SpeedProfile.Equals(System.Object)">
            <summary>
            Equals on speed profile is used to determine if the speed profile is
            equal to a default and if so don't save it out.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.DefaultSpeedProfileAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DefaultAngularSpeedProfileAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.TrackAccessory">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CompatibilityJointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConvexHullCache">
            <summary>
            Cache of convex-hulls.
            </summary>
            <remarks>
            The cached convex-hulls are not physics geometry, but rather an intermediate convex-hull
            type that is used to quickly and repeatedly instantiate convex-hull physics geometry without
            the expensive computation each time.
            
            Resource keys are mapped to arrays of convex-hulls. This allows convex-hull decompositions
            to be cached.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.ConvexHullCache.cache">
            <summary>
            Mapping from resource keys to arrays of convex-hulls.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConvexHullCache.disposed">
            <summary>
            Whether the cache has been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConvexHullCache.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConvexHullCache.Get(Demo3D.Visuals.ResourceKey)">
            <summary>
            Attempts to find and return the array of convex-hulls for the specified resource
            <paramref name="key" />.
            </summary>
            <remarks>
            Will return null if no array of convex-hulls has been added under the given resource
            <paramref name="key" />.
            </remarks>
            <param name="key">The resource key.</param>
            <returns>The array of convex-hulls.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConvexHullCache.Remove(Demo3D.Visuals.ResourceKey)">
            <summary>
            Removes the array of convex-hulls from the cache mapped by the specified resource
            <paramref name="key" />.
            </summary>
            <param name="key">The resource key.</param>
            <returns>True if the array of convex-hulls was removed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConvexHullCache.Add(Demo3D.Visuals.ResourceKey,ConvexHull[])">
            <summary>
            Adds the array of convex-hulls into the cache, mapped by the specified resource
            <paramref name="key" />.
            </summary>
            <param name="key">The resource key.</param>
            <param name="convexHulls">The array of convex-hulls.</param>
            <returns>True if the array of convex-hulls was added, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConvexHullCache.Add(Demo3D.Visuals.ResourceKey,ConvexHull)">
            <summary>
            Adds the convex-hull into the cache, mapped by the specified resource
            <paramref name="key" />.
            </summary>
            <param name="key">The resource key.</param>
            <param name="convexHull">The convex-hulls.</param>
            <returns>True if the convex-hull was added, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Visuals.SensorDelegate">
            <summary>
            Used for notifying when sensors are blocked or cleared.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PostCollideDelegate">
            <summary>
            Used for notification after collision detection.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PostCollideDataDelegate">
            <summary>
            Used for notification after collision detection.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ProcessContactHandler">
            <summary>
            An alternative to using the ProcessContact virtual method on a visual. This allows for
            notification of collisions against specific geometry in a visual. This is only useful when
            the visual's physics object has a compound geometry.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ProcessCollisionHandler">
            <summary>
            An alternative to using the ProcessCollision virtual method on a visual. This allows for
            notification of collisions against specific geometry in a visual. This is only useful when
            the visual's physics body has a compound geometry.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsStepCompletedListener">
            <summary>
            Called at the end of a physics step, after the dynamic response phase has been performed.
            For example, you may subscribe for this event if you're waiting for something like a lift to
            reach its top or bottom position.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PhysicsStepBeforeProcessCollisionsListener">
            <summary>
            Called immediately before collisions are processed.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsStepBeforeResolveListener">
            <summary>
            Called immediately before the dynamic response phase.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.SpaceType">
            <summary>
            Old ODE collision space types.
            </summary>
            <remarks>
            These are no longer used, except for in compatibility functions in order not to break old
            scripts that called into the physics engine.
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsEngine.EngineType">
            <summary>
            Enumeration of the available physics engines.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsEngine.SolverType">
            <summary>
            Enumeration of the available physics constraint solvers (AGX Only).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.defaultSolver">
            <summary>
            Default constraint solver type.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.app">
            <summary>
            The parent application.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.document">
            <summary>
            The parent document.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.engine">
            <summary>
            The physics engine.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.renderer">
            <summary>
            The physics renderer.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.threadId">
            <summary>
            The ID for the thread that instantiated the physics engine.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.registeredThreadIds">
            <summary>
            The list of registered thread IDs.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.convexHullCache">
            <summary>
            The cache of convex-hulls.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.time">
            <summary>
            The current simulation time.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.Ticks">
            <summary>
            Counter incremented every time <see cref="M:Demo3D.Visuals.PhysicsEngine.AdvanceTime(System.Boolean,System.Double)" /> is called, and reset to zero on <see cref="M:Demo3D.Visuals.PhysicsEngine.Reset" />.
            <remarks>
            Can be used to notice in other code if a new physics step has been started,
            allowing per-physics step caches to be implemented.
            </remarks>
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.contactsCount">
            <summary>
            The total number of contact points generated in the collision detection phase.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.callbacksCount">
            <summary>
            The total number of ProcessCollision calls made following the collision detection phase.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.processCollisionsTime">
            <summary>
            The time taken to process collisions in the previous timestep.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.detectCollisionsTime">
            <summary>
            The time taken to detect collisions in the previous timestep.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.solveTime">
            <summary>
            The time taken to solve constraints in the previous timestep.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.processCollisionsSingleThreaded">
            <summary>
            Whether to process collisions received from the physics engine in the simulation thread.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.ccdBodyCount">
            <summary>
            The number of bodies that have continuous collision detection enabled.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.automerging">
            <summary>
            Whether auto-merging is enabled (AGX Only).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.exceptions">
            <summary>
            The exceptions that occurred during the contect processing.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.frictionErrors">
            <summary>
            The friction coefficient errors that occurred during the time-step.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.processContactLock">
            <summary>
            Object to lock when running "OnProcessContact" scripts.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.reportCollisionImpulseLock">
            <summary>
            Object to lock when running "OnReportCollisionImpulse" scripts.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.handlerLock">
            <summary>
            Object to lock when calling contact or collision handler delegates.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.physicsStepStarted">
            <summary>
            Called before the collision detection phase.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.physicsStepBeforeProcessCollisions">
            <summary>
            Called before collisions are processed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.physicsStepBeforeResolve">
            <summary>
            Called before the dynamic response phase.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.physicsStepCompleted">
            <summary>
            Called after the dynamic response phase.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.postCollideDelegates">
            <summary>
            List of callbacks for the post collision detection event.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.sensorDelegates">
            <summary>
            List of callbacks for sensors.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.postCollideEvents">
            <summary>
            List of post collide events.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.sensorVisuals">
            <summary>
            List of visuals that are subscribed to be notified of blocked and cleared events.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.needsStartUsingPhysics">
            <summary>
            Whether we need to run <see cref="M:Demo3D.Visuals.IBuilder.OnStartUsingPhysics(System.Boolean)" /> upon initialize
            because something subscribed to physics step events before the document was initialized.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.oldDetectedLoads">
            <summary>
            The list of loads that were colliding with sensors in the previous timestep.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.newDetectedLoads">
            <summary>
            The list of loads that are colliding with sensors in the current timestep.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.geometryContactHandlers">
            <summary>
            Handlers subscribed to be notified when a specific geometry encounters a contact point.
            </summary>
            <remarks>
            Using geometry contact handlers is deprecated. Use geometry collision handlers instead.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.geometryCollisionHandlers">
            <summary>
            Handlers subscribed to be notified by a specific geometry is involved in a collision.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.bodies">
            <summary>
            The cached list of all physics bodies present in the physics world.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.kinematicBodies">
            <summary>
            The cached list of kinematic rigid bodies present in the physics world.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.dynamicBodies">
            <summary>
            The cached list of dynamic (non-kinematic) rigid bodies present in the physics world.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.temporaryBodyList">
            <summary>
            Used for efficiently counting physics bodies.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.invalidateRigidBodyTransformationMatricesTemporaryVisualList">
            <summary>
            List of visuals to call <see cref="M:Demo3D.Visuals.Visual.InvalidateMatrixFromPhysics" /> on during <see cref="M:Demo3D.Visuals.PhysicsEngine.InvalidateRigidBodyTransformationMatrices" />.
            <para>
            It is only used during <see cref="M:Demo3D.Visuals.PhysicsEngine.InvalidateRigidBodyTransformationMatrices" />, but is stored here so it is reused.
            </para>
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.keepAwakeQueue">
            <summary>
            The queue of physics bodies that need their wake counter resetting.
            </summary>
            <remarks>
            Conveyors often need to keep loads awake when the motor is activated. However, setting
            the wake counter makes an engine API call, which cannot be performed during the
            collision detection phase. Therefore, we defer such calls until after the collision
            detection phase has completed.
            
            Note that we actually store weak references to the physics bodies, since the
            <see cref="M:Demo3D.Visuals.PhysicsEngine.KeepAwake(Demo3D.Visuals.PhysicsRigidBody)" /> function can be called at any time and by the time the queue is
            processed the physics body may have been deleted.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.stayAwakeQueue">
            <summary>
            The queue of PhysX static trigger/sensor bodies that need to be kept awake for the next
            timestep.
            </summary>
            <remarks>
            We need to keep sensors awake whilst they are being blocked since we don't get any
            contact points for sleeping bodies.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.wakeUpQueue">
            <summary>
            The queue of physics bodies that need to be woken up after the collision detection phase
            has completed.
            </summary>
            <remarks>
            Conveyors often need to wake up sleeping loads when the motor is activated. However, the
            <see cref="P:Demo3D.Visuals.PhysicsRigidBody.Active" /> property makes an engine API call, which cannot be
            performed during the collision detection phase. Therefore, we defer such calls until
            after the collision detection phase has completed.
            
            Note that we actually store weak references to the physics bodies, since the
            <see cref="M:Demo3D.Visuals.PhysicsEngine.WakeUp(Demo3D.Visuals.PhysicsRigidBody)" /> function can be called at any time and by the time the queue is
            processed the physics body may have been deleted.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.noneGroup">
            <summary>
            The special "None" collision group.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.loadsGroup">
            <summary>
            The collision group for loads.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.floorsGroup">
            <summary>
            The collision group for floors.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.conveyorsGroup">
            <summary>
            The collision group for conveyors.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.deflectorsGroup">
            <summary>
            The collision group for deflectors.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.stopBladesGroup">
            <summary>
            The collision group for stop blades.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.sensorsGroup">
            <summary>
            The collision group for sensors.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.vehiclesGroup">
            <summary>
            The collision group for vehicles.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.simulationGroup">
            <summary>
            The collision group for planar physics.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.diagnosticSensorsGroup">
            <summary>
            The collision group for diagnostic sensors.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.Engine">
            <summary>
            The internal physics engine.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.Document">
            <summary>
            The document to which the physics engine belongs.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.Time">
            <summary>
            The current simulation time.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.ContactsCount">
            <summary>
            The total number of contact points generated in the collision detection phase.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.CallbacksCount">
            <summary>
            The total number of ProcessContact calls made following the collision detection phase.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.SolverIterations">
            <summary>
            Number of iterations to use when solving constraints in the dynamics response phase.
            </summary>
            <remarks>
            The supplied value is clamped to the range [1, 1000].
            It is possible to reduce the physics computational cost by reducing the number of solver
            iterations. However, fewer solver iterations will result in less realistic physics
            behaviour. The default value is 10 and it is not recommended to use fewer than 4
            iterations. For greater physics accuracy you can increase the number of iterations.
            Using a very high number of iterations (&gt; 100) is unlikely to yield noticably more
            accurate physics behaviour. You usually get much more gain by reducing the timestep.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.RandomSeed">
            <summary>
            The random seed for the physics engine.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.SleepingTime">
            <summary>
            The time that a rigid body must be idle, according to the rigid body's
            <see cref="P:Demo3D.Visuals.PhysicsRigidBody.LinearSleepingThreshold" /> and
            <see cref="P:Demo3D.Visuals.PhysicsRigidBody.AngularSleepingThreshold" /> values, before it is allowed to
            enter the sleeping state.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.CCD">
            <summary>
            Whether Continuous Collision Detection should be performed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.ProcessCollisionsSingleThreaded">
            <summary>
            Whether to process collisions received from the physics engine in the simulation thread.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.engineType">
            <summary>
            The current physics engine.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsEngine.analytics">
            <summary>
            The analytics item that is used to track the usage of the AGX physics item. 
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.Type">
            <summary>
            The current physics engine.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.DefaultSolver">
            <summary>
            The default constraint solver.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.AutoMerging">
            <summary>
            Whether auto-merging is enabled (AGX Only).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.TrackAGXAnalytics(Demo3D.Visuals.PhysicsEngine.EngineType)">
            <summary>
            If the EngineType is being changed to/from EngineType.AGX, trigger the necessary analytics event to track it is about to be enabled/dsiabled.
            Also, add/remove the the app.BeforeDocumentLoaded event handler as we may need to check if AGX is being removed when loading a new document.
            </summary>
            <param name="value">The new EngineType value to be set.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.TrackIfAGXIsBeingDisabled">
            <summary>
            Called when the engine type is being set (either via a property change or before loading a new document).
            If the current EngineType is AGX, trigger an analytics event to track it is about to be disabled.
            Also remove the app.BeforeDocumentLoaded event handler as we no longer need to check if AGX is being removed when loading a new document.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.TrackIfAGXIsBeingEnabled(Demo3D.Visuals.PhysicsEngine.EngineType)">
            <summary>
            Called when the engine type is being set. 
            If value is EngineType.AGX, trigger an analytics event to track it is about to be enabled.
            Also add the app.BeforeDocumentLoaded event handler as we need to check if AGX is being removed when loading a new document.
            </summary>
            <param name="value">The new EngineType value to be set.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.App_BeforeDocumentLoaded(System.Object,System.EventArgs)">
            <summary>
            If a new document is being loaded, analytics will need to track whether AGX is being disabled (even if it will be re-enabled by the newly loaded document).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.ProcessCollisionsTime">
            <summary>
            The time spent processing collisions in the most recent timestep.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.EngineCollisionDetectionTime">
            <summary>
            The time spent detecting collisions in the most recent timestep.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.EngineSolverTime">
            <summary>
            The time spent solving constraints in the most recent timestep.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.EngineProcessingTime">
            <summary>
            The total time spent processing physics in the most recent timestep.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.ProcessContactLock">
            <summary>
            Object to lock when running "OnProcessContact" scripts.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.ReportCollisionImpulseLock">
            <summary>
            Object to lock when running "OnReportCollisionImpulse" scripts.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.NoneGroup">
            <summary>
            The special "None" collision group.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.LoadsGroup">
            <summary>
            The collision group for loads.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.FloorsGroup">
            <summary>
            The collision group for floors.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.ConveyorsGroup">
            <summary>
            The collision group for conveyors.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.DeflectorsGroup">
            <summary>
            The collision group for deflectors.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.StopBladesGroup">
            <summary>
            The collision group for stop blades.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.SensorsGroup">
            <summary>
            The collision group for sensors.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.VehiclesGroup">
            <summary>
            The collision group for vehicles.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.SimulationGroup">
            <summary>
            The collision group for planar physics.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.DiagnosticSensorsGroup">
            <summary>
            The collision group for diagnostic sensors.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.PhysicsStepSubscribed">
            <summary>
            Whether anything has subscribed to receive physics step notifications.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.RenderPhysics">
            <summary>
            Whether to render physics.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsEngine.RenderBodyProperties">
            <summary>
            Whether to render physics body properties.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsEngine.PhysicsStepStarted">
            <summary>
            Subscribe/unsubscribe to be notified before the collision detection phase is performed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsEngine.PhysicsStepBeforeProcessCollisions">
            <summary>
            Subscribe/unsubscribe to be notified before collisions are processed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsEngine.PhysicsStepBeforeResolve">
            <summary>
            Subscribe/unsubscribe to be notified before the dynamics response phase is performed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.PhysicsEngine.PhysicsStepCompleted">
            <summary>
            Subscribe/unsubscribe to be notified after the dynamics response phase has been
            performed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.OnPhysicsStepStarted">
            <summary>
            Notifies subscribers that the collision detection phase is about to be performed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.OnPhysicsStepBeforeProcessCollisions">
            <summary>
            Notifies subscribers that the collisions are about to be processed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.OnPhysicsStepBeforeResolve">
            <summary>
            Notifies subscribers that the dynamics response phase is about to be performed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.OnPhysicsStepCompleted">
            <summary>
            Notifies subscribers that the dynamics response phase has been completed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.OnInitialize">
            <summary>
            Called when the document is initialized.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ClearPostCollideEvents">
            <summary>
            Removes all post collide events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ClearSensorDelegates">
            <summary>
            Removes all delegates for subscribers that wanted to be notified of blocked and cleared
            events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.AddPostCollideDelegate(Demo3D.Visuals.PostCollideDelegate,Demo3D.Visuals.Visual)">
            <summary>
            Subscribes to be notified after the collision detection phase has been completed.
            </summary>
            <param name="callback">The callback delegate.</param>
            <param name="visual">The visual that should be notified.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.AddPostCollideDelegate(Demo3D.Visuals.PostCollideDataDelegate,Demo3D.Visuals.Visual,System.Object)">
            <summary>
            Subscribes to be notified after the collision detection phase has been completed.
            </summary>
            <param name="callback">The callback delegate.</param>
            <param name="visual">The visual that should be notified.</param>
            <param name="data">The accompanying data.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.AddSensorDelegate(Demo3D.Visuals.SensorDelegate,Demo3D.Visuals.Visual)">
            <summary>
            Subscribes to be notified of blocked and cleared events.
            </summary>
            <param name="callback">The callback delegate.</param>
            <param name="visual">The visual that should be notified.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessPostCollideEvents">
            <summary>
            Notifies visuals that were subscribed to be notified when the collision detection phase
            was completed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessSensorDelegates">
            <summary>
            Notifies sensors that were subscribed to be notified of blocked and cleared events.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.UndetectLoads">
            <summary>
            Clears all loads that were recorded as being detected.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DetectLoad(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Records a load as having been detected by a sensor.
            </summary>
            <param name="load">The load that was detected.</param>
            <param name="sensor">The sensor that detected the load.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.UndetectLoad(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Unrecords a load as having been detected by a sensor.
            </summary>
            <param name="load">The load that was detected.</param>
            <param name="sensor">The sensor that detected the load.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.IsFirstContact(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Record the specified sensor and load as touching. The <see cref="M:Demo3D.Visuals.Visual.ProcessCollision(Demo3D.Visuals.PhysicsCollision,Demo3D.Visuals.Visual,Demo3D.Visuals.PhysicsBody)" />
            method will be called with other=null when the contact is broken, and the first time
            the load is seen this method will return true.
            </summary>
            <returns>True if this is the first contact, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.NotifyClearedSensors">
            <summary>
            Notifies sensors if they have been cleared.
            </summary>
            <remarks>
            Records loads that were colliding with sensors for the next timestep.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.AddGeometryProcessContactHandler(Demo3D.Visuals.PhysicsGeometry,Demo3D.Visuals.ProcessContactHandler)">
            <summary>
            Add a delegate for a specific geometry that is called for each contact point generated
            when the specified geometry collides with another physics object's geometry.
            </summary>
            <remarks>
            Using geometry contact handlers is deprecated. Use geometry collision handlers instead.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.AddGeometryProcessCollisionHandler(Demo3D.Visuals.PhysicsGeometry,Demo3D.Visuals.ProcessCollisionHandler)">
            <summary>
            Add a delegate for a specific geometry that is called for each collision that the
            specified geometry is involved in.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.RemoveGeometryProcessContactHandler(Demo3D.Visuals.PhysicsGeometry,Demo3D.Visuals.ProcessContactHandler)">
            <summary>
            Remove a contact handler delegate from a geom.
            </summary>
            <remarks>
            Using geometry contact handlers is deprecated. Use geometry collision handlers instead.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.RemoveGeometryProcessCollisionHandler(Demo3D.Visuals.PhysicsGeometry,Demo3D.Visuals.ProcessCollisionHandler)">
            <summary>
            Remove a collision handler delegate from a geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.SetFrictionMaterialRecursive(Demo3D.Visuals.PhysicsGeometry,Demo3D.Visuals.FrictionMaterialReference)">
            <summary>
            Sets the friction material down the geometry hierarchy.
            </summary>
            <param name="geometry">The geometry.</param>
            <param name="material">The friction material.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.FrictionMaterial(Demo3D.Visuals.Visual)">
            <summary>
            Retrieves the friction material for the geometry of the specified visual.
            </summary>
            <param name="visual">The visual.</param>
            <returns>Friction material for the visual's geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.FrictionMaterial(Demo3D.Visuals.PhysicsGeometry)">
            <summary>
            Retrieves the friction material for the specified geometry.
            </summary>
            <param name="geometry">The geometry.</param>
            <returns>The friction material for the geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.AddRenderPoint(Demo3D.Visuals.RenderPoint)">
            <summary>
            Renders the specified "render point".
            </summary>
            <param name="renderPoint">The "render point" to render.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.#ctor(Demo3D.Visuals.IBuilder,Demo3D.Visuals.Document)">
            <summary>
            Constructor.
            </summary>
            <param name="app">The parent application.</param>
            <param name="document">The parent document.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ErrorCallback(System.String,System.String)">
            <summary>
            Callback to receive error/warning/info messages from PhysX.
            </summary>
            <param name="type">The message type.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CollisionsCallback(PhysicsInterface.ICollisionList)">
            <summary>
            Callback to receive lists of collisions from PhysX.
            </summary>
            <remarks>
            Note that this may be called multiple times per time-step. Please also note that this
            may be called from multiple threads!
            </remarks>
            <param name="collisions">A list of collisions.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Construct">
            <summary>
            Constructs the physics world.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Clear">
            <summary>
            Destroys and reconstructs the physics world.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Clear(System.Boolean)">
            <summary>
            Destroys and reconstructs the physics world if specified.
            </summary>
            <param name="reconstruct">Whether to reconstruct the physics world.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Reset">
            <summary>
            Resets the physics simulation.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Dispose">
            <summary>
            Disposes of the physics engine.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.UpdateWorldAabb">
            <summary>
            Hints to the physics engine the extents of the physics world during simulation.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.RaiseException(System.Exception)">
            <summary>
            Logs an exception in a thread-safe way for deferred processing. 
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.RaiseFrictionError(Demo3D.Visuals.FrictionMaterialReference,Demo3D.Visuals.FrictionMaterialReference)">
            <summary>
            Logs a friction error in a thread-safe way.
            </summary>
            <param name="material1">The first friction material.</param>
            <param name="material2">The second friction material.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateContactJoint(Demo3D.Visuals.ContactInfo,System.Boolean)">
            <summary>
            Instructs the physics engine to create a contact joint for the specified contact point.
            </summary>
            <remarks>
            This function is deprecated and should not be used.
            </remarks>
            <param name="contactInfo">The contact point.</param>
            <param name="renderContact">Whether to render the contact point.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateContactJoint(Demo3D.Visuals.PhysicsBody,Demo3D.Visuals.PhysicsBody,Demo3D.Visuals.ContactInfo,System.Boolean)">
            <summary>
            Instructs the physics engine to create a contact joint for the specified contact point.
            </summary>
            <remarks>
            This function is deprecated and is not guaranteed to work correctly. Instead, it is
            recommended to return the correct value from the contact or collision event handler.
            </remarks>
            <param name="bodyA">The first physics body.</param>
            <param name="bodyB">The second physics body.</param>
            <param name="contactInfo">The contact point.</param>
            <param name="renderContact">Whether to render the contact point.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateContactJoint(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.ContactInfo,System.Boolean)">
            <summary>
            Instructs the physics engine to create a contact joint for the specified contact point.
            </summary>
            <remarks>
            This function is deprecated and is not guaranteed to work correctly. Instead, it is
            recommended to return the correct value from the contact or collision event handler.
            </remarks>
            <param name="visualA">The first visual.</param>
            <param name="visualB">The second visual.</param>
            <param name="contactInfo">The contact point.</param>
            <param name="renderContact">Whether to render the contact point.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessSensorCollision(Demo3D.Visuals.PhysicsCollision,Demo3D.Visuals.Visual,Demo3D.Visuals.PhysicsGeometry,System.Collections.Generic.List{Demo3D.Visuals.Visual})">
            <summary>
            Recurses down the geometry hierarchy looking for geometry with a non-null
            <see cref="P:Demo3D.Visuals.PhysicsGeometry.Visual" /> annotation. This method then calls
            <see cref="M:Demo3D.Visuals.Visual.ProcessCollision(Demo3D.Visuals.PhysicsCollision,Demo3D.Visuals.Visual,Demo3D.Visuals.PhysicsBody)" /> on the sensor, which blocks the sensor for
            blocking visuals set to <see cref="P:Demo3D.Visuals.PhysicsObject.UseParentBody" /> (D-4904). 
            </summary>
            <param name="collisionInfo">The collision.</param>
            <param name="sensor">The sensor.</param>
            <param name="geometry">The top-level geometry for the blocking body.</param>
            <param name="seen">The list of visuals that have already been set to block the sensor.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessSensorCollision(Demo3D.Visuals.PhysicsCollision,Demo3D.Visuals.Visual,Demo3D.Visuals.PhysicsGeometry)">
            <summary>
            Recurses down the geometry hierarchy looking for geometry with a non-null
            <see cref="P:Demo3D.Visuals.PhysicsGeometry.Visual" /> annotation. This method then calls
            <see cref="M:Demo3D.Visuals.Visual.ProcessCollision(Demo3D.Visuals.PhysicsCollision,Demo3D.Visuals.Visual,Demo3D.Visuals.PhysicsBody)" /> on the sensor, which blocks the sensor for
            blocking visuals set to <see cref="P:Demo3D.Visuals.PhysicsObject.UseParentBody" /> (D-4904). 
            </summary>
            <param name="collisionInfo">The collision.</param>
            <param name="sensor">The sensor.</param>
            <param name="geometry">The top-level geometry for the blocking body.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessCollisionFast(Demo3D.Visuals.PhysicsCollision)">
            <summary>
            Processes an individual collision, notifying handlers and determining whether to
            generate a contact joint.
            </summary>
            <remarks>
            Sets the friction coefficient from the geometry friction materials if the handlers or
            the colliding visuals' `ProcessContact` methods did not already set the friction
            coefficient.
            
            We used to call Visual.ProcessContact. This method now calls Visual.ProcessCollision for
            efficiency. This allows visuals to perform certain calculations once per collision
            rather than once per contact.
            
            This method may be called from multiple threads and the collisionInfo passed is reused
            each iteration (for efficiency). So holding onto the collisionInfo is a bad idea!
            </remarks>
            <param name="collisionInfo">The collision to process.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.InvalidateRigidBodyTransformationMatrices">
            <summary>
            Notifies all the visuals that own any of the rigid bodies in the physics world that they
            should update their transformation matrix to reflect changes to the rigid bodies'
            transformation matrices.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DetectCollisions(System.Double)">
            <summary>
            Detects collisions, populating the physics engine's collision list.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Step(System.Double)">
            <summary>
            Steps the physics world by the specified amount of time.
            </summary>
            <param name="deltaTime">The amount of time by which to advance the physics world.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.AdvanceTime(System.Boolean,System.Double)">
            <summary>
            Advances the physics simulation by the specified time.
            </summary>
            <param name="enabled">Whether to advance the physics simulation (false just advances the time).</param>
            <param name="deltaTime">The amount of time by which to advance.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.RemoveGeometryHandlers(Demo3D.Visuals.PhysicsGeometry)">
            <summary>
            Removes collision and contact handlers for the specified geometric collision shape.
            </summary>
            <remarks>
            Also removes handlers for any children if the passed geometry is a compound.
            </remarks>
            <param name="geometry">The physics geometry.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DestroyBody(Demo3D.Visuals.PhysicsBody)">
            <summary>
            Destroys the specified physics body.
            </summary>
            <param name="body">The physics body to destroy.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.RemoveVisual(Demo3D.Visuals.Visual)">
            <summary>
            Removes the physics body from the specified visual and then destroys the removed physics
            body.
            </summary>
            <param name="visual">The visual for whose physics body should be removed and destroyed.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.EnableCCD(Demo3D.Visuals.PhysicsBody,System.Double)">
            <summary>
            Enables continuous collision detection on the specified physics <paramref name="body" />.
            </summary>
            <param name="body">The physics body.</param>
            <param name="motionThreshold">The distance moved in a single timestep above which CCD is active (must be greater than zero).</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DisableCCD(Demo3D.Visuals.PhysicsBody)">
            <summary>
            Disables continuous collision detection on the specified physics
            <paramref name="body" />.
            </summary>
            <param name="body">The physics body.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.SyncKinematicBodies">
            <summary>
            Updates all kinematic bodes to match their position and orientation to that of their
            parent visuals. Also resets the linear and angular velocities to zero.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ResetKinematicBodiesVelocities">
            <summary>
            Resets the linear and angular velocities to zero for all kinematic bodies.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.MoveKinematicBodies(System.Double)">
            <summary>
            Updates the linear and angular velocities of all kinematic bodies so that the bodies are
            moved to match their parent visuals' positions and orientations in a single timestep.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.KinematicUpdated(Demo3D.Visuals.Visual)">
            <summary>
            Notifies linear/planar physics.
            </summary>
            <param name="visual">The visual whose body's kinematic property was updated.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessKeepAwakeQueue">
            <summary>
            Processes the deferred keep awake queue, resetting the wake counters for rigid bodies
            that were enqueued since the previous call.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessStayAwakeQueue">
            <summary>
            Processes the deferred stay awake queue, keeping all the static trigger/sensor bodies
            awake for at least the next time-step.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.KeepAwake(Demo3D.Visuals.PhysicsRigidBody)">
            <summary>
            Keeps the specified rigid body awake for the physics auto-disable time.
            </summary>
            <param name="body">The rigid body.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.ProcessWakeUpQueue">
            <summary>
            Processes the deferred wake up queue, waking up all sleeping rigid bodies that were
            enqueued since the previous call.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.WakeUp(Demo3D.Visuals.PhysicsRigidBody)">
            <summary>
            Wakes up the specified physics rigid body.
            </summary>
            <param name="body">The rigid body.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.WakeUpLoads(Demo3D.Visuals.BSphere)">
            <summary>
            Wakes up any loads that intersect the specified bounding sphere.
            </summary>
            <param name="bounds">The bounding sphere.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.WakeUpLoads(Demo3D.Visuals.BBox)">
            <summary>
            Wakes up any loads that intersect the specified bounding box.
            </summary>
            <param name="bounds">The bounding box.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateSimulationSensor(Demo3D.Visuals.PhysicsGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Creates a non-movable sensor for planar physics with the specified geometry and
            world-space transform in the physics world.
            </summary>
            <param name="geometry">The geometry for the sensor.</param>
            <param name="transform">The world-space transform for the sensor.</param>
            <returns>The created physics object for the sensor.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DestroySimulationSensor(Demo3D.Visuals.PhysicsBody)">
            <summary>
            Removes the specifed planar physics sensor from the physics world.
            </summary>
            <param name="sensor">The planar physics sensor to remove.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CountBodies">
            <summary>
            Counts the number of bodies in the physics world.
            </summary>
            <returns>The number of bodies in the physics world.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CountBodies(System.Predicate{Demo3D.Visuals.PhysicsBody})">
            <summary>
            Counts the number of bodies in the physics world matching the provided predicate.
            </summary>
            <param name="predicate">The predicate.</param>
            <returns>The number of bodies.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CountBodies(Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Counts the number of bodies in the physics world that prescribe to the specified group.
            </summary>
            <param name="group">The group.</param>
            <returns>The number of bodies.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.GetLocalOrientedBoundingBox(Demo3D.Visuals.PhysicsGeometry)">
            <summary>
            Calculates the oriented bounding box (OBB) for the specified geometry in local-space
            coordinates.
            </summary>
            <param name="geometry">The collision geometry.</param>
            <returns>The local-space oriented bounding box for the collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateRigidBodyProperties">
            <summary>
            Creates an empty container of properties that is used to instantiate a rigid body.
            </summary>
            <returns>The created rigid body properties container.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateRigidBody(Demo3D.Visuals.PhysicsRigidBodyProperties)">
            <summary>
            Creates a rigid body in the physics world.
            </summary>
            <param name="properties">The properties for the rigid body.</param>
            <returns>The rigid body that was created.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DestroyRigidBody(Demo3D.Visuals.PhysicsRigidBody)">
            <summary>
            Removes the specified rigid body from the physics world and disposes of it.
            </summary>
            <remarks>
            Along with the specified rigid body, the following will be removed from the physics
            world and destroyed:
            <list type="number">
            <item><description>The rigid body's geometry.</description></item>
            <item><description>Any joints that attached to the rigid body.</description></item>
            </list>
            </remarks>
            <param name="rigidBody">The rigid body to destroy.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateStaticBodyProperties">
            <summary>
            Creates an empty container of properties that is used to instantiate a static body.
            </summary>
            <returns>The created static body properties container.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateStaticBody(Demo3D.Visuals.PhysicsStaticBodyProperties)">
            <summary>
            Creates a static body in the physics world.
            </summary>
            <param name="properties">The properties for the static body.</param>
            <returns>The static body that was created.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DestroyStaticBody(Demo3D.Visuals.PhysicsStaticBody)">
            <summary>
            Removes the specified static body from the physics world and disposes of it.
            </summary>
            <remarks>
            Along with the specified static body, the following will be removed from the physics
            world and destroyed:
            <list type="number">
            <item><description>The static body's geometry.</description></item>
            </list>
            </remarks>
            <param name="staticBody">The static body to destroy.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateSphereGeometry(System.Double)">
            <summary>
            Creates a spherical collision geometry.
            </summary>
            <param name="radius">The radius for the sphere geometry.</param>
            <returns>The created sphere geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateBoxGeometry(System.Double,System.Double,System.Double)">
            <summary>
            Creates a box (rectangular parallelepiped) collision geometry.
            </summary>
            <param name="length">The length for the box geometry.</param>
            <param name="height">The height for the box geometry.</param>
            <param name="width">The width for the box geometry.</param>
            <returns>The created box geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateApproximateCylinderGeometry(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Approximates a cylindrical collision geometry using a convex-hull.
            </summary>
            <param name="radius">The radius for the cylinder geometry in the xy-plane.</param>
            <param name="length">The length for the cylinder geometry along the z-axis.</param>
            <param name="taper">The taper angle (in radians).</param>
            <param name="points">The number of points to use when approximating the circular profile.</param>
            <param name="margin">The collision margin for the convex-hull.</param>
            <returns>The created convex-hull geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateCylinderGeometry(System.Double,System.Double)">
            <summary>
            Creates a cylindrical collision geometry formed about the z-axis.
            </summary>
            <param name="radius">The radius for the cylinder geometry in the xy-plane.</param>
            <param name="length">The length for the cylinder geometry along the z-axis.</param>
            <returns>The created cylinder geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.GetMeshPositionsAndIndices(Demo3D.Visuals.IMesh,System.Numerics.Vector3[]@,System.Int32[]@)">
            <summary>
            Populates the provided arrays of positions and indices with the data from the specified
            mesh.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="positions">The array of vertex positions to be populated.</param>
            <param name="indices">The array of indices (into the array of vertex positions) to be populated.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateTriangleMeshGeometry(Demo3D.Visuals.IMesh)">
            <summary>
            Creates a concave collision geometry formed of triangular faces.
            </summary>
            <param name="mesh">The mesh from which to create the triangle mesh geometry.</param>
            <returns>The created triangle mesh geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.GetConvexHulls(Demo3D.Visuals.IMesh,System.Double,System.Boolean,Demo3D.Visuals.ConvexHullDecompositionProperties)">
            <summary>
            Attempts to find the (cached) array of convex-hulls for the specified mesh and margin
            combination. If a cache entry is not found, then the convex-hull(s) are created and
            cached.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="margin">The collision margin.</param>
            <param name="decomposition">Whether to look for a convex-hull decomposition (true) or a single convex-hull (false).</param>
            <param name="props">The properties to use when performing convex-hull decomposition.</param>
            <returns>The convex-hull decomposition.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.GetConvexHulls(Demo3D.Visuals.IMesh,System.Double,Demo3D.Visuals.ConvexHullDecompositionProperties)">
            <summary>
            Attempts to find the (cached) convex-hull decomposition for the specified mesh and
            margin combination. If a cache entry is not found, then the convex decomposition is
            created and cached.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="margin">The collision margin.</param>
            <param name="props">The properties to use when performing convex-hull decomposition.</param>
            <returns>The convex-hull decomposition.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.GetConvexHull(Demo3D.Visuals.IMesh,System.Double)">
            <summary>
            Attempts to find the (cached) convex-hull for the specified mesh and margin combination.
            If a cache entry is not found, then the convex-hull is created and cached.
            </summary>
            <param name="mesh">The mesh.</param>
            <param name="margin">The collision margin.</param>
            <returns>The convex-hull.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateConvexHullGeometryByDecomposition(Demo3D.Visuals.IMesh,System.Double,Demo3D.Visuals.ConvexHullDecompositionProperties)">
            <summary>
            Decomposes the provided mesh into a number of convex-hulls.
            </summary>
            <remarks>
            This method first computes the convex-hull decomposition for the specified
            <paramref name="mesh" />. The convex-hull decomposition is then cached so that we only
            perform the computationally expensive operations required to generate the convex-hull
            decomposition once. The convex-hull decomposition is then used to create the compound of
            physics convex-hull geometry.
            </remarks>
            <param name="mesh">The mesh from which to create the convex-hull geometry.</param>
            <param name="margin">The collision margin for the convex-hulls.</param>
            <param name="props">The properties to use when performing convex-hull decomposition.</param>
            <returns>The created compound physics geometry, containing convex-hulls.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateConvexHullGeometry(Demo3D.Visuals.IMesh,System.Double)">
            <summary>
            Creates a convex-hull geometry that tightly wraps the vertices that form the provided
            mesh.
            </summary>
            <remarks>
            This method first computes the convex-hull for the specified <paramref name="mesh" /> and
            <paramref name="margin" />. That convex-hull is then cached so that we only perform the
            computationally expensive operations required to generate the convex-hull once. The
            convex-hull is then used to create the physics convex-hull geometry.
            </remarks>
            <param name="mesh">The mesh from which to create the convex-hull geometry.</param>
            <param name="margin">The collision margin for the convex-hull.</param>
            <returns>The created convex-hull geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateConvexHullGeometry(System.Collections.Generic.IEnumerable{Microsoft.DirectX.Vector3},System.Double)">
            <summary>
            Creates a convex-hull geometry from the provided collection of points that form the
            convex-hull.
            </summary>
            <param name="vertices">The collection of points.</param>
            <param name="margin">The collision margin for the convex-hull.</param>
            <returns>The created convex-hull geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateCompoundGeometry">
            <summary>
            Creates an empty compound collision geometry.
            </summary>
            <returns>The created compound geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DestroyGeometry(Demo3D.Visuals.PhysicsGeometry)">
            <summary>
            Removes the specified geometry from the physics world and disposes of it.
            </summary>
            <remarks>
            This is often not required. When assigning new geometry to a body, through setting
            <see cref="P:Demo3D.Visuals.PhysicsBody.Geometry" />, the old geometry is automatically destroyed. Where
            this is useful is where it is required to destroy some geometry that has not yet been
            added to a <see cref="T:Demo3D.Visuals.PhysicsBody" />.
            </remarks>
            <param name="geometry">The geometry to destroy.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateFixedJoint(Demo3D.Visuals.PhysicsRigidBody,Demo3D.Visuals.PhysicsRigidBody)">
            <summary>
            Creates a fixed joint in the physics world that constrains the two specified rigid
            bodies to maintain their current positions and orientations relative to each other.
            </summary>
            <remarks>
            It is advisable to use a compound geometric collision shape instead of a fixed joint
            where possible.
            </remarks>
            <param name="rigidBody1">The first rigid body to constrain.</param>
            <param name="rigidBody2">The second rigid body to constrain.</param>
            <returns>The created fixed joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateParentChildFixedJoint(Demo3D.Visuals.PhysicsRigidBody,Demo3D.Visuals.PhysicsRigidBody)">
            <summary>
            Creates a fixed joint in the physics world that constrains the two specified rigid
            bodies to maintain their current positions and orientations relative to each other. The
            mass of the child's rigid body is transferred to the parent's rigid body and the child's
            rigid body is set to ignore gravity. This is all just a hack to get fixed joints
            behaving more as we would like.
            </summary>
            <param name="child">The child's rigid body to constrain.</param>
            <param name="parent">The parent's rigid body to constrain.</param>
            <returns>The created fixed joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateFixedJoint(Demo3D.Visuals.PhysicsRigidBody)">
            <summary>
            Creates a fixed joint in the physics world that constrains the specified rigid body
            to maintain its current position and orientation in the physics world.
            </summary>
            <remarks>
            It is advisable to use a kinematic body instead of a fixed joint where possible.
            </remarks>
            <param name="rigidBody">The rigid body to constrain.</param>
            <returns>The created fixed joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateBallSocketJoint(Demo3D.Visuals.PhysicsRigidBody,Demo3D.Visuals.PhysicsRigidBody,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a ball and socket (spherical) joint in the physics world that constrains the
            two specified rigid bodies to maintain a fixed distance from the specified world-space
            anchor position.
            </summary>
            <param name="rigidBody1">The first rigid body to constrain.</param>
            <param name="rigidBody2">The second rigid body to constrain.</param>
            <param name="anchor">The world-space position for the pivot point.</param>
            <returns>The created ball and socket joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateBallSocketJoint(Demo3D.Visuals.PhysicsRigidBody,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a ball and socket (spherical) joint in the physics world that constrains the
            specified rigid body to maintain a fixed distance from the specified world-space anchor
            position.
            </summary>
            <param name="rigidBody">The rigid body to constrain.</param>
            <param name="anchor">The world-space position for the pivot point.</param>
            <returns>The created ball and socket joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateHingeJoint(Demo3D.Visuals.PhysicsRigidBody,Demo3D.Visuals.PhysicsRigidBody,Microsoft.DirectX.Matrix)">
            <summary>
            Creates a hinge (revolute) joint in the physics world that constrains the two specified
            rigid bodies to maintain a fixed distance from the origin of the specified transform but
            are allowed to pivot about the z-axis of the specified transform.
            </summary>
            <param name="rigidBody1">The first rigid body to constrain.</param>
            <param name="rigidBody2">The second rigid body to constrain.</param>
            <param name="transform">The transform for the hinge in world-space, where the local z-axis is the axis of rotation.</param>
            <returns>The created hinge joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateHingeJoint(Demo3D.Visuals.PhysicsRigidBody,Microsoft.DirectX.Matrix)">
            <summary>
            Creates a hinge (revolute) joint in the physics world that constrains the specified
            rigid body to maintain a fixed distance from the origin of the speicied transform but is
            allowed to pivot about the z-axis of the specified transform.
            </summary>
            <param name="rigidBody">The rigid body to constrain.</param>
            <param name="transform">The transform for the hinge in world-space, where the local z-axis is the axis of rotation.</param>
            <returns>The created hinge joint.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateSliderJoint(Demo3D.Visuals.PhysicsRigidBody,Demo3D.Visuals.PhysicsRigidBody,Microsoft.DirectX.Matrix)">
            <summary>
            Creates a slider (prismatic) joint in the physics world that constrains the specified
            rigid bodies to maintain a fixed orientation relative to each other but are allowed to
            move in the direction of the specified transform's x-axis.
            </summary>
            <param name="rigidBody1">The first rigid body to constrain.</param>
            <param name="rigidBody2">The second rigid body to constrain.</param>
            <param name="transform">The transform for the slider in world-space, where the local x-axis is the axis of permitted movement.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateSliderJoint(Demo3D.Visuals.PhysicsRigidBody,Microsoft.DirectX.Matrix)">
            <summary>
            Creates a slider (prismatic) joint in the physics world that constrains the specified
            rigid body to maintain a fixed orientation in the physics world but is allowed to move
            in the direction of the specified transform's x-axis.
            </summary>
            <param name="rigidBody">The rigid body to constrain.</param>
            <param name="transform">The transform for the slider in world-space, where the local x-axis is the axis of permitted movement.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.DestroyJoint(Demo3D.Visuals.PhysicsJoint)">
            <summary>
            Removes the specified joint from the physics world and disposes of it.
            </summary>
            <remarks>
            It is not necessary to call this method when destroying a rigid body since any joints
            attached to the rigid body are automatically destroyed when the rigid body is destroyed.
            </remarks>
            <param name="joint">The joint to destroy.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateGroup(System.String)">
            <summary>
            Creates a collision group identified by the specified name.
            </summary>
            <remarks>
            Groups with the same name are determined to be equal.
            </remarks>
            <param name="name">The name that identifies the collision group.</param>
            <returns>The created collision group.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.CreateGroupList">
            <summary>
            Creates an empty collision group list.
            </summary>
            <returns>The created collision group list.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collides(Demo3D.Visuals.PhysicsGroup,Demo3D.Visuals.PhysicsGroup,System.Boolean)">
            <summary>
            Specifies whether physics objects prescribing to <paramref name="groupA" /> should
            collide with physics objects prescribing to <paramref name="groupB" />.
            </summary>
            <remarks>
            This specifies a symmetric relationship so that specifying `Collides(A, B, true)`
            implies also that `Collides(B, A, true)`. It is not assumed that `Collides(A, A) = true`
            by default.
            </remarks>
            <param name="groupA">The first group.</param>
            <param name="groupB">The second group.</param>
            <param name="shouldCollide">Whether physics objects prescribing to the first group should be tested for collisions against physics objects prescribing to the second group.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collides(Demo3D.Visuals.PhysicsGroup,Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Whether physics objects prescribing to <paramref name="groupA" /> should collide with
            physics objects prescribing to <paramref name="groupB" />.
            </summary>
            <param name="groupA">The first group.</param>
            <param name="groupB">The second group.</param>
            <returns>True if the two groups are tested against each other for collisions, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collides(System.Collections.Generic.IList{Demo3D.Visuals.PhysicsGroup},System.Collections.Generic.IList{Demo3D.Visuals.PhysicsGroup})">
            <summary>
            Whether physics objects prescribing to any of the groups in
            <paramref name="groupListA" /> are tested for collisions against physics objects
            prescribing to any of the groups in <paramref name="groupListB" />.
            </summary>
            <remarks>
            This method effectively computes the boolean OR of the cartesian product of the two
            group lists. For example, Collides([A, B], [C, D]) is true if and only if Collides(A, C)
            OR Collides(A, D) OR Collides(B, C) OR Collides(B, D).
            </remarks>
            <param name="groupListA">The first group list.</param>
            <param name="groupListB">The second group list.</param>
            <returns>True if any of the groups in the first group list are specified to collide with any of the groups in the second group list, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collides(Demo3D.Visuals.PhysicsBody,Demo3D.Visuals.PhysicsBody)">
            <summary>
            Whether the first physics object is tested for collisions against the second collision
            object by virtue of their groups.
            </summary>
            <param name="bodyA">The first physics body.</param>
            <param name="bodyB">The second physics body.</param>
            <returns>True if the two physics bodies are tested against each other for collisions, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collide(Demo3D.Visuals.PhysicsBody,Demo3D.Visuals.PhysicsGroup,System.Boolean)">
            <summary>
            Finds all physics bodies prescribed to the specified <paramref name="group" /> that are
            colliding with the specified <paramref name="body" />.
            </summary>
            <remarks>
            This method looks for any bodies that are prescribed to the specified group and that
            are colliding with the specified body. The usual group filtering is ignored.
            </remarks>
            <param name="body">The physics body to check for collisions against.</param>
            <param name="group">The group that any colliding physics bodies must be prescribed to.</param>
            <param name="updateAabbs">Whether to update the AABBs for all active bodies before finding collisions.</param>
            <returns>List of physics bodies that are colliding with the specified body and that are prescribed to the specified group.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collide(Demo3D.Visuals.PhysicsBody,System.Collections.Generic.IList{Demo3D.Visuals.PhysicsGroup},System.Boolean)">
            <summary>
            Finds all physics objects prescribed to any of the groups specified in the group list
            that are colliding with the specified <paramref name="body" />.
            </summary>
            <remarks>
            This method looks for any bodies that are prescribed to one or more groups in the
            provided groups list and that are colliding with the specified body. The usual group
            filtering is ignored.
            </remarks>
            <param name="body">The physics object to check for collisions against.</param>
            <param name="groups">The group list containing groups that the colliding physics bodies must be prescribed to one or more of.</param>
            <param name="updateAabbs">Whether to update the AABBs for all active bodies before finding collisions.</param>
            <returns>List of physics bodies that are colliding with the specified body and that are prescribed to one or more of the groups in the specified group list.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collide(Demo3D.Visuals.BBox,Demo3D.Visuals.PhysicsGroup,System.Boolean)">
            <summary>
            Finds all physics bodies prescribed to the specified <paramref name="group" /> that are
            intersecting the specified bounding box.
            </summary>
            <param name="bounds">The bounding box.</param>
            <param name="group">The group that any intersecting physics bodies must be prescribed to.</param>
            <param name="updateAabbs">Whether to update the AABBs for all active bodies before finding collisions.</param>
            <returns>List of physics bodies that are intersecting with the specified bounding box and that are prescribed to the specified group.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collide(Demo3D.Visuals.BBox,System.Collections.Generic.IList{Demo3D.Visuals.PhysicsGroup},System.Boolean)">
            <summary>
            Finds all physics bodies prescribed to any of the groups specified in the group list
            that are intersecting the specified bounding box.
            </summary>
            <param name="bounds">The bounding box.</param>
            <param name="groups">The group list containing groups that the intersecting physics bodies must be prescribed to one or more of.</param>
            <param name="updateAabbs">Whether to update the AABBs for all active bodies before finding collisions.</param>
            <returns>List of physics bodies that are intersecting with the specified bounding box and that are prescribed to one or more of the groups in the specified group list.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collide(Demo3D.Visuals.BSphere,Demo3D.Visuals.PhysicsGroup,System.Boolean)">
            <summary>
            Finds all physics bodies prescribed to the specified <paramref name="group" /> that are
            intersecting the specified bounding sphere.
            </summary>
            <param name="bounds">The bounding sphere.</param>
            <param name="group">The group that any intersecting physics bodies must be prescribed to.</param>
            <param name="updateAabbs">Whether to update the AABBs for all active bodies before finding collisions.</param>
            <returns>List of physics bodies that are intersecting with the specified bounding sphere and that are prescribed to the specified group.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsEngine.Collide(Demo3D.Visuals.BSphere,System.Collections.Generic.IList{Demo3D.Visuals.PhysicsGroup},System.Boolean)">
            <summary>
            Finds all physics objects prescribed to any of the groups specified in the group list
            that are intersecting the specified bounding sphere.
            </summary>
            <param name="bounds">The bounding sphere.</param>
            <param name="groups">The group list containing groups that the intersecting physics objects must be prescribed to one or more of.</param>
            <param name="updateAabbs">Whether to update the AABBs for all active bodies before finding collisions.</param>
            <returns>List of physics objects that are intersecting with the specified bounding sphere and that are prescribed to one or more of the groups in the specified group list.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsInfo">
            <summary>
            Groups together physics information for Visuals.
            </summary>
            <remarks>
            This doesn't really do much anymore and we should probably just move its contents into Visual.
            </remarks>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.PhysicsInfo.Body">
            <summary>
            The physics body.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsInfo.BodyOffset">
            <summary>
            The local-space offset for the body.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsInfo.Kinematic">
            <summary>
            Whether the body should be kinematic.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsInfo.ObjectToWorldMatrix">
            <summary>
            Computes the transformation matrix for the <see cref="F:Demo3D.Visuals.PhysicsInfo.Body" />, taking into account the
            <see cref="F:Demo3D.Visuals.PhysicsInfo.BodyOffset" />.
            </summary>
            <returns>Transformation matrix for the body.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsInfo.SetMatrix(Microsoft.DirectX.Matrix)">
            <summary>
            Sets the body's transformation matrix, applying the body offset.
            </summary>
            <param name="transform">The transformation matrix.</param>
        </member>
        <member name="T:Demo3D.Visuals.Body">
            <summary>
            Compatibility.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BodyType">
            <summary>
            The types of physics body.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsBody">
            <summary>
            The base type for physics bodies, including static bodies and rigid bodies.
            </summary>
            <remarks>
            Provides a thin wrapper around <see cref="T:PhysicsInterface.IPhysicsObject" />.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsBody.body">
            <summary>
            The physics engine body.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsBody.Visual">
            <summary>
            The parent visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsBody.Solver">
            <summary>
            The solver to use for the physics body.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsBody.disposed">
            <summary>
            Whether the body has been disposed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Body">
            <summary>
            The physics engine body.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsBody.Locked">
            <summary>
            Dummy for non-Debug builds to stop needing to #ifdef DEBUG" Debug.Assert(!Locked) lines.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBody.#ctor(PhysicsInterface.IPhysicsObject)">
            <summary>
            Constructor.
            </summary>
            <param name="body">The physics engine body.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Type">
            <summary>
            The type of physics body.
            </summary>
            <remarks>
            There are various different types of physics body, each having different
            characteristics. Each different body type inherits from the base
            <see cref="T:Demo3D.Visuals.PhysicsBody" /> type.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Enabled">
            <summary>
            Whether the physics body is enabled in the physics world.
            </summary>
            <remarks>
            This is different from being <see cref="P:Demo3D.Visuals.PhysicsRigidBody.Active" />.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Geometry">
            <summary>
            The physics collision geometry that belongs to the physics body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Transform">
            <summary>
            The world-space to local-space transformation matrix for the physics body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Position">
            <summary>
            The world-space position for the physics body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Rotation">
            <summary>
            The world-space rotation matrix for the physics body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Aabb">
            <summary>
            The axis-aligned bounding box in world space.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.CcdMotionThreshold">
            <summary>
            The distance in one time step above which continuous collision detection is enabled.
            Setting this to zero disables continuous collision detection for the body.
            </summary>
            <remarks>
            This property should not be used directly. Instead, use
            <see cref="M:Demo3D.Visuals.PhysicsEngine.EnableCCD(Demo3D.Visuals.PhysicsBody,System.Double)" /> and
            <see cref="M:Demo3D.Visuals.PhysicsEngine.DisableCCD(Demo3D.Visuals.PhysicsBody)" />.
            </remarks>
            <remarks>
            This is particularly useful for small, fast moving bodies that would normally tunnel
            through other bodies. Continuous collision detection does incur a performance
            penalty, so use sparingly on only the objects that have been observed tunneling.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.Groups">
            <summary>
            A copy of the list of collision groups that are prescribed to the physics body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBody.IsDisposed">
            <summary>
            Whether the body has been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBody.AddGroup(Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Prescribes the specified collision group to the physics body.
            </summary>
            <param name="group">The collision group.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBody.RemoveGroup(Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Unprescribes the specified collision group from the physics body.
            </summary>
            <param name="group">The collision group.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBody.ContainsGroup(Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Whether the physics body has been prescribed the specified collision group.
            </summary>
            <param name="group">The collision group.</param>
            <returns>True if the specified collision group has been prescribed to the physics body, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBody.Get(PhysicsInterface.IPhysicsObject)">
            <summary>
            Retrieves the wrapper for the specified physics engine body.
            </summary>
            <param name="body">The physics engine body.</param>
            <returns>The wrapper for the physics engine body.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBody.Create(PhysicsInterface.IPhysicsObject)">
            <summary>
            Creates a wrapper instance for the specified physics engine body.
            </summary>
            <param name="body">The physics engine body.</param>
            <returns>The created wrapper for the physics engine body.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsRigidBody">
            <summary>
            Represents a dynamic or kinematic rigid body.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.#ctor(PhysicsInterface.IRigidBody)">
            <summary>
            Constructor.
            </summary>
            <param name="body">The physics engine rigid body.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.Body">
            <summary>
            The physics engine rigid body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.Active">
            <summary>
            Whether the rigid body is active (not sleeping) in the world.
            </summary>
            <remarks>
            A rigid body may be <see cref="P:Demo3D.Visuals.PhysicsBody.Enabled" /> but not active if its linear and angular
            velocities have fallen below a threshold value. You can wake such rigid bodies up by
            setting this property to true.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.Mass">
            <summary>
            The mass.
            </summary>
            <remarks>
            Mass ratios of colliding and interacting rigid bodies should be kept as low as possible,
            since large mass ratios can cause iterative dynamics-phase solvers to fail to converge.
            It is generally recommended to keep mass ratios below 1:10.
            
            For kinematic bodies the mass has no meaning, since kinematic bodies are unaffected by
            any any other bodies. Kinematic bodies may report a zero mass and setting the mass to
            anything other than zero may cause the kinematic body to become dynamic.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.LocalCenterOfMass">
            <summary>
            The center of mass in local space.
            </summary>
            <remarks>
            Can be adjusted by setting <see cref="P:Demo3D.Visuals.PhysicsRigidBody.LocalCenterOfMassOffset" />.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.LocalCenterOfMassOffset">
            <summary>
            The center of mass offset in local space.
            </summary>
            <remarks>
            The physics engine may automatically determine the <see cref="P:Demo3D.Visuals.PhysicsRigidBody.LocalCenterOfMass" />.
            However, to do this it makes certain assumptions (such as uniform density) that may
            not be valid. You can adjust the physics-engine-caclulated center of mass by setting
            this property.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.Velocity">
            <summary>
            The linear velocity in world space.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.AngularVelocity">
            <summary>
            The angular velocity in world space.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.Kinematic">
            <summary>
            Whether the body is kinematic.
            </summary>
            <remarks>
            Kinematic bodies are unaffected by any other bodies or by any forces (including
            gravity). They may be moved by setting the <see cref="P:Demo3D.Visuals.PhysicsBody.Transform" /> property
            or by setting the <see cref="P:Demo3D.Visuals.PhysicsRigidBody.Velocity" /> and <see cref="P:Demo3D.Visuals.PhysicsRigidBody.AngularVelocity" /> properties.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.GravityEnabled">
            <summary>
            Whether gravity affects the rigid body.
            </summary>
            <remarks>
            This property is irrelevant for kinematic bodies since such bodies are unaffected by
            all forces (including gravity). However, for dynamic rigid bodies, setting this to false
            will cause the body to float as if it were in space.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.LinearDamping">
            <summary>
            The fraction of the rigid body's linear speed that is lost per second.
            </summary>
            <remarks>
            The value supplied should be in the interval [0, 1].
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.AngularDamping">
            <summary>
            The fraction of the rigid body's angular speed that is lost per second.
            </summary>
            <remarks>
            The value supplied should be in the interval [0, 1].
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.LinearFactor">
            <summary>
            The permitted world-space axes of movement.
            </summary>
            <remarks>
            A value of 0 specifies that movement is permitted in that axis, whilst a value of 1
            specifies that movement is not permitted in that axis.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.AngularFactor">
            <summary>
            The permitted world-space axes of rotation.
            </summary>
            <remarks>
            A value of 0 specifies that rotation is permitted in that axis, whilst a value of 1
            specifies that rotation is not permitted in that axis.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.LinearSleepingThreshold">
            <summary>
            The linear speed below which the rigid body may sleep.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.AngularSleepingThreshold">
            <summary>
            The angular speed below which the rigid body may sleep.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.HasJoints">
            <summary>
            Does this rigid body have any joints?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBody.Joints">
            <summary>
            The joints that affect the rigid body.
            </summary>
            <remarks>
            The returned list is immutable.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.ApplyForce(Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified force to the rigid body's center of mass.
            </summary>
            <param name="force">The force to apply in world space.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.ApplyForce(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified force to the point specified by the <paramref name="offset" /> to
            the rigid body's center of mass.
            </summary>
            <param name="force">The force to apply in world space.</param>
            <param name="offset">The offset from the rigid body's center of mass in world space.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.ApplyLocalForce(Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified force to the rigid body's center of mass.
            </summary>
            <param name="force">The force to apply in local space.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.ApplyLocalForce(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified force to the point specified by the <paramref name="offset" /> to
            the rigid body's center of mass.
            </summary>
            <param name="force">The force to apply in local space.</param>
            <param name="offset">The offset from the rigid body's center of mass in local space.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.ApplyTorque(Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified angular force to the rigid body's center of mass.
            </summary>
            <param name="torque">The angular force to apply in world space.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.ApplyLocalTorque(Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified angular force to the rigid body's center of mass.
            </summary>
            <param name="torque">The angular force to apply in local space.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.Get(PhysicsInterface.IRigidBody)">
            <summary>
            Retrieves the wrapper for the specified physics engine rigid body.
            </summary>
            <param name="body">The physics engine rigid body.</param>
            <returns>The wrapper for the physics engine rigid body.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.Create(PhysicsInterface.IRigidBody)">
            <summary>
            Creates a wrapper instance for the specified physics engine rigid body.
            </summary>
            <param name="body">The physics engine rigid body.</param>
            <returns>The created wrapper for the physics engine rigid body.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.AddForce(Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified force to the rigid body's center of mass.
            </summary>
            <remarks>
            This method is deprecated. Please instead use <see cref="M:Demo3D.Visuals.PhysicsRigidBody.ApplyForce(Microsoft.DirectX.Vector3)" />.
            </remarks>
            <param name="force">The force to apply in world space.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBody.AddTorque(Microsoft.DirectX.Vector3)">
            <summary>
            Applies the specified angular force to the rigid body's center of mass.
            </summary>
            <remarks>
            This method is deprecated. Please instead use <see cref="M:Demo3D.Visuals.PhysicsRigidBody.ApplyTorque(Microsoft.DirectX.Vector3)" />.
            </remarks>
            <param name="torque">The angular force to apply in world space.</param>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsRigidBodyProperties">
            <summary>
            A container for properties used to instantiate a <see cref="T:Demo3D.Visuals.PhysicsRigidBody" />.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsRigidBodyProperties.props">
            <summary>
            The physics engine rigid body properties.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsRigidBodyProperties.disposed">
            <summary>
            Whether the properties have been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBodyProperties.#ctor(PhysicsInterface.IRigidBodyProperties)">
            <summary>
            Constructor.
            </summary>
            <param name="props">The physics engine rigid body properties.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBodyProperties.RigidBodyProperties">
            <summary>
            The physics engine rigid body properties.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBodyProperties.Mass">
            <summary>
            The mass for the rigid body.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsRigidBody.Mass" />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBodyProperties.Transform">
            <summary>
            The local-to-world space transform for the rigid body.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsBody.Transform" />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBodyProperties.Geometry">
            <summary>
            The collision geometry for the rigid body.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsBody.Geometry" />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBodyProperties.Kinematic">
            <summary>
            Whether the rigid body should be kinematic.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsRigidBody.Kinematic" />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsRigidBodyProperties.GravityEnabled">
            <summary>
            Whether the rigid body should be affected by gravity.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsRigidBody.GravityEnabled" />
        </member>
        <member name="M:Demo3D.Visuals.PhysicsRigidBodyProperties.AddGroup(Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Adds the specified collision group to the list of groups that the rigid body should be
            prescribed to upon creation.
            </summary>
            <param name="group">The collision group.</param>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsStaticBody">
            <summary>
            Represents a static physics body, which has no mass or inertia tensor and does not respond
            dynamically to forces exerted upon it by other colliding bodies.
            </summary>
            <remarks>
            It is easy to confuse static bodies with kinematic rigid bodies. The main difference is that
            kinematic bodies can have a linear and angular velocity and must be manually moved logically
            as they are unaffected by other bodies colliding or otherwise interacting with with them.
            Static bodies, on the other hand, are not supposed to move. Moving them by setting the
            <see cref="P:Demo3D.Visuals.PhysicsBody.Transform" /> property *may* work, but it is not guaranteed to work.
            Whether it works or not is down to how they are implemented in the physics engine. There is
            one exception to this in that moving a <see cref="P:Demo3D.Visuals.PhysicsStaticBody.Trigger" /> static body *is* guaranteed to
            work as you would expect.
            
            So, the general rule is that if you intend to move for the body to be influenced by other
            bodies then you should use a regular <see cref="T:Demo3D.Visuals.PhysicsRigidBody" />. If you intend to move
            the body yourself without using forces (e.g. by setting the
            <see cref="P:Demo3D.Visuals.PhysicsBody.Transform" />, <see cref="P:Demo3D.Visuals.PhysicsRigidBody.Velocity" /> or 
            <see cref="P:Demo3D.Visuals.PhysicsRigidBody.AngularVelocity" /> properties), then you should use a
            <see cref="T:Demo3D.Visuals.PhysicsRigidBody" /> with the <see cref="P:Demo3D.Visuals.PhysicsRigidBody.Kinematic" /> property
            set to true. If you intend for the body to be stationary during its lifetime, or you want a
            trigger/sensor, then you should use a <see cref="T:Demo3D.Visuals.PhysicsStaticBody" />.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsStaticBody.#ctor(PhysicsInterface.IStaticBody)">
            <summary>
            Constructor.
            </summary>
            <param name="body">The physics engine static body.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsStaticBody.Body">
            <summary>
            The physics engine static body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsStaticBody.Trigger">
            <summary>
            Whether the static physics body is acting as a trigger.
            </summary>
            <remarks>
            When a static physics body acts as a trigger contact points are still generated during
            the collision detection phase. However, contact joints are not created and so there is
            no physics-based dynamic response to the contact points. This is ideal for sensors.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsStaticBody.Get(PhysicsInterface.IStaticBody)">
            <summary>
            Retrieves the wrapper for the specified physics engine static body.
            </summary>
            <param name="body">The physics engine static body.</param>
            <returns>The wrapper for the physics engine static body.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsStaticBody.Create(PhysicsInterface.IStaticBody)">
            <summary>
            Creates a wrapper instance for the specified physics engine static body.
            </summary>
            <param name="body">The physics engine static body.</param>
            <returns>The created wrapper for the physics engine static body.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsStaticBodyProperties">
            <summary>
            A container for properties used to instantiate a <see cref="T:Demo3D.Visuals.PhysicsStaticBody" />.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsStaticBodyProperties.props">
            <summary>
            The physics engine static body properties.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsStaticBodyProperties.disposed">
            <summary>
            Whether the properties has been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsStaticBodyProperties.#ctor(PhysicsInterface.IStaticBodyProperties)">
            <summary>
            Constructor.
            </summary>
            <param name="props">The physics engine static body properties.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsStaticBodyProperties.StaticBodyProperties">
            <summary>
            The physics engine static body properties.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsStaticBodyProperties.Transform">
            <summary>
            The local-to-world space transform for the static body.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsBody.Transform" />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsStaticBodyProperties.Geometry">
            <summary>
            The collision geometry for the static body.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsBody.Geometry" />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsStaticBodyProperties.Trigger">
            <summary>
            Whether the static body should be a trigger/sensor.
            </summary>
            <seealso cref="P:Demo3D.Visuals.PhysicsStaticBody.Trigger" />
        </member>
        <member name="P:Demo3D.Visuals.PhysicsStaticBodyProperties.Movable">
            <summary>
            Whether the static body should be movable by setting the
            <see cref="P:Demo3D.Visuals.PhysicsBody.Transform" /> property.
            </summary>
            <remarks>
            Some physics engines are able to simulate non-movable bodies more efficiently. However,
            please note that setting this to false may not warn on subsequently setting the
            <see cref="P:Demo3D.Visuals.PhysicsBody.Transform" /> property. Doing so may also give different behaviour
            for different physics engines.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsStaticBodyProperties.AddGroup(Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Adds the specified collision group to the list of groups that the static body should be
            prescribed to upon creation.
            </summary>
            <param name="group">The collision group.</param>
        </member>
        <member name="T:Demo3D.Visuals.ProcessContactResult">
            <summary>
            The result of an OnProcessContact notification for low level handling of physics contact events.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ContactInfo">
            <summary>
            Class for handling low level processing of physics contact points.
            An instance of this is passed to the OnProcessContact event of certain visuals.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.ContactPoint">
            <summary>
            The mutable contact point.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Id1">
            <summary>
            Unique identifier for the first collision geometry involved in the contact.
            </summary>
            <remarks>
            This is used by some Intralox scripts.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Id2">
            <summary>
            Unique identifier for the first collision geometry involved in the contact.
            </summary>
            <remarks>
            This is used by some Intralox scripts.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Enabled">
            <summary>
            Whether a contact joint should be created for the contact point.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.ForceEnabled">
            <summary>
            Whether a contact joint should be created for the contact point, regardless of the value
            of <see cref="P:Demo3D.Visuals.ContactInfo.Enabled" />, <see cref="P:Demo3D.Visuals.ContactInfo.Result" /> and the value returned by
            <see cref="M:Demo3D.Visuals.Visual.ProcessCollision(Demo3D.Visuals.PhysicsCollision,Demo3D.Visuals.Visual,Demo3D.Visuals.PhysicsBody)" />.
            </summary>
            <remarks>
            This property is used to support the deprecated
            <see cref="M:Demo3D.Visuals.PhysicsEngine.CreateContactJoint(Demo3D.Visuals.ContactInfo,System.Boolean)" /> function that is
            called by Intralox scripts.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Render">
            <summary>
            Whether to render the contact point when debug rendering physics.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Result">
            <summary>
            Set the desired result of the process contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Normal">
            <summary>
            The surface normal on the first visual.
            Set this to be the normal of the surface at the point of contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Position">
            <summary>
            The position of the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.PenetrationDepth">
            <summary>
            How far into the object the contact has been generated.
            </summary>
            <remarks>
            Negative values imply penetration.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Body1">
            <summary>
            The first physics body involved in the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Body2">
            <summary>
            The second physics body involved in the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Visual1">
            <summary>
            The first visual involved in the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Visual2">
            <summary>
            The second visual involved in the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Geometry1">
            <summary>
            The first collision geometry involved in the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Geometry2">
            <summary>
            The second collision geometry involved in the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Speed">
            <summary>
            The speed in meters/second that the surface at the point of contact is moving at in the
            direction of the contact. This is the key to modeling conveyor type movement surfaces.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Speed2">
            <summary>
            The speed in meters/second that the surface at the point of contact is moving at
            orthogonal to the direction of the contact.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Mu">
            <summary>
            The coefficient of friction to use for the contact pair at the point of contact in the
            direction of the contact. This will be a combination of the friction materials for both
            surfaces.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Mu2">
            <summary>
            The coefficient of friction to use for the contact pair at the point of contact
            orthogonal to the direction of the contact. This will be a combination of the friction
            materials for both surfaces.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.FrictionDirection">
            <summary>
            The direction in which to apply the contact speed and coefficient of friction.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ContactInfo.Softness">
            <summary>
            The Constraint Force Mixing (CFM) parameter value.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ContactInfo.ConfigureMu(Demo3D.Visuals.FrictionMaterialReference)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ContactInfo.ConfigureMu">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ContactInfo.ConfigureMu2(Demo3D.Visuals.FrictionMaterialReference)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ContactInfo.ConfigureMu2">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ContactInfo.ConfigureFrictionDirection(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Setup the first friction direction.
            </summary>
            <param name="direction">Normalized vector describing direction of conveyor.</param>
            <param name="angle">Angle of friction relative to conveyor.</param>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsBoxGeometry">
            <summary>
            Represents a box physics collision geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBoxGeometry.#ctor(PhysicsInterface.IBoxGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The physics engine box collision geometry.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBoxGeometry.Geometry">
            <summary>
            The physics engine box collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBoxGeometry.Extents">
            <summary>
            The full extents of the box.
            </summary>
            <remarks>
            This is the (x, y, z) lengths in local space.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBoxGeometry.Get(PhysicsInterface.IBoxGeometry)">
            <summary>
            Retrieves the wrapper for the specified physics box collision geometry.
            </summary>
            <param name="geometry">The physics engine box collision geometry.</param>
            <returns>The wrapper for the physics engine box collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBoxGeometry.Create(PhysicsInterface.IBoxGeometry)">
            <summary>
            Creates a wrapper instance for the specified physics box collision geometry.
            </summary>
            <param name="geometry">The physics engine box collision geometry.</param>
            <returns>The created wrapper for the physics engine box collision geometry.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsCompoundGeometry">
            <summary>
            Represents a compound/composite physics collision geometry.
            </summary>
            <remarks>
            Compound collision geometries group together other collision geometries into a hierarchy.
            This is ideal for forming complex geometric collision shapes from multiple simple primitive
            collision shapes without resorting to a <see cref="T:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry" />.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.#ctor(PhysicsInterface.ICompoundGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The physics engine compound collision geometry.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsCompoundGeometry.Geometry">
            <summary>
            The physics engine compound collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsCompoundGeometry.Count">
            <summary>
            The number of child geometric collision shapes.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Child(System.Int32)">
            <summary>
            Accessor for the child geometric collision shape at the specified
            <paramref name="index" />.
            </summary>
            <param name="index">The index for the child geometric collision shape in the range [0, Count).</param>
            <returns>The child geometric collision shape.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Transform(System.Int32)">
            <summary>
            Accessor for the transform for the child geometric collision shape specified by the
            provided <paramref name="index" />.
            </summary>
            <param name="index">The index for the child geometric collision shape in the range [0, Count).</param>
            <returns>The transformation matrix for the child geometric collision shape relative to this geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Transform(System.Int32,Microsoft.DirectX.Matrix)">
            <summary>
            Sets the transform for the child geometric collision shape specified by the provided
            <paramref name="index" />.
            </summary>
            <param name="index">The index for the child geometric collision shape in the range [0, Count).</param>
            <param name="transform">The transformation matrix for the child geometric collision shape relative to this geometry.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Contains(Demo3D.Visuals.PhysicsGeometry)">
            <summary>
            Whether the specified collision geometry is an immediate child of the compound collision
            geometry.
            </summary>
            <param name="child">The collision geometry to look for.</param>
            <returns>True if the specified collision geometry is an immediate child, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Add(Demo3D.Visuals.PhysicsGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Adds the specified collision geometry as a child to the compound collision geometry.
            </summary>
            <param name="geometry">The collision geometry to add as a child.</param>
            <param name="transform">The local transformation matrix for the child relative to this geometry.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Remove(Demo3D.Visuals.PhysicsGeometry)">
            <summary>
            Removes the specified collision geometry from the compound collision geometry.
            </summary>
            <param name="geometry">The collision geometry to remove.</param>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Get(PhysicsInterface.ICompoundGeometry)">
            <summary>
            Retrieves the wrapper for the specified physics compound collision geometry.
            </summary>
            <param name="geometry">The physics engine compound collision geometry.</param>
            <returns>The wrapper for the physics engine compound collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCompoundGeometry.Create(PhysicsInterface.ICompoundGeometry)">
            <summary>
            Creates a wrapper instance for the specified physics compound collision geometry.
            </summary>
            <param name="geometry">The physics engine compound collision geometry.</param>
            <returns>The created wrapper for the physics engine compound collision geometry.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry">
            <summary>
            Represents a concave triangle mesh physics collision geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.#ctor(PhysicsInterface.ITriangleMeshGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The physics engine concave triangle mesh collision geometry.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.Geometry">
            <summary>
            The physics engine concave triangle mesh collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.VertexCount">
            <summary>
            The number of vertices that form the concave triangle mesh.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.Vertex(System.Int32)">
            <summary>
            The coordinates for the vertrex as the specified <paramref name="index" /> in world
            space.
            </summary>
            <param name="index">The index for the vertex in the range [0, <see cref="P:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.VertexCount" />).</param>
            <returns>The world space coordinates for the vertex at the specified index.</returns>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.FaceCount">
            <summary>
            The number of triangular faces that form the triangle mesh.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.IndexCount">
            <summary>
            The number of indices into the list of vertices that defines the triangular faces.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.Index(System.Int32)">
            <summary>
            The "index into the list of vertices" at the specified <paramref name="index" />.
            </summary>
            <param name="index">The index into the indices in the range [0, <see cref="P:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.IndexCount" />).</param>
            <returns>The corresponding index into the list of vertices.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.Get(PhysicsInterface.ITriangleMeshGeometry)">
            <summary>
            Retrieves the wrapper for the specified physics concave triangle mesh collision
            geometry.
            </summary>
            <param name="geometry">The physics engine concave triangle mesh collision geometry.</param>
            <returns>The wrapper for the physics engine concave triangle mesh collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConcaveTriangleMeshGeometry.Create(PhysicsInterface.ITriangleMeshGeometry)">
            <summary>
            Creates a wrapper instance for the specified physics concave triangle mesh collision
            geometry.
            </summary>
            <param name="geometry">The physics engine concave triangle mesh collision geometry.</param>
            <returns>The created wrapper for the physics engine concave triangle mesh collision geometry.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsConvexHullGeometry">
            <summary>
            Represents a convex-hull physics collision geometry.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsConvexHullGeometry.source">
            <summary>
            The convex-hull from which the geometry was created.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsConvexHullGeometry.localAabb">
            <summary>
            The bounding box local to the physics object or compound geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConvexHullGeometry.#ctor(PhysicsInterface.IConvexHullGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The physics engine convex-hull collision geometry.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConvexHullGeometry.Geometry">
            <summary>
            The physics engine convex-hull collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConvexHullGeometry.ConvexHull">
            <summary>
            The convex-hull to render.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConvexHullGeometry.LocalAabb">
            <summary>
            The axis-aligned bounding box local to the physics object or compound geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsConvexHullGeometry.VertexCount">
            <summary>
            The number of vertices that form the convex-hull.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConvexHullGeometry.Vertex(System.Int32)">
            <summary>
            The coordinates for the vertrex as the specified <paramref name="index" /> in world
            space.
            </summary>
            <param name="index">The index for the vertex in the range [0, <see cref="P:Demo3D.Visuals.PhysicsConvexHullGeometry.VertexCount" />).</param>
            <returns>The world space coordinates for the vertex at the specified index.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConvexHullGeometry.Get(PhysicsInterface.IConvexHullGeometry)">
            <summary>
            Retrieves the wrapper for the specified physics convex-hull collision geometry.
            </summary>
            <param name="geometry">The physics engine convex-hull collision geometry.</param>
            <returns>The wrapper for the physics engine convex-hull collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsConvexHullGeometry.Create(PhysicsInterface.IConvexHullGeometry)">
            <summary>
            Creates a wrapper instance for the specified physics convex-hull collision geometry.
            </summary>
            <param name="geometry">The physics engine convex-hull collision geometry.</param>
            <returns>The created wrapper for the physics engine convex-hull collision geometry.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsCylinderGeometry">
            <summary>
            Represents a cylinder physics collision geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCylinderGeometry.#ctor(PhysicsInterface.ICylinderGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The physics engine cylinder collision geometry.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsCylinderGeometry.Geometry">
            <summary>
            The physics engine cylinder collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsCylinderGeometry.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsCylinderGeometry.Length">
            <summary>
            The length.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCylinderGeometry.Get(PhysicsInterface.ICylinderGeometry)">
            <summary>
            Retrieves the wrapper for the specified physics cylinder collision geometry.
            </summary>
            <param name="geometry">The physics engine cylinder collision geometry.</param>
            <returns>The wrapper for the physics engine cylinder collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsCylinderGeometry.Create(PhysicsInterface.ICylinderGeometry)">
            <summary>
            Creates a wrapper instance for the specified physics cylinder collision geometry.
            </summary>
            <param name="geometry">The physics engine cylinder collision geometry.</param>
            <returns>The created wrapper for the physics engine cylinder collision geometry.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsGeom">
            <summary>
            Compatibility.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.GeometryType">
            <summary>
            The types of physics collision geometry.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsGeometry">
            <summary>
            The base type for physics collision geometry.
            </summary>
            <remarks>
            Provides a thin wrapper around <see cref="T:PhysicsInterface.IGeometry" />
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.Flags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.Flags.FixNormals">
            <summary>
            Whether to fix contact normals for the geometry.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.Flags.FilterContactPoints">
            <summary>
            Whether to filter contact points.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.Flags.ConveyorSurface">
            <summary>
            Whether the geometry represents a conveyor surface (e.g. belt or rollers).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.Flags.Disposed">
            <summary>
            Whether the geometry has been disposed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.geometry">
            <summary>
            The physics collision geometry.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.frictionMaterial">
            <summary>
            Reference to the friction material for the geometry.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.visual">
            <summary>
            The visual that created the geometry.
            </summary>
            <remarks>
            This is only set when <see cref="P:Demo3D.Visuals.PhysicsObject.ContainsChildGeometry" /> is true. We
            need to record the visual that the geometry was created for in such cases in order
            to correctly report blocking visuals for sensors (D-4904).
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGeometry.flags">
            <summary>
            Flags for the geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGeometry.#ctor(PhysicsInterface.IGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The physics collision geometry.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.Geometry">
            <summary>
            The physics collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.Visual">
            <summary>
            The visual that created the geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.Type">
            <summary>
            The type of collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.Aabb">
            <summary>
            The axis-aligned bounding box (AABB) in world space.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.Body">
            <summary>
            The physics body that the geometry belongs to.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.Margin">
            <summary>
            The collision margin for the geometry.
            </summary>
            <remarks>
            The collision margin is used by some physics engines to improve performance and
            reliability.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.FrictionMaterial">
            <summary>
            The friction material for the collision geometry.
            </summary>
            <remarks>
            When two physics bodies collide, the Coulomb friction coefficient is determined from the
            colliding geometries' friction materials.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.FixNormals">
            <summary>
            Whether to fix contact normals for the geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.FilterContactPoints">
            <summary>
            Whether to filter contact points.
            </summary>
            <remarks>
            This is currently only relevant when applied to collision geometry used by curve
            conveyors. For certain configurations we use approximate collision geometry for the
            belt/rollers. Enabling contact filtering will cause the movement surface to discard
            contact points that fall outside the region occupied by the real belt center geometry.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.IsConveyorSurface">
            <summary>
            Whether the geometry represents a conveyor surface (e.g. belt or rollers).
            </summary>
            <remarks>
            Setting this to true will cause contact points to have their friction direction and
            movement speed properties set by the conveyor's <see cref="T:Demo3D.Visuals.MovementSurface" />.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGeometry.IsDisposed">
            <summary>
            Whether the geometry has been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGeometry.Get(PhysicsInterface.IGeometry)">
            <summary>
            Retrieves the wrapper for the specified physics collision geometry.
            </summary>
            <param name="geometry">The physics engine collision geometry.</param>
            <returns>The wrapper for the physics engine collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGeometry.Create(PhysicsInterface.IGeometry)">
            <summary>
            Creates a wrapper instance for the specified physics collision geometry.
            </summary>
            <param name="geometry">The physics engine collision geometry.</param>
            <returns>The created wrapper for the physics engine collision geometry.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsSphereGeometry">
            <summary>
            Represents a spherical physics collision geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsSphereGeometry.#ctor(PhysicsInterface.ISphereGeometry)">
            <summary>
            Constructor.
            </summary>
            <param name="geometry">The physics engine sphere collision geometry.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSphereGeometry.Geometry">
            <summary>
            The physics engine sphere collision geometry.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSphereGeometry.Radius">
            <summary>
            The radius.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsSphereGeometry.Get(PhysicsInterface.ISphereGeometry)">
            <summary>
            Retrieves the wrapper for the specified physics sphere collision geometry.
            </summary>
            <param name="geometry">The physics engine sphere collision geometry.</param>
            <returns>The wrapper for the physics engine sphere collision geometry.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsSphereGeometry.Create(PhysicsInterface.ISphereGeometry)">
            <summary>
            Creates a wrapper instance for the specified physics sphere collision geometry.
            </summary>
            <param name="geometry">The physics engine sphere collision geometry.</param>
            <returns>The created wrapper for the physics engine sphere collision geometry.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsBallSocketJoint">
            <summary>
            Represents a ball and socket joint that permits <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyB" /> to
            freely move and rotate but maintain a fixed distance from the pivot <see cref="P:Demo3D.Visuals.PhysicsBallSocketJoint.Position" />.
            </summary>
            <remarks>
            Note that although the <see cref="P:Demo3D.Visuals.PhysicsBallSocketJoint.Position" /> property is in world space coordinates, the
            ball and socket is relative to <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> and so this property
            will be updated as <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> is moved.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBallSocketJoint.#ctor(PhysicsInterface.IBallSocketJoint)">
            <summary>
            Constructor.
            </summary>
            <param name="joint">The physics engine joint.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBallSocketJoint.Joint">
            <summary>
            The physics engine joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsBallSocketJoint.Position">
            <summary>
            The location of the pivot point in world space.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsBallSocketJoint.Get(PhysicsInterface.IBallSocketJoint)">
            <summary>
            Retrieves or creates the wrapper for the specified physics ball and socket joint.
            </summary>
            <param name="joint">The physics engine ball and socket joint.</param>
            <returns>The wrapper for the physics engine joint.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsFixedJoint">
            <summary>
            Represents joint that constraints <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyB" /> to maintain a fixed
            position and orientation relative to <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" />.
            </summary>
            <remarks>
            This is a rather computationally expensive constraint and generally it's not necessary.
            It is often possible to combine the two rigid bodies into one using a
            <see cref="T:Demo3D.Visuals.PhysicsCompoundGeometry" /> to group the geometric collision shapes.
            
            It is also worth noting that the dynamics-phase solvers typically allow constraints to be
            violated and this results in fixed joint behaving more like a spring than a hard constraint.
            It is strongly recommended to reconsider whether you *really* need a fixed joint!
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsFixedJoint.SavedProperties">
            <summary>
            Properties of the child before it was fixed to the parent using a fixed joint.
            </summary>
            <remarks>
            Fixed joints are pretty useless. To improve things we transfer the mass of the child to
            the parent and disable gravity for the child when fixing the two rigid bodies with a
            fixed joint.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsFixedJoint.SavedProperties.Mass">
            <summary>
            The mass of the child before it was fixed to the parent using a fixed joint.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsFixedJoint.SavedProperties.GravityEnabled">
            <summary>
            Whether gravity was enabled for the child before it was fixed to the parent using a
            fixed joint.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsFixedJoint.SavedProperties.#ctor(System.Single,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="mass">The mass of the child before it was fixed to the parent using a fixed joint.</param>
            <param name="gravityEnabled">Whether gravity was enabled for the child before it was fixed to the parent using a fixed joint.</param>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsFixedJoint.childProperties">
            <summary>
            Properties of the child before it was fixed to the parent using a fixed joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsFixedJoint.ChildProperties">
            <summary>
            Properties of the child before it was fixed to the parent using a fixed joint.
            </summary>
            <remarks>
            Fixed joints are pretty useless. To improve things we transfer the mass of the child to
            the parent and disable gravity for the child when fixing the two rigid bodies with a
            fixed joint.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsFixedJoint.#ctor(PhysicsInterface.IFixedJoint)">
            <summary>
            Constructor.
            </summary>
            <param name="joint">The physics engine joint.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsFixedJoint.Joint">
            <summary>
            The physics engine joint.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsFixedJoint.Get(PhysicsInterface.IFixedJoint)">
            <summary>
            Retrieves or creates the wrapper for the specified physics fixed joint.
            </summary>
            <param name="joint">The physics engine fixed joint.</param>
            <returns>The wrapper for the physics engine joint.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsHingeJoint">
            <summary>
            Represents a powered hinge, permitting <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyB" /> to orbit the
            hinge's <see cref="P:Demo3D.Visuals.PhysicsHingeJoint.Position" /> about the hinge's <see cref="P:Demo3D.Visuals.PhysicsHingeJoint.Axis" />.
            </summary>
            <remarks>
            Note that although the <see cref="P:Demo3D.Visuals.PhysicsHingeJoint.Position" /> and <see cref="P:Demo3D.Visuals.PhysicsHingeJoint.Axis" /> properties are in
            world space coordinates, the hinge is relative to <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> and
            so these properties will be updated as <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> is moved.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsHingeJoint.#ctor(PhysicsInterface.IHingeJoint)">
            <summary>
            Constructor.
            </summary>
            <param name="joint">The physics engine joint.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.Joint">
            <summary>
            The physics engine joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.Angle">
            <summary>
            The hinge angle in radians.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.LowerAngleLimit">
            <summary>
            The lower limit for the hinge angle.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.UpperAngleLimit">
            <summary>
            The upper limit for the hinge angle.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.Position">
            <summary>
            The location of the hinge in world space.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.Axis">
            <summary>
            The axis about which the hinge rotates in world space.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.TargetAngularSpeed">
            <summary>
            The target angular speed about the axis in radians per second.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsHingeJoint.MaximumTorque">
            <summary>
            The maximum force/toque that can be used to achieve the
            <see cref="P:Demo3D.Visuals.PhysicsHingeJoint.TargetAngularSpeed" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsHingeJoint.Get(PhysicsInterface.IHingeJoint)">
            <summary>
            Retrieves or creates the wrapper for the specified physics hinge joint.
            </summary>
            <param name="joint">The physics engine hinge joint.</param>
            <returns>The wrapper for the physics engine joint.</returns>
        </member>
        <member name="T:Demo3D.Visuals.JointType">
            <summary>
            The types of physics joint.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsJoint">
            <summary>
            The base type for physics joints/constraints.
            </summary>
            <remarks>
            Joints are used to constrain a pair of rigid bodies to each other or a single rigid body
            to the physics world. Some joints, such as <see cref="T:Demo3D.Visuals.PhysicsHingeJoint" /> and
            <see cref="T:Demo3D.Visuals.PhysicsSliderJoint" /> are powered and can be useful for simulating motors,
            hydraulic pistons and other actuators.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsJoint.joint">
            <summary>
            The physics engine joint.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsJoint.disposed">
            <summary>
            Whether the joint has been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsJoint.#ctor(PhysicsInterface.IJoint)">
            <summary>
            Constructor.
            </summary>
            <param name="joint">The physics engine joint.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsJoint.Joint">
            <summary>
            The physics engine joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsJoint.Type">
            <summary>
            The type of joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA">
            <summary>
            The first rigid body being constrained by the joint.
            </summary>
            <remarks>
            Should never be null.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsJoint.RigidBodyB">
            <summary>
            The second rigid body being constrained by the joint.
            </summary>
            <remarks>
            Will only be null if the joint constrains <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> to the physics world.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsJoint.LinearForce">
            <summary>
            The linear force last applied to satisfy the joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsJoint.AngularForce">
            <summary>
            The angular force last applied to satisfy the joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsJoint.IsDisposed">
            <summary>
            Whether the joint has been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsJoint.Get(PhysicsInterface.IJoint)">
            <summary>
            Retrieves or creates the wrapper for the specified physics joint.
            </summary>
            <param name="joint">The physics engine joint.</param>
            <returns>The wrapper for the physics engine joint.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsSliderJoint">
            <summary>
            Represents a powered slider/piston, permitting <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyB" /> to move
            only along the hinge's <see cref="P:Demo3D.Visuals.PhysicsSliderJoint.Axis" />. The rotation of
            <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> relative to <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyB" /> is
            locked.
            </summary>
            <remarks>
            Note that although the <see cref="P:Demo3D.Visuals.PhysicsSliderJoint.Axis" /> property is in world space coordinates, the hinge
            is relative to <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> and so this property will be updated as
            <see cref="P:Demo3D.Visuals.PhysicsJoint.RigidBodyA" /> is moved.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsSliderJoint.#ctor(PhysicsInterface.ISliderJoint)">
            <summary>
            Constructor.
            </summary>
            <param name="joint">The physics engine joint.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSliderJoint.Joint">
            <summary>
            The physics engine joint.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSliderJoint.Distance">
            <summary>
            The linear travel.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSliderJoint.LowerDistanceLimit">
            <summary>
            The lower limit for the linear travel.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSliderJoint.UpperDistanceLimit">
            <summary>
            The upper limit for the linear travel.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSliderJoint.Axis">
            <summary>
            The axis/direction for the slider in world-space.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSliderJoint.TargetLinearSpeed">
            <summary>
            The target linear speed along the <see cref="P:Demo3D.Visuals.PhysicsSliderJoint.Axis" /> of the slider in meters per second.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsSliderJoint.MaximumLinearForce">
            <summary>
            The maximum force that can be used to achieve the <see cref="P:Demo3D.Visuals.PhysicsSliderJoint.TargetLinearSpeed" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsSliderJoint.Get(PhysicsInterface.ISliderJoint)">
            <summary>
            Retrieves or creates the wrapper for the specified physics slider joint.
            </summary>
            <param name="joint">The physics engine slider joint.</param>
            <returns>The wrapper for the physics engine joint.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PhysicsGroup">
            <summary>
            Identifies a collision group that physics bodies can be prescribed to. This is primarity
            used for fast collision pair elimination by specifying which pairs of groups collide.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGroup.group">
            <summary>
            The physics engine collision group.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PhysicsGroup.disposed">
            <summary>
            Whether the collision group has been disposed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGroup.IsDisposed">
            <summary>
            Whether the collision group has been disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGroup.#ctor(PhysicsInterface.IGroup)">
            <summary>
            Constructor.
            </summary>
            <param name="group">The physics engine collision group.</param>
        </member>
        <member name="P:Demo3D.Visuals.PhysicsGroup.Group">
            <summary>
            The physics engine collision group.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGroup.Equals(System.Object)">
            <summary>
            Whether the two collision group identifiers represent the same collision group.
            </summary>
            <param name="other">The other collision group.</param>
            <returns>True if the two collision group identifiers represent the same collision group, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGroup.GetHashCode">
            <summary>
            Computes the hash code.
            </summary>
            <returns>The hash code for the collision group.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGroup.op_Equality(Demo3D.Visuals.PhysicsGroup,Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Whether the two collision group identifiers represent the same collision group.
            </summary>
            <param name="group1">The first collision group.</param>
            <param name="group2">The second collision group.</param>
            <returns>True if the two collision group identifiers represent the same collision group, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGroup.op_Inequality(Demo3D.Visuals.PhysicsGroup,Demo3D.Visuals.PhysicsGroup)">
            <summary>
            Whether the two collision group identifiers represent different collision groups.
            </summary>
            <param name="group1">The first collision group.</param>
            <param name="group2">The second collision group.</param>
            <returns>True if the two collision group identifiers represent different collision groups, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGroup.Get(PhysicsInterface.IGroup)">
            <summary>
            Retrieves the wrapper for the specified physics collision group.
            </summary>
            <param name="group">The physics engine collision group.</param>
            <returns>The wrapper for the physics engine collision group.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PhysicsGroup.Create(PhysicsInterface.IGroup)">
            <summary>
            Creates a wrapper instance for the specified physics collision group.
            </summary>
            <param name="group">The physics engine collision group.</param>
            <returns>The wrapper for the physics engine collision group.</returns>
        </member>
        <member name="T:Demo3D.Visuals.IPickable">
            <summary>
            Interface for objects that can be drawn and selected
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IPickable.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <summary>
            Pick this object given the input ray.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickable.BoundingBox">
            <summary>
            Render this object.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PickInfo">
            <summary>
            The result of a pick from the scene.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.Obj">
            <summary>
            The Object that has been picked from the scene. The visual that responds
            may assign this to be some other object. For example, a Load may set this
            to be the Conveyor that it is assigned to.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.Visual">
            <summary>
            The visual that responded to the pick. This lets us show tooltip information
            for the object that the cursor is really over, not the pick Obj.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.Distance">
            <summary>
            The distance from the viewer to the object.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.Location">
            <summary>
            The location on the object where it was picked in world coords.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.Mode">
            <summary>
            Visual accessories will use the snap mesh.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.IncludeNonSelectable">
            <summary>
            Whether to include non-selectable objects in the pick.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.IncludeInvisible">
            <summary>
            Whether to include non-visible objects in the pick.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.IncludeControlPoints">
            <summary>
            Whether the include control points in the pick.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.IncludeGroups">
            <summary>
            Whether to include group objects in the pick.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.PickGroupChild">
            <summary>
            Whether to pick the child of a group.
            </summary>
            <remarks>
            If false then the group will be picked.
            </remarks>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.IgnoreSelectParentWhenPicked">
            <summary>
            Whether to respect <see cref="P:Demo3D.Visuals.Visual.SelectParentWhenPicked" /> properties in the pick.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.IncludeInPick">
            <summary>
            An optional delegate that takes a visual and says whether to include it in the pick.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.Screen">
            <summary>
            Screen coordinates of pick if appropriate.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.FaceIndex">
            <summary>
            The face index that was picked.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.WantSubset">
            <summary>
            Indicates that Subset should be set during the pick operation (default=false)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.Subset">
            <summary>
            If WantSubset is set, then this is the subset that was picked
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.WantFaceVertices">
            <summary>
            Indicates that FaceVertices should be set during the pick operation (default=true)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.FaceVertices">
            <summary>
            If WantFaceVertices is set, then this is the face that was picked
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.WantFaceNormal">
            <summary>
            Indicates that FaceNormal should be set during the pick operation (default=true)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.FaceNormal">
            <summary>
            If WantFaceNormal is set, then this is the face normal that was picked
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.WantFaceIndices">
            <summary>
            Indicates that FaceIndices should be set during the pick operation (default=true)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.FaceIndices">
            <summary>
            If WantFaceIndices is set, then these are the face indices that we picked
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.PickedFaces">
            <summary>
            These are face indices as in index of the attributes buffer, returned with FaceIndices
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.ActualVisualPicked">
            <summary>
            This is the actual mesh that was picked.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.ActualVisualPickedLocation">
            <summary>
            The location on the object where it was picked in local coords.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.ActualRendererAspectPicked">
            <summary>
            The renderer aspect that was picked.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.ActualRenderablePicked">
            <summary>
            The rendererable on the renderer aspect that was picked.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PickInfo.ActualRenderablePickedLocation">
            <summary>
            The location on the renderable where it was picked in local coords.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickInfo.TransformedFaceVertices">
            <summary>
            Get the world coordinates of the vertices of the picked the face.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickInfo.ClosestTransformedFaceVertex">
            <summary>
            The closest face vertex in world coords.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickInfo.TransformedFaceCenterVertex">
            <summary>
            The face center in world coords.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickInfo.ClosestTransformedFaceLine">
            <summary>
            The closet face line in world coords.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickInfo.ClosestTransformedFaceLineCenter">
            <summary>
            The closes face line center in world coords.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickInfo.TransformedActualPickLocation">
            <summary>
            The actual picked location in world coords
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.DeliverToVisual">
            <summary>
            The name of my connector to deliver to. which is 'End' by default.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.DeliverTo">
            <summary>
            The name of my connector to deliver to. which is 'End' by default.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.TransferCompleteWhen">
            <summary>
            The sensor state representing when a transfer is complete.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.OnSetMotor">
            <summary>
            OBSOLETE.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.OnProcess">
            <summary>
            OBSOLETE.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.OnPrepareToReceive">
            <summary>
            OBSOLETE.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.OnStartTransfer">
            <summary>
            OBSOLETE.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.OnCompleteTransfer">
            <summary>
            OBSOLETE.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PLC.Ports.RunScript(System.String,Demo3D.Visuals.ScriptReference,System.Object[])">
            <summary>
            Runs a script if it exists and returns true if there was one to run.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLC.Ports.PrepareToReceive(System.String,Demo3D.Visuals.PLC.Ports)">
            <summary>
            Return true if the script ran.
            </summary> 
        </member>
        <member name="M:Demo3D.Visuals.PLC.Ports.StartTransfer(System.String,Demo3D.Visuals.PLC.Ports)">
            <summary>
            Return true if the script ran.
            </summary> 
        </member>
        <member name="M:Demo3D.Visuals.PLC.Ports.Process">
            <summary>
            Return true if the script ran.
            </summary> 
        </member>
        <member name="M:Demo3D.Visuals.PLC.Ports.CompleteTransfer(System.String,Demo3D.Visuals.PLC.Ports)">
            <summary>
            Return true if the script ran.
            </summary> 
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.RTS">
            <summary>
            Request To Send.
            Set High to tell next conveyor we're ready to send.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.CTS">
            <summary>
            Clear To Send.
            Set to High by the next conveyor to tell this conveyor to send.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.TN">
            <summary>
            Transfer(ring) Now.
            Set to High by the previous conveyor when it is transferring.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.TC">
            <summary>
            Transfer Complete.
            Set to High by the next conveyor when the load has been transferred.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.M1">
            <summary>
            Set this motor on or off.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PLC.Ports.Occupied">
            <summary>
            Conveyor is occupied or free (true or false).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLC.Ports.Set(System.Boolean@,System.Boolean)">
            <summary>
            Set the I/O port and work out if scan needed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLC.#ctor(Demo3D.Visuals.Document)">
            <summary>
            Construct a PLC for a Document.
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:Demo3D.Visuals.PLC.SwitchOn">
            <summary>
            Start the PLC scanning at the current time.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLC.SwitchOff">
            <summary>
            Try to stop the PLC from scanning by removing the next scan event from the 
            event queue.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLC.Scan">
            <summary>
            Call the IScannable.Scan() method for all conveyors in the scene
            that have their ScanNeeded flag set or are attached to a conveyor that
            has its ScanNeeded flag set.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLC.GenerateScanOrder(Demo3D.Visuals.PLC.IScannable,System.Collections.Generic.HashSet{Demo3D.Visuals.PLC.IScannable})">
            <summary>
            Depth first search.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PLC.PortScanOrderComparer">
            <summary>
            Sort conveyor PLC Port ScanOrder numbers in descending order (highest first).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PLCFunctions">
            <summary>
            PLC Boolean logic sub-routines.
            Thanks to Trevor Chesterton for this logic.
            NOTE: These could easily be written in Step7, VB or any .NET language.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLCFunctions.Accept(Demo3D.Visuals.PLC.Ports,Demo3D.Visuals.PLC.Ports,System.String)">
            <summary>
            Try to receive a load from prev at next. deliveryPortName is the name of our
            connector that corresponds to prev's DeliveryPort (eg prev's "End" -&gt; our "Start").
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PLCFunctions.Deliver(Demo3D.Visuals.PLC.Ports,Demo3D.Visuals.PLC.Ports)">
            <summary>
            Try to send a load from prev to next.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScanLogic.Scan">
            <summary>
            In a PLC scan try to do one of Accept OR Process OR Deliver.
            This method is called from the PLC object on the Document and should never be 
            called explicitly.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScanLogic.ScanAccept">
            <summary>
            Try to receive a load from the previous conveyor if there is one.
            NOTE: For multiple inputs repeat this Accept function for each input connector.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ScanLogic.ScanProcess">
            <summary>
            Override to implement turntables, tilting chains etc.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScanLogic.ScanDeliver">
            <summary>
            Try to deliver a load to the next conveyor if there is one.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScanLogic.SetScanNeededOnAttached">
            <summary>
            Add anything directly attached to the scanList and set their ScanNeeded flag.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudLibrary.Item(Demo3D.Visuals.PointCloudReference)">
            <summary>
            Get a mesh given a mesh key.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudLibrary.Item(Demo3D.Visuals.PointCloud)">
            <summary>
            Get an existing or new mesh key given a mesh
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudLibrary.Count">
            <summary>
            How many meshes are stored in this library?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudLibrary.Clear">
            <summary>
            Clear out all meshes from the library.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudLibrary.MergeFrom(Demo3D.Visuals.PointCloudLibrary)">
            <summary>
            Merge the textures from the supplied library into this library.
            </summary>
            <param name="lib"></param>
        </member>
        <member name="T:Demo3D.Visuals.PointCloudPrimitive">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PointCloud">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PointCloudProperties">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.PointCloudVisual">
            <summary>
            Class representing a large collection of points in space.
            This is produced when importing a point cloud from an external file.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.HierarchyImageString">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.PointBlock">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.PickExcludingChildrenFromWorldFrustum(Microsoft.DirectX.Plane[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.WorldMinimumY">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.BoundingBoxExcludingChildren">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.BoundingSphereExcludingChildren">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateMesh">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.RenderPoints(Demo3D.Visuals.IDisplay,Demo3D.Visuals.MeshMaterial[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.AttachToProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.IsPhysicsDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.IsVisible">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CalculateVisible(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.RenderWithoutChildren(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.Recenter">
            <summary>
            Move the origin of the Point Cloud Visual to it's bounding box centre
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.Transform(Microsoft.DirectX.Matrix)">
            <summary>
            Transform the Point CLoud Visual by appling the transform matrix to it's vertices
            </summary>
            <param name="transform">Matrix to be applied to the drawing</param>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.Volume">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.SurfaceArea">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.VertexCount">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.FaceCount">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.FlattenPoints">
            <summary>
            Flatten the Point Cloud Visual into the X-Z plane
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateSphere(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double)">
            <summary>
            Create a sphere point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the sphere.</param>
            <param name="color">Color of the points to create in the sphere.</param>
            <param name="radius">The radius of the sphere in meters.</param>
            <returns>New point cloud visual containing the points in the requested sphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateSphere(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double)">
            <summary>
            Create a sphere point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the sphere.</param>
            <param name="colors">Colors of the points to create in the sphere.</param>
            <param name="radius">The radius of the sphere in meters.</param>
            <returns>New point cloud visual containing the points in the requested sphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateSphereSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double)">
            <summary>
            Create a sphere surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the sphere.</param>
            <param name="color">Color of the points to create on the sphere.</param>
            <param name="radius">The radius of the sphere in meters.</param>
            <returns>New point cloud visual containing the points on the requested sphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateSphereSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double)">
            <summary>
            Create a sphere surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the sphere.</param>
            <param name="colors">Colors of the points to create on the sphere.</param>
            <param name="radius">The radius of the sphere in meters.</param>
            <returns>New point cloud visual containing the points on the requested sphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateHemisphere(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double)">
            <summary>
            Create a hemisphere point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the hemisphere.</param>
            <param name="color">Color of the points to create in the hemisphere.</param>
            <param name="radius">The radius of the hemisphere in meters.</param>
            <returns>New point cloud visual containing the points in the requested hemisphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateHemisphere(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double)">
            <summary>
            Create a hemisphere point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the hemisphere.</param>
            <param name="colors">Colors of the points to create in the hemisphere.</param>
            <param name="radius">The radius of the hemisphere in meters.</param>
            <returns>New point cloud visual containing the points in the requested hemisphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateHemisphereSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double)">
            <summary>
            Create a hemisphere surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the hemisphere.</param>
            <param name="color">Color of the points to create on the hemisphere.</param>
            <param name="radius">The radius of the hemisphere in meters.</param>
            <returns>New point cloud visual containing the points on the requested hemisphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateHemisphereSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double)">
            <summary>
            Create a hemisphere surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the hemisphere.</param>
            <param name="colors">Colors of the points to create on the hemisphere.</param>
            <param name="radius">The radius of the hemisphere in meters.</param>
            <returns>New point cloud visual containing the points on the requested hemisphere.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinder(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Create a cylinder point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the cylinder.</param>
            <param name="color">Color of the points to create in the cylinder.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <returns>New point cloud visual containing the points in the requested cylinder.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinder(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double)">
            <summary>
            Create a cylinder point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the cylinder.</param>
            <param name="colors">Colors of the points to create in the cylinder.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <returns>New point cloud visual containing the points in the requested cylinder.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinder(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a cylinder segment point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the cylinder segment.</param>
            <param name="color">Color of the points to create in the cylinder segment.</param>
            <param name="radius">The radius of the cylinder segment in meters.</param>
            <param name="height">The height of the cylinder segment in meters</param>
            <param name="startAngle">The start angle of the cylinder segment in degrees.</param>
            <param name="angle">The angle of the cylinder segment in degrees</param>
            <returns>New point cloud visual containing the points in the requested cylinder segment.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinder(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a cylinder segment point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the cylinder segment.</param>
            <param name="colors">Colors of the points to create in the cylinder segment.</param>
            <param name="radius">The radius of the cylinder segment in meters.</param>
            <param name="height">The height of the cylinder segment in meters</param>
            <param name="startAngle">The start angle of the cylinder segment in degrees.</param>
            <param name="angle">The angle of the cylinder segment in degrees</param>
            <returns>New point cloud visual containing the points in the requested cylinder segment.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinderSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Create a cylinder surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the cylinder surface.</param>
            <param name="color">Color of the points to create on the cylinder surface.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <returns>New point cloud visual containing the points on the requested cylinder surface.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinderSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double)">
            <summary>
            Create a cylinder surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the cylinder surface.</param>
            <param name="colors">Colors of the points to create on the cylinder surface.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <returns>New point cloud visual containing the points on the requested cylinder surface.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinderSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double,System.Double)">
            <summary>
            Create a cylinder surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the cylinder surface.</param>
            <param name="color">Color of the points to create on the cylinder surface.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <param name="coneRatio">Ratio of the radii at either end. A ratio of 1 will create a cylinder, a ratio of 0 will create a cone.</param>
            <returns>New point cloud visual containing the points on the requested cylinder surface.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinderSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double,System.Double)">
            <summary>
            Create a cylinder surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the cylinder surface.</param>
            <param name="colors">Colors of the points to create on the cylinder surface.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <param name="coneRatio">Ratio of the radii at either end. A ratio of 1 will create a cylinder, a ratio of 0 will create a cone.</param>
            <returns>New point cloud visual containing the points on the requested cylinder surface.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinderSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a cylinder surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the cylinder surface.</param>
            <param name="color">Color of the points to create on the cylinder surface.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <param name="startAngle">The start angle of the cylinder segment in degrees.</param>
            <param name="angle">The angle of the cylinder segment in degrees</param>
            <returns>New point cloud visual containing the points on the requested cylinder.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateCylinderSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a cylinder surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the cylinder surface.</param>
            <param name="colors">Colors of the points to create on the cylinder surface.</param>
            <param name="radius">The radius of the cylinder in meters.</param>
            <param name="height">The height of the cylinder in meters</param>
            <param name="startAngle">The start angle of the cylinder segment in degrees.</param>
            <param name="angle">The angle of the cylinder segment in degrees</param>
            <returns>New point cloud visual containing the points on the requested cylinder.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBox(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double)">
            <summary>
            Create a cube point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the box.</param>
            <param name="color">Color of the points to create in the box.</param>
            <param name="size">The size of the box in meters.</param>
            <returns>New point cloud visual containing the points in the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBox(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double)">
            <summary>
            Create a cube point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the box.</param>
            <param name="colors">Colors of the points to create in the box.</param>
            <param name="size">The size of the box in meters.</param>
            <returns>New point cloud visual containing the points in the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBox(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double,System.Double)">
            <summary>
            Create a box point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the box.</param>
            <param name="color">Color of the points to create in the box.</param>
            <param name="width">Width of the box to create.</param>
            <param name="height">Height of the box to create.</param>
            <param name="depth">Depth of the box to create.</param>
            <returns>New point cloud visual containing the points in the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBox(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double,System.Double)">
            <summary>
            Create a box point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the box.</param>
            <param name="colors">Color of the points to create in the box.</param>
            <param name="width">Width of the box to create.</param>
            <param name="height">Height of the box to create.</param>
            <param name="depth">Depth of the box to create.</param>
            <returns>New point cloud visual containing the points in the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBoxSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double)">
            <summary>
            Create a cube surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the box.</param>
            <param name="color">Color of the points to create on the box.</param>
            <param name="size">The size of the box in meters.</param>
            <returns>New point cloud visual containing the points on the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBoxSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double)">
            <summary>
            Create a cube surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the box.</param>
            <param name="colors">Colors of the points to create on the box.</param>
            <param name="size">The size of the box in meters.</param>
            <returns>New point cloud visual containing the points on the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBoxSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double,System.Double)">
            <summary>
            Create a box surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the box.</param>
            <param name="color">Color of the points to create on the box.</param>
            <param name="width">Width of the box in meters.</param>
            <param name="height">Height of the box in meters.</param>
            <param name="depth">Depth of the box to in meters.</param>
            <returns>New point cloud visual containing the points on the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateBoxSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double,System.Double)">
            <summary>
            Create a box surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the box.</param>
            <param name="colors">Colors of the points to create on the box.</param>
            <param name="width">Width of the box in meters.</param>
            <param name="height">Height of the box in meters.</param>
            <param name="depth">Depth of the box to in meters.</param>
            <returns>New point cloud visual containing the points on the requested box.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateWedge(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a wedge point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the wedge.</param>
            <param name="color">Color of the points to create in the wedge.</param>
            <param name="angle">The angle of the wedge from the bottom to the top right in the X/Y plane. 90 degrees is vertical.</param>
            <param name="length">The length of the wedge.</param>
            <param name="height">The height of the wedge.</param>
            <param name="width">The width of the wedge.</param>
            <returns>New point cloud visual containing the points in the requested wedge.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateWedge(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a wedge point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create in the wedge.</param>
            <param name="colors">Colors of the points to create in the wedge.</param>
            <param name="angle">The angle of the wedge from the bottom to the top right in the X/Y plane. 90 degrees is vertical.</param>
            <param name="length">The length of the wedge.</param>
            <param name="height">The height of the wedge.</param>
            <param name="width">The width of the wedge.</param>
            <returns>New point cloud visual containing the points in the requested wedge.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateWedgeSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a wedge surface point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the wedge.</param>
            <param name="color">Color of the points to create on the wedge.</param>
            <param name="angle">The angle of the wedge from the bottom to the top right in the X/Y plane. 90 degrees is vertical.</param>
            <param name="length">The length of the wedge.</param>
            <param name="height">The height of the wedge.</param>
            <param name="width">The width of the wedge.</param>
            <returns>New point cloud visual containing the points on the requested wedge surface.</returns>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.CreateWedgeSurface(Demo3D.Visuals.Document,System.Int32,System.Drawing.Color[],System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a wedge point cloud visual parented to the scene of the given document.
            </summary>
            <param name="doc">Document to create the point cloud visual in.</param>
            <param name="numPoints">Number of points to create on the box.</param>
            <param name="colors">Colors of the points to create on the box.</param>
            <param name="angle">The angle of the wedge from the bottom to the top right in the X/Y plane. 90 degrees is vertical.</param>
            <param name="length">The length of the wedge.</param>
            <param name="height">The height of the wedge.</param>
            <param name="width">The width of the wedge.</param>
            <returns>New point cloud visual containing the points on the requested wedge surface.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PointCloudVisual.SurfaceRandomizer">
            <summary>
            Class given a series of double values (in this case, surface areas of surfaces on a shape), return a random surface based on
            a uniform distribution over the total surface area of all surfaces.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.SurfaceRandomizer.#ctor(System.Double[])">
            <summary>
            Constructor.
            </summary>
            <param name="surfaceAreas">List of individual surface areas.</param>
        </member>
        <member name="M:Demo3D.Visuals.PointCloudVisual.SurfaceRandomizer.Pick(System.Double)">
            <summary>
            Pick a random surface index based on a uniform distribution.
            </summary>
            <param name="u">Uniformly distributed random number in the range [0, 1).</param>
            <returns>Random surface index.</returns>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.PointCloudRef">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.Visible">
            <summary>Is the point cloud visible or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.PointSize">
            <summary>The size to render each point in the cloud in pixels. This is scaled down to 1 when the points reach Falloff Distance away from the camera.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.FalloffDistance">
            <summary>The point size starts at PointSize and goes to 1 beyond the FalloffDistance. This helps to give the impression of depths since closer points are rendered larger making them look more solid.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PointCloudVisual.ShowDepth">
            <summary>Change the brightness of the rendered points based on the distance from the camera. Those points closest to the camera will render using their true color. Once the points reach the Falloff Distance from the camera they will be rendered black. This helps to give the impression of depth, especially when the point cloud is monochromatic.</summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.VertexBuffer.Snap(Microsoft.DirectX.Vector2)">
            <summary>
            Return point snapped to the grid.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.VertexBuffer.FindSnappedIndex(Microsoft.DirectX.Vector2)">
            <summary>
            Find snapped point in vertex buffer and return index or -1.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.VertexBuffer.FindIndex(Microsoft.DirectX.Vector2)">
            <summary>
            Find point in vertex buffer and return index or -1.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PolygonBuilder.VertexBuffer.Item(Microsoft.DirectX.Vector2)">
            <summary>
            Return index into VertexBuffer of 'point'. NOTE: The point is snapped to a grid, so
            the actual point will be changed before it's inserted into the buffer.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.None">
            <summary>
            No intersection.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.Intersect">
            <summary>
            Segments intersect.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.Cross">
            <summary>
            Segments intersect by one crossing the other.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.Touch">
            <summary>
            Segments intersect by one end of one segment touching the other.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.Parallel">
            <summary>
            Segments are parallel.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.Colinear">
            <summary>
            Segments are parallel and colinear.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.Meet">
            <summary>
            Segment are parallel, colinear and they touch.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.SegmentIntersection.Overlap">
            <summary>
            Segments are parallel, colinear, and they overlap.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Vertex.ClosestPoint(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Return closest point on a segment (p0 to p1) to a given point.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Vertex.Intersects(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Returns whether two line segments intersect at any point.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Vertex.Intersection(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Returns the intersection between two line segments, or null if no intersection.
            If segments are parallel and colinear, returns two point, being the extents of the overlapping region.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.PolygonIntersection.None">
            <summary>
            Segment is entirely outside polygon.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.PolygonIntersection.Intersect">
            <summary>
            Segment intersects polygon.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.PolygonIntersection.Cross">
            <summary>
            Segment crosses polygon boundary.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.PolygonIntersection.TouchEnd">
            <summary>
            One or both segment end-points are on the polygon boundary.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.PolygonIntersection.TouchMiddle">
            <summary>
            Segment touches (but does not cross) polygon boundary.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.PolygonIntersection.Vertex">
            <summary>
            Segment passes through a polygon vertex.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PolygonBuilder.PolygonIntersection.Overlap">
            <summary>
            Segment overlaps a polygon edge.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PolygonBuilder.Polygon.First">
            <summary>
            Return the first vertex in the polygon.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PolygonBuilder.Polygon.Last">
            <summary>
            Return the last vertex in the polygon.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.Add(System.Int32)">
            <summary>
            Add a new vertex using an index obtained from the vertex buffer.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.Add(Microsoft.DirectX.Vector2)">
            <summary>
            Add a new vertex.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.Split(Demo3D.Visuals.PolygonBuilder.Vertex,Demo3D.Visuals.PolygonBuilder.Vertex)">
            <summary>
            Remove a polygon from 'a' to 'b', including 'a' but not including 'b'.
            Return the removed polygon.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.FindVertex(System.Int32)">
            <summary>
            Search for a vertex in the polygon with a particular index.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.FindVertex(Demo3D.Visuals.PolygonBuilder.Vertex)">
            <summary>
            Search for a vertex in the polygon with the same point as 'v'.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.FindVertex(Microsoft.DirectX.Vector2)">
            <summary>
            Search for a vertex in the polygon at position 'point'.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PolygonBuilder.Polygon.SignedArea">
            <summary>
            Returns double the signed area.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PolygonBuilder.Polygon.Area">
            <summary>
            Area of the polygon.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PolygonBuilder.Polygon.Winding">
            <summary>
            Returns the winding of the polygon, clockwise or counter-clockwise.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.Outside(Microsoft.DirectX.Vector2)">
            <summary>
            Returns true if the point is outside the polygon. If the point is on a boundary then
            it will either return inside or outside, but it is deterministic.  So if a point is
            inside one polygon, then it's guaranteed to be outside the neighbouring polygon.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.Polygon.OnBoundary(Microsoft.DirectX.Vector2)">
            <summary>
            Returns whether a point is inside, outside or on a polygon boundary. The point is
            considered on the boundary if it's 'close' to the boundary.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.AddPolygon(Demo3D.Visuals.PolygonBuilder.Polygon)">
            <summary>
            Add a polygon to the polygon list.  If the new polygon belongs to a different
            PolygonBuilder, then copies the polygon in.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PolygonBuilder.AddPolygon(System.Collections.Generic.IEnumerable{Microsoft.DirectX.Vector2})">
            <summary>
            Create a new polygon from a list of points and add it to the polygon list.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PrimitiveFitter.FindMeshes(Demo3D.Visuals.Visual,System.Collections.Generic.List{Demo3D.Visuals.IMesh},System.Collections.Generic.List{Demo3D.Visuals.MeshReference},System.Collections.Generic.List{Demo3D.Common.Geometry.Frame3D})">
            <summary>
            Finds all meshes on the visual and any of its descendants.
            </summary>
            <param name="visual">The visual in the hierarchy down which to search.</param>
            <param name="meshes">The list of meshes, which is to be populated.</param>
            <param name="meshReferences">The list of mesh references, which is to be populated.</param>
            <param name="frames">The list of frames that transform from the spaces of the visuals which the meshes belong to the space of the specified visual, which is to be populated.</param>
            <returns>True if one or more meshes were found, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Visuals.PrismaticJointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PrismaticJointVisual">
            <summary>
            Class representing a physics joint for constraining physics enabled visuals along a straight line without rotation.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.DefaultFactory(System.String)">
            <summary>
            Used by the catalog New menu to create a new visual of this type.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.Reset">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.JointStopMax">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.JointStopMin">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.InitializeTracking">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.DisableTracking">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.PositionOf(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.JointMotorEnableDisable">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.JointMotorReverse">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.MoveToMinStop">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PrismaticJointVisual.MoveToMaxStop">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.Motor">
            <summary>Joint motor properties.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.StopsEnabled">
            <summary>If true it constrains the movement of the joint to between StopMin and StopMax.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.StopMin">
            <summary>The minimum distance that the joint should move to if stops enabled.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.StopMax">
            <summary>The maximum distance that the joint should move to if stops enabled.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.TargetStop">
            <summary>Occurs when the joint position is within 'Notify Distance'  of the Min or Max Stop value. If none then no script will be called when a stop is hit.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.CreepDistance">
            <summary>When the stop is this distance or less away set the speed to be the Creep Speed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.NotifyDistance">
            <summary>The distance away from the stop that any stop script function should be called.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.OnHitMinStop">
            <summary>Occurs when within the NotifyDistance from the min stop while traveling to the min stop.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.OnHitMaxStop">
            <summary>Occurs when within the NotifyDistance from the max stop while traveling to the max stop.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PrismaticJointVisual.OnCreep">
            <summary>Occurs when within the Creep Distance from the stop.</summary>
        </member>
        <member name="T:Demo3D.Visuals.OnProcessContactScriptReference">
            <summary>
            Wrapper class for the OnProcessContact callback to allow changing of 
            physics engine at a later date without problems for user scripts.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources._1downarrow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources._1rightarrow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources._1uparrow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.apply">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.apply1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.apply2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.arrow_down_big">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.arrow_up_big">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.AssemblyInfo">
             <summary>
               Looks up a localized string similar to using System.Reflection;
            using System.Runtime.CompilerServices;
            using System.Runtime.InteropServices;
            
             // General Information about an assembly is controlled through the following 
             // set of attributes. Change these attribute values to modify the information
             // associated with an assembly.
            [assembly: AssemblyTitle("Demo3D.Viewer.Content")]
            [assembly: AssemblyDescription("Exported Demo3D Model")]
            [assembly: AssemblyConfiguration("")]
            [assembly: AssemblyCompany("Emulate3D")]
            [assembly: AssemblyP [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.avenir_white">
             <summary>
               Looks up a localized string similar to body {
            	font-family: "Avenir Next", Helvetica, Arial, sans-serif;
            	padding:1em;
            	margin:auto;
            	max-width:42em;
            	background:#fefefe;
            }
            
            h1, h2, h3, h4, h5, h6 {
            	font-weight: bold;
            }
            
            h1 {
            	color: #000000;
            	font-size: 28pt;
            }
            
            h2 {
            	border-bottom: 1px solid #CCCCCC;
            	color: #000000;
            	font-size: 24px;
            }
            
            h3 {
            	font-size: 18px;
            }
            
            h4 {
            	font-size: 16px;
            }
            
            h5 {
            	font-size: 14px;
            }
            
            h6 {
            	color: #777777;
            	background-color: inherit;
            	font-size: 14px;
            }
            
            hr {
            	height: 0.2em;
            	border: 0;
            	color: #CCCCCC;
            	backgrou [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Back">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Back16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.bit32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.bit64">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.blend">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Blue_tag">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.bookcase">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Bool">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.bug16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.button_cancel">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Cog128">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.CriticalErrorOverlay">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.CSharp16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.CSharpFile_SolutionExplorerNode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.decrypted">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.diff_left">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.diff_right">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.document_properties_lined_square_16_h">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Double">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Download_16x16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.edit_add">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.edit_add1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.edit_diff1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.edit_remove">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.edit_remove1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.editdelete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.encrypted">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.encrypted16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.error">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Excel32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Excel64">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.ExcelFromExplorer">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.ExcelFromExplorer2">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Export16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.fastForward">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.FieldUpdater">
             <summary>
               Looks up a localized string similar to using System;
            using System.Collections;
            using System.Collections.Generic;
            using System.ComponentModel;
            using System.Drawing;
            using System.Linq;
            using Demo3D.Common;
            using Demo3D.Gui;
            using Demo3D.Native;
            using Demo3D.Utilities;
            using Demo3D.Visuals;
            
            namespace Demo3D.Components {
                [Auto]
                public class FieldUpdater {
                    [Auto]
                    void OnCustomPropertyUpdated(Visual sender, string propertyName) {
                        var fieldMap = sender.GetCustomProperty("fieldMap").Value as Dictiona [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.fileclose">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.filenew">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Flag_greenHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Flag_redHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.flagBlue">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.foghorn">
             <summary>
               Looks up a localized string similar to @import url(http://fonts.googleapis.com/css?family=Vollkorn:400,400italic,700,700italic&amp;subset=latin);
            
            html, body {
                    padding:1em;
                    margin:auto;
                    max-width:42em;
                    background:#fefefe;
            	}
            body {
            	font: 1.3em "Vollkorn", Palatino, Times;
            	color: #333;
            	line-height: 1.4;
            	text-align: justify;
            	}
            header, nav, article, footer {
            	width: 700px;
            	margin:0 auto;
            	}
            article {
            	margin-top: 4em;
            	margin-bottom: 4em;
            	min-height: 400px;
            	}
            footer {
            	margin-bottom:50px;
            	}
            video {
            	margin: 2em  [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.folder_closed_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.folder_closed_16_greyed">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.folder_closed_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.folder_orange_open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Forward">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Forward16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.FSharpProject_SolutionExplorerNode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.FunctionHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.GrayDiagonalCross">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.GreenTick">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Grey_tag">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.GroupBy_284">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.hdd_mount">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.help">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.help_">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Help1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.HtmlBalanceBracesHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Import16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Instruction">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Integer">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.JScript16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.kchart">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.kchart32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.keyNLSEncrypter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.kgpg_edit">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.kgpg_info">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.ladder_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.ledred">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.mail_generic">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown">
             <summary>
               Looks up a localized string similar to html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }
            
            body{
            color:#444;
            font-family:Georgia, Palatino, 'Palatino Linotype', Times, 'Times New Roman', serif;
            font-size:12px;
            line-height:1.5em;
            padding:1em;
            margin:auto;
            max-width:42em;
            background:#fefefe;
            }
            
            a{ color: #0645ad; text-decoration:none;}
            a:visited{ color: #0b0080; }
            a:hover{ color: #06e; }
            a:active{ color:#faa700; }
            a:focus{ outline: thin dotted; }
            a:hover, a:active{ outline: 0; }
            
            ::-moz-select [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown_alt">
             <summary>
               Looks up a localized string similar to body {
            	line-height: 1.4em;
            	color: black;
                    padding:1em;
                    margin:auto;
                    max-width:42em;
            }
            
            li {
            	color: black;
            }
            
            h1,
            h2, 
            h3, 
            h4, 
            h5, 
            h6 {
                border: 0 none !important;
            }
            
            h1 {    
                margin-top: 0.5em;
                margin-bottom: 0.5em;
                border-bottom: 2px solid #000080 !important;
            }
            
            h2 {
                margin-top: 1em;
                margin-bottom: 0.5em;    
            	border-bottom: 2px solid #000080 !important;    
            }
            
            pre {
            	background-color: #f8f8f8;    
                border: 1px solid #2f6fab;
                border-radius: 3px;
               [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown1">
             <summary>
               Looks up a localized string similar to body{
                background: #000;
                font-family: Georgia, Palatino, serif;
                color: #EEE;
                line-height: 1;
                padding: 30px;
                margin:auto;
                max-width:42em;
            }
            h1, h2, h3, h4 {
                font-weight: 400;
            }
            h1, h2, h3, h4, h5, p {
                margin-bottom: 24px;
                padding: 0;
            }
            h1 {
                font-size: 48px;
            }
            h2 {
                font-size: 36px;
                margin: 24px 0 6px;
            }
            h3 {
                font-size: 24px;
            }
            h4 {
                font-size: 21px;
            }
            h5 {
                font-size: 18px;
            }
            a {
                color: #61BFC1;
                margin: 0;
                padding: 0;
                text-decoration [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown10">
             <summary>
               Looks up a localized string similar to *{margin:0;padding:0;}
            body {
            	 font:13.34px helvetica,arial,freesans,clean,sans-serif;
            	 color:black;
            	 line-height:1.4em;
            	 background-color: #F8F8F8;
            	 padding: 0.7em;
            }
            p {
            	 margin:1em 0;
            	 line-height:1.5em;
            }
            table {
            	 font-size:inherit;
            	 font:100%;
            	 margin:1em;
            }
            table th{border-bottom:1px solid #bbb;padding:.2em 1em;}
            table td{border-bottom:1px solid #ddd;padding:.2em 1em;}
            input[type=text],input[type=password],input[type=image],textarea{font:99% helvetica,arial,freesans,sans-serif;}
            select,optio [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown2">
             <summary>
               Looks up a localized string similar to @import url(http://fonts.googleapis.com/css?family=Vollkorn:400,400italic,700,700italic&amp;subset=latin);
            
            html, body {
                    padding:1em;
                    margin:auto;
                    max-width:42em;
                    background:#fefefe;
            	}
            body {
            	font: 1.3em "Vollkorn", Palatino, Times;
            	color: #333;
            	line-height: 1.4;
            	text-align: justify;
            	}
            header, nav, article, footer {
            	width: 700px;
            	margin:0 auto;
            	}
            article {
            	margin-top: 4em;
            	margin-bottom: 4em;
            	min-height: 400px;
            	}
            footer {
            	margin-bottom:50px;
            	}
            video {
            	margin: 2em  [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown3">
             <summary>
               Looks up a localized string similar to html { font-size: 100%; overflow-y: scroll; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }
            
            body{
            color:#444;
            font-family:Georgia, Palatino, 'Palatino Linotype', Times, 'Times New Roman', serif;
            font-size:12px;
            line-height:1.5em;
            padding:1em;
            margin:auto;
            max-width:42em;
            background:#fefefe;
            }
            
            a{ color: #0645ad; text-decoration:none;}
            a:visited{ color: #0b0080; }
            a:hover{ color: #06e; }
            a:active{ color:#faa700; }
            a:focus{ outline: thin dotted; }
            a:hover, a:active{ outline: 0; }
            
            ::-moz-select [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown4">
             <summary>
               Looks up a localized string similar to @charset "utf-8";
            
             /**
             * markdown.css
             *
             * This program is free software: you can redistribute it and/or modify it under
             * the terms of the GNU Lesser General Public License as published by the Free
             * Software Foundation, either version 3 of the License, or (at your option) any
             * later version.
             *
             * This program is distributed in the hope that it will be useful, but WITHOUT
             * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
             * FOR A PARTICULAR PURPOSE. See the GNU Lesser [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown5">
             <summary>
               Looks up a localized string similar to body{
                margin: 0 auto;
                background-color:white;
            
             /*	--------- FONT FAMILY --------
             	following are some optional font families. Usually a family 
            	is safer to choose than a specific font, 
            	which may not be on the users computer		*/
                font-family:Georgia, Palatino, serif;
             /    font-family:"Book Antiqua", Palatino, serif;
             /    font-family:Arial, Helvetica, sans-serif;
             /    font-family:Tahoma, Verdana, Geneva, sans-serif;
             /    font-family:Courier, monospace;
             /    font-family:"Times New Roman", T [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown6">
             <summary>
               Looks up a localized string similar to  /* Extracted and interpreted from adcstyle.css and frameset_styles.css */
            
             /* body */
            body {
            	margin: 20px auto;
                width: 800px;
            	background-color: #fff;
            	color: #000;
            	font: 13px "Myriad Pro", "Lucida Grande", Lucida, Verdana, sans-serif;
            }
            
             /* links */
            a:link {
            	color: #00f;
            	text-decoration: none;
            }
            
            a:visited {
            	color: #00a;
            	text-decoration: none;
            }
            
            a:hover {
            	color: #f60;
            	text-decoration: underline;
            }
            	
            a:active {
            	color: #f60;
            	text-decoration: underline;
            }
            
            
             /* html tags */
            
             /*  Work around [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown7">
             <summary>
               Looks up a localized string similar to body {
               font-family: Helvetica, arial, sans-serif;
               font-size: 14px;
               line-height: 1.6;
               padding-top: 10px;
               padding-bottom: 10px;
               background-color: white;
               padding: 30px; }
            
            body &gt; *:first-child {
               margin-top: 0 !important; }
            body &gt; *:last-child {
               margin-bottom: 0 !important; }
            
            a {
               color: #4183C4; }
            a.absent {
               color: #cc0000; }
            a.anchor {
               display: block;
               padding-left: 30px;
               margin-left: -30px;
               cursor: pointer;
               position: absolute;
               top: 0;
               left: 0;
               bottom: 0 [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown8">
             <summary>
               Looks up a localized string similar to h1, h2, h3, h4, h5, h6, p, blockquote {
               margin: 0;
               padding: 0;
            }
            body {
               font-family: "Helvetica Neue", Helvetica, "Hiragino Sans GB", Arial, sans-serif;
               font-size: 13px;
               line-height: 18px;
               color: #737373;
               background-color: white;
               margin: 10px 13px 10px 13px;
            }
            table {
               margin: 10px 0 15px 0;
               border-collapse: collapse;
            }
            td,th {	
               border: 1px solid #ddd;
               padding: 3px 10px;
            }
            th {
               padding: 5px 10px;	
            }
            
            a {
               color: #0069d6;
            }
            a:hover {
               color: #0050a3;
               text-decorati [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.markdown9">
             <summary>
               Looks up a localized string similar to h1, h2, h3, h4, h5, h6, p, blockquote {
               margin: 0;
               padding: 0;
            }
            body {
               font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
               font-size: 13px;
               line-height: 18px;
               color: #fff;
               background-color: #110F14;
               margin: 10px 13px 10px 13px;
            }
            table {
            	 margin: 10px 0 15px 0;
            	 border-collapse: collapse;
            }
            td,th {	
            	 border: 1px solid #ddd;
            	 padding: 3px 10px;
            }
            th {
            	 padding: 5px 10px;	
            }
            a {
               color: #59acf3;
            }
            a:hover {
               color: #a7d8ff;
               text-decoration: none;
            }
            a img {
               bord [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.message_news">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.messagebox_critical">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.messagebox_info">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.messagebox_warning">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.MixamoEncrypter">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.moveDown">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.moveUp">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.new_document_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.new_document_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.NewAnalysis">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.next">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.no">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.no1">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.open_document_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.openHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.package_settings">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.password">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.pci">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Pin16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Pin32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.player_fwd">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.player_play">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Plc">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.PlcConnectedOverlay">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.PLCs">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.PreviewFolder64x64">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.profile">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.PropertiesHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.quiz">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.RawMovie">
             <summary>
               Looks up a localized string similar to using System;
            using System.Collections;
            using System.Collections.Generic;
            using System.ComponentModel;
            using System.Drawing;
            using System.Linq;
            using System.Globalization;
            using Demo3D.Common;
            using Demo3D.EventQueue;
            using Demo3D.Gui;
            using Demo3D.Native;
            using Demo3D.Raw;
            using Demo3D.Utilities;
            using Demo3D.Visuals;
            using Demo3D.Visuals.Renderers;
            using Microsoft.DirectX;
            using Demo3D.Visuals.Renderers.Mesh;
            using Demo3D.CTRecords;
            
            namespace Demo3D.Components {
                [Auto] public clas [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.RedCross">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.reference_16xLG">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.reload_page">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.remove">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.ResourceExplorer">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.restart">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.roll">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.roll32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.saveHS">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.screen">
             <summary>
               Looks up a localized string similar to html { font-size: 62.5%; }
            html, body { height: 100%; }
            
            body {
            	font-family: Helvetica, Arial, sans-serif;
            	font-size: 150%;
            	line-height: 1.3;
            	color: #f6e6cc;
            	width: 700px;
            	margin: auto;
            	background: #27221a;
            	position: relative;
            	padding: 0 30px;
            }
            
            p,ul,ol,dl,table,pre { margin-bottom: 1em; }
            ul { margin-left: 20px; }
            a { text-decoration: none; cursor: pointer; color: #ba832c; font-weight: bold; }
            a:focus { outline: 1px dotted; }
            a:visited {  }
            a:hover, a:focus { color: #d3a459; text-decoration: none [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.script_16xLG">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.script_edit">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_breakpoint">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_copy">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_cut">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_delete">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_edit_ab">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_find">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_help">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_linenos">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_paste">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_pcb">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_plc">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_redo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_run">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_save">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_step_into">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_step_out">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_step_over">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_table">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_undo">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_watch">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_zoom_in">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.se_zoom_out">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.SearchResults">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.sharpFile">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.shoping_basket_64">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.SquareDot">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_auto_contour_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_data_explorer_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_data_new_record_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_data_table_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_delete_column_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_delete_row_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_display_grid">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_down_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_export_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_fontwork_reverse_text_flow_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_form_autopilots_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_insert_rows_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_list_enum_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_preview_two_pages_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stock_up_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.String">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.stripes">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.swiss">
             <summary>
               Looks up a localized string similar to @charset "utf-8";
            
             /**
             * markdown.css
             *
             * This program is free software: you can redistribute it and/or modify it under
             * the terms of the GNU Lesser General Public License as published by the Free
             * Software Foundation, either version 3 of the License, or (at your option) any
             * later version.
             *
             * This program is distributed in the hope that it will be useful, but WITHOUT
             * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
             * FOR A PARTICULAR PURPOSE. See the GNU Lesser [rest of string was truncated]";.
             </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_add16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_add32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_database16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_database32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_edit16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_edit32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_excel16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table_excel32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.table32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.tool_box_32">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.unfilledCircle">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.up_folder_16">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.up_folder_24">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.Up_h">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.updateNow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VBProject_SolutionExplorerNode">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSFolder_closed">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSFolder_open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSObject_Assembly">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSObject_Library">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSObject_Method">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSObject_Method_Sealed">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSProject_asa">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.VSProject_genericfile">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.WarningOverlay">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.XPfolder_closed">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.XPfolder_Open">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Properties.Resources.yellowArrow">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PropertyPath">
            <summary>
            The path to an aliased property.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PropertyAlias">
            <summary>
            A single string alias for a property path.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PropertyAlias.#ctor">
            The alias for the path
        </member>
        <member name="M:Demo3D.Visuals.PropertyAlias.SetAlias(System.String)">
            <summary>
            Used when set from the property grid to also update the collection.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PropertyAliasCollectionAspect">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PropertyAliasCollectionAspect.Collection">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.PropertyAliasCollection">
            <summary>
            Collection of property aliases fo use when generating a list of simple properties.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PropertyAliasPropertyDescriptor">
            <summary>
            Allow editing of a property alias as a string in the property grid.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.SimpleVisualReference">
            <summary>
            Class that wraps up a VisualReference but only exposing its simple properties.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SimpleVisualReference.visualReference">
            <summary>
            The thing we're wrapping.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SimpleVisualReference.VisualReference">
            <summary>
            Sets the VisualReference which this object wraps.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SimpleVisualReference.#ctor(Demo3D.Visuals.VisualReference)">
            <summary>
            Initializes a new instance of the SimpleVisualReference class from a VisualReference.
            </summary>
            <param name="visualReference">The VisualReference to wrap.</param>
        </member>
        <member name="M:Demo3D.Visuals.SimpleVisualReference.GetProperties(System.Attribute[])">
            <summary>
            Gets only the simple properties exposed by the underlying VisualReference.
            </summary>
            <param name="attributes">The attributes to use as a filter.</param>
            <returns>The property descriptors for the simple properties for the underlying VisualReference.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SimpleVisualReference.GetProperties">
            <summary>
            Gets only the simple properties exposed by the underlying VisualReference.
            </summary>
            <returns>The property descriptors for the simple properties for the underlying VisualReference.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SimpleVisualReference.ToString">
            <summary>
            Returns the string representation of the underlying VisualReference.
            </summary>
            <returns>The string representation of the underlying VisualReference.</returns>
        </member>
        <member name="T:Demo3D.Visuals.SimpleVisualReferencePropertyDescriptor">
            <summary>
            A property descriptor that wraps a SimpleVisualReference so it can be used in the property grid.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SimpleVisualReferencePropertyDescriptor.simpleVisualReference">
            <summary>
            The SimpleVisualReference we're wrapping.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SimpleVisualReferencePropertyDescriptor.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,Demo3D.Visuals.PropertyAlias,System.Boolean)">
            <summary>
            Initializes a new instance of the SimpleVisualReferencePropertyDescriptor class.
            </summary>
            <param name="component">The component the VisualReference property belongs to.</param>
            <param name="basePropertyDescriptor">The PropertyDescriptor for the property we're wrapping.</param>
            <param name="alias">The alias for the property we're wrapping.</param>
            <param name="useScriptingName">A value indicating whether to display the real property name (as used in scripting) as opposed to a globalized version.</param>
        </member>
        <member name="P:Demo3D.Visuals.SimpleVisualReferencePropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property we're wrapping, i.e. SimpleVisualReference.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SimpleVisualReferencePropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value of the property we're wrapping, in this case it's the SimpleVisualReference that's wrapping it.
            </summary>
            <param name="component">The component that owns the property.</param>
            <returns>The SimpleVisualReference we're wrapping.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SimpleVisualReferencePropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property we're wrapping.
            </summary>
            <param name="component">The component that owns the property.</param>
            <param name="value">The new VisualReference to assign to the property.</param>
        </member>
        <member name="T:Demo3D.Visuals.SimpleScriptingObject">
            <summary>
            Class that wraps up a ScriptingObject but only exposing its simple properties.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SimpleScriptingObject.scriptingObject">
            <summary>
            The thing we're wrapping.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SimpleScriptingObject.ScriptingObject">
            <summary>
            Sets the ScriptingObject which this object wraps.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SimpleScriptingObject.#ctor(Demo3D.Visuals.ScriptingObject,System.Boolean)">
            <summary>
            Initializes a new instance of the SimpleScriptingObject class from a ScriptingObject.
            </summary>
            <param name="scriptingObject">The VisualReference to wrap.</param>
            <param name="useScriptingNames">Use scripting names?.</param>
        </member>
        <member name="M:Demo3D.Visuals.SimpleScriptingObject.GetProperties(System.Attribute[])">
            <summary>
            Gets only the simple properties exposed by the underlying ScriptingObject.
            </summary>
            <param name="attributes">The attributes to use as a filter.</param>
            <returns>The property descriptors for the simple properties for the underlying ScriptingObject.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SimpleScriptingObject.GetProperties">
            <summary>
            Gets only the simple properties exposed by the underlying ScriptingObject.
            </summary>
            <returns>The property descriptors for the simple properties for the underlying ScriptingObject.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SimpleScriptingObject.ToString">
            <summary>
            Returns the string representation of the underlying VisualReference.
            </summary>
            <returns>The string representation of the underlying VisualReference.</returns>
        </member>
        <member name="T:Demo3D.Visuals.SimpleScriptingObjectPropertyDescriptor">
            <summary>
            A property descriptor that wraps a SimpleScriptingObject so it can be used in the property grid.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SimpleScriptingObjectPropertyDescriptor.simpleScriptingObject">
            <summary>
            The SimpleScriptingObject we're wrapping.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SimpleScriptingObjectPropertyDescriptor.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,Demo3D.Visuals.PropertyAlias,System.Boolean)">
            <summary>
            Initializes a new instance of the SimpleScriptingObjectPropertyDescriptor class.
            </summary>
            <param name="component">The component the ScriptingObject property belongs to.</param>
            <param name="basePropertyDescriptor">The PropertyDescriptor for the property we're wrapping.</param>
            <param name="alias">The alias for the property we're wrapping.</param>
            <param name="useScriptingName">A value indicating whether to display the real property name (as used in scripting) as opposed to a globalized version.</param>
        </member>
        <member name="P:Demo3D.Visuals.SimpleScriptingObjectPropertyDescriptor.PropertyType">
            <summary>
            Gets the type of the property we're wrapping, i.e. SimpleScriptingObject.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SimpleScriptingObjectPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value of the property we're wrapping, in this case it's the SimpleScriptingObject that's wrapping it.
            </summary>
            <param name="component">The component that owns the property.</param>
            <returns>The SimpleVisualReference we're wrapping.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SimpleScriptingObjectPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of the property we're wrapping.
            </summary>
            <param name="component">The component that owns the property.</param>
            <param name="value">The new ScriptingObject to assign to the property.</param>
        </member>
        <member name="T:Demo3D.Visuals.FilteredPropertyDescriptor">
            <summary>
            Property descriptor to wrap up a property being filtered using a FilteredPropertyCollection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyDescriptor.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,Demo3D.Visuals.PropertyAlias,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the FilteredPropertyDescriptor class for a simple property.
            </summary>
            <param name="component">The object that owns the property.</param>
            <param name="basePropertyDescriptor">The PropertyDescriptor instance being wrapped up.</param>
            <param name="simplePropertyAlias">A PropertyAlias instance for the property being wrapped up.</param>
            <param name="useSimpleProperties">A value indicating whether to expose only simple properties.</param>
            <param name="useScriptingName">A value indicating whether to display the real property name (as used in scripting) as opposed to a globalized version.</param>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyDescriptor.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,Demo3D.Visuals.PropertyAlias,System.Boolean)">
            <summary>
            Initializes a new instance of the FilteredPropertyDescriptor class for a simple property.
            </summary>
            <param name="component">The object that owns the property.</param>
            <param name="basePropertyDescriptor">The PropertyDescriptor instance being wrapped up.</param>
            <param name="simplePropertyAlias">A PropertyAlias instance for the property being wrapped up.</param>
            <param name="useScriptingName">A value indicating whether to display the real property name (as used in scripting) as opposed to a globalized version.</param>
        </member>
        <member name="P:Demo3D.Visuals.FilteredPropertyDescriptor.BasePropertyDescriptor">
            <summary>
            Gets the PropertyDescriptor instance being wrapped up.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.FilteredPropertyDescriptor.SimplePropertyAlias">
            <summary>
            Gets the simple property alias for this property, or null if it's not a simple property.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.FilteredPropertyDescriptor.Visual">
            <summary>
            Gets or sets the visual that owns the property.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyDescriptor.GetValue(System.Object)">
            <summary>
            Gets the value of this property for a specified component.
            </summary>
            <param name="component">The component to retrieve the value of this property for.</param>
            <returns>The value of this property on the specified component.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value of this property on the specified component.
            </summary>
            <param name="component">The component to set the value of the property for.</param>
            <param name="value">The value for the property.</param>
        </member>
        <member name="T:Demo3D.Visuals.FilteredPropertyTypeDescriptor">
            <summary>
            Class for filtering properties for display based on a variety of criteria.
            This includes whether they're marked as 'simple' and whether they contain a specified search term.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyTypeDescriptor.#ctor(System.Object,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the FilteredPropertyTypeDescriptor class.
            </summary>
            <param name="propertyBag">The object whose properties are being filtered.</param>
            <param name="useSimpleProperties">A value indicating whether to expose only simple properties.</param>
            <param name="searchTerm">A search term with which to filter the properties, or null if no search term is desired.</param>
            <param name="useScriptingNames">A value indicating whether to display the real property names (as used in scripting) as opposed to globalized versions.</param>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyTypeDescriptor.Refilter(System.Boolean,System.String,System.Boolean)">
            <summary>
            Changes the filter parameters and refilters the properties.
            </summary>
            <param name="searchTerm">A search term with which to filter the properties, or null if no search term is desired.</param>
            <param name="useSimpleProperties">A value indicating whether to expose only simple properties.</param>
            <param name="useScriptingNames">A value indicating whether to display the real property names (as used in scripting) as opposed to globalized versions.</param>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyTypeDescriptor.PassesSearch(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns a value indicating whether a specified property includes the current search term.
            </summary>
            <param name="property">A PropertyDescriptor instance to check against the current search term.</param>
            <returns>true if the property includes the current search term or there is no current search term; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyTypeDescriptor.GetSimpleProperties">
            <summary>
            Gets a PropertyDescriptorCollection containing the simple properties of the base object, applying any search filter.
            </summary>
            <returns>A PropertyDescriptorCollection containing the filtered simple properties of the base object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyTypeDescriptor.FilterProperties">
            <summary>
            Filters the base properties using the current criteria and caches the result.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyTypeDescriptor.GetProperties">
            <summary>
            Gets the properties that match the current filter.
            </summary>
            <returns>A PropertyDescriptorCollection containing the properties that match the current filter.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyTypeDescriptor.GetProperties(System.Attribute[])">
            <summary>
            Gets the properties with a specified set of attributes that match the current filter.
            </summary>
            <param name="attributes">The attributes to filter on.</param>
            <returns>A PropertyDescriptorCollection containing the properties that match the current filter.</returns>
        </member>
        <member name="T:Demo3D.Visuals.FilteredPropertyCollection">
            <summary>
            Class for filtering CustomizedProperties for display based on a variety of criteria.
            This includes whether they're marked as 'simple' and whether they contain a specified search term.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyCollection.#ctor(Demo3D.Utilities.CustomizedProperties,System.Boolean,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the FilteredPropertyCollection class.
            </summary>
            <param name="baseProperties">The CustomizedProperties object whose properties are being filtered.</param>
            <param name="searchTerm">A search term with which to filter the properties, or null if no search term is desired.</param>
            <param name="useSimpleProperties">A value indicating whether to expose only simple properties.</param>
            <param name="useScriptingNames">A value indicating whether to display the real property names (as used in scripting) as opposed to globalized versions.</param>
        </member>
        <member name="P:Demo3D.Visuals.FilteredPropertyCollection.Visual">
            <summary>
            Gets the visual whose properties this FilteredPropertyCollection wraps up.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyCollection.GetPropertyDescriptor(System.Object@,System.Collections.ArrayList,System.Int32,System.Boolean)">
            <summary>
            Gets a PropertyDescriptor instance for a particular simple property from its path.
            </summary>
            <param name="component">The object to which the property belongs.</param>
            <param name="path">The property's path.</param>
            <param name="next">The current index of the path to inspect (for recursion, pass 0 in here).</param>
            <param name="onlyBrowsable">Only return PropertyDescriptors that have Browsable(true).</param>
            <returns>A PropertyDescriptor instance for the specified property path if one is found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyCollection.GetPropertyDescriptor(System.Object@,System.Collections.ArrayList,System.Int32)">
            <summary>
            Gets a PropertyDescriptor instance for a particular simple property from its path.
            </summary>
            <param name="component">The object to which the property belongs.</param>
            <param name="path">The property's path.</param>
            <param name="next">The current index of the path to inspect (for recursion, pass 0 in here).</param>
            <returns>A PropertyDescriptor instance for the specified property path if one is found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.FilteredPropertyCollection.GetSimpleProperties">
            <summary>
            Gets a PropertyDescriptorCollection containing the simple properties of the base object, applying any search filter.
            </summary>
            <returns>A PropertyDescriptorCollection containing the filtered simple properties of the base object.</returns>
        </member>
        <member name="T:Demo3D.Visuals.SimplePropertyCollection">
            <summary>
            This class really only exists for legacy purposes, all the simple property functionality is in FilteredPropertyCollection.
            There were various places outside of the VisualPropertyGrid where SimplePropertyCollection was instantiated to get a collection of simple properties.
            This class exists for them, really.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SimplePropertyCollection.#ctor(Demo3D.Utilities.CustomizedProperties)">
            <summary>
            Initializes a new instance of the SimplePropertyCollection class.
            </summary>
            <param name="baseProperties">The CustomizedProperties instance whose simple properties to expose.</param>
        </member>
        <member name="T:Demo3D.Visuals.PusherProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PusherProperties.PusherScriptReference">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PusherVisual">
            <summary>
            Class encapsulating the behavior of a pusher visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.PusherVisual.bindings">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.PusherVisual.activateBinding">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.PusherVisual.extendedBinding">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.PusherVisual.retractedBinding">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.Reset">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.Dispose">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.PositionOf(Microsoft.DirectX.Vector3,System.Double@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.PositionOfLocal(Microsoft.DirectX.Vector3,System.Double@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.WorldLocationOf(System.Double,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.IsPhysicsDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.AttachDirection">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.AttachType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.AttachedVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.DetachFromVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PusherVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.Color">
            <summary>The color of the surface in white light.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.Reach">
            <summary>How far the pusher extends when activated, as a fraction of the attached conveyor's width.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.Force">
            <summary>The maximum force the pusher can use to accelerate to the specified velocity.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.Kinematic">
            <summary>Move the pusher kinematically instead of dynamically which means the pusher will move with infinite force.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.FrictionMaterial">
            <summary>The friction material of the pusher blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.BladeWidth">
            <summary>The width or thickness of the pusher blade and its sides.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.BladeHeight">
            <summary>The height of the pusher blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.BladeLength">
            <summary>The length of the main pusher blade without the sides.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.BladeSideAngle">
            <summary>The angle of the pusher sides in degrees relative to the main pusher blade length, e.g. 0 is parallel with main blade and 90 is perpendicular.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.BladeSideLength">
            <summary>The length of the angled sides of the pusher blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PusherVisual.BladeOffset">
            <summary>The offset from the edge of the conveyor.</summary>
        </member>
        <member name="T:Demo3D.Visuals.RackProperties">
            <summary>
            A storage rack property set. For a standard bay (----):
            
            The rack including the end uprights is:
                 ||[upright]------------[upright]----------[upright]|| 
              UprightWidth +BayWidth+ UprightWidth +BayWidth+BayWidthGap+ UprightWidth
              
            The rack depth is just BayDepth:
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.RackVisual">
            <summary>
            For a rack bay depth extends into the z axis,
            the rack bay width extends along the x axis.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.RackVisual.ShelvesSorted">
            <summary>
            Return a list of child visuals which are shelves and order them lowest to highest.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.RackVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <summary>
            Main constructor as called by the VisualFactory. It shouldn't be necessary
            to override this method unless you have tasks that should only be performed
            when being created by a factory, and not during de-serialization.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.Construct">
            <summary>
            This constructor is called in these cases:
            1. When the visual is first created (from the main Construct() method)
            2. During de-serialization
            3. During control point resizing
            4. If a property is changed
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.RackVisual.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.ClearControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <summary>
            The center of the start of the first aisle is 0,0,0
            </summary>
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.CreateNonCachedMeshes">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.RackVisual.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.RackConnector">
            <summary>
            The connector that is at the foot of the mast of a crane. It can only 
            connect to a storage rack Aisle Connector.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.UseResources">
            <summary>
            Write meshes, textures, point clouds and drawings from document.Resources in addition to visual meshes
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.ResourcesOnly">
            <summary>
            Implies UseResources=True and do not write out the scene
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.IncludeIds">
            <summary>
            Whether or not to include the Id GUIDs for Nodes, Textures, VertexBuffers and IndexBuffers.
            These are useful for caching on the client side.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.SvgAsImage">
            <summary>
            Whether or not to export SVG files as PNG files or not.
            True for .raw3d export where external viewers don't yet have support for svg files.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.IncludeServerTags">
            <summary>
            Whether or not to export ServerTags.xlsx.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.IncludeCTUpdates">
            <summary>
            Whether or not to export controls testing updates: ServerItems, BindableItems, 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.IncludeFrictionMatrix">
            <summary>
            Whether or not to export FrictionMatrix.xlsx.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.IncludeAspects">
            <summary>
            Whether or not to export Aspects.json.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.ExportFlatText">
            <summary>
            Set to false to convert flat text to a mesh.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.FilterHiddenHierarchy">
            <summary>
            Whether or not to export non-visible Visuals
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.OptimizeMeshes">
            <summary>
            Whether to optimize meshes. This will improve performance but permantently affects the visual hierarchy.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.UpdateTimeDecimalPlaces">
            <summary>
            How many decimal places to use in update times, no rounding will be done if 0
            (usually set as the number of decimal places in the time step the raw was recorded with)
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Raw.ExportOptions.IncludeCustomAttributes">
            <summary>
            Export Custom Properties, CAD Aspects and Primitive definitions as CustomAttributes
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Raw.Writer.ByteArraySet.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode" /> implemention to avoid compiler warning.
            <para>
            This implementation is *wrong* as it does not match the <see cref="M:Demo3D.Visuals.Raw.Writer.ByteArraySet.Equals(System.Object)" /> implementation,
            and it is used in a <see cref="T:System.Collections.Generic.Dictionary`2" /> in <see cref="F:Demo3D.Visuals.Raw.Writer.verticesMap" />.
            </para>
            </summary>
            <returns>A hash code for the current object.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Raw.Writer.ProcessBuffer(Demo3D.Raw.Scene,Demo3D.Visuals.OptimizedBufferFrameRecord)">
            <summary>
            Process the initial values of the primitive buffer.
            </summary>
            <param name="scene"></param>
            <param name="record"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Raw.Writer.ProcessBuffer(Demo3D.Raw.Scene,Demo3D.Visuals.PrimitiveBufferUpdate)">
            <summary>
            Process an update to the primitive buffer.
            </summary>
            <param name="scene"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Raw.Writer.ProcessStaticBuffer(Demo3D.Raw.Scene,Demo3D.Visuals.PrimitiveBuffer,System.Guid)">
            <summary>
            Process a primitive buffer for a static model.
            </summary>
            <param name="scene"></param>
            <param name="buffer"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="F:Demo3D.Visuals.Raw.Writer.TransientMeshIdCache">
            <summary>
            Cache for non persistent resource keys to guids.
            This cache shouldn't be too large as it's only a mesh key against a guid, not an imesh.
            Hopefully there is no need to prune this cache....
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Raw.CADImport.Root">
            Reference to root visual or null if this is root
        </member>
        <member name="P:Demo3D.Visuals.Raw.CADImport.UID">
            Optional UID from CAD package
        </member>
        <member name="P:Demo3D.Visuals.Raw.CADImport.FilePath">
            Path to original CAD file
        </member>
        <member name="P:Demo3D.Visuals.Raw.CADImport.LastModified">
            Modified date on file
        </member>
        <member name="T:Demo3D.Visuals.Raw.CADImportFile">
            <summary>
            OBSOLETE. Do not use.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.RayTraceOptions">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadFile(System.String)">
            <summary>
            Reads 3ds file and returns its data in MeshGeometry3D object
            </summary>
            <param name="fileName">3ds file Name</param>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadChunk(System.IO.BinaryReader)">
            <summary>
            Main chunk reading method
            </summary>
            <param name="r">BinaryReader</param>
            <returns>readed chunk lenghth</returns>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ToMatrix(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Convert a Axis-Angle into a Matrix (Also Right-Handed to Left-Handed).
            http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToMatrix/index.htm
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadLightChunk(System.IO.BinaryReader)">
            <summary>
            Reads light chunk
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadRGBColor(System.IO.BinaryReader)">
            <summary>
            Reads color chunk - as RGB
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadTrueColor(System.IO.BinaryReader)">
            <summary>
            Reads color chunk - as TrueColor
            </summary>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadKeyHeader(System.IO.BinaryReader)">
            <summary>
            Read pivot point key header.
            From: http://www.matarese.org/~NoHands/website/doc/html/3ds_8cpp-source.html#l01079
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadString(System.IO.BinaryReader)">
            <summary>
            Reads characters until '\0' and packs them into string - unlimited size
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.Reader3ds.ReadString(System.IO.BinaryReader,System.Int32)">
            <summary>
            Reads characters until '\0' and packs them into string - max size
            </summary>
            <param name="r"></param>
            <param name="maxLength">max string length; maxInt for unlimited</param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.ChunkIds">
            <summary>
            A breakdown of the Chunk IDS used in importing 3DS files.
            See these web pages for more details:
            http://www.jalix.org/ressources/graphics/3DS/_unofficials/3fs-unofficial.htm
            http://www.dcs.ed.ac.uk/home/mxr/gfx/3d/MLI.spec
            http://astronomy.swin.edu.au/~pbourke/dataformats/3ds/
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ReaderAsc">
            <summary>
            Parse the 3D Studio Ascii export format (.asc), e.g.
            
            Named object: "Plane"
            Tri-mesh, Vertices: 4     Faces: 4
            Vertex list:
            Vertex 0:  X:3.937669     Y:-2.324051     Z:1.307855
            Vertex 1:  X:3.937669     Y:-2.324051     Z:0.807855
            Vertex 2:  X:3.937669     Y:-3.024051     Z:1.307854
            Vertex 3:  X:3.937669     Y:-3.024051     Z:0.807855
            Face list:
            Face 0:    A:3 B:1 C:0 AB:1 BC:1 CA:1
            Material:"r210g118b101a0"
            Smoothing:  1
            Face 1:    A:3 B:0 C:2 AB:1 BC:1 CA:1
            Material:"r210g118b101a0"
            Smoothing:  1
            Face 2:    A:1 B:3 C:2 AB:1 BC:1 CA:1
            Material:"r210g118b101a0"
            Smoothing:  1
            Face 3:    A:1 B:2 C:0 AB:1 BC:1 CA:1
            Material:"r210g118b101a0"
            Smoothing:  1
            
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.importMatrix">
            <summary>
            For compatability with old algorithm.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ReadFile(System.String)">
            <summary>
            Reads Asc file and returns its data in MeshGeometry3D object.
            </summary>
            <param name="fileName">Asc file Name</param>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.objectRegex">
            <summary>Named object: "Plane"</summary>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.meshRegex">
            <summary>Tri-mesh, Vertices: 4     Faces: 4</summary>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.vertRegex">
            <summary>Vertex 0:  X:3.937669     Y:-2.324051     Z:1.307855</summary>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.faceRegex">
            <summary>Face 0:    A:3 B:1 C:0 AB:1 BC:1 CA:1</summary>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.matRegex">
            <summary>Material:"r210g118b101a0"</summary>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.smoothRegex">
            <summary>Smoothing:  1</summary>
        </member>
        <member name="F:Demo3D.Visuals.ReaderAsc.nextMethod">
            Initialized in constructor
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseLine(System.String)">
            Initialized in constructor
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseNamedObject(System.String)">
            Named object: "Plane"
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseTriMesh(System.String)">
            Parse 'Tri-mesh, Vertices: 4     Faces: 4'
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseVertexList(System.String)">
            Vertex list:
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseVertex(System.String)">
            Vertex 0:  X:3.937669     Y:-2.324051     Z:1.307855
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseFaceList(System.String)">
            Face list:
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseFace(System.String)">
            Face 0:    A:3 B:1 C:0 AB:1 BC:1 CA:1
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseMaterial(System.String)">
            Material:"r210g118b101a0"
        </member>
        <member name="M:Demo3D.Visuals.ReaderAsc.ParseSmoothing(System.String)">
            Smoothing:  1
        </member>
        <member name="T:Demo3D.Visuals.ParseMethod">
            <summary>
            A parse method is successful if it returns true.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Decorators.IDecoratorAspect.CanOptimize">
            <summary>
            Should the decorator be included when optimizing the graphics
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Decorators.IDecoratorAspect.CanPick">
            <summary>
            Can the decorator be picked
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Images.ImageRendererAspect">
            <summary>A basic image renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.Width">
            <summary>The width of the image.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.Height">
            <summary>The height of the image.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.Image">
            <summary>The image to render.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.Color">
            <summary>Override the color of the image. This color is also used for the back face background color.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.BackFace">
            <summary>The back face of an imported image can be a solid color (Background Color), a repeat of the image (Image) or nothing at all (None).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.UVCoords">
            <summary>The Texture Coords allow an imported image to be cropped. The top left of the image is (0,0) and the bottom right of the image is (1,1).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.EnableScreenSpace">
            <summary>Render the image directly on the screen in 2D space.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.ScreenCoords">
            <summary>The screen co-ordinates to place the image.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Images.ImageRendererAspect.ScreenSpaceOrder">
            <summary>Images with a greater Screen Space Order will show on top of images with a lower Screen Space Order value.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.IMaterialContainerAspect">
            <summary>
            Interface to allow access to an aspect's materials.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IMaterialContainerAspect.Materials">
            <summary>
            The materials on the aspect.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRenderable.BoundingSphere">
            <summary>
            The sphere bounds transformed by the local matrix
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRenderable.BoundingSphereExcludingTransform">
            <summary>
            The sphere bounds without a transform from the local matrix
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRenderable.Update(Demo3D.Visuals.IDisplay)">
            <summary>
            If NeedsUpdate is true, this method is called before the next render
            </summary>
            <param name="display"></param>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.IRendererAspect">
            <summary>
            Interface for aspects that can be rendered.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Renderers.IRendererAspect.RenderableRequest">
            <summary>
            Occurs before the renderables are about to be use so that they can be configured correctly, eg before a render or an export.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Renderers.IRendererAspect.IsEnabledChanged">
            <inheritdoc cref="E:Demo3D.Visuals.AspectComponentBase.IsEnabledChanged" />
        </member>
        <member name="E:Demo3D.Visuals.Renderers.IRendererAspect.Updated">
            <summary>
            Occurs after a renderable has been updated.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Renderers.IRendererAspect.CastShadowsChanged">
            <summary>
            Occurs when the value of <see cref="E:Demo3D.Visuals.Renderers.IRendererAspect.CastShadowsChanged" /> changes.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.BoundingBox">
            <summary>
            The bounding box of the aspect.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.BoundingSphere">
            <summary>
            The bounding sphere of the aspect.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.IsEnabled">
            <inheritdoc cref="P:Demo3D.Visuals.IAspectComponent.IsEnabled" />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.IsLayerVisible">
            <summary>
            The value for whether the owning container's layer is visible.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.IsLayerVisibleValid">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.ClippedNeedsCalculating">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.ShadowClippedNeedsCalculating">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.ContainerWorldMatrix">
            <summary>
            The world matrix of the owning container.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.ContainerBoundingBox">
            <summary>
            The bounding box of the owning container.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.ContainerBoundingSphere">
            <summary>
            The bounding sphere of the owning container.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.IsOptimized">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.HasRenderables">
            <summary>
            The value for whether the aspect has renderables to be rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.Name">
            <inheritdoc cref="P:Demo3D.Visuals.AspectComponentBase.Name" />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.IRendererAspect.CastShadows">
            <summary>
            The value for if the aspect casts shadows.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.CanRender(Demo3D.Visuals.IDisplay)">
            <summary>
            Determines whether the aspect can be rendered
            </summary>
            <param name="display">The display that's being rendered to.</param>
            <returns>True if the aspect can be rendered, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.PreRender(Demo3D.Visuals.IDisplay)">
            <summary>
            Preamble to the aspect rendering giving the aspect a chance to change settings.
            </summary>
            <param name="display">The display that's being rendered to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.Render(Demo3D.Visuals.IDisplay)">
            <summary>
            Render the aspect.
            </summary>
            <param name="display">The display that's being rendered to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.RenderShadow(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <summary>
            Render the shadow of the aspect.
            </summary>
            <param name="display">The display that's being rendered to.</param>
            <param name="lightDirection">The direction of the light.</param>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.NotifyRenderableRequest">
            <summary>
            Invokes <see cref="E:Demo3D.Visuals.Renderers.IRendererAspect.RenderableRequest" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <summary>
            A check to see a ray intersects with this aspect.
            </summary>
            <param name="display">The current display.</param>
            <param name="ray">The ray to test.</param>
            <param name="info">Contains information about the intersection, if one occurs.</param>
            <returns>True if the ray intersects, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.PickFromWorldFrustum(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Plane[])">
            <summary>
            A check to see if the desired frustum intersects with this aspect.
            </summary>
            <param name="display">The current display.</param>
            <param name="frustum">The frustum to test</param>
            <returns>True if the frustum intersects, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.IRendererAspect.GetRenderables``1">
            <summary>
            Get all <see cref="T:Demo3D.Visuals.Renderers.IRenderable" /> objects of the desired type, contained by this aspect.
            </summary>
            <typeparam name="T">The type to get.</typeparam>
            <returns>The matching renderables.</returns>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.IDynamicRenderablesAspect">
            <summary>
            Presence of this interface indicates that the renderable should not be serialized into resources.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Lines.DrawingRendererAspect">
            <summary>
            For complex imported line drawings, if only a single line between two points is required consider using a LineRendererAspect
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Lines.LineSegment">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.Lines.LineSubRenderable.RenderSnappedToPixel(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector2,System.Boolean)">
            <summary>
            Render the line so it's pixel perfect
            </summary>
            <param name="display">The current display</param>
            <param name="viewMatrix">The current camera view matrix</param>
            <param name="projMatrix">The current projection matrix, not the screen space matrix</param>
            <param name="halfScreenSize">Half the rendering view size</param>
            <param name="areDepthMatriciesSet">When true we assume that
             UpdateDepthEffectMatricies has been called in this render loop. This helps performance when called multiple times</param>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Lines.PathRenderable">
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.Renderers.Mesh.MeshRenderable.MeshCreated">
            <summary>
            Allows mesh-affectors (eg CSG) to post-process meshes after creation. See CSGAspect 
            for example of usage
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.Mesh.MeshRenderable.AddCustomMeshKey(System.String,System.Object)">
            <summary>
            Provides input to the resource key used by the mesh cache.
            Allows mesh-affectors to force mesh recreation by primitive mesh renderables
            </summary>
            <param name="name">Name of mesh-affector</param>
            <param name="key">Unique key for the mesh effect</param>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Mesh.MeshRenderable.Scale">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Mesh.MeshRenderable.MeshAccuracy">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Mesh.MeshRenderable.OriginalMesh">
            <summary>
            This mesh should never be modified
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.Mesh.MeshRenderable.UpdateSubRenderableMesh">
            <summary>
            Apply scale and mesh affectors to the original mesh
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Mesh.MeshRenderableCreator">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.Mesh.MeshSetRendererAspect.Replace(Demo3D.Visuals.Document,System.Guid,Demo3D.Visuals.IMesh,Demo3D.Visuals.MeshMaterial[],Microsoft.DirectX.Matrix)">
            <summary>
            Replace an existing mesh with a new one of the same id.
            </summary>
            <param name="document">Current document</param>
            <param name="id">Id of the existing mesh</param>
            <param name="newMesh">The mesh to replace with</param>
            <param name="materials">Materials of the new mesh</param>
            <param name="matrix">Matrix of the new mesh</param>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.Mesh.MeshSetRendererAspect.Replace(System.Guid,Demo3D.Visuals.MeshReference,Demo3D.Visuals.MeshMaterial[],Microsoft.DirectX.Matrix)">
            <summary>
            Replace an existing mesh with a new one of the same id.
            </summary>
            <param name="id">Id of the existing mesh</param>
            <param name="newMeshRef">Reference of the new mesh, if null existing mesh will be removed</param>
            <param name="materials">Materials of the new mesh</param>
            <param name="matrix">Matrix of the new mesh</param>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Mesh.TempMeshRendererAspect">
            <summary>
            Used to convert from old MeshRendererAspect to new MeshRendererAspects
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.BoxRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.BoxRendererAspect">
            <summary>A basic box renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxRendererAspect.Width">
            <summary>The width of the box.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxRendererAspect.Height">
            <summary>The height of the box.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxRendererAspect.Depth">
            <summary>The depth of the box.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxRendererAspect.Material">
            <summary>The material of the box.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.BoxTubeRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect">
            <summary>A basic box tube renderer</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.Width">
            <summary>The width of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.Height">
            <summary>The height of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.Depth">
            <summary>The depth of the box tube (Z axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.Thickness">
            <summary>The thickness of the outer edges.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.NumSegments">
            <summary>When CurveAngle is non zero this extrudes the box tube around a curve with a radius of CurveRadius with this number of segments to the box tube. The default is 20.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CurveRadius">
            <summary>When non zero this extrudes the box tube around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CurveAngle">
            <summary>When CurveAngle is non zero this extrudes the box tube around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.Scale">
            <summary>The ratio in X and Z of the top of the box tube (maximum Y) to the bottom of the box tube (minimum Y).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.Skew">
            <summary>The skew in X and Z of the top of the box tube (maximum Y) from the bottom of the box tube (minimum Y).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.SideXminVisible">
            <summary>Is the left side visible (X minimum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.SideXmaxVisible">
            <summary>Is the right side visible (X maximum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.SideZminVisible">
            <summary>Is the bottom side visible (Z minimum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.SideZmaxVisible">
            <summary>Is the top side visible (Z maximum when looking in plan view with positive X/Z being at the top right).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.Material">
            <summary>The material of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.EndYmin">
            <summary>Description of how to render the bottom cap of the box tube (Minimum Y).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.EndYmax">
            <summary>Description of how to render the top cap of the box tube (Maximum Y).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CornerXminZmin">
            <summary>Description of how to render the bottom left corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CornerXmaxZmin">
            <summary>Description of how to render the bottom right corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CornerXminZmax">
            <summary>Description of how to render the top left corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CornerXmaxZmax">
            <summary>Description of how to render the top right corner of the box tube.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CentreX">
            <summary>Description of how to render the bar along the central X axis.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.BoxTubeRendererAspect.CentreZ">
            <summary>Description of how to render the bar along the central Z axis.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.ContainerRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect">
            <summary>A basic container renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.Width">
            <summary>The width of the outer edges at the top of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.Height">
            <summary>The height of the Container from the top to the bottom.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.Depth">
            <summary>The depth of the outer edges at the top of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.BaseRatio">
            <summary>The ratio of the bottom base of the Container to the top opening of the Container. 1.0 will mean square sides, 0.9 (the default) makes the sides taper in to 10% smaller than the top.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.Thickness">
            <summary>The thickness of the sides of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.HasBottom">
            <summary>The container can be used as a funnel if this is false.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.HasTop">
            <summary>Whether the container has a top or not. Useful for creating hollow shapes such as pallets.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.HasLeft">
            <summary>Whether the container has a left side or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.HasRight">
            <summary>Whether the container has a right side or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.HasFront">
            <summary>The container can be used as a pigeon hole if this is false.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.HasBack">
            <summary>The color and optional texture of the Container.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.ContainerRendererAspect.Material">
            <summary>The color and optional texture of the Container.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.CylinderRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect">
            <summary>A basic cylinder renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.Radius">
            <summary>The radius of the cylinder (in the X/Z plane).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.InnerRadius">
            <summary>The radius of the cylinder's hollow section.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.RadiusRatio">
            <summary>This controls how elliptical the cylinder is.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.ConeRatio">
            <summary>Ratio of the radii at either end. A ratio of 1 will create a cylinder, A ratio of 0 will create a cone</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.Length">
            <summary>The length of the cylinder along its main axis (Y axis dimension).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.Slices">
            <summary>The number of sides the cylinder has in plan view. A higher number produces a more accurate cylinder, but takes longer to draw.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.Angle">
            <summary>How much of the cylinder is drawn.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.StartAngle">
            <summary>The starting angle for the cylinder.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.CurveRadius">
            <summary>When CurveAngle is non zero this extrudes the cylinder around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.CurveSegments">
            <summary>When CurveAngle is non zero this extrudes the cylinder around a curve with a radius of CurveRadius with this number of segments to the curve. The default is 20.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.CurveAngle">
            <summary>When non zero this extrudes the cylinder around a curve with a radius of CurveRadius.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.Skew">
            <summary>When CurveAngle is non zero this skews the extruded cylinder this distance between the start and the end of the curve.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.CylinderRendererAspect.Material">
            <summary>The color and texture of the cylinder's surface.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.PolygonRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.PolygonRendererAspect">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.PrimitiveRenderable">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.Primitives.PrimitiveRenderable.SetMeshProperty``1(``0@,``0,System.String)">
            <summary>
            Invalidates mesh and requests a render if value is different to storage.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="storage"></param>
            <param name="value"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.QuadRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.QuadRendererAspect">
            <summary>A basic quad renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.QuadRendererAspect.Width">
            <summary>The width of the quad.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.QuadRendererAspect.Height">
            <summary>The height of the quad.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.QuadRendererAspect.UVCoords">
            <summary>The Texture Coords allow an imported image to be cropped. The top left of the quad is (0,0) and the bottom right of the quad is (1,1).</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.QuadRendererAspect.FrontMaterial">
            <summary>The color and optional texture of the front face.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.QuadRendererAspect.HasBackFace">
            <summary>Whether to show the back face of the quad or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.QuadRendererAspect.BackMaterial">
            <summary>The color and optional texture of the back face.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.SphereRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.SphereRendererAspect">
            <summary>A basic sphere renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.SphereRendererAspect.Radius">
            <summary>The radius of the sphere.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.SphereRendererAspect.Slices">
            <summary>The number of sides the sphere has in plan view. A higher number produces a more accurate sphere, but takes longer to draw.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.SphereRendererAspect.Stacks">
            <summary>The number of sides the sphere has in side view. A higher number produces a more accurate sphere, but takes longer to draw.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.SphereRendererAspect.Material">
            <summary>The color and texture of the sphere's surface.</summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.WedgeRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Primitives.WedgeRendererAspect">
            <summary>A basic wedge renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.WedgeRendererAspect.Width">
            <summary>The width of the wedge.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.WedgeRendererAspect.Height">
            <summary>The height of the wedge.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.WedgeRendererAspect.Length">
            <summary>The length of the wedge.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.WedgeRendererAspect.Angle">
            <summary>The angle of the wedge from the bottom to the top right in the X/Y plane. 90 degrees is vertical.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Primitives.WedgeRendererAspect.Material">
            <summary>The display material for the wedge mesh.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Renderable.BoundingSphereExcludingTransform">
            <summary>
            The bounding sphere of the renderable excluding the transform of it's Matrix
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase`1.HasRenderables">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase`1.GetRenderables``1">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase`1.OnAdded">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase`1.OnRemoved">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.RendererAspectBase">
            <summary>
            The base class for aspects that need rendering.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Renderers.RendererAspectBase.RenderableRequest">
            <inheritdoc />
        </member>
        <member name="E:Demo3D.Visuals.Renderers.RendererAspectBase.Updated">
            <inheritdoc />
        </member>
        <member name="E:Demo3D.Visuals.Renderers.RendererAspectBase.CastShadowsChanged">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.ContainerWorldMatrix">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.ContainerBoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.ContainerBoundingSphere">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.IsOptimized">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.BoundingBox">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.BoundingSphere">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.HasRenderables">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.ClippedNeedsCalculating">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.ShadowClippedNeedsCalculating">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.IsLayerVisibleValid">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.Render(Demo3D.Visuals.IDisplay)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.RenderShadow(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.PickFromWorldFrustum(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Plane[])">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.GetRenderables``1">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.IsLayerVisible">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.Renderers.RendererAspectBase.CastShadows">
            <summary>Whether the renderer casts a shadow.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.OnAdded">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.OnRemoved">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.OnEnabled">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.OnDisabled">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.CanRender(Demo3D.Visuals.IDisplay)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.IsVisibleForLOD(Demo3D.Visuals.IDisplay)">
            <summary>
            Method used to check if aspect is visible with regards to Level of Detail.
            </summary>
            <param name="display"></param>
            <returns>True if visible for the purposes of Level of Detail. False otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.IsVisibleForLOD(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Camera)">
            <summary>
            Method used to check if aspect is visible with regards to Level of Detail.
            </summary>
            <param name="display"></param>
            <param name="camera">The camera to check against</param>
            <returns>True if visible for the purposes of Level of Detail. False otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.PreRender(Demo3D.Visuals.IDisplay)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.NotifyRenderableRequest">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.Renderers.RendererAspectBase.RequestRender">
            <summary>
            Utility method to request a complete render from the app. This should be called after changing a property that affects the rendering of this aspect.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Text.TextRenderable">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Renderers.Text.TextRendererAspect">
            <summary>A basic text renderer.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Text.TextRendererAspect.Text">
            <summary>The text to show.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Text.TextRendererAspect.Height">
            <summary>The height of the text.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Renderers.Text.TextRendererAspect.Material">
            <summary>The color of the text.</summary>
        </member>
        <member name="M:Demo3D.Visuals.MeshCache.Collect">
            <summary>
            Clear up mesh cache keys that are no longer used due to garbage collected meshes.
            </summary>
            <returns>Count of meshes after collection.</returns>
        </member>
        <member name="M:Demo3D.Visuals.MeshCache.ForceCollect">
            <summary>
            UNIT TEST USE ONLY
            </summary>
            <returns>Count of meshes after collection.</returns>
        </member>
        <member name="P:Demo3D.Visuals.MeshCache.Count">
            <summary>
            Count of the number of resource keys in the mesh cache (mesh count may be lower but not higher).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MeshCache.ApplicationDirectory">
            <summary>
            For backward compatibility only for classes with store file refernces
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.RevoluteJointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.RevoluteJointVisual">
            <summary>
            Class representing a physics joint for constraining physics enabled visuals around an axis of rotation with no linear movement along the axis.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.DefaultFactory(System.String)">
            <summary>
            Used by the catalog New menu to create a new visual of this type.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.Reset">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.JointStopMax">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.JointStopMin">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.CreateJoint(Demo3D.Visuals.PhysicsRigidBody,Demo3D.Visuals.PhysicsRigidBody)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.InitializeJoint(Demo3D.Visuals.PhysicsJoint)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.InitializeTracking">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.DisableTracking">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.ResetTrackingListener">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.AngleOf(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.JointMotorEnableDisable">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.JointMotorReverse">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.TurnToMinStop">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.TurnToMaxStop">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RevoluteJointVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.Motor">
            <summary>Joint motor properties.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.StopsEnabled">
            <summary>If true it prevents the joint going through all 360 degrees and constrains it to between StopMin and StopMax.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.StopMin">
            <summary>The minimum angle (in degrees) that the joint should move to if stops enabled.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.StopMax">
            <summary>The maximum angle (in degrees) that the joint should move to if stops enabled.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.TargetStop">
            <summary>Occurs when the joint position is within 'Notify Distance'  of the Min or Max Stop value. If none then no script will be called when a stop is hit.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.CreepDistance">
            <summary>When the stop is this distance or less away set the speed to be the Creep Speed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.NotifyDistance">
            <summary>The distance away from the stop that any stop script function should be called.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.OnHitMinStop">
            <summary>Occurs when within the NotifyDistance from the min stop while traveling to the min stop.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.OnHitMaxStop">
            <summary>Occurs when within the NotifyDistance from the max stop while traveling to the max stop.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RevoluteJointVisual.OnCreep">
            <summary>Occurs when within the Creep Distance from the stop.</summary>
        </member>
        <member name="T:Demo3D.Visuals.RigidBodyAspect">
            <summary>A perfectly rigid physics body.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.Kinematic">
            <summary>Whether the rigid body is kinematic.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.GravityEnabled">
            <summary>Whether gravity should affect the (dynamic) rigid body.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.Mass">
            <summary>The mass of the (dynamic) rigid body.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.CenterOfMassOffset">
            <summary>The local offset for the rigid body's center of mass.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.LinearDamping">
            <summary>The linear damping coefficient (larger values increase the linear velocity lost over time).</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.AngularDamping">
            <summary>The angular damping coefficient (larger values increase the angular velocity lost over time).</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.LinearFactor">
            <summary>The (world) axes in which the rigid body is permitted to move. Values of one and zero specify that movement is disabled and enabled respectively.</summary>
        </member>
        <member name="P:Demo3D.Visuals.RigidBodyAspect.AngularFactor">
            <summary>The (world) axes in which the rigid body is permitted to rotate. Values of one and zero specify that rotation is disabled and enabled respectively.</summary>
        </member>
        <member name="E:Demo3D.Visuals.RigidBodyAspect.BeforeCreateRigidBody">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;RigidBodyAspect_BeforeCreateRigidBody_Description&quot;]/value" /></summary>
        </member>
        <member name="E:Demo3D.Visuals.RigidBodyAspect.AfterCreateRigidBody">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;RigidBodyAspect_AfterCreateRigidBody_Description&quot;]/value" /></summary>
        </member>
        <member name="E:Demo3D.Visuals.RigidBodyAspect.BeforeDestroyRigidBody">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;RigidBodyAspect_BeforeDestroyRigidBody_Description&quot;]/value" /></summary>
        </member>
        <member name="E:Demo3D.Visuals.RigidBodyAspect.AfterDestroyRigidBody">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;RigidBodyAspect_AfterDestroyRigidBody_Description&quot;]/value" /></summary>
        </member>
        <member name="M:Demo3D.Visuals.RigidBodyAspect.CreateAncestorPhysics">
            <summary>
            Finds the nearest ancestor with a rigid body aspect and calls
            <see cref="M:Demo3D.Visuals.RigidBodyAspect.CreatePhysics" /> on it.
            </summary>
            <remarks>
            It is important to call this method when enabling/disabling the aspect. Any geometry on
            this visual (or any descenant visuals) that are set to UseAncestorGeometry might now
            need to be included by this visual's rigid body rather than the ancestor rigid body (or
            vice versa).
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.RigidBodyAspect.DestroyPhysics">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RigidBodyAspect.CreatePhysics">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.RollerConveyorAspect.OnMotorChanged">
            <summary>
            An event that is triggered whenever the conveyor is assigned a different motor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.RoutingTable.Add(Demo3D.Visuals.RoutingPoint,Demo3D.Visuals.RoutingPoint)">
            <summary>
            Specify that P2 is reachable from P1
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.RouteFinder.Intersects(Demo3D.Visuals.Document,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Demo3D.Visuals.Visual)">
            <summary>
            Return true if visual blocks the line of sight from P1 to P2.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectedRoutingDijkstra.ClearRouteCache">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ConnectedRoutingDijkstra.GetCheapestNode">
            <summary>
            Dijkstra's algorithm is solved by starting with the cheapest node that has not been visited, 
            and solving its neighbors. This function finds the cheapest node in the node network. In
            this application, cheapest means the track with the shortest known travel distance from the starting
            point that has not already been solved.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ConnectedRoutingDijkstra.GetConnectorsFor(Demo3D.Visuals.Visual)">
            <summary>
            Helper function to get the connectors
            </summary>
            <param name="visual">Visual to get the connectors from</param>
            <returns>Connector array</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectedRoutingDijkstra.GetConnectorsFor(Demo3D.Visuals.Connector)">
            <summary>
            Helper function to get the connectors
            </summary>
            <param name="connector">Connector to get the connectors from</param>
            <returns>Connector list</returns>
        </member>
        <member name="M:Demo3D.Visuals.ConnectedRoutingDijkstra.SolveNeighbours(Demo3D.Visuals.ConnectedRoutingDijkstra.Node)">
            <summary>
            Dijkstra's algorithm is solved by starting with the cheapest node that has not been visited,
            and solving its neighbors. This function solves the distance to the cheapest node's neighbors
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.OnWebServerStart">
            <summary>Occurs when the Web Server is started. This provides a callback to add web services to the OWIN web application stack. By default support is added for WebApi 2, SignalR 2.2, SOAP, WebGL and Embedded Resource File Serving.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.NamespaceUri">
            <summary>The XML namespace for SOAP messages (defaults to uri://emulate3d.com).</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.Name">
            <summary>Name of the connector</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.Path">
            <summary>The web (HTTP) server path to access the service on (defaults to /soap).</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.Port">
            <summary>The port number that web (HTTP) requests should be made on.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.Enabled">
            <summary>Whether the joint is enabled or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.LoggingEnabled">
            <summary>When true connection and message traffic diagnostics are logged to the log file.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.Url">
            <summary>The read only string that represents the URL to use to access the SOAP service.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.MaxConnections">
            <summary>The maximum number of connections that the Web server should allow. If 0 (the default) then the number of connections is unlimited.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebServerProperties.Timeout">
            <summary>The timeout for Web communications in seconds.</summary>
        </member>
        <member name="T:Demo3D.Visuals.SceneProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneProperties.SOAPServer">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneProperties.ReplicationSeedIncrement">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneProperties.ReplicationCount">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneProperties.OnReset">
            <summary>
                Reset script that can appear on Scene.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.SceneVisual">
            <summary>
            A scene is the top-level visual that owns all other objects to be drawn, 
            and also draws a floor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SceneVisual.gridTextureName">
            Floor top texture
        </member>
        <member name="F:Demo3D.Visuals.SceneVisual.floorTextureName">
            Floor top texture
        </member>
        <member name="F:Demo3D.Visuals.SceneVisual.floorMinBSphere">
            The floor can never be smaller+Texture start point at Pmin
        </member>
        <member name="F:Demo3D.Visuals.SceneVisual.floorPadding">
            The floor can never be smaller+Texture start point at Pmin
        </member>
        <member name="F:Demo3D.Visuals.SceneVisual.floorBSphere">
            The floor can never be smaller+Texture start point at Pmin
        </member>
        <member name="F:Demo3D.Visuals.SceneVisual.borderLines">
            The floor can never be smaller+Texture start point at Pmin
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AlignToFloorAllowed">
            <summary>
            Used to disable AlignToFloor from the context menu
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SetInitialPositionAllowed">
            <summary>
            Used to disable SetInitialPosition from the context menu
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.PreInitialize">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorVisuals">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.SetFloorTextureAsDefault">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.LoadFloorDefaults">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.SetAsDefaultFloor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnLoaded">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnUnloaded">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnStart">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnStop">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnFloorHit(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnVisualAdded(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnVisualRemoved(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.NotifyOnRealtimeLag(System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.LoadFloorTexture">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.LoadGridTexture">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.AttachToProperties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.FloorPropertiesUpdated">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.FloorPropertiesUpdated(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.Configure">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ClipSphere">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.PickExcludingChildrenFromWorldFrustum(Microsoft.DirectX.Plane[])">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorBoundingBox">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.ResizeFloor">
            <summary>
            Resize the floor to encompass all the objects in the scene
            but maintain a minimum size. Tile the top texture if necessary.
            Points of the floor
            p0          p1 + 
                           |
                 (0,0)     Z 
                           |
            p3          p2 + 
            +------X-----+
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.Add(System.Collections.Generic.List{Microsoft.DirectX.Direct3D.CustomVertex.PositionColored},Microsoft.DirectX.Direct3D.CustomVertex.PositionColored)">
            <summary>
            Don't add more grid lines than directx can cope with.
            </summary>
            <param name="vertices"></param>
            <param name="vertex"></param>
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.UpdateDefaultFloor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AutoResizeFloor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.RenderFloor(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Camera)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.RenderGrid(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.DrawThickLines(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3[],System.Drawing.Color,System.Int32,System.Single)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.SnapGrid(Microsoft.DirectX.Vector3[],Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Return an offset to move a visual given the vertices of the selected face
            and the current grid configuration.
            </summary>
            <param name="face"></param>
            <param name="worldTranslate"></param>
            <param name="snapRatio"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.RenderAxis(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.RenderViewSphere(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.Reset">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SceneVisual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.VolumeOfChildren">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SurfaceAreaOfChildren">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.VertexCountOfChildren">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FaceCountOfChildren">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.Camera">
            <summary>The current state of the camera. Can be used to edit the FieldOfViewY for the current camera.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.GridOrigin">
            <summary>The origin for the scene grid.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.WebServer">
            <summary>Configuration details for the Web server. The Web server allows external programs to interact with your model.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SOAPServer">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FogEnabled">
            <summary>Enable the fogging for the scene.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FogDensity">
            <summary>The rate with which the fog color will appear. A high number will fog the scene quickly and a low number gradually.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FogColor">
            <summary>The color to use for fogging. This represents the color that the scene will blend to at the rear of the scene.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.References">
            <summary>The paths to external .NET assemblies that are used in the project. These can be absolute paths or relative to the directory containing the Demo3D.exe file (usually C:\Program Files\Demo3D ...\).</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.GeneratorType">
            <summary>The pseudo random number generator algorithm to use. This defaults to Mersenne Twister (MT19937).</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.InitialSeed">
            <summary>On load or reset the random number seed for the demonstration will be set to this number. Change this to produce a different demonstration.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.GeneratorSeedIncrement">
            <summary>This is the increment to the InitialSeed that each individual random number generator is given OnInitialize.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ReplicationSeedIncrement">
            <summary>This is the increment to the InitialSeed that each individual random number generator is given OnInitialize of each replication.</summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ReplicationCount">
            <summary>The number of replications to run for each experiment. This defaults to 1.</summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.GeneratorOrder">
            <summary>The order that generators are given incremental initial seeds. This is optional but will ensure determinism of random number streams when additional streams are added later.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AutoSize">
            <summary>Automatically resize the floor to fit what is on it.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ScanInterval">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.DefaultFloor">
            <summary>When a new visual is added it is added to this floor. If not set then new visuals are added directly to the scene. This doesn't apply to loads from a load creator.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorY">
            <summary>The height of the scene floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorPhysicsEnabled">
            <summary>Whether physics should be enabled for the floor. Disabling this will allow rigid bodies to fall through the floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorTextureName">
            <summary>The path name of the texture file for the scene floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.GridTextureName">
            <summary>The path name of the texture file for the scene floor when in build mode.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ShowFloor">
            <summary>Turn on/off the drawing of the floor beneath the conveyor sections.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ShowSupports">
            <summary>Turn on/off the drawing of the conveyor support stands.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.DirectionArrowOffset">
            <summary>The global offset for conveyor direction arrows from their centers. This can be used to put all direction arrows to the side of conveyors so they aren't obscured by loads traveling on them. This is a positive or negative percentage value (of the individual conveyor widths).</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.TopColor">
            <summary>The top color for the project backdrop color gradient.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.BottomColor">
            <summary>The bottom color for the project backdrop color gradient.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.DeleteLoadsAfter">
            <summary>When a load hits the floor it will automatically be deleted after this number of seconds provided its 'Delete When Floor Hit' flag is set</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.Reflectivity">
            <summary>The reflectivity of the material. 0 is non-reflective, 100 is a mirror. 10 is a good value for conveyor surfaces.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FrictionFactor">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FrictionMaterial">
            <summary>The friction material for the scene floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FrictionConfiguration">
            <summary>A matrix/table used to lookup friction coefficients from pairs of friction materials. The matrix/table is symmetric, so that the friction coefficient for material pair (a, b) is equal to the friction coefficient for material pair (b, a). It is possible to change the friction coefficients for pairs of friction materials.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AllowUndefinedFriction">
            <summary>If not set then a MissingFrictionCombination exception is thrown if two friction materials come into contact where there is no coefficient of friction defined for them in the document friction configuration matrix.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsIterations">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsMinIterations">
            <summary>Obsolete</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsMaxIterations">
            <summary>Obsolete</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsNumBodyIterationScale">
            <summary>Obsolete</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.EventTimeStep">
            <summary>When processing events in realtime process all events that will occur in the time range from now to now plus this duration. This makes event processing more CPU friendly. The default is 1ms.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ConnectOnLoad">
            <summary>Whether to automatically connect to any tag servers when the document is loaded.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ConnectOnInitialize">
            <summary>Whether to automatically connect to any tag servers when the document is initialized.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.RealtimeLag">
            <summary>Call the OnRealtimeLag script if the running document gets this number of seconds or more behind real time.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.BatchOutput">
            <summary>Batches all output to the tag servers.  Output generated by the model is batched over the course of a simulation step and passed to the tag servers at the end of each step.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsTimeStep">
            <summary>The discrete amount of time that the physics world is advanced during each iteration of the physics pipeline. This value may be decreased for greater physics realism, or to help prevent tunneling, at a performance cost. Please note that this value should be considered in tandem with the number of PhysicsIterations when targeting greater physics realism or performance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsAutoDisableTimeStep">
            <summary>The length of time that a physics body must remain stationary before the physics engine will "sleep" the body. Physics engines put bodies into sleeping mode in order to avoid detecting collisions between two stationary objects and having to update their positions. This can improve the efficiency of the physics pipeline significantly.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.LoadsCollide">
            <summary>If set to true then collisions are detected between pairs of loads. Otherwise, if set to false, collisions are not detected between pairs of loads. If you don't need to detect collisions between loads then it is recommended to set this property to false in order to reduce the computational cost of the physics pipeline.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.VehiclesCollide">
            <summary>If set to true then collisions are detected between pairs of vehicles. Otherwise, if set to false, collisions are not detected between pairs of vehicles. If you don't need to detect collisions between vehicles then it is recommended to set this property to false in order to reduce the computational cost of the physics pipeline.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsGridSize">
            <summary>Obsolete</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationLinearPhysics">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationUsePathOptimizer">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AnalysisUpdateInterval">
            <summary>How often the Analysis spreadsheet should be updated if there are pending changes to it and it's visible (in seconds).</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationLinearPathCount">
            <summary>A read-only report on the number of linear paths that are in use in the current linear physics simulation.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationOverlapTolerance">
            <summary>Maximum load overlap allowed in Simulation</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationOverlapWarning">
            <summary>Warn if we get loads overlapping by more than SimulationOverlapTolerance in Simulation</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationTransferTolerance">
            <summary>Maximum gap allowed for automatic conveyor to conveyor transfer in Simulation</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationFallingWarning">
            <summary>Warn if we fall more than SimulationTransferTolerance onto a conveyor</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SimulationSensorTolerance">
            <summary>Maximum distance from a sensor that can trigger an OnBlocked or OnCleared event in Simulation</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.MechanismsTimeStep">
            <summary>The discrete amount of time between advancing and solving mechanisms.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.EventLogPath">
            <summary>A simple text based event log path for planar physics. If this is a non empty file path then all planar events will be logged to this file when the model is run.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.GridTileSize">
            <summary>The width/length of the grid tile texture in model space.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorTileSize">
            <summary>The width/length of the floor tile texture in model space.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorMinimumSize">
            <summary>Size of the floor in an empty model.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.FloorMaximumSize">
            <summary>The maximum size the floor can expand to in X or Z.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AlignOffset">
            <summary>Add this as a world offset to any align operation using a control point or axis restricted drag of an object. This allows objects to be aligned to one another with an offset, e.g. 10mm or 1 inch below the top of another object.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PasteOffset">
            <summary>Add this to the location of the last pasted object. Can be used to replicate a conveyor or other object multiple times with equal spacing.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AmbientLight">
            <summary>How objects appear when they are in shadow.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnLoaded">
            <summary>Occurs when the document is first opened.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnUnloaded">
            <summary>Occurs when the document is closed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnVisualAdded">
            <summary>Occurs when a visual is added to the scene.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnVisualRemoved">
            <summary>Occurs when a visual is removed from the scene.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnRealtimeLag">
            <summary>Occurs if the document is running and falls behind by RealtimeLag or more. Useful for ensuring Controls Testing is in sync.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnStart">
            <summary>Occurs when the model starts running after initialize or after it has been stopped/paused.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnStop">
            <summary>Occurs when the model stops running.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OnFloorHit">
            <summary>Occurs when a load first contacts the floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.StopOnError">
            <summary>Stop the model running if an Error is logged.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.OptimizeStaticVisuals">
            <summary>When true optimizes all static visuals when exporting Raw3d files or starting a web server.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ShowDefaultFloorInExport">
            <summary>When true show the default floor when exporting Raw3d files or starting a web server.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.AllowTeleportOnDefaultFloorInExport">
            <summary>When true allow teleporting on to the default floor in exported Raw3d files or web servers.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SelectParentWhenPicked">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsMode">
            <summary>
            The type of Physics being used; Volumetric, Planar or Linear. Setting this is ignored if the model is not in the Reset state or if the edition being run does not support the specified mode.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsEngineType">
            <summary>The volumetric physics engine to use. PhysX can be the fastest and is the default. Bullet is more configurable but not always as fast. ODE can be used for backwards compatibility with older models.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsEngineDefaultSolver">
            <summary>The default physics constraint solver to use (AGX Only).</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PhysicsEngineAutoMerging">
            <summary>Automatically merge rigid bodies to reduce degrees of freedom (AGX Only).</summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.CCD">
            <summary>
            Whether Continuous Collision Detection (CCD) should be performed when running in volumetric physics. Fast moving bodies must have their CCD motion threshold set to a non-zero positive value.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.PreferGPU">
            <summary>
            Whether to prefer the GPU processor for collision detection and constraint solving when running in volumetric physics with PhysX. Note that you must have the PhysX processor set to "GPU" or "Auto" in the NVIDIA Control Panel.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.ReportImpulses">
            <summary>
            Whether to report impulses for collisions when running in volumetric physics with PhysX.  Enabling this option can severely impact performance.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SceneVisual.SortConveyorContacts">
            <summary>
            If enabled then contact points for collisions involving a conveyor are sorted into a clockwise or counterclockwise ordering before being passed to an OnProcessContact event handler. This may be necessary when using certain physics engines with old models or catalog items that were designed with ODE in mind.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScenePorts">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.GridOffsetControlPoint">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GridOffsetControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.IAnimationSettings">
            <summary>
            Provides access to the animation settings.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAnimationSettings.FastForwardSpeed">
            <summary>
            Speed of the model when in fast forward
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAnimationSettings.StopAtTime">
            <summary>
            Stop the model at specified time
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAnimationSettings.StopAfterDuration">
            <summary>
            Stop the model after the specified duration.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAnimationSettings.VideoSpeed">
            <summary>
            Speed at which movies are recorded
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAnimationSettings.StepTime">
            <summary>
            Time skipped by each step
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IAnimationSettings.RealtimeMode">
            <summary>
            Whether the model is run in realtime mode where frames are skipped if behind.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ISceneAnimation">
            <summary>
            Interface for the Scene Animation.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ISceneAnimation.Started">
            <summary>
            Occurs when the model is started.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ISceneAnimation.Stopped">
            <summary>
            Occurs when the model is stopped.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ISceneAnimation.Settings">
            <summary>
            Get the animation settings
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ISceneAnimation.IsRunning">
            <summary>
            Whether the model is running or not.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.Start">
            <summary>
            Starts running the model.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.StartAsync">
            <summary>
            Starts running the model.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.SetSpeed(System.Double)">
            <summary>
            Sets the speed and starts running the model.
            </summary>
            <param name="speed">Speed to run the model.</param>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.FastForwardAsync(System.Double)">
            <summary>
            Starts running the model in fast forward.
            </summary>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.FastForward">
            <summary>
            Starts running the model in fast forward.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.FastForward(System.Double)">
            <summary>
            Starts running the model in fast forward.
            </summary>
            <param name="speed">The fast forward speed.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.Step">
            <summary>
            Moves the model forward one frame.
            </summary>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.SetStepSize(System.Double)">
            <summary>
            Sets the amount of time the next step will cover.
            </summary>
            <param name="time">The amount of time to move forward.</param>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.SetStepSizeAsync(System.Double)">
            <summary>
            Sets the amount of time the next step will cover.
            </summary>
            <param name="time">The amount of time to move forward.</param>
            /// <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.Stop">
            <summary>
            Stops the model.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.StopAsync">
            <summary>
            Stops the model.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ISceneAnimation.RunToTime(System.Double,Demo3D.Visuals.RunMode)">
            <summary>
            Runs the model until the specified time.
            </summary>
            <param name="time">The time to stop the model.</param>
            <param name="runMode">Speed at which the model runs</param>
            <returns>True if successful</returns>
        </member>
        <member name="P:Demo3D.Visuals.CancelBeforeModelStartEventArgs.WasRunningBeforeStartRequested">
            <summary>
            True if the model was running when the model start was requested.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SceneAnimation.NotifyBeforeStart(Demo3D.Visuals.RunMode,System.Double)">
            <summary>
            Fires a cancellable event before starting.
            </summary>
            <returns>Returns <see cref="T:Demo3D.Visuals.CancelBeforeModelStartEventArgs" /> which can be checked to see if the start needs to be cancelled.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ScriptEditor.Plugin.ScriptEditorControlWinF.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptEditor.Plugin.ScriptEditorControlWinF.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CallerInfo">
            <summary>
            Class to store the context of a native print call so double clicking in the message log
            can be redirected to the correct source file and line.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptCompileParameters">
            <summary>
            Control how a <see cref="T:Demo3D.Visuals.ScriptContainer" /> is compiled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptCompileParameters.Tolerant">
            <summary>
            Are we tolerant of errors in JScript parsing?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptCompileParameters.Document">
            <summary>
            <see cref="P:Demo3D.Visuals.ScriptCompileParameters.Document" /> reference for compilation.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptCompileParameters.TokenCreator">
            <summary>
            Function to create a <see cref="T:antlr.Token" /> which can map a Jscript source location back into a script location.
            <para>
            Used for example in QuickLogic.
            </para>
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptCompileParameters.LoadAndCacheAssembly">
            <summary>
            Once we have compiled a script, if it generates an assembly, do we load it into the process and cache it?
            <para>
            Used when converting a Project to a DLL, since we don't care about the intermediate compilation.
            </para>
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptCompileParameters.AdditionalSources">
            <summary>
            Additional compilation items, used by ConvertToDLL at this time.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptCompileParameters.PostProcessCommand">
            <summary>
            Post-processing command for DLL
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptCompileParameters.GenerateDocumentation">
            <summary>
            Should an xml documentation file be generated alongside the DLL (applies to source projects only)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptCompileParameters.#ctor(Demo3D.Visuals.Document)">
            <summary>
            Constructor.
            </summary>
            <param name="doc"><see cref="P:Demo3D.Visuals.ScriptCompileParameters.Document" /> to reference.</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptCompileParameters.#ctor(Demo3D.Visuals.Document,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="doc"><see cref="P:Demo3D.Visuals.ScriptCompileParameters.Document" /> to reference.</param>
            <param name="tolerant">Are we tolerant of errors in JScript parsing?</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptCompileParameters.#ctor(Demo3D.Visuals.Document,System.Boolean,System.Func{antlr.IToken})">
            <summary>
            Constructor.
            </summary>
            <param name="doc"><see cref="P:Demo3D.Visuals.ScriptCompileParameters.Document" /> to reference.</param>
            <param name="tolerant">Are we tolerant of errors in JScript parsing?</param>
            <param name="tokenCreator">Function to create a <see cref="T:antlr.Token" /> which can map a JScript source location back into a script location.</param>
        </member>
        <member name="T:Demo3D.Visuals.ParamDescriptionAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.QuickLogicProviderAttribute">
            <summary>
            Annotate classes and fields that provide additional QuickLogic definitions
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.QuickLogicProviderAttribute.#ctor">
            <summary>
            Annotates a field that provides instance QuickLogic methods
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.QuickLogicProviderAttribute.#ctor(System.Type)">
            <summary>
            Annotates a class to include static methods from providerType
            </summary>
            <param name="providerType"></param>
        </member>
        <member name="T:Demo3D.Visuals.QuickLogicAttribute">
            <summary>
            Annotate scripting functions with this attribute to create QuickLogic widgets
            Eg
            ///[QuickLogic("say hello to {message}")]
            function Hello( message : String ) { print("Hello " + message + "!"); }
            
            NOTE: QuickLogicAttribute also implies YieldReturn.
            
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.QuickLogicContainerAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PersistentReference">
            <summary>
            Reference to external dll that is specified by the user.
            Each script may have a list of references. This list is serialized out.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ScriptEditLog">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SuppressAutoPassingScriptContainerOrThread">
            <summary>
            Attribute to suppress automatically passing in the current script/thread to a method that has a
            ScriptContainer/ScriptThread as its first argument when calling from JScript
            </summary>
            <remarks>Yes, this is a horrible name - suggestions?</remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.LogCompileErrors">
            <summary>
            Outputs compile errors to the message log when true
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.References">
            <summary>
            User-specified references (C#).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.NativeObjectScriptName">
            <summary>
            Name of the NativeObject script automatically generated.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.NativeObjectScriptKey">
            <summary>
            Fixed GUID for the NativeObjectScript.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.ScriptKeyPropertyKey">
            <summary>
            Property key used in .csproj files to store the script key
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.trackCompiledScripts">
            <summary>
            Temporary place to track which scripts have been compiled...
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.IncludeInCompilation">
            <summary>
            True if the script is going to be purged.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.VisualScript">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.nativeSource">
            <summary>
            NOTE: This can be quite expensive in time/memory for a large C# project.
            Consider using <see cref="P:Demo3D.Visuals.ScriptContainer.HasNativeSource" /> instead of <see cref="M:System.String.IsNullOrEmpty(System.String)" />.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetNativeSourcePath(System.String,System.String)">
            <summary>
            Get the solution directory relative path for this native source file.
            </summary>
            <param name="nativeSourceFileName">The source file including its extension.</param>
            <param name="solutionDirectory">Project directory relative path for this source file.</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.FindNativeSourcePath(System.Type,System.String)">
            <summary>
            Find the source file for a given native object type.
            </summary>
            <param name="nativeObjectType"></param>
            <param name="solutionDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.AddScriptReference(Demo3D.Visuals.ScriptContainer)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Add a script reference to this script.
            </summary>
            <param name="script"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to reference.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.RemoveScriptReference(Demo3D.Visuals.ScriptContainer)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Remove a script reference from this script.
            </summary>
            <param name="script"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to reference.</param>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.NativeObjectTypes">
            [Auto] public class ... for autowiring NativeTypeName
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.NativeAssembly">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.HasSameJScriptSource(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Does this script have the same JScript source as another script.
            <para>
            This is a shallow comparison, it does not follow references. You probably want to call <see cref="M:Demo3D.Visuals.ScriptContainer.HasSameContent(Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.ScriptContainerLibrary,Demo3D.Visuals.ScriptContainerLibrary)" />.
            </para>
            </summary>
            <param name="other"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to compare to.</param>
            <returns>true if they have the same JScript source.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.HasSameNativeSource(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Does this script have the same C#/Project source as another script.
            <para>
            This is a shallow comparison, it does not follow references. You probably want to call <see cref="M:Demo3D.Visuals.ScriptContainer.HasSameContent(Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.ScriptContainerLibrary,Demo3D.Visuals.ScriptContainerLibrary)" />.
            </para>
            </summary>
            <param name="other"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to compare to.</param>
            <returns>true if they have the same C#/Project source.</returns>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.HasSameSource(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Does this script have the same JScript, C#/Project and SoltPLC source as another script.
            <para>
            This is a shallow comparison, it does not follow references. You probably want to call <see cref="M:Demo3D.Visuals.ScriptContainer.HasSameContent(Demo3D.Visuals.ScriptContainer,Demo3D.Visuals.ScriptContainerLibrary,Demo3D.Visuals.ScriptContainerLibrary)" />.
            </para>
            </summary>
            <param name="other"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to compare to.</param>
            <returns>true if they have the same JScript, C#/Project and SoltPLC source.</returns>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.ScriptVersion">
            <summary>
            Get any version number of script, i.e. given "Script.123", return "123", otherwise return "".
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.NameWithoutScriptVersion">
            <summary>
            Strip any version number from script, i.e. given "Script.123" or "Script.1.2.3", return "Script".
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.CompareTo(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Compare the names of this script container and another script container for use when sorting.
            The sort is such that it is alphabetic, up to the last ".". If the things after the "." are integers,
            then it is numeric (meaning that Script.2 comes before Script.10), otherwise it remains alphabetic.
            </summary>
            <param name="other"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to compare names with.</param>
            <returns>-1 if this is "before", 0 if this is "equal", and 1 if this is "after"</returns>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.Key">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.Optimize">
            <summary>
            Should C# code be generated to optimize the JScript?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.Load(Demo3D.Visuals.IBuilder,System.String,System.String,Demo3D.Visuals.ScriptContainerLibrary)">
            <summary>
            <para>Loads the <see cref="T:Demo3D.Visuals.ScriptContainer" /> from the given path.</para>
            <para>General script information is applied using the <see cref="T:Demo3D.Visuals.ScriptInfo" /> from <paramref name="infoPath" /> (if available).</para>
            <para><see cref="P:Demo3D.Visuals.ScriptContainer.ImportScriptRefs" /> is populated either using the <see cref="T:Demo3D.Visuals.ScriptInfo" /> from <paramref name="infoPath" /> (if available), and is overridden by inferred references from the .csproj file.
            The script keys will be updated to match those in the given <see cref="T:Demo3D.Visuals.ScriptContainerLibrary" /> (if available).</para>
            </summary>
            <param name="application">The application the script is being loaded into.</param>
            <param name="path">The path to load the script from, for example a .csproj or .cs file.</param>
            <param name="infoPath">Optional. The path to load the <see cref="T:Demo3D.Visuals.ScriptInfo" /> from, if available.</param>
            <param name="library">Optional. The library the script is being added to, used to update the keys of <see cref="P:Demo3D.Visuals.ScriptContainer.ImportScriptRefs" />.</param>
            <exception cref="T:System.Exception">Throws an exception if the application is not licensed edit the script.</exception>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.LoadAsXml(System.IO.StreamReader)">
            <summary>
            Attempts to load the script as XML.
            </summary>
            <param name="reader">The path of the file.</param>
            <returns>A value indicating whether it worked (i.e. the file was actually XML).</returns>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.Export(System.String)">
            <summary>
            FOR INTERNAL USE ONLY. (Probably just the PackageManager plugin)
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.ExportInfo(System.String,Demo3D.Visuals.SharedResources)">
            <summary>
            FOR INTERNAL USE ONLY. (Probably just the PackageManager plugin)
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.TryArchiveUnreferencedProjectFiles(System.String)">
            <summary>
            <para>For project scripts that use default items, archives files in the project directory that do not belong to the script.</para>
            <para>Filtered at the root level using <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludedDirectories" /> and <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludedExtensions" />.
            Any directories starting with a '.' are also excluded if <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludeDotDirectories" /> is true.</para>
            <para>Used as a safer alternative to deleting the files.</para>
            </summary>
            <param name="solutionDir">The directory containing the project to clean, usually the solution directory.</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.EnumerateArchivableProjectFiles(System.String)">
            <summary>
            Enumerates the files that can be archived within the project directory recursively, excluding the files and
            directories at the root level that match <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludedDirectories" /> and <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludedExtensions" />.
            Any directories starting with a '.' are also excluded if <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludeDotDirectories" /> is true.
            </summary>
            <param name="projectDir">The directory to enumerate the files within.</param>
            <returns>
            The files within the directory and its subdirectories, filtered at the root level using <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludedDirectories" /> and <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludedExtensions" />.
            Any directories starting with a '.' are also excluded if <see cref="F:Demo3D.Visuals.ScriptContainer.ExcludeDotDirectories" /> is true.
            </returns>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.Source">
            <summary>
            JScript source
            </summary>
            <remarks>Public since VanRiet scripts use it</remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.NativeSource">
            <summary>
            Either a single C# code set or an XML version of NativeSources.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.NativeSources">
            <summary>
            The set of sources needed to build a .dll (.csproj, .cs, packages.config, .xaml, .resx, etc.).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetNativeSources(System.String)">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetNativeSourcesKeys">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.SetNativeSources(Demo3D.Visuals.IBuilder,System.String,System.Byte[])">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.HasDllSource">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.LoadProjectFromBytes(Microsoft.Build.Evaluation.ProjectCollection)">
            <summary>
            For a C# project script, loads the project into memory using the data under &lt;native-assembly-name&gt;.csproj (or a valid named .csproj).
            </summary>
            <param name="projectCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetProjectNativeSourceKey">
            <summary>
            For a C# project script, returns the first eligible native source key for the .csproj. Returns null otherwise.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.IsObfuscationDetected">
             <summary>
             FOR INTERNAL USE ONLY
             Is obfuscation detected in this script?
             </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.PrimaryScriptType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainer.SourceForToolTip">
            <summary>
            Returns source for the tooltips in the scripts dropdown menu.
            Has to be public for binding to work.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.SetSource(Demo3D.Visuals.IBuilder,System.String,System.Boolean)">
            <summary>
            <para> If <paramref name="native" /> is false, sets <see cref="P:Demo3D.Visuals.ScriptContainer.Source" />. Otherwise sets <see cref="P:Demo3D.Visuals.ScriptContainer.NativeSource" />.</para>
            <para>For native scripts, consider using <see cref="M:Demo3D.Visuals.ScriptContainer.SetNativeSources(Demo3D.Visuals.IBuilder,System.Collections.Generic.Dictionary{System.String,System.Byte[]})" /> instead.</para>
            </summary>
            <param name="app">The current application.</param>
            <param name="newSource">The source to apply to the script.</param>
            <param name="native">If false, <see cref="P:Demo3D.Visuals.ScriptContainer.Source" /> is set. Otherwise <see cref="P:Demo3D.Visuals.ScriptContainer.NativeSource" /> is set.</param>
            <exception cref="T:System.Exception">Thrown if modification of the script is not permitted.</exception>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.SetNativeSources(Demo3D.Visuals.IBuilder,System.Collections.Generic.Dictionary{System.String,System.Byte[]})">
            <summary>
            Sets <see cref="P:Demo3D.Visuals.ScriptContainer.NativeSource" />.
            </summary>
            <param name="app">The current application.</param>
            <param name="newNativeSources">The native sources to apply to the script.</param>
            <exception cref="T:System.Exception">Thrown if modification of the script is not permitted.</exception>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetScriptReferences(Demo3D.Visuals.ScriptContainerLibrary)">
            <summary>
            Get all scripts that this script depends upon (including this script).
            </summary>
            <param name="library"><see cref="T:Demo3D.Visuals.ScriptContainerLibrary" /> that this script is in</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this and all referenced scripts</returns>
            <remarks>The order in which the scripts will be returned is undefined</remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetScriptReferences(Demo3D.Visuals.ScriptContainerLibrary,System.Collections.Generic.HashSet{Demo3D.Visuals.ScriptContainer})">
            <summary>
            Get all scripts that this script depends upon (including this script), but filtering out any "previously" seen
            </summary>
            <param name="library"><see cref="T:Demo3D.Visuals.ScriptContainerLibrary" /> that this script is in</param>
            <param name="scriptsSeen">Scripts marked as "already seen" allowing subsequent calls to this function to collect only "new" scripts</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this and all referenced scripts</returns>
            <remarks>The order in which the scripts will be returned is undefined</remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetTopLevelScriptReferences(Demo3D.Visuals.ScriptContainerLibrary)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            <para>Returns the top level of scripts referenced by this script, which must be in the library.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetScriptReferencesBottomUp(Demo3D.Visuals.ScriptContainerLibrary)">
            <summary>
            For the this script (which should be contained within the supplied library), return the script and
            all referenced scripts in "bottom-up" order.
            </summary>
            <param name="library"><see cref="T:Demo3D.Visuals.ScriptContainerLibrary" /> containing this script</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this script and referenced scripts ordered "bottom-up"</returns>
            <remarks>
            The order is such that for each script returned, any scripts it references will have already been returned.
            This is the order that you would compile all the scripts such that when you compiled a script with references,
            all the references would have already been compiled, or writing out a csproj file programatically to make
            sure referenced script projects already exist.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetScriptReferencesTopDown(Demo3D.Visuals.ScriptContainerLibrary)">
            <summary>
            For the this script (which should be contained within the supplied library), return the script and
            all referenced scripts in "top-down" order.
            </summary>
            <param name="library"><see cref="T:Demo3D.Visuals.ScriptContainerLibrary" /> containing this script</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this script and referenced scripts ordered "top-down"</returns>
            <remarks>
            The order is such that for each script returned, no subsequent scripts will reference it.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.UpdateAssociatedVisuals(Demo3D.Visuals.Document)">
            <summary>
            Recreate native objects for all visuals where the script (or referenced script) has changed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.nativeCodeLock">
            <summary>
            Cache of jscript code to c# code.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.UncacheNativeCode(Demo3D.Visuals.Document)">
            <summary>
            Uncache the JScript to c# code - this allows us to clear the cache when turning off the "optimize" icon in the script editor.
            This means we regenerate the c# when we re-enable "optimize" and get all the warnings again (otherwise you have to change the
            JScript so it doesn't match any existing code).
            </summary>
            <param name="doc">Document</param>
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.OverrideClassContent">
            <summary>
            This is set when generating native code for QuickScript, <see cref="M:Demo3D.QuickLogic.CustomLogic.CompileNow" />).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptContainer.OverrideClassInheritance">
            <summary>
            This is set when generating native code for QuickScript, <see cref="M:Demo3D.QuickLogic.CustomLogic.CompileNow" />).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.GetDeveloperOrRuntimeLicensedEncrypter">
            <summary>
            First attempt to get a developer encrypter license (fail silently), then attempt to get a runtime encrypter license.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.ShouldWriteEncryptedSource(Demo3D.Visuals.FileBasedSerializer)">
            <summary>
            Returns false only if not encrypted, or if using a developer license and writing to a standard file system i.e. pure 3dx format, not 2020).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainer.Clone(System.Guid)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`1">
            <summary>
            The ScriptReference(T) class holds references to user callbacks that should be called when 
            the event this ScriptReference refers to occurs.
            The arguments to the callbacks are of type (T sender).
            </summary>
            <typeparam name="T">The type of the first argument to the event callback.</typeparam>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`1.NativeBlockingListenersDelegate">
            <summary>
            Represents the method that will handle resumable coroutine callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <returns>yield return an <see cref="T:Demo3D.EventQueue.ITask" /> to suspend.</returns>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`1.NativeListenersDelegate">
            <summary>
            Represents the method that will handle callbacks when the event for the ScriptReference occurs.
            <param name="sender">The first argument to the event callback.</param>
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`1.NativeTaskListenersDelegate">
            <summary>
            Represents the method that will handle resumable async Task callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing whether the callback has completed or not.</returns>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`1.NativeListeners">
            <summary>
            Add blocking callback delegates to this event.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`1.NativeBlockingListeners">
            <summary>
            Add non-blocking callback delegates to this event (IEnumerable return type).
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`1.NativeTaskListeners">
            <summary>
            Add async callback delegates to this event (async Task return type).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`2">
            <summary>
            The ScriptReference(T1, T2) class holds references to user callbacks that should be called when 
            the event this ScriptReference refers to occurs.
            The arguments to the callbacks are of type (T1 sender, T2 arg).
            </summary>
            <typeparam name="T1">The type of the first argument to the event callback.</typeparam>
            <typeparam name="T2">The type of the second argument to the event callback.</typeparam>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`2.NativeBlockingListenersDelegate">
            <summary>
            Represents the method that will handle resumable coroutine callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg">The second argument to the event callback.</param>
            <returns>yield return an <see cref="T:Demo3D.EventQueue.ITask" /> to suspend.</returns>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`2.NativeListenersDelegate">
            <summary>
            Represents the method that will handle callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg">The second argument to the event callback.</param>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`2.NativeTaskListenersDelegate">
            <summary>
            Represents the method that will handle resumable async Task callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg">The second argument to the event callback.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing whether the callback has completed or not.</returns>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`2.NativeListeners">
            <summary>
            Add blocking callback delegates to this event.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`2.NativeBlockingListeners">
            <summary>
            Add non-blocking callback delegates to this event (IEnumerable return type).
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`2.NativeTaskListeners">
            <summary>
            Add async callback delegates to this event (async Task return type).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`3">
            <summary>
            The ScriptReference(T1, T2, T3) class holds references to user callbacks that should be called when 
            the event this ScriptReference refers to occurs.
            The arguments to the callbacks are of type (T1 sender, T2 arg1, T3 arg2).
            </summary>
            <typeparam name="T1">The type of the first argument to the event callback.</typeparam>
            <typeparam name="T2">The type of the second argument to the event callback.</typeparam>
            <typeparam name="T3">The type of the third argument to the event callback.</typeparam>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`3.NativeBlockingListenersDelegate">
            <summary>
            Represents the method that will handle resumable coroutine callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg1">The second argument to the event callback.</param>
            <param name="arg2">The third argument to the event callback.</param>
            <returns>yield return an <see cref="T:Demo3D.EventQueue.ITask" /> to suspend.</returns>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`3.NativeListenersDelegate">
            <summary>
            Represents the method that will handle callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg1">The second argument to the event callback.</param>
            <param name="arg2">The third argument to the event callback.</param>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`3.NativeTaskListenersDelegate">
            <summary>
            Represents the method that will handle resumable async Task callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg1">The second argument to the event callback.</param>
            <param name="arg2">The third argument to the event callback.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing whether the callback has completed or not.</returns>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`3.NativeListeners">
            <summary>
            Add blocking callback delegates to this event.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`3.NativeBlockingListeners">
            <summary>
            Add non-blocking callback delegates to this event (IEnumerable return type).
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`3.NativeTaskListeners">
            <summary>
            Add async callback delegates to this event (async Task return type).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference`3.NotifyNativeNonBlockingListeners(`0,`1,`2)">
            <summary>
            Notify listeners, without allowing Wait, OnMessage, etc. e.g. OnProcessContact handlers
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`4">
            <summary>
            The ScriptReference(T1, T2, T3, T4) class holds references to user callbacks that should be called when 
            the event this ScriptReference refers to occurs.
            The arguments to the callbacks are of type (T1 sender, T2 arg1, T3 arg2, T4 arg3).
            </summary>
            <typeparam name="T1">The type of the first argument to the event callback.</typeparam>
            <typeparam name="T2">The type of the second argument to the event callback.</typeparam>
            <typeparam name="T3">The type of the third argument to the event callback.</typeparam>
            <typeparam name="T4">The type of the fourth argument to the event callback.</typeparam>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`4.NativeBlockingListenersDelegate">
            <summary>
            Represents the method that will handle resumable coroutine callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg1">The second argument to the event callback.</param>
            <param name="arg2">The third argument to the event callback.</param>
            <param name="arg3">The fourth argument to the event callback.</param>
            <returns>yield return an <see cref="T:Demo3D.EventQueue.ITask" /> to suspend.</returns>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`4.NativeListenersDelegate">
            <summary>
            Represents the method that will handle callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg1">The second argument to the event callback.</param>
            <param name="arg2">The third argument to the event callback.</param>
            <param name="arg3">The fourth argument to the event callback.</param>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference`4.NativeTaskListenersDelegate">
            <summary>
            Represents the method that will handle resumable async Task callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="sender">The first argument to the event callback.</param>
            <param name="arg1">The second argument to the event callback.</param>
            <param name="arg2">The third argument to the event callback.</param>
            <param name="arg3">The fourth argument to the event callback.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing whether the callback has completed or not.</returns>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`4.NativeListeners">
            <summary>
            Add blocking callback delegates to this event.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`4.NativeBlockingListeners">
            <summary>
            Add non-blocking callback delegates to this event (IEnumerable return type).
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ScriptReference`4.NativeTaskListeners">
            <summary>
            Add async callback delegates to this event (async Task return type).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReferenceExtension">
            <summary>
            ScriptReference extension methods that invoke the event for the script method calling all associated C# delegates and JScript functions to be invokes.
            Use Run to invoke the ScriptReference asynchronously (in another simulation thread) or RunNow to invoke it synchronously (inline in the current simulation thread).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference">
            <summary>
            The ScriptReference class holds references to user callbacks that should be called when 
            the event this ScriptReference refers to occurs.
            The arguments to the callbacks are of type (params object[] args).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptReference.Empty">
            <summary>
            An empty ScriptReference.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptReference.Name">
            <summary>
            The JScript function to call on the Script for this visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.ToString">
            <summary>
            The JScript function to be called and whether there are any native listeners.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptReference.IsNull">
            <summary>
            Will a JScript function be called or not when the event occurs.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.Clear">
            <summary>
            Remove the reference to the JScript function (set Name to an empty string).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.AddFunctionListener(Demo3D.Visuals.Visual,Demo3D.Script.Function)">
            <summary>
            Add a function that will be called when this script reference is invoked. The target
            visual is prepended to the script reference's original signature such that an event
            like OnBlocked would expect a function like this to be passed:
            function (target : Visual, sender : Visual, load : Visual)
            The functions are cleared upon each reset, removing the need for cleanup. The 
            function list is not persisted upon model save.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.RemoveFunctionListeners(Demo3D.Visuals.Visual)">
            <summary>
            Remove function listeners for a given target Visual.
            </summary>
            <param name="target">The Visual to remove target listeners for.</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.IncListenerCount">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.DecListenerCount">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ScriptReference.NativeListenersDelegate">
            <summary>
            Represents the method that will handle callbacks when the event for the ScriptReference occurs.
            </summary>
            <param name="args">The arguments to the event callback.</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.NotifyNativeListenersBase(System.Object[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.ClearNativeListeners(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.ClearNativeBlockingListeners(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.ResetNativeListeners">
            <summary>
            Called OnReset to remove any wired events.
            [Auto] Events should be re-added automatically after this is called.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.RunScriptFunction(System.Object[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.Demo3D#EventQueue#IHookable#Unhook">
            <summary>
            Clear out any waiting events when the dispatcher is cleared/reset.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.ClearOnCancelled">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.CancelEvent">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.#ctor">
            <summary>
            Construct a new ScriptReference object.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ScriptReference.nl">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.ScriptReference.tab">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.GenerateStub(Demo3D.Visuals.Visual,System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ScriptReference.Reference">
            <summary>
            Needed for script compilation to work correctly.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ScriptReference.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.AnimatorScriptReference">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.NativeTypeNameSelector">
            <summary>
            Allow the user to select a NameTypeName from the list of [Auto] tagged classes in the script dll.
            Or alternatively type in a fully qualified type name.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptSelector">
            <summary>
            Allow the user to select a script name. The list of unique script names
            is gathered from all the script libraries known in the current document's
            script registry.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ExpressionBaseConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ExprAny">
            <summary>
            The Expr types can be used for ScriptAction parameters to allow the
            user to specify either a literal value or an expression.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ExprAny.MyThread">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ExprAny.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ExprAny.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ExprDouble.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ExprDouble.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ExprVisual">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ExprScript">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DefaultExprDoubleAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DefaultExprStringAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ScriptReferencePropertyDescriptor">
            <summary>
            Globalized script reference property descriptor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptReferencePropertyDescriptor.Attributes">
            <summary>
             Strip off the browsable false attribute if it exists or we can't see edit scripts.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptReferencePropertyDescriptor.GetValue(System.Object)">
            <summary>
            Get the script reference to edit it.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ScriptPropertyCollection">
            <summary>
            Collect all script reference in the supplied component and in the first
            level of expandable properties.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.YieldReturnState">
            <summary>
            Indicate whether a method marked as [YieldReturn] is an error or a warning in Optimized JScript.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.YieldReturnAttribute">
            <summary>
            Methods marked as with the YieldReturnAttribute should suspend the current
            thread by calling yield return in native methods (like Wait...).
            
            NOTE: QuickLogicAttribute implies YieldReturnAttribute.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ScriptKey.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ScriptKey.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.CreateWithKey(System.String,Demo3D.Visuals.ScriptKey)">
            <summary>
            Create a new ScriptContainer with specified key within this ScriptLibrary.
            <para>It is an error if the script name or key already exists in this library.</para>
            </summary>
            <param name="name">Name of new script.</param>
            <param name="key"><see cref="T:Demo3D.Visuals.ScriptKey" /> of new script.</param>
            <returns>New <see cref="T:Demo3D.Visuals.ScriptContainer" />.</returns>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainerLibrary.Item(Demo3D.Visuals.ScriptKey)">
            <summary>
            Get a script given a script key.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainerLibrary.Item(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Get an existing or new script key given a script
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.MergeFrom(Demo3D.Visuals.ScriptContainerLibrary)">
            <summary>
            Merge the scripts from the supplied library into this library.
            </summary>
            <param name="scriptLib"></param>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainerLibrary.Count">
            <summary>
            How many scripts are stored in this library?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.Clear">
            <summary>
            Clear out all scripts from the library.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ScriptContainerLibrary.NewScriptsNeedRunning">
            <summary>
            Gets or sets a value indicating whether new scripts have been added to the library and so all scripts must be run before any more scripts are executed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.RunNewScriptsIfNecessary(Demo3D.Visuals.Document)">
            <summary>
            If new scripts have been added to the library, then this runs them to make sure all scripts are compiled.
            </summary>
            <param name="document">The document with which to run the scripts.</param>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.OrderScriptsBottomUp(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            For the supplied scripts (which should be contained within this library *and* should contain all the
            scripts which are referenced), return the scripts in "bottom-up" order.
            Any scripts referenced but not supplied will be ignored.
            </summary>
            <param name="allScripts"><see cref="T:System.Collections.Generic.IEnumerable`1" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of these scripts ordered "bottom-up"</returns>
            <remarks>
            The order is such that for each script returned, any scripts it references will have already been returned.
            This is the order that you would compile all the scripts such that when you compiled a script with references,
            all the references would have already been compiled, or writing out a csproj file programatically to make
            sure referenced script projects already exist.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.OrderScriptsTopDown(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            For the supplied scripts (which should be contained within this library *and* should contain all the
            scripts which are referenced), return the scripts in "top-down" order.
            </summary>
            <param name="allScripts"><see cref="T:System.Collections.Generic.IEnumerable`1" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of these scripts ordered "top-down"</returns>
            <remarks>
            The order is such that for each script returned, no subsequent scripts will reference it.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetScriptReferencesBottomUp(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            For the supplied scripts (which should be contained within this library), return the scripts and
            all referenced scripts in "bottom-up" order.
            </summary>
            <param name="scripts"><see cref="T:System.Collections.Generic.IEnumerable`1" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of these scripts and referenced scripts ordered "bottom-up"</returns>
            <remarks>
            The order is such that for each script returned, any scripts it references will have already been returned.
            This is the order that you would compile all the scripts such that when you compiled a script with references,
            all the references would have already been compiled, or writing out a csproj file programatically to make
            sure referenced script projects already exist.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetScriptReferencesTopDown(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            For the supplied scripts (which should be contained within this library), return the scripts and
            all referenced scripts in "top-down" order.
            </summary>
            <param name="scripts"><see cref="T:System.Collections.Generic.IEnumerable`1" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of these scripts and referenced scripts ordered "top-down"</returns>
            <remarks>
            The order is such that for each script returned, no subsequent scripts will reference it.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetScriptReferencesBottomUp(Demo3D.Visuals.ScriptContainer)">
            <summary>
            For the supplied script (which should be contained within this library), return the script and
            all referenced scripts in "bottom-up" order.
            </summary>
            <param name="script"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this script and referenced scripts ordered "bottom-up"</returns>
            <remarks>
            The order is such that for each script returned, any scripts it references will have already been returned.
            This is the order that you would compile all the scripts such that when you compiled a script with references,
            all the references would have already been compiled, or writing out a csproj file programatically to make
            sure referenced script projects already exist.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetScriptReferencesTopDown(Demo3D.Visuals.ScriptContainer)">
            <summary>
            For the supplied script (which should be contained within this library), return the script and
            all referenced scripts in "top-down" order.
            </summary>
            <param name="script"><see cref="T:Demo3D.Visuals.ScriptContainer" /> to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this script and referenced scripts ordered "top-down"</returns>
            <remarks>
            The order is such that for each script returned, no subsequent scripts will reference it.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetReferencingScripts(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Get all scripts that reference the given script (including the given script)
            </summary>
            <param name="script">The script for which the referencing scripts should be found</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of input script and all referencing scripts</returns>
            <remarks>The order in which the scripts will be returned is undefined</remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetReferencingScripts(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            Get all scripts that reference the given scripts (including the given scripts)
            </summary>
            <param name="scripts">The scripts for which the referencing scripts should be found</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of input scripts and all referencing scripts</returns>
            <remarks>The order in which the scripts will be returned is undefined</remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetReferencingScriptsBottomUp(Demo3D.Visuals.ScriptContainer)">
            <summary>
            For the supplied script (which should be contained within this library), return the script and
            all scripts that reference it in "bottom-up" order.
            </summary>
            <param name="script"><see cref="T:Demo3D.Visuals.ScriptContainer" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this script and referencing scripts ordered "bottom-up"</returns>
            <remarks>
            The order is such that for each script returned, any scripts it references will have already been returned.
            This is the order that you would compile all the scripts such that when you compiled a script with references,
            all the references would have already been compiled, or writing out a csproj file programatically to make
            sure referenced script projects already exist.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetReferencingScriptsTopDown(Demo3D.Visuals.ScriptContainer)">
            <summary>
            For the supplied script (which should be contained within this library), return the script and
            all scripts that reference it in "top-down" order.
            </summary>
            <param name="script"><see cref="T:Demo3D.Visuals.ScriptContainer" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of this script and referencing scripts ordered "top-down"</returns>
            <remarks>
            The order is such that for each script returned, no subsequent scripts will reference it.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetReferencingScriptsBottomUp(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            For the supplied scripts (which should be contained within this library), return the scripts and
            all scripts that reference them in "bottom-up" order.
            </summary>
            <param name="scripts"><see cref="T:Demo3D.Visuals.ScriptContainer" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of these scripts and referencing scripts ordered "bottom-up"</returns>
            <remarks>
            The order is such that for each script returned, any scripts it references will have already been returned.
            This is the order that you would compile all the scripts such that when you compiled a script with references,
            all the references would have already been compiled, or writing out a csproj file programatically to make
            sure referenced script projects already exist.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetReferencingScriptsTopDown(System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            For the supplied scripts (which should be contained within this library), return the scripts and
            all scripts that reference them in "top-down" order.
            </summary>
            <param name="scripts"><see cref="T:Demo3D.Visuals.ScriptContainer" />s to consider</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of these scripts and referencing scripts ordered "top-down"</returns>
            <remarks>
            The order is such that for each script returned, no subsequent scripts will reference it.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetScriptReferencesBottomUp">
            <summary>
            For all scripts contained in this library, return the scripts in "bottom-up" order.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of all scripts ordered "bottom-up"</returns>
            <remarks>
            The order is such that for each script returned, any scripts it references will have already been returned.
            This is the order that you would compile all the scripts such that when you compiled a script with references,
            all the references would have already been compiled, or writing out a csproj file programatically to make
            sure referenced script projects already exist.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.ScriptContainerLibrary.GetScriptReferencesTopDown">
            <summary>
            For all scripts contained in this library, return the scripts in "top-down" order.
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> of all scripts ordered "top-down"</returns>
            <remarks>
            The order is such that for each script returned, no subsequent scripts will reference it.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.ISelectionManager.Selection">
            <summary>
            The current selection
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ISelectionManager.SelectedFeature">
            <summary>
            The currently selected feature
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ISelectionManager.HighlightedFeature">
            <summary>
            The currently highlighted feature
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.Select(System.Collections.IList)">
            <summary>
            Create a new selection
            </summary>
            <param name="visuals"></param>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.Select(Demo3D.Visuals.Visual)">
            <summary>
            Create a new selection from a single visual
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.AddToSelection(Demo3D.Visuals.Visual)">
            <summary>
            Add a visual to the current selection
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.AddToSelection(System.Collections.IList)">
            <summary>
            Add visuals to the current selection
            </summary>
            <param name="visuals"></param>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.RemoveFromSelection(Demo3D.Visuals.Visual)">
            <summary>
            Remove visual from the current selection
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.RemoveFromSelection(System.Collections.IList)">
            <summary>
            Remove visuals from the current selection
            </summary>
            <param name="visuals"></param>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.AdjustSelection(Demo3D.Visuals.Visual)">
            <summary>
            Add or Remove a visual from the selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.SelectAllChildren(Demo3D.Visuals.Visual)">
            <summary>
            Select all children of a visual
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.ClearSelection">
            <summary>
            Clear the current selection
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ISelectionManager.InvertSelection">
            <summary>
            Invert the current selection.
            This will select all visible Visuals that are currently not selected and deselect all that are selected.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SelectionManager.RemoveAllExcept(Demo3D.Visuals.SelectionManager,System.Collections.ArrayList)">
            <summary>
            Removes all visuals from the oldSelection that aren't contained within newSelection.
            </summary>
            <param name="sm">The selection manager containing the previous selection array</param>
            <param name="newSelection">The list of visuals conatined within the current selection</param>
        </member>
        <member name="M:Demo3D.Visuals.SelectionManager.AdjustSelection(Demo3D.Visuals.Visual)">
            <summary>
            Add or Remove a visual from the selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SelectionManager.SelectChildren(Demo3D.Visuals.Visual)">
            <summary>
            Select children if they are to be included else select their children.
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.Visuals.SelectionManager.PruneVisualsWhereAncestorInSelection(System.Collections.ArrayList)">
            <summary>
            If a sensor on a conveyor is selected don't allow the sensor to be selected as well.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VisualMouseEventManager">
            <summary>
            Used to keep a collection of visuals that have MouseOver, MouseLeave and MouseMove events
            to allow for faster picking for mouse moves.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ISensor">
            <summary>
            Interface for handling PhotoEye and PhysicsObject visuals as sensors in the same way.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ISensor.AddBlockingLoad(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ISensor.RemoveBlockingLoad(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ISensor.SaveSensorState">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ISensorProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ISensorPortProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SensorProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PhotoEyeProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PhotoEyeProperties.FixSensorTimeouts(Demo3D.Common.Serializer,Demo3D.Visuals.ISensorProperties,System.Boolean,System.Boolean)">
            <summary>
            Handle the old default of 3.0 for sensor timeouts which changed to 0.0 after V5.1.0.3935.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.SensorLogic">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.SensorLogic.notifyBlockingLoadsChange">
            Bodge for D-2150 - make SensorLogic on Sensors "notify" when changes to BlockingLoads would change "properties", IsBlocked, etc
            This *could* be used to also make things like WaitUntil(sender.BlockingLoads.Count == 2) work as well
        </member>
        <member name="M:Demo3D.Visuals.SensorLogic.OnBlockedTimeout(Demo3D.Visuals.Visual)">
            <summary>
            Called after a sensor has been blocked for a certain amount of time and then 
            repeatedly while it's still blocked.
            NOTE: When not sensing multiple loads the blocking load passed into the callback
            is always the first load that blocked the sensor even if it is no longer blocking
            the sensor.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PhotoEye">
            <summary>
            Class encapsulating the behavior of a photo eye visual in terms of being a physics based sensor for sensing loads and vehicles but also having a graphical appearance.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.BlockingLoad">
            <summary>The first load to block the sensor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.BlockingLoads">
            <summary>The list of loads that are blocking the sensor. This will only contain more than one load if SenseMultipleLoads is true and multiple loads are blocking the sensor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.OnBlocked">
            <summary>Occurs when the sensor is blocked.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.OnCleared">
            <summary>Occurs when the sensor is cleared.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.OnBlockedTimeout">
            <summary>Occurs when the sensor has been blocked for BlockedTimeout seconds.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.OnClearedTimeout">
            <summary>Occurs when the sensor has been cleared for ClearedTimeout seconds.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.BlockedTime">
            <summary>The time the sensor was last blocked.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.ClearedTime">
            <summary>The time the sensor was last cleared.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.ClearedTimeout">
            <summary>The OnClearedTimeout occurs if the sensor is still cleared after this number of seconds and is not blocked again. If 0 then the event is never fired.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.BlockedTimeout">
            <summary>Occurs if the sensor is still blocked after this number of seconds. If 0 then the event is never fired.</summary>
        </member>
        <member name="P:Demo3D.Visuals.PhotoEye.Port">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.SensorVisual">
            <summary>
            Abstract class for modeling physics based sensors. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SensorVisual.bindings">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.SensorVisual.sensorLogic">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.SensorVisual.isClearedBinding">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.SensorVisual.MaxBeamAngle">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.SensorLogic">
            <summary>
            Bodge for D-2150 - make SensorLogic on Sensors "notify" when changes to BlockingLoads would change "properties" IsBlocked, etc
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.AddBlockingLoad(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.RemoveBlockingLoad(Demo3D.Visuals.Visual,System.Boolean)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.SaveSensorState">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.ClearControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.NotifyOnBeforePropertyUpdated(System.String)">
            <summary>
            Position changes cause support stands must be reconfigured.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <summary>
            If conveyor changes anything then sensor must be reconfigured.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.Reset">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.ClampedBeamAngle">
            <summary>
            The BeamAngle clamped to +/- <see cref="F:Demo3D.Visuals.SensorVisual.MaxBeamAngle" /> degrees.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.BeamLengthZ">
            <summary>
            The horizontal length of the photo eye beam, across the parent conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.BeamLength">
            <summary>
            The length of the photo eye beam.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.MeshBoundingBox">
            <summary>
            Bounding box used for Simulation collision calculations. Only use beam, not side bars or load stops too soon/late.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.GetPickMeshKey">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.GetMeshKey">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.Conveyor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.AttachType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.AttachedVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.DetachFromVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SensorVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.AttachDirection">
            <summary>When attaching to a conveyor snap with the X axis align Forwards, Reverse or Nearest where Nearest means snap either way favoring the current relative orientation of the sensor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.OnAttachToVisual">
            <summary>Occurs when the sensor is attached to a conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.OnDetachFromVisual">
            <summary>Occurs when the sensor is detached from a conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.BoxMaterial">
            <summary>The color of the box on the side of the conveyor that the beam comes out from and goes to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.BlockedMaterial">
            <summary>The color of the beam when it is blocked.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.ClearedMaterial">
            <summary>The color of the beam when it is not blocked.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.DisabledMaterial">
            <summary>The color of the beam when it is not enabled to sense loads.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.BeamAngle">
            <summary>The angle of the beam on the conveyor. This is in the range +/-75 degrees, with 0 being perpendicular to the direction of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.Overhang">
            <summary>How far the sensor overhangs the sides of the conveyor. A value of 0 aligns the sensor to the exact width of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.BeamHeight">
            <summary>The height of the photo eye beam above the top of roller or belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.SenseMultipleLoads">
            <summary>If false then OnBlocked is called once for the first load that blocks the sensor and subsequent blocks are ignored. Also OnCleared is only called when the last load clears the sensor. If true then OnBlocked and OnCleared (including Timeouts) are called for each individual load.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SensorVisual.Position">
            <summary>The distance of the sensor from the start of the attached conveyor. This value can be an expression, for example: (Attached.Length-0.25) will make sure that the sensor is always 0.25 from the end of the conveyor. Another example: Fixed(0.1) will make sure that the sensor is always 0.1 from the start of the conveyor.</summary>
        </member>
        <member name="T:Demo3D.Visuals.PhotoEyePorts">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SubAction">
            <summary>
            Returns length of action. Return -1 for unknown duration.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ActionCompleted">
            <summary>
            Delegate used for notification when an action is complete or cancelled. Note that
            Action.OnActionCompleted is compatible with this delegate.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.InternalAction">
            <summary>
            An action typically initializes an animation and returns the duration
            of the animation (all as part of the Process() method.
            
            If the duration of the action is unknown at the time that Process() is
            called, then return -1. The duration is used mainly by ActionSequence
            to know when to schedule the next action, so if -1 is returned, it will
            be necessary to signal the calling ActionSequence when the action finally
            is complete.
            
            OnActionCompleted is used to signal interested parties that the action
            is complete.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InternalAction.Parent">
            <summary>
            Our calling action. We can navigate the callstack this way.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InternalAction.Process(Demo3D.Visuals.Visual)">
            <summary>
            Execute the action. Return the duration of the action, or -1 if
            unknown, whereby a listener will be set up for OnActionCompleted.
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.InternalAction.Cancel">
            <summary>
            Cancel stops further execution of this action. The action may
            be restarted later, so this method should not tear down the action
            internals.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ActionDelegate">
            <summary>
            Wrapper class used to contain the SubAction delegate.
            If a SubAction is to return -1 indicating indeterminate
            action duration, then ActionDelegate.OnScriptCompleted() should
            be called once the action has completed, in order for the
            owning ActionSequence to schedule the next action.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ISerializableObjectContainer">
            <summary>
            A container for an object that manages and contains SerializableObjects.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ISerializableObjectContainer.SerializableObjects">
            <summary>
            Serializable objects that are managed by this container.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObjectLibrary.PrepareForReload">
            <summary>
            Store the current registry as xml which allows reloading of the library with updated types (such as after a recompile)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObjectLibrary.Reload">
            <summary>
            Reload the registry from stored xml
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObjectLibrary.Write(Demo3D.Common.Serializer,System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <summary>
            Write all serializable objects in the registry that are owned by <paramref name="visuals" /> or child aspects of the visuals.
            IMPORTANT: This does not include children of <paramref name="visuals" />
            </summary>
            <param name="serializer"></param>
            <param name="visuals"></param>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObjectLibrary.GetSerializableObjectsFromVisuals(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual},System.Boolean)">
            <summary>
            Get all serializable objects in the registry that are serializable dependencies of every visual in <paramref name="visuals" />
            </summary>
            <param name="visuals"></param>
            <param name="includeDescendants">When true, also search all visuals descendants</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObjectLibrary.GetSerializableObjectsFromVisual(Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Get all serializable objects in the registry that are serializable dependencies of <paramref name="visual" /> or it's descendants
            </summary>
            <param name="visual"></param>
            <param name="includeDescendants"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObjectLibrary.GetSerializableObjectToXml(Demo3D.Visuals.Document,System.Collections.Generic.IEnumerable{Demo3D.Visuals.SerializableObject})">
            <summary>
            Gets the xml of all the serializable objects, and all it's dependencies.
            </summary>
            <param name="doc">The current document</param>
            <param name="objects">The objects to serialize</param>
            <returns>The xml of the objects as a serializable object library</returns>
        </member>
        <member name="M:Demo3D.Visuals.SerializableObjectLibrary.GetSerializableObjectsFromXml(Demo3D.Visuals.Document,System.Guid,System.Guid,System.String)">
            <summary>
            Returns all serializable objects from the xml
            </summary>
            <param name="doc">The current document</param>
            <param name="sourceContainerId">The id of the container where the objects originally came from</param>
            <param name="targetContainerId">The id of the container where the objects will be assigned to</param>
            <param name="xml">The xml of a serializable object library which contains the objects</param>
            <returns>A collection of serializable objects</returns>
        </member>
        <member name="T:Demo3D.Visuals.SerializerExt">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ShadowVolume">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ShadowVolume.ShadowAlgorithm">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.CreateUncappedShadowVolume(Demo3D.Visuals.ShadowVolume.ShadowInformation,Microsoft.DirectX.Vector3,System.Single,Microsoft.DirectX.Matrix)">
            <summary>
            Takes a mesh as input, and uses it to build a shadowvolume. The
            technique used considers each triangle of the mesh, and adds it's
            edges to a temporary list. The edge list is maintained, such that
            only silhouette edges are kept. Finally, the silhouette edges are
            extruded to make the shadow volume vertex list.
            </summary>
            <param name="shadowInfo"></param>
            <param name="vLight">Directional light normal</param>
            <param name="height"></param>
            <param name="rotate"></param>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.EdgeList.AddEdge(Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge,Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge)">
            <summary>Add an entry into the edge list mapping 'originalEdge' to 'newEdge'</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.EdgeList.GetNext">
            <summary>Return any edge</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.EdgeList.GetEdge(Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge)">
            <summary>Return an edge that's exactly adjacent and opposite to 'original'</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.EdgeList.GetNeighbour(Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge)">
            <summary>Return an edge that neighbours 'original'</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.AddFace(System.Int32,System.Int32,System.Int32)">
            <summary>Add a new face using existing vertices</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.AddFace(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>Add a new face with a new set of vertices</summary>
            <returns>Index of first new vertex</returns>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.AddDegenerate(Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge,Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge)">
            <summary>Add a degenerate quad between two adjacent opposing edges</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.ProcessEdge(Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.EdgeList,Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge,Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.Edge)">
            <summary>
            If we can find an opposing edge in the edge list, then remove it from the list and
            add a new degenerate quad, otherwise add this new edge to the edge list.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.CreateVolume">
            <summary>Create closed volume with degenerate quads between faces</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.ExtrudeVolume(System.Single,Microsoft.DirectX.Matrix)">
            <summary>Extrude volume to beyond the floor</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.WeldVertices">
            <summary>Weld vertices ignoring normals and collapsing degenerate faces</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.ShadowVolumeBuilder.GenerateShadow(SlimDX.Direct3D9.VertexBuffer@,SlimDX.Direct3D9.IndexBuffer@,System.Int32@)">
            <summary>Generate DirectX vertex and index buffers from our internal representation</summary>
        </member>
        <member name="M:Demo3D.Visuals.ShadowVolume.Render(Demo3D.Visuals.IDisplay)">
            <summary>
            Renders the volume geometry, assumes that stencil buffer is already
            configured correctly.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ISharedResourcesProvider">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SharedResources">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SharedResources.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SharedResources.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SharedResources.ReadCurrentEntry(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Examines the current sub-entry of a SerializerEntryReader and deserializes it if it contains one of our library types.
            </summary>
            <param name="entryReader">The SerializerEntryReader containing the entry to deserialize.</param>
            <returns>true if we recognized and deserialized the entry; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.SharedResources.IdToPath(System.Guid)">
            <summary>
            Have a standard method to turn a GUID into a path for serialization.
            </summary>
            <param name="id">Guid to create a path for.</param>
            <returns>The path for the Guid with subdirectory hierarchy.</returns>
        </member>
        <member name="T:Demo3D.Visuals.ShelfDetail">
            <summary>
            Control the detail of shelf visualization.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ShelfOrder">
            <summary>
            Control the order in which to populate loads on a shelf.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BinProperties">
            <summary>
            Properties of an individual bin/slot within a bay on a shelf.
            Loads within bins can be positioned in all three dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BinProperties.LoadsDeep">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Bin.LoadsDeep.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.BinProperties.LoadsWide">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Bin.LoadsWide.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.BinProperties.LoadsHigh">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Bin.LoadsHigh.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.BinProperties.Width">
            <summary>
            The explicit width of the bin, if 0 then BayWidth/NumBins.
            </summary>
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Bin.Width.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.BinProperties.Capacity">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Bin.Capacity.Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.BinState">
            <summary>
            The bin state is a cached list of loads in a specific bin. It's built at run time
            and not serialized.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ShelfProperties">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.ShelfProperties.onAllowStoreInBin">
            <summary>
            Script to fire to determine if a load should be stored in a bin.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShelfProperties.onLoadAdded">
            <summary>
            Script to fire when a new load is stored in the rack.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShelfProperties.onLoadRemoved">
            <summary>
            Script to fire when a new load is stored in the rack.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BinLocation">
            <summary>
            Attached as a custom property to loads that are parented to a shelf
            or are about to be parented to a shelf.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.RackShelfBinLocation.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RackShelfBinLocation.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RackShelfBinLocation.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RackShelfBinLocation.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode" /> implemention to avoid compiler warning.
            <para>
            NOTE: This is not right, since it doesn't match the <see cref="M:Demo3D.Visuals.RackShelfBinLocation.Equals(System.Object)" /> method, but the original code
            had the comment "NOTE: DO NOT OVERRIDE GetHashCode() OR CATALOGS WILL STOP WORKING". This just removes the
            warning and leaves the code working as it did.
            </para>
            </summary>
            <returns>A hash code for the current object.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ShelfVisual">
            <summary>
            Class to manage the state of an area for storing loads. This can be a shelf in a rack or an area on a floor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShelfVisual.releaseEnabledBinding">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.Dispose">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.CreateBeam(Demo3D.Visuals.MeshBuilder,System.Double,System.Double,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.CreateModule(Demo3D.Visuals.MeshBuilder,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.CreateShelf(Demo3D.Visuals.MeshBuilder,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.BinProps(Demo3D.Visuals.BinLocation)">
            <summary>
            Returns the properties for a given bin location. This could be used
            to override the properties for a given bin.
            </summary>
            <param name="bl"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.BayLeftX(Demo3D.Visuals.BinLocation)">
            <summary>
            Returns the X location of the start/left of the nth bay.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.BinLeftX(Demo3D.Visuals.BinLocation)">
            <summary>
            Returns the X location of the center of the nth bay.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.BinSpacing(Demo3D.Visuals.BinLocation)">
            <summary>
            The space between each bin and also between the start and end bins and the edge
            
            These 3 bins (gaps) have 4*bin spaces (spokes):
            |--bin1--|--bin2--|-----bin3-----|
            
            NOTE: bin is currently ignored but is required in case bin overrides are
            added in the future.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.BinWidth(Demo3D.Visuals.BinLocation)">
            <summary>
            The width a of given bin.
            
            NOTE: bin is currently ignored but is required in case bin overrides are
            added in the future.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.GetNextStoragePosition(Demo3D.Visuals.BinLocation)">
            <summary>
            Returns the position of the center of a the next available location within
            a bin location on the shelf in local coordinates.
            This takes into account the current loading to work out the height the next load
            should be placed at. 
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.GetNextRetrievalBinLocation">
            <summary>
            Returns the next load within a shelf.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.GetNextRetrievableLoad">
            <summary>
            Returns the next load within a shelf.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.GetNextRetrievableLoad(Demo3D.Visuals.BinLocation)">
            <summary>
            Returns the next load within a bin.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.GetNthPosition(Demo3D.Visuals.BinLocation,Demo3D.Visuals.BinState,System.Int32)">
            <summary>
            Get the location of the ith load to be stored in a bin.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.GetToolTip(Microsoft.DirectX.Vector3,Demo3D.Visuals.ExprContext)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Rack">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.Reparent(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.NotifyOnBeforePropertyUpdated(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.OnMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.SetModule(System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.EditLoadCreationProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.DetachFromVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.AttachedVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.AttachDirection">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.AttachType">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.AddChildLinks(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.RemoveChildLinks(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.FirstBin">
            <summary>
            Get the first bin in the order specified in Props.ShelfOrder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.NextBin(Demo3D.Visuals.BinLocation)">
            <summary>
            Get the next bin in the order specified in Props.ShelfOrder.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.CreateLoadSchedule">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.Reset">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ShelfVisual.Initialize">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Scheduler">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.InDelay">
            <summary>Indicates that the load creator is currently in a delay period. See DelayDur and DelayRate properties.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.DeleteLoadsWhenFloorHit">
            <summary>If this is true and load created touches the floor at any time it will be deleted after the number of seconds defined by the 'Delete Loads After' setting for the project. If this is false then the load specific setting will be used.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.SequenceNumber">
            <summary>The sequence number of the next load to be created. The sequence number of first load to be created is 0.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ReleaseEnabled">
            <summary>If true then new loads will be created. If false then no loads will be created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ReleaseStrategy">
            <summary>If Sequence then loads will be created in the sequence defined in the Loads list. If Distribution then loads will be picked at random from the loads list and created in a random order using a uniform distribution.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.RetryCreateAfter">
            <summary>If a load can't be created for whatever reason then wait for this number of seconds and then try to recreate the load again.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.FirstLoadAfter">
            <summary>Wait this number of seconds before the first load is created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ReleaseRate">
            <summary>The number of seconds between the creation of each load.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ReleaseRateVariability">
            <summary>A random adjustment to the release time to the next load (Release Interval +/- this value).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ItemsVisual">
            <summary>When set this will get the Items list of LoadCreatorItem objects from the specified property on the specified visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Items">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.DelayRate">
            <summary>Add a delay to the release of the next load after this number of loads have been created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.DelayRateVariability">
            <summary>A random adjustment to the number of loads to be created before there is a delay (Delay Interval +/- this value).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.DelayDur">
            <summary>The time in seconds to delay the creation of the next load once the number of loads created has hit the Delay Interval.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.DelayDurVariability">
            <summary>A random adjustment to the load creation delay time once a delay has occurred (Delay Duration +/- this value).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.LoadRotation">
            ** <exclude /> */ [EditorBrowsable(EditorBrowsableState.Never)] public double Rotation { get { return Props.Rotation; } set { Props.Rotation = value; } }
             <summary>Create new loads rotated around the X, Y and Z axes (angles in degrees).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.RotationVariability">
            <summary>A random adjustment to the rotation angle that a load is created with.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.OnLoadCreated">
            <summary>Occurs after a load is created.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.OnDelayStart">
            <summary>Occurs when the delay period starts.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.OnDelayEnd">
            <summary>Occurs when the delay period ends.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Ports">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ShelfOrder">
            <summary>Loads should be added to the shelf LeftToRight, RightToLeft or Random.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.InitialQuantity">
            <summary>Populate the shelf with this number of loads initially.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.DeleteLoadsAfter">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.DeleteLoadsWhenStored">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.ShelfDetail">
            <summary>The detail to show for the shelf. FrontOnly or BackOnly will show an indicator of what the shelf looks like at the front or back of the shelf only. Whole shelf will draw the all bays as one long bay. Individual bays will draw each bay individually which may have a performance impact for large systems.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.NumBays">
            <summary>The number of bays along the length of the shelf.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BayWidth">
            <summary>The width of each individual bay.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BayDepth">
            <summary>The depth of each bay.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BayGap">
            <summary>The gap before each bay and after the last bay.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.OverallLength">
            <summary>The total length of the shelf (NumBays*BayWidth + (NumBays+1)*BayGap).</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Height">
            <summary>The height of the shelf relative to its parent object.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.WorldHeight">
            <summary>The height of the front corner of the shelf relative to the floor of the scene.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Modules">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.FloorModuleIndex">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.NonFloorModuleIndex">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.UseFloorModule">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BayModuleIndex">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BayModule">
            <summary>The current center module for the bay, e.g. empty, (chip)board, roller, etc.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BeamVisible">
            <summary>Whether the bay supporting beams are visible.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BeamHeight">
            <summary>The height of the supporting beam go down from the top of the bay.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BeamDepth">
            <summary>The depth of the supporting beam going into the bay.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BeamStep">
            <summary>The height of the beam above the top (positive) or below the top (negative) of the bay floor. 0 is no step and the top of the beam lines up with the base of the bay floor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.BeamMaterial">
            <summary>The color of the supporting beam.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Bins">
            <summary>Details of the available bins for each bay along the shelf.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.OnAllowStoreInBin">
            <summary>Occurs to determine if a load should be stored in a given bin or not. This allows zones to be setup in a shelf based on load type.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.OnLoadAdded">
            <summary>Occurs when a load is added to the shelf.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.OnLoadRemoved">
            <summary>Occurs when a load is removed from the shelf.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ShelfVisual.Capacity">
            <summary>The number of loads that can be stored on the shelf.</summary>
        </member>
        <member name="T:Demo3D.Visuals.SynchronizationContextExtensions">
            <summary>
            A factory for returning a <see cref="T:System.Threading.SynchronizationContext" /> that will
            enqueue <see cref="T:System.Threading.Tasks.Task" /> continuations on the model thread.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SynchronizationContextExtensions.GetSynchronizationContext(Demo3D.Visuals.IBuilder)">
            <summary>
            Returns a <see cref="T:System.Threading.SynchronizationContext" /> that will enqueue
            <see cref="T:System.Threading.Tasks.Task" /> continuations on the model thread.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SynchronizationContextExtensions.SetSynchonizationContext">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SynchronizationContextExtensions.SetSynchonizationContext.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SynchronizationContextExtensions.SynchronizationContext(Demo3D.Visuals.IBuilder)">
            <summary>
            Sets the current <see cref="T:System.Threading.SynchronizationContext" /> so that <see cref="T:System.Threading.Tasks.Task" />
            continuations will run on the model thread.  Restores the original synchronization context when disposed.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SpeedProfileRatio">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PeopleAnimator">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.Bind(Demo3D.Visuals.Visual,Demo3D.Visuals.UserResource)">
            <summary>
            Bind the visual joints to joints in the people space and add joint animators to keep them in sync.
            TODO: Don't use the mapResource, derive the values programatically for the TPose.
                  Retarget the animations on the fly, rather than using external tpose.bvh.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.AnimateJoint(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Force a joint to be animated automatically rather than manually.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.GetArmLength(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.PeopleAnimator.StepSize">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.Step(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Step a relative stepVector which represents direction and distance.
            The person's orientation isn't changed which allows them to step
            forwards, backwards sideways or any combination of the two without turning.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.TurnToAngle(Demo3D.Visuals.Visual,System.Double,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Turn to an absolute yaw in the world coordinate frame.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.TurnToFace(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Turn to face a visual's origin.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.TurnToFace(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Turn to face a world coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.TurnRight(Demo3D.Visuals.Visual,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Yaw right 90 degrees in world coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.TurnRight(Demo3D.Visuals.Visual,System.Double,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Yaw right 'n' degrees in world coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.TurnLeft(Demo3D.Visuals.Visual,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Yaw left 90 degrees in world coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.TurnLeft(Demo3D.Visuals.Visual,System.Double,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Yaw left 'n' degrees in world coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.Gaze(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.GazeCancel(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.ConstrainPosition(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.ConstrainPosition(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.ConstrainRotation(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.ConstrainRotation(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.UnconstrainPosition(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.PeopleAnimator.UnconstrainRotation(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Hand">
            <summary>
            Which hand to use when reaching. Default means use the nearest unless a default hand has been set.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Finger">
            <summary>
            Which hand to use when reaching. Default means use the nearest unless a default hand has been set.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Phalanx">
            <summary>
            Which hand to use when reaching. Default means use the nearest unless a default hand has been set.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PeopleLocomotion">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.PeopleExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.RawSession.Update(Demo3D.Visuals.FrameDatabase)">
            <summary>
            Merge the list of updates with the current pending list of updates not yet sent to the client.
            </summary>
            <param name="database">Updates from the FrameDatabase.</param>
        </member>
        <member name="T:Demo3D.Visuals.ISpeedGraph">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IHasSpeedGraph">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SpeedGraphEvent">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AccelerationGraph">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AccelerationGraph.ScaleTime(System.Double)">
            <summary>
            Increase the length of time this AccelerationGraph takes, but keep the distance the same. Requires
            section to be either be a cruise, or coming from/going to rest
            </summary>
            <param name="scale">Ratio to increase time by, keeping distance the same</param>
        </member>
        <member name="T:Demo3D.Visuals.SpeedGraphSection">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SpeedGraphScaler">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator">
            <summary>
            Calculate velocity profile over given distance with acceleration, cruise velocity and deceleration,
            starting at an initial velocity and a target final velocity (which may or may not be reached)
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Calculate velocity profile over given distance, using given speed profile (taking current speed, acceleration,
            max speed, and deceleration) and a final velocity of 0 (which may or may not be reached)
            </summary>
            <param name="s">Distance</param>
            <param name="speed">SpeedProfile</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <summary>
            Calculate velocity profile over given distance, using given speed profile (taking current speed, acceleration,
            max speed, and deceleration) and a final velocity of 0 (which may or may not be reached depending on final parameter)
            </summary>
            <param name="s">Distance</param>
            <param name="speed">SpeedProfile</param>
            <param name="exceedDecelerationIfRequired">Allow deceleration parameter to be exceeded if required</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,Demo3D.Visuals.SpeedProfile,System.Double)">
            <summary>
            Calculate velocity profile over given distance, using given speed profile (taking current speed, acceleration,
            max speed, and deceleration) and a final velocity (which may or may not be reached)
            </summary>
            <param name="s">Distance</param>
            <param name="speed">SpeedProfile</param>
            <param name="v">Target final velocity</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,Demo3D.Visuals.SpeedProfile,System.Double,System.Boolean)">
            <summary>
            Calculate velocity profile over given distance, using given speed profile (taking current speed, acceleration,
            max speed, and deceleration) and a final velocity (which may or may not be reached depending on final parameter)
            </summary>
            <param name="s">Distance</param>
            <param name="speed">SpeedProfile</param>
            <param name="v">Target final velocity</param>
            <param name="exceedDecelerationIfRequired">Allow deceleration parameter to be exceeded if required</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate velocity profile over given distance with acceleration, cruise velocity and deceleration,
            starting at an initial velocity of 0 and a target final velocity of 0 (which may or may not be reached)
            </summary>
            <param name="s">Distance</param>
            <param name="a">Acceleration</param>
            <param name="c">Cruise velocity</param>
            <param name="d">Deceleration</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculate velocity profile over given distance with acceleration, cruise velocity and deceleration,
            starting at an initial velocity of 0 and a target final velocity of 0 (which may or may not be reached depending on final parameter)
            </summary>
            <param name="s">Distance</param>
            <param name="a">Acceleration</param>
            <param name="c">Cruise velocity</param>
            <param name="d">Deceleration</param>
            <param name="exceedDecelerationIfRequired">Allow deceleration parameter to be exceeded if required</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate velocity profile over given distance with acceleration, cruise velocity and deceleration,
            starting at an initial velocity and a target final velocity (which may or may not be reached)
            </summary>
            <param name="s">Distance</param>
            <param name="u">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="c">Cruise velocity</param>
            <param name="d">Deceleration</param>
            <param name="v">Target final velocity</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Calculate velocity profile over given distance with acceleration, cruise velocity and deceleration,
            starting at an initial velocity and a target final velocity (which may or may not be reached depending on final parameter)
            </summary>
            <param name="s">Distance</param>
            <param name="u">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="c">Cruise velocity</param>
            <param name="d">Deceleration</param>
            <param name="v">Target final velocity</param>
            <param name="exceedDecelerationIfRequired">Allow deceleration parameter to be exceeded if required</param>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.ScaleTime(System.Double)">
            <summary>
            Increase the length of time this AccelerateCruiseDecelerateCalculator takes, but keep the distance the same.
            Requires each section to either be a cruise, or coming from/going to rest
            </summary>
            <param name="scale">Ratio to increase time by, keeping distance the same</param>
        </member>
        <member name="P:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.FinalVelocity">
            <summary>
            The final velocity obtained (which may not be the actual requested one)
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.Count">
            <summary>
            How many sections are in the graph
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.TimeToStartCruise">
            <summary>
            Time taken to reach cruising velocity
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.TimeToStartDeceleration">
            <summary>
            Time taken to reach deceleration point
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.Sections">
            <summary>
            Return individual AccelerationGraph sections
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.InitialVelocity">
            <summary>
            Return calculated initial velocity (taking into account a possible infinite acceleration at the start)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.AddSection(Demo3D.Visuals.AccelerationGraph)">
            <summary>
            Add a section into the list of sections, as long as it is not a "point", return the index of this section
            otherwise return -1
            </summary>
            <param name="section">Section to add</param>
            <returns>Index into sections, or -1 if not present</returns>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.AddSingleSection(Demo3D.Visuals.AccelerationGraph)">
            <summary>
            Add just one section which doesn't mind about it being a "point"
            </summary>
            <param name="section">Section to add</param>
            <returns>0</returns>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.Snap(System.Double,System.Double)">
            <summary>
            "Snap" a double to a target double, i.e. return the target if the initial value is nearly equal to it
            </summary>
            <param name="i">Initial value</param>
            <param name="t">Target value</param>
            <returns>Snapped value</returns>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.Snap(System.Double,System.Double,System.Double)">
            <summary>
            "Snap" a double to a target double, i.e. return the target if the initial value is nearly equal to it 
            </summary>
            <param name="i">Initial value</param>
            <param name="t">Target value</param>
            <param name="epsilon">Tolerance</param>
            <returns>Snapped value</returns>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.CalculateDistance(System.Double,System.Double,System.Double)">
            <summary>
            Standard equation of motion for distance given initial velocity, final velocity and acceleration
            </summary>
            <remarks>
            v^2 = u^2 + 2as =&gt; s = (v^2 - u^2)/2a = ((v + u)(v - u))/2a
            (coded like this to minimise the number of floating point multiplies)
            </remarks>
            <param name="a">Acceleration</param>
            <param name="u">Initial velocity</param>
            <param name="v">Final velocity</param>
            <returns>Distance</returns>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.CalculateAttainableVelocity(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the velocity attainable by (maybe) accelerating from the initial velocity, and then (maybe)
            decelerating to the final velocity within the specified distance
            </summary>
            <remarks>
            v^2 = u^2 + 2as =&gt; s = (v^2 - u^2)/2a
            Assuming we start at velocity u, accelerate to velocity w and decelerate to velocity v, then
            s = (w^2 - u^2)/2a + (v^2 - w^2)/(-2d) = (w^2 - u^2)/2a + (w^2 - v^2)/2d = w^2(1/2a + 1/2d) - u^2/2a -v^2/2d
            =&gt; 2asd = w^2(d+a) - du^2 - av^2
            =&gt; w^2(a+d) = 2asd + du^2 + av^2
            =&gt; w = sqrt((2asd + du^2 + av^2)/(a+d))
            </remarks>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
            <param name="u">Initial velocity</param>
            <param name="v">Final velocity</param>
            <param name="s">Distance</param>
            <returns>Attainable velocity</returns>
        </member>
        <member name="M:Demo3D.Visuals.AccelerateCruiseDecelerateCalculator.CalculateVelocity(System.Double,System.Double,System.Double)">
            <summary>
            Standard equation of motion for final velocity given initial velocity, acceleration, and distance travelled
            </summary>
            <remarks>
            v^2 = u^2 + 2as =&gt; v = sqrt(u^2 + 2as)
            </remarks>
            <param name="u">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="s">Distance</param>
            <returns>Final velocity</returns>
        </member>
        <member name="F:Demo3D.Visuals.MultiAccelerationGraph.alwaysExceedDecelerationIfRequired">
            <summary>
            Do we allow the graph to use a larger deceleration than specified if the distance is too short?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.ScaleTime(System.Double)">
            <summary>
            Increase the length of time this MultiAccelerationGraph takes, but keep the distance the same. Requires
            each section to either be a cruise, or coming from/going to rest
            </summary>
            <param name="scale">Ratio to increase time by, keeping distance the same</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.IsConnected(System.Boolean)">
            <summary>
            Is the graph connected? i.e. does the target speed match the next initial speed
            </summary>
            <param name="all">if true, then check all sections, otherwise only the "vertical" infinite accelerations</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.CanSmooth">
            <summary>
            Is the graph of a form that can be smoothed?
            </summary>
            <returns>Can we smooth this graph?</returns>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.AccelerationGraphAt(System.Int32)">
            <summary>
            Safe indexing into list of sections
            </summary>
            <param name="i">index</param>
            <returns>AccelerationGraph at index, or null</returns>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.RemoveVerticals">
            <summary>
            Process graph to remove unnecessary sections
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.Smooth(System.Double,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants and
            the given initial velocity
            Parameter allowing an "empty" graph
            Parameter indicating whether decelaration can be exceeded
            </summary>
            <param name="initialVelocity">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
            <param name="allowEmpty">Is an empty graph acceptable?</param>
            <param name="exceedDecelerationIfRequired">Allow deceleration parameter to be exceeded if required</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.Smooth(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants and
            the given initial velocity
            Parameter allowing an "empty" graph
            Deceleration can be exceeded based on static alwaysExceedDecelarationIfRequired
            </summary>
            <param name="initialVelocity">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
            <param name="allowEmpty">Is an empty graph acceptable?</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.StrictSmooth(System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants and
            the given initial velocity
            Parameter allowing an "empty" graph
            Do not exceed decelaration parameter
            </summary>
            <param name="initialVelocity">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
            <param name="allowEmpty">Is an empty graph acceptable?</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.Smooth(System.Double,System.Double,System.Double)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants and
            the given initial velocity
            Empty graphs are considered valid
            Deceleration can be exceeded based on static alwaysExceedDecelarationIfRequired
            </summary>
            <param name="iv">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.StrictSmooth(System.Double,System.Double,System.Double)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants and
            the given initial velocity
            Empty graphs are considered valid
            Do not exceed decelaration parameter
            </summary>
            <param name="iv">Initial velocity</param>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.Smooth(System.Double,System.Double,System.Boolean)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants
            Parameter allowing an "empty" graph
            Deceleration can be exceeded based on static alwaysExceedDecelarationIfRequired
            </summary>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
            <param name="allowEmpty">Is an empty graph acceptable?</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.StrictSmooth(System.Double,System.Double,System.Boolean)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants
            Parameter allowing an "empty" graph
            Do not exceed decelaration parameter
            </summary>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
            <param name="allowEmpty">Is an empty graph acceptable?</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.Smooth(System.Double,System.Double)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants
            Empty graphs are considered valid
            Deceleration can be exceeded based on static alwaysExceedDecelarationIfRequired
            </summary>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
        </member>
        <member name="M:Demo3D.Visuals.MultiAccelerationGraph.StrictSmooth(System.Double,System.Double)">
            <summary>
            Attempt to "smooth" the MultiAccelerationGraph with the given acceleration and deceleration constants
            Empty graphs are considered valid
            Do not exceed decelaration parameter
            </summary>
            <param name="a">Acceleration</param>
            <param name="d">Deceleration</param>
        </member>
        <member name="T:Demo3D.Visuals.SpherePhysicsAspect">
            <summary>Sphere physics geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SpherePhysicsAspect.Location">
            <summary>The (local) location for the sphere geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SpherePhysicsAspect.Radius">
            <summary>The radius for the sphere geometry.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SpherePhysicsAspect.Scale">
            <summary>The scale for the sphere geometry.</summary>
        </member>
        <member name="T:Demo3D.Visuals.SphereProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SphereVisual">
            <summary>
            The physics primitive type to use for the sphere visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SphereVisual.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SphereVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SphereVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SphereVisual.IsPhysicsDefinitelyDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Slices">
            <summary>The number of sides the sphere has in plan view. A higher number produces a more accurate sphere, but takes longer to draw.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Stacks">
            <summary>The number of sides the sphere has in side view. A higher number produces a more accurate sphere, but takes longer to draw.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Radius">
            <summary>The radius of the sphere.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Material">
            <summary>The color and texture of the sphere's surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Diameter">
            <summary>The diameter of the sphere.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Color">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Image">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SphereVisual.Density">
            <summary>The mass of the sphere per unit volume.</summary>
        </member>
        <member name="T:Demo3D.Visuals.SphericalJointProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SphericalJointVisual">
            <summary>
            Class representing a physics joint for constraining physics enabled visuals to rotate freely around a point (a.k.a. a ball joint).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SphericalJointVisual.DefaultFactory(System.String)">
            <summary>
            Used by the catalog New menu to create a new visual of this type.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SphericalJointVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SphericalJointVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SphericalJointVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SplitVisual.SplitVisualOptionsWindow">
            <summary>
            Interaction logic for SplitVisualOptionsWindow.xaml
            </summary>
            <summary>
            SplitVisualOptionsWindow
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SplitVisual.SplitVisualOptionsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.SplitOptions">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SplitOptions.ByMaterial">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SplitOptions.ByFaceNormal">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SplitOptions.FaceNormalAngle">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SplitVisuals">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SplitVisuals.Split(System.Collections.ArrayList,Demo3D.Visuals.SplitOptions)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SplitVisuals.Split(Demo3D.Visuals.Visual,Demo3D.Visuals.SplitOptions)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SplitVisuals.SplitMesh(SlimDX.Direct3D9.Mesh,Demo3D.Visuals.MeshMaterial[],System.Collections.Generic.List{SlimDX.Direct3D9.Mesh}@,System.Collections.Generic.List{Demo3D.Visuals.MeshMaterial[]}@,Demo3D.Visuals.SplitOptions)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SplitVisuals.SplitDrawing(Demo3D.Visuals.DrawingPrimitives,Demo3D.Visuals.MeshMaterial,System.Collections.Generic.List{Demo3D.Visuals.DrawingPrimitives}@,System.Collections.Generic.List{Demo3D.Visuals.MeshMaterial}@,Demo3D.Visuals.SplitOptions,Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SplitVisuals.CalculateFaceNormal(System.Int32,System.Int32[],Demo3D.Visuals.Direct3D.VertexIterator)">
            <summary>
            Calculate a surface normal from mesh internal data.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SplitVisuals.CalculateLineAngle(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Calculate angle between two lines
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StairProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.StairVisual">
            <summary>
            The StairVisual stretches along the X axis in a positive direction,
            but ends and 0,0,0 for the top. The center is along z=0.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.Configure">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.ClearControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.InstallConnectorListeners">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.MeshMaterials">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.CreateSide(Demo3D.Visuals.MeshBuilder,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
             <summary>
             The bottom of the side has a flattened edge.
             
                            (0,0,0) p1
                                     x ^
                                  /  | | Riser+TreadThickness
                               /     | |
                            /        x v
                         /        / p2
                      /        /
                   /        /
            p0  /        /
              x       /     ^
              x____x        v  Riser
            p4      p3
             
             </summary>
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.OnMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            If conveyor changes Height or Rotation then support stands must be reconfigured.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StairVisual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.TreadOverhang">
            <summary>
            How far the treads overlap each other at the front of the tread.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.InclineAngle">
            <summary>
            The incline angle of the stairs in degrees.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.Width">
            <summary>
            The overall width of the stairs which is equal to the tread width plus twice the side width.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.HandrailDiameter">
            <summary>
            The diameter of the handrail.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.HandrailHeight">
            <summary>
            The height of the handrail.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.SideWidth">
            <summary>
            The width of the sides.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.TreadThickness">
            <summary>
            The thickness of each tread.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.RiserHeight">
            <summary>
            The height of each riser in the stairs.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.SideMaterial">
            <summary>
            The color, reflectivity and specularity of the sides.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.TreadMaterial">
            <summary>
            The color, reflectivity and specularity of the top and bottom of the treads.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.TreadSideMaterial">
            <summary>
            The color, reflectivity and specularity of the side of the treads.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.HandrailMaterial">
            <summary>
            The color, reflectivity and specularity of the rails.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.ShowHandrail">
            <summary>
            Whether the handrails are shown or not.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.BaseFloor">
            <summary>
            The floor that the bottom of the stairs is anchored to. Not set means the scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.FloorY">
            <summary>
            The offset in the vertical direction of the bottom of the stairs from the floor indicated by FloorLevel.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.FrictionFactor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.FrictionMaterial">
            <summary>
            The name of the material to be use to determine the coefficient of friction when in contact with another friction material.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.TreadDepth">
            <summary>
            The depth of each tread in the stairs.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.TreadWidth">
            <summary>
            The width of each tread.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.TreadCount">
            <summary>
            The number of treads in the stairs.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.RiserCount">
            <summary>
            The number of risers in the stairs.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.Elevation">
            <summary>
            The elevation of the stairs above the floor indicated by FloorLevel.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.HorizontalLength">
            <summary>
            The horizontal length of the stairs. The length adjacent to the incline angle.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StairVisual.ShowAsLadder">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Stl.Reader">
            <summary>
            Read an STL file from disk in Ascii or Binary format.
            http://www.ennex.com/~fabbers/StL.asp#Sct_binary
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Stl.Reader.ReadAscii(System.IO.TextReader)">
            <summary>
            solid cube.tri
              facet normal 1 0 0
                outer loop
            	  vertex 1.0 0.0 0.0
                  vertex 1.0 00.00 0.0
                  vertex 1.0 00.00 00.00
                endloop
              endfacet
              facet normal 1 0 0
                outer loop
                  vertex 1.0 0.0 00.00
                  vertex 1.0 0.0 0.0
                  vertex 1.0 00.00 00.00
            	endloop
              endfacet
              ...
            endsolid /users/vis/dru/cube.tri 
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StopBladeProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.StopBladeVisual">
            <summary>
            Class encapsulating the behavior of a stop blade visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.StopBladeVisual.bindings">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.StopBladeVisual.activateBinding">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.IsActivated">
            <summary>Whether or not the stop blade is up (or moving to the up position).</summary>
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.Dispose">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.Initialize">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.IsInTransit">
            <summary>Whether or not the stop blade is in transit to the up or down position.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.IsInUpPosition">
            <summary>Whether or not the stop blade is in the up position.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.IsInDownPosition">
            <summary>Whether or not the stop blade is in the down position.</summary>
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.Reset">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.CurrentBladePosition">
            <summary>How much above the conveyor surface the stop blade is currently. A negative position is below the conveyor surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.BladeState">
            <summary>Whether the blade is Up, Down or InTransit.</summary>
        </member>
        <member name="E:Demo3D.Visuals.StopBladeVisual.BladeStateListeners">
            <summary>
            Listeners for the changing of blade state.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.ResetContactLatch">
            <summary>
            Reset the contact latch.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.ContactLatch">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;StopBlade.ContactLatch.Description&quot;]/value" /></summary>
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.IsPhysicsDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.AttachedVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.AttachDirection">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.AttachType">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.ResetPosition(System.Boolean)">
            <summary>
            Make sure height of stop blade is correct
            If True passed, then also reset the rotation to the rotation of the conveyor and ensure it is on the conveyor
            </summary>
            <param name="snapToConveyor">If true, zero out relative rotation and snap to conveyor</param>
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.DetachFromVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.Activate">
            <summary>
            Activate the stop blade.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.Deactivate">
            <summary>
            Deactivate the stop blade.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.ContextMenuBladeUpDown">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.LiftMaxVelocity">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StopBladeVisual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.OnContact">
            <summary>Occurs when a load collides with the stop blade. To prevent the script being run multiple times as the load bounces against the stop blade, the OnContact event is suppressed until the stop blade's  ResetContactLatch() method is called.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.InitialBladeState">
            <summary>The initial position of the blade on reset (Up, Down or AsIs)</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.TargetBladeState">
            <summary>The state the stop blade is aiming towards.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Depth">
            <summary>The depth of the stop blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Height">
            <summary>The height of the stop blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Width">
            <summary>The width of the stop blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.WidthRatio">
            <summary>The ratio of the conveyor width, that the stop blade is attached to, to set the stop blade width to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.MaxForce">
            <summary>The maximum force that can be used to accelerate the joint motor to the specified velocity.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Density">
            <summary>The density of the stop blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Mass">
            <summary>The mass of the stop blade.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Kinematic">
            <summary>Move the stop blade kinematically instead of dynamically which means the stop blade will move with infinite force.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.FrictionMaterial">
            <summary>The name of the material to be use to determine the coefficient of friction when in contact with another friction material.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.OnBladeUp">
            <summary>Occurs when the stop blade reaches the lift height.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.OnBladeDown">
            <summary>Occurs when the stop blade reaches the rest height.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.LiftHeight">
            <summary>The distance above the conveyor surface that the stop blade should raise to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.LiftDuration">
            <summary>How long the stop blade takes to go from the rest height to the lift height.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.RestHeight">
            <summary>The distance below the conveyor surface that this should be when at rest.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StopBladeVisual.Color">
            <summary>Set or retrieve the color of the material.</summary>
        </member>
        <member name="T:Demo3D.Visuals.StraightBeltConveyorProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyorProperties.Length">
            <summary>
            Length of the conveyor including padding.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StraightBeltConveyor">
            <summary>
            Class encapsulating the behavior of a straight belt conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.CenterProfile">
            <summary>A profile of the conveyor center module.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.BeltWidth">
            <summary>The width of the conveyor belt</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.BeltLength">
            <summary>The length of the conveyor belt</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.BeltDiameter">
            <summary>Diameter of the belt ends and therefore the height of the belt itself.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.BeltCenterHeight">
            <summary>This overrides the BeltDiameter if UseBeltCenterHeight is true.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.UseBeltCenterHeight">
            <summary>When true, BeltCenterHeight overrides BeltDiameter to specify the height of the belt.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.BeltColor">
            <summary>The color to display for the conveyor belt</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.BeltCapStart">
            <summary>This determines how to display the graphics for the start of a belt conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.BeltCapEnd">
            <summary>This determines how to display the graphics for the end of a belt conveyor.</summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightBeltConveyor.CenterModuleUsingProfile(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StraightBeltConveyor.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.SurfaceLength">
            <summary>
            Circumference of the whole belt.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.UseSurfaceMaterial">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightBeltConveyor.UseSurfaceSideMaterial">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ConveyorBodyType">
            <summary>
            The physics mode for a conveyor visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConveyorBodyType.Deflector">
            <summary>
            The conveyor does not move using dynamic physics (The default).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConveyorBodyType.Vehicle">
            <summary>
            The conveyor can move using dynamic physics. Combine this with Kinematic in order to get loads to move with a conveyor when it moves without parenting them to the conveyor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConveyorBodyType.Lift">
            <summary>
            The conveyor will move vertically up and down using dynamic physics (set when calling TiltUp/TiltDown).
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ConveyorBodyType.Tilt">
            <summary>
            The conveyor will rotate about its origin in a vertical direction using dynamic physics (set when calling LiftUp/LiftDown).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ZoneProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ZoneCollection">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ZoneCollection.GetZone(System.Double,System.Double)">
            <summary>
            Get the zone properties at a particular position on the conveyor surface.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StraightConveyorProperties">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.StraightConveyorProperties.mass">
            In degrees (usually 5,10,15,20,25)
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyorProperties.Length">
            Width of the center (rollers/belt/etc.)
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyorProperties.CenterDiameter">
            Length of the center and sides (roller pitch*num rollers)
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyorProperties.CenterHeight">
            Diameter of the center (rollers/belt) not including the sides
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyorProperties.StartPadding">
            Height of the center (rollers/belt)
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyorProperties.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ILiftConveyor">
            <summary>
            Use as an abstract interface to StraightConveyor and ChainTransfer
            for Simulation.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ITiltConveyor">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.StraightConveyor">
            <summary>
            Abstract class encapsulating the behavior of a straight conveyor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.ConveyorControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.ConveyorControlPoint.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.LiftSpeedBindingUpdated(Demo3D.Visuals.BindableItem)">
            <summary>
            Handle updates from the rotation speed OPC binding
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.Reset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.Zones">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.InclineAngle">
            <summary>The angle that the straight conveyor is inclined at in degrees (usually 5, 10, 15, 20, 25 or 30).</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.Elevation">
            <summary>The difference in vertical height when the conveyor is inclined. It is the length opposite to the incline angle.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.HorizontalLength">
            <summary>The horizontal length of the conveyor. This is only different to the Length if the Incline Angle is set, then it is the length adjacent to the incline angle.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.Mass">
            <summary>The mass of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.Kinematic">
            <summary>Move the conveyor kinematically instead of dynamically which means the conveyor will lift or tilt with infinite force.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.GravityEnabled">
            <summary>When Kinematic is false this is used to set whether or not gravity affects the movement of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.DivertAngle">
            <summary>The angle in degrees that the conveyor surface is moving relative to the normal conveyor direction (0=straight ahead, 90=right, -90=left)</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.SurfaceGearRatio">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.CollisionTypeStart">
            <summary>Whether to model the physics of the conveyor start as a cylinder shape or a box shape.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.CollisionTypeEnd">
            <summary>Whether to model the physics of the conveyor end as a cylinder shape or a box shape.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.LeftSide">
            <summary>The color, shape and dimensions of the left profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.RightSide">
            <summary>The color, shape and dimensions of the left profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.SideCaps">
            <summary>Defines the shape of the side ends.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.EndStop">
            <summary>Cap the end of the conveyor preventing loads from falling off the end.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.StartStop">
            <summary>Cap the start of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.ConveyorBodyType">
            <summary>Whether the conveyor is static (Deflector), movable (Vehicle) or whether it tilts or lifts (Tilt or Lift). Tilt or Lift may be automatically set if a tilt or lift method is called.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.InitialLiftState">
            <summary>The state of the lift (Up or Down) after a project reset.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.TargetLiftState">
            <summary>Which stop the lift is currently moving to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.LiftMinHeight">
            <summary>The minimum extent of the lift (LiftState = Down).</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.LiftMaxHeight">
            <summary>The maximum extent of the lift (LiftState = Up).</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.LiftMaxVelocity">
            <summary>The maximum velocity of the lift motor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.LiftMaxForce">
            <summary>The maximum force that the lift motor can apply.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.LiftDirection">
            <summary>The direction to move the lift in.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.InitialTiltState">
            <summary>The state of the tilt (Up or Down) after a project reset.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.TargetTiltState">
            <summary>Which stop the tilt is currently moving to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.TiltUpAngle">
            <summary>The angle to tilt up from the horizontal when TiltUp() is called (in degrees).</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.TiltDownAngle">
            <summary>The angle to tilt down from the horizontal when TiltUp() is called (in degrees).</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.TiltDuration">
            <summary>How long in seconds the complete tilt operation should take.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.TiltMaxForce">
            <summary>The maximum force that the tilt motor can apply.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.TiltOrigin">
            <summary>The local pivot point about which the conveyor tilts when TiltUp() and TiltDown() are called.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.CurrentTiltAngle">
            <summary>The angle of the conveyor in degrees relative to its fully untilted state, which is when the conveyor is at its InclineAngle.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.CenterDiameter">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;StraightConveyor.CenterDiameter.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.CenterHeight">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;StraightConveyor.CenterHeight.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.StartPadding">
            <summary>The distance from the start of the conveyor element to the start of the side rail.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.EndPadding">
            <summary>The distance from the end of the conveyor element to the end of the side rail.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.LeftPadding">
            <summary>Padding between the conveyor surface and left side</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.RightPadding">
            <summary>Padding between the conveyor surface and right side</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.OnEndStopHit">
            <summary>Occurs when the end stop of a conveyor is hit if the end stop is set to Visible.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.OnLiftUp">
            <summary>Occurs when a lift conveyor reaches LiftMaxHeight. Can be used to transfer to a higher level of conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.OnLiftDown">
            <summary>Occurs when a lift conveyor reaches LiftMinHeight. Can be used to transfer to a lower level of conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.OnLiftMoved">
            <summary>Occurs when a lift conveyor reaches LiftMinHeight or LiftMaxHeight. If set, this overrides OnLiftUp and OnLiftDown which won't then be called even if they are set to a script function.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.ControlPoints">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.AdjustConnectorPositions">
            <summary>
            To be overridden in derived conveyor if the connector positions need to be shifted from the default.
            </summary>
            /** <exclude /> */
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.CreateMovementSurface">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <summary>
            Construct the rollers or belt mesh in this overriden method
            </summary>
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.SideModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.OffsetEnds(Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.RebuildCutouts(Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.CancelCutouts(Demo3D.Visuals.ConveyorConnector,Demo3D.Visuals.Visual,Demo3D.Visuals.ConveyorConnector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.GetSidePhysicsWidthOffset(Demo3D.Visuals.ConveyorSideProperties)">
            <summary>
            To be overridden if a derived conveyor requires an additional offset for the width of the Physics Geom for a side.
            </summary>
            /** <exclude /> */
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.GetCenterPhysicsWidthtOffset">
            <summary>
            To be overridden if a derived conveyor requires an additional offset for the width of the Physics Geom for the conveyor center.
            </summary>
            /** <exclude /> */
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.GetStepIfApplicable(Demo3D.Visuals.ConveyorSideProperties)">
            <summary>
            To be overridden if a derived conveyor requires an additional offset value for the Step property of the side.
            </summary>
            /** <exclude /> */
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.NotifyChildrenOfHierarchyChange">
            <summary>
            If our Parent's rigid body has changed reevaluate joints and propagate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.IsPhysicsDependentOnProperty(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.AddCenterGeoms(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <summary>
            Overrides in Roller conveyor to allow individual rollers to be modelled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightConveyor.CollisionBody">
            <summary>
            With composite rigid body hierarchies apply contact joints to the 
            top level body in the hierarchy
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.CreateGeoms">
            <summary>
            Create physics for conveyor sides, start, end and center.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.ConfigureHinge">
            <summary>
            This will be called when the user moves the chain conveyor manually, which will
            cancel the current movement. It is also called from the TiltUp/Down methods to 
            put everything into a known state.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.Fix">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightConveyor.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.StraightRollerConveyorProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyorProperties.Length">
            <summary>
            Length of the conveyor, including padding.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StraightRollerConveyor">
            <summary>
            Class encapsulating the behavior of a straight roller conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.Props">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightRollerConveyor.CloneAsCurve">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightRollerConveyor.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightRollerConveyor.AddCylinderCenterGeometry(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.StraightRollerConveyor.AddCenterGeoms(Demo3D.Visuals.PhysicsCompoundGeometry)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.SurfaceLength">
            <summary>
            Circumference of a single roller.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.UseSurfaceMaterial">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.UseSurfaceSideMaterial">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.StraightRollerConveyor.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.Length">
            <summary>The length of the conveyor surface.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.RollerCount">
            <summary>The number of rollers along the length of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.RollerDiameter">
            <summary>The diameter of an individual roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.RollerWidth">
            <summary>The width of a roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.RollerPitch">
            <summary>The gap between each roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.StraightRollerConveyor.RollerColor">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;StraightRollerConveyor.SurfaceMaterial.Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Visuals.SupportStandType">
            <summary>
            Type of support stand.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SupportStandType.Start">
            <summary>
            First support stand.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SupportStandType.End">
            <summary>
            Last support stand.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.SupportStandType.Splice">
            <summary>
            Middle support stands.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.SupportStandProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SupportStand">
            <summary>
            A support stand is a conveyor visual accessory which is located at top of roller.
            There support stand is divided into 2 legs and 0 or more cross braces.
            Each leg has:
              * Floor Plate - which is attached at Props.FloorY (can be the ceiling)
              * Foot - which sits directly above (or below) the floor Plate
              * Leg - extends from the top of the foot to the bottom of the conveyor side
              * Coupling Plate - bolts the conveyor to the leg at the top of the leg
              
             There are 3 types of support stand. The Start, End and Splice. The conveyor 
             will look for start and end and create them if they're not there. Splice
             stands have to be added in by hand currently. The position of the stands 
             is controlled by a the Position expression where the conveyor is called "Attached".
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.AttachType">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.Conveyor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.AttachedVisual">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.AttachToVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.AttachDirection)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.DetachFromVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.AttachDirection">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.Configure">
            <summary>
            Apply Position expression or read constant Position from new location.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.NotifyOnBeforePropertyUpdated(System.String)">
            <summary>
            Position changes cause support stands must be reconfigured.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <summary>
            If conveyor changes Length or Width then support stands must be reconfigured.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            If conveyor changes Height or Rotation then support stands must be reconfigured.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.SupportStand.CreateMesh">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FloorPlateMaterial">
            <summary>The material to use for the support stand foot plate.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FootMaterial">
            <summary>The material to use for the support stand foot.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.LegMaterial">
            <summary>The material to use for the support leg.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.CrossBraceMaterial">
            <summary>The material to use for the support stand cross brace.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.StandType">
            <summary>The 'Start' and 'End' supports are treated specially by the parent conveyor and there should only be one instance of each. The can be 0 or more 'Splice' supports.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.Position">
            <summary>The offset from the start of the conveyor along the direction of movement. 0 would be the start of the conveyor, the end would be the conveyor length. This can be an expression based, e.g. Attached.Length/2 for a central splice support.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FloorPlateProfile">
            <summary>The extrusion profile for the floor plate.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FootProfile">
            <summary>The extrusion profile for the foot.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.LegProfile">
            <summary>The extrusion profile for the leg.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.CrossBraceProfile">
            <summary>The extrusion profile of each cross brace.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.ConveyorOffset">
            <summary>Y is the distance above the conveyor surface that the stands extend to (negative Y means below the surface). Z is the padding added to the width of the conveyor to position the legs of the stand further out or closer in to the conveyor which is useful for custom profiles. X is an offset along the conveyor length which will usually be 0.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FloorY">
            <summary>The height of the floor to start the support stand at. This defaults to 0. Can be used to suspend conveyors from the ceiling or stand them on raised platforms.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FloorLevel">
            <summary>The support will stretch down this many additional floors.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FloorPlateHeight">
            <summary>How high to extrude the floor plate profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.FootHeight">
            <summary>How high to extrude the foot profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.LegHeight">
            <summary>How high to extrude the leg profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.AddCrossBraceAtHeight">
            <summary>An array of heights after which an additional cross brace should be added. If the array is zero length no cross braces will be added. The maximum number of cross braces is equal to the length of the array.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.EvenlySpaceCrossBraces">
            <summary>If true the cross braces are distributed along the height of the leg at regular intervals. If false then the heights in AddCrossBraceAtHeight are considered to be absolute.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.BankAngle">
            <summary>This is the angle to rotate the attached conveyor along the direction of the conveyor. This can be used to produce nose overs or unders or baggage carousels.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.StandHeight">
            <summary>The sum of the floor plate height, the foot height and the leg height.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.StandWidth">
            <summary>The width of the support stand.</summary>
        </member>
        <member name="P:Demo3D.Visuals.SupportStand.ConveyorWidth">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.SupportStandAccessory">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.TableQuery.Controls.TableQueryResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_advanced_filter">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_compile">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_data_sources">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_filter_data_by_criteria">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_insert_cross_reference">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_list_bullet">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_paragraph_spacing_increase">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_sort_ascending">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TableQuery.Controls.TableQueryResources.stock_view_function_selection">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TextureLibrary.Item(Demo3D.Visuals.TextureReference)">
            <summary>
            Get a texture given a texture key.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TextureLibrary.Item(Demo3D.Visuals.ITexture)">
            <summary>
            Get an existing or new texture key given a texture
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.TextureLibrary.MergeFrom(Demo3D.Visuals.TextureLibrary)">
            <summary>
            Merge the textures from the supplied library into this library.
            </summary>
            <param name="textureLib"></param>
        </member>
        <member name="P:Demo3D.Visuals.TextureLibrary.Count">
            <summary>
            How many textures are stored in this library?
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TextureLibrary.PersistentCount">
            <summary>
            How many persistent textures are stored in this library?
            </summary>
            <returns>Number of persistent textures.</returns>
        </member>
        <member name="M:Demo3D.Visuals.TextureLibrary.Clear">
            <summary>
            Clear out all textures from the library.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.TextPickMesh">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DimensionUnit">
            <summary>
            Allow the unit of a Dimension to be changed from the default
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.DimensionUnit.Default">
            <summary>The default distance unit.</summary>
        </member>
        <member name="F:Demo3D.Visuals.DimensionUnit.Inch">
            <summary>Inch distance unit.</summary>
        </member>
        <member name="F:Demo3D.Visuals.DimensionUnit.Foot">
            <summary>Foot distance unit.</summary>
        </member>
        <member name="F:Demo3D.Visuals.DimensionUnit.Yard">
            <summary>Yard distance unit.</summary>
        </member>
        <member name="F:Demo3D.Visuals.DimensionUnit.Millimeter">
            <summary>Millimeter distance unit.</summary>
        </member>
        <member name="F:Demo3D.Visuals.DimensionUnit.Centimeter">
            <summary>Centimeter distance unit.</summary>
        </member>
        <member name="F:Demo3D.Visuals.DimensionUnit.Meter">
            <summary>Meter distance unit.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.StartArrow">
            <summary>The editable profile for the start arrow of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.EndArrow">
            <summary>The editable profile for the end arrow of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.StartVisual">
            <summary>The visual that the start of the dimension is attached to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.EndVisual">
            <summary>The visual that the end of the dimension is attached to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.StartLocation">
            <summary>The local location on the start visual the dimension is attached to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.EndLocation">
            <summary>The local location on the end visual the dimension is attached to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.ExtensionLineOffset">
            <summary>The distance from the start and end locations that the dimension side lines start.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.FixPosition">
            <summary>When true the text is anchored to the center of the dimension. When false the text can move along the dimension line to be outside the dimension. This is useful when the dimension is smaller than the text.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.ArrowsInside">
            <summary>When true the arrows are drawn inside the dimension and point outwards. When false the arrows are drawn outside the dimension and point inwards.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.FormatString">
            <summary>The .NET numeric formatting string that can control how the dimension is presented, e.g. "{0:#.00} inches" to display 2 decimal places and the suffix of "inches". If empty then the string is formatted using the system unit preferences.</summary>
        </member>
        <member name="P:Demo3D.Visuals.DimensionProperties.Unit">
            <summary>Allow the system unit preferences for the unit to use for displaying distances to be overridden locally for this dimension. Useful to mix m, cm and mm on the same drawing. This is ignored if the FormatString is set.</summary>
        </member>
        <member name="T:Demo3D.Visuals.DimensionConnector">
            <summary>
            Dimension Connector.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DimensionConnector.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DimensionConnector.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="visual">The visual to which the connector belongs.</param>
            <param name="name">The name that should uniquely identify the connector on its parent visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.DimensionConnector.CanConnectTo(Demo3D.Visuals.Connector)">
            <summary>
            Whether the connector can connect to the supplied connector.
            </summary>
            <param name="c">The connector to check against.</param>
            <returns>True if the two connectors can be connected, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Visuals.DimensionControlPoint">
            <summary>
            Control point class to manipulate the start and end of the dimension.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.DimensionControlPoint.UpdateLocation(Demo3D.Visuals.IView)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.TextProperties">
            <summary>
            Summary description for Text Visual.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.TextVisual">
            <summary>
            A visual for displaying text in the scene which can be extended to become a dimension visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.TextVisual.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TextVisual.AttachToProperties">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.IsVisible">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.TextVisual.DefaultArrow">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.TextVisual.RenderWithoutChildren(Demo3D.Visuals.IDisplay)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.IsDimension">
            <summary>When true this adds a configurable dimension arrow underneath the text.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.Dimension">
            <summary>Addition properties that configure the dimension arrow for the text when IsDimension is true.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.Text">
            <summary>The text to show.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.LineHeight">
            <summary>Scale the font so a line would be this high.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.LineSpacing">
            <summary>Spacing between lines of text, as a percentage of the standard font spacing. A spacing of 0% produces overlapping text, and 200% produces lines which are further apart</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.Depth">
            <summary>How far to extrude the text along the Z axis.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.FontFamily">
            <summary>The name of the font for the text.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.Bold">
            <summary>Whether the font is bold or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.Italic">
            <summary>Whether the font is italic or not.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.HorizontalAlign">
            <summary>Align the text to the Left, Center or Right of the Location.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.VerticalAlign">
            <summary>The vertical alignment of the text relative to the text visual origin.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TextVisual.Material">
            <summary>The color of the text.</summary>
        </member>
        <member name="T:Demo3D.Visuals.WorkEditedListener">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AlignAnchor">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DistributeAnchor">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.AlignAxis">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DisplayAxesType">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SelectionDisplayMode">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BuilderTool">
            <summary>
            Instance of a tool that supports scene object selection and dragging.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.showDirectionArrows">
            Lock the view so only object selection can occur
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.showWorldAxis">
            Display arrows on conveyors
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.currentPickLocation">
            Pick information in world coordinates
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.currentPickDrag">
            Pick information in object coordinates
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.currentPickRotation">
            offset from location of current drag
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.currentPickCandidateConnectors">
            offset from rotation of current drag
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.pickFaceLines">
            Align to face details
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.snapDistance">
            <summary>
            Smaller than this distance connectors should snap
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.BuilderTool.SelectionChanged">
            <summary>
            Obsolete, use App.SelectionManager.SelectionChanged instead.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.BuilderTool.Selection">
            <summary>
            Removes any deleted visuals from the selection and returns the rest
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BuilderTool.SelectionArray">
            <summary>
            Returns all visuals included deleted
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BuilderTool.showConnectors">
            <summary>
            Only show connectors in build/grid mode not in concrete mode.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BuilderTool.ShowWorldAxis">
            <summary>
            Show world axis
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BuilderTool.ShowAxes">
            <summary>
            Only show connectors in build/grid mode not in concrete mode.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BuilderTool.HighlightSnapDistance">
            <summary>
            Alter the default snap distance for connected objects.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.#ctor(Demo3D.Visuals.IBuilder,Demo3D.Visuals.IRenderer)">
            <summary>
            Builder tool constructor
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.DisconnectVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.Document.DisconnectVisualFlags)">
            <summary>
            Break all connections with unselected visuals ready for drag or delete.
            </summary>
            <param name="visual"></param>
            <param name="flags"></param>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.GetAllUnconnectedConnectors(Demo3D.Visuals.Visual,System.Collections.Generic.List{Demo3D.Visuals.Connector})">
            <summary>
            Get a list of all the connectors on a visual and its children.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Connect(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            The 'from' visual is static, the 'to' visual moves.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BuilderTool.StraitJacket">
            <summary>
            Treat root as if it were the parent of the children. Update() method will
            constrain children to be in the same relative position as when this class
            was constructed, regardless of actual parent/child relationships.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SnapAndConnect(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector,Demo3D.Visuals.Connector.Alignment)">
            <summary>
            From moves, to is static.
            Rewritten to avoid reparenting, which in turn eliminates a bug where the OnConnected callback gets to see the the temporary parent
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SetupConnectorSpaces">
            <summary>
            Build database for of connectors for optimizing snapping at start of drag.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.AddVisualToConnectorSpaces(Demo3D.Visuals.Visual,Demo3D.Visuals.ConnectorSpace,Demo3D.Visuals.ConnectorSpace,Demo3D.Visuals.ConnectorSpace,System.Collections.Generic.HashSet{Demo3D.Visuals.Visual})">
            <summary>
            Build a database of selected and non-selected connectors to optimize mouse drag snapping.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.AddVisualToConnectorSpacesExcludingControlPoint(Demo3D.Visuals.Visual,Demo3D.Visuals.Connector)">
            <summary>
            Build a database of connectors to optimize control point snapping.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.RecalculateConnectors(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <summary>
            Attach or detach connectors and accessories to or from valid connections.
            </summary>
            <param name="visuals">The visuals to snap</param>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SnapSelection">
            <summary>
            Snap selection to any target
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SnapAccessories(System.Collections.ICollection)">
            <summary>
            Attach or detach accessories to or from a visual.
            </summary>
            <param name="visuals">The collection of visuals. Only visuals that implement IVisualAccessory, or have an IAccessoryAspect will be used.</param>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CutSelection">
            <summary>
            Remove the current selection from the scene and place on the clipboard.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CopySelection">
            <summary>
            Copy the current selection to the clipboard.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.PasteSelection(System.Drawing.Point)">
            <summary>
            Paste the clipboard into the Scene.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CanPasteFromClipboard">
            <summary>
            Is there data on the clipboard that can be pasted?
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.DeleteSelection">
            <summary>
            Disconnect and remove the selected visuals from the scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BuilderTool.ViewLocked">
            <summary>
            Lock the view so only object selection can occur, flip sense if a certain modifier is pressed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SelectionManager_SelectionChanged(System.Object,System.EventArgs)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.ClearConnectorsAtSelection">
            <summary>
            Clears the list of connectors belonging to the selected visuals at the time of selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.UpdateConnectorsAtSelection">
            <summary>
            Updates the list of connectors belonging to the selected visuals at the time of selection.
            This should be called whenever the list of selected visuals is changed or after an undo/redo
            operation has been performed that affects the connectors and we want to take a snapshot of
            the current state.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CurrentConnectorsInSelection">
            <summary>
            Finds and returns all the connectors currently belonging to the selected visuals.
            </summary>
            <returns>List of connectors belonging to the selected visuals at the present time.</returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.UpdateAddedConnectorsInSelection">
            <summary>
            Updates the list of connectors that have been connected to the selected visuals since the
            selection was made.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.UpdateDeletedConnectorsInSelection">
            <summary>
            Updates the list of connectors that have been disconnected from the selected visuals since
            the selection was made.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BuilderTool.QuickPropertiesWindowSize">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.AdjustSelection(Demo3D.Visuals.Visual)">
            <summary>
            Add or Remove a visual from the selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.NewSelection(Demo3D.Visuals.Visual)">
            <summary>
            Make the visual the only selected visual ready for a drag.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.NewSelection(System.Collections.IList)">
            <summary>
            Make the visual the only selected visual ready for a drag.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.NewRectSelection">
            <summary>
            Add to selection all visuals that intersect the selection rect.
            <returns>True if selection has changed.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.AdjustRectSelection">
            <summary>
            Adjust selection to also contain all visuals that intersect the selection rect.
            <returns>True if selection has changed.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SelectAll(Demo3D.Visuals.Visual)">
            <summary>
            Select all the children directly below this visual and no further.
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.InvertSelection">
            <summary>
            Invert the current selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Group">
            <summary>
            Turn the current selection into a group of the selected objects.
            </summary>
            <returns>null if nothing currently selected</returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Ungroup">
            <summary>
            Ungroup the currently selected groups.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.MakeReferences(System.Collections.ArrayList)">
            <summary>
            Use the mesh as the mesh of the remaining visuals and remove the references to the old meshes.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.PreviewAlign(Demo3D.Common.Axis,Demo3D.Visuals.AlignAnchor)">
            <summary>
            Show where the selection should be if the align were to happen.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.PreviewDistribute(Demo3D.Common.Axis,Demo3D.Visuals.DistributeAnchor,System.Double)">
            <summary>
            Show a preview of what align action will perform.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CancelPreview">
            <summary>
            Don't show align or distribute action preview.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.PreviewVisual(Demo3D.Visuals.Visual)">
            <summary>
            Highlight a visual while traversing a visual list in the property grid .
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.PreviewVisual(Demo3D.Visuals.Visual,System.Drawing.Color)">
            <summary>
            Highlight a visual while traversing a visual list in the property grid .
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.GetPreviewVisual">
            <summary>
            What visual is currently being highlighted?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.GetPreviewObject">
            <summary>
            What is currently being highlighted?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.ZoomToLocation(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Move camera to location looking at target
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Align(Demo3D.Common.Axis,Demo3D.Visuals.AlignAnchor)">
            <summary>
            Align objects by axis and anchor.
            The picked visual selected stays where it is.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SetupAlign(Demo3D.Common.Axis,Demo3D.Visuals.AlignAnchor)">
            <summary>
            Align objects without creating an undoable edit.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Distribute(Demo3D.Common.Axis,Demo3D.Visuals.DistributeAnchor,System.Double)">
            <summary>
            Distribute objects along an axis by center or space.
            The picked visual selected stays where it is.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.DistributeVisuals(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Common.Axis,Demo3D.Visuals.DistributeAnchor,System.Single)">
            <summary>
            Reposition one visual relative to another along one axis relative
            to its center or edge.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BuilderTool.VisualCenterComparer">
            <summary>
            Used to sort an array of visuals on one of their dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.GetFirstOfTypeInSelection(System.Type)">
            <summary>
            Get the first visual of a particular type in the selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SetCurrentPick(Demo3D.Visuals.PickInfo)">
            <summary>
            Set the current picked object, this is the focus for properties/rotation, etc.
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.IsAncestorSelected(Demo3D.Visuals.Visual)">
            <summary>
            Determine if one of the parents, grandparents, etc. are selected
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SetupSelectionTransformation">
            <summary>
            Snapshot the initial Matrix of all selected objects before a drag/wheel.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CancelSelectionRectangle">
            <summary>
            Remove the existing selection rectangle information.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.SetSelectionRectangle(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Remember the area selected in a drag select and create a selection mesh.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CreatingVisual">
            <summary>
            Tell the builder tool that this drag is the result of a creation.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.AddCreateVisualEdit">
            <summary>
            Add an undo/redo edit for creating a new visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.AddDeleteSelectionEdit(System.Collections.ArrayList)">
            <summary>
            Add an undo/redo edit for deleting the selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.GetSelectionWorldMatrices">
            <summary>
            Record the initial matrix of all the selected visuals.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.AddUndoableMatrixEdit">
            <summary>
            Add an undo/redo edit for changing the matrices on a set of visuals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.CreateUndoableMatrixEdit">
            <summary>
            Create an undo/redo edit for changing the matrices on a set of visuals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Key(System.Windows.Forms.KeyEventArgs,System.Boolean)">
            <summary>
            Rotate the selected object through 30 degrees when a key is pressed.
            Press shift to rotate -30 degrees.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.MouseHover(System.Drawing.Point)">
            <summary>
            Activate tooltip when mouse hovers at a point for a while.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.DelayedMouseMoveInputHandlers(Demo3D.Visuals.PickInfo,System.Drawing.Point)">
            <summary>
            Execute mouse move on any input handlers
            </summary>
            <param name="info"></param>
            <param name="p"></param>
            <returns>Returns true if the input handler handles the event</returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.GetMouseOverInfoCached(System.Drawing.Point)">
            <summary>
            Only do picks on visuals that have mouse event listeners when the Scene has been Initialized .
            Mouse events include MouseOver, MouseLeave and MouseMove
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.GetMouseOverInfo(System.Drawing.Point)">
            <summary>
            Do mouse events on all visuals in the scene
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Select or start a drag.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.MouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Complete selection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.ShouldAlign(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            When dragging a control point or constrained axis drag should we align the faces or not.
            Don't align when there is a direct hierarchical relationship, parent/child.
            </summary>
            <param name="draggedVisual">The visual or control point parent being moved.</param>
            <param name="alignVisual">The visual to align the draggedVisual to.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.UpdateAlignFeature(Demo3D.Visuals.IPickFeature,System.Drawing.Point,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="alignFromFeature">The feature we are aligning from</param>
            <param name="point">Current mouse position in screen co-ords</param>
            <param name="includeSelf">Whether to include the alignFromFeature visual in the pick</param>
            <param name="allowSelfAlign">When false, picking the alignFromFeature visual will return null</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.DisconnectInvalidConnectors(Demo3D.Visuals.Visual,System.Double)">
            <summary>
            Disconnect a visual from everything around it but only if it's beyond the snap distance.
            </summary>
            <param name="visual">The visual to disconnect</param> 
            <param name="distance"></param>
            <returns>The nearest connector that is still connected and the distance to it.</returns>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.RotateSelectionAroundCameraForward(System.Double)">
            <summary>
            Rotate around the camera forward when in parallel projection, the camera forward is horizontal and x key or z key are not pressed.
            </summary>
            <param name="angleInDegrees"></param>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.PreRender(Demo3D.Visuals.IDisplay)">
            <summary>
            Preamble to scene rendering giving tool a chance to change settings.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.HighlightObject(System.Object,Microsoft.DirectX.Direct3D.Material)">
            <summary>
            Highlight given object, and recurse through it if it is a container
            </summary>
            <param name="previewObject">object to highlight</param>
            <param name="previewMat">material to use</param>
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Render(System.Boolean)">
            <summary>
            Draw the scene and highlight selections and conveyor connections
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.BuilderTool.Label">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.BuilderTool.Reset">
            <summary>
            Remove selection, go to layout mode.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.SpecialMeshObject.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BuilderToolMeshHelper.CreateBoxMesh(System.Drawing.Color,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Create a box mesh of a specified colour and radius
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BuilderToolMeshHelper.UpdateBoxMesh(Demo3D.Visuals.MeshObject,System.Drawing.Color,System.Double,System.Double,System.Double)">
            <summary>
            Update the box radius for a special mesh.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect">
            <summary>
            A dimension as an aspect. Measures the distance between two points.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Document">
            <summary>The currently loaded Document for the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.WorldMatrix">
            <summary>The World Matrix of the Container of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.ControlPoints">
            <summary>The control points of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Renderables">
            <summary>The renderable components of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.StartPoint">
            <summary>The start point of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.EndPoint">
            <summary>The end point of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.LockDirection">
            <summary>Check this box to lock the dimension to the selected direction, preventing the direction from changing.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.DimensionDirection">
            <summary>The direction in which the dimension measures distance.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.ExtensionDirection">
            <summary>The direction in which the dimension extends.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Height">
            <summary>The vertical distance of the dimension from the start point.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Depth">
            <summary>The forward distance of the dimension from the start point.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Material">
            <summary>The color of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Unit">
            <summary>The display unit of measurement of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Format">
            <summary>The text format of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Length">
            <summary>The distance from the start point to the end point. Edit this value to move the visuals.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.TextHeight">
            <summary>The size of the text.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.TextOffset">
            <summary>The position of the text relative to the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.FlipText">
            <summary>Rotates the text by 180 degrees.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.ArrowsInside">
            <summary>Determines whether the arrows face inwards or outwards.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.StartArrow">
            <summary>Click to edit the start arrow.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.EndArrow">
            <summary>Click to edit the end arrow.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Text">
            <summary>The Text of the dimension.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.ArrowLine">
            <summary>The cylinder which connects the start and end arrows.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.StartExtension">
            <summary>The cylinder which extends from the Start Arrow position.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.EndExtension">
            <summary>The cylinder which extends from the End Arrow position.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.OnAdded">
            <summary>Setup the dimension when added. Do not invoke manually.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.OnRemoved">
            <summary>Deconstruct the dimension when removed. Do not invoke manually.</summary>
        </member>
        <member name="M:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.OnDimensionPropertyChanged">
            <summary>
            A mesh property has changed. Perform updates.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.UpdateDimension">
            <summary>
            Update the matrices and meshes of dimension renderables.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.Render(Demo3D.Visuals.IDisplay)">
            <summary>
            Render the dimension for display.
            </summary>
            <param name="display">The display to render with.</param>
        </member>
        <member name="M:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.GetLocation(Demo3D.Visuals.VisualPoint)">
            <summary>
            Converts a point into local coordinates.
            </summary>
            <param name="point"></param>
            <returns>A point as local coordinates.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Tools.DimensionTool.DimensionAspect.CreateMesh(Demo3D.Visuals.IDisplay,System.Boolean)">
            <summary>
            Create dimension meshes.
            </summary>
            <param name="display">The display for the renderables.</param>
            <param name="invoke">Indicates if this method should be invoked.</param>
        </member>
        <member name="T:Demo3D.Visuals.EditTools.Edit2DPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.EditTools.EditTool2D">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.EditTools.EditTool3D">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.EditTools.EditToolBase">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.EditTools.EditToolBase.Pick(Demo3D.Visuals.PickInfo@)">
            <summary>
            Pick the visual at a certain point on the screen.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.EditTools.InfiniteFloor">
            <summary>
            Renders an infinite grid that fills the screen
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.EditTools.ViewCube.NotifyOnDragStart">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Visuals.IPickFeature">
            <summary>
            Contains information about the feature that has been picked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.Feature">
            <summary>
            The feature that was picked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.Visual">
            <summary>
            The Visual that responded to the pick.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.ActualVisual">
            <summary>
            The actual visual that was picked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.LocalPosition">
            <summary>
            The position of the feature relative to the actual visual picked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.Lines">
            <summary>
            The points on the line that was picked. If Feature is Face, it includes all points on the face
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.LocalNormal">
            <summary>
            The local normal, only applicable if Feature is Face
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.WorldNormal">
            <summary>
            The world normal, only applicable if Feature is Face
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.LocalDirection">
            <summary>
            The local direction of the line. If Feature is Face, this returns LocalNormal.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IPickFeature.WorldDirection">
            <summary>
            The world direction of the line. If Feature is Face, this returns WorldNormal.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickFeature.ActualRendererAspect">
            <summary>
            The renderer aspect that was picked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PickFeature.ActualRenderable">
            <summary>
            The rendererable on the renderer aspect that was picked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Demo3DMouseEventArgs.Button">
            <summary>
            The mouse button pressed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Demo3DMouseEventArgs.Clicks">
            <summary>
            The number of clicks.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Demo3DMouseEventArgs.Delta">
            <summary>
            Mouse wheel delta.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Demo3DMouseEventArgs.Location">
            <summary>
            Location of the mouse when generating the event.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Demo3DMouseEventArgs.X">
            <summary>
            X-coordinate of the mouse when generating the event.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Demo3DMouseEventArgs.Y">
            <summary>
            Y-coordinate of the mouse when generating the event.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Demo3DMouseEventArgs.PickInfo">
            <summary>
            Pick info of the mouse event
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IInputEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IInputEventHandler.HasCapturedMouse">
            <summary>
            Capture all mouse input
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.MouseEnter(Demo3D.Visuals.Demo3DMouseEventArgs)">
            <summary>
            Executed when the mouse enters the handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.MouseLeave(Demo3D.Visuals.Demo3DMouseEventArgs)">
            <summary>
            Executed when the mouse leaves the handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.MouseUp(Demo3D.Visuals.Demo3DMouseEventArgs)">
            <summary>
            Executed when a mouse button is released
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.MouseDown(Demo3D.Visuals.Demo3DMouseEventArgs)">
            <summary>
            Executed when a mouse button is clicked
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.MouseHover(Demo3D.Visuals.Demo3DMouseEventArgs)">
            <summary>
            Executed when the mouse hovers over the handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.MouseMove(Demo3D.Visuals.Demo3DMouseEventArgs)">
            <summary>
            Executed when the mouse moves over the handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.MouseDrag(Demo3D.Visuals.DragInfo,Demo3D.Visuals.Demo3DMouseEventArgs)">
            <summary>
            Executed when the mouse moves over the handler and a mouse button is down.
            </summary>
            <param name="dragInfo"></param>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.Shortcut(System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executed when certain keyboard shortcuts are pressed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.Key(System.Windows.Forms.KeyEventArgs,System.Boolean,System.Boolean@)">
            <summary>
            Executed when a key is pressed.
            </summary>
            <param name="e"></param>
            <param name="isDown"></param>
            <param name="handled"></param>
        </member>
        <member name="M:Demo3D.Visuals.IInputEventHandler.KeyPress(System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Executed when a key is pressed
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Demo3D.Visuals.MouseConfigurationMode">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.Started">
            <summary>
            Whether the interaction has already started.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.Goal">
            <summary>
            The goal for the interaction.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.Visual">
            <summary>
            The visual being interacted with.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.PickWorldLocation">
            <summary>
            The world location on the visual at the point when interaction was started.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.StartLocalLocation">
            <summary>
            The position on the visual that was picked (in the local space of the visual).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.CurrentWorldLocation">
            <summary>
            The current position (in world space).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.Geometry">
            <summary>
            The mode of interaction.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.Normal">
            <summary>
            The normal/direction of the drag plane/line.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.Locked">
            <summary>
            Whether all joints other than the immediate joint up the chain of the interacted
            visual are locked.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.Persistent">
            <summary>
            Whether the goal for the interaction should persist until explicitly removed.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.InteractionInfo.UserData">
            <summary>
            Persistent user data.
            </summary>
            <remarks>
            The user data persists during the interaction, but is cleared when a new interaction
            occurs.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.InteractionInfo.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.InteractionInfo.Update(Demo3D.Visuals.PickInfo,Demo3D.Visuals.DragInfo,System.Boolean)">
            <summary>
            Updates the interaction information.
            </summary>
            <param name="pickInfo">The information for the pick that started the interaction.</param>
            <param name="dragInfo">The information for the drag that forms the interaction.</param>
            <param name="locked">Whether the interaction is a locked interaction.</param>
        </member>
        <member name="M:Demo3D.Visuals.InteractionInfo.Reset">
            <summary>
            Resets the interaction information.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PickHandler">
            <summary>
            A delegate function that is called when an object is right clicked on
            or hovered over.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ITool">
            <summary>
            Interface that handles mouse movement events
            and eventually key presses. Selection highlighting is also
            rendered by the tool.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ITool.Reset">
            <summary>
            Remove any selections/state. Usually called on reload or tool change.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ITool.GotFocus">
            <summary>
            Fires when the Tool's View gets focus
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ITool.LostFocus">
            <summary>
            Fires when the Tool's View loses focus
            </summary>s
        </member>
        <member name="E:Demo3D.Visuals.ITool.Activated">
            <summary>
            Triggers when the Tool is activated
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ITool.Deactivated">
            <summary>
            Triggers when the Tool is deactivated
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ICameraPath">
            <summary>
            Give control of the camera to another object
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ViewTool">
            <summary>
            Instance of a tool that supports scene object selection and dragging.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.ViewTool.lastMouseDown">
            <summary>
            When a mouse button is pressed this point is set and then this is used
            to pan the camera around when dragging.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.StartMouseRenderTimer(Demo3D.Visuals.IBuilder)">
            <summary>
            Start mouse timer on all view tools
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.VisualCameraPath">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.VisualAsCamera">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.FollowVisualPointOfView">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.FollowVisualCamera">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.FollowVisualFixedCamera">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.RotateAroundTargetPath">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.PositionTargetPath">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.FocusVisualCamera">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ViewTool.FocusLocationCamera">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ViewTool.Camera">
            <summary>
            The camera position and orientation.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.#ctor(Demo3D.Visuals.IBuilder,Demo3D.Visuals.IView)">
            <summary>
            Construct a ViewTool given a view.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.PositionCamera">
            <summary>
            Set up the view matrix according to the current camera and redraw.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ViewTool.StereoTrackerEnabledUpdated">
            <summary>
            Occurs when the value of StereoTrackerEnabled changes.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.ViewTool.GameControllerEnabledUpdated">
            <summary>
            Occurs when the value of the GameControllerEnabled changes.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.OnStereoTrackerEnabledUpdated(System.EventArgs)">
            <summary>
            Raises the StereoTrackerEnabledUpdated event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.OnGameControllerEnabledUpdated(System.EventArgs)">
            <summary>
            Raises the GameControllerEnabledUpdated event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="P:Demo3D.Visuals.ViewTool.StereoTrackerEnabled">
            <summary>
            Gets or sets a value indicating whether the stereo head tracker is enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ViewTool.GameControllerEnabled">
            <summary>
            Gets or sets a value indicating whether the game controller is enabled.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.Pick(Demo3D.Visuals.PickInfo@)">
            <summary>
            Find out what is under the mouse pointer.
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.MouseHover(System.Drawing.Point)">
            <summary>
            Activate tooltip when mouse hovers at a point for a while.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.MouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Select an object at the current position or rotate/pan scene.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.MouseDrag(System.Windows.Forms.MouseEventArgs,System.Drawing.Point)">
            <summary>
            Drag selection or pan scene.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.SetCameraTarget(System.Boolean)">
            <summary>
            Stick camera target to floor or visual
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.ZoomToTarget(System.Single)">
            <summary>
            Zoom towards the camera target
            </summary>
            <param name="delta"></param>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.ZoomToCursor(System.Drawing.Point,System.Single)">
            <summary>
            Zoom towards the mouse cursor
            </summary>
            <param name="cursorPos"></param>
            <param name="delta"></param>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.ZoomToOrthScale(System.Double)">
            <summary>
            Zoom to orthographic scale.
            ratio = 0.5 means 1m takes up half the view width
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.Zoom(System.Single)">
            <summary>
            Zoom camera in, +1 for in 1 step, -1 for out 1 step.
            If CTRL if pressed the zoom with be +/- 0.1.
            If SHIFT if pressed the zoom with be +/- 10.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.ZoomAlong(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Zoom camera towards mouse location, +1 for in 1 step, -1 for out 1 step.
            If CTRL if pressed the zoom with be +/- 0.1.
            If SHIFT if pressed the zoom with be +/- 10.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.Pan(System.Int32,System.Int32)">
            <summary>
            Move the camera and the focus of the camera in screen coordinates.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.Pan(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Move the camera and the focus of the camera in screen coordinates.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.PanAlongEdge(System.Int32,System.Int32)">
            }<summary>
            Move the camera along edge of screen
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.Rotate(System.Int32,System.Int32)">
            <summary>
            Move the camera, leaving the focus of the camera stationary in screen coordinates.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ViewTool.Walk(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Move the camera and the focus forward in X/Z coordinates only.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ConnectorTransferPort">
            <summary>
            Connectors as transfer ports.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ITransferPort">
            <summary>
            The port at which a transfer is to take place. ConnectorTransferPort implements this interface
            for Connector.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.LoadStateAspect">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;LoadStateAspect_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadStateAspect.CurrentTransfer">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;LoadStateAspect_CurrentTransfer_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.LoadStateAspect.CurrentStation">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;LoadStateAspect_CurrentStation_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.QueryReference.Query">
            <summary>
            This will be null until explicitly edited, where it will be instantiated.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Transfer">
            <summary>
            A transfer manages the exchange of loads between anything that can provide an ITransferController and ITransferPort.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Transfer.Run">
            <summary>
            Start off a thread to manage the transfer.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Transfer.RunWithoutTask">
            <summary>
            Start off a thread to manage the transfer but don't return a task that can be continued as it's not used internally anyway.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Transfer.Create(Demo3D.Visuals.Visual,System.String,Demo3D.Visuals.Visual)">
            <summary>
            Create a transfer for the 'load' from the 'txVisual' via its 'txName' named connector.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Transfer.Create(Demo3D.Visuals.Connector,Demo3D.Visuals.Visual)">
            <summary>
            Create a transfer for the 'load' via the 'tx' connector to its default connection.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Transfer.Create(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector,System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <summary>
            Create a transfer for the 'load' between the specfic 'tx'/'rx' connector pair.
            This method should be called in an OnDispatchOut function.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Transfer.ClearOutputTransfersCache">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Transfer.Dispatch(Demo3D.Visuals.Visual)">
            <summary>
            Nudge a visual to scan its inputs and generate new outputs.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TransferStateAspect.TransferState">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.TransferState">
            <summary>
            TransferState is used to model the transfer of loads between equipment and should be attached to
            the equipment, not the load. The load has a CurrentTransfer/CurrentStation aspect for that purpose.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.TurntableDirection">
            <summary>
            Direction to rotate a turntable conveyor.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.TurntableConveyorVisualProperties">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.rotate90Duration">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.leftSide">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.rightSide">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.rotateStopsEnabled">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.rotateAcceleration">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.rotateDirection">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.showGuard">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.mass">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.kinematic">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.rotateCenter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.rotateAxis">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorVisualProperties.targetPosition">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorVisualProperties.AddDefaultSimpleProperties(Demo3D.Visuals.PropertyAliasCollection)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.ChainTurntableConveyorProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.TurntableConveyorProperties">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorProperties.startPadding">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorProperties.endPadding">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.TurntableConveyorBase">
            <summary>
            Abstract class encapsulating the behavior of a rotating conveyor.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.IsRotateMotorOn">
            <summary>Whether or not the turntable rotation motor is on.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RotateMotorSpeed">
            <summary>The speed of the turntable rotation motor.</summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.RotateSpeedBindingUpdated(Demo3D.Visuals.BindableItem)">
            <summary>
            Handle updates from the rotation speed OPC binding
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.SetHingeVelocity(System.Int32)">
            <summary>
            Set velocity and force for hinge, according to required rotation direction,
            acceleration and velocity
            </summary>
            <param name="directionSign"></param>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.NotifyRotationProperties">
            <summary>
            User has changed properties in the grid, try to update the rotation motor so they
            can see the effects.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.LeftSideWidth">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RightSideWidth">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.LeftSideStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RightSideStep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.LeftSideHeight">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RightSideHeight">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CreateGeoms">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CreatePhysics">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.DestroyPhysics">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.Width">
            <summary>The width of the conveyor surface (roller width or belt width)</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.Length">
            <summary>The length of the conveyor surface.</summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CreateMovementSurface">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.Reset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.TurntableConveyorBase.numExtraConnectorsInPI">
            <summary>
            The number of connectors every 180 degrees.
            0 means just start and end,
            2 means start, end, left and right,
            4 means every 45 degrees which is the current default
            etc.
            "Start" and "End" are needed to render the direction arrows.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.ConnectorSeparationAngle">
            <summary>
            Angle between successive connectors, by default 45 degrees.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CreateConnectors">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.Configure">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.ResetPosition">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.MoveTo(Demo3D.Script.ScriptThread,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.MoveTo(Demo3D.Script.ScriptThread,System.Double,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.RotateMotorOn">
            <summary>
            Start the turntable rotating.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.RotateMotorOff">
            <summary>
            Stop the turntable rotating.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.RotateToTarget">
            <summary>
            Rotates the turntable to the target position.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CreatePickMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.Side(Demo3D.Visuals.MeshBuilder,System.Double,Demo3D.Visuals.ConveyorSideProperties)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.SideModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CurveGuard(Demo3D.Visuals.MeshBuilder)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyorBase.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.Rotate90Duration">
            <summary>How many seconds it takes to rotate 90 degrees.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.Position">
            <summary>The rotational position of the turntable.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.TargetPosition">
            <summary>The target position (angle) that the turntable is attempting to turn to.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RotateAxis">
            <summary>The axis about which the turntable rotates.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RotateCenter">
            <summary>The origin of the turntable rotation.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.ShowGuard">
            <summary>When true show the guard at the ends of a turntable.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.Mass">
            <summary>The mass of the turntable to use when Kinematic is set to false.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.Kinematic">
            <summary>Move the turntable kinematically instead of dynamically which means the conveyor will turn with infinite force.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.LeftSide">
            <summary>Color, shape and dimensions of left profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RightSide">
            <summary>Color, shape and dimensions of right profile.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.CenterDiameter">
            <summary>The diameter of the turntable elements, e.g. roller diameter.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RotateStopsEnabled">
            <summary>The turntable will stop when it reaches the target if this is true, otherwise it will keep turning until the motor is switched off.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RotateDirection">
            <summary>The direction the turntable will turn when the motor is turned on (Clockwise or Anticlockwise).</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RotateSpeed">
            <summary>The speed in degrees per second that the turntable will turn with.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyorBase.RotateAcceleration">
            <summary>The acceleration in degrees per second per second that the turntable will turn with.</summary>
        </member>
        <member name="T:Demo3D.Visuals.TurntableConveyor">
            <summary>
            Class encapsulating the behavior of a rotating straight roller conveyor.
            </summary>		
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyor.CreateGeoms">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyor.CurveGuard(Demo3D.Visuals.MeshBuilder)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyor.Side(Demo3D.Visuals.MeshBuilder,System.Double,Demo3D.Visuals.ConveyorSideProperties)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyor.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.TurntableConveyor.Configure">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.SurfaceLength">
            <summary>
            Circumference of a single roller.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.UseSurfaceMaterial">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.UseSurfaceSideMaterial">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.StartPadding">
            <summary>The distance from the start of the conveyor element to the start of the side rail.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.EndPadding">
            <summary>The distance from the end of the conveyor element to the end of the side rail.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.RollerCount">
            <summary>The number of rollers along the length of the conveyor.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.ShowShortRoller">
            <summary>If true, show a short roller at either end of the conveyor, and shorten the sides accordingly. If false, then the connectors are pushed out to avoid fouling any connected conveyors. Consider setting "Show Guard=False" when not showing the short roller.</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.RollerDiameter">
            <summary>The diameter of an individual roller</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.RollerWidth">
            <summary>The width of a roller</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.RollerPitch">
            <summary>The gap between each roller</summary>
        </member>
        <member name="P:Demo3D.Visuals.TurntableConveyor.RollerColor">
            <summary>The color to display for a roller</summary>
        </member>
        <member name="T:Demo3D.Visuals.ChainTurntableConveyor">
            <summary>
            Class encapsulating the behavior of a rotating chain conveyor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTurntableConveyor.Props">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.ChainTurntableConveyor.CurveGuard(Demo3D.Visuals.MeshBuilder)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTurntableConveyor.Side(Demo3D.Visuals.MeshBuilder,System.Double,Demo3D.Visuals.ConveyorSideProperties)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTurntableConveyor.SideModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTurntableConveyor.CenterModule(Demo3D.Visuals.MeshBuilder,System.Double)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTurntableConveyor.SurfaceLength">
            <summary>
            Circumference of the whole belt.
            </summary>
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTurntableConveyor.UseSurfaceMaterial">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTurntableConveyor.UseSurfaceSideMaterial">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTurntableConveyor.CreateNonCachedMeshes">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ChainTurntableConveyor.CreateGeoms">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.ChainTurntableConveyor.ChainWidth">
            <summary>The width of a single chain.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTurntableConveyor.ChainThickness">
            <summary>The height of the chain.</summary>
        </member>
        <member name="P:Demo3D.Visuals.ChainTurntableConveyor.ChainColor">
            <summary>The color of the chain.</summary>
        </member>
        <member name="T:Demo3D.Visuals.DocumentEdit">
            <summary>
            Abstract class representing any undoable edit to a document.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.DocumentVisualsEdit">
            <summary>
            Abstract class representing any undoable edit to a document
            that affects a list of visuals.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MatrixEdit">
            <summary>
            Record the changes to a set of visuals matrices for undo/redo.
            Also remember the initial matrices so joints can reset correctly.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MouseWheelEdit">
            <summary>
            Record changes to the matrices of a list of visuals as a result of a 
            mouse wheel rotation.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PropertiesEdit">
            <summary>
            Record the changes to the properties of a single for undo/redo.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MakeReferencesEdit">
            <summary>
            Record the changes to the properties of a single for undo/redo.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MakeDrawingReferencesEdit">
            <summary>
            Record the changes to the properties of a single for undo/redo.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PropertyEdit">
            <summary>
            Record the changes to the properties of a set of visuals for undo/redo.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CreateEdit">
            <summary>
            A new visual has been created allow undo/redo.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MoveEdit">
            <summary>
            Records the changes to the matrices and connections belonging to a set of visuals for undo/redo.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MoveEdit.serializer">
            <summary>
            Serializer used for serializing and deserializing a list of
            <see cref="T:Demo3D.Visuals.ConnectionReference">ConnectionReference</see>.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MoveEdit.deletedConnectorsXml">
            <summary>
            Serialized <see cref="T:Demo3D.Visuals.ConnectionReference">ConnectionReference</see> containing
            all of the connections that were deleted from the moved visuals.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MoveEdit.addedConnectorsXml">
            <summary>
            Serialized <see cref="T:Demo3D.Visuals.ConnectionReference">ConnectionReference</see> containing
            all of the connections belonging to the moved visuals that were added during the move.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MoveEdit.#ctor(Demo3D.Visuals.Document,System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Collections.Generic.List{Demo3D.Visuals.ConnectionReference},System.Collections.Generic.List{Demo3D.Visuals.ConnectionReference})">
            <summary>
            Constructor.
            </summary>
            <param name="document">The document on which to act.</param>
            <param name="visuals">The list of visuals that have been moved.</param>
            <param name="startWorldMatrix">The initial world matrix for each visual before they were moved.</param>
            <param name="endWorldMatrix">The final world matrix for each visual after they have been moved.</param>
            <param name="deletedConnectors">The connectors that were deleted from the moved visuals.</param>
            <param name="addedConnectors">The connectors that were added to the moved visuals.</param>
        </member>
        <member name="M:Demo3D.Visuals.MoveEdit.Undo">
            <summary>
            Undoes the move operation by moving the visual back to its original position and reconnecting all the
            connections that were deleted during the move.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MoveEdit.Redo">
            <summary>
            Redoes the move operation, moving the selected visuals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MoveEdit.ToString">
            <summary>
            String representation which describes the visuals that were moved.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="T:Demo3D.Visuals.DeleteSelectionEdit">
            <summary>
            Allow undo/redo for deleting a selection.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.DeleteSelectionEdit.unscaledMeshes">
            <summary>
            Stores references to meshes belonging to the visual so that they are not garbage collected and
            the undo operation is able restore the meshes correctly.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.DeleteSelectionEdit.referencedScriptKeys">
            <summary>
            Stores references to script keys used by the visual so that they are not garbage collected and
            the undo operation is able to restore them correctly.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.DeleteSelectionEdit.serializer">
            <summary>
            Serializer used for serializing and deserializing a list of
            <see cref="T:Demo3D.Visuals.ConnectionReference">ConnectionReferences</see>.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.DeleteSelectionEdit.deletedConnectionsXml">
            <summary>
            Serialized <see cref="T:Demo3D.Visuals.ConnectionReference">ConnectionReferences</see>.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DeleteSelectionEdit.#ctor(Demo3D.Visuals.Document,System.Collections.ArrayList)">
            <summary>
            Constructor.
            </summary>
            <param name="document">The document on which to act.</param>
            <param name="selection">The list of visuals that will be deleted.</param>
        </member>
        <member name="P:Demo3D.Visuals.DeleteSelectionEdit.ReferencedScriptKeys">
            <summary>
            List of keys to scripts that were used by the deleted visuals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DeleteSelectionEdit.Undo">
            <summary>
            Undoes the delete operation, restoring the visual and all connections.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DeleteSelectionEdit.Redo">
            <summary>
            Redoes the delete operation, deleting the selected visuals from the document.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.DeleteSelectionEdit.ToString">
            <summary>
            String representation which describes the visuals that were deleted.
            </summary>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.Visuals.DeleteSelectionEdit.DeletedConnectors(Demo3D.Visuals.Visual,System.Collections.Generic.List{Demo3D.Visuals.ConnectionReference})">
            <summary>
            Traverses the tree of visuals from <paramref name="visual" /> and populates the list of
            deleted connectors.
            </summary>
            <param name="visual">The root visual from which to start downwards tree traversal.</param>
            <param name="deletedConnectors">List of connectors found during traversal.</param>
        </member>
        <member name="T:Demo3D.Visuals.GroupSelectionEdit">
            <summary>
            Allow undo/redo of groupinig a selection.
            NOTE: Work in progress, not yet finished.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.CombinedEdit">
            <summary>
            Combine multiple <see cref="T:Demo3D.Utilities.IUndoableEdit" />s to a single edit.
            Edits will be undone in the reverse order they are added, and redone in the same order they were added./&gt;
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.ReparentEdit">
            <summary>
            Undo edit for reparenting a visual
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MultiVisualReparentEdit">
            <summary>
            Undo edit for reparenting multiple visuals to a single parent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.UngroupEdit">
            <summary>
            Undo edit for ungrouping visuals from a parent. This works the same as the MultiVisualReparent edit except that it deletes the parent at the end.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.UserResourcePersistence">
            <summary>
            Represents the way in which a UserResource determines whether it is persistent.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourcePersistence.On">
            <summary>
            Always persist.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourcePersistence.Off">
            <summary>
            Don't persist.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourcePersistence.AsParent">
            <summary>
            Use the parent directory's persistence setting.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.UserResource">
            <summary>
            Class representing a file which can be embedded in a model or catalog and can be referenced by visuals and scripts.
            </summary>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="UserResource" />
            </example>
        </member>
        <member name="F:Demo3D.Visuals.UserResource.DefaultPersistence">
            <summary>
            The default value for the Persistence property.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResource.UserResourcesPath">
            <summary>
            The path, local to the archive, of the base directory for user resources.
            All local paths are relative to this.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.ClearEncrypter(Demo3D.Licensing.LicensedEncrypter)">
            <summary>
            If we are encrypted, and we have permission, decrypt the reasource
            </summary>
            <param name="encrypterLicense">License to use</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.SetEncrypter(Demo3D.Licensing.LicensedEncrypter)">
            <summary>
            If we are unencrypted, and we have permission, encrypt the resource
            </summary>
            <param name="encrypterLicense">License to use</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.CheckAllowedToExecute(System.String,System.String)">
            <summary>
            Check if we are allowed to execute the resource, and throw if we cannot
            </summary>
            <param name="container">Calling container</param>
            <param name="callingEncrypter">Calling encrypter</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.CheckAllowedToRead(System.String)">
            <summary>
            Check if we are allowed to read the resource, and throw if we cannot
            </summary>
            <param name="container"></param>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.CheckAllowedToModify(System.String)">
            <summary>
            Check if we are allowed to modify the resource, and throw if we cannot
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:Demo3D.Visuals.UserResource.AbsolutePath">
            <summary>
            Gets the absolute path (inside an archive) that this user resource should use.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResource.Data">
            <summary>
            Gets or sets the entire contents of the file as a byte array.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.DataReadUnencrypted(Demo3D.Visuals.IBuilder,System.String)">
            <summary>
            Gets the unencrypted entire contents of the file as a byte array given "read" permissions and correct license
            </summary>
            <param name="app">Application</param>
            <param name="container">Indication of what is trying to call this method</param>
            <returns>Unencrypted data</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.DataExecuteUnencrypted(Demo3D.Visuals.IBuilder,System.String,System.String)">
            <summary>
            Gets the unencrypted entire contents of the file as a byte array given "execute" permissions and correct license
            </summary>
            <param name="app">calling IBuilder</param>
            <param name="container">calling container</param>
            <param name="callingEncrypter">calling encrypter</param>
            <returns>Unencrypted data</returns>
        </member>
        <member name="P:Demo3D.Visuals.UserResource.LocalPath">
            <summary>
            Gets or sets the name and path of this user resource, relative to the UserResources directory.
            Never set this property directly, always go through UserResourceLibrary.RenameFile.
            </summary>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="UserResource" />
            </example>
        </member>
        <member name="P:Demo3D.Visuals.UserResource.SourcePath">
            <summary>
            Gets the original path of the file.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResource.Created">
            <summary>
            Gets the time at which this resource was created (not when the original file was created).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResource.Persistence">
            <summary>
            Gets or sets a value indicating whether this UserResource will remain in a UserResourceLibrary even when it's not referenced.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the UserResource class with the path of the file the resource encapsulates, and its new path relative to UserResources.
            </summary>
            <param name="sourcePath">The full path of the file this UserResource is to encapsulate.</param>
            <param name="localPath">The file's new path, relative to the UserResources directory in the archive.</param>
            <remarks>Use this constructor when adding a new user resource to a document/catalog.
            Note it actually reads the file in from disk and stores it in memory.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.IsValidFilePath(System.String)">
            <summary>
            Indicates whether a specified local path could be a valid LocalPath for a UserResource object.
            </summary>
            <param name="localPath">The local path to check.</param>
            <returns>true if localPath could be a valid LocalPath for a UserResource object; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.IsValidDirectoryPath(System.String)">
            <summary>
            Indicates whether a specified local path could be a valid directory for a UserResource object.
            </summary>
            <param name="localPath">The local path to check.</param>
            <returns>true if localPath could be a valid directory for a UserResource object; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.CreateCopy">
            <summary>
            Creates a copy of this instance of UserResource.
            </summary>
            <returns>The new instance of UserResource that was created.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.#ctor">
            <summary>
            Initializes a new instance of the UserResource class.
            </summary>
            <remarks>Use this constructor when loading an existing user resource.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.GetInputStream(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Gets a Stream object which can be used to read the contents of the file.
            </summary>
            <param name="script">Calling Script</param>
            <returns>A Stream object which can be used to read the contents of the file.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="UserResource" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.GetInternalInputStream(Demo3D.Visuals.IBuilder,System.String,System.String)">
            <summary>
            Gets a Stream object which can be used to read the contents of the file.
            NOTE: Used internally to securely encrypt Mixamo BVH files.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.HasSameContent(Demo3D.Visuals.UserResource)">
            <summary>
            Checks whether the content of this UserResource matches the content of another UserResource instance.
            </summary>
            <param name="userResource">The UserResource whose data to compare with.</param>
            <returns>true if the two UserResource objects data are the same.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResource.ReplaceContent(System.Byte[])">
            <summary>
            Replaces the data of this instance of UserResource with the content passed in.
            </summary>
            <param name="content">A byte array to replace the content of this instance of UserResource.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.UserResource.View">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.UserResource.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Populates this instance of UserResource from a serialized version.
            </summary>
            <param name="entryReader">A SerializerEntryReader for reading the entry corresponding to this object.</param>
            <returns>This instance of UserResource.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.UserResource.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes this instance of UserResource.
            </summary>
            <param name="serializer">An instance of Serializer with which to serialize this UserResource.</param>
            <param name="value">The object being serialized.</param>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.UserResourceContentReader">
            <summary>
            Class for handling the deserialization of user resource content.
            The reason a class is needed for this that the content is read from different places depending on the circumstance, but we want a unified interface.
            For example when reading in documents and catalogs the content is read from the compressed archive, but when pasting from the clipboard the content already exists and must simply be aliased.
            Note that you shouldn't assume that the content has actually been read until the UserResourceContentReader has been disposed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceContentReader.serializer">
            <summary>
            The Serializer being used to read the user resource library.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.#ctor(Demo3D.Common.Serializer)">
            <summary>
            Initializes a new instance of the UserResourceContentReader class.
            </summary>
            <param name="serializer">The Serializer instance being used to read the user resource library.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.ReadContent(Demo3D.Visuals.UserResource)">
            <summary>
            When overridden in a derived class, registers a user resource to have its content read.
            Note the content may not be read until this instance is disposed.
            </summary>
            <param name="userResource">The UserResource instance whose data to read.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.Dispose">
            <summary>
            Performs any cleanup and/or finishes reading user resource content.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.Initialize(Demo3D.Visuals.UserResourceContentReader)">
            <summary>
            Adds the specified reader to the context values of the serializer so that deserializers can access it.
            </summary>
            <param name="reader">The UserResourceContentReader to be used.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.Create(Demo3D.Common.Serializer,System.String,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Creates a UserResourceContentReader which can be used to read user resource content from a compressed archive.
            </summary>
            <param name="serializer">The Serializer instance being used to read the user resource library.</param>
            <param name="archivePath">The full path of the compressed archive.</param>
            <param name="library">The UserResourceLibrary instance whose resources' data to read.</param>
            <returns>A new UserResourceContentReader object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.Create(Demo3D.Common.Serializer,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Creates a UserResourceContentReader which can be used to populate user resources' data by aliasing it from another library.
            </summary>
            <param name="serializer">The Serializer instance being used to read the user resource library.</param>
            <param name="library">A UserResourceLibrary from which to alias user resource data.</param>
            <returns>A new UserResourceContentReader object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.GetReader(Demo3D.Common.Serializer)">
            <summary>
            Gets the UserResourceContentReader attached to a specified Serializer instance.
            </summary>
            <param name="serializer">The Serializer instance whose UserResourceContentReader to retrieve.</param>
            <returns>The UserResourceContentReader attached to the serializer if there is one; otherwise, null.</returns>
        </member>
        <member name="T:Demo3D.Visuals.UserResourceContentReader.CompressedUserResourceContentReader">
            <summary>
            A version of UserResourceContentReader that reads user resource content from a compressed archive.
            The actual reading is only done when the object is disposed.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceContentReader.CompressedUserResourceContentReader.archivePath">
            <summary>
            The path of the compressed archive to read from.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceContentReader.CompressedUserResourceContentReader.library">
            <summary>
            The UserResourceLibrary whose resources' content we're reading.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.CompressedUserResourceContentReader.#ctor(Demo3D.Common.Serializer,System.String,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Initializes a new instance of the CompressedUserResourceContentReader class.
            </summary>
            <param name="serializer">The Serializer instance being used to read the user resource library.</param>
            <param name="archivePath">The full path of the compressed archive to read the user resource content from.</param>
            <param name="library">The UserResourceLibrary whose resources' content to read.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.CompressedUserResourceContentReader.ReadContent(Demo3D.Visuals.UserResource)">
            <summary>
            Does nothing in this class, as we simply populate all the resources in the library at the end.
            </summary>
            <param name="userResource">The UserResource to do nothing with.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.CompressedUserResourceContentReader.Dispose">
            <summary>
            Actually reads the content from the compressed archive.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.UserResourceContentReader.LibraryUserResourceReader">
            <summary>
            A version of UserResourceContentReader that aliases user resource content from another UserResourceLibrary instance.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceContentReader.LibraryUserResourceReader.library">
            <summary>
            The UserResourceLibrary whose content to alias.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.LibraryUserResourceReader.#ctor(Demo3D.Common.Serializer,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Initializes a new instance of the LibraryUserResourceReader class.
            </summary>
            <param name="serializer">The Serializer instance being used to read the user resource library.</param>
            <param name="library">The UserResourceLibrary whose content to alias.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceContentReader.LibraryUserResourceReader.ReadContent(Demo3D.Visuals.UserResource)">
            <summary>
            Assigns the specified user resource's Data property from that of the corresponding resource in the source library.
            </summary>
            <param name="userResource">The UserResource instance whose content to alias from the source library.</param>
        </member>
        <member name="T:Demo3D.Visuals.UserResourceLibrary">
            <summary>
            Class representing a library of user resources available in a catalog or model.
            This class also provides a file system type view of the library, since user resources can be divided into directories. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceLibrary.DefaultDirectoryPersistence">
            <summary>
            The default persistence setting for directories other than the root.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceLibrary.DefaultRootPersistence">
            <summary>
            The default persistence setting for the root directory.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceLibrary.userResources">
            <summary>
            The internal storage mechanism for the UserResource objects contained in this library.
            Each UserResource object is keyed on its LocalPath property.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceLibrary.emptyDirectories">
            <summary>
            A list of the local paths of all empty directories.
            The reason for this is simply so that if a directory is created, it gets persisted even if it has no resources in it.
            Without this, since directories normally only exist because they're present in the LocalPath of a UserResource, empty directories would disappear.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceLibrary.directoryPersistence">
            <summary>
            Maps directory paths to their persistence.
            Only directories that are not using the default (see DefaultDirectoryPersistence above) should be stored here.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResourceLibrary.Item(System.String)">
            <summary>
            Gets the instance of UserResource associated with a given local path.
            </summary>
            <param name="localPath">The full local path of the UserResource instance to retrieve.</param>
            <returns>The instance of UserResource with the given local path.</returns>
        </member>
        <member name="P:Demo3D.Visuals.UserResourceLibrary.Count">
            <summary>
            Gets the number of UserResource objects in this library.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResourceLibrary.IsEmpty">
            <summary>
            Gets a value indicating whether this UserResourceLibrary contains any user resources or directories.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResourceLibrary.RootPersistence">
            <summary>
            Gets or sets a value indicating the root level persistence setting for this library.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.EnsureTrailingSeparator(System.String)">
            <summary>
            Appends a trailing path separator character to a path if it doesn't already have one.
            </summary>
            <param name="localPath">The path of a directory.</param>
            <returns>A version of path with a trailing separator if it doesn't have one; otherwise, path.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.PruneEmptyDirectories">
            <summary>
            Removes any empty directories from this.emptyDirectories that are no longer empty.
            This is important to do because the whole way this class works assumes that directories in this list are empty.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.PruneEmptyResources">
            <summary>
            Remove any entries that were not present in the loaded file.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.Add(Demo3D.Visuals.UserResource)">
            <summary>
            Adds a UserResource to this library without cloning it.
            </summary>
            <param name="userResource">The instance of UserResource to add.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetParentDirectory(System.String)">
            <summary>
            Gets the parent directory of a directory or UserResource.
            </summary>
            <param name="path">The path of the item whose parent to get.</param>
            <returns>The path of the parent directory.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.MergePersistentResourcesFrom(Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Merges all persistent UserResource objects and directories from another UserResourceLibrary into this instance.
            Note that this doesn't clone the UserResource objects, but rather 'steals' them.
            </summary>
            <param name="source">The UserResourceLibrary whose persistent UserResource objects to merge into this instance.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetUserResourceAbsolute(System.String)">
            <summary>
            Retrieves a UserResource from this library from its absolute path.
            </summary>
            <param name="absolutePath">The full absolute path used by the UserResource instance to retrieve.</param>
            <returns>The UserResource with the given absolute path if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.IsSharedResourceType(System.Type)">
            <summary>
            Returns a value indicating whether a specified type could represent a user resource.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if type could represent a user resource; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.Add(System.Object,Demo3D.Visuals.SharedResources,Demo3D.Visuals.SharedResources)">
            <summary>
            Adds a referenced UserResource instance from one UserResourceLibrary to another UserResourceLibrary.
            </summary>
            <param name="value">A UserResourceReference that references the UserResource to steal.</param>
            <param name="destination">The SharedResources that contains the UserResourceLibrary in which the referenced UserResource resides.</param>
            <param name="source">The SharedResources into which to add the referenced UserResource.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.AddCopy(Demo3D.Visuals.UserResource)">
            <summary>
            Makes a copy of a UserResource object and adds it to this library.
            </summary>
            <param name="userResource">The UserResource to copy into the library.</param>
            <returns>The new instance of UserResource that was created.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.AddCopy(Demo3D.Visuals.UserResource,System.String)">
            <summary>
            Makes a copy of a UserResource object and adds it to a specific directory in this library.
            </summary>
            <param name="userResource">The UserResource to copy into this library.</param>
            <param name="directoryPath">The local path of the directory into which to copy the user resource.</param>
            <returns>The new instance of UserResource that was created.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.AddRenamedCopy(Demo3D.Visuals.UserResource,System.String)">
            <summary>
            Makes a copy of a UserResource object with a new name and adds it to this library.
            </summary>
            <param name="userResource">The UserResource to copy renamed into the library.</param>
            <param name="newName">The new name (not full path).</param>
            <returns>The new instance of UserResource that was created.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.#ctor">
            <summary>
            Initializes a new instance of the UserResourceLibrary class.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.Add(System.String,System.String,Demo3D.Licensing.LicensedEncrypter)">
            <summary>
            Creates a new instance of UserResource from an external file and adds it to this library.
            </summary>
            <param name="sourcePath">The source path of the file to create a new UserResource for.</param>
            <param name="localPath">The path (including the name) of the resource, relative to the root of this library.</param>
            <param name="encrypterLicense">The encrypter for the new UserResource</param>
            <returns>The new instance of UserResource that was created.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.Contains(System.String)">
            <summary>
            Returns a value indicating whether a UserResource with a specific path is present in the library.
            </summary>
            <param name="localPath">The full local path of the UserResource to check for the presence of.</param>
            <returns>true if a UserResource with the specified path is present in the library; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.Contains(Demo3D.Visuals.UserResource)">
            <summary>
            Returns a value indicating whether a specific instance of UserResource is present in the library.
            </summary>
            <param name="userResource">The UserResource to check for the presence of.</param>
            <returns>true if userResource is present in this library; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.CreateDirectory(System.String)">
            <summary>
            Creates an empty directory in this library.
            </summary>
            <param name="localPath">The local path (including the name) of the new directory, relative to this library.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.IsDirectory(System.String)">
            <summary>
            Returns a value indicating whether a given path represents a valid directory in this library.
            </summary>
            <param name="localPath">The full local path of the directory to check for.</param>
            <returns>true if the specified path is a valid directory; otherwise, false.</returns>
            <remarks>Note that an empty string represents the top level, and although this isn't a directory per se, it is a valid path and so returns true.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetDirectories(System.String)">
            <summary>
            Returns the names of the subdirectories of a specific directory in the library.
            </summary>
            <param name="localPath">The local path of the directory whose subdirectories to return, or an empty string to represent the top level.</param>
            <returns>An array containing the names of the subdirectories.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetUserResources(System.String)">
            <summary>
            Returns the UserResource objects representing user resources in a specific directory in the library.
            </summary>
            <param name="localPath">The local path of the directory whose resources to return, or an empty string to represent the root leve.</param>
            <returns>An array containing the user resources in the specified directory.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetUserResourcesRecursively(System.String)">
            <summary>
            Returns the UserResource objects representing all user resources in a specific directory or a subdirectory of it.
            </summary>
            <param name="localPath">The local path of the directory whose resources to return, or an empty string to represent the root level.</param>
            <returns>An array containing the user resources in the specified directory or a subdirectory of it.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.IsUserResource(System.String)">
            <summary>
            Returns a value indicating whether the specified local path corresponds to a user resource in this library.
            </summary>
            <param name="localPath">The local path to check.</param>
            <returns>true if the specified local path matches that of a user resource in this library; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetUserResource(System.String)">
            <summary>
            Retrieves a UserResource from this library from its local path.
            </summary>
            <param name="localPath">The full local path of the UserResource instance to retrieve.</param>
            <returns>The UserResource with the given local path if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetUserResource(Demo3D.Visuals.UserResourceReference)">
            <summary>
            Retrieves a UserResource from this library using a UserResourceReference.
            </summary>
            <param name="userResourceReference">The UserResourceReference of the UserResource instance to retrieve.</param>
            <returns>The UserResource with the given UserResourceReference if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetRelativePath(Demo3D.Visuals.UserResource,System.String)">
            <summary>
            Gets the local path of a UserResource instance relative to a specific directory.
            </summary>
            <param name="userResource">The UserResource</param>
            <param name="localPath">The local path of the directory.</param>
            <returns>The local path of the specified UserResource instance relative to the specified directory.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.IsUnique(System.String)">
            <summary>
            Indicates whether a given local path is unique in this library.
            </summary>
            <param name="localPath">The local path to check for uniqueness.</param>
            <returns>true if no UserResource objects or directories have this path; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.RenameDirectory(System.String,System.String)">
            <summary>
            Renames a directory.
            </summary>
            <param name="oldPath">The full local path of the directory.</param>
            <param name="newName">The new name (not full path) of the directory.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.RenameUserResource(System.String,System.String)">
            <summary>
            Renames a UserResource by modifying its LocalPath.
            </summary>
            <param name="oldPath">The full local path of the UserResource.</param>
            <param name="newName">The new name (not full path) for the UserResource.</param>
            <returns>The instance of UserResource that was renamed.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.DeleteDirectory(System.String)">
            <summary>
            Deletes the specified directory.
            </summary>
            <param name="localPath">The full local path of the directory to delete.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.DeleteUserResource(System.String)">
            <summary>
            Deletes the UserResource with the specified path.
            </summary>
            <param name="localPath">The full local path of the UserResource to delete.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.DeleteUserResource(Demo3D.Visuals.UserResource)">
            <summary>
            Deletes the specified UserResource instance.
            </summary>
            <param name="userResource">The instance of UserResource to remove from this library.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetDirectoryPersistence(System.String)">
            <summary>
            Gets the persistence setting for a directory.
            </summary>
            <param name="localPath">The full local path of the directory.</param>
            <returns>A UserResourcePersistence representing the persistence setting for the specified directory.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.SetDirectoryPersistence(System.String,Demo3D.Visuals.UserResourcePersistence)">
            <summary>
            Sets the persistence setting for a directory.
            </summary>
            <param name="localPath">The full local path of the directory.</param>
            <param name="persistence">The new persistence setting for the directory.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.ResolveDirectoryPersistence(System.String)">
            <summary>
            Determines the actual persistence of a directory in this library by tracing up through parent directories if necessary.
            </summary>
            <param name="localPath">The full local path of the directory whose persistence to determine.</param>
            <returns>true if the specified directory is persistent; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.ResolveDirectoryEncrypted(System.String)">
            <summary>
            Determines the actual encryption of a directory in this library by tracing up through parent directories if necessary.
            (Currently, encryption is per resource, not directory, hence we return false)
            </summary>
            <param name="localPath">The full local path of the directory whose encryption to determine.</param>
            <returns>true if the specified directory is encrypted; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.ResolveUserResourcePersistence(Demo3D.Visuals.UserResource)">
            <summary>
            Determines the actual persistence of a UserResource in this library by tracing up through parent directories if necessary.
            </summary>
            <param name="userResource">The UserResource whose persistence to determine.</param>
            <returns>true if the specified UserResource is persistent; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.ResolveUserResourceEncrypted(Demo3D.Visuals.UserResource)">
            <summary>
            Determines the encryption status of a UserResource in this library.
            </summary>
            <param name="userResource">The UserResource whose encryption to determine.</param>
            <returns>true if the specified UserResource is encrypted; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Populates this instance of UserResourceLibrary from a serialized version.
            </summary>
            <param name="entryReader">A SerializerEntryReader for reading the entry corresponding to this object.</param>
            <returns>This instance of UserResourceLibrary.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes this instance of UserResourceLibrary.
            </summary>
            <param name="serializer">An instance of Serializer with which to serialize this UserResourceLibrary.</param>
            <param name="value">The object being serialized.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the UserResource objects in this collection.
            </summary>
            <returns>A System.Collections.Generic.IEnumerator&lt;UserResource&gt; that can be used to iterate through the UserResource objects.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceLibrary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the UserResource objects in this collection.
            </summary>
            <returns>A System.Collections.Generic.IEnumerator that can be used to iterate through the UserResource objects.</returns>
        </member>
        <member name="T:Demo3D.Visuals.UserResourceMergeConstraints">
            <summary>
            Class for handling merging of user resources between a document and a catalog, dealing with all collisions.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceMergeConstraints.GenerateUniqueName(System.String,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Generates a unique name for a user resource path that clashes with an existing one.
            </summary>
            <param name="localPath">The full local path that clashes with an existing one.</param>
            <param name="library">The library in which the path must be unique.</param>
            <returns>The new unique name (not the full path) for the resource.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceMergeConstraints.GenerateUniqueName(System.String,Demo3D.Visuals.UserResourceLibrary,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Generates a unique name for a user resource path that clashes with an existing one.
            </summary>
            <param name="localPath">The full local path that clashes with an existing one.</param>
            <param name="library1">The first library in which the path must be unique.</param>
            <param name="library2">The second library in which the path must be unique.</param>
            <returns>The new unique name (not the full path) for the resource.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceMergeConstraints.GetReferencedResources(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <summary>
            Gets all UserResource objects referenced by a set of visuals from a document.
            </summary>
            <param name="visuals">The set of Visual objects to check for UserResourceReference properties.</param>
            <returns>A list of UserResource objects referenced by the visuals.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceMergeConstraints.GetReferencedResourcesFromCatalog(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual},Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Gets all UserResource objects referenced by a set of visuals from a catalog.
            </summary>
            <param name="visuals">The set of Visual objects to check for UserResourceReference properties.</param>
            <param name="catalogLibrary">The catalog's UserResourceLibrary, with which to look up the referenced UserResource objects.</param>
            <returns>A list of UserResource objects referenced by the visuals.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceMergeConstraints.MergeResourcesToCatalog(System.Collections.ArrayList,Demo3D.Visuals.UserResourceLibrary,Demo3D.Visuals.Document)">
            <summary>
            Merges any user resources referenced by a set of visuals into a catalog's UserResourceLibrary.
            The user is prompted on how to handle collisions.
            </summary>
            <param name="visuals">A collection of Visual objects to check for UserResourceReference properties that reference UserResourceReference objects.</param>
            <param name="catalogLibrary">The catalog's UserResourceLibrary.</param>
            <param name="document">The document that owns the visuals.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceMergeConstraints.MergeResourceToDocument(Demo3D.Visuals.UserResource,Demo3D.Visuals.Document)">
            <summary>
            Merges a specific UserResource into a document's UserResourceLibrary.
            </summary>
            <param name="userResource">The UserResource to copy.</param>
            <param name="document">The document to copy the UserResource into.</param>
            <returns>The new instance of UserResource that was created in the document.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceMergeConstraints.MergeResourcesToDocument(System.Collections.ArrayList,Demo3D.Visuals.UserResourceLibrary,Demo3D.Visuals.Document)">
            <summary>
            Merges any user resources referenced by a set of visuals from a catalog into a document's UserResourceLibrary.
            The user is prompted on how to handle collisions.
            </summary>
            <param name="visuals">A collection of Visual objects to check for UserResourceReference properties that reference UserResourceReference objects.</param>
            <param name="catalogLibrary">The catalog's UserResourceLibrary.</param>
            <param name="document">The document to merge the resources into.</param>
        </member>
        <member name="T:Demo3D.Visuals.UserResourceReference">
            <summary>
            Class representing custom properties of type UserResource.
            </summary>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="UserResource" />
            </example>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceReference.NoneString">
            <summary>
            Used in ToString when we're empty.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceReference.localPath">
            <summary>
            The path of the UserResource object this refers to.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.UserResourceReference.filterExpression">
            <summary>
            The filter expression used in the GUI to display only files with certain file extensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResourceReference.LocalPath">
            <summary>
            Gets or sets the path of the UserResource instance this UserResourceReference references, or null if it doesn't.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResourceReference.FilterExpression">
            <summary>
            Gets or sets the filter expression used in the GUI to display only files with certain file extensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.UserResourceReference.IsNull">
            <summary>
            Gets a value indicating whether the current instance is null (i.e. doesn't refer to a UserResource instance).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceReference.#ctor(Demo3D.Visuals.UserResource)">
            <summary>
            Initializes a new instance of the UserResourceReference class with a UserResource to point to.
            </summary>
            <param name="userResource">The instance of UserResource to reference.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceReference.#ctor">
            <summary>
            Initializes a new instance of the UserResourceReference class.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceReference.op_Implicit(System.String)~Demo3D.Visuals.UserResourceReference">
            <summary>
            Allow implicit conversion of string (path) to UserResourceReference for QuickScript C# code generation.
            </summary>
            <param name="path">Local path to user resource.</param>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceReference.Clear">
            <summary>
            Clears this UserResourceReference so it does not refer to a UserResource.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceReference.ToString">
            <summary>
            Returns a string representation of this instance's value.
            </summary>
            <returns>Either "&lt;None&gt;" or the name of the UserResource this instance refers to.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceReference.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Populates this instance of UserResourceReference from a serialized version.
            </summary>
            <param name="entryReader">A SerializerEntryReader for reading the entry corresponding to this object.</param>
            <returns>This instance of UserResourceReference.</returns>
        </member>
        <member name="M:Demo3D.Visuals.UserResourceReference.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes this instance of UserResourceReference.
            </summary>
            <param name="serializer">An instance of Serializer with which to serialize this UserResourceReference.</param>
            <param name="value">The object being serialized.</param>
        </member>
        <member name="T:Demo3D.Visuals.Vector2PropertyConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DefaultVector2PropertyAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.Angle3Property">
            <summary>
            Angle property where the yaw pitch roll angles are stored in degrees.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Vector3PropertyConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ReadOnlyExpandableObjectConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DefaultVector3PropertyAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.DefaultColorAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualCollisionSpace">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualCollisionSpace.#ctor(Demo3D.Visuals.Document)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualCollisionSpace.Add(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualCollisionSpace.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualCollisionSpace.FindOverlappingConnectors(Demo3D.Visuals.VisualCollisionSpace)">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.SimplePropertyInfo">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.OnCreateVisualDelegate">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualFactory">
            <summary>
            Interface that allows the creation/editing of an type of visual.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualFactory.deserializedName">
            <summary>
            Used to track the legacy 'name' property when deserializing.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualFactory.Thumbnail">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.VisualFactory.ThumbnailIsCustom">
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.VisualFactory.OnCreateVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.VisualFactory.ThumbnailWpf">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.NotifyCreateVisual(Demo3D.Visuals.Visual)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.SetCustomThumbnail(System.Drawing.Image)">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.VisualFactory.isLoad">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.VisualFactory.DefaultVisualRenameRule">
            <summary>
            Default VisualRenameRule for factory
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.Create(Demo3D.Visuals.Document,Demo3D.Visuals.VisualRenameRule,System.Boolean,System.Boolean)">
             <summary>
             Instantiate a new visual from this factory, specifying
             
             a) the VisualRenameRule to use on conflicts
             b) whether to allow "native" creation, if available (*1)
             c) whether to compile scripts, if possible (*2)
            
             (*1) This is used
                - with XmlDocumentVisualFactory and loads in Sim3D and Ultimate
                
             (*2) This is used
                - with VisualFactoryFromFactory when saving out to .3dx format
                - with XmlDocumentVisualFactory and generating the catalog pane images on catalog loading
                  (although I'm not sure why we are not just using the images in the catalog...)
             </summary>
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.Create(Demo3D.Visuals.Document)">
            <summary>
            Instantiate a new visual from this factory, using
            
            a) The default VisualRenameRule for the factory
            b) allowing "native" creation, if available
            c) compiling scripts, if possible
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.Create(Demo3D.Visuals.Document,System.Boolean)">
            <summary>
            Instantiate a new visual from this factory, using
            
            a) The default VisualRenameRule for the factory
            b) whether to allow "native" creation, if available
            c) compiling scripts, if possible
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.Create(Demo3D.Visuals.Document,System.Boolean,System.Boolean)">
            <summary>
            Instantiate a new visual from this factory, using
            
            a) The default VisualRenameRule for the factory
            b) whether to allow "native" creation, if available
            c) whether to compile scripts, if possible
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VisualFactory.Parameters">
            <summary>
            The instance parameters used by the factory to create a visual.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.SetParameters(Demo3D.Visuals.IBuilder,Demo3D.Visuals.IDisplay,System.Object)">
            <summary>
            For XmlDocument factory we need to construct a temporary document which needs the app and display.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.VisualFactory.Resources">
            <summary>
            Shared resources from a catalog or document used to create visual.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.FindReferences(Demo3D.Common.TypeCache,System.Type,System.Collections.ArrayList)">
            <summary>
            This allows resource references to be discovered within factories like
            XmlDocumentVisualFactory. Possibly GeneralVisualFactory should implement
            this too, for the cached Properties that it has. Hmm....
            </summary>
            <param name="typeCache"></param>
            <param name="refType"></param>
            <param name="refs"></param>
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.AddResourcesInUse(Demo3D.Visuals.SharedResources,Demo3D.Visuals.SharedResources)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.ToStringDetailed">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.PostProcess(Demo3D.Common.Serializer)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.VisualFactory.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.VisualFactoryFromVisual">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.VisualFactoryFromVisual.DefaultVisualRenameRule">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualFactoryFromVisual.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.VisualFactoryFromVisual.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.VisualFactoryFromRaw3DVisual">
            <summary>
            Visual factory from a visual created by an imported Raw3D, calls NotifyAfterFileImported to process aspects etc.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.GeneralVisualFactory">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.GeneralVisualFactory.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.GeneralVisualFactory.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.XmlDocumentVisualFactory">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.XmlDocumentVisualFactory.#ctor(Demo3D.Visuals.IBuilder,System.Collections.ArrayList,Demo3D.Visuals.SharedResources)">
            <summary>
            Create a visual factory, but will not apply script constraints. See CreateForCatalog().
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.XmlDocumentVisualFactory.PropertyReference">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.XmlDocumentVisualFactory.HasValidNativeFunction">
            <summary>
            Used in tests to determine if the visual has been optimized correctly.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.XmlDocumentVisualFactory.RemapScriptId(Demo3D.Visuals.IBuilder,System.Guid,System.Guid)">
            <summary>
            This isn't currently used, but may be helpful when attempting to fix D-5858.
            </summary>
            <param name="app"><see cref="T:Demo3D.Visuals.IBuilder" /> application.</param>
            <param name="from">Old <see cref="T:System.Guid" /> for script.</param>
            <param name="to">New <see cref="T:System.Guid" /> for script.</param>
        </member>
        <member name="M:Demo3D.Visuals.XmlDocumentVisualFactory.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.XmlDocumentVisualFactory.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.VisualLocation.TransformToWorldInternal(Microsoft.DirectX.Vector3)">
            <summary>
            This should probably be removed, but it was the safest change to fix D-8380.
            </summary>
            <param name="point">Input <see cref="T:Vector3" />.</param>
            <returns>Transformed <see cref="T:Vector3" />.</returns>
        </member>
        <member name="T:Demo3D.Visuals.VisualList">
            <summary>
            Keep an list of visual references that can be sorted LIFO or FIFO, or
            any other sort order. 
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VisualList.CrossReference(Demo3D.Visuals.Visual,Demo3D.Visuals.VisualList,Demo3D.Visuals.Visual,Demo3D.Visuals.VisualList)">
            <summary>
            Make sure:
            	l1 contains a reference to v2 and
                l2 contains a reference to v1
            NOTE: Nothing happens if any of the arguments are null.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualList.FIFO">
            <summary>Queue</summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualList.LIFO">
            <summary>Stack</summary>
        </member>
        <member name="T:Demo3D.Visuals.VisualList.Entry">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.VisualListConverter">
            <summary>
            Only display 3 digits after the decimal place for doubles.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.ScriptingObject.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.ScriptingObject.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.VisualPropertyReference.HandleSensorVisuals(Demo3D.Visuals.Visual)">
            <summary>
            Bodge for D-2150 - make SensorLogic on Sensors "notify" when changes to BlockingLoads would change "properties", IsBlocked, etc
            </summary>
            <param name="visual"></param>
        </member>
        <member name="T:Demo3D.Visuals.BindableVisualPropertyReference">
            <summary>
            A visual property reference that only allows bindable items to be referenced. Bindable items are
            properties that can be bound to the TagBrowser. Most common are the CustomProperties, but also
            specialised bindable properties such as Conveyor.IsMotorOn or PhotoEye.IsBlocked, etc.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.BindableVisualPropertyReference.AllowedProperties">
            <summary>
            Returns a list of valid properties that can be referenced.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VisualReference.IsSet">
            <summary>
            Does the <see cref="T:Demo3D.Visuals.VisualReference" /> point to a <see cref="P:Demo3D.Visuals.VisualReference.Visual" />?
            <para>
            Note: The only safe use of this is when it returns false, and you know that we are not pointing at anything. If it returns
            true, there is no guarantee that the value from <see cref="P:Demo3D.Visuals.VisualReference.Visual" /> will not be null, since a Garbage
            Collection may have occurred between the two method calls.
            </para>
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VisualReference.IsNull">
            <summary>
            Does the <see cref="T:Demo3D.Visuals.VisualReference" /> not point to a <see cref="P:Demo3D.Visuals.VisualReference.Visual" />?
            <para>
            Note: The only safe use of this is when it returns true, and you know that we are not pointing at anything. If it returns
            false, there is no guarantee that the value from <see cref="P:Demo3D.Visuals.VisualReference.Visual" /> will not be null, since a Garbage
            Collection may have occurred between the two method calls.
            </para>
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VisualReference.IsImmutable">
            <summary>
            Is this VisualReference the singleton stored on the Visual itself or the global singleton for VisualReference.Empty?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VisualReference.Equals(System.Object)">
            <summary>
            <see cref="M:System.Object.Equals(System.Object)" /> implementation to avoid a compiler warning.
            <para>
            NOTE: this implementation techically is wrong, since it doesn't match the <see cref="M:Demo3D.Visuals.VisualReference.op_Equality(Demo3D.Visuals.VisualReference,Demo3D.Visuals.VisualReference)" /> operator.
            This is reference equality of the <see cref="T:Demo3D.Visuals.VisualReference" />, but <see cref="M:Demo3D.Visuals.VisualReference.op_Equality(Demo3D.Visuals.VisualReference,Demo3D.Visuals.VisualReference)" /> checks the embedded <see cref="P:Demo3D.Visuals.VisualReference.Visual" />.
            </para>
            </summary>
            <param name="obj">Object to test against.</param>
            <remarks>
            Commented out code is probably what it should be, but the whole VisualReference equality stuff is
            a black art (due to null being equal to an empty VisualReference).
            </remarks>
            <returns>true if supplied object is considered equal to this object.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.VisualReference.GetHashCode">
            <summary>
            <see cref="M:System.Object.GetHashCode" /> implemention to avoid compiler warning.
            <para>
            This implementation matches the <see cref="M:Demo3D.Visuals.VisualReference.Equals(System.Object)" /> method above.
            </para>
            </summary>
            <returns>A hash code for the current object.</returns>
            <remarks>
            Commented out code is probably what it should be, but the whole VisualReference equality stuff is
            a black art (due to null being <see cref="M:Demo3D.Visuals.VisualReference.op_Equality(Demo3D.Visuals.VisualReference,Demo3D.Visuals.VisualReference)" /> to an empty VisualReference).
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.NamespaceGroupDoc">
            <summary>
            The Demo3D.Visuals namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.NamespaceDoc">
            <summary>
            The Demo3D.Visuals namespace contains functionality for creating and manipulating 
            all visuals in the 3D scene.
            </summary>
            <remarks>
            All classes and methods documented here are intended for use in user scripting.
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.VisualException">
            <summary>
            Exceptions that are related to a particular Visual. When this exception is reported
            in the log message control, clicking its message will select the visual, double
            clicking will bring up the Exception Viewer.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.DescriptorWrapper">
            <summary>
            Provides a reference to a visual through an expression or
            name. Currently supported expressions are "Current" and
            "Attached".
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.UVCoords">
            <summary>
            Defines the texture coordinates for a square. Used for the image and box visuals.
            </summary>
            <remarks>
            UVCoords start at the top left (0,0) and finish at the bottom right (1,1).
            These coordinates can repeat so (-1,-1,1,1) or (0,0,2,2) will tile the texture four times in a 2x2 pattern.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructor for UVCoords given all parameters.
            </summary>
            <param name="u0">The left texture coordinate (defaults to 0).</param>
            <param name="v0">The top texture coordinate (defaults to 0).</param>
            <param name="u1">The right texture coordinate (defaults to 1).</param>
            <param name="v1">The bottom texture coordinate (defaults to 1).</param>
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.#ctor">
            <summary>
            Default constructor for UVCoords given which sets the range to be (0,0) to (1,1).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.Clone">
            <summary>
            Create a cloned copy of the UVCoords.
            </summary>
            <returns>Clone of the UVCoords.</returns>
        </member>
        <member name="P:Demo3D.Visuals.UVCoords.U0">
            <summary>The left texture coordinate (defaults to 0).</summary>
        </member>
        <member name="P:Demo3D.Visuals.UVCoords.V0">
            <summary>The top texture coordinate (defaults to 0).</summary>
        </member>
        <member name="P:Demo3D.Visuals.UVCoords.U1">
            <summary>The right texture coordinate (defaults to 1).</summary>
        </member>
        <member name="P:Demo3D.Visuals.UVCoords.V1">
            <summary>The bottom texture coordinate (defaults to 1).</summary>
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.ToString">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.UVCoords.Vector4">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.op_Equality(Demo3D.Visuals.UVCoords,Demo3D.Visuals.UVCoords)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.op_Inequality(Demo3D.Visuals.UVCoords,Demo3D.Visuals.UVCoords)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.UVCoords.GetHashCode">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualEventNotifier">
            <summary>
            Delegate used for Visual events such as InitializeListeners and ResetListeners.
            </summary>
            <param name="visual">The visual that the event applies to.</param>
        </member>
        <member name="T:Demo3D.Visuals.MatrixUpdateType">
            <summary>
            The enumeration that is supplied to OnMoved events indicating whether it was a direct update to a
            visual's matrix (location and rotation) or whether the update was made by the physics engine.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MatrixUpdateType.PhysicsEngine">
            <summary>
            Update made by the Physics Engine.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MatrixUpdateType.ExplicitlySet">
            <summary>
            Update made in Explicitly (usually in Scripting).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MatrixUpdatedDelegate">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MeshSettings">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.MeshSettings.AddReverseFaces">
            Reverse order where face normal doesn't match vertex normals
        </member>
        <member name="P:Demo3D.Visuals.MeshSettings.WeldVertices">
            Handle broken AutoCAD files
            Should always be true unless there is a real problem. Meshes are broken if this isn't
            called. Their GetAttributeTable() returns null and we get the mesh rendered in a single
            material. - Dave 19-Oct-14        
        </member>
        <member name="T:Demo3D.Visuals.UserScaleDelegate">
            <summary>
            Callback used when importing 3D meshes to help scale them correctly and fix normals.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.UserFlattenHierarchyDelegate">
            <summary>
            Callback used when importing 3D meshes to help flatten the mesh hierarchy.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IAnimationController">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IFrame">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ITexture">
            <summary>
            Interface for Textures. This is an indirection that allows display
            to reallocate the texture after device reset.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.ITexture.Image">
            <summary>
            Convert texture to an image for easy preview.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.IImage">
            <summary>
            Interface for Images. This allows us to wrap the Bitmap class
            with something that we can dispose of, since we need to allocate
            memory when doing a snapshot.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.IImage.ImageReference">
            <summary>
            This image could be disposed behind the scenes, must make a copy of it if not
            used straight away.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.IImage.Image">
            <summary>
            This image is safe to use and won't be disposed.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.StandardMeshType">
            <summary>
            Built-in standard mesh objects.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ILight">
            <summary>
            Interface defining a light in the scene.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.ShadowRenderStyle">
            <summary>
            The style of the Shadows in the Scene.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShadowRenderStyle.None">
            <summary>
            No Shadows.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShadowRenderStyle.Below">
            <summary>
            Shadows projected directly above each object to the plane of the Scene floor. 
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShadowRenderStyle.Planar">
            <summary>
            Shadows projected from each light to the plane of the Scene floor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShadowRenderStyle.Volume">
            <summary>
            Shadows projected from each light to the surfaces of other objects, and finally the Scene floor.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.ShadowRenderStyle.AmbientOcclusion">
            <summary>
            Ambient Occulusion shadowing. Shadows generated as if you were viewing the Scene on an overcast day.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.HorizontalAlign">
            <summary>
            The horizontal alignment of text.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VerticalAlign">
            <summary>
            The vertical alignment of text.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MeshRenderer">
            <summary>
            Allow rendering strategies to be switched as a scene is rendered to make it more
            interactive.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.MatrixMode">
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.MatrixMode.Absolute">
            <summary>
            The matrix for this visual yields world location and rotation
            details directly.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.MatrixMode.Relative">
            <summary>
            The matrix for this visuals yields location and rotation
            details relative to its immediate parent.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VisualContextMenu">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualContextMenu.MenuItem">
            <summary>
            A binding between an item in the context menu and
            all the visual methods that it will invoke if selected
            by the user. If multiple visuals supply items with the
            same label, then the label will only appear once in the
            menu, and the visuals will be connected to that label in
            this Item class.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VisualContextMenu.IInvoke">
            <summary>
            A binding between a Visual instance and one of its available
            context methods. This is like a do-it-yourself delegate, that 
            will let us be flexible in the arguments that can be passed to
            the method. 
            </summary>
            
        </member>
        <member name="T:Demo3D.Visuals.ComponentInfo">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.RenameOnCopy">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.CollectionType">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualProperties">
            <summary>
            Properties owned by a visual that have a type and description.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.VisualProperties.Bools">
            <summary>
            Internal flagset for VisualProperties.bools (BitVector32).
            This reduces storage of common bools to just bits.
            NOTE: These are never serialized out so the order and values can change.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VisualProperties.TransferState">
            <summary>
            An empty TransferState implies TransferStateEnabled=true.
            If TransferState is missing then TransferStateEnabled=false.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VisualProperties.Layer">
            <summary>
            Reference to the layer that the visual is in.
            </summary>
            <remarks>
            Setting the layer automatically invalidates the visual's layer visibility.
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.MatrixUpdatedEventArgs">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.VisualRenameRule">
            <summary>
            How to rename top-level visual(s) being pasted into the model
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Visuals.VisualRenameRule.None">
            <summary>
            Don't rename this visual
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualRenameRule.Preserve">
            <summary>
            Rename this visual only if its name is already taken
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualRenameRule.Force">
            <summary>
            Rename this visual
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VisualRenameRule.PreserveAll">
            <summary>
            Rename this visual and all it's children only if its name is already taken
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.AddResourcesInUseDelegate">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.AttachToVisualDelegate">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.PluginAttribute">
            <summary>
            Attribute used in C# Scripting to indicate that this class should be loaded as a custom plugin.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.MessageChannel">
            <summary>
            Specialized channel that can notify when values have been read.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.IHierarchyImageStringProvider">
            <summary>
            Implement this on an aspect for a visual to override the icon in the Hierarchy window.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.AutoCustomPropertyAttribute">
            <summary>
            Markup types that should be Auto-created for NativeObject(s).
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Visual">
            <summary>
            Abstract class that all 3D objects derive from.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Visual.Bools">
            <summary>
            Internal flagset for VisualProperties.bools (BitVector32).
            This reduces storage of common bools to just bits.
            NOTE: These are never serialized out so the order and values can change.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.BelongsToApplicationDocument">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.Visual.Demo3D#Visuals#IAspectContainer#AspectAdded">
            <summary>
            Raised when an aspect is added to this Visual.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Visual.Demo3D#Visuals#IAspectContainer#AspectRemoved">
            <summary>
            Raised when an aspect is removed from this Visual.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Visual.AspectAdded">
            <summary>
            Raised when an aspect is added to this Visual.
            </summary>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AspectAdded" />
            </example>
        </member>
        <member name="E:Demo3D.Visuals.Visual.AspectRemoved">
            <summary>
            Raised when an aspect is removed from this Visual.
            </summary>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AspectRemoved" />
            </example>
        </member>
        <member name="P:Demo3D.Visuals.Visual.AllAspects">
            <summary>
            Returns all the aspects for this Visual.
            </summary>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AllAspects" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveAspect``1">
            <summary>
            Removes an aspect.
            </summary>
            <typeparam name="T">The type of the aspect to remove.</typeparam>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="RemoveAspect_T" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveAspect(System.Type)">
            <summary>
            Removes an aspect of a given type.
            </summary>
            <param name="type">The type of the aspect to remove.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="RemoveAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddAspect(System.Object)">
            <summary>
            Adds an aspect instance created outside the Visual.
            </summary>
            <param name="aspect">The aspect to add.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AddAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveAspect(System.Object)">
            <summary>
            Removes an aspect instance.
            </summary>
            <param name="aspect">The aspect to add.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="RemoveAspect(object)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddAspect``1(``0)">
            <summary>
            Add an aspect instance.
            </summary>
            <param name="aspect">The aspect to add.</param>
            <typeparam name="T">The type of the aspect to add.</typeparam>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AddAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveAspect``1(``0)">
            <summary>
            Removes an aspect instance.
            </summary>
            <param name="aspect">The aspect to add.</param>
            <typeparam name="T">The type of the aspect to remove.</typeparam>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindCreateAspect``1">
            <summary>
            Finds an aspect if it exists or adds a new one if it doesn't exist.
            </summary>
            <typeparam name="T">The type of the aspect.</typeparam>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindCreateAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindCreateAspect(System.Type)">
            <summary>
            Finds an aspect if it exists or Adds a new one if it doesn't exist.
            </summary>
            <param name="type">The type of the aspect.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindCreateAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindAspect(System.Type)">
            <summary>
            Finds and returns an aspect of a given type.
            </summary>
            <param name="t">The type of the aspect to find.</param>
            <returns>The aspect, or null if not found.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindAspect(Type)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindAspect``1">
            <summary>
            Finds and returns an aspect of a given type.
            </summary>
            <typeparam name="T">The type of the aspect to find.</typeparam>
            <returns>The aspect, or null if not found.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindAspect_T()" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.HasAspect``1">
            <summary>
            Returns whether an aspect of a given type can be found on the visual.
            </summary>
            <typeparam name="T">The type of the aspect to find.</typeparam>
            <returns>True if the aspect can be found, or false if it can't.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="HasAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindAspects``1">
            <summary>
            Find all aspects that can be cast to the given type.
            </summary>
            <typeparam name="T">The type of the aspect to find.</typeparam>
            <returns>All aspects that can be cast as the given type.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindAspects" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindAncestorsAspect``1">
            <summary>
            Find the first aspect of type T on one of the visuals ancestors (parent, grand-parent, etc.).
            </summary>
            <typeparam name="T">The aspect type to look for.</typeparam>
            <returns>The first instance of aspect of type T in the hierarchy above this visual, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindVisualAndAncestorsAspect``1">
            <summary>
            Find the first aspect of type T on this visual or one of its ancestors (parents, grand-parents, etc.).
            </summary>
            <typeparam name="T">The aspect type to look for.</typeparam>
            <returns>The first instance of aspect of type T in the hierarchy of this visual and visual above this visual, or null if not found.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindVisualAndAncestorsAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindAncestorsAspects``1">
            <summary>
            Finds all aspects of type T on any of this visual's ancestors.
            </summary>
            <typeparam name="T">The aspect type to look for.</typeparam>
            <returns>A collection of aspects of type T in the visual tree above this point.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindVisualAndAncestorsAspects``1">
            <summary>
            Finds all aspects of type T on this visual or its ancestors.
            </summary>
            <typeparam name="T">The aspect type to look for.</typeparam>
            <returns>A collection of aspects of type T in the visual tree at this point and above.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindVisualAndAncestorsAspects" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindVisualAndDescendantsAspect``1">
            <summary>
            Find the first aspect of type T on this visual or one of its descendents (children recursively)
            </summary>
            <typeparam name="T">The aspect type to look for.</typeparam>
            <returns>An aspect of type T, or null if none found.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindVisualAndDescendantsAspect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindVisualAndDescendantsAspects``1">
            <summary>
            Find all aspects of type T on this visual or one of its descendents (children recursively)
            </summary>
            <typeparam name="T">The aspect type to look for.</typeparam>
            <returns>A collection of aspects of type T in the visual tree at this point and below.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="FindVisualAndDescendantsAspects" />
            </example>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsDragging">
            <summary>
            Whether the visual is currently being dragged.
            Should probably refactor and replace ControlPoint.IsBeingDragged...
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveFunctionListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.OpenMessageChannel(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetVisualListCustomProperty(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetRoutingTargets">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetRoutingTargetAllocators">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.CreateRoutingTargets">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.CreateRoutingTargetAllocators">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.CurrentRoutingTarget">
            <summary>
            The current destination for this visual (usually a load).
            This can be used by equipment to decide which direction to transfer a load, or it can be ignored.
            It is specific to the equipment processing the load.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.PushRoutingTarget(Demo3D.Visuals.Visual)">
            <summary>
            Push a new routing target onto the stack of routing targets, making this the new current routing target.
            Add this visual to a custom property on the target called "RoutingTargetAllocators".
            This is normally called for loads.
            </summary>
            <param name="target">New routing target for this load.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.PopRoutingTarget">
            <summary>
            Pop a routing target from the current routing target stack, making the next target down the stack the new current routing target.
            Remove this visual from the previous target's custom property called "RoutingTargetAllocators".
            </summary>
            <returns>The routine target from the top of the routing target stack.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.EnableListeningTo">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddMessageListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveMessageListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetMessageListeners">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.SendMessagesAutomaticallyEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.ShouldSendMessageAutomatically">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.HasMessageListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddMessageListener(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveMessageListener(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SendMessage(System.String,Demo3D.Visuals.ScriptingObject)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SendMessage(Demo3D.Script.ScriptThread,System.String,Demo3D.Visuals.ScriptingObject)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ForwardMessage(Demo3D.Visuals.ScriptingObject)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SendTo(Demo3D.Script.ScriptThread,Demo3D.Visuals.ScriptingObject,Demo3D.Visuals.VisualList)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.TopFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.BottomFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.FrontFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.BackFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.LeftFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.RightFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.AlignToFloorAllowed">
            <summary>
            Used to disable AlignToFloor from the context menu
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MenuSitOnFloor">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AlignToFloor(Demo3D.Visuals.Visual)">
            <summary>
            Align the mesh bounding box of the Visual to the specified FloorVisual.
            Pass 'null' or the SceneVisual to align to the default FloorVisual of the Scene.
            </summary>
            <param name="floor">FloorVisual to align to (or null for SceneVisual.DefaultFloor).</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AlignToFloor" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AlignToFloor">
            <summary>
            Align the mesh bounding box of the Visual to the default FloorVisual of the Scene.
            </summary>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AlignToFloor2" />
            </example>
        </member>
        <member name="P:Demo3D.Visuals.Visual.SetInitialPositionAllowed">
            <summary>
            Used to disable SetInitialPosition from the context menu
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MenuSetInitialPosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RecalculateConnections">
            <summary>
            Attach or detach connectors and accessories to or from valid connections on this visual and all children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldMinimumY">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.BoundingBoxOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.PhysicsBoundingBoxOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FrontFaceOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.BackFaceOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.TopFaceOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.BottomFaceOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.LeftFaceOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RightFaceOf(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.FrontWorldFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.BackWorldFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.TopWorldFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.BottomWorldFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.LeftWorldFace">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.RightWorldFace">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.DriveConstraint(System.String,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveFaceTo(Microsoft.DirectX.Vector3,Demo3D.Visuals.VisualLocation,Demo3D.Visuals.VisualLocation,System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <summary>
            Move this visual along local vector specified in "axis". Distance to move is the difference between visual locations "face" and "targetFace" projected onto "axis"
            </summary>
            <param name="axis">Vector of movement relative to this visual</param>
            <param name="face"></param>
            <param name="targetFace"></param>
            <param name="offset"></param>
            <param name="speed"></param>
            <param name="waitForMove"></param>
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetTargetLocationFor(Demo3D.Visuals.VisualLocation,Demo3D.Visuals.VisualLocation,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetTargetLocationFor(Microsoft.DirectX.Vector3,Demo3D.Visuals.VisualLocation,Demo3D.Visuals.VisualLocation,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveFaceTo(Demo3D.Visuals.VisualLocation,Demo3D.Visuals.VisualLocation,System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveToInitial(Microsoft.DirectX.Vector3,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveToIX(System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveToIY(System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveToIZ(System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveXTo(Demo3D.Visuals.VisualLocation,Demo3D.Visuals.VisualLocation,System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveYTo(Demo3D.Visuals.VisualLocation,Demo3D.Visuals.VisualLocation,System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveZTo(Demo3D.Visuals.VisualLocation,Demo3D.Visuals.VisualLocation,System.Double,Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveToInitial(Demo3D.Visuals.SpeedProfile,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Child(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyLoaded">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyUnloaded">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.IsA(System.Type)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.HasCustomProperty(System.String)">
            <summary>
            Determines whether a custom property has been defined or not.
            </summary>
            <param name="propertyName">The name of the custom property.</param>
            <returns>true if the custom property has been defined, otherwise false.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="HasCustomProperty" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.HasProperty(System.String)">
            <summary>
            Look up the property as a custom property, and if it is not, look up the property using reflection.
            <para>
            NOTE: There is a large performance penalty for this if the property is not a custom property,
            use <see cref="M:Demo3D.Visuals.Visual.HasCustomProperty(System.String)" /> for custom properties.
            </para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.InverseKinematicsLink">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveIKImmediate(Microsoft.DirectX.Vector3,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.CanConnectTo(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindFirstConnector(System.Predicate{Demo3D.Visuals.Connector})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FilteredConnectors(System.Predicate{Demo3D.Visuals.Connector})">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.AllConnectors">
            <summary>Gets all connectors.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.AllConnectables">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnNotifyConnect(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnNotifyDisconnect(Demo3D.Visuals.Connector,Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemapUserResource(System.String,System.String)">
            <summary>
            Updates all references to a specific user resource in this Visual and its children to reference another user resource.
            </summary>
            <param name="fromPath">The path of the user resource to update references to.</param>
            <param name="toPath">The new path to update the references with.</param>
        </member>
        <member name="P:Demo3D.Visuals.Visual.HasChildren">
            <summary>
            Determine if this Visual has any children or not.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.HasNextSibling">
            <summary>
            Determine if this Visual has any siblings or not.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Children">
            <summary>
            Return the collection of child Visuals.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FilteredChildren(System.Predicate{Demo3D.Visuals.Visual})">
            <summary>
            Return the collection of child Visuals that match the given predicate.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Ancestors">
            <summary>
            Return all ancestor visuals above this point in the Visual hierarchy.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.VisualAndAncestors">
            <summary>
            Return all ancestor visuals above this point in the Visual hierarchy, including the Visual itself.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Descendants">
            <summary>
            Return all visuals below this point in the Visual hierarchy .
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.VisualAndDescendants">
            <summary>
            Return all visuals below this point in the Visual hierarchy including the Visual itself.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.DescendantsDepthFirst">
            <summary>
            Return all visuals below this point in the Visual hierarchy .
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FilteredDescendants(System.Predicate{Demo3D.Visuals.Visual})">
            <summary>
            Return all visuals below this point in the Visual hierarchy that match the given predicate.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindBindableItem(System.String)">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.Frame">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.DragPlane">
            <summary>
            The plane that the visual is constrained to when dragging. Default is Empty (no constraint), meaning that
            it will move in the XZ plane (or Y* plane if Y or Shift is held down).
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyMaterialsUpdated">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddResourcesInUse(Demo3D.Visuals.SharedResources,Demo3D.Visuals.SharedResources)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddReferencedScript(Demo3D.Visuals.ScriptKey,Demo3D.Visuals.ScriptContainerLibrary,Demo3D.Visuals.ScriptContainerLibrary)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AttachToProperties">
            <summary>
            This is called upon construction and deserialization. Override
            it if you need to add any context information into the properties
            of this visual. For example, ControllerScript properties need
            a reference to the visual's document.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.CanAttachTo(Demo3D.Visuals.IVisualAccessory,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetVisualTypes(System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetPropertiesType(System.Type)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnAfterParentPropertyUpdated">
            <summary>Occurs after a property of the parent visual is updated.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnAfterPropertyUpdated">
            <summary>Occurs after a property of the visual is updated.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnAfterSubscribedPropertyUpdated">
            <summary>Occurs after a property of a visual that has this visual in its PropertyUpdatedSubscribers list is updated.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnBeforeParentPropertyUpdated">
            <summary>Occurs before a property of the parent visual is updated.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnBeforePropertyUpdated">
            <summary>Occurs before a property of the visual is updated.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnCustomPropertyUpdated">
            <summary>Occurs after a custom property of the visual is updated.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnCustomPropertyRenamed">
            <summary>Occurs after a custom property of the visual is renamed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnInitialize">
            <summary>Occurs when Play is pressed at time 0.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnPreInitialize">
            <summary>Occurs before OnInitialize is called. The OnPreInitialize is called for every visual in one pass. Then a second pass calls OnInitialize for every visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnReset">
            <summary>Occurs when Reset is pressed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnShortcut">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Owned.OnShortcut.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnKey">
            <summary>Occurs when a key is pressed or released and this visual is selected.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnKeyPress">
            <summary>Occurs when a key is pressed and this visual is selected.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnMessage">
            <summary>Occurs when a message is sent from another visual's MessageListeners list.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnExperimentFinished">
            <summary>Occurs at the end of each experiment. This allows finalization of any data collection, for example.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnExperimentStarted">
            <summary>Occurs at the start of each experiment. This allows for initialization of any data collection, for example.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnExperimentPreInitialize">
            <summary>Occurs at the before each experiment starts running but after the current experiment row variables have been set. This allows initialization of the model to be done before OnInitialize has been called.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.NativeTypeName">
            <summary>The namespace and class name to instantiate for this Visual, e.g. Demo3D.Components.Component (in this case Demo3D.Components.dll will be loaded to try to find the class)</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.HideAdvancedProperties">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;Owned.HideAdvancedProperties.Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.SimpleProperties">
            <summary>Enter a non-empty name for each property that should be shown in the Simple Properties view.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.UserVars">
            <summary>A dictionary of user key value pairs that can be used to store any custom data about the visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.UserData">
            <summary>A string that can be used to store any custom data about the visual. This is passed to the WebGL and VR renderers to be used in remote applications.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnAnimatorEvent">
            <summary>Occurs when the visual starts to accelerate, cruise, decelerate and stop during a MoveTo or TurnTo command. Note that this event will only be issued if MoveToEventsEnabled is set to True.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnChildAdded">
            <summary>Occurs when a child is parented to this visual after the reparenting has been performed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnChildRemoved">
            <summary>Occurs when a child is unparented from this visual after the reparenting has been performed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnClick">
            <summary>Occurs when the visual is clicked on in demonstration/navigation mode.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnMouseOver">
            <summary>Occurs when the mouse enters the visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnMouseMove">
            <summary>Occurs when the mouse moves over the visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnMouseLeave">
            <summary>Occurs when the mouse moves away from the visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnMouseUp">
            <summary>Occurs when a mouse button is released after being pressed on the visual.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnConnected">
            <summary>Occurs when this visual is connected to another visual</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnDisconnected">
            <summary>Occurs when this visual is disconnected from another visual</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnDragEnd">
            <summary>Occurs when a visual has finished being dragged to a new location.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnDragStart">
            <summary>Occurs when a visual is about to be dragged to a new location.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnExportBindableItem">
            <summary>Occurs when Export is called from the Tag Browser. This allows custom information to be written about each tag in addition to the default data.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnMoved">
            <summary>Occurs when a visual has moved or rotated. NOTE: For fast moving objects like loads this can be a performance hit.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnAnimatorCompleted">
            <summary>Occurs when an animator completes.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnMoveToCompleted">
            <summary>Occurs when a MoveTo or TurnTo has finished.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnParentMoved">
            <summary>Occurs when a parent or parent's parent, etc. has moved or rotated. NOTE: For fast moving objects like loads this can be a performance hit.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnParentUpdated">
            <summary>Occurs when the parent for the visual changes.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnRenderType">
            <summary>Occurs whenever the render status of a visual type is changed. This is usually in response to the user pressing one of the "Show X" buttons on the toolbar; for example, "Show Lights", "Show Support Stands", etc.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnShowDirections">
            <summary>Occurs when the status of the "Show Direction Arrows" configuration is changed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnLoaded">
            <summary>Occurs when the document is loaded.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnUnloaded">
            <summary>Occurs when the document is unloaded</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnVisualAdded">
            <summary>Occurs when this visual is added to the model. The scene's "OnVisualAdded" is also called for each visual that is added.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnVisualRemoved">
            <summary>Occurs when this visual is removed from the model. The scene's "OnVisualRemoved" script is also called whenever any visual is removed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.OnNameChanged">
            <summary>Occurs when this visual's name is changed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Layer">
            <summary>The layer for this object. If (As Parent) it inherits its layer from its parent, which may in turn inherit the layer from its parent, etc.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.SelectParentWhenPicked">
            <summary>If this component is clicked on or is included in a selection rectangle then the parent is selected instead and its properties are shown instead. Once this is set the properties can only be changed from the Project Explorer Window.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialPositionOnReset">
            <summary>Moves the visual back to its initial location and rotation when Reset is pressed.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialParentOnReset">
            <summary>The parent that should be assigned upon reset. This is useful for vehicle-type components that should reset their position to a particular track section, for example. Note this is only applied if InitialPositionOnReset is set to True.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.PropertyUpdatedSubscribers">
            <summary>Visuals that will be notified when any custom property on this visual is updated. Each visual will be notified via its "OnAfterSubscribedPropertyUpdated" script.
&lt;p&gt;
See also:
&lt;ul&gt;
&lt;li&gt;OnAfterSubscribedPropertyUpdated
&lt;/ul&gt;</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.AllowWaitOnMove">
            <summary>When true, allows scripting to wait for the OnMoved event. This is false by default to avoid performance degradation for visuals that move frequently.
&lt;p&gt;
Example scripting:
&lt;pre&gt;
    sender.AllowWaitOnMove = true;
    Wait( sender.OnMoved );
&lt;/pre&gt; </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.VisualRotation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.VisualLocation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.RelativeLocation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.RelativeRotation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.FixToParent">
            <summary>For a load or vehicle this will create a fixed joint between it and its parent unless there is another joint in the way. This should be true for creating composite loads or vehicles or false where there is just a logical connection to the parent, e.g. boxes in a tote.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.MessageListenersEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.ConnectAllowed">
            <summary>A list of visual Types that are allowed to connect to this visual. If empty, then all visuals are allowed to connect, provided they are not specified in the ConnectDisallowed list, and that the connector-specific rules also allow the connection.
&lt;p&gt;
See also:
&lt;ul&gt;
&lt;li&gt;Demo3D.Visuals.Visual.ConnectDisallowed
&lt;li&gt;Demo3D.Visuals.Connector.Allowed
&lt;li&gt;Demo3D.Visuals.Connector.Disallowed
&lt;/ul&gt;


</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.ConnectDisallowed">
            <summary>A list of visual Types that are not allowed to connect to this visual. If a Type appears in both ConnectAllowed and ConnectDisallowed, then ConnectDisallowed takes priority and the connection is not allowed.
&lt;p&gt;
See also:
&lt;ul&gt;
&lt;li&gt;Demo3D.Visuals.Visual.ConnectAllowed
&lt;li&gt;Demo3D.Visuals.Connector.Allowed
&lt;li&gt;Demo3D.Visuals.Connector.Disallowed
&lt;/ul&gt;
</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InputConnectorName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.OutputConnectorName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.Simulator">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.IncludeChildContextMenus">
            <summary>When right clicking on the object should child objects menu items be included. Default is false.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.NewNameExpr">
            <summary>The string used to format the new name of this component if it is copied or added to the project from a catalog. The variable name "ID" will generate a unique number for that type of component in the current project.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.ToolTipExpr">
            <summary>The format string for the tooltip that appears for an object.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.BillOfMaterialsDescriptionExpr">
            <summary>The description of the component as it appears in the bill of materials, e.g. "Driven Roller Module". If this is blank there will be no entry in the bill of materials for this component.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.BillOfMaterialsCodeExpr">
            <summary>The catalog order code of the component as it appears in the bill of materials, e.g. "'XYZ-203-37.TZ1'". If this is blank there will be no entry in the bill of materials for this component.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.BillOfMaterialsCostExpr">
            <summary>The cost of the component as it appears in the bill of materials, e.g. "1595.95".</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Tags">
            <summary>List of names that can be used to provide multiple categories of components in a catalog. The catalog can show only components with tag "Pallets", for example.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Billboard">
            <summary>If true, then the visual will always face the camera. This is useful for text that should always face the user, for example.
&lt;p&gt;
Note that the visual's Rotation property will be set automatically, and so will overwrite any updates made from scripting or from the property grid.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.ControlPointsAllowed">
            <summary>A white list of control points that should be shown and editable.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.ControlPointsDisallowed">
            <summary>A black list of control points that should be hidden and not editable.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.AnimationEnabled">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.MoveToEventsEnabled">
            <summary>If True, then MoveTo, TurnTo will issue events that indicate when the visual has started accelerating, cruising, decelerating and has stopped. 
&lt;p&gt;
When enabled, the events are issued as OnAnimatorEvent. &lt;p&gt;An example function that will handle these events is:
&lt;pre&gt;
function Box_OnAnimatorEvent( sender : Visual, args : AnimatorEventArgs )
{
    switch (args.EventType) {
    case AnimatorEventType.Accelerate:
        print("Accelerating");
        break;
    case AnimatorEventType.Cruise:
        print("Cruising");
        break;
    case AnimatorEventType.Decelerate:
        print("Decelerating");
        break;
    case AnimatorEventType.Stop:
        print("Stopped");
        break;
    }
}
&lt;/pre&gt;
</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.JointLocationOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.JointAngleOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.EnableMoveSimulatorPhysicsChangedCall">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.Visual.DeletedListeners">
            <summary>
            Occurs when the visual is deleted (<see cref="M:Demo3D.Visuals.Visual.Delete" />).
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Visual.InitializeListeners">
            <summary>
            Occurs when the visual is initialized (<see cref="P:Demo3D.Visuals.Visual.OnInitialize" />).
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Visual.ResetListeners">
            <summary>
            Occurs when the visual is reset (<see cref="P:Demo3D.Visuals.Visual.OnReset" />).
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Visual.ControlPointStartDragListeners">
            <summary>
            Occurs when a <see cref="T:Demo3D.Visuals.ControlPoint" /> drag operation is started.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Visual.ControlPointEndDragListeners">
            <summary>
            Occurs when a <see cref="T:Demo3D.Visuals.ControlPoint" /> drag operation is completed.
            </summary>
        </member>
        <member name="E:Demo3D.Visuals.Visual.NameChanged">
            <summary>
            Occurs when visual is named
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.Visual.name">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.props">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.parent">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.firstChild">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.nextSibling">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.prevSibling">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.HasPrivateScript">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ClearScriptCache">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetScripts">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.AllScripts">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.Script">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindClosestScript">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindFunction(Demo3D.Visuals.ScriptReference)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetScriptNativeTypeName(Demo3D.Visuals.ScriptContainer,System.String)">
            <summary>
            Atomically set the Script and NativeTypeName together but only create the NativeObject once.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Evaluate(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Evaluate(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RunNow(System.String,System.Object[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RunNowParams(System.String,System.Object[])">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Visual.SelectionAlgorithm">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.LevelOfDetailAlgorithm">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.LevelOfDetailMinDimension">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.LevelOfDetailDistanceMultiplier">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.VoxelizerThreshold">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Id">
            <summary>
            A unique identifier for this Visual.
            </summary>
            <remarks>
            The Visual.Id is the same between sessions and persists when the Visual is written to disk.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.IsDeleted">
            <summary>
            Determine if the Visual been deleted.
            </summary>
            <returns>true of the Delete() has been called on the Visual, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.#ctor">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.PreserveSimStateOverReparent">
            <summary>
            Used in <see cref="M:Demo3D.Visuals.Visual.ReparentPreservingSimState(Demo3D.Visuals.Visual)" /> to not clear and re-block sensors when moving between conveyors.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.PreservePhysicsOverReparent">
            <summary>
            Used in <see cref="M:Demo3D.Visuals.Visual.ReparentPreservingPhysics(Demo3D.Visuals.Visual)" /> to not create physics bodies while pasting into a document.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ClearSimState">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.SimState">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.MoveSimulator">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.SimulationEnabled">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SimulateLoad(Demo3D.Visuals.Visual)">
            <summary>
            Indicates that this Visual should now be in control of simulating the supplied load.
            </summary>
            <remarks>
            This will only have an effect if the model is running in Planar or Linear physics.
            In Volumetric physics this call will be silently ignored.
            </remarks>
            <param name="load">The visual to be simulated.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReleaseFromSimulationController">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.NativeObject">
            <summary>
            The native C# scripting class instance for this visual
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetNativeObject(System.Object,System.Boolean)">
            <summary>
            Set the native C# scripting class instance for this visual
            </summary>
            <remarks>
            This should generally only be used inside the constructor for a C# scripting object.
            It will set the Visual.NativeObject property and (if autoWire is true) after that point the value
            of any [Auto] fields or properties on the Visual.NativeObject will have been correctly
            initialized
            </remarks>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="SetNativeObject" />
            </example>
            <param name="value">The C# class instance</param>
            <param name="autoWire">If true, wire up all the [Auto] properties/events. Defaults to true.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AutoWire">
            <summary>
            Automatically connect custom properties and events to native object.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AutoUnwire">
            <summary>
            Automatically disconnect events from native object.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AutoUnwireAspect(Demo3D.Visuals.AspectComponentBase,System.Boolean)">
            <summary>
            Automatically disconnect events from native object.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.ConnectorPairs">
            <summary>
            All pairs of connectors from this visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.WireQuickLogicProceduresToEvents">
            <summary>
            Wire all custom properties that end in the word "Logic" the corresponding event if it exists.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Create(Demo3D.Visuals.Document,Demo3D.Visuals.VisualProperties)">
            <summary>
            Create the visual in the document with the correct Properties object (using VisualAttribute or class specific code).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Construct(Demo3D.Visuals.Document,System.Object)">
            <summary>
            Every visual should either override this method or perform the same
            tasks. The main aspects are setting a unique name and setting the document.
            Assign the document first so that the name can be registered correctly.
            The factory is used when inserting this visual into the palette as a template
            for carbon copies of itself. If it's not set, we should still be able to
            create a GeneralVisualFactory, provided that properties have also been set.
            </summary>
            <param name="doc"></param>
            <param name="props"></param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.Construct(Demo3D.Visuals.Document,System.String,System.Object)">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.Visual.MeshChanged">
            <summary>
            Occurs when the mesh of the visual is changed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.CreateMesh">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.CreateMeshDeep">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.CreatePhysicsDeep">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.DestroyPhysicsDeep">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.EnablePhysics">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.EnablePhysics(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.DisablePhysics">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.EnablePhysicsDeep">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.EnablePhysicsDeep(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.DisablePhysicsDeep">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.EnableAnimationDeep">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.DisableAnimationDeep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.PhysicsOwnsMatrix">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.CustomProperties">
            <summary>
            The collection of CustomProperty objects for this Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.CustomizedProps">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.Props">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindCustomProperty(System.String)">
            <summary>
            Find a custom property by name if it exists. Otherwise return null.
            </summary>
            <param name="propertyName">Custom property name to search for.</param>
            <returns>true if propertyName exists as a custom property, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnClick(Demo3D.Visuals.PickInfo)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnMouseOver(Demo3D.Visuals.PickInfo)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnMouseMove(Demo3D.Visuals.PickInfo)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnMouseLeave(Demo3D.Visuals.PickInfo)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnMouseUp(Demo3D.Visuals.PickInfo)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.RepairMatrix">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.PreInitialize">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Initialize">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Reset">
            <summary>
            Set the visual back to its initial state, or at least to a good state.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.Dispose">
            <summary>
            Dispose of this visual, and its children. This visual will be unlinked
            from its parent, so it should be safe to dispose of a visual while it
            is still linked to other visuals. Use Unlink() first if the children are to
            be preserved.
            Geoms and Rigid bodies are also cleaned up. Subclasses that define 
            Joints should destroy them before base.Dispose() is called. Subclasses
            that define ExtraGeoms will need to clean those up manually. 
            
            Example:
            <code>
            public class MyVisual:Visual {
            	PhysicsJoint	    Joint;
            	ArrayList			ExtraGeoms;
            	public override void Dispose() {
            		Joint.Destroy(); // Do this first
            		base.Dispose();
            		display.PhysicsEngine.RemoveExtraGeoms(ExtraGeoms);
            	}
            }
            </code>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnDeleted">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnDeletedDisposedVisual">
            <summary>
            Horrible hack, D-4161 / D-4230 - called when deleting loads on reset, and the visual has already been deleted.
            This makes sure that the visual is *not* in the Scene hiererchy.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.DeleteNotifier">
            <summary>
            A convenient EventQueue notifier function to delete the visual at time 't'.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.WakeUpSurroundingVisuals">
            <summary>
            Wake up any surrounding loads that might have been disabled so they don't remain in midair.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.App">
            <summary>
            The global application object.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Document">
            <summary>
            The document that this Visual belongs to.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Display">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetContextMenuMethodsNoChildren(Demo3D.Visuals.VisualContextMenu,Demo3D.Visuals.ToolMenu)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.DispatchTransfersNow">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.TransferState">
            <summary>
            The current state of transfers in or out of this visual using the Transfer Protocol.
            This is normally set for transfer enabled equipment (not loads).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.TransferStateEnabled">
            <summary>
            Whether this visual supports the Transfer Protocol.
            This is normally set for transfer enabled equipment (not loads).
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.CurrentTransfer">
            <summary>
            Information about the current transfer in progress for this visual using the Transfer Protocol.
            This is normally set for loads.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.CurrentStation">
            <summary>
            The Visual that the load is current at waiting to be ordered.
            Any Visual can be a Station but LoadCreatorVisual the first station set when calling LoadCreatorVisual.OrderLoad().
            This is normally set for loads.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetContextMenuMethods(Demo3D.Visuals.VisualContextMenu,Demo3D.Visuals.ToolMenu)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.Animators">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.CancelMoves">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.CancelAnimators">
            <summary>
            Cancel any animations that are currently in progress.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.AnimatorInProgress">
            <summary>
            Determine if any animations are currently in progress for this Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.HierarchyAnimatorInProgress">
            <summary>
            Determine if any animations are currently in progress for this Visual, or any of its Parents.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.MoveInProgress">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.HierarchyMoveInProgress">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.WaitForMove">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.WaitForAnyEvent(System.Double,System.String[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.WaitForAllEvents(System.Double,System.String[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Rotate(Demo3D.Visuals.Visual,Demo3D.Common.Axis,Demo3D.Visuals.SpeedProfile,Demo3D.Visuals.RotationDirection)">
            <summary>
            Set the visual rotating.
            </summary>
            <param name="targetVisual">The rotation wil be relative to this visuals rotational coordinates.
            (The rotation will not be around this visual, but on the spot, using this visual's axis).</param>
            <param name="axis">The axis around which to rotate.</param>
            <param name="speedProfile">The speed profile to be used to rotate.</param>
            <param name="direction">The direction in which to rotate</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Rotate(Visual, Axis, SpeedProfile, RotationDirection)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Rotate(Demo3D.Visuals.Visual,Demo3D.Common.Axis,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Set the visual rotating.
            </summary>
            <param name="targetVisual">The rotation wil be relative to this visuals rotational coordinates.
            (The rotation will not be around this visual, but on the spot, using this visual's axis).</param>
            <param name="axis">The axis around which to rotate.</param>
            <param name="speedProfile">The speed profile to be used to rotate.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Rotate(Visual, Axis, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Rotate(Demo3D.Common.Axis,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Set the visual rotating.
            </summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="speedProfile">The speed profile to be used to rotate.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Rotate(Axis, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Rotate(Demo3D.Common.Axis,System.Double,System.Double)">
            <summary>
            Set the visual rotating.
            </summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="speed">The top speed to rotate at in degrees per second.</param>
            <param name="acc">The acceleration to be used in degrees per second per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Rotate(Axis, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Rotate(Demo3D.Common.Axis,System.Double)">
            <summary>
            Set the visual rotating.
            </summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="speed">The top speed to rotate at in degrees per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Rotate(Axis, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RotateToImmediate(Demo3D.Common.Axis,System.Double)">
            <summary>
            Rotate immediately around a given local axis to a given angle relative to the visual's initial position.
            </summary>
            <param name="axis">The axis around which to move.</param>
            <param name="degrees">The angle to rotate in degrees.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="RotateToImmediate(Axis, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RotateToLocalX(System.Double,System.Double)">
            <summary>
            Rotate around the local X axis a given amount at a given speed.
            </summary>
            <param name="localXDegrees">The total angle to rotate in degrees.</param>
            <param name="degreesPerSecond">The speed at which to rotate in degrees per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="RotateToLocalX(Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RotateToLocalY(System.Double,System.Double)">
            <summary>
            Rotate around the local Y axis a given amount at a given speed.
            </summary>
            <param name="localYDegrees">The total angle to rotate in degrees.</param>
            <param name="degreesPerSecond">The speed at which to rotate in degrees per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="RotateToLocalY(Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RotateToLocalZ(System.Double,System.Double)">
            <summary>
            Rotate around the local Z axis a given amount at a given speed.
            </summary>
            <param name="localZDegrees">The total angle to rotate in degrees.</param>
            <param name="degreesPerSecond">The speed at which to rotate in degrees per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="RotateToLocalZ(Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Vector3)">
            <summary>
            Move to a new location instantly.
            </summary>
            <param name="worldLocation">The location to move to.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Vector3)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateX(System.Double)">
            <summary>
            Instantly move the visual along the model's X axis by xOffset units
            </summary>
            <param name="xOffset">The distance to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateY(System.Double)">
            <summary>
            Instantly move the visual along the model's Y axis by yOffset units
            </summary>
            <param name="yOffset">The distance to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateZ(System.Double)">
            <summary>
            Instantly move the visual along the model's Z axis by zOffset units
            </summary>
            <param name="zOffset">The distance to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalX(System.Double)">
            <summary>
            Instantly move the visual along its local X axis by xOffset units
            </summary>
            <param name="xOffset">The distance to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalY(System.Double)">
            <summary>
            Instantly move the visual along its local Y axis by yOffset units
            </summary>
            <param name="yOffset">The distance to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalZ(System.Double)">
            <summary>
            Instantly move the visual along its local Z axis by zOffset units
            </summary>
            <param name="zOffset">The distance to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateX(System.Double,System.Double)">
            <summary>
            Move the visual along the model's X axis by xOffset units, at the given speed.
            </summary>
            <param name="xOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateY(System.Double,System.Double)">
            <summary>
            Move the visual along the model's Y axis by yOffset units, at the given speed.
            </summary>
            <param name="yOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateZ(System.Double,System.Double)">
            <summary>
            Move the visual along the model's Z axis by zOffset units, at the given speed.
            </summary>
            <param name="zOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalX(System.Double,System.Double)">
            <summary>
            Move the visual along its local X axis by xOffset units, at the given speed.
            </summary>
            <param name="xOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalY(System.Double,System.Double)">
            <summary>
            Move the visual along its local Y axis by yOffset units, at the given speed.
            </summary>
            <param name="yOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalZ(System.Double,System.Double)">
            <summary>
            Move the visual along its local Z axis by zOffset units, at the given speed.
            </summary>
            <param name="zOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Move the visual along the model's X axis by xOffset units, at the given speed and acceleration
            </summary>
            <param name="xOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
            <param name="acceleration">The acceleration of the visual.</param>
            <param name="deceleration">The deceleration of the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Move the visual along the model's Y axis by yOffset units, at the given speed and acceleration.
            </summary>
            <param name="yOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
            <param name="acceleration">The acceleration of the visual.</param>
            <param name="deceleration">The deceleration of the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateZ(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Move the visual along the model's Z axis by zOffset units, at the given speed and acceleration.
            </summary>
            <param name="zOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
            <param name="acceleration">The acceleration of the visual.</param>
            <param name="deceleration">The deceleration of the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Move the visual along its local X axis by xOffset units, at the given speed and acceleration
            </summary>
            <param name="xOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
            <param name="acceleration">The acceleration of the visual.</param>
            <param name="deceleration">The deceleration of the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Move the visual along its local Y axis by yOffset units, at the given speed and acceleration
            </summary>
            <param name="yOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
            <param name="acceleration">The acceleration of the visual.</param>
            <param name="deceleration">The deceleration of the visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TranslateLocalZ(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Move the visual along its local Z axis by zOffset units, at the given speed and acceleration
            </summary>
            <param name="zOffset">The distance to move the visual.</param>
            <param name="speed">The speed at which to move the visual.</param>
            <param name="acceleration">The acceleration of the visual.</param>
            <param name="deceleration">The deceleration of the visual.</param>
        </member>
        <member name="P:Demo3D.Visuals.Visual.LocalLocation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.LocalX">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.LocalY">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.LocalZ">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.TrackRotationToInitial(Demo3D.Common.Axis)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveAnimator(Demo3D.Visuals.Animator)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.CurrentAnimator">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddAnimator(Demo3D.Visuals.Animator)">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.Visual.AnimatorCompletedListeners">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.Visual.MoveToCompletedListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Microsoft.DirectX.Vector3)">
            <summary>
            Turn to a new yaw pitch roll instantly.
            </summary>
            <param name="worldAnglesRadians">The rotation to turn to,
            relative to the world, in radians.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Vector3)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Turn to a new yaw pitch roll in a fixed time.
            </summary>
            <param name="worldAnglesRadians">The rotation to turn to,
            relative to the world, in radians.</param>
            <param name="duration">The time taken to turn.</param>
            <returns>The duration of the turn.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Vector3, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Demo3D.Common.Axis,System.Double,Demo3D.Visuals.SpeedProfile,Demo3D.Visuals.RotationDirection,Microsoft.DirectX.Vector3)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="axis">The turn will be around this axis (in the targetVisual's coordinate space.)</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speedProfile">The speed profile to be used when turning.</param>
            <param name="direction">The direction in which to rotate.
            The positive clockwise direction is taken to be the clockwise direction when looking 'down' the axis arrow.</param>
            <param name="origin">An offset around which the visual will turn, defined in the visual's coordinate space.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Axis, Double, SpeedProfile, RotationDirection, Vector3)" />
            </example>
            <remarks>
            Using <paramref name="origin" /> currently only works in a very limited number of cases (simulation, kinematic and
            relative to itself, parent or scene - causing the <see cref="T:Demo3D.Visuals.ArcAnimator" /> and not the
            <see cref="T:Demo3D.Visuals.TranslationRotationAnimator" /> to be used - see D-3846).
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Demo3D.Common.Axis,System.Double,Demo3D.Visuals.SpeedProfile,Demo3D.Visuals.RotationDirection)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="axis">The turn will be around this axis (in the targetVisual's coordinate space.)</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speedProfile">The speed profile to be used when turning.</param>
            <param name="direction">The direction in which to rotate.
            The positive clockwise direction is taken to be the clockwise direction when looking 'down' the axis arrow.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Axis, Double, SpeedProfile, RotationDirection)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Demo3D.Common.Axis,System.Double,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="axis">The turn will be around this axis (in the targetVisual's coordinate space.)</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speedProfile">The speed profile to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Axis, Double, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Demo3D.Common.Axis,System.Double,System.Double)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="axis">The turn will be around this axis (in the targetVisual's coordinate space.)</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speed">The speed to be used when turning in degrees per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Axis, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Demo3D.Common.Axis,System.Double,System.Double,System.Double)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="axis">The turn will be around this axis (in the targetVisual's coordinate space.)</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speed">The speed to be used when turning in degrees per second.</param>
            <param name="acc">The acceleration to be used when turning in degrees per second per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Axis, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Demo3D.Common.Axis,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="axis">The turn will be around this axis (in the targetVisual's coordinate space.)</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speed">The speed to be used when turning in degrees per second.</param>
            <param name="acc">The acceleration to be used when turning in degrees per second per second.</param>
            <param name="dec">The deceleration to be used when turning in degrees per second per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Axis, Double, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Common.Axis,System.Double,Demo3D.Visuals.SpeedProfile,Demo3D.Visuals.RotationDirection)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="axis">The turn will be around this axis.</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speedProfile">The speed profile to be used when turning.</param>
            <param name="direction">The direction in which to rotate.
            The positive clockwise direction is taken to be the clockwise direction when looking 'down' the axis arrow.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Axis, Double, SpeedProfile, RotationDirection)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Common.Axis,System.Double,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="axis">The turn will be around this axis.</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speedProfile">The speed profile to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Axis, Double, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Common.Axis,System.Double,System.Double)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="axis">The turn will be around this axis.</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speed">The speed to be used when turning in degrees per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Axis, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Common.Axis,System.Double,System.Double,System.Double)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="axis">The turn will be around this axis.</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speed">The speed to be used when turning in degrees per second.</param>
            <param name="acc">The acceleration to be used when turning in degrees per second per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Axis, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Common.Axis,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Turns to a target rotation.
            </summary>
            <param name="axis">The turn will be around this axis.</param>
            <param name="target">The target rotation in degrees.</param>
            <param name="speed">The speed to be used when turning in degrees per second.</param>
            <param name="acc">The acceleration to be used when turning in degrees per second per second.</param>
            <param name="dec">The deceleration to be used when turning in degrees per second per second.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Axis, Double, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Move to a new location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetLocation">Location to move to relative to the targetVisual's coordinate space.</param>
            <param name="speedProfile">Speed profile to use whilst moving.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Vector3, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Move to a new location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetLocation">Location to move to relative to the targetVisual's coordinate space.</param>
            <param name="speed">Speed to move at.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Vector3, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,System.Double,System.Double)">
            <summary>
            Move to a new location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetLocation">Location to move to relative to the targetVisual's coordinate space.</param>
            <param name="speed">Speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Vector3, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Move to a new location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetLocation">Location to move to relative to the targetVisual's coordinate space.</param>
            <param name="speed">Speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <param name="dec">Deceleration to use</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Vector3, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Vector3,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Move to a new location given a speed profile.
            </summary>
            <param name="worldLocation">The location to move to.</param>
            <param name="speedProfile">The speed profile to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Vector3, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Move to a new location given a speed.
            </summary>
            <param name="worldLocation">The location to move to.</param>
            <param name="speed">The speed to move at.</param>
            <returns>The time taken to move.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Vector3, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Vector3,System.Double,System.Double)">
            <summary>
            Move to a new location given a speed and acceleration.
            </summary>
            <param name="worldLocation">The location to move to.</param>
            <param name="speed">The speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Vector3, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            Move to a new location given a speed, acceleration, and deceleration.
            </summary>
            <param name="worldLocation">The location to move to.</param>
            <param name="speed">The speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <param name="dec">Deceleration to use.</param>
            <returns>Time taken to move.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Vector3, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RelativeInitialLocation(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveToInitialPosition">
            <summary>
            Move to the InitialPosition and InitialRotation.
            </summary>
            <remarks>
            This will set Visual.Location/Rotation to Visual.InitialLocation/Rotation and
            also Visual.Parent to Visual.InitialParentOnReset if set.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Item(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddSimpleProperty(System.String,System.Object,System.String)">
            <summary>
            Add a custom property and also add a PropertyAlias for that new customer property making it appear as a Simple Property.
            </summary>
            <param name="name">Name of custom property to create.</param>
            <param name="val">Initial value of custom property.</param>
            <param name="description">Description of custom property.</param>
            <returns>The newly created custom property object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddSimpleProperty(System.String,System.Type,System.Object,System.String)">
            <summary>
            Add a custom property and also add a PropertyAlias for that new customer property making it appear as a Simple Property.
            </summary>
            <param name="name">Name of custom property to create.</param>
            <param name="type">Type of the custom property value.</param>
            <param name="val">Initial value of custom property.</param>
            <param name="description">Description of custom property.</param>
            <returns>The newly created custom property object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddCustomProperty(System.String,System.Object,System.String)">
            <summary>Add a custom property to the visual. If the custom property already exists, then this call will update its value and description.</summary>
            <param name="name">Name of custom property to create.</param>
            <param name="val">Initial value of custom property.</param>
            <param name="description">Description of the property, shown in the property grid</param>
            <returns>A newly-created or updated CustomProperty object</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AddCustomProperty" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddBindingInterface(Demo3D.Visuals.IBindingInterfaceOwner,System.String,System.Object,System.String,Demo3D.PLC.Comms.AccessRights,System.String,System.String,System.Boolean)">
            <summary>Add a custom property to the visual which. This property is set to be a binding interface using the declared access rights.</summary>
            <param name="owner">Name of custom property to create.</param>
            <param name="name">Name of custom property to create.</param>
            <param name="val">Initial value of custom property.</param>
            <param name="description">Description of the property, shown in the property grid</param>
            <param name="accessRights">Set the access rights of the binding interface</param>
            <param name="prefix">If the visual already has a custom property with the same name this will be used to prefix the name of the property</param>
            <param name="separator">If the visual already has a custom property with the same name this will used to separate the prefix and the name of the separator</param>
            <param name="renameFirstInstance">When true, always rename the custom property.</param>
            <remarks>If both prefix and separator are null, the property will not be renamed.</remarks>
            <returns>A newly-created or updated CustomProperty object</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AddCustomProperty" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindBindingInterface(Demo3D.Visuals.IBindingInterfaceOwner,System.String,System.String,System.String)">
            <summary>Find a binding interface by name if it exists. Otherwise return null.</summary>
            <param name="owner">The owner of the binding interface.</param>
            <param name="name">The name of the binding interface.</param>
            <param name="prefix">The prefix used when adding the binding interface.</param>
            <param name="separator">The separator used when adding the binding interface.</param>
            <returns>Returns a CustomProperty object if found</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveBindingInterface(Demo3D.Visuals.IBindingInterfaceOwner,System.String,System.String,System.String)">
            <summary>Add a custom property to the visual. This property is set to be a binding interface using the declared access rights.</summary>
            <param name="owner">Name of custom property to create.</param>
            <param name="name">Name of custom property to create.</param>
            <param name="prefix">If the visual already has a custom property with the same name this will force the property to have a unique name</param>
            <param name="separator">If the visual already has a custom property with the same name this will force the property to have a unique name</param>
            <returns>A newly-created or updated CustomProperty object</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AddCustomProperty" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddTemporaryProperty(System.String,System.Object,System.String)">
            <summary>
            Create a temporary custom property that won't persistent on disk when saved.
            The property will also be hidden in the user interface.
            </summary>
            <param name="name">Name of custom property to create.</param>
            <param name="val">Initial value of custom property.</param>
            <param name="description">Description of custom property.</param>
            <returns>The newly created custom property object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddTemporaryProperty(System.String,System.Object)">
            <summary>
            Create a temporary custom property that won't persistent on disk when saved.
            The property will also be hidden in the user interface.
            </summary>
            <param name="name">Name of custom property to create.</param>
            <param name="val">Initial value of custom property.</param>
            <returns>The newly created custom property object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddTemporaryProperty(System.String,System.Type,System.Object,System.String)">
            <summary>
            Create a temporary custom property that won't persistent on disk when saved.
            The property will also be hidden in the user interface.
            </summary>
            <param name="name">Name of custom property to create.</param>
            <param name="type">Type of the custom property value.</param>
            <param name="val">Initial value of custom property.</param>
            <param name="description">Description of custom property.</param>
            <returns>The newly created custom property object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddTemporaryProperty(System.String,System.Type,System.Object)">
            <summary>
            Create a temporary custom property that won't persistent on disk when saved.
            The property will also be hidden in the user interface.
            </summary>
            <param name="name">Name of custom property to create.</param>
            <param name="type">Type of the custom property value.</param>
            <param name="val">Initial value of custom property.</param>
            <returns>The newly created custom property object.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddCustomProperty(System.String,System.Type,System.Object,System.String)">
            <summary>
            Add a custom property to the visual. If the custom property already exists, then this call will update its value, type and description.
            <para>
            Note: For most uses, <see cref="M:Demo3D.Visuals.Visual.AddCustomProperty(System.String,System.Object,System.String)" /> or <see cref="M:Demo3D.Visuals.Visual.AddSimpleProperty(System.String,System.Object,System.String)" /> is more suitable,
            because there is no need to pass the type parameter; it is taken automatically from the value. The only exception is if the value passed in is null,
            since we can't extract the type.
            </para>
            </summary>
            <param name="name">Name of the property</param>
            <param name="type">Type of the property</param>
            <param name="val">Value of property</param>
            <param name="description">Description of the property. This will be displayed in the property grid when the property is selected.</param>
            <returns>A newly-created or updated CustomProperty object.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="AddCustomProperty2" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetCustomPropertyValue(System.String)">
            <summary>
            Get the value of a custom property, or null if it doesn't exist.
            </summary>
            <param name="name">Name of custom property to get the value for.</param>
            <returns>The value of the custom property if it exists, otherwise null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetCustomProperty(System.String)">
            <summary>
            Get the container class for a custom property, or null if it doesn't exist.
            </summary>
            <param name="name">Name of custom property to get the container for.</param>
            <returns>The container of the custom property if it exists, otherwise null.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetCustomPropertyValue``1(System.String,``0)">
            <summary>
            Get the value of a custom property, or a defaultValue if it doesn't exist.
            </summary>
            <typeparam name="T">Type of the custom property value.</typeparam>
            <param name="name">Name of custom property to get the value for.</param>
            <param name="defaultValue">Optional default value in the case that the custom property doesn't exist.</param>
            <returns>The value of the custom property if it exists, otherwise defaultValue.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetCustomPropertyValue``1(System.String,``0)">
            <summary>
            Set the value of a custom property or do nothing if it doesn't exist.
            </summary>
            <typeparam name="T">Type of the custom property value.</typeparam>
            <param name="name">Name of custom property to set the value for.</param>
            <param name="value">The value to set the custom property to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.CustomPropertyDefined(System.String)">
            <summary>
            <para><b>DEPRECATED</b>: USE <see cref="M:Demo3D.Visuals.Visual.HasCustomProperty(System.String)" /> INSTEAD.</para>
            Determines whether a custom property has been defined or not.
            </summary>
            <param name="propertyName">The name of the custom property.</param>
            <returns>true if the custom property has been defined, otherwise false.</returns>
            <remarks>Use <see cref="M:Demo3D.Visuals.Visual.HasCustomProperty(System.String)" /> instead.</remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveCustomProperty(System.String)">
            <summary>
            Remove a custom property from the Visual.
            </summary>
            <param name="name">Name of custom property to remove.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddPropertyAlias(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddPropertyAlias(System.String,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemovePropertyAlias(System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.AllCustomProperties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindProperty(System.Object@,System.String,System.ComponentModel.PropertyDescriptor@,System.Boolean,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindProperty(System.Object@,System.String,System.ComponentModel.PropertyDescriptor@)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Visual.Reference">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Visual.CustomPropertyReference">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Visual.PropertyReference">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindReferences(Demo3D.Common.TypeCache,System.Type,System.Collections.ArrayList)">
            <summary>
            Scan this visual for all references of type refType. The default
            behavior is to find references in properties ,
            but a visual may override this method to find indirect references that
            can't be found simply in the property bag for the visual.
            Examples of refType would be MeshReference, ImageReference, ScriptReference.
            </summary>
            <param name="typeCache"></param>
            <param name="refType"></param>
            <param name="refValues"></param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveCachedDescriptor(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetProperty``1(System.String,``0)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetProperty``1(System.String,System.Func{``0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetProperty(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetPropertyDescriptor(System.String,System.ComponentModel.PropertyDescriptor@,System.Object@)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetProperty(System.String,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetProperty(System.String,System.Object,Demo3D.Script.ScriptThread)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.LogForReporting(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Double,System.Double)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Delete">
            <summary>
            Delete this visual. If it is in a <see cref="T:Demo3D.Visuals.Document" />, it is removed from the document as well.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Clone">
            <summary>
            Create a copy of a visual and its children placed in the 
            top level scene.
            </summary>
            <returns>A new visual with the same properties as the original visual.</returns>
            <remarks>
            The parent of the new visual is the Scene, and so may need reparenting.
            The world location of the new visual will be the same as the original,
            so may not be visible until moved.
            </remarks>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Clone" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ToSerializedString">
            <summary>
            Convert a visual to a serialized string. 
            Use Document.CreateVisualFromSerialized to turn it back into a copy of the original visual.
            </summary>
            <returns>A serialized version of the specified visual.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.ToXml">
            <summary>
            Convert a visual to XML. 
            Use Document.CreateVisual to turn it back into a copy of the original visual.
            </summary>
            <returns>An XML Document representing the properties of the Visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ToStream">
            <summary>
            Convert a visual to a stream containing XML. 
            Use Document.CreateVisual to turn it back into a copy of the original visual.
            </summary>
            <returns>A stream representing the properties of the Visual.</returns>
        </member>
        <member name="T:Demo3D.Visuals.Visual.SimpleType">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SimpleTypeToType(Demo3D.Visuals.Document,Demo3D.Visuals.Visual.SimpleType,System.Object@)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SimpleTypeCollectionToType(Demo3D.Visuals.Document,Demo3D.Visuals.Visual.SimpleType,Demo3D.Visuals.CollectionType,System.Object@)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SimpleTypeToUnitType(Demo3D.Visuals.Visual.SimpleType,Demo3D.Utilities.UnitType@)">
            <summary>
            Converts a SimpleType value to its equivalent UnitType value, if there is one.
            </summary>
            <param name="simpleType">The SimpleType value to convert.</param>
            <param name="unitType">The UnitType that is equivalent to the specified SimpleType.</param>
            <returns>true if an equivalent UnitType was found; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SimpleTypeNameToUnitType(System.String,Demo3D.Utilities.UnitType@)">
            <summary>
            Converts a SimpleType value to its equivalent UnitType value, if there is one.
            </summary>
            <param name="simpleTypeName">The name of the SimpleType value to convert.</param>
            <param name="unitType">The UnitType that is equivalent to the specified SimpleType.</param>
            <returns>true if an equivalent UnitType was found; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SwitchDocument(Demo3D.Visuals.Document,Demo3D.Visuals.VisualRenameRule)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Switch this <see cref="T:Demo3D.Visuals.Visual" /> to a new <see cref="P:Demo3D.Visuals.Visual.Document" />, optionally renaming it.
            </summary>
            <param name="newDocument">New <see cref="P:Demo3D.Visuals.Visual.Document" /> to move this <see cref="T:Demo3D.Visuals.Visual" /> to.</param>
            <param name="renameRule">How to rename the visual if required, <see cref="T:Demo3D.Visuals.VisualRenameRule" />.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetUniqueName">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Unregister">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.FullName">
            <summary>
            The full name of this Visual, including the names of all Parent Visual separated by '.' characters.
            </summary>
            <remarks>
            If a Visual is just parented to the SceneVisual then Name is the same as FullName.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Name">
            <summary>
            The name of the Visual.
            </summary>
            <remarks>
            This can be set to any string. All Unicode characters are acceptable.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Description">
            <summary>
            A description of the Visual.
            </summary>
            <remarks>
            This can be set to any string. All Unicode characters are acceptable.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Type">
            <summary>
            A type string for the Visual.
            </summary>
            <remarks>
            This can be set to any string. All Unicode characters are acceptable.
            When adding a Visual to a Catalog or using it in a load creator, this is the text that will be displayed.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RenameChildrenOnCopy">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Configure">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Move connectors, constraint positions of accessories, etc.
            based on a property change.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.ConfigureDeep">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.PropertiesUpdated">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.IsPhysicsDependentOnProperty(System.String)">
            <summary>
            Is property possibly involved with setting up the physics for this Visual?
            Other Visuals can override this to stop physics being destroyed and
            recreated when a property changes, e.g. StopBlade and IsActivated
            
            NOTE: This (and the below) are not the proper way to do this... It controls
            Configure(), CreateMesh() and CreatePhysics() whereas some properties might
            not need to do all of these
            </summary>
            <param name="propertyName">Property name to check</param>
            <returns>true if physics may need rebuilding, false otherwise</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.IsPhysicsDefinitelyDependentOnProperty(System.String)">
            <summary>
            Is property definitely involved with setting up the physics for the visual?
            Other Visuals can override this to make sure physics are recreated when a 
            property changes
            
            NOTE: This (and the above) are not the proper way to do this...
            D-2169 - Currently only used to make sure LoadCreator CongestionZone properties
            changed from the property grid through the "Children" properties do not cause
            the congestion zone to reconfigure (see LoadCreatorVisual.NotifyOnAfterPropertyUpdated)
            </summary>
            <param name="propertyName">Property name to check</param>
            <returns>true if physics definitely need rebuilding, false otherwise</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.PropertiesUpdated(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnBeforePropertyUpdated(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnBeforeParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnAfterParentPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnAfterSubscribedPropertyUpdated(Demo3D.Visuals.Visual,System.String)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.Properties">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetProperties(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnBeforeCustomPropertyUpdated(Demo3D.Utilities.CustomProperty)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnAfterCustomPropertyUpdated(Demo3D.Utilities.CustomProperty)">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Visuals.Visual.oldDependants">
            <summary>
            Storage for the dependants of a visual in simulation when physics is turned off
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Velocity">
            <summary>
            The current linear velocity of the Visual in meters/second.
            </summary>
            <remarks>
            This is generally only meaningful in Volumetric Physics.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.AngularVelocity">
            <summary>
            The current angular velocity of the Visual in radians/second.
            </summary>
            <remarks>
            This is generally only meaningful in Volumetric Physics.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Geom">
            <summary>
            The top-level geometry belonging to the visual's <see cref="P:Demo3D.Visuals.Visual.PhysicsBody" />.
            </summary>
            <remarks>
            This property has been retained because it was public.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.CollisionBody">
            <summary>
            The physics object belonging to the visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.PhysicsBody">
            <summary>
            The physics object belonging to the visual.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RigidBody">
            <summary>
            The rigid body belonging to the visual.
            </summary>
            <remarks>
            Helper property to avoid verbose casting of <see cref="P:Demo3D.Visuals.Visual.PhysicsBody" />.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.Body">
            <summary>
            The rigid body belonging to the visual.
            </summary>
            <remarks>
            Previously the only type of physics body was a rigid body. However, we now support
            multiple types of physics bodies and so this property is somewhat ambiguous. Where
            you don't care about the specific body type you can use <see cref="P:Demo3D.Visuals.Visual.PhysicsBody" />.
            In other cases you can use <see cref="P:Demo3D.Visuals.Visual.RigidBody" /> or <see cref="P:Demo3D.Visuals.Visual.StaticBody" />.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.StaticBody">
            <summary>
            The static body belonging to the visual.
            </summary>
            <remarks>
            Helper property to avoid verbose casting of <see cref="P:Demo3D.Visuals.Visual.PhysicsBody" />.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.KinematicUpdateNeeded">
            <summary>
            Whether the visual's kinematic body should be moved to reflect the visual's transform
            in the next physics timestep.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsKinematic">
            <summary>
            Whether the visual's body is kinematic.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.Kinematic">
            <summary>
            Whether the visual's body is kinematic.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.HasStaticBody">
            <summary>
            Whether the visual's body is static.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsTrigger">
            <summary>
            Whether the visual's body is acting as a sensor.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsKinematicIncludingChildren">
            <summary>
            Whether the visual's body, or any of the descendants of the visual, have bodies that are
            kinematic.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.HasBodyInHierarchy">
            <summary>
            Whether the visual, or any of the descendants of the visual, have a physics body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.HasRigidBodyInHierarchy">
            <summary>
            Whether the visual, or any of the descendants of the visual, have a rigid body.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.BodyOffset">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.ProcessCollision(Demo3D.Visuals.PhysicsCollision,Demo3D.Visuals.Visual,Demo3D.Visuals.PhysicsBody)">
            <summary>
            Called for every collision involving the visual.
            </summary>
            <param name="collision">The collision information.</param>
            <param name="otherVisual">The other visual that the collision involves.</param>
            <param name="otherBody">The other physics body that the collision involves.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.CreatePhysics">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.DestroyPhysics">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.ParentRigidBody">
            <summary>
            Look up through parent hierarchy to find the closest RigidBody, use this 
            as the argument for joints ot to attach vehicles to. Groups and similar
            constructs are skipped as they will never have a rigid body, and so their
            parent rigid body is examined instead.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyRigidBodyChanged">
            <summary>
            The physics engine will call this method whenever a geom's rigid body
            is created or destroyed. It's always post so the value can be used
            directly.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.WakeupPhysics">
            <summary>
            If a deflector geom is moved into a load then wake the load up.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnDragStart">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnDragEnd">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnInteract(Demo3D.Visuals.InteractionInfo)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyStartInteraction(Demo3D.Visuals.InteractionInfo)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyEndInteraction(Demo3D.Visuals.InteractionInfo)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.MatrixMode">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.PhysicsMatrix">
            <summary>
            Bypass the hierarchy to set the physics explicitly in straight conveyor.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.UpdateAnimationController">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Update a visual's matrix and update the skin of any associate mesh.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.SyncMatrixCache">
            <summary>
            Update the 'matrixCache' field based on the current location/rotatiom values.
            D-8948 - Store the decomposed loc/rot from the matrix, *NOT* the matrix 'm', or the cache is invalid
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Matrix">
            <summary>
            The current matrix transform of the Visual local to its Parent Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GoToInitialPosition">
            <summary>
            Set the Location and Rotation of the Visual to be the same as the InitialLocation and InitialRotation.
            </summary>
            <remarks>
            This does not take into account the InitialParentOnReset.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GoToInitialRotation">
            <summary>
            Set the Rotation of the Visual to be the same as the InitialRotation. The Location remains unchanged.
            </summary>
            <remarks>
            This does not take into account the InitialParentOnReset.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetInitialPosition">
            <summary>
            Set InitialLocation to be the current Location and InitialRotation to be the current Rotation.
            </summary>
            <remarks>
            The InitialLocation and InitialRotation are set to the Location and Rotation OnReset if InitialPositionOnReset is true.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetInitialPositionDeep">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialMatrix">
            <summary>
            The InitialLocation and InitialRotation in Matrix form.
            </summary>
            <remarks>
            The InitialLocation and InitialRotation are set to the decomposed values from InitialMatrix OnReset if InitialPositionOnReset is true.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialRotationMatrix">
            <summary>
            The InitialRotation in Matrix form.
            </summary>
            <remarks>
            The InitialRotation is set to the decomposed rotation from InitialMatrix OnReset if InitialPositionOnReset is true.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialLocation">
            <summary>
            The InitialLocation of the Visual in meters from the Origin of the Parent Visual.
            </summary>
            <remarks>
            The Location of the Visual is set to InitialLocation OnReset if InitialPositionOnReset is true.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialRotation">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialRotationRadians">
            <summary>
            The InitialRotation of the Visual in radians relative to the Rotation of Parent Visual.
            </summary>
            <remarks>
            The Rotation of the Visual is set to InitialRotation OnReset if InitialPositionOnReset is true.
            </remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialRotationDegrees">
            <summary>
            The InitialRotation of the Visual in degrees relative to the Rotation of Parent Visual.
            </summary>
            <remarks>
            The Rotation of the Visual is set to InitialRotation OnReset if InitialPositionOnReset is true.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.InvalidateWorldMatrix">
            <summary>
            Invalidate the world matrix for this visual only, do not affect the children. As such, you
            should only use this if you know you are either going to go through all the children anyway,
            or, you absolutely know what you are doing.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.IsMatrixValid(Microsoft.DirectX.Matrix)">
            <summary>
            Will matrix produce NaN?
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetMatrix(Microsoft.DirectX.Matrix)">
            <summary>
            Set the matrix explicitly, forcing physics objects to move.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetMatrixSilently(Microsoft.DirectX.Matrix)">
            <summary>
            Sets the matrix explicitly, forcing physics objects to move, but without executing
            callback functions.
            </summary>
            <param name="m"><see cref="P:Demo3D.Visuals.Visual.Matrix" /> to set.</param>
            <returns>true if the matrix was changed, false otherwise.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Visual.NextMatrixId">
            <summary>
            Every update to every visual matrix gets a new id. This enables "has it moved" caches to work simply.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.MatrixId">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldMatrixId">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.HasMatrixChangedSince(System.UInt64)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.HasWorldMatrixChangedSince(System.UInt64)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.PropagateExplicitMatrixUpdate">
            <summary>
            This method is called internally when the matrix has been updated.
            It will work down through the children changing their matrices.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.InvalidateMatrixFromPhysics">
            <summary>
            Read the matrix from the physics engine, tell child visuals 
            their world matrix is out of date and move child deflectors.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.PropagatePhysicsMatrixUpdate">
            <summary>
            This method is called internally when the matrix has been updated.
            It will work down through the children stopping at other rigid bodies.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnShowDirections(System.Boolean)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyOnRenderType(System.Type,System.Boolean)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.SensorExplicitMatrixUpdate(Demo3D.Visuals.Visual)">
            <summary>
            Handle sensors moving where no animators are running.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.OnParentMatrixUpdated(Demo3D.Visuals.MatrixUpdateType)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.Visual.OnDragStartListeners">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.Visual.OnDragEndListeners">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.Visual.OnMovedListeners">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Visuals.Visual.OnParentMovedListeners">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToInitial(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformFromInitial(Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToWorld(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a local coordinate to a world coordinate.
            </summary>
            <param name="localPos">Local position relative to the Visual.</param>
            <returns>World position relative to the Scene.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToWorldNormal(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a local normal to a world normal.
            </summary>
            <param name="localNormal">Local normal relative to the Visual.</param>
            <returns>World normal relative to the Scene.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToWorldRotationRadians(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a local rotation (in radians) to a world rotation (in radians).
            </summary>
            <param name="localRotationRadians">Local rotation (in radians) relative to the Visual.</param>
            <returns>World rotation (in radians) relative to the Scene.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToWorldRotation(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a local rotation (in radians) to a world rotation (in radians).
            </summary>
            <param name="localRotationRadians">Local rotation (in radians) relative to the Visual.</param>
            <returns>World rotation (in radians) relative to the Scene.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToWorldRotationDegrees(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a local rotation (in radians) to a world rotation (in radians).
            </summary>
            <param name="localRotationRadians">Local rotation (in radians) relative to the Visual.</param>
            <returns>World rotation (in radians) relative to the Scene.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldXAxis">
            <summary>
            The world X-Axis for the visual
            </summary>
            <remarks>Equivalent to <code>TransformToWorldNormal(Vector3.XAxis)</code></remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldYAxis">
            <summary>
            The world Y-Axis for the visual
            </summary>
            <remarks>Equivalent to <code>TransformToWorldNormal(Vector3.YAxis)</code></remarks>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldZAxis">
            <summary>
            The world Z-Axis for the visual
            </summary>
            <remarks>Equivalent to <code>TransformToWorldNormal(Vector3.ZAxis)</code></remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToParent(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a local coordinate to coordinate local to parent.
            </summary>
            <param name="localPos">Local position relative to the Visual.</param>
            <returns>Local position relative to its Parent.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformToParentNormal(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a local normal to normal local to parent
            </summary>
            <param name="localNormal">Local normal relative to the Visual.</param>
            <returns>Local normal relative to its Parent.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformFromWorld(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a world coordinate to a local coordinate
            </summary>
            <param name="worldPos">World position relative to the Scene.</param>
            <returns>Local position relative to the Visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformFromWorldNormal(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a world normal to a local normal
            </summary>
            <param name="worldNormal">World normal relative to the Scene.</param>
            <returns>Local normal relative to the Visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformFromWorldRotationRadians(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a world rotation (in radians) to a local rotation (in radians).
            </summary>
            <param name="worldRotationRadians">World rotation (in radians) relative to the Scene.</param>
            <returns>Local rotation (in radians) relative to the Visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformFromWorldRotation(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a world rotation (in radians) to a local rotation (in radians).
            </summary>
            <param name="worldRotationRadians">World rotation (in radians) relative to the Scene.</param>
            <returns>Local rotation (in radians) relative to the Visual.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformFromWorldRotationDegrees(Microsoft.DirectX.Vector3)">
            <summary>
            Transform a world rotation (in degrees) to a local rotation (in degrees).
            </summary>
            <param name="worldRotationDegrees">World rotation (in degrees) relative to the Scene.</param>
            <returns>Local rotation (in degrees) relative to the Visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ObjectToParentMatrix(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix@)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialWorldMatrix">
            <summary>
            The InitialLocation and InitialRotation of this Visual and all its Parent Visuals in Matrix form.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.InitialWorldLocation">
            <summary>
            The InitialLocation of this Visual and all its Parent Visuals in Matrix form.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldMatrix">
            <summary>
            The Location and Rotation of this Visual in Matrix form.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ObjectToWorldMatrix">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ObjectToParentMatrix(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ParentToObjectMatrix(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ParentToObjectMatrix">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.WorldToObjectMatrix">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationMatrix">
            <summary>
            The rotation of this Visual relative to the Scene in Matrix form.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationMatrix">
            <summary>
            The rotation of this Visual relative to its Parent in Matrix form.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldBoundingBox">
            <summary>
            The world axis aligned bounding box of this Visual
            including the bounding boxes of all the child visuals and their children.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.WorldBoundingBoxOf(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.WorldBoundingBoxExcludingChildrenOf(System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldBoundingBoxExcludingChildren">
            <summary>
            The world axis aligned bounding box of this Visual only (excluding any children).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.CollidesWith(Demo3D.Visuals.Visual)">
            <summary>
            Do the bounding spheres of this and another visual intersect.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.Location">
            <summary>
            The visual's X, Y, and Z coordinates relative to its parent.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.LocationX">
            <summary>
            The visual's X coordinate relative to its parent.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.LocationY">
            <summary>
            The visual's Y coordinate relative to its parent.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.LocationZ">
            <summary>
            The visual's Z coordinate relative to its parent.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldLocation">
            <summary>
            The visual's world X, Y, and Z coordinates relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldLocationX">
            <summary>
            The visual's world X coordinate relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldLocationY">
            <summary>
            The visual's world Y coordinate relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldLocationZ">
            <summary>
            The visual's world Z coordinate relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Rotation">
            <summary>
            The rotation of the Visual (in radians) relative to its Parent Visual.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.RotationRadians" /> or <see cref="P:Demo3D.Visuals.Visual.RotationDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationRadians">
            <summary>
            The rotation of the Visual (in radians) relative to its Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationDegrees">
            <summary>
            The rotation of the Visual (in degrees) relative to ts Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationX">
            <summary>
            The X rotation of the Visual (in radians) relative to its Parent Visual.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.RotationXRadians" /> or <see cref="P:Demo3D.Visuals.Visual.RotationXDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationRadiansX">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationXRadians">
            <summary>
            The X rotation of the Visual (in radians) relative to its Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationDegreesX">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationXDegrees">
            <summary>
            The X rotation of the Visual (in degrees) relative to its Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationY">
            <summary>
            The Y rotation of the Visual (in radians) relative to its Parent Visual.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.RotationYRadians" /> or <see cref="P:Demo3D.Visuals.Visual.RotationYDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationRadiansY">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationYRadians">
            <summary>
            The Y rotation of the Visual (in radians) relative to its Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationDegreesY">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationYDegrees">
            <summary>
            The Y rotation of the Visual (in degrees) relative to its Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationZ">
            <summary>
            The Z rotation of the Visual (in radians) relative to its Parent Visual.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.RotationZRadians" /> or <see cref="P:Demo3D.Visuals.Visual.RotationZDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationRadiansZ">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationZRadians">
            <summary>
            The Z rotation of the Visual (in radians) relative to its Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationDegreesZ">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.RotationZDegrees">
            <summary>
            The Z rotation of the Visual (in degrees) relative to its Parent Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotation">
            <summary>
            The world rotation of the Visual (in radians) relative to the Scene.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.WorldRotationRadians" /> or <see cref="P:Demo3D.Visuals.Visual.WorldRotationDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationRadians">
            <summary>
            The world rotation of the Visual (in radians) relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationDegrees">
            <summary>
            The world rotation of the Visual (in degrees) relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationX">
            <summary>
            The world X rotation of the Visual (in radians) relative to the Scene.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.WorldRotationXRadians" /> or <see cref="P:Demo3D.Visuals.Visual.WorldRotationXDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationRadiansX">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationXRadians">
            <summary>
            The world X rotation of the Visual (in radians) relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationDegreesX">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationXDegrees">
            <summary>
            The world X rotation of the Visual (in degrees) relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationY">
            <summary>
            The world Y rotation of the Visual (in radians) relative to the Scene.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.WorldRotationYRadians" /> or <see cref="P:Demo3D.Visuals.Visual.WorldRotationYDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationRadiansY">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationYRadians">
            <summary>
            The world Y rotation of the Visual (in radians) relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationDegreesY">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationYDegrees">
            <summary>
            The world Y rotation of the Visual (in degrees) relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationZ">
            <summary>
            The world Z rotation of the Visual (in radians) relative to the Scene.
            <para>Use <see cref="P:Demo3D.Visuals.Visual.WorldRotationZRadians" /> or <see cref="P:Demo3D.Visuals.Visual.WorldRotationZDegrees" /> to be explicit.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationRadiansZ">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationZRadians">
            <summary>
            The world Z rotation of the Visual (in radians) relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationDegreesZ">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldRotationZDegrees">
            <summary>
            The world Z rotation of the Visual (in degrees) relative to the Scene.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SetIsStaticDeep(System.Boolean)">
            <summary>
            Set the IsStatic property for this Visual and all children recursively.
            </summary>
            <param name="isStatic">Whether the visual tree should be static or not.</param>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsStatic">
            <summary>
            Can this visual change its Location/Rotation relative to its parent at runtime.
            This is used to improve simulation and graphical performance
            by analyzing what can and can't move during a model run.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsOptimized">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.AreAspectsOnAddedComplete">
            <summary>
            True when InitializeAspects has been called.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsWorldStatic">
            <summary>
            Whether this visual and all its ancestor visuals are Static.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Attached">
            <summary>
            Scripting/Expression support without having to build them in.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.Parent">
            <summary>
            The parent Visual for this Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ChildrenAsArrayInternal">
            <summary>
            We should try not to use this, but use the ChildrenAsList() or the Children IEnumerable, but we have some
            internal uses that we need to call to support scripting.
            </summary>
            <returns>ArrayList of all the Visuals' child visuals</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ChildrenAsArray">
            <summary>
            This is available from scripting, but we are obsoleting it in favour of ChildrenAsList
            </summary>
            <returns>ArrayList of all the Visuals' child visuals</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.ChildrenAsList">
            <summary>
            Return a List&lt;Visual&gt; representing all the children of this visual
            </summary>
            <returns>List&lt;Visual&gt; of all the Visuals' child visuals</returns>
        </member>
        <member name="P:Demo3D.Visuals.Visual.TopParent">
            <summary>
            Get the top level visual, the one which has no parent.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.IsAncestorOf(Demo3D.Visuals.Visual)">
            <summary>
            Is this Visual a parent, grandparent, great grandparent etc. of the
            potentialChild.
            </summary>
            <param name="potentialChild">The potential child visual for this visual.</param>
            <returns>true if potentialChild is a Descendant of this Visual.</returns>
        </member>
        <member name="P:Demo3D.Visuals.Visual.FirstChild">
            <summary>
            The first child visual of this visual, or null if this visual has no children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.NextSibling">
            <summary>
            The next sibling of this visual, or null if this visual has no siblings.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.SortChildren">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SortChildrenAscending``1(System.Func{Demo3D.Visuals.Visual,``0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SortChildrenAscendingDeep``1(System.Func{Demo3D.Visuals.Visual,``0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.SortChildrenDescending``1(System.Func{Demo3D.Visuals.Visual,``0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddChild(Demo3D.Visuals.Visual)">
            <summary>
            Add a visual to the list of children. No matrix adjustments are made.
            </summary>
            <param name="child">Child visual to add</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddChildLinks(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveChild(Demo3D.Visuals.Visual)">
            <summary>
            Remove a visual from the list of children. No matrix adjustments are made.
            </summary>
            <param name="child">Child visual to remove</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveChildLinks(Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Contains(Demo3D.Visuals.Visual)">
            <summary>
            Is the visual contained by the visual tree from this point down?
            </summary>
            <returns>true if the visual is a descendant of this visual, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ContainsChild(Demo3D.Visuals.Visual)">
            <summary>
            Is the child a direct child of the visual.
            </summary>
            <returns>true if the visual is an immediate child of this visual, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReparentWithoutNotification(Demo3D.Visuals.Visual)">
            <summary>
            Backward compatibility function (Some old scripting uses it)
            It is just a forwarding function to Reparent() to make sure that
            existing scripting still compiles. It may cause problems since
            notifications *will* be performed.
            </summary>
            <param name="newParent">New parent of object</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.Reparent(Demo3D.Visuals.Visual)">
            <summary>
            Remove this visual from the current parent's list of children (if current parent is not null),
            and add it to the new parent's list of children (if new parent is not null).
            The visual's matrix is adjusted accordingly, such that its top-level world location and
            orientation is preserved.
            </summary>
            <param name="newParent">The new parent visual for this visual.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReparentLocal(Demo3D.Visuals.Visual)">
            <summary>
            Remove this visual from the current parent's list of children (if current parent is not null),
            and add it to the new parent's list of children (if new parent is not null).
            The visual's matrix IS NOT ADJUSTED, the local matrix will be preserved which may change it's
            world location and orientation, this is needed for Raw movie playback
            </summary>
            <param name="newParent">The new parent visual for this visual.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReparentPreservingSimState(Demo3D.Visuals.Visual)">
            <summary>
            Remove this visual from the current parent's list of children (if current parent is not null),
            and add it to the new parent's list of children (if new parent is not null).
            The visual's matrix is adjusted accordingly, such that its top-level world location and
            orientation is preserved.
            <para>This is currently only used in tracking, see <see cref="M:Demo3D.Visuals.PhysicsObject.UpdateTrackingConveyor(Demo3D.Visuals.ConveyorVisual)" />.</para>
            </summary>
            <param name="newParent">The new parent visual for this visual.</param>
            <remarks>
            This is exactly like <see cref="M:Demo3D.Visuals.Visual.Reparent(Demo3D.Visuals.Visual)" /> except that we don't clear the SimState and re-add the
            visual to the scene, we just clear any current Simulation moves.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReparentPreservingPhysics(Demo3D.Visuals.Visual)">
            <summary>
            Remove this visual from the current parent's list of children (if current parent is not null),
            and add it to the new parent's list of children (if new parent is not null).
            The visual's matrix is adjusted accordingly, such that its top-level world location and
            orientation is preserved.
            <para>This is currently only used in pasting into a document, see <see cref="M:Demo3D.Visuals.Document.AddVisual(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Demo3D.Visuals.VisualRenameRule)" />.</para>
            </summary>
            <param name="newParent">The new parent visual for this visual.</param>
            <remarks>
            This is exactly like <see cref="M:Demo3D.Visuals.Visual.Reparent(Demo3D.Visuals.Visual)" /> except that we don't muck about with the Physics in <see cref="M:Demo3D.Visuals.PhysicsObject.Reparent(Demo3D.Visuals.Visual)" />.
            </remarks>
        </member>
        <member name="T:Demo3D.Visuals.Visual.ParentUpdatedEventNotifier">
            <exclude /> 
        </member>
        <member name="E:Demo3D.Visuals.Visual.ParentUpdatedListeners">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyParentsOfHierarchyChange">
            <summary>
            If parents configuration depends on children then tell the parents that the
            children have changed.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.NotifyChildrenOfHierarchyChange">
            <summary>
            If children configuration depends on parents then tell the children that the
            parents have changed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetChildRigidBodyList(System.Collections.ArrayList)">
            <summary>
            Go down the tree stopping where there is a rigid body.
            </summary>
            <param name="rigidBodyList">The list of rigid bodies that is to be populated.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.Unlink">
            <summary>
            Remove this visual from the object hierarchy, by reparenting children to its
            own parent, and by reparenting itself to null.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindVisualType(System.String)">
            <summary>
            Find all the visuals that have their Type field set to 'type'.
            </summary>
            <param name="type">The type string to match against descendant visual Type properties.</param>
            <returns>A collection of visuals where the type string matches the supplied type parameter.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindType(System.Type)">
            <summary>
            Find all the objects in the <see cref="P:Demo3D.Visuals.Visual.Descendants" /> of type <see cref="T:System.Type" /> (all descendants)
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to find.</param>
            <returns>List of objects that match the <see cref="T:System.Type" /></returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindImmediateType(System.Type)">
            <summary>
            Find all the objects in the <see cref="P:Demo3D.Visuals.Visual.Children" /> of type <see cref="T:System.Type" /> (immediate children only)
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to find.</param>
            <returns>List of objects that match the <see cref="T:System.Type" /></returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindType(System.Type,System.Collections.IList)">
            <summary>
            Find all the objects in the <see cref="P:Demo3D.Visuals.Visual.Descendants" /> of type <see cref="T:System.Type" /> (all descendants)
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to find.</param>
            <param name="objects">The list to add objects that match the <see cref="T:System.Type" /> to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindImmediateType(System.Type,System.Collections.IList)">
            <summary>
            Find all the objects in the <see cref="P:Demo3D.Visuals.Visual.Children" /> of type <see cref="T:System.Type" /> (immediate children only)
            </summary>
            <param name="type">The <see cref="T:System.Type" /> to find.</param>
            <param name="objects">The list to add objects that match the <see cref="T:System.Type" /> to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindFirstOfType(System.Type)">
            <summary>
            Like FindType except it return the first instance of that type.
            </summary>
            <remarks>
            The search include this Visual as well as all descendant visuals.
            </remarks>
            <param name="type">The type of visual to find.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindClosest(System.Type)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindClosest(System.Collections.IList)">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindChild(System.String)">
            <summary>
            Look through children and their children to find the first visual of a given name.
            Breadth first search.
            </summary>
            <param name="name">The name of the descendant visual to search for.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindImmediateChild(System.String)">
            <summary>
            Look through children to find a named visual.
            </summary>
            <param name="name">The name of the immediate child visual to search for.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindImmediateChildren(System.String)">
            <summary>
            Look through children to find all immediate children with a given name.
            </summary>
            <param name="name">The name of the visuals to search for.</param>
            <returns>The list of children matching the specified name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Find(System.String)">
            <summary>
            Look through children and siblings and their children and siblings to find a named visual.
            </summary>
            <remarks>
            Same as FindChild(name).
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindParent(System.Type)">
            <summary>
            Go back up through the parents of visuals to find a particular parent type.
            </summary>
            <param name="type">The type of the parent to search for.</param>
            <returns>The first parent of the supplied type, or null if no ancestor of that type is found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindParent(System.Predicate{Demo3D.Visuals.Visual})">
            <summary>
            Go back up through the parents of visuals to find a particular parent that matches the supplied predicate.
            </summary>
            <param name="filter">The predicate to match the parent visuals with.</param>
            <returns>The first parent that matches the supplied predicate, or null if no ancestor of that matches the predicate.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Stick(Demo3D.Visuals.Visual)">
            <summary>
            Reparents this visual to a specified parents and disables physics.
            This is intended for use with loads, where parent is generally a vehicle or some visual that will be moving the load.
            </summary>
            <param name="parent">The parent to stick this visual to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.StickKinematic(Demo3D.Visuals.Visual)">
            <summary>
            Reparents this visual to a specified parents and sets visual to be kinematic
            This is intended for use with loads, where parent is generally a vehicle or some visual that will be moving the load.
            </summary>
            <param name="parent">The parent to stick this visual to.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Unstick">
            <summary>
            Reparents this (stuck) visual to the scene and restores its physics state.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Freeze">
            <summary>
            Hold the load in one position by making it kinematic.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Unfreeze">
            <summary>
            Release the load in one position by making it dynamic.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.InitializeAspectsDeep(System.Boolean)">
            <summary>
            Pass true to forceOnAdded to call OnAdded for a non-Application document.
            This is done when loading a new document which will become the main app document.
            </summary>
            <param name="forceOnAdded">Force OnAdded to be called for all Aspects regardless of document.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.InitializeAspectsFromIds(Demo3D.Visuals.SerializableObjectLibrary,System.Boolean)">
            <summary>
            Use the ids in aspects.AspectIds to retrieve aspects from the SerializableObjectLibrary and initialize them
            </summary>
            <param name="library"></param>
            <param name="invokeOnAdded"></param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReloadAspects(Demo3D.Visuals.SerializableObjectLibrary,System.Boolean)">
            <summary>
            Remove existing aspects, and them re-add them from SerializableObjectLibrary as the aspect may have changed (ie changed in scripting)
            </summary>
            <param name="library">When not null, added aspects to the library</param>
            <param name="invokeOnAdded">When true, invoke Aspects OnAdded (and OnInitialized when appropriate)</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetReloadableAspects">
            <summary>
            Returns all aspects that need reloading
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveReloadableAspects(System.Collections.Generic.List{Demo3D.Visuals.AspectComponentBase})">
            <summary>
            Removes all reloadable aspects
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.RenderAxis(Demo3D.Visuals.IDisplay)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.layerIsVisible">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.layerIsVisibleValid">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.InvalidateLayerVisibility">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.CalculateLayerVisibility">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.CalculateLayerName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.LayerIsVisible">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Render(Demo3D.Visuals.IDisplay)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RenderWithoutChildren(Demo3D.Visuals.IDisplay)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RenderChildren(Demo3D.Visuals.IDisplay)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RenderShadow(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RenderShadowWithoutChildren(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RenderShadowChildren(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.SelectParentWhenPickedResolved">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <summary>
            Pick this visual or one of its children based on a ray, this is how
            a visual is picked from a mouse click on the screen. This is also used 
            to attach visuals to other visuals by looking up/down in the scene.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.PickWorldFrustum(Microsoft.DirectX.Plane[],System.Collections.ArrayList)">
            <summary>
            Add this visual to 'hits' if it intersect with the supplied frustum which
            is in world coordinates.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.PickExcludingChildrenFromWorldFrustum(Microsoft.DirectX.Plane[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.PickChildrenFromWorldFrustum(Microsoft.DirectX.Plane[],System.Collections.ArrayList)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.PhysicsAxisAlignedBoundingBox">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.BoundingBox">
            <summary>
            Get the bounding box of this visual including all its children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.BoundingBoxExcludingChildren">
            <summary>
            Get the bounding box of the visual excluding children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.MeshBoundingBox">
            <summary>
            Get the bounding box of the mesh for this visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.MeshBoundingSphere">
            <summary>
            Get the bounding sphere for the mesh of this visual.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TransformedBoundingSphere">
            <summary>
            Get the bounding sphere and transform it into the parent coordinate space.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.BoundingSphere">
            <summary>
            Get the bounding sphere of this visual, including its children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.BoundingSphereExcludingChildren">
            <summary>
            Get the bounding sphere of this visual, excluding its children.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddWorldBoundingSphere(Demo3D.Visuals.BSphere@)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddWorldBoundingSphere(Demo3D.Visuals.BBox)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldBoundingSphere">
            <summary>
            Get the bounding sphere of this visual, including its children, in world space relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldBoundingSphereExcludingChildren">
            <summary>
            Get the bounding sphere of this visual, excluding its children, in world space relative to the Scene.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.WorldBoundingBoxUsingSpheres">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.DumpState">
            <summary>
            Output visual state for diagnostics.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.DumpState(System.String)">
            <summary>
            Output visual state for diagnostics.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.DumpState(System.IO.TextWriter,System.Int32)">
            <summary>
            Output visual state for diagnostics.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.DumpPropertyState(System.IO.TextWriter,System.Int32)">
            <summary>
            Output property state for diagnostics. Overridable for subclasses.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.ToString">
            <summary>
            Name of the visual as string.
            </summary>
            <returns>The Name of this visual.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetToolTip(Microsoft.DirectX.Vector3,Demo3D.Visuals.ExprContext)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsCastsShadow">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ShouldRender">
            <summary>
            Only used for special visual types like lights, joints, cameras to override Visible.
            </summary>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.Visual.WriteValue(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReadPostProcess(Demo3D.Common.Serializer)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReadValue(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ReadValue(Demo3D.Common.SerializerEntryReader,Demo3D.Visuals.Visual)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.WriteChildren(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.ClippedNeedsCalculating">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.ShadowClippedNeedsCalculating">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RecalculateClipping">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.IsVisible">
            <summary>
            Determines whether the Visual is currently visible given the state of layers, etc.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.IncludeInSelectAll">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.Selectable">
            <summary>If True, then this object may be selected.</summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Draggable">
            <summary>
            Whether the visual be dragged using the mouse.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.ShowControlPoints">
            <summary>
            Whether the control points for this visual should be rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.ControlPoints">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.ClearControlPoints">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.ConnectorControlPoints">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetBillOfMaterialsDescription">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetBillOfMaterialsCode">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.GetBillOfMaterialsCost">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.Visual.Connectors">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindConnector(System.String)">
            <summary>
            Find a named connector on a conveyor object, e.g. "Start"
            </summary>
            <param name="name">Name of the connector to search for.</param>
            <returns>The connector matching the supplied name, or null if no connector exists with that name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ConnectedVisual(System.String)">
            <summary>
            Find the visual that is attached to the supplied connectorName.
            </summary>
            <param name="connectorName">Name of the connector to search for.</param>
            <returns>The visual connected to the connector matching the supplied name, or null if no connector exists with that name.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddConnector(System.String)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.AddConnector(Demo3D.Visuals.Connector)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.RemoveConnector(System.String)">
            <summary>
            Remove a connector with a certain name.
            </summary>
            <param name="name">Name of the connector to remove.</param>
            <remarks>
            This could create problems if removing the built-in "Start" and "End" connectors for visuals such as conveyors.
            </remarks>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FindCreateConnector(System.String)">
            <summary>
            Find or create a connector of the supplied name.
            </summary>
            <param name="name">The name of the connector to find or create.</param>
            <returns>An existing connector of the supplied name or a new connector if not found.</returns>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ConnectTo(System.String,Demo3D.Visuals.Visual,System.String)">
            <summary>
            Connect the visual to another visual with the corresponding connector names.
            This connection replaces any existing connections on this or the other visual's connector.
            </summary>
            <param name="connectorName">The connector on this visual.</param>
            <param name="other">The other visual to connect to.</param>
            <param name="otherConnectorName">The name of the connector on the other visual to connect to.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="ConnectTo" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.ConnectTo(System.String,Demo3D.Visuals.Visual,System.String,System.Boolean)">
            <summary>
            Connect the visual to another visual with the corresponding connector names.
            This connection replaces any existing connections on this or the other visual's connector,
            unless allowMultiple is true, in which case this connection is added to existing connections.
            </summary>
            <param name="connectorName">The connector on this visual.</param>
            <param name="other">The other visual to connect to.</param>
            <param name="otherConnectorName">The name of the connector on the other visual to connect to.</param>
            <param name="allowMultiple">If true, add connection to existing connections, if false then replace existing connections.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="ConnectTo" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.Disconnect(System.String)">
            <summary>
            Disconnect any connections on the supplied connector name.
            </summary>
            <param name="connectorName">The name of the connector to remove all connections for.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="Disconnect" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FadeToTransparencyDeep(System.Double,System.Double)">
            <summary>
            Animate the transparency of a visual and all its descendants in a given time.
            </summary>
            <param name="transparency">The transparency at the end of the animation.</param>
            <param name="seconds">The number of seconds to animate the transparency over.</param>
        </member>
        <member name="M:Demo3D.Visuals.Visual.FadeToColorDeep(System.Drawing.Color,System.Double)">
            <summary>
            Animate the primary color of a visual and all its descendants in a given time.
            </summary>
            <param name="color">The color at the end of the animation.</param>
            <param name="seconds">The number of seconds to animate the color over.</param>
        </member>
        <member name="P:Demo3D.Visuals.Visual.PhysicsEnabled">
            <summary>
            Whether the physics for the visual is enabled or not.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.PhysicsCollisionMargin">
            <summary>
            The default collision margin for physics collision geometry belonging to the visual's
            <see cref="P:Demo3D.Visuals.Visual.PhysicsBody" />.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.Volume">
            <summary>
            Volume of Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.VolumeDeep">
            <summary>
            Volume of Visual and all its children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.VolumeOfChildren">
            <summary>
            Sum of the volumes of all the children of this Visual. Overridden if the Volume call automatically includes them (e.g. Group)
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.SurfaceArea">
            <summary>
            Surface area of Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.SurfaceAreaDeep">
            <summary>
            Surface area of Visual and all its children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.SurfaceAreaOfChildren">
            <summary>
            Sum of the surface areas of all the children of this Visual. Overridden if the SurfaceArea call automatically includes them (e.g. Group).
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.VertexCount">
            <summary>
            Number of vertices in Mesh for Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.VertexCountDeep">
            <summary>
            Number of vertices in Mesh for Visual and all its children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.VertexCountOfChildren">
            <summary>
            Sum of the number of vertices in Mesh of all the children of this Visual. Overridden if the VertexCount call automatically includes them (e.g. Group)
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.FaceCount">
            <summary>
            Number of faces in Mesh for Visual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.FaceCountDeep">
            <summary>
            Number of faces in Mesh for Visual and all its children.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.Visual.FaceCountOfChildren">
            <summary>
            Sum of the number of faces in Mesh of all the children of this Visual. Overridden if the FaceCount call automatically includes them (e.g. Group)
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.Visual.ClientOwnerId">
            <summary>
            The Guid of the Unity process that has taken ownership of the visual
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MatrixToAlign(Microsoft.DirectX.Matrix,Demo3D.Visuals.BBox,Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MatrixToAlign(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MatrixToAlign(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Matrix)">
            <summary>
            Move to a new matrix location instantly.
            </summary>
            <param name="targetMatrix">The matrix to set the visual WorldMatrix to.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Matrix)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Move to a new matrix location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetMatrix">Location to move to relative to the targetVisual's coordinate space in Matrix form.</param>
            <param name="speed">Speed profile to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Matrix, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,System.Double)">
            <summary>
            Move to a new matrix location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetMatrix">Location to move to relative to the targetVisual's coordinate space in Matrix form.</param>
            <param name="speed">Speed to move at.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Matrix, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,System.Double,System.Double)">
            <summary>
            Move to a new matrix location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetMatrix">Location to move to relative to the targetVisual's coordinate space in Matrix form.</param>
            <param name="speed">Speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Matrix, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,System.Double,System.Double,System.Double)">
            <summary>
            Move to a new matrix location relative to another visual.
            </summary>
            <param name="targetVisual">The MoveTo will be relative to this visual's initial position and coordinate space.
            If the visual to be moved is passed in here the movement will be relative to it's initial position.
            If null is passed in here the MoveTo will be relative to the scene.</param>
            <param name="targetMatrix">Location to move to relative to the targetVisual's coordinate space in Matrix form.</param>
            <param name="speed">Speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <param name="dec">Deceleration to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Visual, Matrix, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Matrix,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Move to a new matrix location using a speed profile.
            </summary>
            <param name="targetMatrix">Target location in Matrix form.</param>
            <param name="speed">Speed profile to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Matrix, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Matrix,System.Double)">
            <summary>
            Move to a new matrix location at a given speed.
            </summary>
            <param name="targetMatrix">Target location in Matrix form.</param>
            <param name="speed">Speed to move at.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Matrix, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Matrix,System.Double,System.Double)">
            <summary>
            Move to a new matrix location at a given speed and acceleration.
            </summary>
            <param name="targetMatrix">Target location in Matrix form.</param>
            <param name="speed">Speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Matrix, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.MoveTo(Microsoft.DirectX.Matrix,System.Double,System.Double,System.Double)">
            <summary>
            Move to a new matrix location at a given speed, acceleration and deceleration.
            </summary>
            <param name="targetMatrix">Target location in Matrix form.</param>
            <param name="speed">Speed to move at.</param>
            <param name="acc">Acceleration to use.</param>
            <param name="dec">Deceleration to use.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="MoveTo(Matrix, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Microsoft.DirectX.Matrix)">
            <summary>
            Immediate Matrix TurnTo
            </summary>
            <param name="targetMatrix">The matrix to turn to.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Matrix)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Main Matrix TurnTo method
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="targetMatrix">The matrix to turn to.</param>
            <param name="speedProfile">The speed profile to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Matrix, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,System.Double)">
            <summary>
            Matrix TurnTo method
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="targetMatrix">The matrix to turn to.</param>
            <param name="speed">The speed to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Matrix, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,System.Double,System.Double)">
            <summary>
            Matrix TurnTo method
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="targetMatrix">The matrix to turn to.</param>
            <param name="speed">The speed to be used when turning.</param>
            <param name="acc">The acceleration to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Matrix, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,System.Double,System.Double,System.Double)">
            <summary>
            Matrix TurnTo method
            </summary>
            <param name="targetVisual">The turn will be in this visual's coordinate space.
            If the visual itself is passed in here it will rotate in the coordinate space of its parent, or the scene if there is no parent.</param>
            <param name="targetMatrix">The matrix to turn to.</param>
            <param name="speed">The speed to be used when turning.</param>
            <param name="acc">The acceleration to be used when turning.</param>
            <param name="dec">The deceleration to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Visual, Matrix, Double, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Microsoft.DirectX.Matrix,Demo3D.Visuals.SpeedProfile)">
            <summary>
            Main Matrix TurnTo method
            </summary>
            <param name="targetMatrix">The matrix to turn to, relative to the origin.</param>
            <param name="speedProfile">The speed profile to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Matrix, SpeedProfile)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Microsoft.DirectX.Matrix,System.Double)">
            <summary>
            Matrix TurnTo method
            </summary>
            <param name="targetMatrix">The matrix to turn to, relative to the origin.</param>
            <param name="speed">The speed to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Matrix, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Microsoft.DirectX.Matrix,System.Double,System.Double)">
            <summary>
            Matrix TurnTo method
            </summary>
            <param name="targetMatrix">The matrix to turn to, relative to the origin.</param>
            <param name="speed">The speed to be used when turning.</param>
            <param name="acc">The acceleration to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Matrix, Double, Double)" />
            </example>
        </member>
        <member name="M:Demo3D.Visuals.Visual.TurnTo(Microsoft.DirectX.Matrix,System.Double,System.Double,System.Double)">
            <summary>
            Matrix TurnTo method
            </summary>
            <param name="targetMatrix">The matrix to turn to, relative to the origin.</param>
            <param name="speed">The speed to be used when turning.</param>
            <param name="acc">The acceleration to be used when turning.</param>
            <param name="dec">The deceleration to be used when turning.</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.Visuals.cs" region="TurnTo(Matrix, Double, Double, Double)" />
            </example>
        </member>
        <member name="T:Demo3D.Visuals.VisualDistanceComparer">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.VisualRearDistanceComparer">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.UnknownPropertyException">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Visuals.Voodoo.Reader">
            # created by voodoo camera tracker - www.digilab.uni-hannover.de
            # Creation date: Fri Sep 25 02:44:09 2009
            # The camera (one line per frame) 
            #
            # Description of the CAHV camera model:
            # -------------
            # (Cx, Cy, Cz)    : CameraPosition [mm]
            # (Ax, Ay, Az)    : RotationAxis2  [unit vector]
            # (Hx, Hy, Hz)    : RotationAxis0 [pel] (including FocalLength, PixelSizeX, and Principal Point offset) 
            # (Vx, Vy, Vz)    : RotationAxis1 [pel] (including FocalLength, PixelSizeY, and Principal Point offset) 
            # (K3, K5)        : Radialdistortion;	K3 [1/(mm)^2]	K5 [1/(mm)^4]
            # (sx, sy)        : PixelSize	[mm/pel]
            # (Width, Height) : ImageSize	[pel]
            # -------------
            # (ppx, ppy)      : Principal Point offset [pel]
            # f               : Focal Length [mm]
            # fov             : Horizontal Field of View [degree] = (2*atan(0.5*Width*sx/f)*180/PI;
            # (H0x, H0y, H0z) : RotationAxis0 [unit vector]
            # (V0x, V0y, V0z) : RotationAxis1 [unit vector]
            # -------------
            # (x, y)          : image coordinates [pel]
            # (X, Y, Z)       : 3D coordinates [mm]
            # -------------
            # Projection of 3D coordinates in the camera image:
            #  [ x' ] =  [ Hx Hy Hz ] [ 1 0 0 -Cx] [ X ]
            #  [ y' ] =  [ Vx Vy Vz ] [ 0 1 0 -Cy] [ Y ]
            #  [ z' ] =  [ Ax Ay Az ] [ 0 0 1 -Cz] [ Z ]
            #                                      [ 1 ]
            # or 
            #  [ x' ] =  [f/sx 0    ppx] [ H0x H0y H0z ] [ 1 0 0 -Cx] [ X ]
            #  [ y' ] =  [0    f/sy ppy] [ V0x V0y V0z ] [ 0 1 0 -Cy] [ Y ]
            #  [ z' ] =  [0    0    1  ] [ Ax  Ay  Az  ] [ 0 0 1 -Cz] [ Z ]
            #                                                         [ 1 ]
            # then x = x'/z' and y = y'/z' , if the origin of the image coordinates is in the center of the image
            # or x = x'/z' + 0.5*(Width-1) and y = y'/z' + 0.5*(Height-1) , if the origin of the image coordinates is in the upper left corner
            # -------------
            # Cx Cy Cz Ax Ay Az Hx Hy Hz Vx Vy Vz K3 K5 sx sy Width Height ppx ppy f fov H0x H0y H0z V0x V0y V0z
            #
            #timeindex 1
            ...
            #
            # 3D Feature Points
            # X		Y		Z
        </member>
        <member name="T:Demo3D.Visuals.Vrml.FieldValue">
            <summary>
            fieldId fieldValue
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Vrml.FieldAlias">
            <summary>
            fieldId IS fieldId
            eventInId IS eventInId
            eventOutId IS eventOutId
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VRML.Writer.defCount">
            ResourceKey(node)-&gt;Name
        </member>
        <member name="F:Demo3D.Visuals.VRML.Writer.meshTextureCoords">
            ITexture-&gt;Name
        </member>
        <member name="F:Demo3D.Visuals.VRML.Writer.startTime">
            Mesh-&gt;float[]
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToQuaternion(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Convert Camera to Quaternion.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.NewIndexedFaceSetNode(SlimDX.Direct3D9.Mesh,System.Int32,Demo3D.Visuals.MeshMaterial)">
            <summary>
            Create an IndexedFaceSet from a mesh and a material index (attr).
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToAxisAngle(Microsoft.DirectX.Vector3)">
            <summary>
            Convert DirectX Euler Angles to VRML Axis Angle.
            </summary>
            <param name="rotation"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.NormalizeFrameTime(System.Double)">
            <summary>
            Return a number between 0.0 and 1.0 for frame time within animation.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToTransparency(System.Drawing.Color)">
            <summary>
            Handle transparent materials.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToFloats(System.Drawing.Color[])">
            <summary>
            Turn an array of colors into an array of floats.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToFloats(System.Drawing.Color)">
            <summary>
            Convert a Vector3 to a list of floats.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToFloats(Microsoft.DirectX.Vector3)">
            <summary>
            Convert a Vector3 to a list of floats.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToFloats(Microsoft.DirectX.Quaternion)">
            <summary>
            Convert a Quaternion to a list of floats.
            http://vrmlworks.crispen.org/eai_faq/QuaternionOperator.java
            see: from_quaternionAxis, from_quaternionAngle
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.ToFloats(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Serilialize an axis angle pairing.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Writer.TextureCoordinates(SlimDX.Direct3D9.Mesh)">
            <summary>
            Read texture coordinates from a Mesh.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VRML.MaterialCollection">
            <summary>
            Helper class to allow comparison of a collection of materials (colors)
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VRML.VRMLExportOptionsWindow">
            <summary>
            Interaction logic for VRMLExportOptionsWindow.xaml
            </summary>
            <summary>
            VRMLExportOptionsWindow
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.VRMLExportOptionsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.CustomVRML2Lexer.mId2(System.Boolean)">
            <summary>
            Exact copy of Id(...) from base class without mIdFirstChar.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.VRML.Reader.sections">
            <summary>
            Customer specific VRML file generated in sections with comment markup.
            (Vic Thompson Company, Texas)
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ScaleChildren(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion)">
            <summary>
            Scale a visual tree.
            This assumes all visuals are groups or imported mesh visuals.
            This also assumes all children are axis aligned.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.GetFieldValue(Demo3D.Visuals.Vrml.Node,System.String)">
            <summary>
            Find a field value by name in a node's body elements.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ToQuaternion(System.Collections.ArrayList)">
            <summary>
            Convert a list floats in Axis-Angle form into a Quaternion.
            http://vrmlworks.crispen.org/eai_faq/QuaternionOperator.java
            see: to_quaternion
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ToQuaternionOld(System.Collections.ArrayList)">
            <summary>
            Convert a list floats in Axis-Angle form into a Matrix (Also Right-Handed to Left-Handed).
            http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToMatrix/index.htm
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ToVector3(System.Collections.ArrayList)">
            <summary>
            Convert a list of floats to a Vector3.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ToVector4(System.Collections.ArrayList)">
            <summary>
            Convert a list of floats to a Vector4.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ToColor(System.Collections.ArrayList)">
            <summary>
            Convert a list of floats to a Color.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ToInt(System.Single)">
            <summary>
            Turn a float between 0.0 and 1.0 into a number between 0 and 255.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.StripQuotesAndUnescape(System.String)">
            <summary>
            Remove double quotes from strings
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VRML.Reader.ProcessValues(System.Object,System.Collections.ArrayList)">
            <summary>
            Flatten single values, arrays or arraylists of values to arraylist of values.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstance.AllVisuals">
            <summary>
            Get all Visuals from hierarachy including itself
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstanceAnalyzer.InstancingLevel">
            <summary>
            Determines how much to instance. 1 for no instancing and 0 for everything to be instanced.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstanceAnalyzer.AddBorder(Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstanceGroup)">
            <summary>
            Debug only method for creating the hierarchy diagram
            </summary>
            <param name="hierarchyInstanceGroup"></param>
        </member>
        <member name="M:Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstanceAnalyzer.GetRandomBrush">
            <summary>
            Debug only method to get random colors
            </summary>
            <returns></returns>
        </member>
        <member name="P:Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstanceGroup.AllVisuals">
            <summary>
            Get all Visuals from every instance
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstanceView">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            HierarchyInstanceView
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.VROptimizer.HierarchyInstancing.HierarchyInstanceView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.PrimitiveBuffer">
            <summary>
            An optimized class for rendering, more light weight than its mesh counterpart.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.PrimitiveBuffer.InitialVertexCount">
            <summary>
            The count of vertices when the vertex buffer was first assigned. Used when exporting raws
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.PrimitiveBuffer.ApplyMaterial(Demo3D.Visuals.Direct3D.D3DDisplay,Demo3D.Visuals.MeshMaterial)">
            <summary>
            Apply the current material to the device
            </summary>
            <param name="display">The D3DDisplay</param>
            <param name="material">The material to apply</param>
            <returns>True if a texture transform is applie</returns>
        </member>
        <member name="T:Demo3D.Visuals.PrimitiveSubset">
            <summary>
            A description of a mesh subset
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.MergeVisualsForOptimizing.GetMeshesToBeMerged(Demo3D.Visuals.IBuilder,System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual})">
            <summary>
            Get a merging collection from a collection of visuals
            </summary>
            <param name="app"></param>
            <param name="visuals"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Visuals.MergeVisualsForOptimizing.CreateMeshBufferFromVisuals(Demo3D.Visuals.Document,Demo3D.Gui.VROptimizer.OptimizeData,System.Threading.CancellationToken,System.IProgress{System.Double})">
            <summary>
            Creates a collection of transparent and opaque buffer containers from all the visuals in the list.
            </summary>
            <param name="document"></param>
            <param name="data"></param>
            <param name="token"></param>
            <param name="progress"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Visuals.WallProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.WallVisual">
            <summary>
            Summary description for WallVisual.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.MeshMaterials">
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.WallVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.InnerMaterial">
            <summary>
            The color and texture of the inner side of the wall.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.OuterMaterial">
            <summary>
            The color and texture of the outer side of the wall.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.SideMaterial">
            <summary>
            The color and texture of the ends of the wall.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.TopMaterial">
            <summary>
            The color and texture of the top and bottom of the wall.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.InnerTextureSize">
            <summary>
            How high and wide the texture is to be tiled on the inner side of the wall. If either is 0 then it means stretch to the SectionSpan or the wall height.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.OuterTextureSize">
            <summary>
            How high and wide the texture is to be tiled on the outer side of the wall. If either is 0 then it means stretch to the SectionSpan or the wall height.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.ShowStartPost">
            <summary>
            Show a square post at the start width depth and width equal to BarrierDepth.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.ShowEndPost">
            <summary>
            Show a square post at the end width depth and width equal to BarrierDepth.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WallVisual.SectionSpan">
            <summary>
            How wide the section is before it repeats.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WebBrowserProperties.Svg">
            <summary>
             INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Visuals.WebBrowserProperties.UpdateSize(System.Int32,System.Int32)">
            <summary>
            Update the width and height together.
            </summary>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="P:Demo3D.Visuals.WebBrowserVisual.Svg">
            <summary>
             INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.WebBrowserVisual.HierarchyImageString">
            <summary>
            Name of the thumbnail used in the hierarchy.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.WebBrowserVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.WebBrowserVisual.Configure">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Visuals.WebBrowserVisual.Url">
            <summary>The web address to display in the web page. If it starts with '~' then the web browser will be redirected to connect to the local Document.Scene.WebServer.Port configured for this model on the localhost.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebBrowserVisual.BrowserWidth">
            <summary>The width of the browser window in pixels.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebBrowserVisual.BrowserHeight">
            <summary>The height of the browser window in pixels.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WebBrowserVisual.RefreshRate">
            <summary>The height of the browser window in pixels.</summary>
        </member>
        <member name="T:Demo3D.Visuals.WedgeProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.WedgeVisual">
            <summary>
            Triangular prism primitive for physics and rendering.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.WedgeVisual.Construct(Demo3D.Visuals.Document,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Props">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.ControlPoints">
            <exclude />
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.MeshMaterials">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.WedgeVisual.CreateMesh(Demo3D.Visuals.ResourceKey)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.SimulationLoadSize">
            <summary>
            Get SimulationLoad dimensions.
            </summary>
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Width">
            <summary>The width of the wedge.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Height">
            <summary>The height of the wedge.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Length">
            <summary>The length of the wedge.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Angle">
            <summary>The angle of the wedge from the bottom to the top right in the X/Y plane. 90 degrees is vertical.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Material">
            <summary>The display material for the wedge mesh.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Color">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Dimensions">
            <summary>The width, height and length of the wedge as a Vector3.</summary>
        </member>
        <member name="P:Demo3D.Visuals.WedgeVisual.Density">
            <summary>The density of the wedge.</summary>
        </member>
        <member name="F:Demo3D.Visuals.XAML.Writer.defCount">
            ResourceKey(node)-&gt;Name
        </member>
        <member name="F:Demo3D.Visuals.XAML.Writer.resources">
            Mesh-&gt;float[]
        </member>
        <member name="M:Demo3D.Visuals.XAML.Writer.WriteDll(System.String)">
            <summary>
            Create a DLL containing a the xaml gzipped and any image textures used.
            http://stackoverflow.com/questions/8634764/build-resource-assemblies-with-assemblybuilder
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.XAML.Writer.ValidXamlNameRegex">
            <summary>
            Valid x:Name values can be used in code behind as described here:
            http://msdn.microsoft.com/en-us/library/cc189028(VS.95).aspx
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.XAML.Writer.NewMeshGeometry3D(SlimDX.Direct3D9.Mesh,Demo3D.Visuals.MeshMaterial[])">
            <summary>
            Create an MeshGeometry3D from a mesh and a set of materials.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.XAML.Writer.TextureCoordinates(SlimDX.Direct3D9.Mesh)">
            <summary>
            Read texture coordinates from a Mesh.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.XAML.MaterialCollection">
            <summary>
            Helper class to allow comparison of a collection of materials (colors)
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.XAML.InvariantCultureUTF8StreamWriter">
            <summary>
            Class to output text to a stream in UTF8 format and cutlure invariant (for floats and doubles).
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.AspectLibraryPlugin.AddAppForUnitTest(Demo3D.Visuals.IBuilder)">
            <summary>
            ONLY USE THIS IN UNIT TESTS
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Demo3D.Plugins.AspectLibraryPlugin.GetAspectLibraryFromResources(System.Type,Demo3D.Visuals.SharedResources[])">
            <summary>
            Get the collection of SystemUnitClasses from the shared resource collection scripts.
            </summary>
            <returns>The collection of SystemUnitClasses in the document or catalog.</returns>
        </member>
        <member name="M:Demo3D.Plugins.AspectLibraryPlugin.GetAspectLibrary(Demo3D.Visuals.SharedResources[])">
            <summary>
            Get the collection of SystemUnitClasses from the shared resource collection scripts.
            </summary>
            <returns>The collection of SystemUnitClasses in the document or catalog.</returns>
        </member>
        <member name="M:Demo3D.Plugins.AspectLibraryPlugin.GetAspectLibrary(System.Type,Demo3D.Visuals.SharedResources[])">
            <summary>
            Get the collection of SystemUnitClasses from the shared resource collection scripts.
            </summary>
            <returns>The collection of SystemUnitClasses in the document or catalog.</returns>
        </member>
        <member name="M:Demo3D.Plugins.AspectLibraryPlugin.AddScriptsNeededFromCatalogs(System.Type,System.Collections.Generic.IEnumerable{Demo3D.Visuals.Catalog},Demo3D.Visuals.Visual,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Add the script assemblies needed to import CADAttributes to the document from the loaded catalogs.
            </summary>
            <param name="baseAspectType"></param>
            <param name="catalogsToSearch"></param>
            <param name="rootVisual"></param>
            <param name="missingClassNames"></param>
            <param name="purge">Whether to purge scripts on a recompile</param>
            <returns>True if the scripts were recompiled but not purged</returns>
        </member>
        <member name="M:Demo3D.Plugins.BenchmarkPlugin.Benchmark_OnStart(System.Object,System.EventArgs)">
            <summary>
            Called when the "start" button is clicked.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.Plugins.BenchmarkPlugin.Benchmark_OnStop(System.Object,System.EventArgs)">
            <summary>
            Called when the "stop" button is clicked.
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.Plugins.BenchmarkPlugin.Finish">
            <summary>
            Called when the benchmark finished with completion.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.BenchmarkPlugin.RunBenchmarks">
            <summary>
            Runs all benchmarks.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.BenchmarkPlugin.RunCurrentBenchmark">
            <summary>
            Runs the current benchmark.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.BenchmarkPlugin.Timer">
            <summary>
            Stopwatch used to time benchmarks.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.BenchmarkPlugin.Benchmark_OnModelStarted">
            <summary>
            Called when the model has reached the start time.
            </summary>
            <remarks>
            It is desirable to have a non-zero start time to allow the hardware to settle into the
            simulation, avoiding large variations to the clock speed caused by turbo-boost or
            thermal throttling.
            </remarks>
        </member>
        <member name="M:Demo3D.Plugins.BenchmarkPlugin.Benchmark_OnModelFinished">
            <summary>
            Called when the model has reached the stop time.
            Sets up the next benchmark and calls <see cref="M:Demo3D.Plugins.BenchmarkPlugin.RunCurrentBenchmark" />.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.Demo3DEnterpriseEditionPlugin.EditionORTMMLite">
            <summary>
            Operator Runtime Tool for MagneMover Lite needs WebConsole for functionality.
            Ideally this would be handled by a plugin but this works for now.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.Emulate3DUltimateEditionPlugin.EditionVirtualDesign">
            <summary>
            Ultimate with Echo
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.Emulate3DUltimateEditionPlugin.EditionEduBundle">
            <summary>
            Education subscription
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.GuiTestServerPlugin">
            <summary>
            Support for external GUI testing frameworks like Ranorex. Most tools and controls are visible
            to these frameworks, but some stuff (like our visuals and some Infragistics bits and pieces) 
            aren't visible. The external testing application can use this service to query for those bits.
            [ Still in development, talking to Ranorex people about discovering more of the Infragistics tools ]
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.ImmediateControl">
            <summary>
            Interaction logic for ImmediateControlWPF.xaml
            </summary>
            <summary>
            ImmediateControl
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.ImmediateControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.LoadCreatorPlugin">
            <summary>
            The LoadCreator plugin supplies a custom editor and a context menu item for adding
            load creators to conveyors.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.LoadCreatorPlugin.InstallGui">
            <summary>
            Install "NewLoadCreator" tool.
            Find the NewLoadCreator tool, enable it and set the Tag such that the ToolClick
            event gets routed to us exclusively.
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.OrderAttribute">
            <summary>
            <para>
            FOR INTERNAL USE ONLY
            </para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Plugins.MeshRendererProfiling">
            <summary>
            <para>
            FOR INTERNAL USE ONLY
            </para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Plugins.MeshRendererProfiling.MeshStats">
            <summary>
            <para>
            FOR INTERNAL USE ONLY
            </para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Plugins.MeshProfilerView">
            <summary>
            Interaction logic for MeshProfilerView.xaml
            </summary>
            <summary>
            MeshProfilerView
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.MeshProfilerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.CustomCSharpPlugin">
            <summary>
            Wrapper for custom native CS plugins. Source file is expected to contain one public class, containing zero or more of the plugin-compatible methods:
            
               public void Install();
               public void Start();
               public void Stop();
               public void Uninstall();
               plugin void DocumentChanged(Document doc);
            
            Expected constructors, tried in this order
            
               public ctor(IBuilder app)
               public ctor()
            
            </summary>
        </member>
        <member name="P:Demo3D.Plugins.CustomCSharpPlugin.Script">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Plugins.CustomCSharpPlugin.NativeAssembly">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Plugins.CustomCSharpPlugin.NativeObject">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Plugins.CustomCSharpPlugin.SourceFolder">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Plugins.CustomCSharpPlugin.ScriptPath">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Plugins.CustomCSharpPluginEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.CustomCSharpPluginEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Plugins.CustomCSharpPluginEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.CustomJsPlugin">
            <summary>
            Wrapper for custom JS (.demo3dscript) plugins. 
            </summary>
        </member>
        <member name="P:Demo3D.Plugins.CustomJsPlugin.Script">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Plugins.CustomPluginLoader">
            <summary>
            Loads custom plugins (*.cs, *.demo3dscript, *.zip) from standard locations (My Documents/Demo3D/scripts, %INSTALLDIR%/scripts).
            Used by WebstorePlugin to load component plugins
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.IGuiPlugin">
            <summary>
            Any plugin that implements this interface is a gui only plugin.
            This allows the commandline to not install it.
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.LicenseException">
            <exclude />
        </member>
        <member name="T:Demo3D.Plugins.DependsOnAttribute">
            <summary>
            Specify plugins which must be installed before this plugin can be installed
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.DependsOnAttribute.#ctor(System.Type)">
            <summary>
            Specify that another plugin must be installed before this one. Use multiple instances
            of this attribute if necessary.
            </summary>
            <param name="requiredPluginType"></param>
        </member>
        <member name="M:Demo3D.Plugins.PluginServices.FindPlugin(Demo3D.Plugins.IPluginHost,System.String,System.Type)">
            <summary>
            Find a plugin for performing an action on a type. This convenience function
            will search the type's base classes, but not interfaces.
            </summary>
            <param name="host">Plugin host</param>
            <param name="action">Action to perform on type</param>
            <param name="type">Type to operated upon</param>
            <returns></returns>
        </member>
        <member name="F:Demo3D.Plugins.PropertyPasterControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.PropertyPasterControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Plugins.PropertyPasterControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.RssPlugin.NewsfeedClick">
            <summary>
            User clicked on Help -&gt; Newsfeed.
            Show the latest newsfeed from the source, and set all items as read.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.RssPlugin.NewsfeedGoTo(System.String)">
            <summary>
            Opens and move to line in newsfeed
            </summary>
            <param name="searchText"></param>
        </member>
        <member name="M:Demo3D.Plugins.RssPlugin.MessageNotifyClick">
            <summary>
            User clicked on the "new message" indicator in the main app status bar
            Show the latest newsfeed from the source, and set all items as read
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.RssPlugin.ShowNewsfeed">
            <summary>
            Show the newsfeed in a browser, loaded from the source.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.RssPlugin.NotifyNewItems">
            <summary>
            Let the user know we have new items to read
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.ScriptAnalyzer.ScriptUtilities.RecompileScripts(Demo3D.Visuals.Document,System.Collections.Generic.IEnumerable{Demo3D.Visuals.ScriptContainer})">
            <summary>
            Compiles the given scripts and forces a recompile of any scripts that reference them.
            Note that ScriptContainer.Compile currently ensures prerequisites are compiled. It will
            also recompile the referencing scripts. UpdateAssociatedVisuals makes an attempt to
            rebuild the native objects for referenced scripts, but doesn't appear to be very reliable.
            </summary>
        </member>
        <member name="T:Demo3D.Plugins.UserResourceEditorPlugin">
            <summary>
            PropertyGrid editor for properties of type UserResourceReference.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.UserResourceEditorPlugin.ValueSelectedOptions">
            <summary>
            An array of the items displayed in the drop down list when the property has a valid value entered.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.UserResourceEditorPlugin.NoValueSelectedOptions">
            <summary>
            An array of the items displayed in the drop down list when no value is currently selected.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.UserResourceEditorPlugin.editorService">
            <summary>
            Used to control the drop down list.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.UserResourceEditorPlugin.dropDownList">
            <summary>
            The ListBox representing the drop down list displayed.
            </summary>
        </member>
        <member name="F:Demo3D.Plugins.UserResourceEditorPlugin.madeSelection">
            <summary>
            Whether an item was selected the last time the drop down list was displayed.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.UserResourceEditorPlugin.StartEdit(System.Windows.Forms.Design.IWindowsFormsEditorService)">
            <summary>
            Prepares to display the drop down list.
            </summary>
            <param name="editorService">The IWindowsFormsEditorService to store.</param>
        </member>
        <member name="M:Demo3D.Plugins.UserResourceEditorPlugin.EndEdit">
            <summary>
            Makes sure the drop down list is disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Plugins.UserResourceEditorPlugin.ListClick(System.Object,System.EventArgs)">
            <summary>
            Closes the drop down list and sets the flag to indicate that a selection was made.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Plugins.UserResourceEditorPlugin.Browse(Demo3D.Visuals.IBuilder,Demo3D.Visuals.UserResourceReference)">
            <summary>
            Displays a Resource Explorer dialog so that the user can browse for a particular user resource.
            </summary>
            <param name="app">The application IBuilder</param>
            <param name="reference">The UserResourceReference being set.</param>
        </member>
        <member name="M:Demo3D.Plugins.UserResourceEditorPlugin.Install(Demo3D.Visuals.IBuilder)">
            <summary>
            Registers this plugin.
            </summary>
            <param name="builder">The parent application.</param>
        </member>
        <member name="M:Demo3D.Plugins.UserResourceEditorPlugin.Edit(System.Object,System.ComponentModel.ITypeDescriptorContext,System.Windows.Forms.Design.IWindowsFormsEditorService)">
            <summary>
            Displays a drop down list of editing options for a UserResourceReference value.
            </summary>
            <param name="value">The current value.</param>
            <param name="context">An ITypeDescriptorContext for the object.</param>
            <param name="editorService">An IWindowsFormsEditorService with which to control the drop down.</param>
            <returns>The new value for the property.</returns>
        </member>
        <member name="M:Demo3D.Plugins.UserResourceEditorPlugin.EditStyle">
            <summary>
            Gets a UITypeEditorEditStyle representing the edit style of this editor.
            </summary>
            <returns>A UITypeEditorEditStyle value representing the edit style of this editor.</returns>
        </member>
        <member name="T:Demo3D.Gui.WpfAspectsPane">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.IAspectViewerValidatable">
            <summary>
            The Aspect Viewer will attempt to validate any object that implements this interface.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectMethodAttribute">
            <summary>
            Customize an aspect method in the Aspect Viewer
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectPropertyAttribute">
            <summary>
            Customize an aspect property in the Aspect Viewer
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectValidationAttribute">
            <summary>
            Validate an aspect property in the Aspect Viewer
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.AspectValidationAttribute.ValidationMethod">
            <summary>
            Name of the method that runs the validation. The method must take no arguments and return null if successful or a string if not.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectComponentCollection">
            <summary>
            Class to show a collection aspects (of the same type) in the aspect viewer dock pane.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.AspectComponentCollection.AspectIndex">
            <summary>
            If there are multiple Aspects of the same type, use the Index to the desired aspect
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectsAliasCollection">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectView">
            <summary>
            Interaction logic for AspectViewer.xaml
            </summary>
            <exclude />
            <summary>
            AspectView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectTemplateSelector">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectViewerDockPane">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.Show(Demo3D.Visuals.IBuilder,Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Show the Aspect Viewer
            </summary>
            <param name="app">The main application</param>
            <param name="visual">Show the aspects on this visual.</param>
            <param name="forceOpen">Opens the Aspect Viewer when true, otherwise only update if the viewer is already open</param>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.PauseViewerUpdates">
            <summary>
            Ignore all adding and removing of aspects from the selected container(s).
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.ResumeViewerUpdates">
            <summary>
            Resume listening for adding and removing of aspects from the selected container(s). Also refreshes the viewer
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.Show(Demo3D.Visuals.IBuilder,System.Collections.Generic.IEnumerable{Demo3D.Visuals.Visual},System.Boolean)">
            <summary>
            Show the Aspect Viewer
            </summary>
            <param name="app">The main application</param>
            <param name="visuals">Show the aspects on this collection of visuals.</param>
            <param name="forceOpen">Opens the Aspect Viewer when true, otherwise only update if the viewer is already open</param>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.UpdateAspectsDropdown(Demo3D.Visuals.IBuilder)">
            <summary>
            Update the aspects in the drop down if the aspect viewer is open
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.RefreshAspectsDropdown">
            <summary>
            Search all assemblies for IAspectComponents that have an empty constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.GetAspectType(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerDockPane.IsComponentBase(System.Type)">
            <summary>
            Does the type implement IAspectComponent and does it have an empty constructor
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerModel.PauseViewerUpdates">
            <summary>
            Remove all current aspects from the viewer and ignore all adding and removing of aspects from the selected container(s).
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.AspectViewerModel.ResumeViewerUpdates(System.Boolean)">
            <summary>
            Refresh the viewer and resume listening for adding and removing of aspects from the selected container(s).
            </summary>
            <param name="updateAspects">When true, update the viewer</param>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.CopyAspectSelector">
            <summary>
            Interaction logic for CopyAspectSelector.xaml
            </summary>
            <summary>
            CopyAspectSelector
            </summary>
        </member>
        <member name="M:Demo3D.Gui.AspectViewer.CopyAspectSelector.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.Editors.AspectEditorAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.Editors.ConstrainedSliderEditorAttribute">
            <summary>
            A slider constrained between the maximum and minimum values
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.ConstrainedSliderEditorAttribute.Min">
            <summary>
            Value of the Minimum contraint Can be overridden by MinPropertyLink.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.ConstrainedSliderEditorAttribute.Max">
            <summary>
            Value of the Maximum contraint. Can be overridden by MaxPropertyLink.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.ConstrainedSliderEditorAttribute.MinPropertyLink">
            <summary>
            Name of the property to get the Minimum constraint from
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.ConstrainedSliderEditorAttribute.MaxPropertyLink">
            <summary>
            Name of the property to get the Maximum constraint from
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.ConstrainedSliderEditorAttribute.EditorName">
            <summary>
            Name of the editor
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.Editors.LinkedUnitsAttributeEditorAttribute">
            <summary>
            An editor which automatically converts the value based on the UnitsAttribute supplied
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.LinkedUnitsAttributeEditorAttribute.UnitsAttributePropertyLink">
            <summary>
            Name of the UnitsAttribute Property
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.LinkedUnitsAttributeEditorAttribute.EditorName">
            <summary>
            Name of the editor
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.Editors.TextAspectEditorAttribute">
            <summary>
            An editor which allows editing of xml
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.AspectViewer.Editors.TextAspectEditorAttribute.EditorName">
            <summary>
            Name of the editor
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectTypeComboEdit">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectTypeExplorer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectTypeFolder">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectTypeBackItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AspectViewer.AspectTypeItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Benchmark.Plugin.Benchmark">
            <summary>
            Interaction logic for Benchmark.xaml
            </summary>
            <exclude />
            <summary>
            Benchmark
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Benchmark.Plugin.Benchmark.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.CatalogEditorWindow">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.CatalogEditorWindow.panel1">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CatalogEditorWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CatalogEditorWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CatalogEditorWindow.ShouldRender(Demo3D.Visuals.Visual)">
            <summary>
            The catalog editor always draws visuals like lights, joints, cameras, etc.
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Gui.CatalogImageList">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.CatalogImageList.CreateImageList(Demo3D.Visuals.IBuilder,Demo3D.Visuals.Catalog,System.Int32)">
            <summary>
            Create an image list from a catalog of VisualFactory objects
            which can be used in a listView or combo box.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.RenderSpecialVisual">
            <summary>
            Allow lights, joint or camera visuals to be thumbnailed.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.CollectionEditorEx">
            <summary>
            A custom collection editor that emulates the 
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.CollectionEditorEx.#ctor(System.Type)">
            <summary>
            Creates a new instance of the <see cref="T:Demo3D.Gui.CollectionEditorEx" /> class
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:Demo3D.Gui.CollectionEditorEx.CreateCollectionForm">
            <summary>
            Creates a new CollectionForm to display the collection editor
            </summary>
            <remarks>
            This methods uses reflection to access non-public fields/properties within the collectionform.
            This method can also be used to alter other visual aspects of the form.
            </remarks>
            <returns>CollectionForm</returns>
        </member>
        <member name="T:Demo3D.Gui.ComboBoxImageEx">
            <summary>
            Extended ComboBox that shows images on the left hand size of the text.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ComboBoxImageExItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.CatalogContainer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.ExportContainer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.ImportContainer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.IRecentFilesContainer">
            <summary>
            Interface for adding and removing files from the Recent Documents/Folders Menu
            </summary>
        </member>
        <member name="M:Demo3D.Gui.MvvmToolbar.IRecentFilesContainer.AddFile(System.String,System.Boolean)">
            <summary>
            Add a file to the Recent Documents Menu
            </summary>
            <param name="path">The path of the file</param>
            <param name="addFolder">When true, also add to the Recent Folders Menu</param>
        </member>
        <member name="M:Demo3D.Gui.MvvmToolbar.IRecentFilesContainer.RemoveFile(System.String,System.Boolean)">
            <summary>
            Remove a file from the Recent Documents Menu
            </summary>
            <param name="path">The path of the file</param>
            <param name="removeFolder">When true, also remove from the Recent Folders Menu</param>
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.PrintContainer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.RecentFilesContainer">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.MvvmToolbar.RecentFilesContainer.AddFile(System.String,System.Boolean)">
            <summary>
            Add a file to the Recent Documents Menu
            </summary>
            <param name="path">The path of the file</param>
            <param name="addFolder">When true, also add to the Recent Folders Menu</param>
        </member>
        <member name="M:Demo3D.Gui.MvvmToolbar.RecentFilesContainer.RemoveFile(System.String,System.Boolean)">
            <summary>
            Remove a file from the Recent Documents Menu
            </summary>
            <param name="path">The path of the file</param>
            <param name="removeFolder">When true, also remove from the Recent Folders Menu</param>
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.RegistryBackstagePage">
            <summary>
            Allow the backstage to access the registry using IBuilder details
            </summary>
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.SaveAsContainer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.IBuilderDockManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.BuilderToolbarManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.DisplayAxesTypeItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MvvmToolbar.WpfSnapshotService">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ConnectionViewer.ConnectionsView">
            <summary>
            Interaction logic for ConnectionsView.xaml
            </summary>
            <exclude />
            <summary>
            ConnectionsView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ConnectionViewer.ConnectionsView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ConnectionViewer.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ConnectionViewer.IConnectionSession">
            <summary>
            Represents one connection.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSession.Address">
            <summary>
            Connection address.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSession.BytesSent">
            <summary>
            Total number of bytes sent on this connection.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSession.BytesReceived">
            <summary>
            Total number of bytes received on this connection.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSession.IsConnected">
            <summary>
            True if the session is connected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSession.CanReconnect">
            <summary>
            Whether the connection can be reconnected.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ConnectionViewer.IConnectionSession.PingYs">
            <summary>
            Ping the peer and return ping time in microseconds.
            A value less than 0 implies that the connection has timed out.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSession.CustomStatus">
            <summary>
            Status of the connection, overrides the ping column in the ui.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ConnectionViewer.IConnectionSessionFactory">
            <summary>
            A source of connections.  Typically a server, but doesn't have to be.
            </summary>
        </member>
        <member name="E:Demo3D.Gui.ConnectionViewer.IConnectionSessionFactory.ClientConnectionChanged">
            <summary>
            Raised when a connection status changes.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSessionFactory.IsRunning">
            <summary>
            True if we're accepting connections.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.IConnectionSessionFactory.Sessions">
            <summary>
            Returns a list of current sessions.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ConnectionViewer.IConnectionSessionFactory.ConnectSession(Demo3D.Gui.ConnectionViewer.IConnectionSession)">
            <summary>
            Connect a session
            </summary>
            <param name="session">The session to connect.</param>
        </member>
        <member name="M:Demo3D.Gui.ConnectionViewer.IConnectionSessionFactory.DisconnectSession(Demo3D.Gui.ConnectionViewer.IConnectionSession)">
            <summary>
            Terminates a session.
            </summary>
            <param name="session">The session to terminate.</param>
        </member>
        <member name="T:Demo3D.Gui.ConnectionViewer.SessionEventType">
            <summary>
            SessionEventHandler event type.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ConnectionViewer.SessionEventType.Added">
            <summary>
            A new session has been added.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ConnectionViewer.SessionEventType.Removed">
            <summary>
            A session has been removed.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ConnectionViewer.SessionEventType.Connected">
            <summary>
            Session connected.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ConnectionViewer.SessionEventType.Disconnected">
            <summary>
            Session disconnected.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ConnectionViewer.SessionEventArgs">
            <summary>
            SessionEventHandler event arguments.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.SessionEventArgs.Session">
            <summary>
            The connected session.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ConnectionViewer.SessionEventArgs.EventType">
            <summary>
            The session event type.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ConnectionViewer.SessionEventArgs.#ctor(Demo3D.Gui.ConnectionViewer.IConnectionSession,Demo3D.Gui.ConnectionViewer.SessionEventType)">
            <summary>
            Constructs new ClientConnectEventArgs.
            </summary>
            <param name="session">The connected session.</param>
            <param name="type">The session event type.</param>
        </member>
        <member name="T:Demo3D.Gui.ConnectionViewer.SessionEventHandler">
            <summary>
            Raised when a session event occurs.
            </summary>
            <param name="sender">The IConnectionSessionFactory.</param>
            <param name="e">The connected session event arguments.</param>
        </member>
        <member name="T:Demo3D.Gui.ControlsRegistry">
            <summary>
            Read and write window and GUI controls state to and from the registry.
            
            Registry format is:
            /[CompanyName]/[ProductName]/Controls/FormName.InstanceNum/ControlName = "value"
            
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ControlsRegistry.InstanceTracker">
            <summary>
            Assign instance numbers to window handles. There will be one InstanceTracker
            for each form name in existence. For example, if there are two form instances
            with name "Event Viewer", their handles will be recorded here and they will
            be instances 1 and 2.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ControlsRegistry.Handler">
            <summary>
            Management record for each Control that is to be persisted to the registry.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.ControlsRegistry.Handler.FormName">
            Control to be persisted
        </member>
        <member name="F:Demo3D.Gui.ControlsRegistry.Handler.InstanceNum">
            Name of owning form
        </member>
        <member name="F:Demo3D.Gui.ControlsRegistry.Handler.FormHandle">
            Instance number of owning form type
        </member>
        <member name="F:Demo3D.Gui.ControlsRegistry.Handler.Initialized">
            Window handle of owning form
        </member>
        <member name="T:Demo3D.Gui.ColoredEnumControl">
            <exclude />
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.ColoredEnumControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ColoredEnumControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.ColoredEnumControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.EnumView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.EnumHelper">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.EnumBinding">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentManual">
            <summary>
            Interaction logic for ComponentManual.xaml
            </summary>
            <exclude />
            <summary>
            ComponentManual
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ComponentManual.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.CoreWpfConverters.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.CoreWpfConverters.ExprDoubleToStringConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.CoreWpfConverters.ExprStringToStringConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.CreateScriptControl">
            <summary>
            Interaction logic for CreateScriptControl.xaml
            </summary>
            <exclude />
            <summary>
            CreateScriptControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.CreateScriptControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.BooleanToHiddenConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.CreateScriptDialogWpf">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ResultType">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.CreateScriptData">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.CSharpType">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.DynamicHelp">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Controls.DynamicHelp.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.DynamicHelp.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.Controls.DynamicHelp.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ElevationDWG">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.DimensionDWG">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ColorDWG">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.UnitsDWG">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExportRealDWGOptionsWindow">
            <summary>
            Interaction logic for ExportRealDWGOptionsWindow.xaml
            </summary>
            <exclude />
            <summary>
            ExportRealDWGOptionsWindow
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ExportRealDWGOptionsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.Import.ImportCADDialog">
            <summary>
            Interaction logic for ImportCADDialog.xaml
            </summary>
            <exclude />
            <summary>
            ImportCADDialog
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.Import.ImportCADDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ImportLoadDialog">
            <summary>
            Interaction logic for ImportLoadDialog.xaml
            </summary>
            <exclude />
            <summary>
            ImportLoadDialog
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ImportLoadDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ImportRealDWGOptionsWindow">
            <summary>
            Interaction logic for ImportRealDWGOptionsWindow.xaml
            </summary>
            <exclude />
            <summary>
            ImportRealDWGOptionsWindow
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ImportRealDWGOptionsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ManualControl">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Controls.ManualControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ManualControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.Controls.ManualControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.PopupMenuUp">
            <summary>
            Forces the popup menu to go up, eg status bar buttons.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ScreenshotOptionsControl">
            <summary>
            Interaction logic for ScreenshotOptionsControl.xaml
            </summary>
            <exclude />
            <summary>
            ScreenshotOptionsControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ScreenshotOptionsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ScreenshotOptionsProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ScreenshotOptionsWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.AspectSelectorComboBoxEdit">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.SelectorComboBoxEdit">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.Controls.SelectorComboBoxEdit.TooltipPropertyName">
            <summary>
            The property name of the tooltip property on the data context.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.TextEditor">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Controls.TextEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.TextEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.Controls.TextEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ITextEditorDataSource">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.TextPropertyDataSource">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.TextEditorWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.TextureSelectControl">
            <summary>
            Interaction logic for TextureSelectControl.xaml
            </summary>
            <exclude />
            <summary>
            TextureSelectControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.TextureSelectControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.TextureData">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.TextureSelectWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.TextureSelectViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ResourceKeyThemeConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.UndoManagerControl">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Controls.UndoManagerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.UndoManagerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.Controls.UndoManagerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.UndoManagerWpfControl">
            <summary>
            Interaction logic for UndoManagerWpfControl.xaml
            </summary>
            <exclude />
            <summary>
            UndoManagerWpfControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.UndoManagerWpfControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.VisualListQueryControl">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Controls.VisualListQueryControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.VisualListQueryControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.Controls.VisualListQueryControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.VisualListQueryUIEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.VisualListQueryWindow">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Controls.VisualListQueryWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.VisualListQueryWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.Controls.VisualListQueryWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.RECT">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.POINT">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.WINDOWPLACEMENT">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.WindowPlacementHelper.SetCenterScreenFromRestore(System.Windows.Window,System.IntPtr)">
            <summary>
            Attempts to open the window on the screen where it was last closed.<br />
            If the last screen is not found, attempts to open the window on the screen where the mouse is.
            </summary>
            <param name="window"></param>
            <param name="windowHandle"></param>
        </member>
        <member name="T:Demo3D.Gui.Controls.CustomPropertyGridControl">
            <summary>
            Interaction logic for CustomPropertyGridControl.xaml
            </summary>
            <exclude />
            <summary>
            CustomPropertyGridControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.CustomPropertyGridControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.DataTemplateSelectorEx">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ImportFileEditor">
            <summary>
            An editor for the property grid which looks for an OpenFileUITypeEditor and displays an open file
            dialog with the appropriate title and filter.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.LayerVisualChooserControl">
            <summary>
            Interaction logic for LayerVisualChooser.xaml
            </summary>
            <exclude />
            <summary>
            LayerVisualChooserControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.LayerVisualChooserControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.PropertyGridResourceDictionary">
            <exclude />
            <summary>
            PropertyGridResourceDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.PropertyGridResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.PropertyGridViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.EditableTextBlock">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.EditableTextBlock.TextBoxKeyUp(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            release the edit mode when user presses enter.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="T:Demo3D.Gui.Controls.EditableTextBlockAdorner">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.CardViewResourceDictionary">
            <exclude />
            <summary>
            CardViewResourceDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.CardViewResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.CustomCardView">
            <summary>
            Interaction logic for CustomCardView.xaml
            </summary>
            <exclude />
            <summary>
            CustomCardView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.CustomCardView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.MouseUtilities">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.DragAdorner">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.DragDropCardView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerDragDropGrid">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ICustomService">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.CustomService">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.IncrementInt">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.KeyDownEventArgsToCommandParameterConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.FocusExtension">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerControl">
            <summary>
            Interaction logic for ExplorerWindow.xaml
            </summary>
            <exclude />
            <summary>
            ExplorerControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ExplorerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ItemRenamedEventHandler">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ItemRenamedEventArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerImageControl">
            <summary>
            Interaction logic for ExplorerImageControl.xaml
            </summary>
            <exclude />
            <summary>
            ExplorerImageControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ExplorerImageControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerImageIconControl">
            <summary>
            Interaction logic for ExplorerImage.xaml
            </summary>
            <exclude />
            <summary>
            ExplorerImageIconControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ExplorerImageIconControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.PercentageConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerPathBar">
            <summary>
            Interaction logic for ExplorerPathBar.xaml
            </summary>
            <exclude />
            <summary>
            ExplorerPathBar
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ExplorerPathBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ShrinkingToolbarControl">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerCommands">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerDockPane">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerFile">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.SearchResultEvent">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.SearchResultHandler">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerItemOnDrive">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerFolder">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerItemCollection">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerItemSeparator">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerItemBeingDragged">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerSearcher">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerSearcher.SearchFolder">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerFavoriteFile">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerFavoriteFolder">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ExplorerFavoritesRootFolder">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerFavorites">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerFavoriteItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorer">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.IExplorer.AddTopLevelProvider(Demo3D.Gui.Controls.IExplorerRootItemProvider)">
            <summary>
            Add a provider to the top level of the explorer.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Demo3D.Gui.Controls.IExplorer.RemoveTopLevelProvider(Demo3D.Gui.Controls.IExplorerRootItemProvider)">
            <summary>
            Remove a provider to the top level of the explorer.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerFile">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerFolder">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.IsCollapsedInToolbar">
            <summary>
            True if the folder is collapesd in the explorer toolbar
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.IsContentLoading">
            <summary>
            Are the contents of this folder currently loading
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.ErrorButtonCommand">
            <summary>
            Command to execute when clicking on the error button
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.ShowErrorButton">
            <summary>
            Whether to show the error button
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.ErrorHeaderText">
            <summary>
            Title of the error
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.ErrorInfoText">
            <summary>
            Reason for the error
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.ErrorButtonText">
            <summary>
            Content of the error button
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerFolder.OpenOnDoubleClick">
            <summary>
            When true, opens the folder and calls the activate method. When false, only the activate method is invoked.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.IExplorerFolder.MoveItem(Demo3D.Gui.Controls.IExplorerItem,System.Int32,System.Int32)">
            <summary>
            Move item to the new index
            </summary>
            <param name="item"></param>
            <param name="newIndex"></param>
            <param name="oldIndex"></param>
        </member>
        <member name="M:Demo3D.Gui.Controls.IExplorerFolder.Deactivate">
            <summary>
            Occurs when navigating away from the folder
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerItem">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerItem.ShortName">
            <summary>
            The name to display when in the catalog view.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerItem.Path">
            <summary>
            Explorer path to the item
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerItem.OtherSearchTerms">
            <summary>
            Include these terms when searching.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerItem.CanMove">
            <summary>
            Can the item be moved inside its folder
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerItem.IsDragTarget">
            <summary>
            Is a drag being dropped on this item
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerItem.IsDropLeft">
            <summary>
            Was the drag dropped left of this item
            </summary>
        </member>
        <member name="P:Demo3D.Gui.Controls.IExplorerItem.Icon">
            <summary>
            The status icon that appears on the bottom right corner
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.IExplorerItem.Activate">
            <summary>
            Action to perform when double clicking on the item
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerItemProvider">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.IExplorerRootItemProvider">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.IExplorerRootItemProvider.InstallContextMenu(Demo3D.Gui.MvvmToolbar.ToolbarManager)">
            <summary>
            Install items for IExplorerItem context menus, these need to be added to the toolbar and can then be used in IExplorerItem.GetContextMenuTools
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.IExplorerRootItemProvider.UninstallContextMenu(Demo3D.Gui.MvvmToolbar.ToolbarManager)">
            <summary>
            Remove items from the toolbars
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.PopupItem">
            <summary>
            Interaction logic for PopupItem.xaml
            </summary>
            <exclude />
            <summary>
            PopupItem
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.PopupItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.PopupText">
            <summary>
            Interaction logic for PopupText.xaml
            </summary>
            <exclude />
            <summary>
            PopupText
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.PopupText.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.UniformWrapPanel">
            <summary>
            Wrap panel that aligns items automatically
            http://www.codeproject.com/Articles/32629/A-better-panel-for-data-binding-to-a-WrapPanel-in
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.UniformWrapPanel.Column.#ctor">
            <summary>
            Initializes a new instance of the Column class.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.IQuickPropertiesManager">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Gui.Controls.IQuickPropertiesManager.WindowSize">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Gui.Controls.IQuickPropertiesManager.Update">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.Controls.QuickProperties">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Controls.QuickProperties.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.QuickProperties.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.Controls.QuickProperties.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.VerbEnabledGrid">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.Controls.QuickPropertiesManager.WindowSize">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.Controls.VisualSelectorComboBoxEdit">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentBeingDragged">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentStore">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.ComponentStore.OpenCatalogFromWebStore(Demo3D.WebStore.WebStoreComponent)">
            <summary>
            Update the catalog and make sure it is visible
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.ComponentStore.OpenCatalog">
            <summary>
            Update the selected catalog and make sure it is visible
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentStoreLogin">
            <summary>
            Interaction logic for ComponentStoreLogin.xaml
            </summary>
            <exclude />
            <summary>
            ComponentStoreLogin
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentStoreLogin.UsernamePassword">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.ComponentStoreLogin.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentStoreTopLevelFolder">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentStoreFolder">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.ComponentStoreFile">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.IProgress">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.StoreComponentDetail">
            <summary>
            Interaction logic for StoreComponentDetail.xaml
            </summary>
            <exclude />
            <summary>
            StoreComponentDetail
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.StoreComponentDetail.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.TaskProgressWindow">
            <summary>
            Interaction logic for TaskProgressWindow.xaml
            </summary>
            <exclude />
            <summary>
            TaskProgressWindow
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Controls.TaskProgressWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Controls.WebStorePlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.Configuration">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.StartUpIni">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.WebStoreUI">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Controls.WindowsFormsControlExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Forms.Control" />.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Controls.WindowsFormsControlExtensions.BringToFrontNoFocus(System.Windows.Forms.Control)">
            <summary>
            Equivalent to <see cref="M:System.Windows.Forms.Control.BringToFront" /> but does not grab the focus.
            </summary>
            <remarks>
            Cobbled together from https://stackoverflow.com/questions/156046/show-a-form-without-stealing-focus/.
            </remarks>
            <param name="ctrl"><see cref="T:System.Windows.Forms.Control" /> to bring to the front.</param>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.CustomReduceDialog">
            <summary>
            Interaction logic for CustomReduceDialog.xaml
            </summary>
            <exclude />
            <summary>
            CustomReduceDialog
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CustomReduceDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.CustomStatusBar">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.OrderedTableView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ColumnComparer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.OrderedGridColumn">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MultiKeyBinding">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MultiKeyGesture">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MultiKeyGestureConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.CustomMessageBoxContentControl">
            <summary>
            Interaction logic for CustomAlertDialog.xaml
            </summary>
            <exclude />
            <summary>
            CustomMessageBoxContentControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CustomMessageBoxContentControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.CustomPropertiesDialog">
            <summary>
            Summary description for CustomPropertiesDialog.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.CustomPropertiesDialog.NameColumn">
            A edit control for each column
        </member>
        <member name="F:Demo3D.Gui.CustomPropertiesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CustomPropertiesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CustomPropertiesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.CustomPropertiesDialog.GetNoUnitString(System.String)">
            <summary>
            Gets the string to display for the custom unit column for values of a specified type when no custom unit is specified.
            </summary>
            <param name="typeName">The name of the type (this will be the name of a member of Visual.SimpleType).</param>
            <returns>The string to display in the custom unit column for values of this type that have no units specified.</returns>
        </member>
        <member name="M:Demo3D.Gui.CustomPropertiesDialog.GetCustomUnitString(Demo3D.Utilities.CustomProperty)">
            <summary>
            Gets a string to display for the custom unit column for a CustomProperty.
            </summary>
            <param name="property">The CustomProperty instance to get a custom unit string for.</param>
            <returns>The string to display un the custom unit column for the specified CustomProperty.</returns>
        </member>
        <member name="T:Demo3D.Gui.CustomPropertyCollectionX">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.CustomPropertyX">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.EnumerationValuesDialog">
            <summary>
            Summary description for EnumerationValuesDialog.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.EnumerationValuesDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.EnumerationValuesDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.EnumerationValuesDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickLogicParametersDialog">
            <summary>
            Summary description for EnumerationValuesDialog.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.QuickLogicParametersDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QuickLogicParametersDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QuickLogicParametersDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.UserResourceReferenceFilterDialog">
            <summary>
            Form for entering or editing a filter expression for a UserResourceReference property.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.UserResourceReferenceFilterDialog.Expression">
            <summary>
            Gets or sets the filter expression being displayed.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.UserResourceReferenceFilterDialog.OKButton_Click(System.Object,System.EventArgs)">
            <summary>
            Closes the dialog.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.UserResourceReferenceFilterDialog.CancelButton_Click(System.Object,System.EventArgs)">
            <summary>
            Closes the dialog.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.UserResourceReferenceFilterDialog.#ctor">
            <summary>
            Initializes a new instance of the UserResourceReferenceFilterDialog class.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.UserResourceReferenceFilterDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.UserResourceReferenceFilterDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.UserResourceReferenceFilterDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualReferenceFilterDialog">
            <summary>
            Summary description for EnumerationValuesDialog.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.VisualReferenceFilterDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualReferenceFilterDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualReferenceFilterDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.IRenderControlWithIView">
            <summary>
            Interface for the UI control that hosts the renderer.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.IRenderControlWithIView.View">
            <summary>
            The view attached to the control.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ViewCursor.View">
            <summary>
            The owning IView.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ViewCursor.OriginalCursor">
            <summary>
            The original cursor for the control.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ViewCursor.#ctor(Demo3D.Visuals.IView,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="view">The WinForms control.</param>
            <param name="cursor">The new cursor.</param>
        </member>
        <member name="M:Demo3D.Gui.WinformCursorUtil.GetCursor(System.String)">
            <summary>
            Get a Winform cursor from a string.
            </summary>
            <param name="cursorName">The name of the cursor.</param>
            <returns>A Winform Cursor.</returns>
        </member>
        <member name="M:Demo3D.Gui.WinformCursorUtil.LoadCursorFromResources(System.String)">
            <summary>
            Attempt to load a cursor from resources using a string
            </summary>
            <param name="cursor">The name of the assembly and the cursor, separated by a ';'</param>
            <returns>A winform cursor if the resource is valid, else null</returns>
        </member>
        <member name="M:Demo3D.Gui.WinformCursorUtil.LoadCursorFromResources(System.Reflection.Assembly,System.String)">
            <summary>
            Attempt to load a cursor from resources using a string
            </summary>
            <param name="assembly">The assembly to find the cursor</param>
            <param name="resourceName">The name of the cursor</param>
            <returns>A winform cursor if the resource is found, else null</returns>
        </member>
        <member name="T:Demo3D.Gui.DataGridNoRowResizeEx">
            <summary>
            A DataGrid where the rows can't be resized.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.DataGridNoRowResizeEx.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DataGridNoRowResizeEx.#ctor">
            <summary>
            Construct a datagrid where the rows can't be resized.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DataGridNoRowResizeEx.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DataGridNoRowResizeEx.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Prevent row resizing.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DataGridNoRowResizeEx.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.DifferenceControl">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.DifferenceControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DifferenceControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.DifferenceControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.DifferencePane">
            <summary>
            A dockable pane to display search in scripts results.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.DifferencePane.DifferenceControl">
            <summary>
            Gets the DifferenceControl being hosted in this pane.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DifferencePane.#ctor(Demo3D.Visuals.IBuilder)">
            <summary>
            Initializes a new instance of the DifferencePane class.
            </summary>
            <param name="app">The parent application.</param>
        </member>
        <member name="T:Demo3D.Gui.IDifferenceProvider">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.DifferenceProviderBase">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.DifferenceProviderBase.ProgramFiles">
            <summary>
            Get the directory corresponding to "c:/Program Files".
            <para>
            </para>
            </summary>
            <returns>String representing "c:/Program Files".</returns>
        </member>
        <member name="M:Demo3D.Gui.DifferenceProviderBase.ProgramFilesx86">
            <summary>
            Get the directory corresponding to "c:/Program Files (x86)"
            </summary>
            <returns>String representing "c:/Program Files (x86)".</returns>
        </member>
        <member name="T:Demo3D.Gui.CodeCompareWrapper">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WinMergeWrapper">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.DisplaySettingsProps">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.DisplaySettings.renderTypes">
            <summary>
            Only render lights, joints, etc. in build mode.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DisplaySettings.RendererDisplaySettings">
            <summary>
            Display Settings of the currently selected view.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DisplaySettings.IsRendering">
            <summary>
            Stops redrawing and button updates when rendering
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DisplaySettings.ActiveView">
            <summary>
            Current active view
            </summary>
        </member>
        <member name="T:Demo3D.Gui.DisplaySettingsDialog">
            <summary>
            Interaction logic for DisplaySettingsDialog.xaml
            </summary>
            <exclude />
            <summary>
            DisplaySettingsDialog
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DisplaySettingsDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.NamespaceGroupDoc">
            <summary>
            The Demo3D.Gui namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.NamespaceDoc">
            <summary>
            The Demo3D.Gui namespace contains classes and interfaces for interacting with the Demo3D GUI.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ShowGraphicsMode">
            <summary>
            Describes the graphics rendering mode used.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ShowGraphicsMode.None">
            <summary>
            Show no graphics.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ShowGraphicsMode.All">
            <summary>
            Show all graphics.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ShowGraphicsMode.PhysicsOnly">
            <summary>
            Show only the graphics of things that have physics.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisibleGraphics">
            <summary>
            Determines which graphics objects are visible.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.IDisplaySettings">
            <summary>
            Provides access to the display settings
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.IsNavigation">
            <summary>
            Set the scene in to Navigation mode if true or Select if false.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.IsPlanView">
            <summary>
            Enable plan view mode
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.IsPerspective">
            <summary>
            Set the projection to perspective if true or parallel if false.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowDirectionArrows">
            <summary>
            Show or hide direction arrows.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowLights">
            <summary>
            Show or hide lights.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowPhotoEyes">
            <summary>
            Show or hide photo eyes.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowSupports">
            <summary>
            Show or hide supports.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowJoints">
            <summary>
            Show or hide joints.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowTransparent">
            <summary>
            Show or hide transparent objects.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowAxes">
            <summary>
            Show or hide axes.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowReferences">
            <summary>
            Show or hide references.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowGraphics">
            <summary>
            Show or hide graphics.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowGraphicsMode">
            <summary>
            Determine what graphics to show.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.VisibleGraphics">
            <summary>
            Determines which graphics objects are visible.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowTextures">
            <summary>
            Show or hide textures.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowPhysics">
            <summary>
            Show or hide physics.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowCameras">
            <summary>
            Show or hide cameras.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.IsAutoResolution">
            <summary>
            When true, resizing Demo3D updates the resolution automatically.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.Resolution">
            <summary>
            Resolution of the main view.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.Antialias">
            <summary>
            Antialiasing of the main view.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.Shadows">
            <summary>
            Shadow type of the main view.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.DisplayAxesType">
            <summary>
            Set which axes to show when selecting a visual.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IDisplaySettings.ShowRotationTool">
            <summary>
            Show or hide the rotation tool.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.DragAndDropListView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Drawing.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Drawing.Drawer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.TooltipIcon">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.EditBalloon">
            <summary>
            A sample class to manipulate ballon tooltips.
            Windows XP balloon-tips if used properly can 
            be very helpful.
            This class creates a balloon tooltip in the form of a message.
            This becomes useful for showing important information 
            quickly to the user.
            Ever so often we need to avoid certain invalid characters in 
            input textboxes. Though we do a good job of filtering the characters,
            we dont necessarily do a good job of informing the user.
            This class helps immensely under such scenarios.
            This also helps in a shorter learning cycle of the 
            application.
            NOTE: The difference between this and other balloon classes is 
            that this is made specifically for the edit control and 
            displays the balloon at the caret position within the textbox.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.EditBalloon.Show">
            <summary>
            Show a balloon tooltip for edit control.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.EditBalloon.Title">
            <summary>
            Sets or gets the Title.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.EditBalloon.TitleIcon">
            <summary>
            Sets or gets the display icon.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.EditBalloon.Text">
            <summary>
            Sets or gets the display text.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.EditBalloon.Parent">
            <summary>
            Sets or gets the parent.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.BoolToColorConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.EditionChooserGrid">
            <summary>
            Interaction logic for EditionChooserGrid.xaml
            </summary>
            <exclude />
            <summary>
            EditionChooserGrid
            </summary>
        </member>
        <member name="M:Demo3D.Gui.EditionChooserGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.EditionChooserWpf">
            <summary>
            Interaction logic for EditionChooserWpf.xaml
            </summary>
            <exclude />
            <summary>
            EditionChooserWpf
            </summary>
        </member>
        <member name="F:Demo3D.Gui.EditionChooserWpf.RegistryPath">
            <summary>
            The path (underneath HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE) where Demo3D launch information is stored.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.EditionChooserWpf.LastSelectedEditionKey">
            <summary>
            The name of the key representing the last selected edition.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.EditionChooserWpf.LastSelectedEdition">
            <summary>
            Gets or sets the full name and path of the last Demo3D executable to be run in the registry.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.EditionChooserWpf.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Experiments.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Experiments.Spreadsheet">
            <summary>
            Interaction logic for Spreadsheet.xaml
            </summary>
            <exclude />
            <summary>
            Spreadsheet
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Experiments.Spreadsheet.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Exports.ExportResourceDictionary">
            <summary>
            Interaction logic for ExportResourceDictionary.xaml
            </summary>
            <exclude />
            <summary>
            ExportResourceDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Exports.ExportResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Exports.MP4ExportModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Exports.PresetOption">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Exports.WMVExportModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ExpressionUITypeEditor">
            <summary>
            Show a function icon in thhe property grid for functions.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ExternalAppLoader">
            <summary>
            Used to load an external app
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ExternalViewerLoader">
            <summary>
            Used to load the external viewer.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.FindCommands">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.FindVisualsControl">
            <summary>
            Interaction logic for FindVisualsControl.xaml
            </summary>
            <exclude />
            <summary>
            FindVisualsControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.FindVisualsControl.Match(System.Collections.Generic.HashSet{Demo3D.Visuals.Visual},Demo3D.Visuals.Visual)">
            <summary>
            Match the first visual depth first.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.FindVisualsControl.FindVisuals">
            <summary>
            Searches the scene for visuals matching the search term.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.FindVisualsControl.CustomLogicSearchResult">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.FindVisualsControl.QuickLogicSearchResult">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.FindVisualsControl.FindInCustomLogic(Demo3D.QuickLogic.Procedure,System.String,System.StringComparison)">
            <summary>
            Tries to find searchText in proc; adds it to the search results if found.
            </summary>
            <param name="proc"></param>
            <param name="searchText"></param>
            <param name="comparison"></param>
        </member>
        <member name="M:Demo3D.Gui.FindVisualsControl.FindInRegularScripts">
            <summary>
            Searches through the document's script library for scripts containing the search text.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.FindVisualsControl.FindAllVisuals">
            <summary>
            Selects all visuals which match the search criteria.
            </summary>
            <returns>The amount of visuals found</returns>
        </member>
        <member name="M:Demo3D.Gui.FindVisualsControl.FindAllInScripts">
            <summary>
            Writes a list of all instances of the search term found in scripts to the message log.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.FindVisualsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.FrictionConfigurationDialogView">
            <summary>
            Interaction logic for FrictionConfigurationDialogView.xaml
            </summary>
            <exclude />
            <summary>
            FrictionConfigurationDialogView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.FrictionConfigurationDialogView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.FrictionConfigurationModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.FrictionConfigurationUITypeEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.FrictionConfigurationView">
            <summary>
            Interaction logic for FrictionConfigurationView.xaml
            </summary>
            <exclude />
            <summary>
            FrictionConfigurationView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.FrictionConfigurationView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.FrictionConfigurationViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.FrictionMatrix">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.GuiAutomation.Plugin.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.GuiAutomation.Plugin.NarrativeWindow">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.GuiAutomation.Plugin.NarrativeWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.GuiAutomation.Plugin.NarrativeWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.GuiAutomation.Plugin.NarrativeWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.HyperlinkDialog">
            <summary>
            Summary description for HyperlinkDialog.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.HyperlinkDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.HyperlinkDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.HyperlinkDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.IExplorerManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IGeneralPropertyGridGui">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IGui">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IControlPanel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IQuickSearchRegistry">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IQuickSearchItemProvider">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IWebQuickSearch">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IMessageBox">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.IMessageBox.AutoCloseTimeout">
            <summary>
            Number of seconds to wait before closing the message box. Use 0 to keep the dialog open indefinitely.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IMessageBox.AutoCloseAction">
            <summary>
            Action to execute if the message box is automatically closed
            </summary>
        </member>
        <member name="T:Demo3D.Gui.LineDrawing">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.LineDrawing.Elevation">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.LineDrawing.CalculateSurfaceNormal(System.Int32,System.Int32[],Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly[])">
            <summary>
            Calculate a surface normal from mesh internal data.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.LineDrawing.CalculateSurfaceNormal(System.Int32,System.Int32[],System.Collections.Generic.List{Microsoft.DirectX.Vector4})">
            <summary>
            Calculate a surface normal from mesh internal data.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.LineDrawing.GetFlattenedVisualPointsFromTop(Demo3D.Visuals.Visual,System.Windows.FrameworkElement)">
            <summary>
            Returns list of flattened vertices from a top down perspective.
            </summary>
            <param name="visual"></param>
            <param name="control"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ListBoxExItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ListBoxEx">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.TcpPacketEndianType">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.TcpPacketConfiguration">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.TcpPacketEventArgs">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.TcpPacketEventHandler">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.TcpPacketListener">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.SubItemEventHandler">
            <summary>
            Event Handler for SubItem events
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SubItemEndEditingEventHandler">
            <summary>
            Event Handler for SubItemEndEditing events
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ListViewEx">
            <summary>
            Inherited ListView to allow in-place editing of subitems
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ListViewEx.NMHDR">
            <summary>
            MessageHeader for WM_NOTIFY
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ListViewEx.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.InitializeComponent">
            <summary>
            Required method	for	Designer support - do not modify 
            the	contents of	this method	with the code editor.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ListViewEx.EditStyle">
            <summary>
            Is a single click, double click or select then click needed to edit a cell?
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.GetColumnOrder">
            <summary>
            Retrieve the order in which columns appear
            </summary>
            <returns>Current display order of column indices</returns>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.GetSubItemAt(System.Int32,System.Int32,System.Windows.Forms.ListViewItem@)">
            <summary>
            Find ListViewItem and SubItem Index at position (x,y)
            </summary>
            <param name="x">relative to ListView</param>
            <param name="y">relative to ListView</param>
            <param name="item">Item at position (x,y)</param>
            <returns>SubItem index</returns>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.GetSubItemBounds(System.Windows.Forms.ListViewItem,System.Int32)">
            <summary>
            Get bounds for a SubItem
            </summary>
            <param name="Item">Target ListViewItem</param>
            <param name="SubItem">Target SubItem index</param>
            <returns>Bounds of SubItem (relative to ListView)</returns>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.EditSubitemAt(System.Drawing.Point)">
            <summary>
             Fire SubItemClicked
            </summary>
            <param name="p">Point of click/doubleclick</param>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.StartEditing(System.Windows.Forms.Control,System.Windows.Forms.ListViewItem,System.Int32)">
            <summary>
            Begin in-place editing of given cell
            </summary>
            <param name="c">Control used as cell editor</param>
            <param name="Item">ListViewItem to edit</param>
            <param name="SubItem">SubItem index to edit</param>
        </member>
        <member name="M:Demo3D.Gui.ListViewEx.EndEditing(System.Boolean)">
            <summary>
            Accept or discard current value of cell editor control
            </summary>
            <param name="AcceptChanges">Use the _editingControl's Text as new SubItem text or discard changes?</param>
        </member>
        <member name="T:Demo3D.Gui.SubItemEventArgs">
            <summary>
            Event Args for SubItemClicked event
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SubItemEndEditingEventArgs">
            <summary>
            Event Args for SubItemEndEditingClicked event
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ListViewColumnSorter">
            <summary>
            This class is an implementation of the 'IComparer' interface.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.ListViewColumnSorter.ColumnToSort">
            <summary>
            Specifies the column to be sorted
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ListViewColumnSorter.OrderOfSort">
            <summary>
            Specifies the order in which to sort (i.e. 'Ascending').
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ListViewColumnSorter.ObjectCompare">
            <summary>
            Case insensitive comparer object
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ListViewColumnSorter.#ctor">
            <summary>
            Class constructor.  Initializes various elements
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ListViewColumnSorter.Compare(System.Object,System.Object)">
            <summary>
            This method is inherited from the IComparer interface.  It compares the two objects passed using a case insensitive comparison.
            </summary>
            <param name="x">First object to be compared</param>
            <param name="y">Second object to be compared</param>
            <returns>The result of the comparison. "0" if equal, negative if 'x' is less than 'y' and positive if 'x' is greater than 'y'</returns>
        </member>
        <member name="P:Demo3D.Gui.ListViewColumnSorter.SortColumn">
            <summary>
            Gets or sets the number of the column to which to apply the sorting operation (Defaults to '0').
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ListViewColumnSorter.Order">
            <summary>
            Gets or sets the order of sorting to apply (for example, 'Ascending' or 'Descending').
            </summary>
        </member>
        <member name="T:Demo3D.Gui.LoadCreatorControl">
            <summary>
            Interaction logic for LoadCreatorControl.xaml
            </summary>
            <exclude />
            <summary>
            LoadCreatorControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.LoadCreatorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.LoadCreatorCommands">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualFactoryWrapper">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.LoadCreatorItemWrapper">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.LoadCreatorControlProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.LoadCreatorWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.LoadFilterControl">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.LoadFilterControl.newRowItem">
            VisualFactory name -&gt; combo index
        </member>
        <member name="F:Demo3D.Gui.LoadFilterControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.LoadFilterControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.LoadFilterControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.LoadFilterControl.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            Intercept Return key to cancel edit in combo box.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.LoadFilterEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.LoginForm">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.LoginForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.LoginForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.LoginForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.MeshMaterialCollection">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MeshMaterialCollectionPropertyDescriptorCollection">
            <summary>
            If a MeshMaterialCollection is sorted 10 comes before 1, ignore sort to correct this.
            FIXME: This doesn't work and I'm not sure why. Maybe we can't sort the property collection?
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MeshMaterialCollectionPropertyDescriptor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MeshMaterialCollectionConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MeshMaterialProperty">
            <summary>
            MeshMaterial isn't Owned so we can't lookup the texture reference on it 
            to get the texture stand alone. Wrap it up in a new class that is owned.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.MeshMaterialProperty.NotifyPropertyUpdate">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MeshMaterialPropertyEditor">
            <summary>
            Editor that treats a material as a color unless the texture is set.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MeshMaterialPropertyConverter">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.MeshMaterialPropertyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Allow a texture name to be deleted.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TextureReferenceConverter">
            <summary>
            Override the string shown for a texture reference to make it more readable.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.TextureReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Allow a texture name to be deleted.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TextureReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            We can only convert texture references to strings (for display).
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TextureReferenceConverter.TextureReferenceToString(Demo3D.Gui.MeshMaterialProperty,Demo3D.Visuals.TextureReference)">
            <summary>
            Display a niceley formatted string for the texture.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.MeshEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MeshReferenceObject">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.MeshReferenceObject.GetMeshKey">
            <summary>
            Use same key as ImportedMesh to reuse cache.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Gui.BalloonAlignment">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.BalloonPosition">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.BalloonPosition.Absolute">
            <summary>
            Positions using the exact co-ordinates.
            So if the co-ordinates are outside the screen,
            tip wont be shown.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.BalloonPosition.Track">
            <summary>
            Positions using the co-ordinates as a reference.
            Regardless of the co-ordinates, the tip will 
            always be shown on the screen.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.MessageBalloon">
            <summary>
            A sample class to manipulate ballon tooltips.
            Windows XP balloon-tips if used properly can 
            be very helpful.
            This class creates a balloon tooltip in the form of a message.
            This becomes useful for showing important information 
            quickly to the user.
            For example in a data-entry form full of 
            controls if an error is made somewhere in entering data
            use this to point the bad control.
            This helps in a shorter learning cycle of the 
            application.
            NOTE: the difference between this and HoverBalloon class
            is that this can be shown on demand.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.MessageBalloon.#ctor">
            <summary>
            Creates a new instance of the MessageBalloon.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.MessageBalloon.#ctor(System.Windows.Forms.Control)">
            <summary>
            Creates a new instance of the MessageBalloon.
            </summary>
            <param name="parent">Set the parent control which will display.</param>
        </member>
        <member name="M:Demo3D.Gui.MessageBalloon.Display(System.Int32)">
            <summary>
            Shows or hides the tool.
            </summary>
            <param name="show">0 to hide, -1 to show</param>
        </member>
        <member name="P:Demo3D.Gui.MessageBalloon.Title">
            <summary>
            Sets or gets the Title.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.MessageBalloon.TitleIcon">
            <summary>
            Sets or gets the display icon.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.MessageBalloon.Text">
            <summary>
            Sets or get the display text.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.MessageBalloon.Parent">
            <summary>
            Sets or gets the parent.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.MessageBalloon.Align">
            <summary>
            Sets or gets the placement of the balloon.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.MessageBalloon.UseAbsolutePositioning">
            <summary>
            Sets or gets the positioning of the balloon.
            TRUE : Positions using the exact co-ordinates,
            if the co-ordinates are outside the screen, tip wont be shown.
            FALSE : Positions using the co-ordinates as a reference.
            Regardless of the co-ordinates, the tip will 
            always be shown on the screen.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.MessageBalloon.CenterStem">
            <summary>
            Sets or gets the stem position 
            in the tip. 
            TRUE : The stem of the tip is set to center.
            An attempt is made to show the tip with the stem
            centered, if that would make the tip to be 
            hidden partly, stem is not centered.
            FALSE: Stem is not centered.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.MessageBalloon.Show">
            <summary>
            Show the Message in a balloon tooltip.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.MessageBalloon.Hide">
            <summary>
            Hides the message if visible.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ModuleEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MonitorSpeedMenu">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MonitorSpeedMenu.MonitorSpeedOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MonitorSpeedMenu.MonitorSpeed">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieExporter">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.MovieExportManager.Capture">
            <summary>
            Show file dialog before exporting
            </summary>
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.AVIDialog">
            <summary>
            Interaction logic for AVIDialog.xaml
            </summary>
            <exclude />
            <summary>
            AVIDialog
            </summary>
        </member>
        <member name="M:Demo3D.Gui.MovieFormats.AVIDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.ExportFormatBase">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.MovieExportFormat">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.MovieFormats.MovieExportFormat.ShowOptionsDialog(Demo3D.Visuals.IBuilder)">
            <summary>
            Show the options dialog.
            </summary>
            <param name="app"></param>
            <returns>returns false when cancelled.</returns>
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.IMovieFrameExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.PovMovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.AnimatedPDFMovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.Demo3DMovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.AnimatedFBXExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.IMovieStreamExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.AVIMovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.WMVMovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.MP4MovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.PNGMovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MovieFormats.GIFMovieExportFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MultiLineTextEditor">
            <summary>
            Microsoft Sample Code for MultiLineTextEditor.
            Inluded as MultiLineStringEditor in .Net 2.0.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.NativeMethods">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.NativeMethods.RECT">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.CustomRibbonManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.NewLayerDialog">
            <summary>
            Summary description for NewLayerDialog.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.NewLayerDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.NewLayerDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.NewLayerDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TagBrowser.BindingProperty">
            <summary>
            Self-contained property bag for a property grid giving some feedback and edit capabilities over a binding.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TagBrowser.UnboundProperty">
            <summary>
            Self-contained property bag for a property grid giving some feedback and edit capabilities over an unbound item.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TagBrowser.UnboundProperty.ServerItemNameProperty.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.TagBrowser.UnboundProperty.ServerItemNameProperty.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TagBrowser.UnboundProperty.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.TagBrowser.UnboundProperty.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.OpenFolderDialog.InitialFolder">
            <summary>
            Gets/sets folder in which dialog will be open.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.OpenFolderDialog.DefaultFolder">
            <summary>
            Gets/sets directory in which dialog will be open if there is no recent directory available.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.OpenFolderDialog.SelectedPath">
            <summary>
            Gets selected folder.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.AspectLibraryOptions">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.AspectLibraryOptions.GetAspectLibraryDirectory(Demo3D.Visuals.IBuilder)">
            <summary>
            Get the directory where the AML configurations files should go.
            </summary>
            <param name="app">The current application.</param>
            <returns>Full path to the AML configuration directory.</returns>
        </member>
        <member name="M:Demo3D.Gui.AspectLibraryOptions.GetAspectLibraryPath(Demo3D.Visuals.IBuilder)">
            <summary>
            Get the full path to the AML configuration file.
            </summary>
            <param name="app">The current application.</param>
            <returns></returns>
        </member>
        <member name="P:Demo3D.Gui.AspectLibraryOptions.AspectLibraryVersion">
            <summary>
            Gets or sets the sub directory containing the Aspect Library file.
            The directory containing this is {IBuilder.CompanyDataDirectory}\AspectLibrary (%APPDATA%\Emulate3D\AspectLibrary).
            </summary>
        </member>
        <member name="P:Demo3D.Gui.AspectLibraryOptions.AutomaticGeneration">
            <summary>
            Whether the aspect library file should be automatically generated after catalogs are
            loaded/closed or scripts are compiled.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.BuilderOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ControllerCameraOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.DeviceOptions">
            <summary>
            Class containing options for connected devices such as VR headsets and game controllers.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.DeviceOptions.Enable3DConnexion">
            <summary>
            Gets or sets a value indicating whether the 3Dconnexion mouse is enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DeviceOptions.EnableGameController">
            <summary>
            Gets or sets a value indicating whether any connected game controller is enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DeviceOptions.EnableHeadTracking">
            <summary>
            Gets or sets a value indicating whether head tracking using a VR headset is enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DeviceOptions.EnableStereo">
            <summary>
            Gets or sets a value indicating whether stereo imaging for a VR headset is enabled.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DeviceOptions.FocalLength">
            <summary>
            Gets or sets the focal length in metres for stereo imaging.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.DeviceOptions.EyeSeparation">
            <summary>
            Gets or sets the interocular distance in metres for stereo imaging.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.DirectXOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ExportOptions">
            <summary>
            Class containing options for exporting the model.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.ExportOptions.OpenDirectoryAfterExport">
            <summary>
            Open the target directory once the export has finished
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ExportOptions.UseOptimizedMeshes">
            <summary>
            Optimize meshes when exporting. This affects the visual hierarchy.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ExportOptions.FilterHiddenVisuals">
            <summary>
            Don't export visuals where the visual and its children are hidden.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ExportOptions.RecordCTUpdates">
            <summary>
            Record controls testing updates from the tag browser.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ExportOptions.LastExportDirectory">
            <summary>
            The directory that was last exported to.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ExportOptions.LastExportPreset">
            <summary>
            Name of the preset that was last used when exporting
            </summary>
        </member>
        <member name="T:Demo3D.Gui.FrictionOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.GeneralOptions">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.GeneralOptions.LicenseAutoBorrowTime">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.GeneralOptions.SaveDrawingsAsOld">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.GridOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ImageOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.MouseKeyboardOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PhysicsOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PluginOptions">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.PluginOptions.UserPlugins">
            <summary>
            Current list of plugins and their state.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PluginOptions.UpdatePluginOptions(Demo3D.Visuals.IBuilder,Demo3D.Gui.PluginOptions)">
            <summary>
            Update options with the latest possible plugins.
            </summary>
            <param name="app">Current app</param>
            <param name="options">The Plugin options to update</param>
        </member>
        <member name="P:Demo3D.Gui.PluginOptions.Plugin.Name">
            <summary>
            Name of the plugin
            </summary>
        </member>
        <member name="P:Demo3D.Gui.PluginOptions.Plugin.Category">
            <summary>
            Category of the plugin (Webstore, user etc)
            </summary>
        </member>
        <member name="P:Demo3D.Gui.PluginOptions.Plugin.Type">
            <summary>
            Type of the plugin (C#/JS)
            </summary>
        </member>
        <member name="P:Demo3D.Gui.PluginOptions.Plugin.IsEnabled">
            <summary>
            Is the plugin currently enabled
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SaveOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VideoOptions">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.VideoOptions.FrameBufferSize">
            In Mb
        </member>
        <member name="T:Demo3D.Gui.Parameters">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Parameters.Parse(System.String[])">
            <summary>
             Parse command line arguments.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Parameters.SystemChecks">
            <summary>
            Check System capabilities.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Parameters.CheckDisplayMode">
            <summary>
            Make sure the current display mode can be used as a backbuffer and render target.
            If not need to exit straight away and recommend changing display mode.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.PDF.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.PDF._3DPDFExportCommands">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PDF.EnumConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PDF._3DPDFExportDialog">
            <summary>
            Interaction logic for _3DPDFExportDialogWpf.xaml
            </summary>
            <exclude />
            <summary>
            _3DPDFExportDialog
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PDF._3DPDFExportDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Annotations.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage
            </summary>
            <example><code>
            [CanBeNull] public object Test() { return null; }
            public void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>
            </summary>
            <example><code>
            [NotNull] public object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])" />-like form
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            public void ShowError(string message, params object[] args) { /* do something */ }
            public void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:Demo3D.Gui.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException" />
            </summary>
            <example><code>
            public void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> interface
             and this method is used to notify that some property value changed
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               private string _name;
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
             <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br />
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same)
            for method output means that the methos doesn't return normally.<br />
            <c>canbenull</c> annotation is only applicable for output parameters.<br />
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row,
            or use single attribute with rows separated by semicolon.<br />
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null, and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("s:null=&gt;false; =&gt;true,result:notnull; =&gt;false, result:null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            public class Foo {
              private string str = "my string"; // Warning: Localizable string
            }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            class UsesNoEquality {
              public void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            public class ComponentAttribute : Attribute { }
            [Component] // ComponentAttribute requires implementing IComponent interface
            public class MyComponent : IComponent { }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly
            (e.g. via reflection, in external library), so this symbol
            will not be marked as unused (as well as by other usage inspections)
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper
            to not mark symbols marked with such attributes as unused
            (as well as by other usage inspections)
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.ImplicitUseKindFlags">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used</summary>
        </member>
        <member name="F:Demo3D.Gui.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member</summary>
        </member>
        <member name="F:Demo3D.Gui.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type</summary>
        </member>
        <member name="T:Demo3D.Gui.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly
            when marked with <see cref="T:Demo3D.Gui.Annotations.MeansImplicitUseAttribute" />
            or <see cref="T:Demo3D.Gui.Annotations.UsedImplicitlyAttribute" />
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used</summary>
        </member>
        <member name="F:Demo3D.Gui.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used</summary>
        </member>
        <member name="T:Demo3D.Gui.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled
            when the invoked method is on stack. If the parameter is a delegate,
            indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated
            while the method is executed
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>
            </summary>
            <example><code>
            [Pure] private int Multiply(int x, int y) { return x * y; }
            public void Foo() {
              const int a = 2, b = 2;
              Multiply(a, b); // Waring: Return value of pure method is not used
            }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder
            within a web project. Path can be relative or absolute,
            starting from web root (~)
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcAreaMasterLocationFormatAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcAreaPartialViewLocationFormatAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcAreaViewLocationFormatAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcMasterLocationFormatAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcPartialViewLocationFormatAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcViewLocationFormatAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC controller. If applied to a method,
            the MVC controller name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(String, Object)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that
            the parameter is an MVC partial view. If applied to a method,
            the MVC partial view name is calculated implicitly from the context.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcSupressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling all inspections
            for MVC views within a class or a method.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.HtmlElementAttributesAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.HtmlAttributeValueAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.AdvancedVisualsPropertyGridPlugin">
            <summary>
            Plugin for the Visuals property grid.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SimpleVisualsPropertyGridPlugin">
            <summary>
            Plugin for the Visuals property grid.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.PropertyGridEx">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.PropertyGridEx.PaintImage(System.Drawing.Design.PaintValueEventArgs,System.Drawing.Image)">
            <summary>
            Paint image shrunk into bounds, keeping image aspect ratio.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.PropertyGridIcons">
            <summary>
            Call the static method PropertyGridIcons.Colorize(propertyGrid)
            with the property grid you want to colorize and globalize.
            You never need to instantiate one of these components.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.PropertyGridIcons.Colorize(System.Windows.Forms.PropertyGrid)">
            <summary>
            The only public method you need to colorize your property grid.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertyGridIcons.propertyGrid_SelectedObjectsChanged(System.Object,System.EventArgs)">
            <summary>
            Change the tab and icons whenever the selected object(s) change.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertyGridIcons.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertyGridIcons.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SearchablePropertyGrid">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WpfPropertyGridPane">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.IPropertyDockPane.IsClosed">
            <inheritdoc cref="P:Demo3D.Gui.IDockPane.IsClosed" />
        </member>
        <member name="P:Demo3D.Gui.IPropertyDockPane.PropertyGridText">
            <summary>
            The text to put infront of the property grids caption
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IPropertyDockPane.SelectedObject">
            <summary>
            The selected object to show in the property grid
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IPropertyDockPane.SelectedObjects">
            <summary>
            The selected objects to show in the property grid
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IPropertyDockPane.Text">
            <inheritdoc cref="P:Demo3D.Gui.IDockPane.Text" />
        </member>
        <member name="P:Demo3D.Gui.IPropertyDockPane.Font">
            <summary>
            The font used by the property grid. Only applies to winform property grids.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.IPropertyDockPane.IsHidden">
            <inheritdoc cref="P:Demo3D.Gui.IDockPane.IsHidden" />
        </member>
        <member name="M:Demo3D.Gui.IPropertyDockPane.Invalidate">
            <summary>
            Invalidate the property grid. Only applies to winform property grids.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.IPropertyDockPane.Refresh">
            <summary>
            Refresh the property grid. Only applies to winform property grids.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.IPropertyDockPane.Focus">
            <summary>
            Focus the property grid.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.IPropertyDockPane.Show">
            <inheritdoc cref="M:Demo3D.Gui.IDockPane.Show" />
        </member>
        <member name="T:Demo3D.Gui.WpfVisualPropertyGridPane">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PropertySearchResultsViewer">
            <summary>
            Control for displaying the results of a search in scripts.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.PropertySearchResultsViewer.application">
            <summary>
            The parent application.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.PropertySearchResultsViewer.Application">
            <summary>
            Gets or sets the parent application.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertySearchResultsViewer.#ctor">
            <summary>
            Initializes a new instance of the SearchResultsViewer class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertySearchResultsViewer.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertySearchResultsViewer.listView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Launches a script window to edit the line of code that was double-clicked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="F:Demo3D.Gui.PropertySearchResultsViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertySearchResultsViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.PropertySearchResultsViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.PropertySearchResultsPane">
            <summary>
            A dockable pane to display search in scripts results.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.PropertySearchResultsPane.SearchResultsViewer">
            <summary>
            Gets the SearchResultsViewer being hosted in this pane.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.PropertySearchResultsPane.#ctor(Demo3D.Visuals.IBuilder)">
            <summary>
            Initializes a new instance of the SearchResultsPane class.
            </summary>
            <param name="application">The parent application.</param>
        </member>
        <member name="T:Demo3D.Gui.QRCode.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QRCode.QRCodeViewer">
            <summary>
            Interaction logic for QRCodeViewer.xaml
            </summary>
            <exclude />
            <summary>
            QRCodeViewer
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QRCode.QRCodeViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.AnimatedPath">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.IQuickCamera">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCamera">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickCamera.GetPropertyValue``1(System.String)">
            <summary>
            Get Property value of name 'prop'
            </summary>
            <typeparam name="T"></typeparam>
            <param name="prop"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickCamera.SetPropertyValue(System.Object,System.String)">
            <summary>
            Set property value of name 'prop'
            </summary>
            <param name="value"></param>
            <param name="prop"></param>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraCircleProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraCircle">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraCircleVisualProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraCircleVisual">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraCurveProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraCurve">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.IQuickCameraPreset">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.IQuickCameraGroup">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraGroupProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraGroup">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraLineProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraLine">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraPolygonProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraPolygon">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraScript">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraStationaryProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraStationary">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickMovieProps">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.CameraShape">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.Drawing.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.Drawing.QuickMovieCanvas">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.Drawing.QuickMovieCanvas.#ctor">
            <summary>
            Initializes a new instance of the DrawingController class.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.MovieTimelineController">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.CameraType">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.PositionTargetTimelines">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.PositionTargetTimelines.#ctor(Demo3D.Visuals.IBuilder,Demo3D.Gui.QuickMovie.QuickMovieData,Demo3D.Gui.QuickMovie.Drawing.QuickMovieCanvas,System.Windows.Controls.Border,System.Windows.Controls.Border)">
            <summary>
            Initializes a new instance of the PositionTargetTimeline class.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraPathImporter">
            <summary>
            Interaction logic for QuickCameraPathImporter.xaml
            </summary>
            <exclude />
            <summary>
            QuickCameraPathImporter
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickCameraPathImporter.#ctor(Demo3D.Visuals.IBuilder,System.Collections.Generic.List{System.String})">
            <summary>
            Create a dialog where a visual selector is added for each visual name
            </summary>
            <param name="app"></param>
            <param name="visualNames"></param>
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickCameraPathImporter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraRenderer">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickCameraRenderer.#ctor(System.Windows.Controls.ContentControl,Demo3D.Visuals.IBuilder)">
            <summary>
            Initializes a new instance of the QuickCameraRenderer class.
            </summary>
            <param name="host"></param>
            <param name="app"></param>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickCameraTimelineTooltip">
            <summary>
            Interaction logic for QuickCameraTimelineTooltip.xaml
            </summary>
            <exclude />
            <summary>
            QuickCameraTimelineTooltip
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickCameraTimelineTooltip.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickMovieController">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickMovieData">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickMovieDialog">
            <summary>
            Interaction logic for QuickMovieDialog.xaml
            </summary>
            <exclude />
            <summary>
            QuickMovieDialog
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickMovieDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QuickMovie.QuickMoviePlayer.OpenFileExternally">
            <summary>
            Open generated file
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickMovie.QuickMovieToolbarCreator">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Timeline.QuickCameraTimelineObject">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Timeline.QuickCameraTimelineObject.#ctor(Demo3D.Gui.QuickMovie.QuickCamera)">
            <summary>
            Initializes a new instance of the QuickCameraTimelineObject class.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="T:Demo3D.Gui.Timeline.TimelineControl">
            <summary>
            Interaction logic for Timeline.xaml
            </summary>
            <exclude />
            <summary>
            TimelineControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Timeline.TimelineControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Timeline.TimelineController">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Timeline.TimelineController.#ctor">
            <summary>
            Initializes a new instance of the TimelineController class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Timeline.TimelineController.PlayNext">
            <summary>
            Initialises next playing camera. Returns true if there is one otherwise returns false.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Timeline.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Timeline.DurationChangedHandler">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Timeline.DurationChangedArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Timeline.TimelineObject">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Timeline.TimelineObject.#ctor">
            <summary>
            Initializes a new instance of the TimelineObject class.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Timeline.TimelinePreviewControl">
            <summary>
            Interaction logic for UserControl1.xaml
            </summary>
            <exclude />
            <summary>
            TimelinePreviewControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Timeline.TimelinePreviewControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Timeline.TimelineSliderObject">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.Timeline.TimelineSliderObject.LimitPositionToDuration">
            <summary>
            If true, slider cannot be dragged past max duration
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Timeline.TimelineSliderObject.#ctor(DrawWpf.DraggableCanvas)">
            <summary>
            Initializes a new instance of the TimelineSliderObject class.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickRayTrace.Plugin.QuickRayTraceControlWpf">
            <summary>
            Interaction logic for QuickRayTraceControlWpf.xaml
            </summary>
            <exclude />
            <summary>
            QuickRayTraceControlWpf
            </summary>
        </member>
        <member name="M:Demo3D.Gui.QuickRayTrace.Plugin.QuickRayTraceControlWpf.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickRayTrace.Plugin.QuickRayTraceDockPane">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.QuickRayTrace.Plugin.QuickRayTraceDockPane.IsFileUnlocked(System.String)">
            <summary>
            Locked files cannot be opened with default settings.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickRayTrace.Plugin.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.QuickRayTrace.Plugin.QuickRayTraceModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.QuickRayTrace.Plugin.QuickRayTraceToolbarManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.RayTraceOptionsWindow">
            <summary>
            Interaction logic for RayTraceOptionsWindow.xaml
            </summary>
            <exclude />
            <summary>
            RayTraceOptionsWindow
            </summary>
        </member>
        <member name="M:Demo3D.Gui.RayTraceOptionsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.RayTraceOptionsControl">
            <summary>
            Interaction logic for RayTraceOptionsWpf.xaml
            </summary>
            <exclude />
            <summary>
            RayTraceOptionsControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.RayTraceOptionsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ExternalReferenceEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ExternalReferenceConverter">
            <summary>
            Only display 6 digits after the decimal place for doubles.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ColorMapData">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.ColorMapData.ColorTable">
            <summary>
            Color values by pixel co-ordinates
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ColorMapPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.DepthMapData">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.DepthMapData.DepthImage">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.DepthMapData.DepthTable">
            <summary>
            Depth values by pixel co-ordinates
            </summary>
        </member>
        <member name="M:Demo3D.Gui.DepthMapData.ToTwoByteFloat(System.Byte,System.Byte)">
            <summary>
            Converts two bytes to a float
            </summary>
            <param name="HI"></param>
            <param name="LO"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Gui.DepthMapPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.RenderMapData">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.RenderMapData.RgbaValues">
            <summary>
            All bytes in the image, ordered RGBA. Each color is represented by 8 bits
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapData.RawBytes">
            <summary>
            The raw byte array
            </summary>
        </member>
        <member name="T:Demo3D.Gui.RenderMapBitMode">
            <summary>
            Specifies the bit mode for render maps.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.RenderMapBitMode.Bit8">
            <summary>
            8 bit mode.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.RenderMapBitMode.Bit16">
            <summary>
            16 bit mode.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.RenderMapBitMode.Bit32">
            <summary>
            32 bit mode.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.RenderMapInfo">
            <summary>
            Information used when creating a render map
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.MaxDepth">
            <summary>
            Maximum distance to render.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.MinDepth">
            <summary>
            Minimum distance to render.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.ImageWidth">
            <summary>
            Width of the output image.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.ImageHeight">
            <summary>
            Height of the output image.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.FieldOfViewY">
            <summary>
            Field of view of the render (in degrees).
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.Position">
            <summary>
            Position of the camera.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.Target">
            <summary>
            Target of the camera
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.RotationAngle">
            <summary>
            The rotation of the camera about its forward axis (in radians).
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RenderMapInfo.BitsPerPixel">
            <summary>
            The bit format to capture the image
            </summary>
        </member>
        <member name="T:Demo3D.Gui.DepthMapInfo">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.RenderMapPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ReparentContextTool">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.ReparentContextTool.BuildReparentMenu">
            <summary>
            Build reparent menu with all types 
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ReparentContextTool.CreateReparentButton(Demo3D.Visuals.Visual)">
            <summary>
            Create reparent button for a visual
            </summary>
            <param name="visual"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorer">
            <summary>
            Control for viewing and editing the a UserResourceLibrary visually, Windows Explorer style.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SorterByName">
            <summary>
            Class for sorting items alphabetically by name.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SorterByName.Compare(System.Object,System.Object)">
            <summary>
            Compares two ListViewItem objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first ListViewItem to compare.</param>
            <param name="y">The second ListViewItem to compare.</param>
            <returns>Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.</returns>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SorterByType">
            <summary>
            Class for sorting items alphabetically by file extension.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SorterByType.Compare(System.Object,System.Object)">
            <summary>
            Compares two ListViewItem objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first ListViewItem to compare.</param>
            <param name="y">The second ListViewItem to compare.</param>
            <returns>Less than zero x is less than y. Zero x equals y. Greater than zero x is greater than y.</returns>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DragData">
            <summary>
            Class representing items being dragged internally within the control.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DragData.Items">
            <summary>
            Gets the ListViewItem instances representing the items that are being dragged.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DragData.Copy">
            <summary>
            Gets a value indicating whether the items should be copied rather than moved.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DragData.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Forms.ListViewItem},System.Boolean)">
            <summary>
            Initializes a new instance of the DragData class.
            </summary>
            <param name="items">A list of the ListViewItem instances representing the items that are being dragged.</param>
            <param name="copy">Whether the items should be copied rather than moved.</param>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ClipboardData">
            <summary>
            Class representing items that can be copied to the clipboard.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ClipboardData.Data">
            <summary>
            Gets the UserResourceLibrary instance which contains all the clipboard data.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ClipboardData.AddDirectory(Demo3D.Visuals.UserResourceLibrary,System.String,System.String)">
            <summary>
            Copies a directory from a UserResourceLibrary into our internal UserResourceLibrary instance.
            </summary>
            <param name="library">The UserResourceLibrary from which to copy a directory.</param>
            <param name="sourceDirectory">The local path (within the specified library) of the directory to copy.</param>
            <param name="destinationDirectory">The local path within the internal library of the directory into which to copy the specified directory.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ClipboardData.#ctor(Demo3D.Visuals.UserResourceLibrary,System.Collections.Generic.IList{Demo3D.Visuals.UserResource},System.Collections.Generic.IList{System.String})">
            <summary>
            Initializes a new instance of the ClipboardData class.
            </summary>
            <param name="library">The UserResourceLibrary instance in which the user resources and directories reside.</param>
            <param name="userResources">The UserResource objects representing any user resources being copied to the clipboard.</param>
            <param name="directories">The local paths of any directories being copied to the clipboard.</param>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CopyResult">
            <summary>
            Represents the outcome of a copy, move or import operation.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CopyResult.Copied">
            <summary>
            Items were successfully copied.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CopyResult.Declined">
            <summary>
            The user elected not to go ahead with the copy (for example there was a name clash and they decided not to overwrite).
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CopyResult.Canceled">
            <summary>
            The user canceled the operation.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DocumentName">
            <summary>
            The name we use for the document in the GUI.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.Title">
            <summary>
            Title for message boxes.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.NewDirectoryName">
            <summary>
            The default name for newly created directories.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.NewDirectoryNameWithNumber">
            <summary>
            The default name for newly created directories, but with a number (because the default was taken).
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.application">
            <summary>
            The parent application, we use this to access the current document and catalogs.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.catalogs">
            <summary>
            These are the ICatalogView objects for the libraries that correspond to catalogs.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.document">
            <summary>
            The Document object for the current document, if we're providing access to its user resources.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.libraryNames">
            <summary>
            The names of the currently valid libraries (i.e. root-level directories).
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.currentPath">
            <summary>
            The currently displayed path.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.backStack">
            <summary>
            Stack containing paths for the "Back" button functionality.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.forwardStack">
            <summary>
            Stack containing paths for the "Forward" button functionality.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.mode">
            <summary>
            The current mode of operation for the control.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.selectedResource">
            <summary>
            If Mode is Selection then this contains the selected UserResource.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.selectedDocument">
            <summary>
            If Mode is Selection then this contains the document the selected UserResource lives in, or null if it doesn't come from a document.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.selectedCatalog">
            <summary>
            If Mode is Selection then this contains the catalog the selected UserResource lives in, or null if it doesn't come from a catalog.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.directoryIconIndexes">
            <summary>
            The indexes in the image lists of the normal and persistent directory icons.
            Don't use this directly, call GetDirectoryIconIndex;
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.fileExtensionIconIndexes">
            <summary>
            Maps file extensions to the index in the internal image lists of their corresponding registered icons.
            Each file extension is mapped to an array of two icon indices: the first is the normal icon, the second is the persistent version.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.directoryLastDraggedOver">
            <summary>
            To mimic Windows Explorer behaviour, we need to select directories when we drag something over them, but preserve the existing selection.
            We keep the last directory dragged over here, so we can unselect it when another one is dragged over, but keep any other selection.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.currentSorter">
            <summary>
            The sorter object last used to sort the items in the list view.
            We store this here because we can't store it on the list view itself without it incessantly trying to sort when we don't want it to.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.filter">
            <summary>
            The filter expression used to determine which user resources to display.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.licenseMenu">
            <summary>
            Storage for EncrypterMenu
            </summary>
        </member>
        <member name="E:Demo3D.Gui.ResourceExplorer.ResourceExplorer.PathChanged">
            <summary>
            Occurs when the current path changes.
            </summary>
        </member>
        <member name="E:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ItemSelected">
            <summary>
            Occurs when a user resource is double-clicked in Selection mode.
            </summary>
        </member>
        <member name="E:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ItemRenamed">
            <summary>
            Occurs when a user resource or directory is renamed.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.Application">
            <summary>
            Gets or sets the application that owns this control.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.Mode">
            <summary>
            Gets or sets the current mode of operation for this ResourceExplorer.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SelectedResource">
            <summary>
            Gets the last selected (double-clicked) UserResource if in selection mode.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SelectedDocument">
            <summary>
            Gets the Document object that owns the selected user resource if in selection mode, or null if the user resource is not owned by a document.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SelectedCatalog">
            <summary>
            Gets the Catalog object that owns the selected user resource if in selection mode, or null if the user resource is not owned by a catalog.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CurrentPath">
            <summary>
            Gets the current path.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorer.Filter">
            <summary>
            Gets or sets the filter expression used to determine which user resources to display, e.g. ".bmp;.png".
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetDirectoryIconIndex(System.Boolean,System.Boolean)">
            <summary>
            Gets the index of the directory icon in the image lists.
            </summary>
            <param name="persistent">Whether to get the persistent version of the icon.</param>
            <param name="encrypted">Whether to get the encrypted version of the icon.</param>
            <returns>The index in the internal image lists of the directory icon.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetIconIndexByExtension(System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets the index of the icon needed for a specific file type.
            </summary>
            <param name="fileName">The file name (with or without path) of the file whose icon to get.</param>
            <param name="persistent">Whether to show the version with the persistent overlay.</param>
            <param name="encrypted">Whether to show the version with the encrypted overlay.</param>
            <returns>The index of the relevant icon.</returns>
            <remarks>This method queries Windows for the registered icon for this file type and adds it to the internal image lists if it's not already there.</remarks>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetIconIndex(Demo3D.Visuals.UserResource,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Gets the icon index in the image lists for a specific UserResource instance.
            </summary>
            <param name="userResource">The UserResource instance whose icon to get.</param>
            <param name="library">The library in which the UserResource instance resides.</param>
            <returns>The icon index in the image lists for the specified UserResource.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetIconIndex(System.String,Demo3D.Visuals.UserResourceLibrary)">
            <summary>
            Gets the icon index in the image lists for a specific directory.
            </summary>
            <param name="directoryPath">The path (relative to the library) of the directory.</param>
            <param name="library">The library in which the directory resides.</param>
            <returns>The icon index in the image lists for the specified directory.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SplitPath(System.String,System.String@,System.String@)">
            <summary>
            Splits a path into the library name and the path relative to the library.
            </summary>
            <param name="path">The path to split.</param>
            <param name="libraryName">The library name (the first component of the path).</param>
            <param name="relativePath">The path relative to the library (the rest of the path).</param>
            <remarks>The path must non-null and in the correct format, i.e. no leading or trailing separator.</remarks>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetCurrentLibraryName">
            <summary>
            Gets the name of the library currently being viewed.
            </summary>
            <returns>The name of the library currently being viewed.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetLibrary(System.String)">
            <summary>
            Gets the UserResourceLibrary instance corresponding to the specified library name.
            </summary>
            <param name="libraryName">The name of the library (either document or catalog) to retrieve.</param>
            <returns>The instance of UserResourceLibrary with the specified library name.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CanEditOrViewLibrary(System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether a specified library can be edited/viewed
            </summary>
            <param name="libraryName">The name of the library to check.</param>
            <param name="edit">true, then check for editing, false, check for viewing.</param>
            <returns>true if the specified library can be edited/viewed; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CanEditLibrary(System.String)">
            <summary>
            Gets a value indicating whether a specified library can be edited.
            </summary>
            <param name="libraryName">The name of the library to check.</param>
            <returns>true if the specified library can be edited; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CanViewLibrary(System.String)">
            <summary>
            Gets a value indicating whether a specified library can be viewed.
            </summary>
            <param name="libraryName">The name of the library to check.</param>
            <returns>true if the specified library can be viewed; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ValidatePath(System.String)">
            <summary>
            Checks if a given path is a valid path to navigate to, throwing an appropriate exception if it's not.
            </summary>
            <param name="path">The path to validate.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DeleteUserResource(Demo3D.Visuals.UserResourceLibrary,Demo3D.Visuals.UserResource)">
            <summary>
            Deletes a UserResource instance from a specified UserResourceLibrary, ensuring that any external editor is deleted.
            </summary>
            <param name="library">The UserResourceLibrary in which the UserResource instance resides.</param>
            <param name="userResource">The UserResource instance to delete.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DeleteDirectory(Demo3D.Visuals.UserResourceLibrary,System.String)">
            <summary>
            Deletes a directory from a specified UserResourceLibrary, ensuring that any external editors are deleted.
            </summary>
            <param name="library">The UserResourceLibrary in which the directory resides.</param>
            <param name="directoryPath">The local path of the directory to delete.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.Sort">
            <summary>
            Sorts the items using the last used sorter.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ApplyCurrentPath">
            <summary>
            Navigates to the path specified in this.currentPath in the GUI.
            Note that we assume here that the path is completely valid, and so we do no checks.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetParentDirectory(System.String)">
            <summary>
            Gets the parent directory of a specific directory.
            </summary>
            <param name="path">The path of the directory whose parent directory to get.</param>
            <returns>The path of the parent directory.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ParseFilterExpression">
            <summary>
            Decomposes the current value of the Filter property into a set of lower case file extensions.
            </summary>
            <returns>The list of file extensions that make up the filter expression (each converted to lower case) or null if no filter is specified.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GoBack">
            <summary>
            Navigates to the previously visited directory.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GoForward">
            <summary>
            Navigates to the directory being viewed before the last time "Back" was pressed.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GoUp">
            <summary>
            Nagivates up to the parent directory.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ViewAsIcons">
            <summary>
            Switches to icon view.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ViewAsList">
            <summary>
            Switches to list view.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ArrangeByName">
            <summary>
            Arranges the icons alphabetically by name.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ArrangeByType">
            <summary>
            Arranges the icons alphabetically by file extension.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CutCurrentSelection">
            <summary>
            Copies the currently selected items to the clipboard and deletes them.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CopyCurrentSelection">
            <summary>
            Copies the currently selected items to the clipboard.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.PasteIntoCurrentDirectory">
            <summary>
            Pastes the contents of the clipboard into the current directory.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.DeleteCurrentSelection(System.Boolean)">
            <summary>
            Deletes the currently selected items.
            </summary>
            <param name="promptUser">Whether to display a message box asking the user to confirm whether to delete the selected items.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SelectAllItems">
            <summary>
            Selects all the items in the current view.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SetCurrentSelectionPersistence(Demo3D.Visuals.UserResourcePersistence)">
            <summary>
            Sets the Persistent property of the currently selected items.
            </summary>
            <param name="persistence">The new persistence setting for the currently selected items.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ApplyExternalChanges">
            <summary>
            Applies any changes made to the content of the currently selected user resource in an external editor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.StopEditingExternally">
            <summary>
            Stops editing the currently selected user resource externally.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ExportCurrentSelection">
            <summary>
            Exports the currently selected items as files or directories.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CreateOrUpdateUserResourceItem(Demo3D.Visuals.UserResourceLibrary,Demo3D.Visuals.UserResource,System.Boolean,System.String[])">
            <summary>
            Creates a new list view item for a specified user resource (if not filtered out), or updates the existing one if there is one.
            </summary>
            <param name="library">The UserResourceLibrary instance in which the user resource resides.</param>
            <param name="userResource">The UserResource instance corresponding to the item to create or update.</param>
            <param name="select">Whether to make the list view item selected.</param>
            <param name="filters">The set of file extensions to filter on for display, or null if no filter should be applied.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CreateDirectoryItemIfNecessary(Demo3D.Visuals.UserResourceLibrary,System.String,System.Boolean)">
            <summary>
            Creates a new list view item for a specified directory if one doesn't already exist for it.
            </summary>
            <param name="library">The UserResourceLibrary instance in which the directory resides.</param>
            <param name="directoryPath">The local path of the directory.</param>
            <param name="select">Whether to make the list view item selected.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CreateNewDirectory">
            <summary>
            Creates a new subdirectory in the current directory.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CreateFile(Demo3D.Visuals.UserResourceLibrary,System.String,System.String,System.Boolean,System.String[],System.Nullable{Demo3D.Visuals.UserResourcePersistence},System.String)">
            <summary>
            Creates a new user resource from an external file, creating or updating a list view item if necessary.
            </summary>
            <param name="library">The UserResourceLibrary to create the new user resource in.</param>
            <param name="sourcePath">The source path of the new user resource.</param>
            <param name="localPath">The name and path relative to the library of the new user resource.</param>
            <param name="isCurrentDirectory">Whether the file is being created in the currently displayed directory.</param>
            <param name="filters">The set of file extensions to filter on for display, or null if no filter should be applied.</param>
            <param name="persistence"></param>
            <param name="encrypter"></param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ImportExternalFile(System.String,Demo3D.Visuals.UserResourceLibrary,System.String,System.Boolean,System.String[])">
            <summary>
            Creates a new UserResource in a specified directory in a specified library from an external file.
            </summary>
            <param name="sourcePath">The full path of the file to import.</param>
            <param name="library">The UserResourceLibrary into which to add the specified file as a new UserResource.</param>
            <param name="relativePath">The path of the directory (within the library) into which to add the file.</param>
            <param name="isCurrentDirectory">Whether the file is being imported into the currently displayed directory.</param>
            <param name="filters">The set of file extensions to filter on for display, or null if no filter should be applied.</param>
            <returns>A CopyResult indicating whether the import went ahead, was refused due to a name clash, or canceled.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ImportExternalDirectory(System.String,Demo3D.Visuals.UserResourceLibrary,System.String,System.Boolean)">
            <summary>
            Assimilates an external directory into a specified UserResource library, creating new UserResource instances for each file.
            </summary>
            <param name="sourcePath">The full path of the external directory.</param>
            <param name="library">The UserResourceLibrary into which to assimilate the directory.</param>
            <param name="relativePath">The path of the directory (within the library) into which to copy the directory. This cannot be empty.</param>
            <param name="isCurrentDirectory">Whether the file is being imported into the currently displayed directory.</param>
            <returns>A CopyResult indicating whether the import went ahead, was refused due to a name clash, or canceled.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ImportExternalItems(System.String[],System.String)">
            <summary>
            Imports a set of external files or directories into a specific directory.
            </summary>
            <param name="sourcePaths">The full disk paths of the files and directories to import.</param>
            <param name="path">The path of the directory to import the items into.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ExportUserResource(Demo3D.Visuals.UserResource,System.String)">
            <summary>
            Writes the contents of a user resource to a file on disk.
            </summary>
            <param name="userResource">The UserResource instance whose contents to write to disk.</param>
            <param name="fileName">The full name and path of the file to write to.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ExportDirectory(Demo3D.Visuals.UserResourceLibrary,System.String,System.String)">
            <summary>
            Exports a directory and its contents to disk.
            </summary>
            <param name="library">The UserResourceLibrary instance in which the directory resides.</param>
            <param name="sourceDirectory">The local path of the directory to export.</param>
            <param name="destinationDirectory">The full path (on disk) of the directory into which to export a copy of the specified directory.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ExportToTemporaryLocation(Demo3D.Visuals.UserResourceLibrary,System.Collections.Generic.IList{Demo3D.Visuals.UserResource},System.Collections.Generic.IList{System.String})">
            <summary>
            Exports a set of user resources and directories to a temporary location on disk.
            </summary>
            <param name="library">The UserResourceLibrary instance in which the user resources and directories reside.</param>
            <param name="userResources">The UserResource instances to export.</param>
            <param name="directories">The local paths of the directories to export.</param>
            <returns>An array containing the full disk paths of the files and directories that have been created.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CopyUserResource(Demo3D.Visuals.UserResourceLibrary,Demo3D.Visuals.UserResource,Demo3D.Visuals.UserResourceLibrary,System.String,System.Boolean)">
            <summary>
            Copies a UserResource instance from one UserResourceLibary instance to another, optionally deleting the original.
            </summary>
            <param name="sourceLibrary">The UserResourceLibrary to copy the UserResource from.</param>
            <param name="userResource">The UserResource instance to copy.</param>
            <param name="destinationLibrary">The UserResourceLibrary to copy the UserResource to.</param>
            <param name="destinationDirectory">The local path (within the destination library) of the directory into which to copy the UserResource.</param>
            <param name="deleteOriginal">Whether to delete the original UserResource after copying.</param>
            <returns>A CopyResult indicating whether the copy went ahead, was refused due to a name clash, or canceled.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CopyDirectory(Demo3D.Visuals.UserResourceLibrary,System.String,Demo3D.Visuals.UserResourceLibrary,System.String,System.Boolean)">
            <summary>
            Copies a directory from one UserResourceLibary instance to another, optionally deleting the original.
            </summary>
            <param name="sourceLibrary">The UserResourceLibrary to copy the directory from.</param>
            <param name="sourceDirectory">The local path (within the source library) of the directory to copy.</param>
            <param name="destinationLibrary">The UserResourceLibrary to copy the directory to.</param>
            <param name="destinationDirectory">The local path (within the destination library) of the directory into which to copy the source directory.</param>
            <param name="deleteOriginal">Whether to delete the original source directory after copying.</param>
            <returns>A CopyResult indicating whether the copy went ahead, was refused due to a name clash, or canceled.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.MoveOrCopyDraggedItems(Demo3D.Gui.ResourceExplorer.ResourceExplorer.DragData,System.String)">
            <summary>
            Moves or copies a set of items that were dragged into a directory internally.
            </summary>
            <param name="data">A DragData containing information about the items that were dragged.</param>
            <param name="destinationDirectoryName">The name of the directory they were dragged into.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.PasteClipboardItems(Demo3D.Gui.ResourceExplorer.ResourceExplorer.ClipboardData)">
            <summary>
            Pastes a set of user resources and/or directories from the clipboard into the current directory.
            </summary>
            <param name="data">A ClipboardData containing information about the items on the clipboard.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.SetLibraryDirty(System.String)">
            <summary>
            Sets the NeedsSave flag on the a specified library's catalog or document.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetPersistence(System.Windows.Forms.ListViewItem)">
            <summary>
            Gets the persistence setting for an item in the current view.
            </summary>
            <param name="item">The ListViewItem representing the directory or user resource whose persistence to get.</param>
            <returns>A UserResourcePersistence value representing the persistence setting for the specified item.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.UpdatePersistenceMenu">
            <summary>
            Updates the checked state of the items in the Persistence menu to reflect the current selection.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.CanPaste">
            <summary>
            Returns a value indicating whether there is anything in the clipboard we can paste and it can be pasted here.
            </summary>
            <returns>true if there is data that can be pasted in the current directory; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.UpdateMenuItems">
            <summary>
            Updates visibility/enabledness of the menu options.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.UpdateSelectedResource(Demo3D.Visuals.UserResource)">
            <summary>
            Populates the SelectedResource, SelectedDocument and SelectedCatalog properties.
            </summary>
            <param name="userResource">The selected UserResource instance.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetCurrentEncrypter">
            <summary>
            Get the current encrypter string from document or catalog
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.toolbarsManager_ToolClick(System.Object,Demo3D.Controls.ToolClickEventArgs)">
            <summary>
            Callback for when a toolbar tool is clicked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A ToolClickEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.contentListView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Either opens a directory, or selects/edits a file (depending on the current mode).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.contentListView_DragOver(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Selects a directory if you drag over it.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.contentListView_DragDrop(System.Object,System.Windows.Forms.DragEventArgs)">
            <summary>
            Creates UserResource objects for files dropped into the control.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A DragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.contentListView_ItemDrag(System.Object,System.Windows.Forms.ItemDragEventArgs)">
            <summary>
            Allows user resources and directories to be dragged into other directories internally or out as actual files and directories.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An ItemDragEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.contentListView_BeforeLabelEdit(System.Object,System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            Checks whether the label that's being edited can in fact be edited.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A LabelEditEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.contentListView_AfterLabelEdit(System.Object,System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            Updates the name of the underlying UserResource or directory, or complains to the user if the name is taken.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A LabelEditEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.contentListView_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Shows/hides and enables/disables buttons that depend on what's selected.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.OnEnter(System.EventArgs)">
            <summary>
            Raises the Enter event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.OnPathChanged(System.EventArgs)">
            <summary>
            Raises the PathChanged event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.OnItemSelected(System.EventArgs)">
            <summary>
            Raises the ItemSelected event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.OnItemRenamed(Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs)">
            <summary>
            Raises the ItemRenamed event.
            </summary>
            <param name="e">A UserResourceRenameEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.#ctor(Demo3D.Visuals.IBuilder)">
            <summary>
            Initializes a new instance of the ResourceExplorer class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.IsValidPath(System.String)">
            <summary>
            Checks if a given path is a valid path to navigate to.
            </summary>
            <param name="path">The path to validate.</param>
            <returns>true if the path is valid; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.NavigateTo(System.String)">
            <summary>
            Navigates to a specific path, updating the history.
            </summary>
            <param name="path">The path to navigate to.
            The first component of the path is the key for the library, all subsequent components refer to directories within that library.
            System.IO.Path.DirectorySeparatorChar is the separator used in this path, and no leading or trailing separator is expected.
            For example, "Catalog1\Dir1\Dir2".</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.ResetPath(System.String)">
            <summary>
            Navigates to a specified path and clears the back/forward history.
            </summary>
            <param name="path">The path to navigate to.
            The first component of the path is the key for the library, all subsequent components refer to directories within that library.
            System.IO.Path.DirectorySeparatorChar is the separator used in this path, and no leading or trailing separator is expected.
            For example, "Catalog1\Dir1\Dir2".</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.RefreshView">
            <summary>
            Refreshes the current view, taking into account the possibility that the current path might no longer be valid.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.GetCatalogAlias(Demo3D.Visuals.Catalog)">
            <summary>
            Gets the name being used for a specific catalog's user resource library in paths.
            This will be the catalog's actual name unless there are multiple catalogs loaded with the same name, in which case a number will be appended to make it unique.
            </summary>
            <param name="catalog">The Catalog instance whose alias to get.</param>
            <returns>The name being used to refer to the specific catalog's user resource library in this control.</returns>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorerMode">
            <summary>
            Represents the modes a ResourceExplorer is capable of operating in.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerMode.Selection">
            <summary>
            Represents a mode in which the ResourceExplorer is used for selecting an item or items from a UserResourceLibrary.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerMode.Editing">
            <summary>
            Represents a mode in which the ResourceExplorer is used for editing items in a UserResourceLibrary.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog">
            <summary>
            Class 
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog">
            <summary>
            This is the actual dialog form itself.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.title">
            <summary>
            The title to display in the title bar along side the current path.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.resourceExplorer">
            <summary>
            The ResourceExplorer control that actually does the work.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.SelectedResource">
            <summary>
            Gets the user resource that was selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.SelectedDocument">
            <summary>
            Gets the Document object that owns the selected user resource, or null if the user resource is not owned by a document.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.SelectedCatalog">
            <summary>
            Gets the Catalog object that owns the selected user resource, or null if the user resource is not owned by a catalog.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.PathChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Updates the title bar with the current path.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.ItemSelectedHandler(System.Object,System.EventArgs)">
            <summary>
            Saves the relevant information and closes the form.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.ItemRenamedHandler(System.Object,Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs)">
            <summary>
            Updates all references to the renamed item (after asking the user).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A UserResourceRenameEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Dialog.#ctor(Demo3D.Visuals.IBuilder,System.String,System.String,Demo3D.Visuals.Catalog,System.String)">
            <summary>
            Initializes a new instance of the Dialog class.
            </summary>
            <param name="application">The parent application.</param>
            <param name="title">The title to display in the title bar along side the current path.</param>
            <param name="initialPath">The initial path to display, if a specific path should be displayed.</param>
            <param name="initialCatalog">The Catalog instance whose user resource library to display, if a specific catalog should be displayed.</param>
            <param name="filter">The filter expression to use to determine which user resources to display.</param>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Title">
            <summary>
            Gets or sets the title for the dialog, to be displayed along side the current path.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed when the dialog is shown.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.InitialCatalog">
            <summary>
            Gets or sets the Catalog instance whose user resource library should be displayed when the dialog is shown.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.SelectedResource">
            <summary>
            Gets the UserResource instance representing the selected user resource, or null if none was selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.SelectedDocument">
            <summary>
            Gets the Document object that owns the selected user resource, or null if the user resource is not owned by a document.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.SelectedCatalog">
            <summary>
            Gets the Catalog object that owns the selected user resource, or null if the user resource is not owned by a catalog.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.Filter">
            <summary>
            Gets or sets the filter expression used to determine which files to display, for example ".wav;.mp3".
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.#ctor">
            <summary>
            Initializes a new instance of the ResourceExplorerDialog class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerDialog.ShowDialog(Demo3D.Visuals.IBuilder)">
            <summary>
            Displays the dialog modally.
            </summary>
            <param name="application">The parent application.</param>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.IconSize">
            <summary>
            Represents the size of a user resource or directory icon in the Resource Explorer.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.IconSize.Small">
            <summary>
            Represents 16x16 icons used in 'List' view, for example.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.IconSize.Large">
            <summary>
            Represents 32x32 icons used in 'Icons' view, for example.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow">
            <summary>
            Class representing a dockable Resource Explorer window, and providing global access to a single instance.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet">
            <summary>
            Class represent all combinations of icons needed for a specific type of item.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.normalIcons">
            <summary>
            These are the normal versions of the icon.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.persistentIcons">
            <summary>
            These are the persistent versions of the icon, which are generated from the normal versions.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.encryptedIcons">
            <summary>
            These are the locked versions of the icon, which are generated from the normal versions.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.encryptedPersistentIcons">
            <summary>
            These are the locked versions of the icon, which are generated from the normal versions.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.ApplyPersistentOverlay(System.Drawing.Image,Demo3D.Gui.ResourceExplorer.IconSize)">
            <summary>
            Applies the persistent overlay to an icon.
            </summary>
            <param name="icon">The icon to apply the persistent overlay to.</param>
            <param name="size">The size of the icon.</param>
            <returns>A new image containing the original icon with the persistent overlay added.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.ApplyEncryptedOverlay(System.Drawing.Image,Demo3D.Gui.ResourceExplorer.IconSize)">
            <summary>
            Applies the encrypted overlay to an icon.
            </summary>
            <param name="icon">The icon to apply the overlay to.</param>
            <param name="size">The size of the icon.</param>
            <returns>A new image containing the original icon with the overlay added.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.ApplyEncryptedPersistentOverlay(System.Drawing.Image,Demo3D.Gui.ResourceExplorer.IconSize)">
            <summary>
            Applies the encrypted and persistent overlay to an icon.
            </summary>
            <param name="icon">The icon to apply the overlays to.</param>
            <param name="size">The size of the icon.</param>
            <returns>A new image containing the original icon with the overlays added.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.#ctor">
            <summary>
            Initializes a new instance of the IconSet class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.Contains(Demo3D.Gui.ResourceExplorer.IconSize)">
            <summary>
            Returns a value indicating whether an icon of a specified size has been supplied.
            </summary>
            <param name="size">The size of the icon to check for.</param>
            <returns>true if an icon of the specified size has been supplied; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.SetIcon(Demo3D.Gui.ResourceExplorer.IconSize,System.Drawing.Image)">
            <summary>
            Sets the normal icon of a specific size.
            </summary>
            <param name="size">The size of the icon to set.</param>
            <param name="icon">The image associated with the specified size.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IconSet.GetIcon(Demo3D.Gui.ResourceExplorer.IconSize,System.Boolean,System.Boolean)">
            <summary>
            Gets the icon of the specified size and persistence.
            </summary>
            <param name="size">The size of the icon to retrieve.</param>
            <param name="persistent">Whether to retrieve the persistent version of the icon.</param>
            <param name="encrypted">Whether to retrieve the encrypted version of the icon.</param>
            <returns>The requested icon.</returns>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor">
            <summary>
            Provides a wrapper around an external program being used to edit the contents of a user resource.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.application">
            <summary>
            The parent application.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.userResource">
            <summary>
            The UserResource instance being edited.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.catalogName">
            <summary>
            The name of the catalog the user resource belongs to, or null if it belongs to the document.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.fileName">
            <summary>
            The full name and path of the temporary file which the editor is using to edit the contents.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.directoryPath">
            <summary>
            The full path of the temporary directory in which the file resides.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.watcher">
            <summary>
            Used to monitor changes to the temporary file, so we know if it's been modified.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.process">
            <summary>
            The process for the editor program itself.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.modified">
            <summary>
            Whether the temporary file has been modified by the editor.
            </summary>
        </member>
        <member name="E:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.Exited">
            <summary>
            Occurs when the editor that is editing the temporary file has exited.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.UserResource">
            <summary>
            Gets the UserResource instance being edited.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.Catalog">
            <summary>
            Get the Catalog associated with this editor
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.Modified">
            <summary>
            Gets a value indicating whether the contents of the file have been modified.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.ExitedHandler(System.Object,System.EventArgs)">
            <summary>
            Stops watching the file and raises the Exited event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.ChangedHandler(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Updates the modified flag.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A FileSystemEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.OnExited(System.EventArgs)">
            <summary>
            Raises the Exited event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.Dispose(System.Boolean)">
            <summary>
            Release all resources used, including the watcher, external process and temporary file.
            </summary>
            <param name="disposing">Whether this method was called from IDisposable.Dispose.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.#ctor(Demo3D.Visuals.IBuilder,Demo3D.Visuals.UserResource,System.String)">
            <summary>
            Initializes a new instance of the ExternalEditor class.
            </summary>
            <param name="application">The parent application.</param>
            <param name="userResource">The UserResource instance to be edited.</param>
            <param name="catalogName">The name of the catalog the user resource belongs to, or null if it belongs to the document.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.Start">
            <summary>
            Creates a temporary file from the user resource and starts an editor program for it.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.ApplyChanges">
            <summary>
            Applies any changes made in the editor to the actual user resource.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.Dispose">
            <summary>
            Release all resources used by the ExternalEditor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditor.Finalize">
            <summary>
            Cleans up any unmanaged resources.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ResourceExplorerKey">
            <summary>
            The key for the DockAreaPane used by this window.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ControlsRegistryKey">
            <summary>
            The registry key for the user preferences.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.UserPreferencesSeparator">
            <summary>
            The separator used in the registry string containing the Resource Explorer preferences.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.FilterExpressionSeparator">
            <summary>
            The separator used between individual filters in a filter expression.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.Title">
            <summary>
            The title bar caption when not in a folder.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.application">
            <summary>
            The parent application.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.dockManager">
            <summary>
            The DockManager we add ourselves to.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.window">
            <summary>
            This is the single instance of this class that we're managing.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.iconsByExtension">
            <summary>
            Maps file extensions (in lower case) to the sets of icons associated with those file extensions.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.unknownIcons">
            <summary>
            The set of icons for unknown file types.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.directoryIcons">
            <summary>
            The set of icons for directories.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.externalEditors">
            <summary>
            Any external editors currently being used to edit user resources.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.resourceExplorer">
            <summary>
            The ResourceExplorer control itself.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.#ctor">
            <summary>
            Initializes a new instance of the ResourceExplorerWindow class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.PathChangedHandler(System.Object,System.EventArgs)">
            <summary>
            Updates the title bar with the current path.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IsValidFilter(System.String)">
            <summary>
            Returns a value indicating whether a component of a filter expression is valid.
            </summary>
            <param name="filter">The filter to check for validity (e.g. ".wmv").</param>
            <returns>true if the filter is valid; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.GetUnknownIcon(Demo3D.Gui.ResourceExplorer.IconSize,System.Boolean,System.Boolean)">
            <summary>
            Gets the unknown file type icon.
            </summary>
            <param name="size">The size of the icon.</param>
            <param name="persistent">Whether the icon should have the persistent overlay.</param>
            <param name="encrypted">Whether the icon should have the encrypted overlay.</param>
            <returns>The icon corresponding to the given specification.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ItemRenamedHandler(System.Object,Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs)">
            <summary>
            Updates all references to the renamed item (after asking the user).
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A UserResourceRenameEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ExternalEditorExitedHandler(System.Object,System.EventArgs)">
            <summary>
            Disposes of the external editor that exited, optionally updating the user resource with any changes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.GetIconByExtension(System.String,Demo3D.Gui.ResourceExplorer.IconSize,System.Boolean,System.Boolean)">
            <summary>
            Gets the icon associated with a particular file extension.
            </summary>
            <param name="fileExtension">A file extension with which the requested icon is associated.</param>
            <param name="size">The size of the icon.</param>
            <param name="persistent">Whether the icon should have the persistent overlay.</param>
            <param name="encrypted">Whether the icon should have the encrypted overlay.</param>
            <returns>The icon corresponding to the given specification.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.GetDirectoryIcon(Demo3D.Gui.ResourceExplorer.IconSize,System.Boolean,System.Boolean)">
            <summary>
            Gets the directory icon.
            </summary>
            <param name="size">The size of the icon.</param>
            <param name="persistent">Whether the icon should have the persistent overlay.</param>
            <param name="encrypted">Whether the icon should have the encrypted overlay.</param>
            <returns>The icon corresponding to the given specification.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.IsValidFilterExpression(System.String)">
            <summary>
            Returns a value indicating whether a specified filter expression is valid.
            </summary>
            <param name="filterExpression">The filter expression to check for validity.</param>
            <returns>true if the filter expression is valid; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.ShowDialog(Demo3D.Visuals.IBuilder,Demo3D.Visuals.Catalog,System.String)">
            <summary>
            Shows a Resource Explorer window modally and returns when an item is selected (double-clicked).
            </summary>
            <param name="application">The parent application.</param>
            <param name="initialCatalog">The Catalog instance whose resource to start browsing, or null to start at the root.</param>
            <param name="filter">The filter expression used to determine which user resources to display.</param>
            <returns>The selected UserResource object if one was selected; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.LaunchExternalEditor(Demo3D.Visuals.UserResource,System.String)">
            <summary>
            Launches an editor for a specified user resource depending on what program Windows has registered for its file type, and modifies it in-place.
            </summary>
            <param name="userResource">The UserResource object to be edited.</param>
            <param name="catalogName">The name of the catalog the user resource belongs to, or null if belongs to the document.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.GetExternalEditor(Demo3D.Visuals.UserResource)">
            <summary>
            Gets the ExternalEditor object associated with a user resource being edited externally.
            </summary>
            <param name="userResource">The UserResource instance whose external editor to get.</param>
            <returns>The ExternalEditor instance associated with the specified user resource if there is one; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.StopEditingExternally(Demo3D.Visuals.UserResource)">
            <summary>
            Disposes of the ExternalEditor object associated with a user resource if it is being edited externally.
            </summary>
            <param name="userResource">The UserResource instance whose external editor to dispose of.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.Initialize(Demo3D.Visuals.IBuilder,Demo3D.Gui.DockManager)">
            <summary>
            Initializes this class.
            </summary>
            <param name="application">The parent application.</param>
            <param name="dockManager">The DockManager to add the Resource Explorer pane to.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.Finalize">
            <summary>
            Cleans up any resources used by this class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.NavigateTo(System.String)">
            <summary>
            Navigates to a particular path in the Resource Explorer window, creating or displaying the Resource Explorer window if necessary.
            </summary>
            <param name="path">The path to navigate to.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.NavigateToCatalog(Demo3D.Visuals.Catalog)">
            <summary>
            Navigates to a particular catalog's user resource library in the Resource Explorer window, creating or displaying the Resource Explorer window if necessary.
            </summary>
            <param name="catalog">The Catalog instance whose user resource library to navigate to.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.Refresh">
            <summary>
            Refreshes the current view in the Resource Explorer.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.GetUserPreferences(Demo3D.Gui.DockLocation@,System.Drawing.Rectangle@)">
            <summary>
            Reads the saved location and size of the Resource Explorer window from the registry.
            </summary>
            <param name="location">The dock location of the Resource Explorer window.</param>
            <param name="bounds">The bounding rectangle of the Resource Explorer window.</param>
            <returns>true if the values were read successfully; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.SaveUserPreferences">
            <summary>
            Saves the location and size of the Resource Explorer window to the registry.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.ResourceExplorerWindow.OnClose(System.Boolean@)">
            <summary>
            Closes the pane.
            </summary>
            <param name="closeChildPane">A value indicating whether to close the child pane.</param>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.SHFILEINFO">
            <summary>
            Represents the Windows API SHFILEINFO struct.
            Yes, this is horrible nasty interop code.
            Sorry.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.Win32">
            <summary>
            Container for the Windows API SHGetFileInfo function prototype.
            More horrible and nasty interop code, sorry.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs">
            <summary>
            Provides data for the ResourceExplorer.ItemRenamed event.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs.OldLocalPath">
            <summary>
            Gets the old local path of the item that was renamed.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs.NewLocalPath">
            <summary>
            Gets the new local path of the item that was renamed.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs.IsDirectory">
            <summary>
            Gets a value indicating whether it is a directory that was renamed.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs.Document">
            <summary>
            Gets the Document object that owns the renamed item, or null if it is not owned by a document.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs.Catalog">
            <summary>
            Gets the Catalog object that owns the renamed item, or null if it is not owned by a catalog.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs.#ctor(System.String,System.String,System.Boolean,Demo3D.Visuals.Document)">
            <summary>
            Initializes a new instance of the UserResourceRenameEventArgs class with details of a modified document item.
            </summary>
            <param name="oldLocalPath">The old local path of the item that was renamed.</param>
            <param name="newLocalPath">The new local path of the item that was renamed.</param>
            <param name="isDirectory">Whether the renamed item is a directory.</param>
            <param name="document">The Document object that owns the renamed item.</param>
        </member>
        <member name="M:Demo3D.Gui.ResourceExplorer.UserResourceRenameEventArgs.#ctor(System.String,System.String,System.Boolean,Demo3D.Visuals.Catalog)">
            <summary>
            Initializes a new instance of the UserResourceRenameEventArgs class with details of a modified catalog item.
            </summary>
            <param name="oldLocalPath">The old local path of the item that was renamed.</param>
            <param name="newLocalPath">The new local path of the item that was renamed.</param>
            <param name="isDirectory">Whether the renamed item is a directory.</param>
            <param name="catalog">The Catalog object that owns the renamed item.</param>
        </member>
        <member name="T:Demo3D.Gui.RichTextBoxEx">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.RichTextBoxEx.InsertLink(System.String)">
            <summary>
            Insert a given text as a link into the RichTextBox at the current insert position.
            </summary>
            <param name="text">Text to be inserted</param>
        </member>
        <member name="M:Demo3D.Gui.RichTextBoxEx.InsertLink(System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. 
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Demo3D.Gui.RichTextBoxEx.InsertLink(System.String,System.String)">
            <summary>
            Insert a given text at at the current input position as a link.
            The link text is followed by a hash (#) and the given hyperlink text, both of
            them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
        </member>
        <member name="M:Demo3D.Gui.RichTextBoxEx.InsertLink(System.String,System.String,System.Int32)">
            <summary>
            Insert a given text at a given position as a link. The link text is followed by
            a hash (#) and the given hyperlink text, both of them invisible.
            When clicked on, the whole link text and hyperlink string are given in the
            LinkClickedEventArgs.
            </summary>
            <param name="text">Text to be inserted</param>
            <param name="hyperlink">Invisible hyperlink string to be inserted</param>
            <param name="position">Insert position</param>
        </member>
        <member name="M:Demo3D.Gui.RichTextBoxEx.SetSelectionLink(System.Boolean)">
            <summary>
            Set the current selection's link style
            </summary>
            <param name="link">true: set link style, false: clear link style</param>
        </member>
        <member name="M:Demo3D.Gui.RichTextBoxEx.GetSelectionLink">
            <summary>
            Get the link style for the current selection
            </summary>
            <returns>0: link style not set, 1: link style set, -1: mixed</returns>
        </member>
        <member name="T:Demo3D.Gui.RichTextBoxEx.Link">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.RichTextControl">
            <summary>
            Summary description for RichTextControl.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.RichTextControl.Editable">
            <summary>
            Show or hide the edit toolbar and make the rich text read only or not.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.RichTextControl.Edited">
            <summary>
            Has the rich text been edited?
            </summary>
        </member>
        <member name="M:Demo3D.Gui.RichTextControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.RichTextControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ClickLinkHandler">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.FilterNoteDelegate">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.RichTextDockPane">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SampleLoads">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.SampleLoads.CreateDefaultLoadCatalog(Demo3D.Visuals.IBuilder,Demo3D.Visuals.Catalog)">
            <summary>
            Create a sample catalog of loads.
            This will always guarantee to produce at least 1 load visual,
            if no external meshes can be found loaded it will return a single
            colored box.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Screenshot">
            <summary>
            A screenshot helper class
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Screenshot.SnapshotModel(Demo3D.Visuals.IBuilder)">
            <summary>
            Take a screen shot of the main view.
            </summary>
            <param name="app">The main application</param>
            <returns>A bitmap image of the main view.</returns>
        </member>
        <member name="M:Demo3D.Gui.Screenshot.SnapshotView(Demo3D.Visuals.IView)">
            <summary>
            Take a screenshot of the specified view.
            </summary>
            <param name="view">The view to take a screenshot of.</param>
            <returns>A bitmap image of the view.</returns>
        </member>
        <member name="M:Demo3D.Gui.Screenshot.SnapshotAndSaveView(Demo3D.Visuals.IView,System.String,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Take a screenshot of the specified view and save it.
            </summary>
            <param name="view">The view to take a screenshot of.</param>
            <param name="path">The path to save the image to.</param>
            <param name="format">The format to save the image in.</param>
        </member>
        <member name="M:Demo3D.Gui.Screenshot.SnapshotApplication(Demo3D.Visuals.IBuilder)">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.Screenshot.SnapshotModelWithOptions(Demo3D.Visuals.IBuilder,Demo3D.Gui.ImageOptions)">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.BreakpointManager">
            <summary>
            Manages breakpoints and debugging rendering for a specific TextView and TextDocument.
            Only valid for the document at the point of creation, must be uninstalled if the document changes.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointManager.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea)">
            <summary>
            Creates a new BreakpointManager instance.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointManager.CreateBreakpoint(System.Int32)">
            <summary>
            Creates a breakpoint for the specified line number.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointManager.RemoveBreakpoint(Demo3D.Gui.ScriptEditor.Plugin.IBreakpoint)">
            <summary>
            Removes a breakpoint from this manager.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointManager.SetBreakpoints(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Clears existing breakpoints and creates new breakpoints at the given lines.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointManager.Clear">
            <summary>
            Removes all breakpoints.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ScriptEditor.Plugin.BreakpointManager.Breakpoints">
            <summary>
            Gets all breakpoints in this manager.
            The breakpoints are returned sorted by line number;
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.BreakpointMargin">
            <summary>
            A margin that shows markers for breakpoints.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ScriptEditor.Plugin.BreakpointMargin.BreakpointManager">
            <summary>
            Gets/Sets the breakpoint manager from which the breakpoints should be shown.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointMargin.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointMargin.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointMargin.OnTextViewChanged(ICSharpCode.AvalonEdit.Rendering.TextView,ICSharpCode.AvalonEdit.Rendering.TextView)">
            <inheritdoc />
        </member>
        <member name="P:Demo3D.Gui.ScriptEditor.Plugin.BreakpointMargin.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.BreakpointMargin.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.CodeViewer">
            <summary>
            Interaction logic for CodeViewer.xaml
            </summary>
            <exclude />
            <summary>
            CodeViewer
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ScriptEditor.Plugin.CodeViewer.TabIndent">
            <summary>
            Find previous line with text and get indent string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.CodeViewer.SelectTextFromFirstColumn">
            <summary>
            Creates new selection starting from column 0
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.CodeViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.JScriptCodeViewer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.NativeScriptRefItem">
            <summary>
            Interaction logic for NativeScriptRefItem.xaml
            </summary>
            <exclude />
            <summary>
            NativeScriptRefItem
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.NativeScriptRefItem.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.OptimizedCodeViewer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsManager">
            <summary>
            Manages profile results for a specific TextView and TextDocument.
            Only valid for the document at the point of creation, must be uninstalled if the document changes.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsManager.#ctor(ICSharpCode.AvalonEdit.Editing.TextArea,Demo3D.Visuals.ScriptContainer,Demo3D.Script.ScriptThreadManager)">
            <summary>
            Creates a new ProfileResultsManager instance.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsMargin">
            <summary>
            A margin that shows profile results.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsMargin.typeface">
            <summary>
            The typeface used for rendering the line number margin.
            This field is calculated in MeasureOverride() based on the FontFamily etc. properties.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsMargin.emSize">
            <summary>
            The font size used for rendering the line number margin.
            This field is calculated in MeasureOverride() based on the FontFamily etc. properties.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsMargin.ProfileResultsManager">
            <summary>
            Gets/Sets the breakpoint manager from which the breakpoints should be shown.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsMargin.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Demo3D.Gui.ScriptEditor.Plugin.ProfileResultsMargin.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc />
        </member>
        <member name="T:Demo3D.Gui.ScriptEditor.Plugin.ReadOnlyLinesProvider">
            <summary>
            <see cref="T:ICSharpCode.AvalonEdit.Editing.IReadOnlySectionProvider" /> that disables editing for certain lines in a document.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptsPopup">
            <summary>
            Interaction logic for ScriptsPopup.xaml
            </summary>
            <exclude />
            <summary>
            ScriptsPopup
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptsPopup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Scripting.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.Scripting.IExternalReferenceManagerItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Scripting.ExternalReferenceManagerItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Scripting.ScriptReferenceManagerItem">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Scripting.ReferenceManagerViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.Scripting.ReferencesControl">
            <summary>
            Interaction logic for ReferencesControl.xaml
            </summary>
            <exclude />
            <summary>
            ReferencesControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.Scripting.ReferencesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptReferenceSelectorControl">
            <summary>
            Interaction logic for ScriptReferenceSelector.xaml
            </summary>
            <exclude />
            <summary>
            ScriptReferenceSelectorControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.ScriptReferenceSelectorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.ScriptReferenceSelectorViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ScriptReferenceSelectorModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SearchResultsViewer">
            <summary>
            Control for displaying the results of a search in scripts.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SearchResultsViewer.Entry">
            <summary>
            Structure used to store information about a search result.
            </summary>
        </member>
        <member name="F:Demo3D.Gui.SearchResultsViewer.application">
            <summary>
            The parent application.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.SearchResultsViewer.Application">
            <summary>
            Gets or sets the parent application.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.SearchResultsViewer.#ctor">
            <summary>
            Initializes a new instance of the SearchResultsViewer class.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.SearchResultsViewer.Clear">
            <summary>
            Clears the list.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.SearchResultsViewer.AddItem(Demo3D.Visuals.ScriptContainer,System.String,System.Int32,System.Int32,System.String,Demo3D.Visuals.ScriptType)">
            <summary>
            Adds a search result to the list.
            </summary>
            <param name="script">The script that the line of code belongs to.</param>
            <param name="file">The file in which the search term was found.</param>
            <param name="line">The line in which the search term was found.</param>
            <param name="column">The column position at which the search term was found.</param>
            <param name="lineContent">The line of code.</param>
            <param name="type">The script type where the search term was found.</param>
        </member>
        <member name="M:Demo3D.Gui.SearchResultsViewer.listView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            Launches a script window to edit the line of code that was double-clicked.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="F:Demo3D.Gui.SearchResultsViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.SearchResultsViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.SearchResultsViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SearchResultsPane">
            <summary>
            A dockable pane to display search in scripts results.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.SearchResultsPane.SearchResultsViewer">
            <summary>
            Gets the SearchResultsViewer being hosted in this pane.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.SearchResultsPane.#ctor(Demo3D.Visuals.IBuilder)">
            <summary>
            Initializes a new instance of the SearchResultsPane class.
            </summary>
            <param name="application">The parent application.</param>
        </member>
        <member name="T:Demo3D.Gui.SelectByMenuTool">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.CBWorldViewProj">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.CBGlobalLight">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.CBLightingOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.CBMaterial">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.CBCamera">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11Control">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11Device">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.SharpDXGui.D3D11Device.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the D3D11Device class.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11Display">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.SharpDXGui.D3D11Display.#ctor(System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the D3D11Display class.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11Host">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.SharpDXVertexFormat">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.MeshDisplayMode">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.SharpVertex.PositionNormalColored">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11Mesh">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11MeshRenderer">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11View">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3D11MeshCreator">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.SharpDXGui.D3D11MeshCreator.CalculateSurfaceNormal(System.Int32,System.Int32[],Microsoft.DirectX.Direct3D.CustomVertex.PositionOnly[])">
            <summary>
            Calculate a surface normal from mesh internal data.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.D3DViewBase">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SharpDXGui.SharpDXMeshData">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ShortcutOption">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SplashScreen">
            <summary>
            	<para>
            		Represents a splash screen.
            	</para>
            </summary>
        </member>
        <member name="T:Demo3D.Gui.StaticVisualConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.StaticVisualEditor">
            <summary>
            Shows a popup if there is more than one Visual selected or the selected visual has children.
            Otherwise behave as a normal boolean entry.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableDxDiagFile">
            <summary>
            Generates a DXDiag file for inclusion
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableEventLogs">
            <summary>
            Includes the Windows Event Application logs
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableFile">
            <summary>
            Generic file includer
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableFolder">
            <summary>
            Include folder and all files in the folder
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableLicenseFolder">
            <summary>
            Includes the license folder and generates a ark.txt file
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableModelFile">
            <summary>
            Includes the current model
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableScreenshotFolder">
            <summary>
            Generates screenshots from all open rendering views
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.IncludableFiles.IncludableStringFile">
            <summary>
            Generate file from a string
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.SupportFileExporerResourceDictionary">
            <exclude />
            <summary>
            SupportFileExporerResourceDictionary
            </summary>
        </member>
        <member name="M:Demo3D.Gui.SupportExporter.SupportFileExporerResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.SupportExporter.SupportFileExporterView">
            <summary>
            Interaction logic for SupportFileWriterView.xaml
            </summary>
            <exclude />
            <summary>
            SupportFileExporterView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.SupportExporter.SupportFileExporterView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TableNameChooser">
            <summary>
            Summary description for TableNameChooser.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.TableNameChooser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TableNameChooser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TableNameChooser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TextInputDialog">
            <summary>
            Summary description for NewLayerDialog.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.TextInputDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TextInputDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TextInputDialog.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TextureEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ThumbnailGeneratorOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PaintPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PaintTool">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.PaintTool.ViewLocked">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.PaintTool.PaintEdit">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ISelectGeometryManager">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.SelectGeometryType">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Gui.TextPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.TextTool">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.TextTool.AddOffsetToText">
            <summary>
            Adds offset to stop z fighting
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TextTool.ResizeText">
            <summary>
            Resize text according to current options
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TextTool.FitTextToFaceBounds">
            <summary>
            Resize text to fit the current face bounds
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TextToolMode">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.TextToolOptions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.TextToolOptionsControl">
            <summary>
            Interaction logic for TextToolOptions.xaml
            </summary>
            <exclude />
            <summary>
            TextToolOptionsControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.TextToolOptionsControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.TextToolOptionsWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualHierarchy.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualHierarchy.BindableExpandingBehavior">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualHierarchy.HierarchyTemplateSelector">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualHierarchy.VisualHierarchyView">
            <summary>
            Interaction logic for VisualHierarchyView.xaml
            </summary>
            <exclude />
            <summary>
            VisualHierarchyView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualHierarchy.VisualHierarchyView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualHierarchy.VisualHierarchyTreeView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualHierarchy.BoolToSortOrderConverter">
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.VisualHierarchy.VisualHierarchyActionManager.QueueVisualAction(Demo3D.Visuals.Visual,System.Action{Demo3D.Visuals.Visual},Demo3D.Gui.VisualHierarchy.HierarchyActionType)">
            <summary>
            Queues actions if scene is running in fast forward otherwise invokes action immediately
            </summary>
            <param name="visual"></param>
            <param name="action"></param>
            <param name="type"></param>
        </member>
        <member name="F:Demo3D.Gui.VisualHierarchy.VisualHierarchyActionManager.HierarchyUpdateActionMode.None">
            <summary>
            Do nothing
            </summary>
        </member>
        <member name="F:Demo3D.Gui.VisualHierarchy.VisualHierarchyActionManager.HierarchyUpdateActionMode.Update">
            <summary>
            Add the action or update the existing action
            </summary>
        </member>
        <member name="F:Demo3D.Gui.VisualHierarchy.VisualHierarchyActionManager.HierarchyUpdateActionMode.Remove">
            <summary>
            Remove the existing action
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualHierarchy.IVisualHierarchy">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.VisualHierarchy.VisualHierarchyWrapper.SuppressParentUndo">
            <summary>
            When true, don't add a parent undo edit if the parent changes.
            This handles the copy drag case.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualNameCommands">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualNameHost">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.CustomRectHost">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.CustomRect">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualNameWindow">
            <summary>
            Interaction logic for VisualNameWindow.xaml
            </summary>
            <exclude />
            <summary>
            VisualNameWindow
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualNameWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualPropertyGridMode">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualPropertyGrid">
            <summary>
            Summary description for VisualPropertyGrid.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.VisualPropertyGrid.SelectedAlias">
            <summary>
            Get the PropertyAlias (if it exists) for the selected property
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualPropertyGrid.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualPropertyGrid.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualPropertyGrid.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Handle the tab key.
            From: http://www.codeproject.com/KB/cs/wdzpropertygridutils.aspx
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualScripting.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualScripting.ThemeEditorWindow">
            <exclude />
        </member>
        <member name="F:Demo3D.Gui.VisualScripting.ThemeEditorWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualScripting.ThemeEditorWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Gui.VisualScripting.ThemeEditorWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VisualSelector">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.SelectVisualTool">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ParentVisualSelector">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.CustomVisualSelector">
            <summary>
            Don't show loads or support stands in custom property pull downs.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ConveyorVisualSelector">
            <summary>
            Only show other conveyors in the MotorVisual property pull down.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VisualSelectorWindow">
            <summary>
            Interaction logic for VisualSelectorWindow.xaml
            </summary>
            <exclude />
            <summary>
            VisualSelectorWindow
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VisualSelectorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VROptimizer.VRAnalyzedVisualItem">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VROptimizer.VRAnalyzerModel">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VROptimizer.VRAnalyzerView">
            <summary>
            Interaction logic for VRAnalyzerView.xaml
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
            <summary>
            VRAnalyzerView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VROptimizer.VRAnalyzerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.VROptimizer.VRModel">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VROptimizer.VROptimizerModel">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.VROptimizer.VROptimizerView">
            <summary>
            Interaction logic for VROptimizerView.xaml
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
            <summary>
            VROptimizerView
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VROptimizer.VROptimizerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Demo3D.Gui.VROptimizer.VRRuntimeOptimizerModel.OwningVisualOpaqueBufferMap">
            <summary>
            A map of buffers whose owning visual is the key
            </summary>
        </member>
        <member name="P:Demo3D.Gui.VROptimizer.VRRuntimeOptimizerModel.OwningVisualTransparentBufferMap">
            <summary>
            A map of buffers whose owning visual is the key
            </summary>
        </member>
        <member name="P:Demo3D.Gui.VROptimizer.VRRuntimeOptimizerModel.IsExportingRaw">
            <summary>
            When set to true, run an initial optimize and then stop another one occuring until finishing the current export
            This prevents unnecessary buffers being added to the raw.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.VROptimizer.VRRuntimeOptimizerModel.GetBuffersForVisual(Demo3D.Visuals.Visual,System.Collections.Generic.List{System.ValueTuple{Demo3D.Visuals.PrimitiveBuffer,Demo3D.Visuals.MeshMaterial}}@,System.Collections.Generic.List{System.ValueTuple{Demo3D.Visuals.PrimitiveBuffer,Demo3D.Visuals.MeshMaterial}}@)">
            <summary>
            Return all primitive buffers belonging to the visual
            </summary>
            <param name="visual"></param>
            <param name="opaqueBuffers"></param>
            <param name="transparentBuffers"></param>
        </member>
        <member name="T:Demo3D.Gui.VROptimizer.VRRuntimeOptimizerViewModel">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.VROptimizer.VRRuntimeOptimizerViewModel.IsDebugging">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.AllocationFunctions">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.AllocationManager">
            <summary>
            Manages assignment of loads to bins. Custom rules should live here.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.WMS.AllocationManager.Allocate(Demo3D.Visuals.Visual)">
            <summary>
            Find and allocate the best bin 
            </summary>
            <param name="load"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Gui.WMS.BinModelView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneToColorConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.DistanceConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.BoolToSelectedBrushThicknessConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.BoolToSelectedColorConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.RackConfiguratorControl">
            <summary>
            Interaction logic for RackConfiguratorControl.xaml
            </summary>
            <exclude />
            <summary>
            RackConfiguratorControl
            </summary>
        </member>
        <member name="M:Demo3D.Gui.WMS.RackConfiguratorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.WMS.RackProperties">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.RackModelView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ShelfModelView">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.WMS.WmsModelView">
            <summary>
            Base class for WMS model-view classes
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneBinAllocation">
            <summary>
            A bin to which loads can be assigned, used by the AllocationManager
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneBinDefinition">
            <summary>
            Extension to RackShelfBinLocation that adds zone and capacity data to a bin location
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneBinManager">
            <summary>
            Main class that provides zone allocation and editing capabilities, coordinating lower-level classes like AllocationManager, ZoneBinStorage and ZoneClassifier.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneBinStorage">
            <summary>
            Manage reading and writing of zone-bin assignments to a backing table
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneRule">
            <summary>
            Base class for zone classification rules
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneRuleMatchType">
            <summary>
            A rule that matches a specific load type
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneRuleMatchAll">
            <summary>
            A rule that matches everything. This would be used as the last rule to assign a default zone.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneClassifier">
            <summary>
            Classifies a load into a zone designation according to a set of rules
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WMS.ZoneRuleStorage">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ExplorerManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.IUserNode">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WorldExplorerControl">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Gui.WorldExplorerControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.WorldExplorerControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.Gui.WorldExplorerControl.BuildUserResourceFolder(Demo3D.Gui.DataNode,Demo3D.Visuals.UserResourceLibrary,System.String)">
            <summary>
            Populates a folder under a child of the "User Resource" node, representing a directory in the corresponding user resource library.
            </summary>
            <param name="parent">The node representing the folder.</param>
            <param name="library">The UserResourceLibrary in which the directory resides.</param>
            <param name="path">The path of the folder within the library.</param>
        </member>
        <member name="M:Demo3D.Gui.WorldExplorerControl.BuildUserResources">
            <summary>
            Creates the "User Resources" root node and populates it with the user resources from the document and all loaded catalogs.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.WorldExplorerControl.NeedsSaveNop">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WorldExplorerControl.UpdateScriptButton">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WorldExplorerControl.CompareScriptButton">
            <exclude />
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsUpdateMenuItemVisible">
            <summary>
            Is the "Update" context menu item available? Currently only available if one script is selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsUpdateMultipleMenuItemsVisible">
            <summary>
            Is the "Update Selected Scripts" context menu item available for multiple selected nodes? Currently only available if 2 or more scripts are selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsUpdateAllMenuItemsVisible">
            <summary>
            Is the "Update All Scripts" context menu item available?
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsReplaceMenuItemVisible">
            <summary>
            Is the "Replace" context menu item available? Currently only available if one script is selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsCommitMenuItemVisible">
            <summary>
            Is the "Commit" context menu item available? Currently only available if one script is selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsCommitMultipleMenuItemsVisible">
            <summary>
            Is the "Commit Selected Scripts" context menu item available for multiple selected nodes? Currently only available if 2 or more scripts are selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsCommitAllMenuItemsVisible">
            <summary>
            Is the "Commit All Scripts" context menu item available?
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsRevertMenuItemVisible">
            <summary>
            Is the "Revert" context menu item available? Currently only available if one script is selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsRevertMultipleMenuItemsVisible">
            <summary>
            Is the "Revert Selected Scripts" context menu item available for multiple selected nodes? Currently only available if 2 or more scripts are selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsRevertAllMenuItemsVisible">
            <summary>
            Is the "Revert All Scripts" context menu item available?
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsUseInternalMenuItemVisible">
            <summary>
            Is the "Use Internal C# Editor" context menu item available? Currently only available if one script is selected.
            </summary>
        </member>
        <member name="P:Demo3D.Gui.WorldExplorerControl.IsUseVSMenuItemVisible">
            <summary>
            Is the "Use Visual Studio" context menu item available? Currently only available if one script is selected.
            </summary>
        </member>
        <member name="T:Demo3D.Gui.WorldExplorerWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.ExplorerImages">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WpfToolbarWithWinform">
            <summary>
            Interaction logic for PropertyGridWpf.xaml
            </summary>
            <exclude />
            <summary>
            WpfToolbarWithWinform
            </summary>
        </member>
        <member name="M:Demo3D.Gui.WpfToolbarWithWinform.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Gui.WpfToolbarWithWinformControlPane">
            <exclude />
        </member>
        <member name="T:Demo3D.Gui.WpfToolbarWithWinformData">
            <exclude />
        </member>
        <member name="T:Demo3D.BOM.BillOfMaterialsPlugin">
            <exclude />
        </member>
        <member name="T:Demo3D.BOM.PartsList">
            <exclude />
        </member>
        <member name="T:Demo3D.Bvh.Hierarchy">
            <exclude />
        </member>
        <member name="T:Demo3D.Bvh.Joint">
            <exclude />
        </member>
        <member name="M:Demo3D.Bvh.Joint.CacheFrames(Demo3D.Bvh.Motion,System.Int32)">
            <summary>
            Convert right handed float frame data into left handed translations and rotations.
            </summary>
        </member>
        <member name="F:Demo3D.Bvh.Joint.WriteScale">
            <summary>
            To help testing allow offsets to be scaled up so BVH viewers can display them corectly.
            </summary>
        </member>
        <member name="T:Demo3D.Bvh.DegreeOfFreedom">
            <exclude />
        </member>
        <member name="T:Demo3D.Bvh.Motion">
            <exclude />
        </member>
        <member name="T:Demo3D.Bvh.JointMapping">
            <exclude />
        </member>
        <member name="M:Demo3D.Bvh.JointMapping.BvhTo3DS(System.String,System.String)">
            <summary>
            Prepend biped base name, usually "Bip01".
            </summary>
            <returns>Full name, e.g. "Bip01_L_Hand"</returns>
        </member>
        <member name="T:Demo3D.Bvh.Parser">
            <exclude />
        </member>
        <member name="T:Demo3D.Bvh.TokenType">
            <exclude />
        </member>
        <member name="T:Demo3D.Bvh.Token">
            <exclude />
        </member>
        <member name="T:Demo3D.Bvh.Tokenizer">
            <exclude />
        </member>
        <member name="M:Demo3D.SvgCanvas.Evaluator.Evaluate(System.String,System.Object[])">
            <summary>
             Evaluate expression according to context
            </summary>
            <param name="text">Expression to evaluate</param>
            <param name="contextObjects">Local context towards start of array, global towards end</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.SvgCanvas.RenderContext.#ctor">
            <summary>
            For use as a matrix stack when rendering clip paths.
            </summary>
        </member>
        <member name="M:Demo3D.SvgCanvas.RenderContext.MakeRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
             Returns a line strip
            </summary>
        </member>
        <member name="M:Demo3D.SvgCanvas.RenderContext.AddText(Demo3D.SvgCanvas.StyledSvgElement,System.Double,System.Double,System.String,System.Single)">
            <summary>
            Add text to the svg
            </summary>
            <param name="element">The element to add</param>
            <param name="x">The x-position</param>
            <param name="y">The y-position</param>
            <param name="text">The text to add</param>
            <param name="flatness">The quality of the text where lower values produce higher quality text</param>
        </member>
        <member name="M:Demo3D.SvgCanvas.StyledSvgElement.attr(System.String,System.Object)">
            <summary>
            Intended for access from SVG event handlers. Eg
            [ rect ... onclick="attr('fill','red')" /]
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:Demo3D.Components.CollisionSensorControlMode">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;CollisionSensorControlMode_Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Components.CollisionSensorAspect">
            <summary>A collision sensor.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.ControlMode">
            <summary>The control mode for the collision sensor.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.SenseMultipleLoads">
            <summary>Whether the collision sensor can be blocked by multiple visuals simultaneously.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.BlockedMaterial">
            <summary>The material assigned to the sensor and all descendants when it is blocked. Note: Will only apply when both ClearedMaterial and BlockedMaterial are set.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.ClearedMaterial">
            <summary>The material assigned to the sensor and all descendants when it is cleared. Note: Will only apply when both ClearedMaterial and BlockedMaterial are set.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.IsBlocked">
            <summary>Whether the collision sensor is currently blocked.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.IsCleared">
            <summary>Whether the collision sensor is currently blocked.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.BlockingVisuals">
            <summary>The list of visuals that are currently blocking the collision sensor.</summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.IsBlockedBindableItem">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;CollisionSensorAspect_IsBlockedBindableItem_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Components.CollisionSensorAspect.IsClearedBindableItem">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;CollisionSensorAspect_IsClearedBindableItem_Description&quot;]/value" /></summary>
        </member>
        <member name="T:Demo3D.Components.KinematicCylindricalJointDescription">
            <summary>A kinematic cylindrical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.Axis">
            <summary>The (local) rotation and translation axis for the cylindrical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.Anchor">
            <summary>The (local) anchor for the cylindrical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleType">
            <summary>Whether the rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleMode">
            <summary>The mode for the rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleExpression">
            <summary>The expression for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleLimitsEnabled">
            <summary>Whether the rotation angle is limited.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleLowerLimit">
            <summary>The lower limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleUpperLimit">
            <summary>The upper limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleInitialValue">
            <summary>The initial rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleValue">
            <summary>The current rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.AngleMotor">
            <summary>The motor that drives the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceMode">
            <summary>The mode for the translation distance parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceExpression">
            <summary>The expression for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceLowerLimitEnabled">
            <summary>Whether the translation distance has a lower limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceLowerLimit">
            <summary>The lower limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceUpperLimitEnabled">
            <summary>Whether the translation distance has an upper limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceUpperLimit">
            <summary>The upper limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceInitialValue">
            <summary>The initial translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceValue">
            <summary>The current translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicCylindricalJointDescription.DistanceMotor">
            <summary>The motor that drives the translation distance.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicFixedJoint">
            <summary>A kinematic fixed joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicFixedJoint.Visuals">
            <summary>The list of visuals that are fixed relative to this visual.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicFixedJoint.FixedVisuals">
            <summary>The list of visuals that are fixed relative to this visual.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicHelicalJointDescription">
            <summary>A kinematic helical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.Axis">
            <summary>The (local) axis for the helical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.Anchor">
            <summary>The (local) anchor for the helical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.Mode">
            <summary>The mode for the displacement parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.AngleOffset">
            <summary>The displacement value to angle value offset for the helical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.AngleRatio">
            <summary>The angle:displacement ratio for the helical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.DistanceOffset">
            <summary>The displacement value to distance value offset for the helical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.DistanceRatio">
            <summary>The distance:displacement ratio for the helical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.Expression">
            <summary>The expression for the displacement value.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.LowerLimitEnabled">
            <summary>Whether the displacement value has a lower limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.LowerLimit">
            <summary>The lower limit for the displacement value.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.UpperLimitEnabled">
            <summary>Whether the displacement value has an upper limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.UpperLimit">
            <summary>The upper limit for the displacement value.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.InitialValue">
            <summary>The initial displacement value.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.Value">
            <summary>The current displacement value.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicHelicalJointDescription.Motor">
            <summary>The motor that drives the displacement value.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicParameterValueChanged">
            <summary>
            Delegate for joint parameter value changed events.
            </summary>
            <remarks>
            The parameter index identifies the parameter.
            </remarks>
            <param name="joint">The joint.</param>
            <param name="index">The parameter index.</param>
            <param name="newValue">The new parameter value.</param>
            <param name="oldValue">The old parameter value.</param>
        </member>
        <member name="T:Demo3D.Components.KinematicJointDescription">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;KinematicJointDescription_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Components.KinematicJointDescription.Base">
            <summary>The optional base visual that the primary visual is moved relative to (leave blank for the ground/world).</summary>
        </member>
        <member name="E:Demo3D.Components.KinematicJointDescription.OnParameterValueChanged">
            <summary>
            Event that is triggered when a parameter value changes.
            </summary>
        </member>
        <member name="T:Demo3D.Components.KinematicPathFollowerJointDescription">
            <summary>A kinematic path follower joint, where a point is constrained to lie on a path and aligned with the tangent to the curve.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.Path">
            <summary>The path that the anchor is constrained to lie on.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.Anchor">
            <summary>The (local) anchor for the path joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceMode">
            <summary>The mode for the translation distance parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceExpression">
            <summary>The expression for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceLowerLimitEnabled">
            <summary>Whether the translation distance has a lower limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceLowerLimit">
            <summary>The lower limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceUpperLimitEnabled">
            <summary>Whether the translation distance has an upper limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceUpperLimit">
            <summary>The upper limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceInitialValue">
            <summary>The initial translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceValue">
            <summary>The current translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.DistanceMotor">
            <summary>The motor that drives the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleType">
            <summary>Whether the rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleMode">
            <summary>The mode for the rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleExpression">
            <summary>The expression for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleLimitsEnabled">
            <summary>Whether the rotation angle has limits.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleLowerLimit">
            <summary>The lower limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleUpperLimit">
            <summary>The upper limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleInitialValue">
            <summary>The initial value for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleValue">
            <summary>The current value for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathFollowerJointDescription.AngleMotor">
            <summary>The motor that drives the rotation angle.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicPathJointDescription">
            <summary>A kinematic path joint, where a point is constrained to lie on a path.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Path">
            <summary>The path that the anchor is constrained to lie on.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Anchor">
            <summary>The (local) anchor for the path joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Axis1">
            <summary>The first (local) axis for the path joint, which should be orthogonal to the second axis.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Axis2">
            <summary>The second (local) axis for the path joint, which should be orthogonal to the first axis.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceMode">
            <summary>The mode for the translation distance parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceExpression">
            <summary>The expression for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceLowerLimitEnabled">
            <summary>Whether the translation distance has a lower limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceLowerLimit">
            <summary>The lower limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceUpperLimitEnabled">
            <summary>Whether the translation distance has an upper limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceUpperLimit">
            <summary>The upper limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceInitialValue">
            <summary>The initial translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceValue">
            <summary>The current translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.DistanceMotor">
            <summary>The motor that drives the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1Type">
            <summary>Whether the first axis rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1Mode">
            <summary>The mode for the first axis rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1Expression">
            <summary>The expression for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1LimitsEnabled">
            <summary>Whether the first axis rotation angle has limits.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1LowerLimit">
            <summary>The lower limit for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1UpperLimit">
            <summary>The upper limit for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1InitialValue">
            <summary>The initial value for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1Value">
            <summary>The current value for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle1Motor">
            <summary>The motor that drives the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2Type">
            <summary>Whether the second axis rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2Mode">
            <summary>The mode for the second axis rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2Expression">
            <summary>The expression for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2LimitsEnabled">
            <summary>Whether the second axis rotation angle has limits.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2LowerLimit">
            <summary>The lower limit for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2UpperLimit">
            <summary>The upper limit for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2InitialValue">
            <summary>The initial value for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2Value">
            <summary>The current value for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle2Motor">
            <summary>The motor that drives the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3Type">
            <summary>Whether the third axis rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3Mode">
            <summary>The mode for the third axis rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3Expression">
            <summary>The expression for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3LimitsEnabled">
            <summary>Whether the third axis rotation angle has limits.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3LowerLimit">
            <summary>The lower limit for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3UpperLimit">
            <summary>The upper limit for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3InitialValue">
            <summary>The initial value for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3Value">
            <summary>The current value for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPathJointDescription.Angle3Motor">
            <summary>The motor that drives the third axis rotation angle.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicPlanarJointDescription">
            <summary>A kinematic planar joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Normal">
            <summary>The (local) axis of rotation orthogonal to the plane of translation for the planar joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Anchor">
            <summary>The (local) anchor for the rotation about the normal for the planar joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Axis1">
            <summary>The first (local) axis of translation, which should be orthogonal to the normal of the plane. The second axis is taken to be the axis orthogonal to both the normal and the first axis according to the handedness of the coordinate system.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleType">
            <summary>Whether the rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleMode">
            <summary>The mode for the rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleExpression">
            <summary>The expression for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleLimitsEnabled">
            <summary>Whether the rotation angle is limited.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleLowerLimit">
            <summary>The lower limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleUpperLimit">
            <summary>The upper limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleInitialValue">
            <summary>The initial rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleValue">
            <summary>The current rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.AngleMotor">
            <summary>The motor that drives the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1Mode">
            <summary>The mode for the first axis translation distance parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1Expression">
            <summary>The expression for the first axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1LowerLimitEnabled">
            <summary>Whether the first axis translation distance has a lower limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1LowerLimit">
            <summary>The lower limit for the first axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1UpperLimitEnabled">
            <summary>Whether the first axis translation distance has an upper limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1UpperLimit">
            <summary>The upper limit for the first axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1InitialValue">
            <summary>The initial first axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1Value">
            <summary>The current first axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance1Motor">
            <summary>The motor that drives the first axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2Mode">
            <summary>The mode for the second axis translation distance parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2Expression">
            <summary>The expression for the second axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2LowerLimitEnabled">
            <summary>Whether the second axis translation distance has a lower limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2LowerLimit">
            <summary>The lower limit for the second axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2UpperLimitEnabled">
            <summary>Whether the second axis translation distance has an upper limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2UpperLimit">
            <summary>The upper limit for the second axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2InitialValue">
            <summary>The initial second axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2Value">
            <summary>The current second axis translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPlanarJointDescription.Distance2Motor">
            <summary>The motor that drives the second axis translation distance.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicPrismaticJointDescription">
            <summary>A kinematic prismatic joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.Axis">
            <summary>The (local) translation axis for the prismatic joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.Mode">
            <summary>The mode for the translation distance parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.Expression">
            <summary>The expression for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.LowerLimitEnabled">
            <summary>Whether the translation distance has a lower limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.LowerLimit">
            <summary>The lower limit for the translation distance</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.UpperLimitEnabled">
            <summary>Whether the translation distance has an upper limit.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.UpperLimit">
            <summary>The upper limit for the translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.InitialValue">
            <summary>The initial translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.Value">
            <summary>The current translation distance.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicPrismaticJointDescription.Motor">
            <summary>The motor that drives the translation distance.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicRevoluteJointDescription">
            <summary>A kinematic revolute joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.Axis">
            <summary>The (local) axis for the revolute joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.Anchor">
            <summary>The (local) anchor for the revolute joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.Type">
            <summary>Whether the rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.Mode">
            <summary>The mode for the rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.Expression">
            <summary>The expression for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.LimitsEnabled">
            <summary>Whether the rotation angle is limited.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.LowerLimit">
            <summary>The lower limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.UpperLimit">
            <summary>The upper limit for the rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.InitialValue">
            <summary>The initial rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.Value">
            <summary>The current rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicRevoluteJointDescription.Motor">
            <summary>The motor that drives the rotation angle.</summary>
        </member>
        <member name="T:Demo3D.Components.KinematicSphericalJointDescription">
            <summary>A kinematic spherical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Anchor">
            <summary>The (local) anchor for the spherical joint.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Axis1">
            <summary>The first (local) axis for the spherical joint, which should be orthogonal to the second axis.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Axis2">
            <summary>The second (local) axis for the spherical joint, which should be orthogonal to the first axis.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1Type">
            <summary>Whether the first axis rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1Mode">
            <summary>The mode for the first axis rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1Expression">
            <summary>The expression for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1LimitsEnabled">
            <summary>Whether the first axis rotation angle is limited.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1LowerLimit">
            <summary>The lower limit for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1UpperLimit">
            <summary>The upper limit for the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1InitialValue">
            <summary>The initial first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1Value">
            <summary>The current first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle1Motor">
            <summary>The motor that drives the first axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2Type">
            <summary>Whether the second axis rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2Mode">
            <summary>The mode for the second axis rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2Expression">
            <summary>The expression for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2LimitsEnabled">
            <summary>Whether the second axis rotation angle is limited.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2LowerLimit">
            <summary>The lower limit for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2UpperLimit">
            <summary>The upper limit for the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2InitialValue">
            <summary>The initial second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2Value">
            <summary>The current second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle2Motor">
            <summary>The motor that drives the second axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3Type">
            <summary>Whether the third axis rotation angle is continuous or discontinuous.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3Mode">
            <summary>The mode for the third axis rotation angle parameter.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3Expression">
            <summary>The expression for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3LimitsEnabled">
            <summary>Whether the third axis rotation angle is limited.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3LowerLimit">
            <summary>The lower limit for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3UpperLimit">
            <summary>The upper limit for the third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3InitialValue">
            <summary>The initial third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3Value">
            <summary>The current third axis rotation angle.</summary>
        </member>
        <member name="P:Demo3D.Components.KinematicSphericalJointDescription.Angle3Motor">
            <summary>The motor that drives the third axis rotation angle.</summary>
        </member>
        <member name="T:Demo3D.Components.MechanismSolverSettingsAspect">
            <summary>Solver settings for a kinematic mechanism.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.ValueTarget">
            <summary>The target/optimum value for the objective function.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.ValueEpsilon">
            <summary>The epsilon value that specifies the minimum change in objective function value between inner iterations for the solver to continue.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.GradientEpsilon">
            <summary>The epsilon value that specifies the minimum change in the length of the gradient vector between iterations for the solver to continue.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.VariableEpsilon">
            <summary>The epsilon value that specifies the minuimum change in the length of the variable vector between iterations for the solver to continue.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.MaximumInnerIterations">
            <summary>The maximum number of inner iterations to perform. Inner iterations are used to find the minimum objective function value for a given penalty multiple.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.OuterIterations">
            <summary>The number of solves to perform, each time ramping the penalty multiple according to the penalty profile.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.PenaltyProfile">
            <summary>The profile used to vary the penalty multiple over the outer iterations.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.PenaltyMultipleStart">
            <summary>The penalty multiple to use for the first outer iteration in cases where more than one outer iteration is being performed.</summary>
        </member>
        <member name="P:Demo3D.Components.MechanismSolverSettingsAspect.PenaltyMultipleEnd">
            <summary>The penalty multiple to use for the last outer iteration.</summary>
        </member>
        <member name="T:Demo3D.Components.AccessoryAspect">
            <summary>An aspect which can attach to a visual or another aspect.</summary>
        </member>
        <member name="E:Demo3D.Components.AccessoryAspect.Attached">
            <summary>Event that occurs when the aspect is attached to a visual or aspect.</summary>
        </member>
        <member name="E:Demo3D.Components.AccessoryAspect.Detached">
            <summary>Event that occurs when the aspect is detached from a visual or aspect.</summary>
        </member>
        <member name="P:Demo3D.Components.AccessoryAspect.AttachedAspect">
            <summary>The aspect that this aspect is currently attached to.</summary>
        </member>
        <member name="P:Demo3D.Components.AccessoryAspect.AttachedVisual">
            <summary>The visual that this aspect is currently attached to.</summary>
        </member>
        <member name="P:Demo3D.Components.AccessoryAspect.IsAttached">
            <summary>True when the aspect is attached.</summary>
        </member>
        <member name="P:Demo3D.Components.AccessoryAspect.AttachableAspectTypes">
            <summary>A collection of aspect types that this aspect can attach to.</summary>
        </member>
        <member name="P:Demo3D.Components.AccessoryAspect.AttachableVisualTypes">
            <summary>A collection of visual types that this aspect can attach to.</summary>
        </member>
        <member name="P:Demo3D.Components.AccessoryAspect.AttachDirection">
            <summary>The direction to face when being attached.</summary>
        </member>
        <member name="P:Demo3D.Components.AccessoryAspect.ReparentOnSnap">
            <summary>Reparent the owning visual when attaching to a conveyor.</summary>
        </member>
        <member name="M:Demo3D.Components.AccessoryAspect.AttachToVisual(Demo3D.Visuals.Visual)">
            <summary>
            Attempt to attach to the desired visual.
            </summary>
            <param name="visual">The visual to attach to.</param>
        </member>
        <member name="M:Demo3D.Components.AccessoryAspect.DetachFromVisual">
            <summary>
            Detatch from the currently attached visual.
            </summary>
        </member>
        <member name="M:Demo3D.Components.AccessoryAspect.AttachToAspect(Demo3D.Visuals.VisualAspect)">
            <summary>
            Attempt to attach to the desired aspect.
            </summary>
            <param name="aspect">The aspect to attach to.</param>
        </member>
        <member name="M:Demo3D.Components.AccessoryAspect.DetachFromAspect">
            <summary>
            Detach from the currently attached aspect.
            </summary>
        </member>
        <member name="M:Demo3D.Components.AccessoryAspect.AttemptToAttach(System.Object)">
            <summary>
            Attempt to attach to the desired object. The object must be of a type that appears in <see cref="P:Demo3D.Components.AccessoryAspect.AttachableVisualTypes" /> or <see cref="P:Demo3D.Components.AccessoryAspect.AttachableAspectTypes" />.
            </summary>
            <param name="attachTarget"></param>
            <returns>True when successful</returns>
        </member>
        <member name="M:Demo3D.Components.AccessoryAspect.AttemptToDetach">
            <summary>
            Attempt to detach from either an attached visual or aspect.
            </summary>
            <returns>True when detach was successful.</returns>
        </member>
        <member name="T:Demo3D.Components.AttachToConveyorAspect">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;ConveyorAspect_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.Components.CurveDescription.Angle">
            <summary>
            Angle in radians
            </summary>
        </member>
        <member name="P:Demo3D.Components.DescriptionBase.AlignMatrix">
            <summary>
            The matrix required to align the description along the z-axis
            </summary>
        </member>
        <member name="P:Demo3D.Components.DescriptionBase.BankAngle">
            <summary>
            Bank Angle in radians
            </summary>
        </member>
        <member name="P:Demo3D.Components.DescriptionBase.InclineAngle">
            <summary>
            Incline Angle in radians
            </summary>
        </member>
        <member name="P:Demo3D.Components.IAccessoryAspect.IsEnabled">
            <summary>
            Is the aspect enabled
            </summary>
        </member>
        <member name="P:Demo3D.Components.IAccessoryAspect.Visual">
            <summary>
            The owning visual of the aspect
            </summary>
        </member>
        <member name="P:Demo3D.Components.IAccessoryAspect.AttachDirection">
            <summary>
            The direction in which the aspect is attached
            </summary>
        </member>
        <member name="P:Demo3D.Components.IAccessoryAspect.AttachedAspect">
            <summary>
            The aspect which this aspect has attached to
            </summary>
        </member>
        <member name="P:Demo3D.Components.IAccessoryAspect.AttachedVisual">
            <summary>
            The Visual which this aspect has attached to
            </summary>
        </member>
        <member name="P:Demo3D.Components.IAccessoryAspect.AttachableAspectTypes">
            <summary>
            The type of aspects which this aspect can attach to
            </summary>
        </member>
        <member name="P:Demo3D.Components.IAccessoryAspect.AttachableVisualTypes">
            <summary>
            The type of visuals which this aspect can attach to
            </summary>
        </member>
        <member name="M:Demo3D.Components.IAccessoryAspect.AttemptToAttach(System.Object)">
            <summary>
            Attempt to attach to an object
            </summary>
            <param name="attachTarget">The object to attach to</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:Demo3D.Components.IAccessoryAspect.AttemptToDetach">
            <summary>
            Attempt to detach from the aspect
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="T:Demo3D.Input.NamespaceDoc">
            <summary>
            The Demo3D.Input namespace contains functionality for reading events from game controllers, steering wheels, joysticks, etc.
            </summary>
            <remarks>
            All classes and methods documented here are intended for use in user scripting.
            </remarks>
        </member>
        <member name="T:Demo3D.Input.Controller">
            <summary>
            The Controller class provides access to the current state of a game controller's axes and buttons.
            </summary>
        </member>
        <member name="P:Demo3D.Input.Controller.Name">
            <summary>
            Name of the game controller.
            </summary>
        </member>
        <member name="P:Demo3D.Input.Controller.ProductName">
            <summary>
            ProductName of the game controller.
            </summary>
        </member>
        <member name="P:Demo3D.Input.Controller.DeviceType">
            <summary>
            The type of game controller device.
            </summary>
        </member>
        <member name="P:Demo3D.Input.Controller.X">
            <summary>X axis between -1 and 1.</summary>
        </member>
        <member name="P:Demo3D.Input.Controller.Y">
            <summary>Y axis between -1 and 1.</summary>
        </member>
        <member name="P:Demo3D.Input.Controller.Z">
            <summary>Z axis between -1 and 1.</summary>
        </member>
        <member name="P:Demo3D.Input.Controller.RX">
            <summary>X rotation between -1 and 1.</summary>
        </member>
        <member name="P:Demo3D.Input.Controller.RY">
            <summary>Y rotation between -1 and 1.</summary>
        </member>
        <member name="P:Demo3D.Input.Controller.RZ">
            <summary>Z rotation between -1 and 1.</summary>
        </member>
        <member name="P:Demo3D.Input.Controller.Buttons">
            <summary>Array of button states where true means pressed, false means not pressed.</summary>
        </member>
        <member name="P:Demo3D.Input.Controller.POVs">
            <summary>
            Array of point of view directional controllers, null means not pressed
            otherwise value is the angle in degrees where 0 is N, 90 is E, 180 is S, 270 is W.
            </summary>
        </member>
        <member name="P:Demo3D.Input.Controller.Sliders">
            <summary>Array of slider states between -1 and 1.</summary>
        </member>
        <member name="M:Demo3D.Input.Controller.Poll">
            <summary>
            Get the latest state and return true if the state has changed.
            </summary>
        </member>
        <member name="M:Demo3D.Input.Controller.SetInputControl(System.Windows.Forms.Control)">
            <exclude />
        </member>
        <member name="M:Demo3D.Input.Controller.SetVibration(System.Single,System.Single)">
            <summary>
            Set the vibration speed of the left and right side of the game controller.
            The values can vary between 0 and 1 with 0 meaning no vibration and 1 meaning maximum vibration.
            </summary>
            <param name="leftSpeed">Vibration speed of left side of game controller (0-1).</param>
            <param name="rightSpeed">Vibration speed of right side of game controller (0-1).</param>
        </member>
        <member name="M:Demo3D.Input.Controller.GetControllers">
            <summary>
            Get the list of controllers currently connected to the system.
            </summary>
            <returns>List of available controllers.</returns>
        </member>
        <member name="T:Demo3D.ControlPanel.BulletGraph">
            <summary>
            Interaction logic for BulletGraph.xaml
            </summary>
            <exclude />
            <summary>
            BulletGraph
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.BulletGraph.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.BulletGraphBase">
            <summary>
            Interaction logic for BulletGraph.xaml
            </summary>
            <exclude />
            <summary>
            BulletGraphBase
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.BulletGraphBase.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.QualitativeRanges">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.QualitativeRange">
            <summary>
            Defines a single qualitative range within a bullet graph.
            </summary>
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ScaleBarConverter">
            <summary>
            Converts the given value into an array of scale bar ticks between zero and the value given.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ScalingConverter">
            <summary>
            A ValueConverter which scales a double value by the double factor which is supplied as the converter parameter
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ScalingMultiConverter">
            <summary>
            A value converter that takes three parameters:
            
            1. Maximum value
            2. Value to scale
            3. Range to scale over
            
            and performs simple linear scaling.
            
            An optional fudge factor may be applied which offsets the result by a fixed amount.
            </summary>
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.Control">
            <summary>
            A recognised control widget.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.Check">
            <summary>
            A check box.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.Real">
            <summary>
            A real (64 bit) value.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.Text">
            <summary>
            A string.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.Control.PushButtonControl">
            <summary>
            A push button.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.PushButtonControl.ManualRelease">
            <summary>
            True if the button has to be pressed to release.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.PushButtonControl.Not">
            <summary>
            Returning true will cause the button press to set the control property to false.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Control.PushButtonControl.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructs a new push button control.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.PushButton">
            <summary>
            A push button with default configuration.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.Control.LampControl">
            <summary>
            A lamp.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.LampControl.LampColor">
            <summary>
            The colour of the lamp when lit.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.LampControl.Not">
            <summary>
            Returning true will cause the lamp to be lit when the control property value is false.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Control.LampControl.#ctor(Demo3D.ControlPanel.LampColor,System.Boolean)">
            <summary>
            Constructs a new lamp control.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.Lamp">
            <summary>
            A lamp with default configuration.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.Control.PushableLampControl">
            <summary>
            A lamp embedded in a button.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.PushableLampControl.LampColor">
            <summary>
            The colour of the lamp when lit.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.PushableLampControl.ManualRelease">
            <summary>
            True if the button has to be pressed to release.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Control.PushableLampControl.#ctor(Demo3D.ControlPanel.LampColor,System.Boolean)">
            <summary>
            Constructs a new pushable lamp control.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.PushableLamp">
            <summary>
            A pushable lamp control with default configuration.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.Control.EmergencyStopButtonControl">
            <summary>
            An emergency stop button.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.EmergencyStopButtonControl.ManualRelease">
            <summary>
            True if the button has to be pressed to release.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Control.EmergencyStopButtonControl.Not">
            <summary>
            Returning true will cause the button press to set the control property to false.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.EmergencyStopButton">
            <summary>
            An emergency stop button control with default configuration.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.TwoWayRotarySwitch">
            <summary>
            A two way rotary switch.  Values are: 0 off, 1 on.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.Control.ThreeWayRotarySwitch">
            <summary>
            A three way rotary switch.  Values are: 1, 2, or 3.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Control.#ctor(System.String,System.String,System.Type[])">
            <summary>
            Contstructs a contol, overriding the default control widget name and argument.
            </summary>
            <param name="widget">Control widget name.</param>
            <param name="args">Control widget arguments (or null to use reflection to get the arguments).</param>
            <param name="propertyTypes">The expected types of each control property value.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Control.#ctor">
            <summary>
            Constructs a control.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlProperty">
            <summary>
            A data property for a control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlProperty.CanRead">
            <summary>
            True if it's meaningful to read the property value.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlProperty.CanWrite">
            <summary>
            Property value can be written.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlProperty.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Contructs a new control property.
            </summary>
            <param name="canRead">True if it's meaningful to read the property value.</param>
            <param name="canWrite">Property value can be written.</param>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlProperty.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlProperty.ConvertTo(System.Object,System.Type)">
            <summary>
            Convert a value into one suitable for the widget.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="widgetType">The type expected by the control widget.</param>
            <returns>The converted value, or null if conversion isn't possible.</returns>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlProperty.ConvertFrom(System.Object)">
            <summary>
            Convert a value from the control widget into one suitable for this control property.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value, or null if conversion isn't possible.</returns>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlProperty.Create(Demo3D.Visuals.Visual,System.String,System.Boolean,System.Boolean)">
            <summary>
            Create a control property referencing a property on the visual.
            </summary>
            <param name="visual">The visual whose property is being controlled.</param>
            <param name="propertyName">The name of the property on the visual that's being control.</param>
            <param name="canRead">True if it's meaningful to read the value of the property.</param>
            <param name="canWrite">True if the control can write a value to the property.</param>
            <returns>A control panel property.</returns>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlProperty.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlProperty.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlProperty.NotifyValueChanged">
            <summary>
            Raises the PropertyChanged event for the Value property.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlPanelItem">
            <summary>
            A control to appear in the ControlsGrid.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.Visual">
            <summary>
            The visual that's bound to the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.PanelName">
            <summary>
            The control panel name (or null).
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.Name">
            <summary>
            The name of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.ControlWidget">
            <summary>
            Widget for displaying the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.ControlArgs">
            <summary>
            The widget arguments.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.Control">
            <summary>
            Control, if provided (may be null).
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.Properties">
            <summary>
            Property value accessors.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItem.#ctor(Demo3D.Visuals.Visual,System.String,Demo3D.ControlPanel.Control,Demo3D.ControlPanel.ControlProperty[],System.String)">
            <summary>
            Constructs a new control panel item.
            </summary>
            <param name="controlVisual">The visual that's bound to the control.</param>
            <param name="name">The name of the control.</param>
            <param name="control">Widget for displaying the control.</param>
            <param name="properties">Property value accessors.</param>
            <param name="panelName">Control panel name (or null).</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.ControlPanel.cs" region="ControlPanelItem" />
            </example>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItem.#ctor(Demo3D.Visuals.Visual,System.String,Demo3D.ControlPanel.Control,Demo3D.ControlPanel.ControlProperty,System.String)">
            <summary>
            Constructs a new control panel item.
            </summary>
            <param name="controlVisual">The visual that's bound to the control.</param>
            <param name="name">The name of the control.</param>
            <param name="control">Widget for displaying the control.</param>
            <param name="property">Property value accessor.</param>
            <param name="panelName">Control panel name (or null).</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.ControlPanel.cs" region="ControlPanelItem" />
            </example>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItem.#ctor(Demo3D.Visuals.Visual,System.String,Demo3D.ControlPanel.Control,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a new control panel item.
            </summary>
            <param name="controlVisual">The visual that's bound to the control.</param>
            <param name="name">The name of the control.</param>
            <param name="control">Widget for displaying the control.</param>
            <param name="propertyName">The name of the property on <paramref name="controlVisual" /> (or null to use <paramref name="name" />).</param>
            <param name="canRead">True if it's meaningful to read the value of the property.</param>
            <param name="canWrite">True if the control can write a value to the property.</param>
            <param name="panelName">Control panel name (or null).</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.ControlPanel.cs" region="ControlPanelItem" />
            </example>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItem.#ctor(Demo3D.Visuals.Visual,System.String,System.String,Demo3D.ControlPanel.ControlProperty[],System.String)">
            <summary>
            Constructs a new control panel item.
            </summary>
            <param name="controlVisual">The visual that's bound to the control.</param>
            <param name="name">The name of the control.</param>
            <param name="control">Widget for displaying the control.  Must match the list of supported controls.</param>
            <param name="properties">Property value accessors.</param>
            <param name="panelName">Control panel name (or null).</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.ControlPanel.cs" region="ControlPanelItem" />
            </example>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItem.#ctor(Demo3D.Visuals.Visual,System.String,System.String,Demo3D.ControlPanel.ControlProperty,System.String)">
            <summary>
            Constructs a new control panel item.
            </summary>
            <param name="controlVisual">The visual that's bound to the control.</param>
            <param name="name">The name of the control.</param>
            <param name="control">Widget for displaying the control.  Must match the list of supported controls.</param>
            <param name="property">Property value accessor.</param>
            <param name="panelName">Control panel name (or null).</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.ControlPanel.cs" region="ControlPanelItem" />
            </example>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItem.#ctor(Demo3D.Visuals.Visual,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a new control panel item.
            </summary>
            <param name="controlVisual">The visual that's bound to the control.</param>
            <param name="name">The name of the control.</param>
            <param name="control">Widget for displaying the control.  Must match the list of supported controls.</param>
            <param name="propertyName">The name of the property on <paramref name="controlVisual" /> (or null to use <paramref name="name" />).</param>
            <param name="canRead">True if it's meaningful to read the value of the property.</param>
            <param name="canWrite">True if the control can write a value to the property.</param>
            <param name="panelName">Control panel name (or null).</param>
            <example>
            <code lang="C#" source="Examples\Demo3D.ControlPanel.cs" region="ControlPanelItem" />
            </example>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlPanelItem.ReadOnly">
            <summary>
            True if entire control is read-only.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.NamespaceDoc">
            <summary>
            The Demo3D.ControlPanel namespace contains functionality for building custom control panels.
            </summary>
            <remarks>
            All classes and methods documented here are intended for use in user scripting.
            </remarks>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlPanelItemsResults">
            <summary>
            Control Panel Items.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlPanelItems">
            <summary>
            A class for searching for visuals and properties for inclusion in a control panel grid.
            </summary>
            <exclude /> 
        </member>
        <member name="F:Demo3D.ControlPanel.ControlPanelItems.ControlPanelItemsCustomPropertyName">
            <summary>
            The name of the control panel items custom property
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItems.TryCreateProperty(Demo3D.Visuals.Visual,System.String,System.Boolean,System.Boolean)">
            <summary>
            Find a property on a visual.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlPanelItems.NamedVisual">
            <summary>
            A class for finding a visual with a given property name.
            We use this class to cache as much information as possible about the visual and its component.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItems.FindControlPanelItem(Demo3D.ControlPanel.ControlPanelItems.NamedVisual,System.String,System.String[],System.String)">
            <summary>
            Returns a control panel item, taking care to return the underlying BindableItem (instead of the visual property) if there is one.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItems.GetListFromTable(Demo3D.Visuals.Visual,System.Data.DataTable)">
            <summary>
            Takes a table with columns 'Visual' and 'Name' and returns the named properties belonging to this visual.
            Also looks for optional columns 'Control' and 'Label'.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItems.GetList(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Returns a data source for populating a control panel.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItems.GetCached(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Returns a data source for populating a control panel.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItems.Get(Demo3D.Visuals.Visual)">
            <summary>
            Returns a list of control panel items.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlPanelItems.Clear(Demo3D.Visuals.Visual)">
            <summary>
            Clear the control panel item cache for a visual.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlPanelPaletteItem">
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPanel.ControlPanelPlugin">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid">
            <summary>
            Interaction logic for Controls.xaml.
            </summary>
            <exclude /> 
            <summary>
            ControlsGrid
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid.ViewParameters">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid.CellValueArg">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid.CellValueArgs">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid.CellValue">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid.CellData">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid.SelectedItems">
            <summary>
            A selected visual and its associated control panel cell values.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGrid.View">
            <summary>
            A control panel view.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGrid.View.Name">
            <summary>
            The view name.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGrid.View.#ctor(System.String)">
            <summary>
            Creates a new View.
            </summary>
            <param name="name">The view name.</param>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGrid.View.Visibility">
            <summary>
            Get or set the view visibility.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGrid.View.UpdateGridView(System.Collections.Generic.IReadOnlyList{Demo3D.ControlPanel.ControlsGrid.SelectedItems})">
            <summary>
            Update the view with the selected control panel items.
            </summary>
            <param name="selectedItems">The selected control panel items.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGrid.View.ReadLayout">
            <summary>
            Get the layout of the control and pack it into a serializable object that derives from ControlsGridLayoutView.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGrid.View.ApplyLayout(Demo3D.ControlPanel.ControlsGridLayoutView)">
            <summary>
            Apply the layout to the control.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGrid.GetControlPanelItems">
            <summary>
            Find all the control panel items for the current set of visual selectors.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGrid.UpdateControlPanelItems">
            <summary>
            Find all the control panel items for the current set of visual selectors and show them in the grid.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGrid.SelectedVisuals">
            <summary>
            A list of selected visuals that we want to show.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGrid.Visual">
            <summary>
            The visual whose control panel items we want to show.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridLayoutView">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridLayoutXml">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridLayoutDxDataControl">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridLayoutColumn">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridLayoutGrid">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridLayout">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridTab">
            <summary>
            Interaction logic for ControlsGridTab.xaml.
            This is one Controls Panel Grid in the main Demo3D 'properties' pane group.
            </summary>
            /** <exclude /> */
            <summary>
            ControlsGridTab
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTab.GetStoredLayout(Demo3D.Visuals.Visual)">
            <summary>
            Return the stored layout for a visual.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTab.SetStoredLayout(Demo3D.Visuals.Visual,Demo3D.ControlPanel.ControlsGridTabLayout)">
            <summary>
            Save a stored layout on a visual.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTab.SaveLayout">
            <summary>
            Save the layout.  The layout is stored on every visual that this tab shows.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTab.LoadLayout">
            <summary>
            Loads the layout for the tab.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGridTab.HasControls">
            <summary>
            The grid is showing controls.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTab.UpdateControlPanelItems">
            <summary>
            Refresh the control panel items.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGridTab.SelectedVisuals">
            <summary>
            Select the visuals to show in the grid.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGridTab.SelectedVisual">
            <summary>
            Select the visual to show in the grid.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTab.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridTabLayout">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridTabManager">
            <summary>
            Manages the Controls Grid tab in the main Demo3D "properties" tab group.
            This is the root of all the Control Panel logic.  Anything that happens starts here.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.AddCustomControl(System.String,System.Windows.DataTemplate)">
            <summary>
            Add a custom control to the available data templates.
            </summary>
            <param name="name">The name of the control. It is this string that will be used in the ControlPanelItem constructor to use the custom control.</param>
            <param name="control">The DataTemplate containing the custom control.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.Get">
            <summary>
            Get the current ControlsGridTabManager
            </summary>
            <returns>The current ControlsGridTabManager.</returns>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGridTabManager.AllTabs">
            <summary>
            All tabs.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ControlsGridTabManager.AllOpenTabs">
            <summary>
            All open tabs.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.NewControl">
            <summary>
            Create a new tab.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.GetFloating">
            <summary>
            Find or open the tab we're using for the 'floating' control panel.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.FindStuck(Demo3D.Visuals.Visual)">
            <summary>
            Find a tab that's currently fixed to (stuck on) a specific visual.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.GetStuck(Demo3D.Visuals.Visual)">
            <summary>
            Find or open a tab fixed to (stuck on) a specific visual.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.SetText(Demo3D.ControlPanel.ControlsGridTab,System.String)">
            <summary>
            Set the text on the tab.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.ShowControl(Demo3D.ControlPanel.ControlsGridTab,System.Boolean)">
            <summary>
            Show a tab.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.CloseControl(Demo3D.ControlPanel.ControlsGridTab)">
            <summary>
            Close a tab.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridTabManager.DestroyControl(Demo3D.ControlPanel.ControlsGridTab)">
            <summary>
            Destroy a tab.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ControlsGridViewProvider">
            <summary>
            A class for creating customized control panel views.
            </summary>
            /** <exclude /> */
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridViewProvider.Create(Demo3D.ControlPanel.ControlsGrid)">
            <summary>
            Creates a view.  One created per controls grid tab.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridViewProvider.Register(Demo3D.ControlPanel.ControlsGridViewProvider)">
            <summary>
            Register a new view provider.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ControlsGridViewProvider.Unregister(Demo3D.ControlPanel.ControlsGridViewProvider)">
            <summary>
            Unregister a view provider.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.EditablePropertyInfo">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.EditPanel">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.EmergencyStopButton">
            <summary>
            Interaction logic for EmergencyStopButton.xaml
            </summary>
            <exclude />
            <summary>
            EmergencyStopButton
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.EmergencyStopButton.Small">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.EmergencyStopButton.SmallDefault">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.EmergencyStopButton.IsPushed">
            <summary>
            Gets or sets a value indicating whether the button is currently being pushed.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.EmergencyStopButton.ManualRelease">
            <summary>
            Gets the a value indicating manual release.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.EmergencyStopButton.Parameters">
            <summary>
            Gets the configured parameters.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.EmergencyStopButton.Push">
            <summary>
            Occurs when the button is pushed.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.EmergencyStopButton.Release">
            <summary>
            Occurs when the button is released.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.OnPush">
            <summary>
            Raises the Push event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.OnRelease">
            <summary>
            Raises the Release event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.#ctor">
            <summary>
            Initializes a new instance of the EmergencyStopButton class.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.OnIsPushedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the state of the button in response to the IsPushed property having changed.
            </summary>
            <param name="obj">The button object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.OnParametersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the configuration in response to the Parameters property having changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.OnSmallChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Responds to Small property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Pushes the button.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Pushes the button.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.StopAnimations">
            <summary>
            Stops any animations currently occuring.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.EmergencyStopButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.Lamp">
            <summary>
            Interaction logic for Lamp.xaml
            </summary>
            <exclude />
            <summary>
            Lamp
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.Small">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.SmallDefault">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.LampColor">
            <summary>
            Gets or sets the color of the lamp.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.Label">
            <summary>
            Gets or sets the text for the control's label.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.IsOn">
            <summary>
            Gets or sets a value indicating whether the lamp is currently on.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.Pushable">
            <summary>
            Gets or sets a value indicating whether the lamp can be pushed like a push button.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.ManualRelease">
            <summary>
            Gets or sets a value indicating manual release.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.IsPushed">
            <summary>
            Gets or sets a value indicating whether the lamp is currently being pushed.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.Lamp.Parameters">
            <summary>
            Gets the configured parameters.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.Lamp.TurnOn">
            <summary>
            Occurs when the lamp is turned on.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.Lamp.TurnOff">
            <summary>
            Occurs when the lamp is turned off.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.Lamp.Push">
            <summary>
            Occurs when the lamp is pushed.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.Lamp.Release">
            <summary>
            Occurs when the lamp is released.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.#ctor">
            <summary>
            Initializes a new instance of the Lamp class.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnLampColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the color of the lamp in response to the LampColor property having changed.
            </summary>
            <param name="obj">The lamp object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the text of the label in response to the Label property having changed.
            </summary>
            <param name="obj">The lamp object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnIsOnChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the state of the lamp in response to the IsOn property having changed.
            </summary>
            <param name="obj">The lamp object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnTurnOn">
            <summary>
            Raises the TurnOn event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnTurnOff">
            <summary>
            Raises the TurnOff event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnPush">
            <summary>
            Raises the Push event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnRelease">
            <summary>
            Raises the Release event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnIsPushedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the push state of the lamp in response to the IsPushed property having changed.
            </summary>
            <param name="obj">The button object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnParametersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the configuration in response to the Parameters property having changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnSmallChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Responds to Small property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Pushes the lamp.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Releases the lamp.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.Lamp.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.LampColor">
            <summary>
            Represents the color of a lamp control.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.LampColor.Green">
            <summary>
            Represents a green lamp.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.LampColor.Red">
            <summary>
            Represents a red lamp.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.LampColor.Orange">
            <summary>
            Represents an orange lamp.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.LampColor.Blue">
            <summary>
            Represents a blue lamp.
            </summary>
        </member>
        <member name="F:Demo3D.ControlPanel.LampColor.White">
            <summary>
            Represents a white lamp.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.PushButton">
            <summary>
            Interaction logic for PushButton.xaml
            </summary>
            <exclude />
            <summary>
            PushButton
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.PushButton.Label">
            <summary>
            Gets or sets the text for the control's label.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.PushButton.Small">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.PushButton.SmallDefault">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.PushButton.IsPushed">
            <summary>
            Gets or sets a value indicating whether the button is currently being pushed.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.PushButton.ManualRelease">
            <summary>
            Gets the a value indicating manual release.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.PushButton.Parameters">
            <summary>
            Gets the configured parameters.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.#ctor">
            <summary>
            Initializes a new instance of the PushButton class.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the text of the label in response to the Label property having changed.
            </summary>
            <param name="obj">The button object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="E:Demo3D.ControlPanel.PushButton.Push">
            <summary>
            Occurs when the button is pushed.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.PushButton.Release">
            <summary>
            Occurs when the button is released.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnPush">
            <summary>
            Raises the Push event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnRelease">
            <summary>
            Raises the Release event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnIsPushedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the state of the button in response to the IsPushed property having changed.
            </summary>
            <param name="obj">The button object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnSmallChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Responds to Small property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnParametersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the configuration in response to the Parameters property having changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Pushes the button.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Releases the button.
            </summary>
            <param name="e">A MouseButtonEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.PushButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.SimpleCircleAdorner">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.TextPanel">
            <summary>
            Interaction logic for TextPanel.xaml
            </summary>
            <exclude />
            <summary>
            TextPanel
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.TextPanel.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.ThreeWayRotarySwitch">
            <summary>
            Interaction logic for ThreeWayRotarySwitch.xaml
            </summary>
            <exclude />
            <summary>
            ThreeWayRotarySwitch
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.Small">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.SmallDefault">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.Label">
            <summary>
            Gets or sets the text for the control's label.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.SwitchPosition">
            <summary>
            Gets or sets a value indicating the current switch position.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.Parameters">
            <summary>
            Gets the configured parameters.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.#ctor">
            <summary>
            Initializes a new instance of the ThreeWayRotarySwitch class.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.PositionOneLabel">
            <summary>
            Gets or sets the text for the label at position one.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.PositionTwoLabel">
            <summary>
            Gets or sets the text for the label at position two.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.ThreeWayRotarySwitch.PositionThreeLabel">
            <summary>
            Gets or sets the text for the label at position three.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the text of the label in response to the Label property having changed.
            </summary>
            <param name="obj">The switch object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSwitchPositionChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the position of the switch in response to the SwitchPosition property having changed.
            </summary>
            <param name="obj">The switch object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnParametersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the configuration in response to the Parameters property having changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSmallChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Responds to Small property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSwitchOneToTwo">
            <summary>
            Raises the SwitchOneToTwoEvent event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSwitchOneToThree">
            <summary>
            Raises the SwitchOneToThreeEvent event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSwitchTwoToThree">
            <summary>
            Raises the SwitchTwoToThreeEvent event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSwitchThreeToTwo">
            <summary>
            Raises the SwitchThreeToTwoEvent event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSwitchThreeToOne">
            <summary>
            Raises the SwitchThreeToOneEvent event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnSwitchTwoToOne">
            <summary>
            Raises the SwitchTwoToOneEvent event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Toggles the state of the switch.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.ThreeWayRotarySwitch.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.TransparentPanel">
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPanel.TwoWayRotarySwitch">
            <summary>
            Interaction logic for TwoWayRotarySwitch.xaml
            </summary>
            <exclude />
            <summary>
            TwoWayRotarySwitch
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.TwoWayRotarySwitch.Small">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.TwoWayRotarySwitch.SmallDefault">
            <summary>
            Creates a reduced version of the control.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.TwoWayRotarySwitch.Label">
            <summary>
            Gets or sets the text for the control's label.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.TwoWayRotarySwitch.IsOn">
            <summary>
            Gets or sets a value indicating whether the switch is currently on.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.TwoWayRotarySwitch.Parameters">
            <summary>
            Gets the configured parameters.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.TwoWayRotarySwitch.LeftLabel">
            <summary>
            Gets or sets the text for the label at position one.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPanel.TwoWayRotarySwitch.RightLabel">
            <summary>
            Gets or sets the text for the label at position two.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.TwoWayRotarySwitch.SwitchOn">
            <summary>
            Occurs when the switch is turned on.
            </summary>
        </member>
        <member name="E:Demo3D.ControlPanel.TwoWayRotarySwitch.SwitchOff">
            <summary>
            Occurs when the switch is turned off.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.#ctor">
            <summary>
            Initializes a new instance of the TwoWayRotarySwitch class.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.OnLabelChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the text of the label in response to the Label property having changed.
            </summary>
            <param name="obj">The switch object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.OnIsOnChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the position of the switch in response to the IsOn property having changed.
            </summary>
            <param name="obj">The switch object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.OnParametersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Changes the configuration in response to the Parameters property having changed.
            </summary>
            <param name="obj">The object.</param>
            <param name="args">A DependencyPropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.OnSmallChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Responds to Small property changed.
            </summary>
            <param name="obj"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.OnSwitchOn">
            <summary>
            Raises the SwitchOn event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.OnSwitchOff">
            <summary>
            Raises the SwitchOff event.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Toggles the state of the switch.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.TwoWayRotarySwitch.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.ControlPanel.TwoWayRotarySwitchIsOnConverter">
            <exclude /> 
        </member>
        <member name="T:Demo3D.ControlPanel.IXmlElementBinding">
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPanel.IInitializeVisual">
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPanel.IInitializeIBuilder">
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPanel.VisualPanel">
            <summary>
            Control panel displayed per visual, generated from XAML. 
            Uses IControlPanel API hosting an ElementHost to contain a XAML-generated form.
            Referred to as the Xaml-Control Panel to manuals.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.ControlPanel.VisualPanel.#ctor(Demo3D.Visuals.IBuilder)">
            <param name="app">The application to build the VisualPanel for.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.VisualPanel.Bind(Demo3D.Visuals.Visual)">
            <summary>
            Binds the panel to a visual.
            </summary>
            <param name="v">The visual to be bound to.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.VisualPanel.FindXmlElement(System.Xml.XmlElement,System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.ControlPanel.VisualPanel.SetVisualXaml(System.String)">
            <summary>
            Set xml on the visual panel.
            </summary>
            <param name="xaml">Xaml to be set.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.VisualPanel.UpdateXaml(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Update Xaml on the visual panel.
            </summary>
            <param name="visual">Visual owning the visual panel.</param>
            <param name="xaml">Xaml to update to.</param>
        </member>
        <member name="M:Demo3D.ControlPanel.VisualPanel.WalkFrameworkElements(System.Windows.UIElement)">
            <exclude />
        </member>
        <member name="P:Demo3D.ControlPanel.VisualPanel.Visible">
            <summary>
            Is the visual panel visible or not.
            </summary>
        </member>
        <member name="T:Demo3D.Common.BooleanInverter">
            <summary>
            Allow properties like "IsMotorOn" to be bound to controls that want to effectively display "IsMotorOff", for example.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ExprDoubleConverter">
            <summary>
            Allow properties like "Conveyor.Motor.Speed" (type ExprDouble) to be bound to sliders (type double). Not sure if we can
            extend definition of ExprDouble so that CLR will assign double values to ExprDouble properties. Alternatively, we can watch
            for it in GlobalizedProperties.SetValue() and auto-convert (a little messy). Another idea is to walk the generated control
            tree generated from the XAML and insert converters where we know there will be a conversion requirement.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.BindableButton">
            <summary>
            Provides a button with a bindable IsPressed property. It's a shame this isn't provided by WPF as standard!
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetItem(DevExpress.Xpf.Bars.BarManager,System.String)">
            <summary>
            Removes spaces from name and returns a bar item
            </summary>
            <param name="barManager"></param>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.FindVisualChildren``1(System.Windows.DependencyObject)">
            <summary>
            Find all children of type T
            </summary>
            <typeparam name="T"></typeparam>
            <param name="depObj"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetMenu(DevExpress.Xpf.Bars.BarManager,System.String)">
            <summary>
            Returns popup menu contained in a BarSplitButtonItem
            </summary>
            <param name="barManager"></param>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetItemLinks(DevExpress.Xpf.Bars.BarManager,System.String)">
            <summary>
            Return all ItemLinks contained in the bar item
            </summary>
            <param name="barManager"></param>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetPopupContainer(DevExpress.Xpf.Bars.BarManager,System.String)">
            <summary>
            Returns popup menu contained in a BarSplitButtonItem
            </summary>
            <param name="barManager"></param>
            <param name="itemName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetRibbonPage(DevExpress.Xpf.Bars.BarManager,System.String)">
            <summary>
            Returns a ribbon page
            </summary>
            <param name="barManager"></param>
            <param name="pageName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetRibbonPageGroup(DevExpress.Xpf.Bars.BarManager,System.String,System.String)">
            <summary>
            Returns a ribbon page group
            </summary>
            <param name="barManager"></param>
            <param name="pageName"></param>
            <param name="pageGroupName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.RemoveSpaces(DevExpress.Xpf.Bars.BarManager,System.String)">
            <summary>
            Remove spaces from name to conform to DevExpress
            </summary>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.RemoveSpaces(System.String)">
            <summary>
            Remove spaces from name to conform to DevExpress
            </summary>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetIcon(System.String)">
            <summary>
            Get a bitmap image used for button icons
            </summary>
            <param name="imageName">Image file name</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.CreateContextMenu(DevExpress.Xpf.Bars.BarManager,System.String)">
            <summary>
            Create a winform context menu using a DevExpress BarSplitButtonItem
            </summary>
            <param name="barManager"></param>
            <param name="buttonName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.CreateGroupButtonWithText(DevExpress.Xpf.Bars.BarManager,System.String,System.String)">
            <summary>
            Creates a template for a button that shows text when used in a group.
            </summary>
            <param name="barManager"></param>
            <param name="text">Button text</param>
            <param name="imagePath">Button Image path</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.GetVisualChild``1(DevExpress.Xpf.Bars.BarManager,System.Windows.DependencyObject)">
            <summary>
            Used to get a child from a dependancyObject
            </summary>
            <param name="barManager"></param>
            <param name="parent"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.DevExpressUtil.DevExpressUtilities.CreateSuperTip(System.String,System.String)">
            <summary>
            Creates a super tip, with a header and description seperated by seperator
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <returns></returns>
        </member>
        <member name="F:Demo3D.Common.DevExpressUtil.DevExpressUtilities.IconTools.SHGFI_ICON">
            <summary>
            Retrieve the handle to the icon that represents the file and the index of the icon within the system image list. The handle is copied to the hIcon member of the structure specified by psfi, and the index is copied to the iIcon member.
            </summary>
        </member>
        <member name="F:Demo3D.Common.DevExpressUtil.DevExpressUtilities.IconTools.SHGFI_LARGEICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's large icon. The SHGFI_ICON flag must also be set.
            </summary>
        </member>
        <member name="F:Demo3D.Common.DevExpressUtil.DevExpressUtilities.IconTools.SHGFI_SMALLICON">
            <summary>
            Modify SHGFI_ICON, causing the function to retrieve the file's small icon. Also used to modify SHGFI_SYSICONINDEX, causing the function to return the handle to the system image list that contains small icon images. The SHGFI_ICON and/or SHGFI_SYSICONINDEX flag must also be set.
            </summary>
        </member>
        <member name="F:Demo3D.Common.DevExpressUtil.DevExpressUtilities.ShellIconSize.SmallIcon">
            <summary>
            Specifies a small (16x16) icon.
            </summary>
        </member>
        <member name="F:Demo3D.Common.DevExpressUtil.DevExpressUtilities.ShellIconSize.LargeIcon">
            <summary>
            Specifies a large (32x32) icon.
            </summary>
        </member>
        <member name="T:Demo3D.Common.DevExpressUtil.CommitHelper">
            <summary>
            Use on DevExpress grids to update values immediatley on change
            </summary>
        </member>
        <member name="T:Demo3D.Common.HtmlAgilityWrapper">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MaterialChange">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.NativeAssemblyLoader">
            <summary>
            Redirect loading of mixed mode assemblies (native and managed code) to the correct x64 or x86 version.
            </summary>
        </member>
        <member name="T:Demo3D.Common._LeapIndicator">
            <exclude />
        </member>
        <member name="T:Demo3D.Common._Mode">
            <exclude />
        </member>
        <member name="T:Demo3D.Common._Stratum">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.NTPClient">
             <summary>
             NTPClient is a C# class designed to connect to time servers on the Internet.
             The implementation of the protocol is based on the RFC 2030.
             
             Public class members:
            
             LeapIndicator - Warns of an impending leap second to be inserted/deleted in the last
             minute of the current day. (See the _LeapIndicator enum)
             
             VersionNumber - Version number of the protocol (3 or 4).
             
             Mode - Returns mode. (See the _Mode enum)
             
             Stratum - Stratum of the clock. (See the _Stratum enum)
             
             PollInterval - Maximum interval between successive messages.
             
             Precision - Precision of the clock.
             
             RootDelay - Round trip time to the primary reference source.
             
             RootDispersion - Nominal error relative to the primary reference source.
             
             ReferenceID - Reference identifier (either a 4 character string or an IP address).
             
             ReferenceTimestamp - The time at which the clock was last set or corrected.
             
             OriginateTimestamp - The time at which the request departed the client for the server.
             
             ReceiveTimestamp - The time at which the request arrived at the server.
             
             Transmit Timestamp - The time at which the reply departed the server for client.
             
             RoundTripDelay - The time between the departure of request and arrival of reply.
             
             LocalClockOffset - The offset of the local clock relative to the primary reference
             source.
             
             Initialize - Sets up data structure and prepares for connection.
             
             Connect - Connects to the time server and populates the data structure.
            	It can also set the system time.
             
             IsResponseValid - Returns true if received data is valid and if comes from
             a NTP-compliant time server.
             
             ToString - Returns a string representation of the object.
             
             -----------------------------------------------------------------------------
             Structure of the standard NTP header (as described in RFC 2030)
                                   1                   2                   3
               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |LI | VN  |Mode |    Stratum    |     Poll      |   Precision   |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                          Root Delay                           |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                       Root Dispersion                         |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                     Reference Identifier                      |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Reference Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Originate Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Receive Timestamp (64)                     |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Transmit Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                 Key Identifier (optional) (32)                |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                                                               |
              |                 Message Digest (optional) (128)               |
              |                                                               |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             
             -----------------------------------------------------------------------------
             
             NTP Timestamp Format (as described in RFC 2030)
                                     1                   2                   3
                 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Seconds                             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Seconds Fraction (0-padded)                  |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             
             </summary>
             <exclude />
        </member>
        <member name="T:Demo3D.Common.NTPClient.SYSTEMTIME">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.TimeTest">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.TableReference">
            <summary>
            Reference to a <see cref="P:Demo3D.Common.TableReference.DataTable" />.
            </summary>
        </member>
        <member name="M:Demo3D.Common.TableReference.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TableReference.#ctor(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TableReference.ToString">
            <summary>
            Returns a string showing the table name and number of rows.
            </summary>
            <returns>Textual Description.</returns>
        </member>
        <member name="P:Demo3D.Common.TableReference.Table">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.TableReference.DataTable">
            <summary>
            The underlying <see cref="P:Demo3D.Common.TableReference.DataTable" />.
            </summary>
        </member>
        <member name="P:Demo3D.Common.TableReference.Source">
            <summary>
            The source of the table to initialize from.
            This could be a path to an excel spreadsheet or a connection string for a database.
            </summary>
        </member>
        <member name="P:Demo3D.Common.TableReference.SourceQuery">
            <summary>
            The expression to initialize the table from the source with.
            This could be a cell or named range or an SQL Query.
            </summary>
        </member>
        <member name="M:Demo3D.Common.TableReference.LoadTableFromFile(System.String)">
            <summary>
            Load the underlying <see cref="P:Demo3D.Common.TableReference.DataTable" /> from file.
            </summary>
            <param name="filePath">Path to file to read.</param>
        </member>
        <member name="M:Demo3D.Common.TableReference.ExportToExcel(System.String)">
            <summary>
            Export underlying <see cref="P:Demo3D.Common.TableReference.DataTable" /> to an Excel file (.csv, .xls, .xlsx).
            </summary>
            <param name="fileName">Path to file to write.</param>
        </member>
        <member name="M:Demo3D.Common.TableReference.ImportRow(System.Data.DataRow)">
            <summary>
            Import a data row into the referenced table.
            </summary>
            <param name="row">DataRow to import.</param>
        </member>
        <member name="M:Demo3D.Common.TableReference.InitializeProp">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TableReference.InitializeFromSource">
            <summary>
            (Re-)read the table data from the source and source query fields on the table reference.
            This will automatically be called in the OnInitialize phase but for Sim3D it may be useful to force
            it to be re-read updated data from the Analysis spreadsheet during the OnExperimentPreInitialize phase.
            </summary>
        </member>
        <member name="P:Demo3D.Common.TableReference.IsInitializedFromAnalysis">
            <summary>
            Is the table read from the Analysis spreadsheet during Initialize()?
            </summary>
        </member>
        <member name="M:Demo3D.Common.TableReference.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TableReference.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.TableReference.Visual">
            <summary>
            <see cref="P:Demo3D.Common.TableReference.Visual" /> that owns this <see cref="T:Demo3D.Common.TableReference" />.
            </summary>
        </member>
        <member name="M:Demo3D.Common.TableReference.Clone">
            <summary>
            Make a copy of the <see cref="T:Demo3D.Common.TableReference" />, including a copy of the contained <see cref="P:Demo3D.Common.TableReference.DataTable" />.
            </summary>
            <returns>Copy of the <see cref="T:Demo3D.Common.TableReference" />.</returns>
        </member>
        <member name="M:Demo3D.Common.TableReference.op_Implicit(Demo3D.Common.TableReference)~Demo3D.Common.Table">
            <summary>
            Implicitly convert <see cref="T:Demo3D.Common.TableReference" /> to the underlying <see cref="P:Demo3D.Common.TableReference.Table" />.
            </summary>
            <param name="v"><see cref="T:Demo3D.Common.TableReference" /> to convert.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TableReference.op_Implicit(Demo3D.Common.TableReference)~System.Data.DataTable">
            <summary>
            Implicitly convert <see cref="T:Demo3D.Common.TableReference" /> to the underlying <see cref="P:Demo3D.Common.TableReference.DataTable" />.
            </summary>
            <param name="v"><see cref="T:Demo3D.Common.TableReference" /> to convert.</param>
        </member>
        <member name="T:Demo3D.Common.Table">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Maybe`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MaybeFunctions">
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPoints.ControlPointBase">
            <summary>
            The base class for Demo3D.ControlPoints.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.ControlPointBase.Owner">
            <summary>
            The Owner of this control point.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.ControlPointBase.Document">
            <summary>
            The document that the owner belongs to.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.ControlPointBase.App">
            <summary>
            The global application object.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.Double2ControlPoint">
            <summary>
            A control point which affects the values of two properties.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.Double2ControlPoint.MoveOwner">
            <summary>
            Allow the control point to move the owner when being dragged.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.Double2ControlPoint.Value">
            <summary>
            The value of the first property.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.Double2ControlPoint.Value2">
            <summary>
            The value of the second property.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.DoubleControlPoint">
            <summary>
            A control point which affects the values of a property.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.DoubleControlPoint.Value">
            <summary>
            Value of the property
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.DraggableControlPoint.Direction">
            <summary>
            The direction that the control point moves in.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.NamespaceDoc">
            <summary>
            The Demo3D.ControlPoints namespace contains functionality for adding custom control points to a visual.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.IControlPoint">
            <summary>
            The control point interface.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.IControlPoint.RenderAfterTransparencies">
            <summary>
            Whether to render the control point after transparencies.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.IControlPoint.Highlighted">
            <summary>
            Whether the control point is highlighted.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPoints.IControlPoint.Activate">
            <summary>
            Executes when the control point is shown.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPoints.IControlPoint.Deactivate">
            <summary>
            Executes when the control point is hidden.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPoints.IControlPoint.UpdateSize(Demo3D.Visuals.Camera)">
            <summary>
            Update the size of the control point.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:Demo3D.ControlPoints.IControlPoint.Render(Demo3D.Visuals.IDisplay)">
            <summary>
            Render the control point
            </summary>
            <param name="display"></param>
        </member>
        <member name="M:Demo3D.ControlPoints.IControlPoint.Pick(Demo3D.Visuals.IDisplay,Demo3D.Visuals.Ray,Demo3D.Visuals.PickInfo@)">
            <summary>
            Test if the world ray intersects the control point.
            </summary>
            <param name="display"></param>
            <param name="worldRay"></param>
            <param name="info"></param>
            <returns>True if the world ray intersects the control point</returns>
        </member>
        <member name="T:Demo3D.ControlPoints.IControlPointProvider">
            <summary>
            Implement this on an aspect to allow the aspect to provide custom control points.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.IControlPointProvider.IsEnabled">
            <summary>
            Whether to show control points or not.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.IControlPointProvider.Document">
            <summary>
            The document that the provider belongs to.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.IControlPointProvider.ControlPoints">
            <summary>
            The collection of control points to provide.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.IControlPointProvider.WorldMatrix">
            <summary>
            The World matrix of the provider.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.PolygonControlPoint">
            <exclude />
        </member>
        <member name="T:Demo3D.ControlPoints.BoxControlPoint">
            <summary>
            A basic box control point
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.RenderableControlPointBase">
            <summary>
            The base class for renderable control points
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.RenderableControlPointBase.Draggable">
            <summary>
            Is the control point draggable.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.RenderableControlPointBase.OwnerWorldMatrix">
            <summary>
            The world matrix of the owner
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.RenderableControlPointBase.OwnerWorldLocation">
            <summary>
            The world location of the owner.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.RenderableControlPointBase.WorldMatrix">
            <summary>
            The world matrix of the control point.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.RenderableControlPointBase.WorldLocation">
            <summary>
            The world location of the control point.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.RenderableControlPointBase.DragPlane">
            <summary>
            The plane in which the control point can be dragged.
            </summary>
        </member>
        <member name="M:Demo3D.ControlPoints.RenderableControlPointBase.CreateRenderable">
            <summary>
            Create the renderable used to render the control point.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Demo3D.ControlPoints.RenderableControlPointBase.Size">
            <summary>
            The current size of the control point.
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.Vector3ControlPoint">
            <summary>
            A control point which affects the values of a Vector3 property.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.Vector3ControlPoint.Value">
            <summary>
            Value of the property
            </summary>
        </member>
        <member name="T:Demo3D.ControlPoints.VisualPointControlPoint">
            <summary>
            A control point which affects the values of a VisualPoint property.
            </summary>
        </member>
        <member name="P:Demo3D.ControlPoints.VisualPointControlPoint.Value">
            <summary>
            Value of the property
            </summary>
        </member>
        <member name="T:Demo3D.Wpf.NamespaceDoc">
            <summary>
            Not yet documented.
            </summary>
        </member>
        <member name="T:Demo3D.Wpf.ExceptionViewer">
            <summary>
            A WPF window for viewing Exceptions and inner Exceptions, including all their properties.
            </summary>
            <exclude />
            <summary>
            ExceptionViewer
            </summary>
        </member>
        <member name="M:Demo3D.Wpf.ExceptionViewer.#ctor(System.String,System.Exception,Demo3D.Visuals.Document)">
            <summary>
            The exception and header message cannot be null.  If owner is specified, this window
            uses its Style and will appear centered on the Owner.  You can override this before
            calling ShowDialog().
            </summary>
        </member>
        <member name="M:Demo3D.Wpf.ExceptionViewer.#ctor(System.String,System.Exception,System.Windows.Window,Demo3D.Visuals.Document)">
            <summary>
            The exception and header message cannot be null.  If owner is specified, this window
            uses its Style and will appear centered on the Owner.  You can override this before
            calling ShowDialog().
            </summary>
        </member>
        <member name="P:Demo3D.Wpf.ExceptionViewer.DefaultTitle">
            <summary>
            The default title to use for the ExceptionViewer window.  Automatically initialized 
            to "Error - [ProductName]" where [ProductName] is taken from the application's
            AssemblyProduct attribute (set in the AssemblyInfo.cs file).  You can change this
            default, or ignore it and set Title yourself before calling ShowDialog().
            </summary>
        </member>
        <member name="P:Demo3D.Wpf.ExceptionViewer.Product">
            <summary>
            Gets the value of the AssemblyProduct attribute of the app.  
            If unable to lookup the attribute, returns an empty string.
            </summary>
        </member>
        <member name="M:Demo3D.Wpf.ExceptionViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Wpf.HelpControl">
            <summary>
            Interaction logic for HelpControl.xaml
            </summary>
            <exclude />
            <summary>
            HelpControl
            </summary>
        </member>
        <member name="M:Demo3D.Wpf.HelpControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Wpf.LayerViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.Wpf.SampleLayers">
            <exclude />
        </member>
        <member name="T:Demo3D.Controls.TableEditControlWPF">
            <summary>
            Interaction logic for TableEditControlWPF.xaml
            </summary>
            <summary>
            TableEditControlWPF
            </summary>
        </member>
        <member name="M:Demo3D.Controls.TableEditControlWPF.DeleteFocusedRow(DevExpress.Xpf.Grid.TableView)">
            <summary>
            Delete selected row from table *and* commit the changes, otherwise it is just marked as "Deleted" but still exists!
            </summary>
            <param name="view">Current <see cref="P:Demo3D.Controls.TableEditControlWPF.TableView" />.</param>
        </member>
        <member name="M:Demo3D.Controls.TableEditControlWPF.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Controls.TableEditPane">
            <summary>
            A <see cref="T:Demo3D.Gui.DockPane" /> that contains a Table Edit control
            </summary>
        </member>
        <member name="M:Demo3D.Controls.TableEditPane.Edit(Demo3D.Visuals.IBuilder,Demo3D.Visuals.Visual)">
            <summary>
            Edit all tables for a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Controls.TableEditPane.Edit(Demo3D.Visuals.IBuilder,Demo3D.Utilities.CustomProperty)">
            <summary>
            Edit specific table for a visual.
            </summary>
        </member>
        <member name="M:Demo3D.Controls.TableEditPane.FindPane(Demo3D.Visuals.IBuilder,System.Data.DataTable)">
            <summary>
            Find an IDockPane which is displaying the specified table.
            </summary>
            <param name="app">The main app.</param>
            <param name="table">The table used to find the pane.</param>
            <returns></returns>
        </member>
        <member name="F:Demo3D.Controls.TableSchemaEditControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Controls.TableSchemaEditControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Controls.TableSchemaEditControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Demo3D.Controls.TableSchemaEditWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Controls.TableSchemaEditWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Controls.TableSchemaEditWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.CSG.Vertex">
            <exclude />
        </member>
        <member name="T:Demo3D.CSG.Polygon">
            <exclude />
        </member>
        <member name="T:Demo3D.CSG.Plane">
            <exclude />
        </member>
        <member name="T:Demo3D.CSG.BSPNode">
            <exclude />
        </member>
        <member name="T:Demo3D.CSG.NamespaceDoc">
            <summary>
            The Demo3D.CSG namespace contains functionality for performing CSG operations on Visuals.
            </summary>
            <remarks>
            All classes and methods documented here are intended for use in user scripting.
            </remarks>
        </member>
        <member name="T:Demo3D.CSG.CSGType">
            <summary>
            The CSGType struct is used to set the type of CSG operation of a CSGVisualReference.
            </summary>
        </member>
        <member name="F:Demo3D.CSG.CSGType.None">
            <summary>Do not perform any operation</summary>
        </member>
        <member name="F:Demo3D.CSG.CSGType.Union">
            <summary>Combine the volumes of the owner and the referenced visual.</summary>
        </member>
        <member name="F:Demo3D.CSG.CSGType.Subtract">
            <summary>Subtract the volume of the referenced visual from the owner</summary>
        </member>
        <member name="F:Demo3D.CSG.CSGType.Intersect">
            <summary>Remove the volume of the owner that is not also part of the volume of the referenced visual.</summary>
        </member>
        <member name="T:Demo3D.CSG.CSGVisualReference">
            <summary>
            The CSGVisualReference struct is added to a Visuals CSGOperations property to perform CSG operations when the Visuals mesh is created.
            </summary>
        </member>
        <member name="P:Demo3D.CSG.CSGVisualReference.Type">
            <summary>
            The type of CSG operation to be performed by the CSGVisualReference.
            </summary>
        </member>
        <member name="P:Demo3D.CSG.CSGVisualReference.Visual">
            <summary>
            A reference to the visual to be used by the CSGVisualReference.
            </summary>
        </member>
        <member name="T:Demo3D.CSG.Operators">
            <summary>
            The Operators class provides access to CSG operations for use on ImportedMeshVisuals.
            </summary>
        </member>
        <member name="M:Demo3D.CSG.Operators.Union(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Combine the volumes of 2 meshes.
            </summary>
            <param name="a">The Visual whose mesh will be modified.</param>
            <param name="b">The Visual whose mesh volume will be added.</param>
        </member>
        <member name="M:Demo3D.CSG.Operators.Subtract(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Subtract the volume of one mesh from another.
            </summary>
            <param name="a">The Visual whose mesh will be modified.</param>
            <param name="b">The Visual to be subtracted.</param>
        </member>
        <member name="M:Demo3D.CSG.Operators.Intersect(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Remove the volume of one mesh that is not also part of the volume of the other mesh.
            </summary>
            <param name="a">The Visual whose mesh will be modified.</param>
            <param name="b">The Visual whose mesh is used to modify the other.</param>
        </member>
        <member name="M:Demo3D.CSG.Operators.Commit(Demo3D.Visuals.Visual)">
            <summary>
            Commit previous CSG operations, creating a new mesh.
            This operation cannot be undone.
            </summary>
            <param name="a">The Visual whose CSG operations will be commited.</param>
        </member>
        <member name="T:Demo3D.CSG.CSGAspect">
            <summary>Performs CSG mesh operations (for example, cut).</summary>
        </member>
        <member name="P:Demo3D.CSG.CSGAspect.CSGOperations">
            <summary>
            List of CSG operations to be applied to the visual
            </summary>
        </member>
        <member name="M:Demo3D.CSG.CSGAspect.OnEnabled">
            <summary>
            Called when enabled, this should never be invoked manually
            </summary>
        </member>
        <member name="M:Demo3D.CSG.CSGAspect.OnDisabled">
            <summary>
            Called when disabled, this should never be invoked manually
            </summary>
        </member>
        <member name="P:Demo3D.CSG.CSGAspect.SerializedCSGTree">
            <exclude />
        </member>
        <member name="M:Demo3D.CSG.CSGAspect.ApplyOperations">
            <summary>
            Apply CSG operations, creating a temporary mesh
            The original mesh remains and can be recovered by removing <see cref="P:Demo3D.CSG.CSGAspect.CSGOperations">CSGOperations</see> and re-applying
            </summary>
        </member>
        <member name="M:Demo3D.CSG.CSGAspect.CommitOperations">
            <summary>
            Commit CSG operations, creating a new mesh.
            This operation cannot be undone. This operation will remove this Aspect
            </summary>
        </member>
        <member name="T:Demo3D.CTRecords.CTUpdateType">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.CTRecords.ItemUpdate">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.CTRecords.TimedUpdate">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.CTRecords.BindableItemDefinition">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.CTRecords.CTRecord">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.CTRecords.CTRecordsConfiguration">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.CustomLogic">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.CustomLogic.Enabled">
            <exclude />
        </member>
        <member name="F:Demo3D.QuickLogic.CustomLogic.DebugAllEnabled">
            <exclude />
        </member>
        <member name="M:Demo3D.QuickLogic.CustomLogic.CreateEditor">
            <summary>
            Use with QuickScriptWindow class only
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.CustomLogic.JScriptFunctionToString(Demo3D.Script.Function)">
            <summary>
            Concat script name and function name as function names aren't unique outside of a script.
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.CustomLogic.__inpc(System.Object[])">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Convert the array of objects to an array of INotifyPropertyChanged, ready to listen for changes in a wait statement.
            </summary>
            <param name="objs">Objects to convert to INotifyPropertyChanged.</param>
            <returns>Array of INotifyPropertyChanged.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.QuickLogic.CustomLogic.__cast``1(System.Object)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.ICustomLogicEditorWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.CustomLogicEditorWindow">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.CustomLogicEditorPane">
            <exclude />
        </member>
        <member name="M:Demo3D.QuickLogic.CustomLogicAutoCompleteProvider.GetProviderForType(System.Type)">
            <summary>
            Get's an auto complete provider based on the provided type
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.QuickLogic.CustomLogicEditor">
            <exclude />
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.IsNotifyCompletion(System.Reflection.MethodInfo)">
            <summary>
            Does this method block, and need "yield return"?
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.IsYieldReturn(System.Reflection.MethodInfo)">
            <summary>
            Does this method require "yield return"?
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.IsAsyncMethod(System.Reflection.MethodInfo)">
            <summary>
            Is this method async?
            </summary>
            <param name="info">Method info.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.IsResult(System.Type)">
            <summary>
            Is this type inherited from Demo3D.EventQueue.Result?
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.TypeWrappedByResult(System.Type)">
            <summary>
            Get T from Result(T), or just return resultType if it is not a Result(T)
            NOTE: Non-Generic Result is still a result but the return type is object.
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.EffectiveReturnType(System.Reflection.MethodInfo)">
            <summary>
            The value of this method from the script's point of view. For example
                Result(T)   Fn()
                T           Fn()
                IEnumerable Fn( Result(T) result );
            all will have EffectiveReturnType of T
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.ReturnsResult(System.Reflection.MethodInfo)">
            <summary>
            Does the method return a Result?
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.ReturnsValue(System.Reflection.MethodInfo)">
            <summary>
            Does the method "return" a value? The following methods are not considered to return values:
                void                       M();
                [YieldReturn] IEnumerable  M();
                ITask          M();
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.HasResultParameter(System.Reflection.MethodInfo)">
            <summary>
            Does the method have a parameter of type Result(T)?
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.IsFunction(System.Reflection.MethodInfo)">
            <summary>
            Can the method be considered a function, yielding a result value in some way?
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.HasResult(System.Reflection.MethodInfo)">
            <summary>
            This method either returns Result(T) or is passed Result(T)
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.MethodUtils.ResultType(System.Reflection.MethodInfo)">
            <summary>
            The value type returned by the method, either directly or via a parameter. If it is Result(T), this
            will not be converted to T.
            </summary>
        </member>
        <member name="T:Demo3D.QuickLogic.PropertyExistenceFunctions">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.ValueFunctions">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.PropertyPrototypes">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.NativeScriptPrototypes">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.QuickLogicPrototypes">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.BlockingNativeFunctionProto.MethodInfo">
            <summary>
            Return the <see cref="T:System.Reflection.MethodInfo" /> representing this widget. 
            </summary>
        </member>
        <member name="T:Demo3D.QuickLogic.ScriptThreadResult`1">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.VisualNativeRenderer">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.VisualTypeService">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.NamespaceDoc">
            <summary>
            The Demo3D.QuickLogic namespace contains functionality for creating and executing QuickLogic procedures.
            </summary>
            <remarks>
            All classes and methods documented here are intended for use in user scripting.
            </remarks>
        </member>
        <member name="T:Demo3D.QuickLogic.Script">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.Control">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.ProcedureException">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.Procedure">
            <summary>
            Class that holds a collection of QuickLogic code and the ability to execute it.
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.#ctor">
            <summary>
            Construct a new QuickLogic procedure.
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.Clone">
            <summary>
            Clone a QuickLogic procedure.
            </summary>
            <returns>A copy of the QuickLogic procedure.</returns>
        </member>
        <member name="F:Demo3D.QuickLogic.Procedure.UpgradeAutomatically">
            <summary>
            Automatically upgrade QuickLogic Procedures to the latest version (default=false).
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.Upgrade">
            <summary>
            Convert from the previous version of QuickLogic to the latest version.
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.UpgradeAll(Demo3D.Visuals.Document)">
            <summary>
            Convert all QuickLogic in the document from the previous version of QuickLogic to the latest version.
            </summary>
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.Source">
            <summary>
            The source text for the QuickLogic.
            NOTE: If this is empty, you may need to call Upgrade() to convert from the previous version of QuickLogic.
            </summary>
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.Logic">
            <exclude />
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.Execute(System.Object[])">
            <summary>
            Execute the QuickLogic procedure now.
            </summary>
            <param name="args">The arguments to pass into the QuickLogic procedure.</param>
            <returns>
            The result of the QuickLogic procedure.
            This may be the actual value or an ITask representing a yet to be completed task.
            </returns>
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.ReferenceDescription">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.ReferenceName">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.Description">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.ContainsExecutableCode">
            <summary>
            Does the QuickLogic procedure contain any statements or is it empty.
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.ToString">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.ParameterFormat">
            <summary>
            A format string that represents the names and types of any parameters
            that are expected by this QuickLogic procedure when it is executed.
            </summary>
            <remarks>
            <para>
            The format for this is text interspersed with parameters in {name:type} format.
            If the QuickLogic procedure is a function that returns a result then add {returns:type}.
            </para>
            <para>
            These are examples of ParameterFormat strings for a QuickLogic procedure:
            </para>
            <para>"Order Load {sku:String} with Layers {numLayers:Int32} Store to Bin {binLoc:BinLocations}"</para>
            <para>"Get Volume Of {load:Visual} {returns:Double}"</para>
            </remarks>
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.Edit">
            <exclude />
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.Edit(Demo3D.VisualScripting.EditParameters)">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.Script">
            <exclude />
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.Visual">
            <summary>
            The Visual that this QuickLogic procedure is bound to.
            </summary>
        </member>
        <member name="P:Demo3D.QuickLogic.Procedure.Name">
            <summary>
            The name of this QuickLogic procedure.
            </summary>
        </member>
        <member name="M:Demo3D.QuickLogic.Procedure.CompileAllAsync(Demo3D.Visuals.Document,System.Action)">
            <summary>
            Compile QuickLogic on a separate thread
            </summary>
            <param name="doc">The current document</param>
            <param name="preCompileAction">Action to execute if procedures are found</param>
        </member>
        <member name="T:Demo3D.QuickLogic.ProcedureEditor">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.BlocksLexer">
            <exclude />
        </member>
        <member name="T:Demo3D.QuickLogic.BlocksParser">
            <exclude />
        </member>
        <member name="T:Demo3D.SmartEdit.ProcedurePrototypes">
            <exclude />
        </member>
        <member name="T:Demo3D.SmartEdit.UserProcsPrototypes">
            <exclude />
        </member>
        <member name="M:Demo3D.SmartEdit.TagServerGetterProto.IsGlobalVar(Demo3D.SmartEdit.ScriptItem)">
            <summary>
            An item can only be a global var if the first argument is a pre-defined string
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Diagram.DiagramItemAdorner">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Draws the name and highlights the connection points on diagram items
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.DiagramSpurType">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Defines the style of any dashes or arrows drawn next to a connection point on a diagram item
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.DiagramPointInfo">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Defines the style for the drawn name and connection points on a diagram item
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.DiagramShapeInfo">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Defines the number of points and the text to be displayed by a DiagramItemAdorner
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.DiagramCursorTool">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Options for the cursor mode on a diagram
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.IDiagram">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Diagram with boxes and connectors between them
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.IDiagramBase">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Base interface for a diagram object
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.IDiagramBox">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            A box shaped item with connection points which can be added to a diagram
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.ArrowType">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Different styles which a diagram connector can take
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.IDiagramConnector">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Connection arrows which can be drawn between diagram items in a diagram
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.IDiagramContainer">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            A box shape that can be added to a diagram, which can contain other diagram items within it
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.IDiagramItem">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            A box shape that can be added to a diagram, which cannot have any other items sit inside it
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.DiagramFactory">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Factory for create diagrams, diagram items, diagram containers, and connectors
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.IsVisible">
            <summary>
            Set the visibility of the diagram's control.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Diagram.DiagramWindow.GotFocus">
            <summary>
            Occurs when the control for the diagram gains focus
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Diagram.DiagramWindow.PreviewMouseDown">
            <summary>
            Occurs when the mouse is pressed within the diagram.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Diagram.DiagramWindow.PreviewKeyDown">
            <summary>
            Occurs when a key is pressed within the diagram.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Diagram.DiagramWindow.Drop">
            <summary>
            Occurs when an item is dropped on the diagram's grid.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Diagram.DiagramWindow.Drag">
            <summary>
            Occurs when an item within the diagram starts a drag action.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Diagram.DiagramWindow.OnItemAdded">
            <summary>
            Occurs when a new item is added to the diagram.
            </summary>
        </member>
        <member name="E:Demo3D.Diagram.DiagramWindow.SelectionChanged">
            <summary>
            Occurs when the a different item is selected in the diagram.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.Connectors">
            <summary>
            Returns a list of all of the connectors currently placed in the diagram.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.DiagramItems">
            <summary>
            Returns a list of all of the diagram items currently placed in the diagram.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.SelectedDiagramItems">
            <summary>
            Returns a list of the currently selected diagram items. This does not include connectors.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.SelectedConnectors">
            <summary>
            Returns a list of the currently selected connectors.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.PropertiesPanelVisibility">
            <summary>
            Shows or hides the properties pane, which displays information on the currently selected diagram item or connector.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.ToolboxVisibility">
            <summary>
            Shows or hides the toolbox, which allows new items to be added to the diagram from a list of templates.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.ShowGrid">
            <summary>
            Shows or hides the grid, where diagram items and connectors can be assembled.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.GridSize">
            <summary>
            Determines the size of the grid element within the diagram pane
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.SnapToItems">
            <summary>
            Determines whether diagram items should snap to each other as they are dragged around
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.ScrollMargin">
            <summary>
            Determines the outer indents of the diagram.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.ShowRulers">
            <summary>
            Shows or hides rules which surround the grid on the diagram.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.ShowPageBreaks">
            <summary>
            Shows or hides page breaks on the diagram
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.EnableProportionalResizing">
            <summary>
            Determines whether to lock the aspect ratio when resizing diagram items.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.ZoomFactor">
            <summary>
            Shows or hides the grid, where diagram items and connectors can be assembled.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Diagram.DiagramWindow.SelectedStencils">
            <summary>
            The currently selected shapes group
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Diagram.DiagramWindow.CreateDockPane">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Returns a dock pane which contains the diagram control
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Diagram.DiagramWindow.AddItem(Demo3D.Diagram.IDiagramBox)">
            <summary>
            Add a diagram item into the diagram
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Diagram.DiagramWindow.AddConnector(Demo3D.Diagram.IDiagramConnector)">
            <summary>
            Adds a connector to the diagram
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Diagram.DiagramWindow.RemoveItem(Demo3D.Diagram.IDiagramBox)">
            <summary>
            Removes a diagram item from the diagram
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Diagram.DiagramWindow.RemoveConnector(Demo3D.Diagram.IDiagramConnector)">
            <summary>
            Removes a connector from the diagram
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.DiagramEvents">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Events specific to the E3D diagram
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Diagram.DiagramMainControl">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Interaction logic for the diagram
            </summary>
            <exclude />
            <summary>
            DiagramMainControl
            </summary>
        </member>
        <member name="M:Demo3D.Diagram.DiagramMainControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Diagram.DiagramRibbonManager">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Events specific to the E3D diagram
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Licensing.Capability">
            <summary>
            The capabilities of an Edition represented as a flag set.
            </summary>
        </member>
        <member name="T:Demo3D.Licensing.EditionAttribute">
            <summary>
            Indicates that the member requires certain CanXXX() capabilities to be used.
            </summary>
        </member>
        <member name="E:Demo3D.Licensing.RequestEncrypterControl.LicenseAcquired">
            <summary>
            Occurs when a license has been successfully received from the license server.
            </summary>
        </member>
        <member name="M:Demo3D.Licensing.RequestEncrypterControl.Initialize(Demo3D.Visuals.IBuilder)">
            <summary>
            Called when the user is wanting to apply a new encryption licence to a script.
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:Demo3D.Licensing.RequestEncrypterControl.Initialize(Demo3D.Visuals.IBuilder,System.String,System.String,System.String)">
            <summary>
            Called when we have an encrypted script for which we need a licence - one that we've not
            been able to find on disk, nor from the licence server.
            </summary>
            <param name="app"></param>
            <param name="message"></param>
            <param name="encrypterName"></param>
            <param name="loadingWhat"></param>
        </member>
        <member name="F:Demo3D.Licensing.RequestEncrypterControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Licensing.RequestEncrypterControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Licensing.RequestEncrypterControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Demo3D.Licensing.RequestEncrypterWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Licensing.RequestEncrypterWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Licensing.RequestEncrypterWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Events.CancelableEvent">
            <summary>
            Allow event to be canceled by assigning a new event to Value or null.
            </summary>
        </member>
        <member name="T:Demo3D.EventNames">
            <summary>
            Event type names used for localization.
            </summary>
        </member>
        <member name="T:Demo3D.EventTypeNames">
            <summary>
            The type of the event.
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.AddExperimentPropertyWindow">
            <summary>
            Interaction logic for AddExperimentPropertyWindow.xaml
            </summary>
            <summary>
            AddExperimentPropertyWindow
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.AddExperimentPropertyWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.Analysis">
            <summary>
            Container for experiment results, charts.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Analysis.UnlockedWorkBook">
            <summary>
            Get the work book without looking
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Analysis.UpdateBottomRowIndex(System.String,System.Int32)">
            <summary>
            Record the last row for each table.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Analysis.UpdateDefinedNameRanges">
            <summary>
            Expand named ranges to cover the table sizes.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Analysis.ProcessGuiActions(System.Boolean)">
            <summary>
            Schedule updates to be flush at sometime in the future.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Analysis.FlushUpdates">
            <summary>
            Flush updates to the GUI if not already in progress.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Analysis.ProcessGuiActions">
            <summary>
            Process the queue of updates.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Analysis.OverrideRange(DevExpress.Spreadsheet.CellRange,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Take an existing range and add or remove from the borders a certain number of cells (defaults to 0).
            </summary>
            <param name="range">Range to create a new range from.</param>
            <param name="left">Optionally overrides Range.LeftColumnIndex.</param>
            <param name="top">Optionally overrides Range.TopRowIndex.</param>
            <param name="right">Optionally overrides Range.RightColumnIndex.</param>
            <param name="bottom">Optionally overrides Range.BottomRowIndex.</param>
            <returns>New range reflecting overrides to <paramref name="range" />.</returns>
        </member>
        <member name="M:Demo3D.Experiments.Analysis.TableNameToDefinedName(System.String)">
            <summary>Learn about syntax rules for [defined] names
             https://support.office.com/en-ie/article/Define-and-use-names-in-formulas-4d0f13ac-53b7-422e-afd2-abd7ff379c64#bmsyntax_rules_for_names
             Valid characters    The first character of a name must be a letter, an underscore character (_), or a backslash (\).
                                 Remaining characters in the name can be letters, numbers, periods, and underscore characters.
                                 
             NOTE                You cannot use the uppercase and lowercase characters "C", "c", "R", or "r" as a defined name, 
                                 because they are all used as a shorthand for selecting a row or column for the currently selected cell
                                 when you enter them in a Name or Go To text box.
                                 
             Cell references disallowed
                                 Names cannot be the same as a cell reference, such as Z$100 or R1C1.
             
             Spaces are not valid
                                 Spaces are not allowed as part of a name. Use the underscore character (_) and period (.) as word separators, such as, Sales_Tax or First.Quarter.
             
             Name length         A name can contain up to 255 characters.
             
             Case sensitivity    Names can contain uppercase and lowercase letters. Excel does not distinguish between uppercase and lowercase characters in names. For example, if you created the name Sales and then create another name called SALES in the same workbook, Excel prompts you to choose a unique name.
             </summary> 
        </member>
        <member name="T:Demo3D.Experiments.ScheduledTask">
            <summary>
            Is there a Task based replacement for System.Threading.Timer?
            http://stackoverflow.com/a/23814733
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.EventListView">
            <summary>
            Interaction logic for EventListView.xaml
            </summary>
            <exclude />
            <summary>
            EventListView
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.EventListView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.PropertyTrackingControl">
            <summary>
            Interaction logic for PropertyTrackingControl.xaml
            </summary>
            <summary>
            PropertyTrackingControl
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.PropertyTrackingControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.ExperimentCollectionControl">
            <exclude />
        </member>
        <member name="F:Demo3D.Experiments.ExperimentCollectionControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollectionControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollectionControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.NamespaceDoc">
            <summary>
            The Demo3D.Experiments namespace contains functionality for running Sim3D experiments and collecting result tables.
            </summary>
            <remarks>
            All classes and methods documented here are intended for use in user scripting.
            </remarks>
        </member>
        <member name="T:Demo3D.Experiments.DataColumnExtensionMethod">
            <exclude />
        </member>
        <member name="M:Demo3D.Experiments.DataColumnExtensionMethod.Fill(System.Data.DataColumn,System.Object)">
            <summary>
            Sets all the values in the column to the provided value.
            </summary>
            <param name="column">The column to modify.</param>
            <param name="value">The value that should be set for each element in the column.</param>
        </member>
        <member name="T:Demo3D.Experiments.ExperimentCollection">
            <summary>
            Collection of experiments.
            </summary>
        </member>
        <member name="F:Demo3D.Experiments.ExperimentCollection.doc">
            <summary>
            The parent document.
            </summary>
        </member>
        <member name="F:Demo3D.Experiments.ExperimentCollection.experimentsTable">
            <summary>
            The experiments table.
            </summary>
        </member>
        <member name="F:Demo3D.Experiments.ExperimentCollection.experiments">
            <summary>
            The list experiments.
            </summary>
        </member>
        <member name="F:Demo3D.Experiments.ExperimentCollection.CustomResultsFileName">
            <summary>
            Enables the user to select a custom name for the auto-generated Excel Results file as requested by D-9378. 
            If this value is null or empty the default (the model name with an appended timestamp) is used.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Experiments.ExperimentCollection.ExperimentPreInitialize">
            <exclude />
        </member>
        <member name="E:Demo3D.Experiments.ExperimentCollection.ExperimentStarted">
            <exclude />
        </member>
        <member name="E:Demo3D.Experiments.ExperimentCollection.ExperimentFinished">
            <exclude />
        </member>
        <member name="E:Demo3D.Experiments.ExperimentCollection.ExperimentCollectionStarted">
            <exclude />
        </member>
        <member name="E:Demo3D.Experiments.ExperimentCollection.ExperimentCollectionFinished">
            <exclude />
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.#ctor">
            <summary>
            Default constructor for serialization support.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.#ctor(Demo3D.Visuals.Document)">
            <summary>
            Constructor.
            </summary>
            <param name="doc">The parent document.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.Clear">
            <summary>
            Clears all experiments and then adds an empty experiment ready for configuration.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.Count">
            <summary>
            Number of experiments.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.experimentsTable_RowDeleting(System.Object,System.Data.DataRowChangeEventArgs)">
            <summary>
            Experiments table row deletion callback.
            </summary>
            <param name="sender">Object that raised the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.Renumber">
            <summary>
            Renumbers the experiments so that the numbering is the sequence [1, Count].
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.RunExperimentPreInitializeScript(Demo3D.Visuals.Visual,Demo3D.Experiments.Experiment)">
            <summary>
            Runs the OnExperimentPreInitialize script function on the specified visual and all
            descendant visuals down the hierarchy.
            </summary>
            <param name="visual">The root visual.</param>
            <param name="experiment">The experiment that has started.</param>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.RunExperimentStartedScript(Demo3D.Visuals.Visual,Demo3D.Experiments.Experiment)">
            <summary>
            Runs the OnExperimentStarted script function on the specified visual and all
            descendant visuals down the hierarchy.
            </summary>
            <param name="visual">The root visual.</param>
            <param name="experiment">The experiment that has started.</param>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.RunExperimentFinishedScript(Demo3D.Visuals.Visual,Demo3D.Experiments.Experiment)">
            <summary>
            Runs the OnExperimentFinished script function on the specified visual and all
            descendant visuals down the hierarchy.
            </summary>
            <param name="visual">The visual.</param>
            <param name="experiment">The experiment that has been completed.</param>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.IsThisParallelInstance">
            <summary>
            Returns whether this application is a Parallel Instance of Demo3D.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.Current">
            <summary>
            The experiment currently selected.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.First">
            <summary>
            The first experiment in the collection.
            </summary>
            <remarks>
            Returns null if there are no experiments in the collection.
            </remarks>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.All">
            <summary>
            Enumerable for all the experiments in the collection.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.ExperimentsTable">
            <summary>
            The experiments table.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.Speed">
            <summary>
            The speed at which to run the experiments.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.InitializeVariable(System.Int32,System.Boolean)">
            <summary>
            Returns the current or default/initial value for the the cell specified by the provided column
            index in the last row of the experiments table.
            </summary>
            <param name="colIndex">Column index for the cell.</param>
            <param name="increment">Whether to increment return value</param>
            <returns>Value at the specified column in the table.</returns>
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.Item(System.Int32)">
            <summary>
            Get the Experiment at index 'i' from the experiment collection.
            </summary>
            <param name="i">Index of experiment.</param>
            <returns>Experiment at index.</returns>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.AddExperiment(System.Boolean)">
            <summary>
            Creates and adds a new experiment to both the collection and table.
            </summary>
            <returns>The experiment that was created.</returns>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.AddExperiment">
            <summary>
            Creates and adds a new experiment to both the collection and table.
            </summary>
            <returns>The experiment that was created.</returns>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.GetPropertyValue(System.Object,System.String)">
            <summary>
            Returns the value of the specified property on the specified component/visual.
            </summary>
            <param name="component">Component (e.g. visual) on which to access the property.</param>
            <param name="property">Name of the property to return.</param>
            <returns>The property's value.</returns>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.AddProperty(Demo3D.Visuals.Visual,System.String,System.Type)">
            <summary>
            Adds a new experiment property column to the experiments table.
            </summary>
            <param name="visual">The visual that the property belongs to.</param>
            <param name="property">The property name.</param>
            <param name="type">The type of property.</param>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.PrepareToRun(Demo3D.Experiments.Experiment)">
            <summary>
            Prepares the scene for the specified experiment.
            <list type="bullet">
            <item><description>Resets the scene to the initial state.</description></item>
            <item><description>Clears any existing results tables for the experiment.</description></item>
            <item><description>Sets visual property values to the initial experiment property values.</description></item>
            </list>
            </summary>
            <param name="exp">The experiment to set the stage for.</param>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.Run(Demo3D.Experiments.Experiment)">
            <summary>
            Sets the stage for the experiment specified by the provided index into the
            collection and starts the simulation. Queues an event to run the experiment
            at the experiment's start time.
            </summary>
            <param name="exp">Experiment to run.</param>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.StartExperimentNow">
            <summary>
            Callback function that is executed when the current experiment's start time
            is reached. Queues an event to stop the experiment after the current experiment's
            duration.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.StopExperimentNow">
            <summary>
            Callback function that is executed when the current experiment has finished;
            for example because the simulation time has reached the experiment's ending
            time.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.ManualStart(Demo3D.Experiments.Experiment)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.ManualFinish">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.RunAll">
            <summary>
            Runs all the experiments in the collection.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.RunParallel">
            <summary>
            Runs all the experiments selected in the collection in parallel. If the document contains unsaved changes the document will be automatically saved prior to running the experiments. 
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.CancelParallelRun">
            <summary>
            Cancels any parallel experiments that haven't completed running. 
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.GetResults">
            <summary>
            Collects all simulation experiment tables and the experiment definitions together into a single dataset.
            An experiment column is added as the first column of each of the tables in the data set to identify which 
            experiment that table row is from.
            </summary>
            <returns>A data set with all the tables from all the experiments that were run.</returns>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.GetQueryNode(System.String)">
            <summary>
            Generates a query to collect multiple experiments into a single table with an experiment column added.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.CreateNewAnalysisDocument">
            <summary>
            Creates a new document in the analysis window. 
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.SaveToCsv(Demo3D.Common.Serializer,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Experiments.ExperimentCollection.LoadFromCsv(Demo3D.Common.Serializer,System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.Experiments.ExperimentCollection.EvaluationContext">
            <exclude />
        </member>
        <member name="E:Demo3D.Experiments.ParallelExperimentManager.Finished">
            <exclude />
        </member>
        <member name="T:Demo3D.Experiments.Experiment">
            <summary>
            An Experiment describes one run of model, and contains the custom parameters used as input and the results collected during the run.
            </summary>
        </member>
        <member name="F:Demo3D.Experiments.Experiment.FirstExperimentVarIndex">
            <summary>
            The index of the first experiment variable column.
            </summary>
            <remarks>
            Change this when adding/removing non-experiment variable columns to/from the table.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Experiments.Experiment.PropertyValues">
            <exclude />
        </member>
        <member name="P:Demo3D.Experiments.Experiment.Run">
            <summary>
            Whether the experiment should be run when the "Run Selected" button is pressed.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.Number">
            <summary>
            The experiment number.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.FixedTime">
            <summary>
            Whether the experiment should be run for a fixed amount of time.
            If false, the experiment should continue indefinitely until manually or programatically stopped.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.StartTime">
            <summary>
            The simulation time to call OnExperimentStarted at.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.RunDuration">
            <summary>
            The simulation duration following StartTime to call OnExperimentFinished at.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.Reset">
            <summary>
            Whether document.Reset() is called at the start of the experiment or not.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.Status">
            <summary>
            The current status of the experiment run.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.UpdateIntervalPercentage">
            <summary>
            The interval at which percentage updates are reported for the experiment run.
            Represents a percentage of the total experiment duration. May be ignored in ReportPercentageProgress if deemed too long a time interval.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.TCPClient">
            <summary>
            The TCPClient used to send and receive messages when running experiments in parallel.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Experiment.ReportPercentageProgress">
            <summary>
            Reports the experiments progress as a percentage of the duration and schedules the next report to occur after a determined time interval (progressUpdateFrequency).
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Experiment.StartHeartbeat">
            <summary>
            Used when the experiment is being run as a parallel instance. Starts off a heartbeat at a frequency of 5000 ms to prevent the Client connection from timing out. 
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.Tables">
            <summary>
            The set of result tables collected for the current experiment.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.Replication">
            <summary>
            The replication number for the current instance of this experiment (starting from 1).
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.Experiment.IsRunning">
            <summary>
            Is this experiment currently running?
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Experiment.CreateTCPClient">
            <summary>
            Creates a new TcpClient and NetworkStream if client and stream are currently null. To be used when running experiments in parallel.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Experiment.UpdateTCPServer(System.String)">
            <summary>
            Sends updates to a connected TcpServer with the passed in message. Used when running experiments in parallel.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.Experiment.SendResults">
            <summary>
            Sends the experiments results to a connected TcpServer. Used when running experiments in parallel.
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.ExperimentProperty">
            <exclude />
        </member>
        <member name="T:Demo3D.Experiments.DataTableCollection">
            <summary>
            The collection of data tables that contain results during and at the end of an experiment run.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.DataTableCollection.Item(System.String)">
            <summary>
            Get an existing table or create a new one by key.
            This table will appear in the Analysis spreadsheet for charting.
            </summary>
            <param name="key">The key for the table.</param>
            <returns>A new or existing DataTable for storing experiment results.</returns>
        </member>
        <member name="M:Demo3D.Experiments.DataTableCollection.Add(System.Data.DataTable)">
            <summary>
            Add an existing data table to the collection of experiment result tables.
            The key used will be the table.TableName field.
            This table will appear in the Analysis spreadsheet for charting.
            <remarks>
            Existing tables from custom properties are most likely to be used with this method.
            </remarks>
            </summary>
            <param name="table">The existing data table to be added to the experiment data table collection.</param>
        </member>
        <member name="P:Demo3D.Experiments.DataTableCollection.All">
            <summary>
            Collection of all the tables used so far in the experiment.
            </summary>
        </member>
        <member name="P:Demo3D.Experiments.DataTableCollection.AllKeys">
            <summary>
            The keys for all the tables used so far in the experiment.
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.DataTableCollection.Clear">
            <summary>
            Clear out all tables for the current experiment.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Experiments.ExperimentTcpClient.SendTable(System.Data.DataTable)">
            <summary>
            Sends the passed in DataTable to a connected TcpServer.
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.ParallelRunSetupEditor">
            <summary>
            Interaction logic for ParallelRunSetupDialog.xaml
            </summary>
            <summary>
            ParallelRunSetupEditor
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.ParallelRunSetupEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Experiments.VisualPropertyEditor">
            <summary>
            Interaction logic for VisualPropertyEditor.xaml
            </summary>
            <summary>
            VisualPropertyEditor
            </summary>
        </member>
        <member name="M:Demo3D.Experiments.VisualPropertyEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="F:Demo3D.Core.Factory.Expression.Tokenizer.reader">
            <summary>
            The input stream.
            </summary>
        </member>
        <member name="P:Demo3D.Core.Factory.Expression.Tokenizer.Character">
            <summary>
            The current character.
            </summary>
        </member>
        <member name="P:Demo3D.Core.Factory.Expression.Tokenizer.Token">
            <summary>
            The current token.
            </summary>
        </member>
        <member name="P:Demo3D.Core.Factory.Expression.Tokenizer.Number">
            <summary>
            The numeric value.
            </summary>
        </member>
        <member name="P:Demo3D.Core.Factory.Expression.Tokenizer.Identifier">
            <summary>
            The identifier string.
            </summary>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Tokenizer.#ctor(System.IO.TextReader)">
            <summary>
            Constructor.
            </summary>
            <param name="reader">The input stream to tokenize.</param>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Tokenizer.NextCharacter">
            <summary>
            Reads the next character from the input stream and stores it as the current
            character.
            </summary>
            <remarks>
            Stores the special null character if EOF is read.
            </remarks>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Tokenizer.NextToken">
            <summary>
            Reads the next token from the input stream and stores it as the current token.
            </summary>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Parser.Parse">
            <summary>
            Parses an entire expression until EOF is reached.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Parser.ParseAddSubtract">
            <summary>
            Parses a chain of add/subtract operators.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Parser.ParseMultiplyDivide">
            <summary>
            Parses a chain of multiply/divide operators.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Parser.ParseUnary">
            <summary>
            Parses a chain of unary operators.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="M:Demo3D.Core.Factory.Expression.Parser.ParseLeaf">
            <summary>
            Parses a number, constant, parameter or function.
            </summary>
            <returns>The parsed expression.</returns>
        </member>
        <member name="T:Demo3D.Core.Factory.FactoryPlugin">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Core.NamespaceGroupDoc">
            <summary>
            The Demo3D.Core namespaces. Not intended for public use.
            </summary>
        </member>
        <member name="T:Demo3D.Core.NamespaceDoc">
            <summary>
            The Demo3D.Core namespace. Not intended for public use.
            </summary>
        </member>
        <member name="T:Demo3D.Core.DummyClass">
            <summary>
            Dummy class to make "using Demo3D.Core;" valid in user C# scripting (backward compatibility with 2017 and earlier).
            </summary>
        </member>
        <member name="P:Demo3D.Core.ProtectData.Entropy">
            <summary>
            Uses the SerialNumber of the OS as entropy.
            </summary>
        </member>
        <member name="M:Demo3D.Scripting.BuiltinFunctions.Fixed(System.Object)">
            <summary>
            A way to wrap a literal as an expression, such that Sensor.Position is considered fixed-position.
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.IK.FANUC165">
            <summary>
            Solver for a FANUC165 (6-axis "TRR:TRT") robot.
            </summary>
        </member>
        <member name="M:Demo3D.IK.FANUC165.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.IK.FANUC165.Solve(Demo3D.Visuals.ScriptingObject,Microsoft.DirectX.Matrix)">
            <summary>
            Solver for a FANUC165 (6-axis "TRR:TRT") robot.
            </summary>
            <param name="robot">The robot to solve.</param>
            <param name="target">The world transformation matrix for the target.</param>
            <returns>Array of solved joint angles (in radians).</returns>
        </member>
        <member name="T:Demo3D.IK.GenericNumeric">
            <summary>
            Solvers for generic robots.
            </summary>
        </member>
        <member name="T:Demo3D.IK.GenericNumeric.Optimization">
            <summary>
            Solvers for generic robots.
            </summary>
        </member>
        <member name="M:Demo3D.IK.GenericNumeric.Optimization.PenaltyMethod(Demo3D.Visuals.ScriptingObject,Microsoft.DirectX.Matrix)">
            <summary>
            Solves the specified robot numerically by attempting to minimize a sum-of-squares
            objective function.
            </summary>
            <remarks>
            The objective function returns a sum-of-squares of "distances". The distances are as
            follows:
            <list type="bullet">
            <item><description>The distance between the TCP and Target.</description></item>
            <item><description>The Euler angles for the rotation that aligns the axes of the TCP with the axes of the target.</description></item>
            <item><description>A penalty term for joint limit violations.</description></item>
            </list>
            
            This is an unconstrained minimization problem. We use the BFGS method with backtracking
            line search to find a local minima.
            </remarks>
            <param name="robot">The robot to solve.</param>
            <param name="targetMatrix">The world transformation matrix for the target.</param>
            <returns>Array of solved joint angles (in radians).</returns>
        </member>
        <member name="T:Demo3D.IK.Joint">
            <exclude />
        </member>
        <member name="T:Demo3D.IK.JointSet">
            <exclude />
        </member>
        <member name="T:Demo3D.IK.SerialJointSet">
            <exclude />
        </member>
        <member name="M:Demo3D.IK.SerialJointSet.SolveRotateToPoint">
            <summary>
            Single arm rotating until its tip meets a point
            </summary>
        </member>
        <member name="M:Demo3D.IK.SerialJointSet.SolveRotateToRadius">
            <summary>
            Single arm rotating until its tip meets a circle
            </summary>
        </member>
        <member name="T:Demo3D.IK.Solver">
            <exclude />
        </member>
        <member name="T:Demo3D.IK.KUKAKR40PA">
            <summary>
            Solver for a KUKA KR40 PA (5-axis) robot.
            </summary>
        </member>
        <member name="M:Demo3D.IK.KUKAKR40PA.Solve(Demo3D.Visuals.ScriptingObject,Microsoft.DirectX.Matrix)">
            <summary>
            Solver for a KUKA KR40 PA (5-axis) robot.
            </summary>
            <param name="robot">The robot to solve.</param>
            <param name="target">The world transformation matrix for the target.</param>
            <returns>Array of solved joint angles (in radians).</returns>
        </member>
        <member name="T:Demo3D.IK.KUKAKR60">
            <summary>
            Solver for a KUKA KR60 (6-axis "TRR:TRT") robot.
            </summary>
        </member>
        <member name="M:Demo3D.IK.KUKAKR60.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.IK.KUKAKR60.Solve(Demo3D.Visuals.ScriptingObject,Microsoft.DirectX.Matrix)">
            <summary>
            Solver for a KUKA KR60 (6-axis "TRR:TRT") robot.
            </summary>
            <param name="robot">The robot to solve.</param>
            <param name="target">The world transformation matrix for the target.</param>
            <returns>Array of solved joint angles (in radians).</returns>
        </member>
        <member name="T:Demo3D.IK.KUKAKR700PA">
            <summary>
            Solver for a KUKA KR700 PA (5-axis) robot.
            </summary>
        </member>
        <member name="M:Demo3D.IK.KUKAKR700PA.Solve(Demo3D.Visuals.ScriptingObject,Microsoft.DirectX.Matrix)">
            <summary>
            Solver for a KUKA KR700 PA (5-axis) robot.
            </summary>
            <param name="robot">The robot to solve.</param>
            <param name="target">The world transformation matrix for the target.</param>
            <returns>Array of solved joint angles (in radians).</returns>
        </member>
        <member name="T:Demo3D.IK.SixAxisFastSolver">
             <summary>
             Solver for 6-Axis "TRR:TRT" Robots.
             </summary>
             <remarks>
             (3)---|4|-(5)-|6|-
              |
              |
             (2)
             [1]
            
             [n] : vertical rotation axis
             (n) : perpendicular-to-page rotation axis
             |n| : horizontal rotation axis
             </remarks>
        </member>
        <member name="M:Demo3D.IK.SixAxisFastSolver.Solve(Demo3D.Visuals.ScriptingObject,Microsoft.DirectX.Matrix)">
            <summary>
            Solves the specified 6-axis "TRR:TRT" robot analytically.
            Note that the robot's inverse kinematic equation must be solvable anaylitically. This
            is not the case for all 6-axis robots.
            </summary>
            <param name="robot">The robot to solve.</param>
            <param name="targetMatrix">The world transformation matrix for the target.</param>
            <returns>Array of solved joint angles.</returns>
        </member>
        <member name="M:Demo3D.IK.SixAxisFastSolver.WristTarget(Microsoft.DirectX.Matrix,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Solves the position of the wrist joint, J5.
            </summary>
            <remarks>
            Knowing the location of the wrist at the target allows us to solve J1, J2 and J3.
            </remarks>
            <param name="targetMatrix">The world transformation matrix for the target.</param>
            <param name="wristJoint">The wrist joint visual, J5.</param>
            <param name="tcp">The robot's TCP visual.</param>
            <returns>The desired worrld position for the wrist joint, J5.</returns>
        </member>
        <member name="M:Demo3D.IK.SixAxisFastSolver.SolveJ1(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Rotates J1 so that the current wrist location is aligned with the desired wrist location
            in the y-axis plane. Returns the angle of rotation about the y-axis required to achieve
            this.
            </summary>
            <param name="joint">The joint, J1</param>
            <param name="desiredWristWorldPosition">The desired wrist position in world space.</param>
            <param name="currentWristWorldPosition">The current wrist position in world space.</param>
            <returns>The angle of rotation.</returns>
        </member>
        <member name="M:Demo3D.IK.SixAxisFastSolver.SolveJ2J3(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Demo3D.Visuals.Visual[],System.Double[])">
             <summary>
             Rotates J2 and J3 so that J3 is aligned with the desired wrist location in the joint's
             y-axis plane.
             </summary>
             <remarks>
             (2) Joint 2
             (3) Joint 3
             (E) End effector
            
                   (3)
                  / C \
                 a     b
                /       \
               /B       A\
             (2)----c----(E)
             </remarks>
             <param name="desiredWristWorldPosition">The desired wrist location.</param>
             <param name="wristOffset">The initial position (before solving J3) of J5 in J3's local space..</param>
             <param name="joints">The array of joint visuals.</param>
             <param name="solution">The joint angle solution array.</param>
        </member>
        <member name="M:Demo3D.IK.SixAxisFastSolver.SolveJ4(Demo3D.Visuals.Visual[],Microsoft.DirectX.Matrix)">
            <summary>
            Rotates J4 so that it is aligned with the target in the joint's y-axis plane.
            </summary>
            <param name="joints">The array of joint visuals.</param>
            <param name="targetMatrix">The world transformation matrix for the target.</param>
            <returns>The angle of rotation.</returns>
        </member>
        <member name="M:Demo3D.IK.SixAxisFastSolver.SolveJ5(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix)">
            <summary>
            Rotates J5 so that J6 is aligned with the target in the joint's y-axis plane.
            </summary>
            <param name="j5">The wrist joint, J5.</param>
            <param name="j6">The joint, J6.</param>
            <param name="targetMatrix">The world transformation matrix for the target.</param>
            <returns>The angle of rotation.</returns>
        </member>
        <member name="M:Demo3D.IK.SixAxisFastSolver.SolveJ6(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix,Demo3D.Visuals.Visual)">
            <summary>
            Rotates J6 so that the TCP's x-axis is aligned with the target's x-axis in the joint's
            y-axis plane.
            </summary>
            <param name="joint">The joint, J6.</param>
            <param name="targetMatrix">The world transformation matrix for the target.</param>
            <param name="tcp">The TCP visual.</param>
            <returns>The angle of rotation.</returns>
        </member>
        <member name="T:Demo3D.IK.TwoAxisFastSolver">
            <summary>
            Solver for 2-Axis "?" Robots.
            Used by 5 and 6 axis solvers and people ik solvers.
            </summary>
        </member>
        <member name="T:Demo3D.IK.NamespaceDoc">
            <summary>
            The Demo3D Inverse Kinematics namespace.
            <para>
            This is primarily for "solving" robot joint configurations.
            </para>
            </summary>
        </member>
        <member name="T:Demo3D.IK.Utilities">
            <summary>
            Utility methods for solving robots.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IK.Utilities.RotateJointToTarget(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Find and apply matrix that rotates currentVec to targetVec. These
            should be vectors in the Y-axis plane. Return solution angle.
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.TransformFromWorldToPlane(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <summary>
            Transform world into sender's local coord frame and project into Y-axis plane.
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.TransformFromWorldToPlane(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Transform world into sender's local coord frame and project into specified plane.
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.GetAngleForMatrix(Demo3D.Visuals.Visual,Microsoft.DirectX.Matrix)">
            <summary>
            Find current angle in degrees of rotation in Y-axis against inital position
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.GetAngles(Demo3D.Visuals.Visual[])">
            <summary>
             Return current angle of all joints
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.GetMatrices(Demo3D.Visuals.Visual[])">
            <summary>
             Return current matrix of all joints
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.GetInitialMatrices(Demo3D.Visuals.Visual[])">
            <summary>
             Return initial matrix of all joints
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.SetMatrices(Demo3D.Visuals.Visual[],Microsoft.DirectX.Matrix[])">
            <summary>
            Set matrix for all joints
            </summary>
        </member>
        <member name="M:Demo3D.IK.Utilities.NormalizeZeroTwoPi(System.Double)">
            <summary>
            Normalizes the provided angle to the range [0, 2*PI].
            </summary>
            <param name="angle">The angle to normalize.</param>
            <returns>The normalized angle.</returns>
        </member>
        <member name="M:Demo3D.IK.Utilities.NormalizePlusMinusPi(System.Double)">
            <summary>
            Normalizes the provided angle to the range [-PI, PI].
            </summary>
            <param name="angle">The angle to normalize.</param>
            <returns>The normalized angle.</returns>
        </member>
        <member name="M:Demo3D.IK.Utilities.ShortestAngleBetweenAngles(System.Double,System.Double)">
            <summary>
            Returns the smallest angle in radians between two angles.
            </summary>
            <param name="a">The first angle (in radians).</param>
            <param name="b">The second angle (in radians).</param>
            <returns>The smallest angle between the two angles (in radians).</returns>
        </member>
        <member name="M:Demo3D.IK.Utilities.SignedAngleBetweenAngles(System.Double,System.Double)">
            <summary>
            Returns the signed shortest angle in radians between the two angles.
            </summary>
            <param name="from">The angle from which to measure (in radians).</param>
            <param name="to">The angle to measure to (in radians).</param>
            <returns>The signed shortest angle (in radians).</returns>
        </member>
        <member name="M:Demo3D.IK.Utilities.AnticlockwiseAngleBetweenAngles(System.Double,System.Double)">
            <summary>
            Returns the anticlockwise angle between the two angles.
            </summary>
            <remarks>
            The angle returned will be in the range [0, 2*PI].
            </remarks>
            <param name="from">The angle from which to measure (in radians).</param>
            <param name="to">The angle to measure to (in radians).</param>
            <returns>The anticlockwise angle (in radians).</returns>
        </member>
        <member name="M:Demo3D.IK.Utilities.LimitViolation(System.Double,System.Double,System.Double)">
            <summary>
            Returns the angle by which the specified <paramref name="angle" /> violates the two limit
            angles.
            </summary>
            <remarks>
            The angle to the closest limit is returned. A negative value implies that the limits are
            satisfied.
            </remarks>
            <param name="lower">The lower limit angle (in radians).</param>
            <param name="upper">The upper limit angle (in radians).</param>
            <param name="angle">The angle to check (in radians).</param>
            <returns>The violation of the limit.</returns>
        </member>
        <member name="M:Demo3D.VisualScripting.ActionControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.ActionControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.VisualScripting.BlocksImporter">
            <summary>
            Class to convert a textual version of QuickLogic (Blocks) into 
            in VisualScriptItems.
            </summary>
        </member>
        <member name="F:Demo3D.VisualScripting.CatalogControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.CatalogControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.VisualScripting.CatalogControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Demo3D.VisualScripting.CatalogLayoutManager.searchScores">
            <summary>
            Holds search scores for each item in each category.
            These scores are used to determine the display order for bothe categories and the items
            in those categories.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.CatalogLayoutManager.UpdateSearchVisibility(Demo3D.VisualScripting.DrawingPanel)">
            <summary>
            Updates the visibility of each item and category according to the search scores.
            </summary>
            <param name="panel">The category panel.</param>
        </member>
        <member name="F:Demo3D.VisualScripting.CategoryPanel.SearchThreshold">
            <summary>
            A serarch parameter used to determine whether a match is good and whether or not to
            display an item. Must be in the interval [0, 1].
            </summary>
            <remarks>
            0 =&gt; Require a perfect match
            1 =&gt; Match anything
            </remarks>
        </member>
        <member name="F:Demo3D.VisualScripting.CategoryPanel.searchScores">
            <summary>
            Holds search scores for each item in each category.
            These scores are used to determine the display order for bothe categories and the items
            in those categories.
            </summary>
        </member>
        <member name="P:Demo3D.VisualScripting.CategoryPanel.HasSearchScores">
            <summary>
            Whether search scores have been generated for the current search text.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.CategoryPanel.UpdateSearchScores">
            <summary>
            Recomputes the search scores for the current search text.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.CategoryPanel.CategoryScore(Demo3D.VisualScripting.IDrawable)">
            <summary>
            Returns the search score for the specified category.
            </summary>
            <param name="category">The category.</param>
            <returns>The search score for the specified category.</returns>
        </member>
        <member name="M:Demo3D.VisualScripting.CategoryPanel.ItemScore(Demo3D.VisualScripting.IDrawable,Demo3D.VisualScripting.IDrawable)">
            <summary>
            Returns the search score for the specified item.
            </summary>
            <param name="category">The category to which the item belongs.</param>
            <param name="item">The item.</param>
            <returns>The search score for the specified item.</returns>
        </member>
        <member name="F:Demo3D.VisualScripting.CategoryPanel.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.CategoryPanel.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.VisualScripting.CategoryPanel.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.DrawableBase.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.DrawableBase.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.EditableValue.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.EditableValue.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.VisualScripting.EditableValue.ValueType">
            <summary>
            The required type of this editable value; the type of the parameter that it edits
            </summary>
        </member>
        <member name="P:Demo3D.VisualScripting.EditableValue.ValueTypeResolved">
            <summary>
            The value type of the control that has been snapped into this edit value, or the ValueType
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.EventControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.EventControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.FunctionControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.FunctionControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.FunctionParameterControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.Glyph.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.Glyph.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.Link.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.VisualScripting.LinkableScriptItemControl">
            <summary>
            Base class for any control that maintains a list of StatementControl.
            For example: StatementControl, ProcedureControl, EventControl, ActionSequence
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.LinkableScriptItemControl.CanConnect(Demo3D.VisualScripting.Link,Demo3D.VisualScripting.ILinkable)">
            <summary>
            Can "to" be connected into our Body or Next link
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.LinkableScriptItemControl.CanConnectFrom(Demo3D.VisualScripting.Link,Demo3D.VisualScripting.ILinkable)">
            <summary>
            Can we be connected into a Body or Next link?
            </summary>
            <param name="link"></param>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="P:Demo3D.VisualScripting.MethodControl.HasResult">
            <summary>
            This method either returns Result(T) or is passed Result(T)
            </summary>
        </member>
        <member name="P:Demo3D.VisualScripting.MethodControl.ResultType">
            <summary>
            Returns actual type returned or used as return value (eg, int, Result(int), etc)
            </summary>
        </member>
        <member name="P:Demo3D.VisualScripting.MethodControl.IsYieldReturn">
            <summary>
            This method will block
            Not satisfactory, since this may actually be an iterator. Ideally this method should have the
            [YieldReturn] attribute
            </summary>
        </member>
        <member name="P:Demo3D.VisualScripting.MethodControl.IsNotifyCompletion">
            <summary>
            This method's return value is a blocking object, such as Result(T)
            </summary>
        </member>
        <member name="P:Demo3D.VisualScripting.MethodControl.ValueType">
            <summary>
            User's view of the value of this expression. If method returns Result(string) then ValueType is string.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.MethodControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.MethodControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.RegionStatement.ItemDefiningVar(System.String)">
            <summary>
            Find the <see cref="T:Demo3D.VisualScripting.ScriptItemControl" /> definition of the variable within this <see cref="T:Demo3D.VisualScripting.RegionStatement" />.
            <param name="varName">Variable to find.</param>
            <returns><see cref="T:Demo3D.VisualScripting.ScriptItemControl" /> representing the variable, or null.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.ProcedureControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.ProcedureControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.ProcedureCallControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.ProcedureCallControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.VisualScripting.ScriptItemControl">
            <summary>
            Base class for anything that the user drags into a QuickLogic script. 
            Will always contain one or more header items (for labels and editable values)
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.ScriptItemControl.GetTargetTypeFor(Demo3D.VisualScripting.EditableValue)">
            <summary>
            Respond to requests about this parameter's type. For RHS values this will be parameter's ValueType,
            but if this paramEv is an LHS, then the control may want to supply "object" or even the type of the RHS (if it's been set)
            </summary>
            <param name="paramEv"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.VisualScripting.ScriptItemControl.DefinesVar(System.String)">
            <summary>
            Looks for header items (ie, values passed as arguments , like a method call) that could define 'id'
            <para>
            NOTE: This uses <see cref="M:Demo3D.VisualScripting.ScriptItemControl.ItemDefiningVar(System.String)" />, meaning we will return true if we ask a <see cref="T:Demo3D.VisualScripting.RegionStatement" /> whether it defines
            a variable.
            </para>
            </summary>
            <param name="varName">Variable to find.</param>
            <returns>true if found, false otherwise.</returns>
            <remarks>
            Not currently used within Demo3D core code, so this might not be useful any more.
            </remarks>
        </member>
        <member name="M:Demo3D.VisualScripting.ScriptItemControl.ItemDefiningVar(System.String)">
            <summary>
            Find the <see cref="T:Demo3D.VisualScripting.ScriptItemControl" /> definition of the variable from the current <see cref="T:Demo3D.VisualScripting.ScriptItemControl" />.
            <para>
            This is usually the same item that you are calling from (or null), but is overridden in <see cref="M:Demo3D.VisualScripting.RegionStatement.ItemDefiningVar(System.String)" /> to
            ignore the artifical scope (in terms of the structure of the QLP data structure) that the region container inserts, and returns the actual
            <see cref="T:Demo3D.VisualScripting.ScriptItemControl" /> definition contained within the region.
            </para>
            <param name="varName">Variable to find.</param>
            <returns><see cref="T:Demo3D.VisualScripting.ScriptItemControl" /> representing the variable definition, or null.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.ScriptItemControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.ScriptItemControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.CommentBalloon.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.StatementContainerControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.StatementContainerControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="F:Demo3D.VisualScripting.DrawingPanel.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.DrawingPanel.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.VisualScripting.DrawingPanel.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.TextBox.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.TextBox.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.VisualScripting.Appearance.NamespaceDoc">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:Demo3D.VisualScripting.Appearance.DefaultableBoolean">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.VisualScripting.Appearance.FontData">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.VisualScripting.Appearance.PropFlags">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.VisualScripting.Appearance.GradientStyle">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.VisualScripting.ValueControl.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.ValueControl.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.VarFactory.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.VarFactory.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.VisualScriptDocument.UserProceduresFromScript(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Items from either my script or scripts that I reference, directly or indirectly
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.VisualScriptDocument.SetNameAndCompile(System.String,Demo3D.Visuals.IBuilder,System.Boolean)">
            <summary>
            Since the <see cref="P:Demo3D.VisualScripting.VisualScriptDocument.Name" /> setter above also compiles the script, add helper used from
            <see cref="M:Demo3D.QuickLogic.Procedure.Compile" /> to avoid calling Compile twice. This is
            significant because we have more context from the Compile call site than in the Name setter.
            </summary>
            <param name="value">New script name.</param>
            <param name="app">Application interface.</param>
            <param name="containsExecutableCode">Is there anything to compile in this script (currently this just avoids calling ResolveSymbols)?</param>
        </member>
        <member name="M:Demo3D.VisualScripting.VisualScriptDocument.ResolveSymbols(Demo3D.VisualScripting.ScriptItemControl,System.Collections.Generic.Dictionary{System.String,Demo3D.VisualScripting.ScriptItemControl})">
            <summary>
            Make sure the correct variables and methods are referenced in a block
            of code that may have been pasted from a different context.
            </summary>
            <param name="item">ScriptItemControl.</param>
            <param name="allowedSymbols">AllowedSymbols.</param>
        </member>
        <member name="F:Demo3D.VisualScripting.VisualScriptDocument.SharedGuid">
            <summary>
            All Visual Script Documents use this Guid so the native code can be shared.
            </summary>
        </member>
        <member name="F:Demo3D.VisualScripting.VisualScriptingControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.VisualScriptingControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.VisualScripting.VisualScriptingControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.ChannelMethods.CreatePriorityChannel(Demo3D.Visuals.Visual,System.Int32)">
            <summary>
            Used in the WebStore Training 
            "How to implement a Priority Channel"
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.VisualScripting.ChannelMethodUtilities.ToVisual(System.Object)">
            <summary>
            Tries to obtain a <see cref="T:Demo3D.Visuals.Visual" /> from <paramref name="obj" />.
            Returns null if unsuccessful.
            </summary>
        </member>
        <member name="P:Demo3D.VisualScripting.TableMethods.CellControl.QuickScriptUpgradeHeader">
            <summary>
            The header to use when updating this control to QuickScript.
            </summary>
        </member>
        <member name="M:Demo3D.VisualScripting.VisualMethods.SetColor(Demo3D.Visuals.MeshObject,System.Drawing.Color)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.VisualScripting.VisualMethods.FadeToColor(Demo3D.Visuals.MeshObject,System.Drawing.Color,System.Double)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.KeyFrame.KeyFrameEventControlPoint.MeshMaterials">
            <exclude /> 
        </member>
        <member name="P:Demo3D.KeyFrame.KeyFrameEvent.ResultingLocation">
            <summary>
            The location once this event has completed
            </summary>
        </member>
        <member name="P:Demo3D.KeyFrame.KeyFrameEvent.ResultingRotation">
            <summary>
            The rotation once this event has completed
            </summary>
        </member>
        <member name="P:Demo3D.KeyFrame.KeyFrameEvent.LocationDelta">
            <summary>
            How much this event will move
            </summary>
        </member>
        <member name="P:Demo3D.KeyFrame.KeyFrameEvent.RotationDelta">
            <summary>
            How much this event will rotate
            </summary>
        </member>
        <member name="F:Demo3D.KeyFrame.KeyFrameSequencePropsWindow.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.KeyFrame.KeyFrameSequencePropsWindow.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.KeyFrame.KeyFrameSequencePropsWindow.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.BuilderServices.RegistryEntry.Dispose">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.TagConfiguration">
            <summary>
            A class for storing tag server specific configuration.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.ExportBindableItem">
            <summary>
            Class for encapsulating information passed to OnExportBindableItem visual event.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.DataRow">
            <summary>
            The DataRow containing the export information for this BindableItem.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.BindableItem">
            <summary>
            The BindableItem being exported.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.Binding">
            <summary>
            The Binding being exported.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.DataSet">
            <summary>
            The DataSet containing the export data for this BindableItem.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.DataTable">
            <summary>
            The DataTable containing the export information for this BindableItem.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.ServerItem">
            <summary>
            The ServerItem being exported.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.ServerItemName">
            <summary>
            The name of the ServerItem being exported.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ExportBindableItem.ItemId">
            <summary>
            The ServerItem ItemId (database key).
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.Binding">
            <summary>
            A binding between a tag server ServerItem and a set of model BindableItems (eg custom properties).
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Binding.ServerItem">
            <summary>
            A binding is always bound to a single ServerItem.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Binding.Expression">
            <summary>
            The expression that represents this binding.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Binding.ForcedValue">
            <summary>
            Force the value of the binding.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Binding.Forced">
            <summary>
            Has the value of the binding been forced.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Binding.Enabled">
            <summary>
            Binding enabled/disabled by the user.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Binding.Active">
            <summary>
            Active flag for this binding.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Binding.AccessRights">
            <summary>
            Access rights for this binding.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Binding.Dispose">
            <exclude />
        </member>
        <member name="E:Demo3D.TagServer.Binding.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Binding.PropertiesChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Binding.ToString">
            <summary>
            Returns a string that represents the current binding.
            </summary>
            <returns>A string that represents the current binding.</returns>
        </member>
        <member name="T:Demo3D.TagServer.NullExpression">
            <summary>
            The null expression does nothing.  Used when an expression couldn't be parsed by TagExpression.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.UnboundItem">
            <summary>
            Unbound API
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.UnboundItem.#ctor(Demo3D.Visuals.BindableItem,Demo3D.TagServer.ServerItemName)">
            <summary>
            Constructs a new UnboundItem.
            </summary>
            <param name="bindableItem">The bindable item that's not bound.</param>
            <param name="serverItemName">The default server item name to bind to.</param>
        </member>
        <member name="M:Demo3D.TagServer.UnboundItem.Export(System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Export binding interface to export file.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.Connections">
            <summary>
            Central point gathering together all server and bindings used by a document.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Connections.Servers">
            <summary>
            List of servers attached to this document.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Connections.NumServers">
            <summary>
            Return the number of registered servers.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Connections.ConnectedServers">
            <summary>
            List of connected servers.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Connections.Connected">
            <summary>
            True if any server is connected.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.RegisterServer(Demo3D.TagServer.IServer)">
            <summary>
            Register a server.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindServer(System.String)">
            <summary>
            Find a server by name and return it.
            </summary>
            <param name="serverName">The server name to find.</param>
            <returns>The server if found, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.ConnectAll">
            <summary>
            Connect to all loaded servers.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.DisconnectAll">
            <summary>
            Disconnect all loaded servers.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.Connections.ServerEventHandler">
            <summary>
            Delegate to handle server events.
            </summary>
            <param name="connections">The connections class raising the event.</param>
            <param name="server">The server raising the event.</param>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnServerAdded">
            <summary>
            Raised when a server is added.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnServerRemoved">
            <summary>
            Raised when a server is removed.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnServerConnected">
            <summary>
            Raised when a server is connected.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnServerDisconnected">
            <summary>
            Raised when a server is disconnected.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.Connections.ConnectEventHandler">
            <summary>
            A delegate to handle connections events.
            </summary>
            <param name="connections"></param>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnConnected">
            <summary>
            Raised when the first server is connected.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnDisconnected">
            <summary>
            Raised when the last server is diconnected.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.AddServer(Demo3D.TagServer.IServer)">
            <summary>
            Add a server to the list of servers to connect to if it hasn't already been added.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.GetServer(System.String,System.Object)">
            <summary>
            Just load the server without registering with Connections.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.AddServer(System.String,System.Object)">
            <summary>
            Add a server to the list of servers to connect to.
            </summary>
            <param name="serverName">The name of the server.</param>
            <param name="configuration">The server configuration.</param>
            <returns>The server that was added.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.UnbindServer(Demo3D.TagServer.IServer,System.Boolean,Demo3D.TagServer.Connections.UpdateType)">
            <summary>
            Remove all bindings for a server.
            </summary>
            <param name="server">The server to unbind.</param>
            <param name="unloadEmptyServerItem">Unload the server item if it's auto-generated and doesn't have an address/path set.</param>
            <param name="updateBindableItem">Disable the bindable item in the component.</param>
        </member>
        <member name="M:Demo3D.TagServer.Connections.UnbindDroppedItems(Demo3D.TagServer.IServer)">
            <summary>
            Unbind all bindings for a server where the bound serverItem is no longer a member of the server.
            Do this after re-importing tag definitions to unbind any serverItems that have been dropped.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.RemoveServer(Demo3D.TagServer.IServer)">
            <summary>
            Remove a server from the list of servers.
            </summary>
            <param name="server">The server to remove.</param>
            <returns>True if the server was removed.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.RemoveAllServers">
            <summary>
            Document being disposed.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.GetCSharpEnvironment(Demo3D.TagServer.IServer,System.Boolean)">
            <summary>
            Find/Get the execution environment associated with a server..
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.GetJScriptEnvironment(Demo3D.TagServer.IServer,System.Boolean)">
            <summary>
            Find/Get the execution environment associated with a server..
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.EditBegunAsync">
            <summary>
            Raised on the first call to BeginEdit.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.EditEndedAsync">
            <summary>
            Raised on the last call to EndEdit.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Connections.Bindings">
            <summary>
            List of all bindings.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Connections.BindableItems">
            <summary>
            List of all bindable items (some aren't bound, but are part of an expression).
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Connections.BoundBindableItems">
            <summary>
            List of all bound bindable items.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.IsBound(Demo3D.TagServer.ServerItem)">
            <summary>
            Returns true if the server item is bound.
            </summary>
            <param name="serverItem">The server item to test.</param>
            <returns>True if the specified server item is bound.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.IsBound(Demo3D.Visuals.BindableItem)">
            <summary>
            Returns true if the bindable item is bound.
            </summary>
            <param name="bindableItem">The bindable item to test.</param>
            <returns>True if the specified bindable item is bound.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.IsBoundBinding(Demo3D.Visuals.BindableItem)">
            <summary>
            Returns true if the bindable item is bound and on the RHS of the expression.
            </summary>
            <param name="bindableItem">The bindable item to test.</param>
            <returns>True if the bindable item is bound and on the RHS of the expression.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindAllBindings(Demo3D.TagServer.ServerItem)">
            <summary>
            Return all bindings for a ServerItem.
            </summary>
            <param name="serverItem">The server item to search.</param>
            <returns>A list of bindings to the specified server item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindAllBindings(Demo3D.Visuals.BindableItem)">
            <summary>
            Return all bindings for a BindableItem.
            For expressions, for example, return bindable items on the left and the right hand side of the expression.
            </summary>
            <param name="bindableItem">The bindable item to search for.</param>
            <returns>The bindings for the specified bindable item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindAllBindings(Demo3D.TagServer.IServer)">
            <summary>
            Return all bindings for a BindableItem.
            For expressions, for example, return bindable items on the left and the right hand side of the expression.
            </summary>
            <param name="server">The server to search for.</param>
            <returns>The bindings for the specified server.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindBoundBindings(Demo3D.Visuals.BindableItem)">
            <summary>
            Not all BindableItems need to be bound.  Some are just used in calculations.
            A bound item is one that's on the RHS of an IModelToServerBinding expression,
                return visual.property;
            or a that's on the LHS of an IServerToModelBinding expression.
                visual.property = value;
            </summary>
            <param name="bindableItem">The bindable item to search for.</param>
            <returns>The bindings for the specified bindable item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindAllBindings(Demo3D.Visuals.BindableItem,Demo3D.TagServer.ServerItem)">
            <summary>
            Return all bindings for a BindableItem bound to ServerItem.
            For expressions, for example, return bindable items on the left and the right hand side of the expression.
            </summary>
            <param name="bindableItem">The bindable item to search for.</param>
            <param name="serverItem">The server item to search for.</param>
            <returns>The list of bindings between the specified bindable item and server item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindAllBindings(System.String,Demo3D.TagServer.ServerItem)">
            <summary>
            Return all bindings between an expression and a serverItem.  Expression must match exactly.
            </summary>
            <param name="expression">The expression to search for.</param>
            <param name="serverItem">The server item to search for.</param>
            <returns>A list of bindings between the specified expression and server item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindAllBindings(Demo3D.TagServer.Expression)">
            <summary>
            Return all bindings for a given expression.
            </summary>
            <param name="expression">The expression to search for.</param>
            <returns>A list of bindings for the specified expression.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.ServerItem_SetUpdatesFromServer(Demo3D.TagServer.SetValuesFromServer)">
            <summary>
            A transaction (list of updates) from the tag server to be applied to the model.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.BeginBatchFromModel">
            <summary>
            Start a transaction of updates from the model to the server.
            Dispose to commit the transaction, sending updates from the model to the server.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Refresh(Demo3D.TagServer.IServer)">
            <summary>
            Sync all the values and update any bound properties.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.UpdateBindableItemIOControl(Demo3D.TagServer.ServerItem)">
            <summary>
            Called in response to ServerItem.IOControl changed.
            Find all the bindableItems that are bound to the ServerItem, and then reverse lookup all the
            serverItems bound to the bindableItem.  If any require PreserveAllUpdates or WriteThrough,
            then we need to set them on the bindableItem too.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.UpdateServerItemProperties(Demo3D.TagServer.ServerItem,Demo3D.TagServer.Binding)">
            <summary>
            Handle request to change the active and access requirements for this serverItem to that required by any remaining bindings.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.UpdateBindingActive(Demo3D.TagServer.Binding)">
            <summary>
            Handle request to set Binding active.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.SetBindingAccess(Demo3D.TagServer.Binding,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Handle request to set binding access.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.ServerItem_PropertiesChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Responds to a server item property change.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.LoadServerItem(Demo3D.TagServer.ServerItemName,Demo3D.TagServer.IServer)">
            <summary>
            Load / get ServerItem from server by name.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.Connections.BindEventHandler">
            <summary>
            A delegate to handle binding events.
            </summary>
            <param name="connections">The connections class raising the event.</param>
            <param name="binding">The binding raising the event.</param>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnBind">
            <summary>
            Raised when a new binding is created.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnUnbind">
            <summary>
            Raised when a binding is removed.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.Connections.OnBindingChanged">
            <summary>
            Raised when a binding changes.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.NotifyOnBindingChanged(Demo3D.TagServer.Binding)">
            <summary>
            Notify that a binding has changed.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.AddBinding(Demo3D.TagServer.Binding)">
            <summary>
            Add a binding to the bindings list.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.RemoveBinding(Demo3D.TagServer.Binding,Demo3D.TagServer.Connections.UpdateType)">
            <summary>
            Remove a binding from the bindings list.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.ClearAllBindings">
            <summary>
            Clear the bindings list.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.TagServer.ServerItem,Demo3D.TagServer.Expression,Demo3D.PLC.Comms.AccessRights,System.Boolean)">
            <summary>
            Add and register new binding.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindVisualPropertyBinding(Demo3D.Visuals.BindableItem,Demo3D.TagServer.ServerItem)">
            <summary>
            Find any simple visual property binding for this bindableItem / serverItem pair.
            Does not return any other kind of bindings that may exist between bindableItem and serverItem.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.BindableItem,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights,System.Boolean)">
            <summary>
            Create a simple visual property binding between a visual property (BindableItem) and a tag server ServerItem.
            If 'serverItem' is null, remove all bindings that refer to this 'bindableItem'.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.BindableItem,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Create a simple visual property binding between a visual property (BindableItem) and a tag server ServerItem.
            If 'serverItem' is null, remove all bindings that refer to this 'bindableItem'.
            </summary>
            <param name="bindableItem">The bindable item to bind.</param>
            <param name="serverItem">The server item to bind.</param>
            <param name="accessRights">The access rights for this binding.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.BindableItem,Demo3D.TagServer.ServerItem)">
            <summary>
            Create a simple visual property binding between a visual property (BindableItem) and a tag server ServerItem.
            If 'serverItem' is null, remove all bindings that refer to this 'bindableItem'.
            </summary>
            <param name="bindableItem">The bindable item to bind.</param>
            <param name="serverItem">The server item to bind.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.Visual,System.String,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Create a binding between a visual property and a ServerItem.
            </summary>
            <param name="visual">The visual to bind.</param>
            <param name="propertyName">The property on the visual to bind.</param>
            <param name="serverItem">The server item to bind.</param>
            <param name="accessRights">The access rights for this binding.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.Visual,System.String,Demo3D.TagServer.ServerItem)">
            <summary>
            Create a binding between a visual property and a ServerItem.
            </summary>
            <param name="visual">The visual to bind.</param>
            <param name="propertyName">The property on the visual to bind.</param>
            <param name="serverItem">The server item to bind.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.TagServer.TagExpression,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights,System.Boolean)">
            <summary>
            Create a binding between an expression and a tag server ServerItem.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.TagServer.TagExpression,Demo3D.TagServer.ServerItemName,System.Boolean)">
            <summary>
            Create a simple visual property binding between a tag expression and a tag server ServerItem (by serialised name).
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.FindExpressionBinding(Demo3D.Visuals.BindableItem,System.String,Demo3D.TagServer.TagExpressionType,Demo3D.TagServer.ServerItem)">
            <summary>
            Find any binding for this expression / serverItem pair.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.BindableItem,System.String,Demo3D.TagServer.TagExpressionType,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights,System.Boolean)">
            <summary>
            Create a binding between an expression and a tag server ServerItem.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.BindableItem,System.String,Demo3D.TagServer.TagExpressionType,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Create a binding between an expression and a tag server ServerItem.
            </summary>
            <param name="bindableItem">The bindable item.</param>
            <param name="expression">The expression to bind.</param>
            <param name="expressionType">The type of the expression being bound.</param>
            <param name="serverItem">The server item to bind.</param>
            <param name="accessRights">The access rights for this binding.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(System.String,Demo3D.TagServer.TagExpressionType,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Create a binding between an expression and a tag server ServerItem.
            </summary>
            <param name="expression">The expression to bind.</param>
            <param name="expressionType">The type of the expression being bound.</param>
            <param name="serverItem">The server item to bind.</param>
            <param name="accessRights">The access rights for this binding.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(System.String,Demo3D.TagServer.TagExpressionType,Demo3D.TagServer.ServerItem)">
            <summary>
            Create a binding between an expression and a tag server ServerItem.
            </summary>
            <param name="expression">The expression to bind.</param>
            <param name="expressionType">The type of the expression being bound.</param>
            <param name="serverItem">The server item to bind.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(System.String,Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Create a binding between an expression and a tag server ServerItem.
            </summary>
            <param name="expression">The expression to bind.</param>
            <param name="serverItem">The server item to bind.</param>
            <param name="accessRights">The access rights for this binding.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(System.String,Demo3D.TagServer.ServerItem)">
            <summary>
            Create a binding between an expression and a tag server ServerItem.
            </summary>
            <param name="expression">The expression to bind.</param>
            <param name="serverItem">The server item to bind.</param>
            <returns>An object representing the new binding.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.Visuals.BindableItem,Demo3D.TagServer.ServerItemName,Demo3D.TagServer.IServer,System.Boolean)">
            <summary>
            Create a visual property binding between a visual property and a tag server ServerItem (by serialised name).
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Bind(Demo3D.TagServer.UnboundItem,Demo3D.TagServer.IServer)">
            <summary>
            Bind an unbound item to a server, creating the server if it doesn't yet exist.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.DisposeBinding(Demo3D.TagServer.Binding,System.Boolean)">
            <summary>
            Responds to a binding being removed.
            Binding must already have been removed from bindings list.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Unbind(Demo3D.TagServer.Binding,System.Boolean,Demo3D.TagServer.Connections.UpdateType)">
            <summary>
            Remove specific binding.
            </summary>
            <param name="binding">The binding to unbind.</param>
            <param name="unloadEmptyServerItem">Unload the server item if it's auto-generated and doesn't have an address/path set.</param>
            <param name="updateBindableItem">Update the bindable item in the component.</param>
            <returns>True if the binding was unbound.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Unbind(Demo3D.Visuals.BindableItem,System.Boolean,Demo3D.TagServer.Connections.UpdateType)">
            <summary>
            Remove all bindings for a BindableItem.
            </summary>
            <param name="bindableItem">The bindable item to unbind.</param>
            <param name="unloadEmptyServerItem">Unload the server item if it's auto-generated and doesn't have an address/path set.</param>
            <param name="updateBindableItem">Update the bindable item in the component.</param>
            <returns>True if the bindable item was unbound.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Connections.Dispose">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.Connections.ForceServerItemValue(Demo3D.TagServer.ServerItem,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.Connections.ReadForcedServerItemValue(Demo3D.TagServer.ServerItem)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.Connections.UnforceServerItemValue(Demo3D.TagServer.ServerItem)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.Connections.UnforceAllServerItems(Demo3D.TagServer.IServer)">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.TagServerSerializer">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.TagBindingSerializer">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.ConstantExpression">
            <summary>
            Represents a constant tag expression.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ConstantExpression.Read(Demo3D.TagServer.ServerItem)">
            <summary>
            Re-evaluate expression and return result.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.CSharpEnvironment">
            <summary>
            Manages all the CSharp for one IServer.  All the CSharp expression tag expressions end up being compiled and executed here.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.CSharpEnvironment.AppendName(System.Text.StringBuilder,System.String)">
            <summary>
            Return a CSharp parseable name.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.CSharpEnvironment.CompileFunctions">
            <summary>
            Regenerate the source code, compile and link up function delegates.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.CSharpEnvironment.AddFunction(System.String,System.String)">
            <summary>
            Introduce a new server item / tag expression function.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.CSharpEnvironment.RemoveFunction(Demo3D.TagServer.CSharpEnvironment.ExpressionFunction)">
            <summary>
            Remove a function.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.CSharpEnvironment.ClearFunctions">
            <summary>
            Clear functions ready for reloading the expressions.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.EmulationHardware.EmulationHardwareEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.EmulationHardware.EmulationHardwareEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.TagServer.EmulationHardware.EmulationHardwareEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.EmulationHardware.EmulationHardwareWizard.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.EmulationHardware.EmulationHardwareWizard.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.TagServer.EmulationHardware.EmulationHardwareWizard.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.EmulationHardware.LogBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.EmulationHardware.LogBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.TagServer.EmulationHardware.LogBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.ExecutionEnvironmentProperties">
            <summary>
            Execution environment properties (basically which script in the script library we're using) for an IServer.
            This class is serialised out with the IServer by the TagServerSerializer.
            It's also exposed in the tag browser property grid.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.Exporter.ExportedTable">
            <summary>
            A table that we're exporting and a list of columns that we think might be optional.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.ExportServer(Demo3D.TagServer.IServer)">
            <summary>
            Ask each server to add any additional tables (eg Station for PBMS).
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.ExportUnbound(System.Data.DataRow,Demo3D.TagServer.UnboundItem)">
            <summary>
            Export an unbound API item.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.ExportConnections">
            <summary>
            Export bindings and the unbound api from Connections.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.DropCommentColumn(System.Data.DataTable)">
            <summary>
            Possibly drop the comment column.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.DropExpressionColumns(System.Data.DataTable)">
            <summary>
            Possibly drop the expression columns.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.SanitiseTable(Demo3D.TagServer.Exporter.ExportedTable)">
            <summary>
            Remove extraneous (duplicate) columns.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.Export">
            <summary>
            Saves the currently defined tags and server to a specified file.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Exporter.Save(Demo3D.TagServer.Connections,System.String,Demo3D.TagServer.TagImporterConfiguration)">
            <summary>
            Save tag binding, tag definitions and server configurations.
            </summary>
            <param name="connections"></param>
            <param name="pathName">The full name of the file to save the configuration to.</param>
            <param name="importerConfiguration"></param>
        </member>
        <member name="T:Demo3D.TagServer.ExpressionUpdate">
            <summary>
            Represents a object that can make updates to the model in response to changes to a particular IServerToModelBinding.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ExpressionUpdate.Reconstruct(Demo3D.TagServer.ServerItem.Update)">
            <summary>
            (Re)Construct for reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ExpressionUpdate.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.Expression">
            <summary>
            Base class for a bound expression.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Expression.TagExpression">
            <summary>
            The original tag expression entered in the Tag Grid or loaded from import file.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Expression.Active">
            <summary>
            The expression is active.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Expression.DefaultAccess">
            <summary>
            The default access to use for this expression.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Expression.AllowedAccess">
            <summary>
            The allowed access for this expression.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Expression.BindableItems">
            <summary>
            An expression can refer to multiple BindableItems.
            These include all BindableItems in the expression (left and right hand side).
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Expression.BoundItems">
            <summary>
            Not all BindableItems need to be bound.  Some are just used in calculations.
            A bound item is one that's on the RHS of an ModelToServerExpression,
                return visual.property;
            or a that's on the LHS of an ServerToModelExpression.
                visual.property = value;
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Expression.Read(Demo3D.TagServer.ServerItem)">
            <summary>
            Re-read all BindableItem(s), re-evaluate expression, and return value.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Expression.Write(Demo3D.TagServer.ServerItem.Update)">
            <summary>
            Returns a suitable ExpressionUpdate object for this expression.
            Used to update an expression with a new value.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Expression.Export(System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Export expression to export file.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Expression.ToString">
            <summary>
            Returns a string representation of this expression.
            </summary>
            <returns>A string representation of this expression.</returns>
        </member>
        <member name="M:Demo3D.TagServer.Expression.Dispose">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.Importer">
            <summary>
            The tag and server importer.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Importer.#ctor(Demo3D.TagServer.Connections,System.String,Demo3D.TagServer.TagImporterConfiguration)">
            <summary>
            Tag and server importer.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Importer.DefaultServer">
            <summary>
            If any tag does not explicitly define its Server then we import the tag into the 'DefaultServer'.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Importer.LoadedServer">
            <summary>
            The server of the last tag that was loaded.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Importer.IgnoreMissingContent">
            <summary>
            Ignore missing tag bindings/definitions sheet.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Importer.ConfigureAllServers">
            <summary>
            Configure all servers, not just those defined by the imported bindings.
            Imports all server configurations, and removes bindings for those servers with no imported bindings.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.Importer.NeedsSave">
            <summary>
            Set document NeedsSave if the import changes anything.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Importer.Import">
            <summary>
            Import tags and servers.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.Importer.Load(Demo3D.TagServer.Connections,System.String,Demo3D.TagServer.TagImporterConfiguration@)">
            <summary>
            Load tag binding, tag definitions and server configurations from disk.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.JScriptEnvironment">
            <summary>
            Manages all the JScript for one IServer.  All the JScript expression tag expressions end up being compiled and executed here.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.SanitizeName(System.String)">
            <summary>
            Return a JScript parseable function name from a ServerItem name.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.JScriptEnvironment.SourceLines">
            <summary>
            Source code split into, and managed as, individual source lines.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.SourceLines.FindRange(Demo3D.TagServer.JScriptEnvironment.SourceLine,Demo3D.TagServer.JScriptEnvironment.SourceLine,System.Int32@,System.Int32@)">
            <summary>
            Find a code snippet by searching for an encapsulating header and footer that can identify the snippet.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.SourceLines.GetRange(System.Int32,System.Int32)">
            <summary>
            Return a subset of the code.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.SourceLines.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Return a subset of the code.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.JScriptEnvironment.ExpressionFunction">
            <summary>
            Represents one function in the compiled JScript source relating to one tag expression.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.ScriptOnOptimized(System.Object,System.EventArgs)">
            <summary>
            Capture script optimized event.  Re-cache all the native function pointers.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.ScriptOnSetSource(System.Object,System.EventArgs)">
            <summary>
            Capture the source edited / saved / committed event from the script editor.
            Search the script, and extract the expressions for each server item function.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.MarkupScript(Demo3D.TagServer.JScriptEnvironment.SourceLines)">
            <summary>
            Mark up the script editor with read-only lines for the parts of the code that we generated and don't
            want the user to edit.  We also use the read-only parts of the code to help find and extract the expressions
            after the user has finished editing.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.GenerateSource">
            <summary>
            Generate the complete source code for the script, including the user edited parts and the auto-generated
            tag expressions / server item functions.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.CompileFunctions">
            <summary>
            Regenerate the source code, set the script in the script container, compile and link up native function delegates.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.ScriptOnMarkup(System.Object,System.EventArgs)">
            <summary>
            Capture the user opening the script editor event.  Mark up the read-only parts of the text in the editor.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.AddFunction(Demo3D.TagServer.JScriptEnvironment.ExpressionFunction)">
            <summary>
            Introduce a new server item / tag expression function.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.RemoveFunction(Demo3D.TagServer.JScriptEnvironment.ExpressionFunction)">
            <summary>
            Remove a function.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.JScriptEnvironment.ClearFunctions">
            <summary>
            Clear functions ready for reloading the expressions.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.JScriptExpressionBase">
            <summary>
            Base class for a JScript expression.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.ModelToServerJScriptExpression">
            <summary>
            Represents a model to server JScript expression binding.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.ServerToModelJScriptExpression">
            <summary>
            Represents a server to model JScript expression binding.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.ServerItemName">
            <summary>
            Class containing the salient details of a Binding and a ServerItem.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.ItemId">
            <summary>
            The server item id (database key).
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.ServerName">
            <summary>
            The server name.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.ScanRate">
            <summary>
            The configured scan rate.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.IOControl">
            <summary>
            The configured IO/cache control.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.Endian">
            <summary>
            The configured endian.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.TextEncoding">
            <summary>
            The configured text encoding.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.ConfiguredType">
            <summary>
            The configured data type.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.Description">
            <summary>
            A description of the item.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.ExpressionType">
            <summary>
            Tag expression type for C# expressions.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.Expression">
            <summary>
            Expression.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItemName.AccessRights">
            <summary>
            The access rights for the binding.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItemName.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItemName.#ctor(System.String,System.String,System.Single,Demo3D.PLC.Comms.IOControl,System.Type,Demo3D.TagServer.EndianType,Demo3D.TagServer.TextEncodingType,System.String,Demo3D.PLC.Comms.AccessRights,Demo3D.TagServer.TagExpressionType,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItemName.ToString">
            <summary>
            Returns a string representation of this server item name.
            </summary>
            <returns>A string representation of this server item name.</returns>
        </member>
        <member name="T:Demo3D.TagServer.TagExpressionType">
            <summary>
            The type of a tag expression.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.TagExpressionType.Unknown">
            <summary>
            Unkown expression.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.TagExpressionType.VisualBinding">
            <summary>
            A reference to a property on a visual.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.TagExpressionType.Constant">
            <summary>
            A constant.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.TagExpressionType.Formula">
            <summary>
            Simplified C# expression.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.TagExpressionType.OnModelUpdatedScript">
            <summary>
            JScript that fires when the model supplies a new value.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.TagExpressionType.OnServerUpdatedScript">
            <summary>
            JScript that fires when the PLC / server supplies a new value.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.TagExpression">
            <summary>
            Container for a tag expression: the string typed in by the user, and our parsed interpretation of it.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.TagExpression.Formula.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>A string representation of the expression.</returns>
        </member>
        <member name="M:Demo3D.TagServer.TagExpression.JScript.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>A string representation of the expression.</returns>
        </member>
        <member name="P:Demo3D.TagServer.TagExpression.ExpressionType">
            <summary>
            The type of the expression.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagExpression.Expression">
            <summary>
            A string representation of the expression.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.TagExpression.ExpressionChanged">
            <summary>
            Raised when the expression changes.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.TagExpression.Parser.ParseSimpleExpression(Demo3D.Visuals.Document)">
            <summary>
            Look for constants or simple Visual.Property.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.TagExpression.Parser.ParseExpression">
            <summary>
            Parse expression looking for a binding of some sort.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.TagExpression.ToString">
            <summary>
            Returns a string representation of the expression.
            </summary>
            <returns>A string representation of the expression.</returns>
        </member>
        <member name="T:Demo3D.TagServer.VisualPropertyExpression">
            <summary>
            Represents a visual property (eg custom property) expression.
            This used to be the only kind of expression available in 2011 and earlier editions.
            </summary>
        </member>
        <member name="T:Demo3D.HLE.Comms.Telegram.Telegrams">
            <summary>
            The central point for telegram comms.
            </summary>
        </member>
        <member name="P:Demo3D.HLE.Comms.Telegram.Telegrams.AllFormats">
            <summary>
            All formats for this document.
            </summary>
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.FindFormat(System.String)">
            <summary>
            Tries to find a <see cref="T:Demo3D.HLE.Comms.Telegram.TelegramFormat" /> based on a given name.
            </summary>
            <param name="name">Name of the format.</param>
            <returns>The found format or null.</returns>
        </member>
        <member name="E:Demo3D.HLE.Comms.Telegram.Telegrams.FormatRegistered">
            <summary>
            Raised when a <see cref="T:Demo3D.HLE.Comms.Telegram.TelegramFormat" /> is registered.
            </summary>
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.RegisterFormat(Demo3D.HLE.Comms.Telegram.TelegramFormat)">
            <summary>
            Registers a <see cref="T:Demo3D.HLE.Comms.Telegram.TelegramFormat" />.
            </summary>
            <param name="format">Telegram format.</param>
        </member>
        <member name="E:Demo3D.HLE.Comms.Telegram.Telegrams.FormatUnregistered">
            <summary>
            Raised when a <see cref="T:Demo3D.HLE.Comms.Telegram.TelegramFormat" /> is unregistered.
            </summary>
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.UnregisterFormat(System.String)">
            <summary>
            Unregisters a <see cref="T:Demo3D.HLE.Comms.Telegram.TelegramFormat" />.
            </summary>
            <param name="name">Format name</param>
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.ImportFormats">
            <exclude />
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.ExportFormats">
            <exclude />
        </member>
        <member name="E:Demo3D.HLE.Comms.Telegram.Telegrams.EditBegunAsync">
            <exclude />
        </member>
        <member name="E:Demo3D.HLE.Comms.Telegram.Telegrams.EditEndedAsync">
            <exclude />
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.BeginEditAsync(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.EndEditAsync(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.HLE.Comms.Telegram.Telegrams.Dispose">
            <exclude />
        </member>
        <member name="T:Demo3D.HLE.Comms.Telegram.TelegramSymbolSerializer">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IOBrowserModel">
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.ExplorerView">
            <exclude />
            <summary>
            ExplorerView
            </summary>
        </member>
        <member name="M:Demo3D.IOBrowser.ExplorerView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.IOBrowser.ExplorerViewModel">
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.AllIONode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IONode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.ItemNode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.NoBrowseNode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.AllConstantsNode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.AllVisualTypesNode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.BindableNode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.VisualNode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.VisualTypeNode">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.Node">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.GridItem">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.GridAccessRights">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.GridViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.GridModel">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.ValueTemplateSelector">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.CustomLookUpEditStyleSettings">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.GridView">
            <exclude />
            <summary>
            GridView
            </summary>
        </member>
        <member name="M:Demo3D.IOBrowser.GridView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.IOBrowser.IOGrid">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.MainGrid">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.StandardColumn">
            <exclude />
        </member>
        <member name="M:Demo3D.IOBrowser.StandardColumn.#ctor">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.StandardColumns">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IOBrowserConfiguration">
            <summary>
            Represents the IO browser configuration for a document.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IOBrowser.IOBrowserConfiguration.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.IOBrowser.IOBrowserConfiguration.Dispose">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.GridConfiguration">
            <exclude />
        </member>
        <member name="M:Demo3D.IOBrowser.GridConfiguration.#ctor">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IOBrowserExtensionPane">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IOBrowserPane">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IOBrowserToolbarManager">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IOBrowserView">
            <exclude />
            <summary>
            IOBrowserView
            </summary>
        </member>
        <member name="M:Demo3D.IOBrowser.IOBrowserView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.IOBrowser.IOBrowserViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.IOGridPane">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.PropertiesToolbarManager">
            <exclude />
        </member>
        <member name="T:Demo3D.IOBrowser.PropertiesView">
            <exclude />
            <summary>
            PropertiesView
            </summary>
        </member>
        <member name="M:Demo3D.IOBrowser.PropertiesView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.IOBrowser.PropertiesViewModel">
            <exclude />
        </member>
        <member name="T:Demo3D.IOPropertyGrid.IOPropertyGridControl">
            <exclude />
            <summary>
            IOPropertyGridControl
            </summary>
        </member>
        <member name="M:Demo3D.IOPropertyGrid.IOPropertyGridControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.IOPropertyGrid.DataTemplateSelectorEx">
            <exclude />
        </member>
        <member name="T:Demo3D.IOPropertyGrid.IOPropertyGridResourceDictionary">
            <exclude />
            <summary>
            IOPropertyGridResourceDictionary
            </summary>
        </member>
        <member name="M:Demo3D.IOPropertyGrid.IOPropertyGridResourceDictionary.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Loopback.Net.NamespaceDoc">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Loopback.Net.Loopback">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Loopback.Net.LoopbackAddressEditor">
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.ApplicationPackageManager.LoadPreInstalledPackage(Demo3D.Common.IRegistryKey,System.String)">
            <summary>
            This should behave like the default catalogs did.
            I.e. the package is only installed/loaded if it is the first time loading this year + edition.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.AppTasks">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.AppTasks.ConvertToDLL(Demo3D.Visuals.IBuilder,Demo3D.Visuals.Catalog,Demo3D.Visuals.ScriptContainer)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.AppTasks.LoadCatalog(Demo3D.Visuals.IBuilder,System.String)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.AppTasks.CurrentPlatform">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.AppTasks.AddVisual(Demo3D.Visuals.IBuilder,System.String)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.AppTasks.NewDocument(Demo3D.Visuals.IBuilder)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.NamespaceDoc">
            <summary>
            The Demo3D.PackageManager namespace contains functionality for interacting with the PackageManager.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.DocumentPackagesAspect">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            <para>Holds the lists of installed components and package dependencies for a document.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.DocumentPackagesAspect.InstalledComponents">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.DocumentPackagesAspect.InstalledCAD">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.DocumentPackagesAspect.PackageDependencies">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.DocumentPackagesAspect.#ctor">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.FeedManagerControl">
            <summary>
            Interaction logic for FeedManagerControl.xaml
            </summary>
            <exclude />
            <summary>
            FeedManagerControl
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.FeedManagerControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.FeedViewEditorControl">
            <summary>
            Interaction logic for FeedViewEditorControl.xaml
            </summary>
            <exclude />
            <summary>
            FeedViewEditorControl
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.FeedViewEditorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.CacheConfiguration">
            <summary>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsoleCache">
            <summary>
            A cache between a HelpConsole project and disk. The modification time of contents.json is used as a coarse check. This is a good check for
            the "Packages" project, but not for all projects. It assumes that contents.json is updated when anything else is updated, which is basically
            true for packages.
            If we uploaded (and overwrote) an existing package, then we wouldn't see an update to contents.json. This needs fixing. We could use
            the file _sys_activity/index.md, since this is updated on every update. Perhaps have a file _sys_activity/last_update so that we are not
            downloading a large log file. The coarse check prevents a lot of server-stats
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsoleHttpClient">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsoleHttpClient.PageProperty">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.PackageConfig">
            <summary>
            Information about a package configuration.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageConfig.Name">
            <summary>
            The package name.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageConfig.Version">
            <summary>
            The package version.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageConfig.PlatformVersion">
            <summary>
            The required platform version.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.PackageConfig.#ctor">
            <summary>
            Default constructor. Used only for serialization.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageConfig.#ctor(Demo3D.PackageManager.PackageVersion)">
            <summary>
            Constructs a <see cref="T:Demo3D.PackageManager.PackageConfig" /> for the given <see cref="T:Demo3D.PackageManager.PackageVersion" />.
            </summary>
            <param name="package">The <see cref="T:Demo3D.PackageManager.PackageVersion" /> to create a <see cref="T:Demo3D.PackageManager.PackageConfig" /> for.</param>
        </member>
        <member name="M:Demo3D.PackageManager.PackageConfig.ToString">
            <summary>
            The string representation of the <see cref="T:Demo3D.PackageManager.PackageConfig" />.
            </summary>
            <returns>The string representation of the <see cref="T:Demo3D.PackageManager.PackageConfig" />.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageConfig.ToJsonString">
            <summary>
            The current <see cref="T:Demo3D.PackageManager.PackageConfig" /> serialized into JSON (using the default options), in string form.
            </summary>
            <returns>The JSON representation of the <see cref="T:Demo3D.PackageManager.PackageConfig" />, in string form.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageConfig.FromJsonString(System.String)">
            <summary>
            Deserializes the <see cref="T:Demo3D.PackageManager.PackageConfig" /> from a JSON string, using the default options.
            </summary>
            <param name="json">The JSON string to deserialize.</param>
            <returns>A <see cref="T:Demo3D.PackageManager.PackageConfig" /> deserialized from the given JSON string.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageConfig.Clone">
            <summary>
            Returns a copy of the <see cref="T:Demo3D.PackageManager.PackageConfig" />.
            </summary>
            <returns>A copy of the <see cref="T:Demo3D.PackageManager.PackageConfig" />.</returns>
        </member>
        <member name="T:Demo3D.PackageManager.PackageConfigAspect">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Information about the package a Visual came from.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.PackageDependencies">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.PlaceholderVisualFactory">
            <summary>
            Used to create a single placeholder visual, which is then replaced with a visual from a package (component or CAD) at the earliest suitable time.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.PackageManagerXS">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageManagerXS.Connect(Demo3D.Visuals.IBuilder,System.String)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.IPackageFeed">
            <summary>
            A collection of packages. Package files may be retrieved from a feed.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageFeed.PackageNames">
            <summary>
            The names of available packages in the feed.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageFeed.AllVersions">
            <summary>
            All versions of each package in the feed.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageFeed.AllVersionsFor(System.String)">
            <summary>
            The package versions in the feed for a given package name.
            </summary>
            <param name="name">The name of the package.</param>
            <returns>The package versions in the feed under the given name.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageFeed.Retrieve(System.String,Semver.SemVersion)">
            <summary>
            Retrieves the package with the specified name and version.
            Returns a path to a local package file.
            </summary>
            <param name="name">The name of the package to retrieve.</param>
            <param name="version">The version to retrieve.</param>
            <returns>The path to the package file.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageFeed.GetResourceUri(System.String,Semver.SemVersion,System.String)">
            <summary>
            Returns a <see cref="T:System.Uri" /> for the package, if the feed contains it.
            </summary>
            <param name="name">The name of the package the resource belongs to.</param>
            <param name="version">The version of the package the resource belongs to.</param>
            <param name="resourcePath">The relative path to the resource inside the package.</param>
            <returns>A <see cref="T:System.Uri" /> for the package resource, or null if the feed does not contain the package.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageFeed.Open(System.String,Semver.SemVersion,System.String)">
            <summary>
            Return an open stream to the specified resource, or to the package file if resourcePath is not specified
            </summary>
            <param name="name">The name of the package the resource belongs to.</param>
            <param name="version">The version of the package the resource belongs to.</param>
            <param name="resourcePath">The relative path to the resource inside the package.</param>
            <returns>An open stream or null if the resource does not exist</returns>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageFeed.FeedName">
            <summary>
            The name of the package feed.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.FileSystemPackageFeed">
            <summary>
            A package feed that enumerates packages on disk, under a specified root directory.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.PackageException">
            <summary>
            Generalized exceptions from Package Manager
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.NoSuchPackageException">
            <summary>
            Specified package cannot be found (either in general or a specific version)
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.NoCompatiblePackageException">
            <summary>
            Compatible package cannot be found (either in general or a specific version)
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.IPackageManager">
            <summary>
            Manages packages within a group of package repositories.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageManager.AvailablePackages">
            <summary>
            The packages available to install.
            Packages from the feed are filtered using <see cref="M:Demo3D.PackageManager.IPackageManager.CanInstall(Demo3D.PackageManager.PackageVersion)" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageManager.Updates">
            <summary>
            The updates available for installed packages.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageManager.PackageDependencies">
            <summary>
            The root package dependencies for the target.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageManager.InstalledPackages">
            <summary>
            The packages currently installed on the target.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageManager.CanInstall(Demo3D.PackageManager.PackageVersion)">
            <summary>
            Returns true if the package manager can install the package on the target.
            </summary>
            <param name="package">The package to check for compatibility.</param>
            <returns>Whether the package can be installed.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageManager.Install(System.String,Semver.SemVersion)">
            <summary>
            Installs the latest package with the specified name, or an exact version if specified.
            Installs all dependencies for the package.
            </summary>
            <param name="name">The name of the package to install.</param>
            <param name="version">The exact version to install, if specified.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageManager.Install(Demo3D.PackageManager.PackageVersion)">
            <summary>
            Install the given package, from the feed (<see cref="P:Demo3D.PackageManager.PackageVersion.PackageFeed" />).
            </summary>
            <param name="package">The package to install.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageManager.Restore">
            <summary>
            Installs any missing dependencies for the target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageManager.Uninstall(System.String)">
            <summary>
            Uninstalls the package with the specified name.
            </summary>
            <param name="name">The name of the package to uninstall.</param>
            <returns></returns>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageManager.Target">
            <summary>
            The target for which packages are managed.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.IPackageTarget">
            <summary>
            A target to install packages on.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageTarget.GetPackageManager(Demo3D.PackageManager.PackageManagerOptions)">
            <summary>
            Gets the default package manager for the target if no options are specified. Otherwise returns a new package manager.
            </summary>
            <param name="options">The options to construct the package manager using (optional). If no options are specified, the default options are used.</param>
            <returns>A package manager constructed using the given options, or the default options if none were given.</returns>
        </member>
        <member name="P:Demo3D.PackageManager.IPackageTarget.PackageTargetName">
            <summary>
            The name of the package target.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.E3DPackageManager.InstallCatalogAndRestore(Demo3D.PackageManager.PackageVersion,Demo3D.PackageManager.PackageInstallOptions,Demo3D.Visuals.BackgroundTaskViewer.IBackgroundProgress)">
            <summary>
            Installs a catalog as a new target, and does a restore on the new target.
            </summary>
            <param name="package">The catalog package to install.</param>
            <param name="installOptions">The install options to use.</param>
            <param name="progress">The progress to update. Leave blank to preserve existing progress.</param>
            <returns>The catalog that was installed.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.E3DPackageManager.BeforeInstall(Demo3D.PackageManager.PackageVersion)">
            <summary>
            Before we install a package and its dependencies.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.E3DPackageManager.AfterInstall(Demo3D.PackageManager.PackageVersion,System.Object)">
            <summary>
            After we have installed a package and its dependencies.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.E3DPackageManager.BeforeInstallSingle(Demo3D.PackageManager.PackageVersion)">
            <summary>
            Before we install a single package, i.e. may be the main package being installed,
            or one of its dependencies.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.E3DPackageManager.AfterInstallSingle(Demo3D.PackageManager.PackageVersion,System.Object)">
            <summary>
            After we install a single package, i.e. may be the main package being installed,
            or one of its dependencies.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.E3DPackageManager.FindPackage(System.Collections.Generic.IEnumerable{Demo3D.PackageManager.PackageVersion},System.Predicate{Demo3D.PackageManager.PackageVersion},System.Boolean)">
            <summary>
            Finds the package with the greatest version number that satisfies the given predicate.
            </summary>
            <param name="packages">The packages to search.</param>
            <param name="predicate">The predicate to be satisfied.</param>
            <param name="returnFirstMatch">Return the first package satisfying the predicate, if true.</param>
        </member>
        <member name="M:Demo3D.PackageManager.E3DPackageManager.InstallSingle(Demo3D.PackageManager.PackageVersion,Demo3D.PackageManager.PackageInstallOptions)">
            <summary>
            Note: A successful install plan containing the package should have been obtained before calling this method.
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageInstallOptions.CreateVisual">
            <summary>
            <para>Should a <see cref="T:Demo3D.Visuals.Visual" /> be created in the scene upon installing a new package (i.e. not an update).</para>
            <para>Applies to <see cref="F:Demo3D.PackageManager.PackageType.Component" /> and <see cref="F:Demo3D.PackageManager.PackageType.CAD" /> package types.</para>
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageInstallOptions.AddDependency">
            <summary>
            Should a new dependency on the package be added to the target. The dependency version range is inferred from the package feed.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.PackageManagerOptions">
            <summary>
            Options for package manager construction.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageManagerOptions.Feeds">
            <summary>
            Comma-separated feed URLs to instantiate a package feed with. If null or empty, the default feed is used.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageManagerOptions.Feed">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            The package feed the package manager should use. Takes precedence over <see cref="P:Demo3D.PackageManager.PackageManagerOptions.Feeds" />.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.PackageManagerOptions.InstallDirectory">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            If null or empty, the default installation directory is used.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.IPackageManagerQuickSearchProvider">
            <summary>
            The interface for the Package Manager quick search provider
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.IPackageUploader">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            An interface for uploading a package to a repository.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.IPackageUploader.CreatePackage(System.String)">
            <summary>
            Prepares the repository for a package with the given name to be uploaded.
            </summary>
            <param name="pkgName">The name of the package that will be uploaded.</param>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageUploader.CreatePackageVersion(System.String,Semver.SemVersion)">
            <summary>
            Prepares the repository for a package with the given name and version to be uploaded.
            </summary>
            <param name="pkgName">The name of the package that will be uploaded.</param>
            <param name="version">The version of the package that will be uploaded.</param>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageUploader.UploadPackage(System.String,Semver.SemVersion,System.String,System.Byte[])">
            <summary>
            Uploads a package to the repository.
            </summary>
            <param name="pkgName">The name of the package being uploaded.</param>
            <param name="version">The version of the package being uploaded.</param>
            <param name="fileName">The file name the package data should be saved under in the repository.</param>
            <param name="content">The contents of the package file.</param>
        </member>
        <member name="M:Demo3D.PackageManager.IPackageUploader.Upload(System.String,Semver.SemVersion,System.String,System.Byte[])">
            <summary>
            Uploads a resource for a package to the repository.
            </summary>
            <param name="pkgName">The package the resource belongs to.</param>
            <param name="version">The version of the package the resource belongs to.</param>
            <param name="fileName">The file name the resource data should be saved under in the repository.</param>
            <param name="content">The contents of the resource file.</param>
        </member>
        <member name="T:Demo3D.PackageManager.PackageUploaderXS">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUploaderXS.Create(Demo3D.Visuals.IBuilder,System.String)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.PackageUtilities">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Utilities for the Package Manager
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.PackageUtilities.IsPackageExplorerEnabled">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Toggle for the packages provider in the catalog explorer
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.PackageUtilities.IsInstalledFolderEnabled">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Toggle for the installed packages folder in the catalog explorer
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.SplitSearchText(System.String)">
            <summary>
            Split text into tags and terms
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.SplitSearchText(System.String[])">
            <summary>
            Split text into tags and terms
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.ShowPackageExplorer(Demo3D.Visuals.IBuilder,System.String)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Show the package explorer window
            </summary>
            <param name="app">The main application</param>
            <param name="package">The name of the package to show</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.ShowPackageExplorer(Demo3D.Visuals.IBuilder,Demo3D.PackageManager.IPackageTarget,System.String)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Show the package explorer window
            </summary>
            <param name="app">The main application</param>
            <param name="target">The target to show</param>
            <param name="package">The name of the package to show</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.GetInstalledPackageType(Demo3D.PackageManager.IPackageManager,Demo3D.PackageManager.PackageConfig)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Returns the <see cref="T:Demo3D.PackageManager.PackageType" /> of the installed package.
            </summary>
            <param name="pm">The package manager the package is installed on</param>
            <param name="installed">The installed package configuration</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.GetInstalledPackageVersion(Demo3D.PackageManager.IPackageManager,Demo3D.PackageManager.PackageConfig)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Returns the <see cref="T:Demo3D.PackageManager.PackageVersion" /> for the installed package.
            </summary>
            <param name="pm">The package manager the package is installed on</param>
            <param name="installed">The installed package configuration</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.GetInstallDirectory(Demo3D.PackageManager.IPackageManager,Demo3D.PackageManager.PackageConfig)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Returns the install directory for the given package configuration.
            </summary>
            <param name="pm">The package manager the package is installed on</param>
            <param name="installed">The installed package configuration</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.IsPackageTypeAllowed(Demo3D.PackageManager.IPackageManager,Demo3D.PackageManager.PackageType)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Returns whether the package manager allows the package type.
            </summary>
            <param name="pm">The package manager to check whether the type is allowed on</param>
            <param name="packageType">The package type to query</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageUtilities.IsMajorVersionSupported(Demo3D.PackageManager.VersionRange)">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Returns whether the current major version of Emulate3D is supported by the given version range.
            </summary>
            <param name="versionRange">The version range to check against the major version of Emulate3D.</param>
            <returns>True if any version starting with the major version of Emulate3D is contained within the version range, otherwise false.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.PackageVersion">
            <summary>
            Information about a package.
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageVersion.PackageVersionExtension">
            <summary>
            File extension used for package manager specification files
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Name">
            <summary>
            The unique package name.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Author">
            <summary>
            The package author
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Owner">
            <summary>
            The package owner (eg, Rockwell Automation)
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Created">
            <summary>
            The date and time this package version was created
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Description">
            <summary>
            The package description.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Tags">
            <summary>
            The package tags (space separated list).
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Documentation">
            <summary>
            The path to the documentation for the package. May be a URL.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.ReleaseNotes">
            <summary>
            The path to the release notes for the package. May be a URL.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Version">
            <summary>
            The package version.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Dependencies">
            <summary>
            Default dependencies. May be overridden by platform
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Type">
            <summary>
            The type of the package.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.RequiredVersion">
            <summary>
            The minimum compatible version of Emulate3D.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.RequiredEdition">
            <summary>
            <para>The minimum edition required to install the package.</para>
            <para>Note that the presence of this requirement does not imply that it is enforced for a package once it has been installed.</para>
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.RequiredLicense">
            <summary>
            <para>The license required to install the package.</para>
            <para>Note that the presence of this requirement does not imply that it is enforced for a package once it has been installed.</para>
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Icon">
            <summary>
            Relative path to an image file.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.ExtraData">
            <summary>
            Additional information about the package.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Properties">
            <summary>
            Additional properties for the package.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.AdoptableTypes">
            <summary>
            Types that may be adopted by this package.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Install">
            <summary>
            Install command for <see cref="F:Demo3D.PackageManager.PackageType.Custom" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Uninstall">
            <summary>
            Uninstall command for <see cref="F:Demo3D.PackageManager.PackageType.Custom" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.PackageFeed">
            <summary>
            The feed the package came from.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersion.Key">
            <summary>
            The key for this package.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.PackageVersion.#ctor">
            <summary>
            Default constructor. Used only for serialization.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageVersion.#ctor(Demo3D.PackageManager.PackageVersionOptions)">
            <summary>
            Constructs a <see cref="T:Demo3D.PackageManager.PackageVersion" /> using the given options to set the properties.
            </summary>
            <param name="options">The options to construct the <see cref="T:Demo3D.PackageManager.PackageVersion" /> with.</param>
        </member>
        <member name="M:Demo3D.PackageManager.PackageVersion.ToOptions">
            <summary>
            Converts the <see cref="T:Demo3D.PackageManager.PackageVersion" /> to the corresponding <see cref="T:Demo3D.PackageManager.PackageVersionOptions" /> with the options required to construct the <see cref="T:Demo3D.PackageManager.PackageVersion" /> (see <see cref="M:Demo3D.PackageManager.PackageVersion.#ctor(Demo3D.PackageManager.PackageVersionOptions)" />).
            </summary>
            <returns>An instance of <see cref="T:Demo3D.PackageManager.PackageVersionOptions" /> with the options required to construct the <see cref="T:Demo3D.PackageManager.PackageVersion" />.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageVersion.ToString">
            <summary>
            Returns the package name and version in string form.
            </summary>
            <returns>The current package name and version in string form.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageVersion.Save(System.String)">
            <summary>
            Saves the <see cref="T:Demo3D.PackageManager.PackageVersion" /> to the given directory, using the default filename and serialization options.
            </summary>
            <param name="dir">The directory to save the <see cref="T:Demo3D.PackageManager.PackageVersion" /> to.</param>
        </member>
        <member name="M:Demo3D.PackageManager.PackageVersion.Load(System.String)">
            <summary>
            Loads a <see cref="T:Demo3D.PackageManager.PackageVersion" /> from the given path, using the default deserialization options.
            </summary>
            <param name="path">The path to load the <see cref="T:Demo3D.PackageManager.PackageVersion" /> from.</param>
            <returns>A <see cref="T:Demo3D.PackageManager.PackageVersion" /> loaded from the given path.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageVersion.LoadFromJson(System.String)">
            <summary>
            Deserializes a <see cref="T:Demo3D.PackageManager.PackageVersion" /> from the given JSON string, using the default deserialization options.
            </summary>
            <param name="json">The JSON string representation of the <see cref="T:Demo3D.PackageManager.PackageVersion" />.</param>
            <returns>A <see cref="T:Demo3D.PackageManager.PackageVersion" /> loaded from the given JSON string.</returns>
        </member>
        <member name="T:Demo3D.PackageManager.PackageDependency">
            <summary>
            Holds information about a dependency on a package.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageDependency.Name">
            <summary>
            The name of the package.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageDependency.Version">
            <summary>
            The allowed versions for the package.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageDependency.IsFixed">
            <summary>
            If true, the dependency may not be replaced during an install operation.
            <para>Only applies when the dependency is on a package target.</para>
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.PackageDependency.#ctor">
            <summary>
            Default constructor. Used only for serialization.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageDependency.#ctor(System.String,Demo3D.PackageManager.SemVersionRange)">
            <summary>
            Constructs a <see cref="T:Demo3D.PackageManager.PackageDependency" /> for the given name and version range.
            </summary>
            <param name="name">The name of the required package.</param>
            <param name="version">The allowed versions of the required package.</param>
        </member>
        <member name="M:Demo3D.PackageManager.PackageDependency.#ctor(System.String,Demo3D.PackageManager.SemVersionRange,System.Boolean)">
            <summary>
            Constructs a <see cref="T:Demo3D.PackageManager.PackageDependency" /> for the given name and version range.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <param name="name">The name of the required package.</param>
            <param name="version">The allowed versions of the required package.</param>
            <param name="isFixed">Indicates whether the dependency may be replaced during an install operation.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.PackageDependency.ToString">
            <summary>
            The string representation of the package dependency.
            </summary>
            <returns>The string representation of the package dependency.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageDependency.Clone">
            <summary>
            Returns a copy of the <see cref="T:Demo3D.PackageManager.PackageDependency" />.
            </summary>
            <returns>A copy of the <see cref="T:Demo3D.PackageManager.PackageDependency" />.</returns>
        </member>
        <member name="T:Demo3D.PackageManager.PackageVersionOptions">
            <summary>
            Options for <see cref="T:Demo3D.PackageManager.PackageVersion" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Name">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Name" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Description">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Description" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Documentation">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Documentation" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.ReleaseNotes">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.ReleaseNotes" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Author">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Author" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Owner">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Owner" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Created">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Created" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Tags">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Tags" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Version">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Version" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Dependencies">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Dependencies" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Type">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Type" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.RequiredVersion">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.RequiredVersion" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.RequiredEdition">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.RequiredEdition" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.RequiredLicense">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.RequiredLicense" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Icon">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Icon" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.ExtraData">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.ExtraData" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.AdoptableTypes">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.AdoptableTypes" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Install">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Install" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Uninstall">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Uninstall" />
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.PackageVersionOptions.Properties">
            <summary>
            See <see cref="P:Demo3D.PackageManager.PackageVersion.Properties" />
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.PackageType">
            <summary>
            The possible types for a package. Each package target will support a subset of these types.
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageType.Script">
            <summary>
            <see cref="T:Demo3D.Visuals.ScriptContainer" /> payload. A model script. 
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageType.Catalog">
            <summary>
            <see cref="T:Demo3D.Visuals.Catalog" /> payload.
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageType.Plugin">
            <summary>
            <see cref="T:Demo3D.Visuals.ScriptContainer" /> payload. Installed as a plugin.
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageType.Component">
            <summary>
            <see cref="T:Demo3D.Visuals.Visual" /> payload stored in a .demo3d file. May reference scripts and other resources.
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageType.CAD">
            <summary>
            Raw3D payload.
            </summary>
        </member>
        <member name="F:Demo3D.PackageManager.PackageType.Custom">
            <summary>
            Custom payload.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.ParsedFileCache`1">
            <summary>
            A cache between disk and memory. For example, files that are loaded and parsed into some object, such as JSON files.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Demo3D.PackageManager.ParsedFileCache`1.#ctor(System.Func{System.String,`0})">
            <summary>
            Constructor that takes the load-and-parse function
            </summary>
            <param name="loader">A function that converts a pathname to a instance of T</param>
        </member>
        <member name="M:Demo3D.PackageManager.ParsedFileCache`1.Get(System.String)">
            <summary>
            Return the loaded contents of path. File is only reloaded when a new version is detected
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.PackageManager.MockFeed">
            <summary>
            Mock IPackageFeed, with query utilities
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.PackageGraph.WithResolved(Demo3D.PackageManager.PackageVersion)">
            <summary>
            Change the version of a package in the graph. Used when trying to find a solution for 
            competing requirements on a package.
            This operation potentially changes the structure of the graph, since the dependencies may 
            change for a package between versions. At this time, this method is not propagating those changes.
            </summary>
            <param name="package"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageGraph.With(Demo3D.PackageManager.PackageVersion,Demo3D.PackageManager.Requirement)">
            <summary>
            Add this requirement against this package version
            If this is the first appearance of this package in the graph, then this version becomes the default, arising
            from the given requirement.
            If the package already exists, then the requirement is added to the existing entry, and we will need to 
            run a resolve pass later to find a version that satisfies all the requirements
            </summary>
            <param name="requiredPackage"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageGraph.With(Demo3D.PackageManager.PackageVersion,System.Collections.Generic.IEnumerable{Demo3D.PackageManager.Requirement})">
            <summary>
            Analogous to "install". Expects package to not already be present.
            </summary>
            <param name="requiredPackage"></param>
            <param name="by"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageGraph.Without(System.String)">
            <summary>
            Analogous to "uninstall". Expects package to be present in graph, and then removes it.
            This operation ideally requires that we also find all related Requirements and remove them (if we're not
            in the graph any longer, then we can't be present in any other package's Required list)
            </summary>
            <param name="packageName"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.PackageGraph.With(Demo3D.PackageManager.PackageGraph)">
            <summary>
            Merge two graphs.
            Presently we're just merging the requirements of both versions, and allowing the incoming version 
            to replace the existing version.
            </summary>
            <param name="incoming"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PackageManager.Planning.ResolveGraph(Demo3D.PackageManager.IPackageFeed,Demo3D.PackageManager.PackageGraph,System.Collections.Generic.Dictionary{System.String,Demo3D.PackageManager.SemVersionRange})">
            <summary>
            Reduce a draft plan to a definite set of package versions. A draft plan may be asking for the same package but with 
            different (and possibly conflicting) constraints. Requirements are merged until a single requirement that satisfies
            all source requirements is found.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.Planning.Install(Demo3D.PackageManager.E3DPackageManager,Demo3D.PackageManager.PackageVersion,System.Boolean,System.Boolean)">
             <summary>
             As implemented, InstallPackage is a pipeline of various functions:
             
               [empty] -&gt; BuildInitialGraph feed pkg -&gt; ResolveGraph feed -&gt; MergeWith current -&gt; ResolveGraph feed -&gt; CreateActionPlan current
            
             You ought to be able to get the same value for pv with this re-arrangement
            
               current -&gt; BuildInitialGraph feed pkg -&gt; ResolveGraph feed -&gt; CreateActionPlan current
            
             That is, instead of building against an empty graph initially, build against current state.
             
             First approach shows you what the isolated installation graph would look like without any current state to consider
            
             Second approach avoids need for MergeWith operation and second resolve pass
            
             This analysis suggests that MergeWith and BuildInitialGraph are doing very similar things, and may refactor into lower level operations
            
             This manifests itself when PackageGraph is merging RequiredPackage in various ways
             </summary>
        </member>
        <member name="T:Demo3D.PackageManager.Requirement">
            <summary>
            Describes a dependency, and who owns it
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.TypeAdoptionPattern">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPattern.FullTypeName">
            <summary>
            The full name of the type(s) to match. The wildcard * is allowed.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPattern.ScriptName">
            <summary>
            The name of the script that types may be adopted from. Exact match only.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPattern.AssemblyVersion">
            <summary>
            The assembly versions that types may be adopted from.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPattern.PackageName">
            <summary>
            The package name for the script that types may be adopted from. Exact match only.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPattern.PackageVersion">
            <summary>
            The package versions for the script that types may be adopted from.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.TypeAdoptionPatternOptions">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPatternOptions.FullTypeName">
            <summary>
            See <see cref="P:Demo3D.PackageManager.TypeAdoptionPattern.FullTypeName" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPatternOptions.ScriptName">
            <summary>
            See <see cref="P:Demo3D.PackageManager.TypeAdoptionPattern.ScriptName" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPatternOptions.AssemblyVersion">
            <summary>
            See <see cref="P:Demo3D.PackageManager.TypeAdoptionPattern.AssemblyVersion" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPatternOptions.PackageName">
            <summary>
            See <see cref="P:Demo3D.PackageManager.TypeAdoptionPattern.PackageName" />.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.TypeAdoptionPatternOptions.PackageVersion">
            <summary>
            See <see cref="P:Demo3D.PackageManager.TypeAdoptionPattern.PackageVersion" />.
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.TypeAdoptionUtilities">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.TypeAdoptionUtilities.AdoptTypes(Demo3D.Visuals.Document,System.String[],Demo3D.PackageManager.PackageManagerOptions)">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.ComparatorSet`1">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            <para>A set composed of either one or two comparators. A comparator is composed of an operator and a comparable value (e.g. a version number).</para>
            <para>Each comparator represents either an upper or a lower bound, which may be inclusive or exclusive.</para>
            <para>For example: &gt;=1.2.3 &lt;2.3.4</para>
            </summary>
            <typeparam name="T">The type being compared.</typeparam>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.ComparatorSet`1.Min">
            <summary>
            The lower bound for the set.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.ComparatorSet`1.Max">
            <summary>
            The upper bound for the set.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.ComparatorSet`1.MinInclusive">
            <summary>
            True if the the lower bound is inclusive. False means the bound is exclusive.
            </summary>
        </member>
        <member name="P:Demo3D.PackageManager.ComparatorSet`1.MaxInclusive">
            <summary>
            True if the the upper bound is inclusive. False means the bound is exclusive.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSet`1.#ctor(`0,System.Boolean,System.Boolean)">
            <summary>
            Constructs a comparator set with only one bound.
            </summary>
            <param name="value">The value for the bound.</param>
            <param name="isInclusive">True if the bound is inclusive, false for exclusive.</param>
            <param name="isMinimum">True if the value is the lower bound, false for upper bound.</param>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSet`1.#ctor(`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Constructs a comparator set with two bounds.
            </summary>
            <param name="min">The value for the lower bound.</param>
            <param name="max">The value for the upper bound.</param>
            <param name="minInclusive">True if the lower bound is inclusive, false for exclusive.</param>
            <param name="maxInclusive">True if the upper bound is inclusive, false for exclusive.</param>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSet`1.Contains(`0)">
            <summary>
            Returns true if the value is contained within the set, false otherwise.
            </summary>
            <param name="value">The value to test for inclusion in the set.</param>
            <returns> True if the value is contained within the set, false otherwise.</returns>
        </member>
        <member name="P:Demo3D.PackageManager.Comparator.IsValid">
            <summary>
            Is the group valid as a standalone statement.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.IntersectSets``1(System.Collections.Generic.IEnumerable{Demo3D.PackageManager.ComparatorSet{``0}},System.Collections.Generic.IEnumerable{Demo3D.PackageManager.ComparatorSet{``0}})">
            <summary>
            <para>Returns an enumeration of comparator sets that define the values contained within both <paramref name="a" /> and <paramref name="b" />.</para>
            <para>An example of usage would be to calculate the intersection of version ranges.</para>
            <para>Note: This is <b>not</b> equivalent to <see cref="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />.</para>
            </summary>
            <typeparam name="T">The value type for the comparator sets.</typeparam>
            <param name="a">The enumeration of comparator sets to intersect with <paramref name="b" />.</param>
            <param name="b">The enumeration of comparator sets to intersect with <paramref name="a" />.</param>
            <returns>An enumeration of comparator sets that define the values contained within both <paramref name="a" /> and <paramref name="b" />. Returns null if the intersection is empty.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.WithoutValue``1(System.Collections.Generic.IEnumerable{Demo3D.PackageManager.ComparatorSet{``0}},``0)">
            <summary>
            <para>Returns an enumeration of comparator sets that include the values contained within <paramref name="sets" />, but excluding <paramref name="value" />.</para>
            <para>An example of usage would be to exclude a specific version from a version range.</para>
            </summary>
            <typeparam name="T">The value type for the comparator sets.</typeparam>
            <param name="sets">The enumeration of comparator sets to exclude <paramref name="value" /> from.</param>
            <param name="value">The value to exclude from <paramref name="sets" />.</param>
            <returns>An enumeration of comparator sets that include the values contained within <paramref name="sets" />, but excluding <paramref name="value" />.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.WithoutSets``1(System.Collections.Generic.IEnumerable{Demo3D.PackageManager.ComparatorSet{``0}},System.Collections.Generic.IEnumerable{Demo3D.PackageManager.ComparatorSet{``0}})">
            <summary>
            <para>Returns an enumeration of comparator sets that include the values contained within <paramref name="sets" />, but excluding the values within <paramref name="other" />.</para>
            <para>An example of usage would be to exclude a version range from a version range.</para>
            </summary>
            <typeparam name="T">The value type for the comparator sets.</typeparam>
            <param name="sets">The enumeration of comparator sets to exclude <paramref name="other" /> from.</param>
            <param name="other">The enumeration of comparator sets to exclude from <paramref name="sets" />.</param>
            <returns>An enumeration of comparator sets that include the values contained within <paramref name="sets" />, but excluding the values within <paramref name="other" />.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.Inverse``1(Demo3D.PackageManager.ComparatorSet{``0})">
            <summary>
            <para>Returns an enumeration of comparator sets that include the values outside of <paramref name="set" />.</para>
            </summary>
            <typeparam name="T">The value type for the comparator sets.</typeparam>
            <param name="set">The comparator set to calculate the inverse of.</param>
            <returns>An enumeration of comparator sets that include the values outside of <paramref name="set" />.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.LtNeg``1(``0,``0)">
            <summary>
            Returns true if a is less than b where null is negative infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.LeNeg``1(``0,``0)">
            <summary>
            Returns true if a is less than or equal to b where null is negative infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.LtPos``1(``0,``0)">
            <summary>
            Returns true if a is less than b where null is positive infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.LePos``1(``0,``0)">
            <summary>
            Returns true if a is less than or equal to b where null is positive infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.GtNeg``1(``0,``0)">
            <summary>
            Returns true if a is greater than b where null is negative infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.GeNeg``1(``0,``0)">
            <summary>
            Returns true if a is greater than or equal to b where null is negative infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.GtPos``1(``0,``0)">
            <summary>
            Returns true if a is greater than b where null is positive infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.GePos``1(``0,``0)">
            <summary>
            Returns true if a is greater than or equal to b where null is positive infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.MaxNeg``1(``0,``0)">
            <summary>
            Returns the maximum value of a and b where null is negative infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.MaxPos``1(``0,``0)">
            <summary>
            Returns the maximum value of a and b where null is positive infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.MinNeg``1(``0,``0)">
            <summary>
            Returns the minimum value of a and b where null is negative infinity
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.ComparatorSetExt.MinPos``1(``0,``0)">
            <summary>
            Returns the minimum value of a and b where null is positive infinity
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.SemVersionRange">
            <summary>
            An implementation of <see cref="T:Demo3D.PackageManager.Range`1" /> for use with semantic versions.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.SemVersionRange.#ctor">
            <summary>
            Constructs the default semantic version range (allow all).
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.SemVersionRange.#ctor(Demo3D.PackageManager.ComparatorSet{Semver.SemVersion})">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.SemVersionRange.#ctor(System.Collections.Generic.IEnumerable{Demo3D.PackageManager.ComparatorSet{Semver.SemVersion}})">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.SemVersionRange.TryParse(System.String,Demo3D.PackageManager.SemVersionRange@)">
            <summary>
            Attempts to convert a string representation of a semantic version range to the <see cref="T:Demo3D.PackageManager.SemVersionRange" />
            equivalent, and returns a value to indicate whether the conversion succeeded.
            </summary>
            <param name="str">The semantic version range string.</param>
            <param name="result">The parsed semantic version range, if parsed successfully. Null otherwise.</param>
            <returns>True if the semantic version range was parsed successfully, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.SemVersionRange.Intersect(Demo3D.PackageManager.SemVersionRange)">
            <summary>
            Find the intersection of two range specifications. 
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.VersionRange">
            <summary>
            An implementation of <see cref="T:Demo3D.PackageManager.Range`1" /> for use with versions.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.VersionRange.#ctor">
            <summary>
            Constructs the default version range (allow all).
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.VersionRange.#ctor(System.Collections.Generic.IEnumerable{Demo3D.PackageManager.ComparatorSet{System.Version}})">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.VersionRange.#ctor(Demo3D.PackageManager.ComparatorSet{System.Version})">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PackageManager.VersionRange.TryParse(System.String,Demo3D.PackageManager.VersionRange@)">
            <summary>
            Attempts to convert a string representation of a version range to the <see cref="T:Demo3D.PackageManager.VersionRange" />
            equivalent, and returns a value to indicate whether the conversion succeeded.
            </summary>
            <param name="str">The version range string.</param>
            <param name="result">The parsed version range, if parsed successfully. Null otherwise.</param>
            <returns>True if the version range was parsed successfully, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.PackageManager.VersionRange.Intersect(Demo3D.PackageManager.VersionRange)">
            <summary>
            Find the intersection of two range specifications. 
            </summary>
        </member>
        <member name="T:Demo3D.PackageManager.Range`1">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            A range of values defined by any number of comparator sets.
            </summary>
            <typeparam name="T">The value type for the comparator sets.</typeparam>
            <exclude />
        </member>
        <member name="P:Demo3D.PackageManager.Range`1.ComparatorSets">
            <summary>
            The comparator sets that define the range.
            </summary>
        </member>
        <member name="M:Demo3D.PackageManager.Range`1.Contains(`0)">
            <summary>
            Returns true if the value is contained within any of the comparator sets, false otherwise.
            </summary>
            <param name="value">The value to test for inclusion in the range.</param>
            <returns>True if the value is contained within any of the comparator sets, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsoleContentsResponse">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsoleStatResponse">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsoleStat">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsoleContents">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.HelpConsolePage">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PackageManager.LoginFailedException">
            <summary>
            Exception for when login to PackageFeed or PackageUploader feed fails.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PathSystem.AabbModelSpace">
            <summary>
            Detection of obstacles for path finding. 
            Quadtree uses this to determine status of each leaf node. 
            Compression of path also uses this to remove unnecessary knots.
            Detection algorithm uses "Clipper" library. Each bounding box is projected
            into a 2D polygon, and then an intersection is performed with the test polygon.
            If the intersection produces no polygons then the polygon does not intersect with
            any obstacles.
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.AabbModelSpace.#ctor(Demo3D.Visuals.Visual,System.Double)">
            <summary>
            Construct a model space by including bloated, 2D projections of visuals considered to be obstacles.
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.AabbModelSpace.ContainsBlockingVisuals(Demo3D.Visuals.BBox)">
            <summary>
            Return true if 2D projection of the box intersects any obstacles
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.AabbModelSpace.IntersectsBlockingVisuals(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return true if the 2D projection of [from,to] intersects any obstacles
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PathSystem.AutoSystem.DriveTo(Demo3D.Visuals.Visual,Demo3D.Visuals.SpeedProfile,Demo3D.PathSystem.MotorController,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Drive a vehicle to a target point avoiding racks and conveyors, approaching from approachOffset.
            Target and approachOffset are in world coordinates.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.AABBox">
            <summary>
            Absolute axis bounding box.
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.FluidNavigation.AStarRouteFinder.StepCorner(Demo3D.PathSystem.FluidNavigation.AStarRouteFinder.Step,ClipperLib.IntPoint,ClipperLib.IntPoint,Demo3D.PathSystem.FluidNavigation.Vertex,ClipperLib.IntPoint,ClipperLib.IntPoint,System.Nullable{System.Double}@,System.Int32)">
            <summary>
            Returns null if the portal lies within the visibility window, but if it doesn't then this function adds the new corner to the path
            and re-evaluates all the portals between the corner and the current node, returning a new replacement path.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.FluidNavigationControl">
            <summary>
            Algorithm control.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.FluidNavigationStats">
            <summary>
            Counters and timers.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.FluidNavigationDebugRender">
            <summary>
            Debugging and rendering parameters.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.MonotoneMeshBuilder.MonotoneBuilder.VertexComparer">
            <summary>
            Priority sorter. Sort on Y, then on X.
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.FluidNavigation.MonotoneMeshBuilder.CompareHeight(Demo3D.PathSystem.FluidNavigation.Vertex,Demo3D.PathSystem.FluidNavigation.Vertex)">
            <summary>
            Returns an integer value indicating whether q is above p.
            Compares Y, then X.
            </summary>
            <returns>
            1 if q is above p<br />
            0 if q and p have equal height<br />
            -1 if q is below p
            </returns>
        </member>
        <member name="M:Demo3D.PathSystem.FluidNavigation.MonotoneMeshBuilder.Below(Demo3D.PathSystem.FluidNavigation.Vertex,Demo3D.PathSystem.FluidNavigation.Vertex)">
            <summary>
            Return true if 'p' is below 'q'.
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.FluidNavigation.MonotoneMeshBuilder.Cross(ClipperLib.IntPoint,ClipperLib.IntPoint,ClipperLib.IntPoint)">
            <summary>
            Returns p-&gt;v X v-&gt;n
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.FluidNavigation.MonotoneMeshBuilder.IsConvex(ClipperLib.IntPoint,ClipperLib.IntPoint,ClipperLib.IntPoint)">
            <summary>
            Returns (p-&gt;v X v-&gt;n) &lt; 0
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.NavigationExPolygon">
            <summary>
            A complex polygon (a polygon with an outer shell and a number of inner holes).
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.NavigationMesh">
            <summary>
            A mesh of simple polygons.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.NavigationPolygon">
            <summary>
            A single simple polygon (convex or concave) with portals.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.FluidNavigation.Vertex">
            <summary>
            Single vertex in a polygon.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.QuadTree">
            <summary>
            Two-dimensional representation of obstacles in a model space.
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.QuadTreeNode">
            <summary>
            Quantized rectangular section of model space. Each node indicates the status of that space
            in terms of the obstacles it contains (ie, is it empty of obstacles or not?). Also, each
            node can enumerate its neighbours
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.ConnectedVisuals">
            <summary>
            Enumeration of connected visuals from a given starting visual
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.PathSystemAnimator.BuildSpeedGraph(System.Double)">
            <summary>
            Assigns "graph" and "startPosition"
            </summary>
            <param name="initialSpeed"></param>
        </member>
        <member name="T:Demo3D.PathSystem.InterpolatedSegment">
            <summary>
            A segment representing a curve that has already been interpolated into a series of points.
            If we constructed a path from a series of LineSegments, the vehicle would not align with
            the curve tangent as it traversed the curve.
            </summary>
        </member>
        <member name="P:Demo3D.PathSystem.Segment.Length">
            <summary>
            Length of this segment
            </summary>
        </member>
        <member name="P:Demo3D.PathSystem.Segment.Position">
            <summary>
            Position of this segment in the containing path
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.Segment.PositionToMatrix(System.Double)">
            <summary>
            Location and orientation of a vehicle on this segment at the given position.
            </summary>
            <param name="position">Ranges from 0 to Length</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PathSystem.Segment.PositionOf(Microsoft.DirectX.Vector3)">
            <summary>
            Closest position on this segment of the given location
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.PathSystem.SegmentSection">
            <summary>
            Convert a larger segment to a fragment, so that we can exit / join a segment midway as part of a path
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.TrackMap">
            <summary>
            Model of the space represented by connected track segments. Tracks may have direction constraints.
            A TrackMap can be used to find a route from the vehicle to a target.
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.TrackMap.Build">
            <summary>
            Build the map. The map can then be passed to the search function to find a path
            </summary>
        </member>
        <member name="T:Demo3D.PathSystem.TrackSystem">
            <summary>
            Path system based on conveyors that have directional and speed constraints
            </summary>
        </member>
        <member name="M:Demo3D.PathSystem.TrackSystem.RemoveZeroDistanceMoves(System.Collections.Generic.IList{Demo3D.PathSystem.TrackMapNode})">
            <summary>
            Handle zero distance connector transitions, such as when a straight has two curves
            at its end; the curves may be connected to each other but one may not be connected to
            the straight. This is really a deficiency of the connector mechanism, but we can
            handle it here.
            </summary>
        </member>
        <member name="T:Demo3D.Physics.PhysXDeferredList`1">
            <summary>
            Simple wrapper class which provides a limited thread safe class where the <see cref="M:Demo3D.Physics.PhysXDeferredList`1.Add(`0)" /> method is threadsafe, and it
            is then expected that the class contents will be consumed in a single thread.
            <para>
            This is used in PhysX where we have to delay things, until after the parallel collision detection has completed.
            </para>
            </summary>
            <typeparam name="T">Type of object to be stored.</typeparam>
        </member>
        <member name="T:Demo3D.Physics.Rendering.RenderableLine">
            <summary>
            Represents a renderable line.
            </summary>
        </member>
        <member name="T:Demo3D.Physics.Rendering.RenderablePoint">
            <summary>
            Represents a renderable point.
            </summary>
        </member>
        <member name="T:Demo3D.Physics.Rendering.RenderableText">
            <summary>
            Represents a text label, used for rendering friction coefficients.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.engine">
            <summary>
            The physics engine to which the renderer belongs.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.pointsList">
            <summary>
            The list of points to be rendered, mapped from point size.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.linesList">
            <summary>
            The list of lines to be rendered.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.labelsList">
            <summary>
            The list of text labels to be rendered.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.highlighted">
            <summary>
            Selected physics objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.geometryMeshCache">
            <summary>
            Mesh cache for physics geometry.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.MU">
            <summary>
            Mu symbol, used in friction coefficient labels.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.activeMaterial">
            <summary>
            The material to use when rendering geometry belonging to active (not sleeping) physics
            objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.inactiveMaterial">
            <summary>
            The material to use when rendering geometry belonging to inactive (sleeping) physics
            objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.disabledMaterial">
            <summary>
            The material to use when rendering geometry belonging to disable physics objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.linearMaterial">
            <summary>
            The material to use when rendering linear physics related objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.planarMaterial">
            <summary>
            The material to use when rendering planar physics related objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.triggerMaterial">
            <summary>
            The material to use when rendering geometry belonging to sensors.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.unhighlightedMaterial">
            <summary>
            The material to use when rendering geometry belonging to physics objects that are deselected.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.conveyorSimulationWindowMaterial">
            <summary>
            The material to use when rendering geometry belonging simulation window related objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.contactPointEnabledColor">
            <summary>
            The color to render contact points that are enabled (default state), thus resulting in a contact joint.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.contactPointDisabledColor">
            <summary>
            The color to render contact points that are disabled, where contact joints are not created.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.contactPointNormalColor">
            <summary>
            The color to render the contact point normal vectors.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.contactPointFrictionDirectionColor">
            <summary>
            The color to render contact point friction direction vectors.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.contactPointFrictionDirection2Color">
            <summary>
            The color to render the contact point second friction direction color.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.centerOfGravityColor">
            <summary>
            The color to render points denoting the center of gravity for physics objects.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.jointColor">
            <summary>
            The color to render joints.
            </summary>
        </member>
        <member name="F:Demo3D.Physics.Rendering.Renderer.renderPhysics">
            <summary>
            Whether to render the physics world.
            </summary>
        </member>
        <member name="P:Demo3D.Physics.Rendering.Renderer.RenderFloor">
            <summary>
            Whether to render the physics geometry for the scene floor.
            </summary>
        </member>
        <member name="P:Demo3D.Physics.Rendering.Renderer.RenderBoundingBoxes">
            <summary>
            Whether to render axis aligned bounding boxes for the physics bodies.
            </summary>
        </member>
        <member name="P:Demo3D.Physics.Rendering.Renderer.RenderBodyProperties">
            <summary>
            Whether to render important properties for each rigid body.
            </summary>
        </member>
        <member name="P:Demo3D.Physics.Rendering.Renderer.RenderPhysics">
            <summary>
            Whether to render the physics geometry and contact points for debugging purposes.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.#ctor(Demo3D.Visuals.PhysicsEngine)">
            <summary>
            Constructor.
            </summary>
            <param name="engine">The physics engine to which the renderer belongs.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.Render(Demo3D.Visuals.IDisplay)">
            <summary>
            Renders the physics world.
            </summary>
            <param name="display">The display.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderPointsList(Demo3D.Visuals.IDisplay)">
            <summary>
            Renders all the points in the points list.
            </summary>
            <param name="display">The display.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.Clear">
            <summary>
            Removes all points, lines and labels in the render lists, including persistent entities.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearRenderPoints">
            <summary>
            Removes all non-persistent points in the render list.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearRenderPoints(System.String)">
            <summary>
            Removes all non-persistent points from the render list with the specified key.
            </summary>
            <param name="key">The key for the renderable points to remove from the render list.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearAllRenderPoints">
            <summary>
            Removes all points in the render list, including persistent points.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearAllRenderPoints(System.String)">
            <summary>
            Removes all points from the render list with the specified key, including persistent points.
            </summary>
            <param name="key">The key for the renderable points to remove from the render list.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderLinesList(Demo3D.Visuals.IDisplay)">
            <summary>
            Renders all the lines in the render list.
            </summary>
            <param name="display">The display.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearRenderLines">
            <summary>
            Removes all non-persistent lines in the render list.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearAllRenderLines">
            <summary>
            Removes all render lines in the render list, including persistent lines.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearAllRenderLines(System.String)">
            <summary>
            Removes all lines from the render list with the specified key, including persistent
            lines.
            </summary>
            <param name="key">The key for the renderable lines to remove from the render list.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderLabelList(Demo3D.Visuals.IDisplay)">
            <summary>
            Renders all the labels in the render list.
            </summary>
            <param name="display">The display.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearRenderLabels">
            <summary>
            Removes all non-persistent labels in the render list.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearAllRenderLabels">
            <summary>
            Removes all the labels in the render list, including persistent labels.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.ClearMeshCache">
            <summary>
            Removes all cached meshes for collision geometry.
            </summary>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RemoveFromMeshCache(PhysicsInterface.IGeometry)">
            <summary>
            Removes the cached mesh for the specified geometry.
            </summary>
            <param name="geometry">The geometry for the mesh to remove.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderPoint(Microsoft.DirectX.Vector3,System.Drawing.Color,System.Int32,System.Boolean,System.String)">
            <summary>
            Creates a renderable point and adds it to the render list.
            </summary>
            <param name="position">The world-space position for the point.</param>
            <param name="color">The color for the point.</param>
            <param name="size">The size of the point.</param>
            <param name="persistent">Whether the line is cleared only before a timestep.</param>
            <param name="key">The key that identifies categories of points.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderLine(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Drawing.Color,System.Boolean,System.String)">
            <summary>
            Creates a renderable line and adds it to the render list.
            </summary>
            <param name="from">The starting world-space position for the line.</param>
            <param name="to">The ending world-space position for the line.</param>
            <param name="color">The color for the line.</param>
            <param name="persistent">Whether the line is cleared only before a timestep.</param>
            <param name="key">The key that identifies categories of lines.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderLabel(System.String,System.Drawing.Color,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector2,System.Boolean)">
            <summary>
            Creates a label and adds it to the render list.
            </summary>
            <param name="text">The text for the label.</param>
            <param name="color">The text color for the label.</param>
            <param name="position">The world-space position for the label.</param>
            <param name="offset">The screen-space 2D offset for the label.</param>
            <param name="persistent">Whether the label is cleared only before a timestep.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderLabel(System.String,System.Drawing.Color,Microsoft.DirectX.Vector3,System.Boolean)">
            <summary>
            Creates a label and adds it to the render list.
            </summary>
            <param name="text">The text for the label.</param>
            <param name="color">The text color for the label.</param>
            <param name="position">The world-space position for the label.</param>
            <param name="persistent">Whether the label is cleared only before a timestep.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderContactPoint(PhysicsInterface.IContactPoint)">
            <summary>
            Creates a renderable point for the point of contact, renderable lines for the normal and
            friction direction, and a renderable label for the friction coefficient. All of these
            are persistent so that they are not cleared when just rendering a frame; but rather
            cleared only when the scene is reset or at the beginning of the next timestep.
            </summary>
            <param name="contactPoint">The physics contact point to render.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderArrow(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Drawing.Color,System.Single)">
            <summary>
            Renders an arrow 
            </summary>
            <param name="from">The world-space position that the arrow starts from.</param>
            <param name="to">The world-space position that the arrow points at.</param>
            <param name="color">The color for the arrow.</param>
            <param name="pointerLength">The length of the pointer lines.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderTransform(Microsoft.DirectX.Matrix)">
            <summary>
            Renders a world-space transform.
            </summary>
            <param name="transform">The world space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderFixedJoint(PhysicsInterface.IFixedJoint)">
            <summary>
            Renders a fixed joint.
            </summary>
            <param name="fixedJoint">The fixed joint to render.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderSliderJoint(Demo3D.Visuals.IDisplay,PhysicsInterface.ISliderJoint)">
            <summary>
            Renders a slider joint.
            </summary>
            <param name="display">The display.</param>
            <param name="sliderJoint">The slider joint to render.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderBox(Demo3D.Visuals.IDisplay,Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix,System.Drawing.Color)">
            <summary>
            Renders a box mesh.
            </summary>
            <param name="display">The display.</param>
            <param name="extents">The extents for the box.</param>
            <param name="transform">The transformation matrix for the box.</param>
            <param name="color">The color for the box.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderCylinder(Demo3D.Visuals.IDisplay,System.Single,System.Single,Microsoft.DirectX.Matrix,System.Drawing.Color)">
            <summary>
            Renders a cylinder mesh.
            </summary>
            <param name="display">The display.</param>
            <param name="radius">The radius for the cylinder.</param>
            <param name="length">The length for the cylinder.</param>
            <param name="transform">The transformation matrix for the cylinder.</param>
            <param name="color">The color for the cylinder.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderBoundingBox(PhysicsInterface.AABB,System.Drawing.Color)">
            <summary>
            Renders an axis-aligned bounding box.
            </summary>
            <param name="boundingBox">The axis-aligned bounding box in world-space.</param>
            <param name="color">The color for the bounding box.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderPhysicsObjectBoundingBoxes(PhysicsInterface.IPhysicsObject)">
            <summary>
            Renders the bounding boxes for the specified physics object.
            </summary>
            <param name="physicsObject">The physics object.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderJoints(Demo3D.Visuals.IDisplay,PhysicsInterface.IRigidBody)">
            <summary>
            Renders the joints constraining the specified rigid body.
            </summary>
            <param name="display">The display.</param>
            <param name="rigidBody">The rigid body.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderPhysicsObjectProperties(PhysicsInterface.IPhysicsObject)">
            <summary>
            Renders important properties of the physics body.
            </summary>
            <remarks>
            The following properties are currently rendered:
            <list type="number">
            <item><description>The owning visual's name.</description></item>
            <item><description>The body's mechanics (Sensor/Static/Kinematic/Dynamic).</description></item>
            <item><description>Whether gravity is applied to the body.</description></item>
            <item><description>The joints constraining the rigid body.</description></item>
            <item><description>The mass of the rigid body.</description></item>
            <item><description>The collision groups prescribed to the body.</description></item>
            <item><description>The body's collision geometry.</description></item>
            </list>
            </remarks>
            <param name="physicsObject">The physics object.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderPhysicsObject(Demo3D.Visuals.IDisplay,PhysicsInterface.IPhysicsObject)">
            <summary>
            Renders a physics object by rendering the physics object's geometry.
            </summary>
            <param name="display">The display.</param>
            <param name="physicsObject">The physics object to render.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderGeometry(Demo3D.Visuals.IDisplay,PhysicsInterface.IGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Renders a physics collision geometry.
            </summary>
            <remarks>
            The <paramref name="transform" /> matrix will be the accumulated matrix for compound
            geometry.
            </remarks>
            <param name="display">The display.</param>
            <param name="geometry">The geometry to render.</param>
            <param name="transform">The world-to-local space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderBoxGeometry(Demo3D.Visuals.IDisplay,PhysicsInterface.IBoxGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Renders a physics box geometry.
            </summary>
            <param name="display">The display.</param>
            <param name="geometry">The box geometry to be rendered.</param>
            <param name="transform">The world-to-local space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderSphereGeometry(Demo3D.Visuals.IDisplay,PhysicsInterface.ISphereGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Renders a physics sphere geometry.
            </summary>
            <param name="display">The display.</param>
            <param name="geometry">The sphere geometry to be rendered.</param>
            <param name="transform">The world-to-local space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderCylinderGeometry(Demo3D.Visuals.IDisplay,PhysicsInterface.ICylinderGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Renders a physics cylinder geometry.
            </summary>
            <param name="display">The display.</param>
            <param name="geometry">The cylinder geometry to be rendered.</param>
            <param name="transform">The world-to-local space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderConvexHullGeometry(Demo3D.Visuals.IDisplay,PhysicsInterface.IConvexHullGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Renders a physics convex hull geometry.
            </summary>
            <remarks>
            The convex hull is rendered as a series of lines between each pair of points.
            </remarks>
            <param name="display">The display.</param>
            <param name="geometry">The convex hull geometry to be rendered.</param>
            <param name="transform">The world-to-local space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderTriangleMeshGeometry(Demo3D.Visuals.IDisplay,PhysicsInterface.ITriangleMeshGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Renders a physics concave triangle mesh geometry.
            </summary>
            <param name="display">The display.</param>
            <param name="geometry">The triangle mesh geometry to be rendered.</param>
            <param name="transform">The world-to-local space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.RenderCompoundGeometry(Demo3D.Visuals.IDisplay,PhysicsInterface.ICompoundGeometry,Microsoft.DirectX.Matrix)">
            <summary>
            Renders a physics compound geometry.
            </summary>
            <param name="display">The display.</param>
            <param name="geometry">The compound geometry to be rendered.</param>
            <param name="transform">The world-to-local space transformation matrix.</param>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.GetMaterial(PhysicsInterface.IGeometry)">
            <summary>
            Determines the material to use for rendering the specified geometry.
            </summary>
            <param name="geometry">The geometry.</param>
            <returns>Material to use when rendering the geometry.</returns>
        </member>
        <member name="M:Demo3D.Physics.Rendering.Renderer.PopulateNonPersistentRenderLists">
            <summary>
            Populates the render lists with non-persistent objects, ready for rendering.
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.LayersMenuControl">
            <summary>
            Interaction logic for LayersMenuControl.xaml
            </summary>
            <summary>
            LayersMenuControl
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.LayersMenuControl.UpdateLayerSelect(System.Object)">
            <summary>
            Update listbox selection to match selected printviews
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.LayersMenuControl.UpdateLayerListBox(System.Object)">
            <summary>
            Add, remove or update image of layers
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.LayersMenuControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.ViewListBoxControl">
            <summary>
            Interaction logic for ViewListBoxControl.xaml
            </summary>
            <summary>
            ViewListBoxControl
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.ViewListBoxControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.VisualListControl">
            <summary>
            Interaction logic for VisualListControl.xaml
            </summary>
            <summary>
            VisualListControl
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.VisualListControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.BoolInverterConverter">
            <summary>
            Convert bool to inverse bool
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.DropDownButton">
            <summary>
            A button that opens a drop-down menu when clicked.
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.InitializeControl">
            <summary>
            Initialize events and commands
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.LoadViews(System.Collections.Generic.List{Demo3D.PrintMenu.PrintViewProperties})">
            <summary>
            Load all saved views
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.CreateView(Demo3D.PrintMenu.CustomListBoxItem,System.Windows.Point)">
            <summary>
            Create a print view from a listbox
            </summary>
            <param name="item"></param>
            <param name="middle"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.DrawTab(Demo3D.PrintMenu.PrintTab)">
            <summary>
            Draws the tab
            </summary>
            <param name="tab">Tab to be drawn</param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.UpdateSelectedView">
            <summary>
            Update current view if property has been changed
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.HideTemplate(Demo3D.Visuals.Visual)">
            <summary>
            Hide template from main Demo3D view
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.SelectFromLayerList(System.Object)">
            <summary>
            Update selected PrintViews to match the layer list
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.CreateVisualMenu(Demo3D.Visuals.Visual)">
            <summary>
            Creates list of all visuals that are in scene that are visible and/or have children
            </summary>
            <param name="visual"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingMenu.backgroundBorder_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Remove current selection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintingSetup">
            <summary>
            Interaction logic for PrintingSetup.xaml
            </summary>
            <summary>
            PrintingSetup
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintingSetup.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintMenuEditToolbar">
            <summary>
            Interaction logic for PrintMenuEditToolbar.xaml
            </summary>
            <summary>
            PrintMenuEditToolbar
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintMenuEditToolbar.UpdateLayerSelect(System.Object)">
            <summary>
            Update listbox selection to match selected printviews
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintMenuEditToolbar.UpdateLayerListBox(System.Object)">
            <summary>
            Add, remove or update image of layers
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Demo3D.PrintMenu.PrintMenuEditToolbar.Buttons">
            <summary>
            Returns all buttons in the menu
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintMenuEditToolbar.UnCheckButtons(Demo3D.PrintMenu.PrintMode)">
            <summary>
            Uncheck buttons that are part of the group
            </summary>
            <param name="mode"></param>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintMenuEditToolbar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintPreviewControl">
            <summary>
            Interaction logic for PrintPreview.xaml
            </summary>
            <summary>
            PrintPreviewControl
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintPreviewControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintScale">
            <summary>
            Interaction logic for PrintScale.xaml
            </summary>
            <summary>
            PrintScale
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintScale.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintTab">
            <summary>
            Interaction logic for DXTabControl.xaml
            </summary>
            <summary>
            PrintTab
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintTab.UpdateSelectionRects">
            <summary>
            Update Selection icons
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintTab.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintToolButton">
            <summary>
            Interaction logic for PrintToolButton.xaml
            </summary>
            <summary>
            PrintToolButton
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintToolButton.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintView">
            <summary>
            Interaction logic for PrintView.xaml
            </summary>
            <summary>
            PrintView
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Demo3D.PrintMenu.PrintViewProperties.NormalTolerance">
            <summary>
            Tolerance between normals in degrees
            </summary>
        </member>
        <member name="P:Demo3D.PrintMenu.PrintViewProperties.DepthTolerance">
            <summary>
            Tolerance in depth, in meters
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintViewMenuSettings">
            <summary>
            Interaction logic for PrintViewMenuSettingsxaml.xaml
            </summary>
            <summary>
            PrintViewMenuSettings
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintViewMenuSettings.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.RenameContext">
            <summary>
            Interaction logic for RenameContext.xaml
            </summary>
            <summary>
            RenameContext
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.RenameContext.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.PrintMenu.PrintingMenuLineDrawer">
            <summary>
            Convert 3D View into a 2D line drawing
            </summary>
        </member>
        <member name="P:Demo3D.PrintMenu.PrintingMenuLineDrawer.DispatcherElement">
            <summary>
            Used to access the gui thread, can be any wpf control
            </summary>
        </member>
        <member name="M:Demo3D.PrintMenu.PrintMenuLineRenderer.#ctor(Demo3D.Visuals.IBuilder)">
            <summary>
            Initializes a new instance of the QuickCameraRenderer class.
            </summary>
            <param name="app"></param>
        </member>
        <member name="T:Demo3D.Raw.NamespaceDoc">
            <summary>
            The Demo3D.Raw namespace. Not intended for public use.
            </summary>
        </member>
        <member name="P:Demo3D.Raw.RawConverter.ImportArguments.ImportPath">
            <summary>
            Path to exported file
            </summary>
        </member>
        <member name="P:Demo3D.Raw.RawConverter.ImportArguments.RawPath">
            <summary>
            Path to temporary Raw3D file to be converted
            </summary>
        </member>
        <member name="P:Demo3D.Raw.RawConverter.ImportArguments.Scale">
            <summary>
            Import scale, default 1
            </summary>
        </member>
        <member name="P:Demo3D.Raw.RawConverter.ImportArguments.Recenter">
            <summary>
            Move the origin to the centre point
            </summary>
        </member>
        <member name="P:Demo3D.Raw.RawConverter.ExportArguments.ExportPath">
            <summary>
            Path to exported file
            </summary>
        </member>
        <member name="P:Demo3D.Raw.RawConverter.ExportArguments.RawPath">
            <summary>
            Path to temporary Raw3D file to be converted
            </summary>
        </member>
        <member name="T:Demo3D.Reactive.ObservableCollectionExt">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.ObservableChildren">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.ObservableFilter`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.CollectionItemObserver`1">
            <summary>
            Watches items in an ICollection for changes to their properties
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.NamespaceDoc">
            <summary>
            Not currently documented
            </summary>
        </member>
        <member name="T:Demo3D.Reactive.Duration">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.TimeStamp">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.Signal">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.PropertySignal`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.Signal`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.AwaitSignal">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.SignalExt">
            <exclude />
        </member>
        <member name="T:Demo3D.Reactive.ScriptReferenceExt">
            <exclude />
        </member>
        <member name="T:Demo3D.Script.ExternalReference">
            <summary>
            A refernces to an external DLL.
            </summary>
        </member>
        <member name="P:Demo3D.Script.ExternalReference.Path">
            Cache of assembly
        </member>
        <member name="T:Demo3D.Script.ExternalReferences">
            <summary>
            A collection of dll references.
            </summary>
        </member>
        <member name="M:Demo3D.Script.ExternalReferences.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Script.ExternalReferences.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Script.Editor.JScriptCompletion.FetchExpressionBackwards(ICSharpCode.NRefactory.Editor.IDocument,System.Int32@)">
            <summary>
            Very fuzzy attempt to find the expression that the user is currently typing.
            Colons are difficult, since they could be part of a var's type declaration or
            the second part of a ?: conditional.
            This function is likely to be the source of some of our code completion frustrations.
            </summary>
            <param name="document">The document to fetch the expression from.</param>
            <param name="startPos">Position that expression starts at.</param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Script.Editor.ScriptEditorControl">
            <exclude />
        </member>
        <member name="M:Demo3D.Script.Editor.ScriptEditorControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:Demo3D.Script.Editor.ScriptEditorControl.UpdateAssociatedScriptEditors(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Refresh the editors for any scripts which reference the script (Intellisense may have changed).
            </summary>
        </member>
        <member name="P:Demo3D.Script.Editor.ScriptEditorControl.CurrentLine">
            <summary>
            User considers first line to be 1, for the editor it's 0. This returns
            first line as 1.
            </summary>
        </member>
        <member name="T:Demo3D.Script.Editor.ScriptEditorWindow">
            <exclude />
        </member>
        <member name="M:Demo3D.Script.Editor.ScriptEditorWindow.GetScriptEditorFor(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Find the ScriptEditorWindow (if any) for the supplied script.
            </summary>
            <remarks>The Key for this isn't right, the same Id could be a script in a Catalog or a script in the model</remarks>
            <param name="script">The <see cref="T:Demo3D.Visuals.ScriptContainer" /> to try and find the editor for</param>
            <returns>The <see cref="T:Demo3D.Script.Editor.ScriptEditorWindow" /> for the script</returns>
        </member>
        <member name="M:Demo3D.Script.Editor.ScriptEditorWindow.SetScriptEditorFor(Demo3D.Visuals.ScriptContainer,Demo3D.Script.Editor.ScriptEditorWindow)">
            <summary>
            Set the ScriptEditorWindow for the supplied script.
            </summary>
            <remarks>The Key for this isn't right, the same Id could be a script in a Catalog or a script in the model</remarks>
            <param name="script">The <see cref="T:Demo3D.Visuals.ScriptContainer" /> to set the editor for</param>
            <param name="editor">The <see cref="T:Demo3D.Script.Editor.ScriptEditorWindow" /> to use</param>
        </member>
        <member name="M:Demo3D.Script.Editor.ScriptEditorWindow.RemoveScriptEditorFor(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Remove the ScriptEditorWindow (if any) for the supplied script.
            </summary>
            <remarks>The Key for this isn't right, the same Id could be a script in a Catalog or a script in the model</remarks>
            <param name="script">The <see cref="T:Demo3D.Visuals.ScriptContainer" /> to try and remove the editor for</param>
        </member>
        <member name="M:Demo3D.Script.Editor.ScriptEditorWindow.Edit(Demo3D.Visuals.IBuilder,Demo3D.Script.ScriptThread,Demo3D.Script.ResumeDelegate)">
            <summary>
            Edit the current line of the executing thread
            </summary>
            <param name="app"></param>
            <param name="thread"></param>
            <param name="resumeCallback"></param>
        </member>
        <member name="P:Demo3D.Script.Editor.ScriptEditorWindow.SelectedEditor">
            <summary>
            Gets the ScriptEditorControl for the script that is currently being edited, or null if no script is currently being edited.
            </summary>
        </member>
        <member name="F:Demo3D.Script.Profiler.ScriptProfilerControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.Script.Profiler.ScriptProfilerControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.Script.Profiler.ScriptProfilerControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Script.BBoxLockArgs">
            <exclude />
        </member>
        <member name="T:Demo3D.Script.BBoxLockTask">
            <exclude />
        </member>
        <member name="T:Demo3D.Script.BBoxLockManager">
            <exclude />
        </member>
        <member name="T:Demo3D.Script.ScriptThreadChannelExtensions">
            <summary>
            Handle the suspending of ScriptThreads when doing a blocking channel operation.
            </summary>
        </member>
        <member name="T:Demo3D.Script.PriorityChannel`2">
            <summary>
            A channel that behaves like a priority queue. 
            It has fixed capacity. Attempts to read from an empty channel will block, as will attempts to write to a full channel.
            Values are ordered on a 
            </summary>
            <typeparam name="K">The type of the priorities of the values being passed through the channel</typeparam>
            <typeparam name="T">The type of the values being passed through the channel</typeparam>
        </member>
        <member name="T:Demo3D.Script.ObjectExtenstionMethod">
            <summary>
            Object.ToString() can throw (e.g. encrypted scripts), the object in a string context will call it
            This extension method tries to use ToString() but if that throws, just get the type name
            </summary>
        </member>
        <member name="T:Demo3D.Script.SourceToken">
            <summary>
            A token class for use by the lexer that will carry the fileName (ScriptContainer.Name)
            </summary>
        </member>
        <member name="T:Demo3D.Script.TypeInfo">
            <summary>
            Wrapper to Reflection API that will filter the members of Demo3D.Visuals.Visual
            </summary>
        </member>
        <member name="T:Demo3D.Script.EditorBrowsableAttributeCache">
            <summary>
            Helper class for IntelliSense/EditorBrowsable attributes
            </summary>
        </member>
        <member name="M:Demo3D.Script.GenerateCodeContext.IsReferenced(Demo3D.Visuals.ScriptContainer)">
            <summary>
            Return true if the script is referenced and has been optimized in this dll
            </summary>
        </member>
        <member name="M:Demo3D.Script.GenerateCodeContext.GenerateCodeWithCasts(Demo3D.Script.Node,System.Type,System.Boolean)">
            <summary>
            Generate code for a node and cast it to the expected type if needed.
            Used for method/function call arguments and for var assignments 
            which are explicit casts.
            </summary>
        </member>
        <member name="M:Demo3D.Script.GenerateCodeContext.GetConverter(Demo3D.Script.Node,System.Type,System.Boolean)">
            <summary>
            Generate function call needed to convert/cast from value type to target type.
            If null returned cast is not needed.
            NOTE: See ScriptThread.ImplicitCast for interpreted version of these rules.
            </summary>
        </member>
        <member name="F:Demo3D.Script.Statement.checkAllowedToRead">
            <summary>
            Backdoor to stop AssertToString throwing exception if script is unreadable (i.e. encrypted and only a runtime licence)
            Be *Very* careful about setting this to false - Make sure you are in a try/catch/finally to reset it back to true
            </summary>
        </member>
        <member name="M:Demo3D.Script.Function.ToStringFullInternal">
            <summary>
            Wrapper to ToStringFull() to get the value without throwing an exception if the script
            is AllowedToRead=false
            </summary>
            <returns>value of ToStringFull() without AllowedToRead=false exception</returns>
        </member>
        <member name="M:Demo3D.Script.Function.ExecuteNative(System.Object[])">
            <summary>
            Execture a Function without a ScriptThread (using C# via Execute).
            </summary>
        </member>
        <member name="T:Demo3D.Script.Node">
            <summary>
            Node is an Expression
            </summary>
        </member>
        <member name="M:Demo3D.Script.Node.GetExpressionReturnType(Demo3D.Script.ScriptThread,Demo3D.Visuals.ScriptContainer)">
            <summary>
            Get the return result if the node is a function.
            </summary>
        </member>
        <member name="F:Demo3D.Script.ValueNode.unitConverters">
            <summary>
            This is a dictionary which maps unit suffixes to conversion functions which return the value in Demo3D's native units for that type.
            </summary>
        </member>
        <member name="T:Demo3D.Script.DummyValue">
            <summary>
            Used by IntelliSense provide type information about function parameters and var declarations
            </summary>
        </member>
        <member name="M:Demo3D.Script.NewExpr.GetBestScore(System.Int32[])">
            <summary>
            Find the best (lowest) score when type matching.
            In it's own function to allow edit and continue.
            </summary>
        </member>
        <member name="M:Demo3D.Script.IndexNode.ValidateItemParameters(System.Type,System.Object[])">
            <summary>
            Looks up the Item property for a type and validates a set of index parameters against it.
            </summary>
            <param name="collectionType">The collection type whose Item property to look up.</param>
            <param name="indexValues">The index values to validate and convert to the expected parameter types if necessary (or indeed possible).</param>
            <returns>A PropertyInfo for the Item property, if successful.</returns>
        </member>
        <member name="M:Demo3D.Script.MethodCallNode.GetBestScore(System.Int32[])">
            <summary>
            Find the best (lowest) score when type matching.
            In it's own function to allow edit and continue.
            </summary>
        </member>
        <member name="T:Demo3D.Script.FormatTokenizer">
            <summary>
            Used by built-in Format command to interpolate $-variable references
            </summary>
        </member>
        <member name="T:Demo3D.Script.NativeScript">
            <summary>
            The base class for generated script functions providing access to builtin
            functions. All symbols are preceded by __ to prevent them from clashing with
            user defined functions in the generated derived classes.
            </summary>
        </member>
        <member name="M:Demo3D.Script.NativeScript.__qlprint(System.Object)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__inpc(System.Object[])">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Convert the array of objects to an array of <see cref="T:System.ComponentModel.INotifyPropertyChanged" />, ready to listen for changes
            in a wait statement.
            </summary>
            <param name="objs">Objects to convert to <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.</param>
            <returns>Array of <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__cast``1(System.Object)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.Byte)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.SByte)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.Int16)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.UInt16)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.Int32)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.UInt32)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.Int64)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.UInt64)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.Single)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.Double)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(System.Object)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__(Demo3D.Expression.Numeric)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__FindFunction(Demo3D.Visuals.Visual,System.String,System.String)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.NativeScript.__RunFunction(Demo3D.Visuals.Visual,Demo3D.Script.Function,System.Object[])">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Script.BuiltInFunctions.Wait(Demo3D.EventQueue.ITask)">
            <summary>
            Suspend current script thread until the incoming object completes.
            </summary>
            <param name="completion">Object to wait for completion of.</param>
            <returns>Continuation beyond script thread.</returns>
        </member>
        <member name="M:Demo3D.Script.BuiltInFunctions.Wait(System.Threading.Tasks.Task)">
            <summary>
            Suspend current script thread until the incoming object completes.
            </summary>
            <param name="completion">Object to wait for completion of.</param>
            <returns>Continuation beyond script thread.</returns>
        </member>
        <member name="T:Demo3D.Script.Method">
            <summary>
            An instance of Method is used when a script expression evaluates to a .NET method, a ScriptReference
            or a Function that is called using '.' (dot) notation.
            </summary>
        </member>
        <member name="M:Demo3D.Script.Method.CanImplicitlyConvertTo(System.Type,System.Type)">
            <summary>
            Can <see cref="T:System.Type" /> <paramref name="from" /> be implicitly converted to <see cref="T:System.Type" /> <paramref name="to" />.
            e.g. int to float, float to double, but not double to float
            </summary>
            <param name="from">Source <see cref="T:System.Type" /></param>
            <param name="to">Destination <see cref="T:System.Type" /></param>
            <returns>true if the conversion can be done</returns>
        </member>
        <member name="T:Demo3D.Script.IBreakable">
            <summary>
            This interface behaves more like an attribute, rather than providing a
            real API.
            </summary>
        </member>
        <member name="T:Demo3D.Script.IFrame">
            <summary>
            An execution context. Each script thread has a stack of IFrames, the topmost
            of which is the currently executing frame. A frame is typically a statement list,
            and a any frame pushed onto the stack by the current frame is known as a subframe.
            The subframe would usually be a function call; when completed, Thread.Value holds
            the return value.
            </summary>
        </member>
        <member name="M:Demo3D.Script.IFrame.HandleException(Demo3D.Script.ScriptThread,System.Exception,Demo3D.Script.Statement,System.String)">
            <summary>
            When an exception is thrown, each frame is notified of the exception
            with HandleException() before being popped.. The frame unwind is halted
            at frames that return true.
            </summary>
            <param name="thread">Current thread</param>
            <param name="x">Exception to be handled</param>
            <param name="throwingStatement">Current statement</param>
            <param name="stackTrace">Stack trace</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Script.IFrame.Return(Demo3D.Script.ScriptThread)">
            <summary>
            When the "return" statement is executed, each frame is notified with
            Return() before being popped. The unwind is stopped at the first frame
            that returns false. Function frames return false and then pop themselves.
            Try frames return false so that the finally block can be executed, and then
            the "return" is resumed.
            </summary>
            <param name="thread"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Script.IContext">
            <summary>
            An identifier context. Each script thread has a stack of IContexts, which are
            search from top to bottom when resolving identifiers. 
            </summary>
        </member>
        <member name="T:Demo3D.Script.TryFrame">
            <summary>
            The TryFrame coordinates the catch and finally blocks, and handles any
            exceptions or return statements that occur. The "return" statement is interesting
            to this frame because the finally block must be executed before the return
            fully completes.
            </summary>
        </member>
        <member name="T:Demo3D.Script.WithFrame">
            <summary>
            The WithFrame is used to manage the default-object context. When this
            frame is completed, it pops its associated WithContext.
            </summary>
        </member>
        <member name="T:Demo3D.Script.BreakFrame">
            <summary>
            This frame does nothing except provide a backstop for the break statement
            as used in a switch/case statement.
            </summary>
        </member>
        <member name="T:Demo3D.Script.IteratorFrame">
            <summary>
            The IteratorFrame coordinates the for, for-in, while and do-while loops.
            </summary>
        </member>
        <member name="T:Demo3D.Script.ExpressionFrame">
            <summary>
            The ExpressionFrame is used to evaluate Nodes (expressions). A frame is
            used so that a method call expression can suspend the thread. This allows 
            ScriptThread.Run() to return in the middle of an expression evaluation
            and for the evaluation to be resumed later (eg when the turntable has completed
            its rotation etc). The ExpressionFrame is holding the state that would normally
            be held in the C# call stack were we able to recursively evaluate a Node directly.
            </summary>
        </member>
        <member name="T:Demo3D.Script.NativeFunctionFrame">
            <summary>
            A NativeFunctionFrame is a FunctionFrame for a compiled function.
            </summary>
        </member>
        <member name="T:Demo3D.Script.FunctionFrame">
            <summary>
            A FunctionFrame is a backstop for a return statement, and provides information
            about the currently executing function. By inheriting from StatementListFrame
            it creates a new vars context and executes its function body.
            </summary>
        </member>
        <member name="T:Demo3D.Script.StatementListFrame">
            <summary>
            A StatementList frame is used to execute a "{ ... }" statement block,
            and also provides a new vars context which is popped on completion.
            </summary>
        </member>
        <member name="T:Demo3D.Script.ScriptThreadManager.StatementComparer">
            <summary>
            Compare statements by their source reference (file, line, column).
            This handled anonymous functions that creating copies of their statements.
            </summary>
        </member>
        <member name="M:Demo3D.Script.ScriptThreadManager.DisposeThread(Demo3D.Script.ScriptThread)">
            <summary>
            Removes the thread that has been disposed from the appropriate list.
            </summary>
            <param name="thread">The ScriptThread.</param>
        </member>
        <member name="M:Demo3D.Script.WaitEventInfo.ToString">
            <summary>
            Override ToString() to help with debugging.
            </summary>
        </member>
        <member name="F:Demo3D.Script.WaitControlBlock.Source">
            <summary>
            Notify completion of waiting tasks.
            </summary>
        </member>
        <member name="P:Demo3D.Script.WaitControlBlock.Task">
            <summary>
            Get the task associated with this wait control block if using native wait.
            </summary>
        </member>
        <member name="F:Demo3D.Script.WaitControlBlock.Document">
            <summary>
            The associated document that the wait is executing for.
            </summary>
        </member>
        <member name="F:Demo3D.Script.WaitControlBlock.Thread">
            <summary>
            The thread that is waiting
            </summary>
        </member>
        <member name="F:Demo3D.Script.WaitControlBlock.TimeoutEvent">
            <summary>
            If set, then there is a timeout for this wait
            </summary>
        </member>
        <member name="F:Demo3D.Script.WaitControlBlock.Mode">
            <summary>
            Wait until all events have fired, or just one of them.
            </summary>
        </member>
        <member name="E:Demo3D.Script.ScriptThread.ThreadDisposed">
            <summary>
            Occurs when this thread is disposed.
            </summary>
        </member>
        <member name="M:Demo3D.Script.ScriptThread.OnThreadDisposed(System.EventArgs)">
            <summary>
            Raises the ThreadDisposed event.
            </summary>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Script.ScriptThread.Join(Demo3D.EventQueue.ITask[])">
            <summary>
            Suspend this thread until all the supplied threads have completed.
            </summary>
        </member>
        <member name="M:Demo3D.Script.ScriptThread.#ctor(Demo3D.Visuals.Document,Demo3D.Visuals.ScriptContainer)">
            <summary>
            Create a thread that will run the given script (ie, all top-level statements)
            </summary>
            <param name="document"></param>
            <param name="script"></param>
        </member>
        <member name="M:Demo3D.Script.ScriptThread.#ctor(Demo3D.Visuals.Document,Demo3D.Script.Function,System.Object[])">
            <summary>
            Create a thread that will execute the given function
            </summary>
            <param name="document"></param>
            <param name="function"></param>
            <param name="args"></param>
        </member>
        <member name="M:Demo3D.Script.ScriptThread.PushFrame(Demo3D.Script.IFrame)">
            <summary>
            Used in scripts so needs to be public but hidden.
            e.g. thread.PushFrame(new Demo3D.Visuals.Visual.SendToMessageListenersFrame(...));
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Script.ScriptThread.CurrentEventHandled">
            <summary>
            Used by OnDispatchIn/OnDispatch out to determine if the event was handled by user code or
            whether the event needs to be processed by the built-in DispatchIn/DispatchOut functionality.
            
            Use this when porting JScript to C# and there is no ScriptThread.Current to set EventHandled for.
            </summary>
        </member>
        <member name="P:Demo3D.Script.ScriptThread.ParentContextThread">
            <summary>
             Provides final recourse for resolving variables
            </summary>
        </member>
        <member name="T:Demo3D.Script.NativeScriptThread">
            <summary>
            Base implementation for native code that works with script threads. Derived classes assign
            methods to NextStatement in order to advance through a sequence of operations, so allowing
            the thread to be suspended as for normal scripting.
            </summary>
        </member>
        <member name="T:Demo3D.Script.TypeNamePair">
            <summary>
            Pair for hashtable combining Type and an id for PropertyInfo and MethodInfo caches.
            </summary>
        </member>
        <member name="T:Demo3D.Script.JoinInternal">
            <exclude />
        </member>
        <member name="M:Demo3D.Script.JoinInternal.Create(System.Boolean,Demo3D.EventQueue.ITask[])">
            <exclude />
        </member>
        <member name="T:Demo3D.Script.Sequences">
            <summary>
            LINQ-like functions available for use in scripting, hence everything is either IEnumerable or IEnumerable&lt;Object&gt;
            </summary>
        </member>
        <member name="M:Demo3D.Script.Sequences.FirstN(System.Collections.IEnumerable,System.Int32)">
            <summary>
            The first N elements from the collection
            </summary>
        </member>
        <member name="M:Demo3D.Script.Sequences.LastN(System.Collections.IEnumerable,System.Int32)">
            <summary>
            The last N elements from the collection
            </summary>
        </member>
        <member name="M:Demo3D.Script.StateLockManager.LockFirst(Demo3D.Script.StateLockManager.LockArgs,System.Action{Demo3D.Script.StateLockManager.LockReference})">
            <summary>
            Create initial lock, running transition function. Continuation function instantiates
            lock once transition has completed
            </summary>
        </member>
        <member name="M:Demo3D.Script.StateLockManager.CreateFirstStateLock(Demo3D.Script.StateLockManager.LockArgs)">
            <summary>
            Instantiate the initial state lock, with reference count = 0 to indicate
            that the transition is in progress. This means other lock requests cannot be granted
            until the transition is complete
            </summary>
        </member>
        <member name="M:Demo3D.Script.StateLockManager.LockSubsequent(Demo3D.Script.StateLockManager.StateLock)">
            <summary>
            Create a new lock reference for an existing lock
            </summary>
        </member>
        <member name="M:Demo3D.Script.StateLockManager.Lock(System.Object,System.Func{System.Boolean},System.Action{System.Action},System.Action{System.IDisposable})">
            <summary>
            Lock subject into a particular state. The lock may only be granted if:
            1) Subject is not already locked, or
            2) Subject is locked and in the requested state
            
            In case (1), then transition will be called to put subject into the requested state. Predicate
            should return true if called upon transition completion, and at all times until the lock is released.
            This is not currently checked
            
            In case (2), an additional lock is granted and the reference count increased.
            
            Subject remains locked in this state until all granted locks have been returned (Disposed).
            </summary>
            <param name="subject">The stateful object being locked</param>
            <param name="predicate">Indicates that subject is in the required state. Takes no arguments.</param>
            <param name="transition">Changes state of subject such that predicate returns true. A function taking no arguments and returning no value.</param>
            <param name="locked"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Script.StateLockManager.WaitForLock(Demo3D.Script.StateLockManager.LockArgs)">
            <summary>
            Suspend this thread and add it to the list of waiting threads
            </summary>
        </member>
        <member name="M:Demo3D.Script.StateLockManager.Unlock(Demo3D.Script.StateLockManager.StateLock)">
            <summary>
            Decrement the reference count on this lock. If it reaches zero, remove the lock 
            and wake up the next thread that wants to lock this subject
            </summary>
        </member>
        <member name="M:Demo3D.Script.StateLockManager.WakeNextThreadWaitingFor(System.Object)">
            <summary>
            Find next thread that is waiting for subject. If found, transition, lock and unsuspend the waiting thread, and then
            find all other threads that want to be in the same state. 
            </summary>
            <param name="subject"></param>
        </member>
        <member name="T:Demo3D.Script.WaitForEvent">
            <summary>
            Suspends thread until the boolean expression represented by node returns true
            </summary>
        </member>
        <member name="T:Demo3D.Script.WaitOnBooleanExpression">
            <summary>
            Suspends thread until the boolean expression represented by node returns true
            </summary>
        </member>
        <member name="M:Demo3D.Renderers.IRenderManager.FindSceneManager``1">
            <summary>
            Find an existing scene manager.
            </summary>
            <typeparam name="T">The type of scene manager to find</typeparam>
            <returns>The scene manager if found, otherwise null.</returns>
        </member>
        <member name="M:Demo3D.Renderers.IRenderManager.FindCreateSceneManager``1">
            <summary>
            Find an existing manager if one exists, otherwise creates one
            </summary>
            <typeparam name="T">The type of scene manager to find or create</typeparam>
            <returns>The found or created scene manager.</returns>
        </member>
        <member name="M:Demo3D.Renderers.IRenderManager.RemoveSceneManager``1">
            <summary>
            Remove and dispose of the scene manager.
            </summary>
        </member>
        <member name="P:Demo3D.Renderers.RenderManager.DynamicObjects">
            <summary>
            Render objects that arent part of the scene
            </summary>
        </member>
        <member name="P:Demo3D.Renderers.RenderManager.SyncView">
            <summary>
            Sync the cameras with the main view
            </summary>
        </member>
        <member name="T:Demo3D.Renderers.MeshRenderSyncObject">
            <summary>
            Sync between an <see cref="T:Demo3D.Renderers.Common.IRenderSceneObject" /> and a <see cref="P:Demo3D.Visuals.MeshObject.Mesh" />.
            </summary>
        </member>
        <member name="T:Demo3D.Newsfeed">
            <exclude />
        </member>
        <member name="F:Demo3D.SoftPLC.FrontPanel.SoftPlcViewer.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.SoftPLC.FrontPanel.SoftPlcViewer.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.SoftPLC.FrontPanel.SoftPlcViewer.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.Native.AsyncWaitTaskExtensions">
            <summary>
            A class for converting an <see cref="T:Demo3D.EventQueue.ITask" /> into something that can be awaited.
            </summary>
            <remarks>
            See <see cref="T:Demo3D.EventQueue.SystemTask" /> for the converse,
            and <see cref="T:Demo3D.Visuals.SynchronizationContextExtensions" /> for our SynchronizationContext.
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Native.AsyncWaitTaskExtensions.AwaiterForReusableITask">
            <summary>
            For ITask.IsCompleted that never return true.
            </summary>
            <remarks>
            <para>
            ITask.IsCompleted may never return true.  For example, ScriptReference is an ITask, but it doesn't return
            true because it's a task that's re-used.  It's as if the task completes, but only momentarily so that
            although it calls its on-completion actions, it's immediately "reset" and never returns true from
            IsCompleted.
            </para>
            <para>
            A System.Task, on the other hand, only ever represents one instance of an event.  So when the task completes
            it always returns true from IsCompleted and then calls its completion actions.  Users can expect and rely on
            this behaviour.
            </para>
            <para>
            This class works by returning false from IsCompleted until either the first completion is called, or until
            the underlying ITask.IsComplete returns true.  And thereafter it remains complete even if ITask.IsComplete
            returns false.
            </para>
            <para>
            Having said all that, we still use the simpler <see cref="T:Demo3D.Native.AsyncWaitTaskExtensions.Awaiter" /> struct below; it's simple and cheap,
            and I don't think anyone (yet) needs the strict behaviour that this class implements.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Native.AsyncWaitTaskExtensions.Awaiter">
            <exclude />
        </member>
        <member name="M:Demo3D.Native.AsyncWaitTaskExtensions.GetAwaiter(Demo3D.EventQueue.ITask)">
            <exclude />
        </member>
        <member name="T:Demo3D.Native.QuickLogicBreakpoint">
            <exclude />
            <summary>
            If a breakpoint has been set in the QuickScript window, immediately stops the model  and opens the relevant QuickScript window.
            If no breakpoint has been set, this class does nothing
            </summary>
        </member>
        <member name="T:Demo3D.Native.Breakpoint">
            <exclude />
        </member>
        <member name="T:Demo3D.Native.HiddenAttribute">
            <summary>
            Mark a CustomPropertyValue member as being a hidden custom property (in the user interface).
            </summary>
        </member>
        <member name="M:Demo3D.Native.HiddenAttribute.#ctor">
            <summary>
            Default constructor marks the custom property as Hidden by default.
            </summary>
        </member>
        <member name="M:Demo3D.Native.HiddenAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor to be explicit about whether the property is hidden or not.
            </summary>
            <param name="hidden">Custom property is hidden.</param>
        </member>
        <member name="P:Demo3D.Native.HiddenAttribute.Hidden">
            <summary>
            The state of whether the property is hidden.
            </summary>
        </member>
        <member name="T:Demo3D.Native.PersistentAttribute">
            <summary>
            Mark a CustomPropertyValue member as being a persistent custom property (it gets written to disk).
            If this is false then it is a temporary custom property.
            </summary>
        </member>
        <member name="M:Demo3D.Native.PersistentAttribute.#ctor">
            <summary>
            Default constructor marks the custom property as Persistent by default.
            </summary>
        </member>
        <member name="M:Demo3D.Native.PersistentAttribute.#ctor(System.Boolean)">
            <summary>
            Constructor to be explicit about whether the property is persistent or not.
            </summary>
            <param name="persistent">Custom property is persistent.</param>
        </member>
        <member name="P:Demo3D.Native.PersistentAttribute.Persistent">
            <summary>
            The state of whether the property is persistent.
            </summary>
        </member>
        <member name="T:Demo3D.Native.InitialExpressionAttribute">
            <summary>
            The expression used to initialize a custom property OnInitailize.
            </summary>
        </member>
        <member name="M:Demo3D.Native.InitialExpressionAttribute.#ctor(System.String)">
            <summary>
            Initialization expression.
            </summary>
            <param name="initialExpression">Expression to initialize custom property value with.</param>
        </member>
        <member name="P:Demo3D.Native.InitialExpressionAttribute.InitialExpression">
            <summary>
            Initialization expression.
            </summary>
        </member>
        <member name="T:Demo3D.Native.AutoGeneratedAttribute">
            <summary>
            Mark a CustomPropertyValue member as being an AutoGenerated property (<see cref="P:Demo3D.Utilities.CustomProperty.AutoGenerated" />).
            </summary>
        </member>
        <member name="M:Demo3D.Native.AutoGeneratedAttribute.#ctor(System.String)">
            <summary>
            Constructor to be explicit about whether the property is AutoGenerated or not.
            </summary>
            <param name="autoGenerated">Custom property is AutoGenerated.</param>
        </member>
        <member name="P:Demo3D.Native.AutoGeneratedAttribute.AutoGenerated">
            <summary>
            The state of whether the property is AutoGenerated.
            </summary>
        </member>
        <member name="T:Demo3D.Native.AccessRightsAttribute">
            <summary>
            Sets the access rights for the custom property (<see cref="P:Demo3D.Visuals.BindableItem.AllowedAccess" />).
            </summary>
        </member>
        <member name="P:Demo3D.Native.AccessRightsAttribute.AccessRights">
            <summary>
            The Access Rights for the Custom Property.
            </summary>
        </member>
        <member name="M:Demo3D.Native.AccessRightsAttribute.#ctor(Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Constructor to be explicit about the properties Access Rights.
            </summary>
            <param name="accessRights">The access rights.</param>
        </member>
        <member name="T:Demo3D.Native.IsBindingInterfaceAttribute">
            <summary>
            Mark a CustomPropertyValue member as being part of the binding interface (<see cref="P:Demo3D.Visuals.BindableItem.IsBindingInterface" />).
            </summary>
        </member>
        <member name="T:Demo3D.Native.BaseCustomPropertyValue">
            <summary>
            Base class for Native CustomProperty Values for generic setting of defaults regardless of type.
            </summary>
        </member>
        <member name="F:Demo3D.Native.BaseCustomPropertyValue.property">
            <exclude />
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.Name">
            <summary>
            Name of the custom property.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.Type">
            <summary>
            Type of the custom property value.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.Description">
            <summary>
            Description of the custom property.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.ReadOnly">
            <summary>
            Whether the custom property is read only.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.Hidden">
            <summary>
            Whether the custom property is hidden (from the user interface).
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.AutoGenerated">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.Category">
            <summary>
            Category of the custom property.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.AllowedAccess">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.BindingInterface">
            <summary>
            The Binding interface of the custom property.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.BindingName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.Persistent">
            <summary>
            Whether the custom property is persistent (gets written to disk) or is temporary (not written to disk).
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.CustomUnit">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.UpdatedScript">
            <summary>
            The script reference to listen to for updates to the custom property value.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.InitialExpression">
            <summary>
            The expression to initialize the custom property to OnInitialize.
            </summary>
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.TypeEnumName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.IsArray">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Native.BaseCustomPropertyValue.Value">
            <summary>
            The value of the custom property.
            </summary>
        </member>
        <member name="M:Demo3D.Native.BaseCustomPropertyValue.ToString">
            <summary>
            The value of the custom property converted to a string.
            </summary>
            <returns>The value of the custom property converted to a string.</returns>
        </member>
        <member name="M:Demo3D.Native.BaseCustomPropertyValue.op_Implicit(Demo3D.Native.BaseCustomPropertyValue)~Demo3D.Utilities.CustomProperty">
            <summary>
            Implicitly convert the custom property value container to the underlying CustomProperty object.
            </summary>
            <param name="p"></param>
        </member>
        <member name="T:Demo3D.Native.ICustomPropertyValue">
            <summary>
            Internal interface to expose the ValueChanged property on <see cref="T:Demo3D.Native.CustomPropertyValue`1" />
            </summary>
        </member>
        <member name="T:Demo3D.Native.CustomPropertyValue`1">
            <summary>
            Class to make it easier to have links to custom properties on the 
            NativeObject of a Visual. These are created as advanced if they don't already exist.
            </summary>
            <typeparam name="T">The type of the custom property value.</typeparam>
        </member>
        <member name="M:Demo3D.Native.CustomPropertyValue`1.#ctor(Demo3D.Utilities.CustomProperty)">
            <exclude />
        </member>
        <member name="M:Demo3D.Native.CustomPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Construct a CustomPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            </summary>
            <param name="v">The visual to find or create the custom property for.</param>
            <param name="propertyName">The name of the custom property.</param>
        </member>
        <member name="M:Demo3D.Native.CustomPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String,`0)">
            <summary>
            Construct a CustomPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            </summary>
            <param name="v">The visual to find or create the custom property for.</param>
            <param name="propertyName">The name of the custom property.</param>
            <param name="initialValue">The initial value of the custom property.</param>
        </member>
        <member name="E:Demo3D.Native.CustomPropertyValue`1.NativeListeners">
            <summary>
            Add blocking callback delegates to this event.
            </summary>
        </member>
        <member name="E:Demo3D.Native.CustomPropertyValue`1.NativeBlockingListeners">
            <summary>
            Add non-blocking callback delegates to this event (IEnumerable return type).
            </summary>
        </member>
        <member name="E:Demo3D.Native.CustomPropertyValue`1.NativeTaskListeners">
            <summary>
            Add async callback delegates to this event (async Task return type).
            </summary>
        </member>
        <member name="E:Demo3D.Native.CustomPropertyValue`1.ValueChanged">
            <summary>
            Event called when the custom property value changes.
            </summary>
        </member>
        <member name="E:Demo3D.Native.CustomPropertyValue`1.ValueChangedListeners">
            <exclude />
        </member>
        <member name="P:Demo3D.Native.CustomPropertyValue`1.Value">
            <summary>
            Get or set the custom property value.
            </summary>
        </member>
        <member name="M:Demo3D.Native.CustomPropertyValue`1.op_Implicit(Demo3D.Native.CustomPropertyValue{`0})~`0">
            <summary>
            Implicitly convert the custom property value container to the underlying type T.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Demo3D.Native.CustomPropertyValue`1.RefreshUnderlyingType">
            <summary>
            When using custom classes in C# within Demo3D Properties, make sure that we recreate the CustomProperty with
            the "new" type, and not the "old" one if possible.
            </summary>
            <remarks>This is currently experimental, don't use for the moment</remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Native.AdvancedPropertyValue`1">
            <summary>
            Class to make it easier to have links to advanced custom properties on the 
            NativeObject of a Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Native.AdvancedPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Construct an AdvancedPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            The property will be shown in the Advanced section of the property grid in the user interface.
            If a property alias exists which made a Simple property before, that property alias will be removed.
            </summary>
            <param name="v">The visual to find or create the advanced custom property for.</param>
            <param name="propertyName">The name of the advanced custom property.</param>
        </member>
        <member name="M:Demo3D.Native.AdvancedPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String,`0)">
            <summary>
            Construct an AdvancedPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            The property will be shown in the Advanced section of the property grid in the user interface.
            If a property alias exists which made a Simple property before, that property alias will be removed.
            </summary>
            <param name="v">The visual to find or create the advanced custom property for.</param>
            <param name="propertyName">The name of the advanced custom property.</param>
            <param name="initialValue">The initial value of the advanced custom property.</param>
        </member>
        <member name="T:Demo3D.Native.SimplePropertyValue`1">
            <summary>
            Class to make it easier to have links to simple custom properties on the 
            NativeObject of a Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Native.SimplePropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Construct an SimplePropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            The property will be shown in the Simple section of the property grid in the user interface.
            A property alias will be created for this property if it didn't already exist.
            </summary>
            <param name="v">The visual to find or create the simple custom property for.</param>
            <param name="propertyName">The name of the simple custom property.</param>
        </member>
        <member name="M:Demo3D.Native.SimplePropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String,`0)">
            <summary>
            Construct an SimplePropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            The property will be shown in the Simple section of the property grid in the user interface.
            A property alias will be created for this property if it didn't already exist.
            </summary>
            <param name="v">The visual to find or create the simple custom property for.</param>
            <param name="propertyName">The name of the simple custom property.</param>
            <param name="initialValue">The initial value of the simple custom property.</param>
        </member>
        <member name="T:Demo3D.Native.TemporaryPropertyValue`1">
            <summary>
            Class to make it easier to have links to temporary custom properties on the 
            NativeObject of a Visual.
            </summary>
        </member>
        <member name="M:Demo3D.Native.TemporaryPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Construct a TemporaryPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            This temporary custom property will not persist (not be saved to disk).
            </summary>
            <param name="v">The visual to find or create the temporary custom property for.</param>
            <param name="propertyName">The name of the temporary custom property.</param>
        </member>
        <member name="M:Demo3D.Native.TemporaryPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String,`0)">
            <summary>
            Construct a TemporaryPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is T.
            This temporary custom property will not persist (not be saved to disk).
            </summary>
            <param name="v">The visual to find or create the temporary custom property for.</param>
            <param name="propertyName">The name of the temporary custom property.</param>
            <param name="initialValue">The initial value of the temporary custom property.</param>
        </member>
        <member name="T:Demo3D.Native.CustomVisualPropertyValue`1">
            <summary>
            Class to make it easier to work with VisualReference custom properties.
            </summary>
            <typeparam name="T">Type of visual, e.g. ConveyorVisual, PhotoEye etc</typeparam>
        </member>
        <member name="M:Demo3D.Native.CustomVisualPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Construct a CustomVisualPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is a VisualReference.
            The VisualReference.Visual will be returned in the Visual property and cast to the type T derived from Visual.
            </summary>
            <param name="v">The visual to find or create the custom property for.</param>
            <param name="name">The name of the custom property.</param>
        </member>
        <member name="M:Demo3D.Native.CustomVisualPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String,Demo3D.Visuals.VisualReference)">
            <summary>
            Construct a CustomVisualPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is a VisualReference.
            The VisualReference.Visual will be returned in the Visual property and cast to the type T derived from Visual.
            </summary>
            <param name="v">The visual to find or create the custom property for.</param>
            <param name="name">The name of the custom property.</param>
            <param name="val">The initial visual reference to set the custom property value to.</param>
        </member>
        <member name="P:Demo3D.Native.CustomVisualPropertyValue`1.Visual">
            <summary>
            The Visual referred to by the custom property value visual reference.
            </summary>
        </member>
        <member name="T:Demo3D.Native.SimpleVisualPropertyValue`1">
            <summary>
            Class to make it easier to work with VisualReference simple properties.
            </summary>
            <typeparam name="T">Type of visual, e.g. ConveyorVisual, PhotoEye etc.</typeparam>
        </member>
        <member name="M:Demo3D.Native.SimpleVisualPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Construct a SimpleVisualPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is a VisualReference.
            The property will be shown in the Simple section of the property grid in the user interface.
            A property alias will be created for this property if it didn't already exist.
            The VisualReference.Visual will be returned in the Visual property and cast to the type T derived from Visual.
            </summary>
            <param name="v">The visual to find or create the simple custom property for.</param>
            <param name="name">The name of the simple custom property.</param>
        </member>
        <member name="M:Demo3D.Native.SimpleVisualPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String,Demo3D.Visuals.VisualReference)">
            <summary>
            Construct a SimpleVisualPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is a VisualReference.
            The property will be shown in the Simple section of the property grid in the user interface.
            A property alias will be created for this property if it didn't already exist.
            The VisualReference.Visual will be returned in the Visual property and cast to the type T derived from Visual.
            </summary>
            <param name="v">The visual to find or create the simple custom property for.</param>
            <param name="name">The name of the simple custom property.</param>
            <param name="val">The initial visual reference to set the simple custom property value to.</param>
        </member>
        <member name="P:Demo3D.Native.SimpleVisualPropertyValue`1.Visual">
            <summary>
            The Visual referred to by the simple custom property value visual reference.
            </summary>
        </member>
        <member name="T:Demo3D.Native.TemporaryVisualPropertyValue`1">
            <summary>
            Class to make it easier to work with VisualReference temporary properties.
            </summary>
            <typeparam name="T">Type of visual, e.g. ConveyorVisual, PhotoEye etc.</typeparam>
        </member>
        <member name="M:Demo3D.Native.TemporaryVisualPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String)">
            <summary>
            Construct a TemporaryVisualPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is a VisualReference.
            The VisualReference.Visual will be returned in the Visual property and cast to the type T derived from Visual.
            </summary>
            <param name="v">The visual to find or create the temporary custom property for.</param>
            <param name="name">The name of the temporary custom property.</param>
        </member>
        <member name="M:Demo3D.Native.TemporaryVisualPropertyValue`1.#ctor(Demo3D.Visuals.Visual,System.String,Demo3D.Visuals.VisualReference)">
            <summary>
            Construct a TemporaryVisualPropertyValue for a given visual and custom property name.
            This will create the custom property if it doesn't exist and ensure the type of the value is a VisualReference.
            The VisualReference.Visual will be returned in the Visual property and cast to the type T derived from Visual.
            </summary>
            <param name="v">The visual to find or create the temporary custom property for.</param>
            <param name="name">The name of the temporary custom property.</param>
            <param name="val">The initial visual reference to set the simple custom property value to.</param>
        </member>
        <member name="P:Demo3D.Native.TemporaryVisualPropertyValue`1.Visual">
            <summary>
            The Visual referred to by the temporary custom property value visual reference.
            </summary>
        </member>
        <member name="T:Demo3D.Native.NamespaceDoc">
            <summary>
            The Demo3D.Native namespace contains functionality for making it easier to create C# script methods for handling Demo3D events.
            </summary>
            <remarks>
            All classes and methods documented here are intended for use in user scripting.
            </remarks>
        </member>
        <member name="T:Demo3D.Native.Wait">
            <summary>
            Collection of static methods used to suspend C# coroutines (IEnumerable methods) until an event occurs.
            Each of these should be preceded by a 'yield return' statement in C# inside a coroutine.
            </summary>
        </member>
        <member name="M:Demo3D.Native.Wait.ForSeconds(System.Double)">
            <summary>
            Suspend coroutine for a given time.
            </summary>
            <param name="time">Time to suspend for.</param>
            <returns>A task representing the wait time.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvent(Demo3D.Visuals.ScriptReference)">
            <summary>
            Suspend coroutine until a given script event fires.
            </summary>
            <param name="script">Script event to suspend until it fires.</param>
            <returns>A task representing the wait for event.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvent(Demo3D.Visuals.ScriptReference,Demo3D.Visuals.ScriptReference.NativeListenersDelegate)">
            <summary>
            Suspend coroutine until a given script event fires.
            </summary>
            <param name="script">Script event to suspend until it fires.</param>
            <param name="listener">Delegate to fire when the script even fires.</param>
            <returns>A task representing the wait for event.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvent``1(Demo3D.Visuals.ScriptReference{``0},Demo3D.Visuals.ScriptReference{``0}.NativeListenersDelegate)">
            <summary>
            Suspend coroutine until a given script event fires.
            </summary>
            <param name="script">Script event to suspend until it fires.</param>
            <param name="listener">Delegate to fire when the script even fires.</param>
            <returns>A task representing the wait for event.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvent``2(Demo3D.Visuals.ScriptReference{``0,``1},Demo3D.Visuals.ScriptReference{``0,``1}.NativeListenersDelegate)">
            <summary>
            Suspend coroutine until a given script event fires.
            </summary>
            <param name="script">Script event to suspend until it fires.</param>
            <param name="listener">Delegate to fire when the script even fires.</param>
            <returns>A task representing the wait for event.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvent``3(Demo3D.Visuals.ScriptReference{``0,``1,``2},Demo3D.Visuals.ScriptReference{``0,``1,``2}.NativeListenersDelegate)">
            <summary>
            Suspend coroutine until a given script event fires.
            </summary>
            <param name="script">Script event to suspend until it fires.</param>
            <param name="listener">Delegate to fire when the script even fires.</param>
            <returns>A task representing the wait for event.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvent``4(Demo3D.Visuals.ScriptReference{``0,``1,``2,``3},Demo3D.Visuals.ScriptReference{``0,``1,``2,``3}.NativeListenersDelegate)">
            <summary>
            Suspend coroutine until a given script event fires.
            </summary>
            <param name="script">Script event to suspend until it fires.</param>
            <param name="listener">Delegate to fire when the script even fires.</param>
            <returns>A task representing the wait for event.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForAnimator(Demo3D.Visuals.Visual)">
            <summary>
            Suspend coroutine until the current animator for a visual completes.
            </summary>
            <param name="visual">Visual to wait for animation completion for.</param>
            <returns>A task representing the wait for animation completion.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForMove(Demo3D.Visuals.Visual)">
            <summary>
            Suspend coroutine until the current visual move to completes.
            </summary>
            <param name="visual">Visual to wait for move completion for.</param>
            <returns>A task representing the wait for move completion.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilTrue(Demo3D.Native.CustomPropertyValue{System.Boolean})">
            <summary>
            Suspend coroutine until the boolean custom property value becomes true.
            </summary>
            <param name="booleanProperty">Custom property to suspend until true for.</param>
            <returns>A task representing the wait for move custom property value to become true.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilFalse(Demo3D.Native.CustomPropertyValue{System.Boolean})">
            <summary>
            Suspend coroutine until the boolean custom property value becomes false.
            </summary>
            <param name="booleanProperty">Custom property to suspend until false for.</param>
            <returns>A task representing the wait for move custom property value to become false.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilEquals``1(Demo3D.Native.CustomPropertyValue{``0},``0)">
            <summary>
            Suspend coroutine until a custom property value becomes equal to a given value.
            </summary>
            <param name="property">Custom property to suspend until value is set.</param>
            <param name="value">Value to suspend until equal to.</param>
            <returns>A task representing the wait for custom property value to become equal to the given value.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilEquals``1(Demo3D.Native.CustomPropertyValue{``0},Demo3D.Native.CustomPropertyValue{``0})">
            <summary>
            Suspend coroutine until a custom property value becomes equal to another custom property value.
            </summary>
            <param name="property1">Custom property to suspend until value is set to given value.</param>
            <param name="property2">Custom property value to suspend until equal to.</param>
            <returns>A task representing the wait for custom property value to become equal to another custom property value.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilNotEquals``1(Demo3D.Native.CustomPropertyValue{``0},``0)">
            <summary>
            Suspend coroutine until a custom property value becomes not equal to a given value.
            </summary>
            <param name="property">Custom property to suspend until value is not set to given value.</param>
            <param name="value">Value to suspend until not equal to.</param>
            <returns>A task representing the wait for custom property value to become not equal to the given value.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilNotEquals``1(Demo3D.Native.CustomPropertyValue{``0},Demo3D.Native.CustomPropertyValue{``0})">
            <summary>
            Suspend coroutine until a custom property value becomes not equal to another custom property value.
            </summary>
            <param name="property1">Custom property to suspend until value is not set to given value.</param>
            <param name="property2">Custom property value to suspend until not equal to.</param>
            <returns>A task representing the wait for custom property value to become not equal to another custom property value.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilTrue(System.Func{System.Boolean},System.ComponentModel.INotifyPropertyChanged[])">
            <summary>
            Suspend coroutine until the supplied expression is true.
            </summary>
            <param name="expression">Expression to suspend until true.</param>
            <param name="observables">Collection of INotifyPropertyChanged objects to re-evaluate the expression for when they change.</param>
            <returns>A task representing the wait for expression to become true.</returns>
            <example>
            <code lang="C#" source="Examples\Demo3D.Native.cs" region="WaitUntilTrue" />
            </example>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilFalse(System.Func{System.Boolean},System.ComponentModel.INotifyPropertyChanged[])">
            <summary>
            Suspend coroutine until the supplied expression is false.
            </summary>
            <param name="expression">Expression to suspend until false.</param>
            <param name="observables">Collection of INotifyPropertyChanged objects to re-evaluate the expression for when they change.</param>
            <returns>A task representing the wait for expression to become false.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilChanged(System.Func{System.Object},System.ComponentModel.INotifyPropertyChanged[])">
            <summary>
            Suspend coroutine until the supplied expression changes.
            </summary>
            <param name="expression">Expression to suspend until change.</param>
            <param name="observables">Collection of INotifyPropertyChanged objects to re-evaluate the expression for when they change.</param>
            <returns>A task representing the wait for expression to change.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForWrite``1(Demo3D.EventQueue.IChannel{``0},``0)">
            <summary>
            Suspend coroutine until the channel can accept the write.
            </summary>
            <typeparam name="T">Type of element in channel.</typeparam>
            <param name="channel">The channel to wait until not full.</param>
            <param name="obj">The object to add to the channel.</param>
            <returns>A task representing the wait for channel write to complete.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForRead``1(Demo3D.EventQueue.IChannel{``0})">
            <summary>
            Suspend coroutine until the channel has an element that can be read.
            </summary>
            <typeparam name="T">Type of element in channel.</typeparam>
            <param name="channel">The channel to wait until not empty.</param>
            <returns>A future result value that will receive the element from the channel.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForRead``1(Demo3D.EventQueue.IChannel{``0},Demo3D.Native.Result{``0})">
            <summary>
            Suspend coroutine until the channel has an element that can be read.
            </summary>
            <typeparam name="T">Type of element in channel.</typeparam>
            <param name="channel">The channel to wait until not empty.</param>
            <param name="result">The future result to set the value for once the read is complete.</param>
            <returns>A task representing the wait for channel read to complete.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForPeek``1(Demo3D.EventQueue.IChannel{``0})">
            <summary>
            Suspend coroutine until the channel has an element that can be read, but don't read it, just peek.
            </summary>
            <typeparam name="T">Type of element in channel.</typeparam>
            <param name="channel">The channel to wait until not empty.</param>
            <returns>A future result value that will receive the peeked element from the channel.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForPeek``1(Demo3D.EventQueue.IChannel{``0},Demo3D.Native.Result{``0})">
            <summary>
            Suspend coroutine until the channel has an element that can be read, but don't read it, just peek.
            </summary>
            <typeparam name="T">Type of element in channel.</typeparam>
            <param name="channel">The channel to wait until not empty.</param>
            <param name="result">The future result to set the value for once the peek is complete.</param>
            <returns>A task representing the wait for channel peek to complete.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForAny(System.Object[])">
            <summary>
            Suspend coroutine until any of the supplied tasks to complete.
            As soon as one of the wait tasks completes this task completes.
            </summary>
            <param name="waits">Array of suspended coroutines.</param>
            <returns>A task representing the wait for any tasks to complete.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForAll(System.Object[])">
            <summary>
            Suspend coroutine until all of the supplied tasks to complete.
            This task will not complete until all the supplied wait tasks complete.
            </summary>
            <param name="waits">Array of suspended coroutines.</param>
            <returns>A task representing the wait for all tasks to complete.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ToTasks(System.Object[])">
            <summary>
            D-7419 Convert ScriptReferences to ITasks using Wait.ForEvent since
            they no longer implement ITask.
            </summary>
            <param name="waits">Objects to convert to ITask.</param>
            <returns>Array of ITask objects.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvents(Demo3D.Visuals.ScriptReference[])">
            <summary>
            Suspend coroutine until all of the script events fire.
            </summary>
            <param name="scripts">Array of script events to wait for.</param>
            <returns>A task representing the wait for all script events to fire.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvents(System.Double,Demo3D.Visuals.ScriptReference[])">
            <summary>
            Suspend coroutine until all of the script events fire or a timeout occurs.
            </summary>
            <param name="timeout">Timeout to wait for events to fire.</param>
            <param name="scripts">Array of script events to wait for.</param>
            <returns>A task representing the wait for all script events to fire.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.ForEvent(System.Double,Demo3D.Visuals.ScriptReference)">
            <summary>
            Suspend coroutine until the script event fires or a timeout occurs.
            </summary>
            <param name="timeout">Timeout to wait for events to fire.</param>
            <param name="script">Script event to wait for.</param>
            <returns>A task representing the wait for script event to fire.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.For(Demo3D.EventQueue.ITask)">
            <summary>
            Suspend coroutine until another task completes.
            </summary>
            <param name="task">Task to wait for.</param>
            <returns>A task representing the wait for the other task.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.For(Demo3D.Visuals.ScriptReference)">
            <summary>
            <para>Use <see cref="M:Demo3D.Native.Wait.ForEvent(Demo3D.Visuals.ScriptReference)" /> instead.</para>
            Suspend coroutine until a given script event fires.
            </summary>
            <param name="script">Script event to suspend until it fires.</param>
            <returns>A task representing the wait for event.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.For(System.Double,Demo3D.EventQueue.ITask)">
            <summary>
            Suspend coroutine until another task completes or there is a timeout.
            </summary>
            <param name="timeout">Timeout to wait for.</param>
            <param name="task">Task to wait for.</param>
            <returns>A task representing the wait for the other task or timeout.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.For(System.Double,Demo3D.Visuals.ScriptReference)">
            <summary>
            <para>Use <see cref="M:Demo3D.Native.Wait.ForEvent(System.Double,Demo3D.Visuals.ScriptReference)" /> instead.</para>
            Suspend coroutine until a given script event fires or there is a timeout.
            </summary>
            <param name="timeout">Timeout to wait for.</param>
            <param name="script">Script event to suspend until it fires.</param>
            <returns>A task representing the wait for event or timeout.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilTrue(System.Func{System.Boolean})">
            <summary>
            Use <see cref="M:Demo3D.Native.Wait.UntilTrue(System.Func{System.Boolean},System.ComponentModel.INotifyPropertyChanged[])" /> instead.
            </summary>
            <param name="expression">Expression to suspend until true.</param>
            <returns>A task representing the wait for expression to become true.</returns>
        </member>
        <member name="M:Demo3D.Native.Wait.UntilChanged(System.Func{System.Object})">
            <summary>
            Use <see cref="M:Demo3D.Native.Wait.UntilChanged(System.Func{System.Object},System.ComponentModel.INotifyPropertyChanged[])" /> instead.
            </summary>
            <param name="expression">Expression to suspend until change.</param>
            <returns>A task representing the wait for expression to change.</returns>
        </member>
        <member name="T:Demo3D.Native.NativeDispatcher">
            <summary>
            For use in unit tests that don't have access to Native.Wait.Dispatcher
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Native.TaskExt">
            <summary>
            ITask extension methods that allow further customization when the event should fire or whether it should be canceled.
            </summary>
        </member>
        <member name="M:Demo3D.Native.TaskExt.ForNoLongerThan(Demo3D.EventQueue.ITask,Demo3D.EventQueue.Fixed)">
            <summary>
            Throw an exception if the task takes longer than the timeout.
            </summary>
            <param name="task">The task to time.</param>
            <param name="timeout">The timeout.</param>
            <returns>A new task that will complete if the original task completes or throw an exception if the it doesn't complete before the timeout expires.</returns>
        </member>
        <member name="M:Demo3D.Native.TaskExt.IfTimeout(Demo3D.EventQueue.ITask,System.Action)">
            <summary>
            Add an action to be called if a task throws an exception due to a timeout.
            </summary>
            <param name="task">Task to watch for timeout.</param>
            <param name="action">Action to call if timeout happens.</param>
            <returns>A new task that will call the action if the original action times out.</returns>
        </member>
        <member name="M:Demo3D.Native.TaskExt.Launch``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.IEnumerable})">
            <exclude />
        </member>
        <member name="M:Demo3D.Native.TaskExt.Sequence``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.IEnumerable})">
            <exclude />
        </member>
        <member name="T:Demo3D.Native.TimeoutCatcher">
            <exclude />
        </member>
        <member name="T:Demo3D.Native.Result`1">
            <summary>
            Return a future result value from a C# coroutine (IEnumerable method).
            </summary>
            <typeparam name="T">The type of the future value.</typeparam>
        </member>
        <member name="P:Demo3D.Native.Result`1.Value">
            <summary>
            The future value.
            </summary>
        </member>
        <member name="M:Demo3D.Native.Result`1.GetResult">
            <exclude />
        </member>
        <member name="M:Demo3D.Native.Result`1.SetResult(`0)">
            <exclude />
        </member>
        <member name="M:Demo3D.Native.Result`1.op_Implicit(Demo3D.Native.Result{`0})~`0">
            <summary>
            Implicit conversion from Result.Value to value.
            </summary>
            <param name="v"></param>
        </member>
        <member name="T:Demo3D.Native.ResultExt">
            <exclude />
        </member>
        <member name="M:Demo3D.Simulation.LinearConveyorMoveSimulator.ValidateAdjacentConveyor(Demo3D.Visuals.ConveyorVisual,System.Collections.Generic.List{Demo3D.Visuals.Connector},System.String@)">
            <summary>
            Validates whether the adjacent conveyor will support path merging. This currently checks the number of connections of the current conveyor and whether the adjacent conveyor is connected via a start/end connector.
            </summary>
            <returns>Returns the adjacent conveyor if it passes validation, otherwise null.</returns>
            <remarks>Also sets the adjacentConvConnector value.</remarks>
        </member>
        <member name="M:Demo3D.Simulation.LinearConveyorMoveSimulator.GetLoadPositions(Sim3D.Load[],Demo3D.EventQueue.Fixed)">
            <summary>
            Calculates the position of loads and clears the load's current simulation state before returning the list of load visuals and positions.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.LinearConveyorMoveSimulator.AddAdjacentLoads(System.Collections.Generic.List{System.Tuple{Demo3D.Visuals.Visual,Demo3D.EventQueue.Fixed}},Demo3D.EventQueue.Fixed,System.Boolean,Demo3D.Visuals.ConveyorVisual,System.Boolean,Demo3D.Visuals.ConveyorVisual,Demo3D.EventQueue.Fixed)">
            <summary>
            Add all loads that were on adjacent paths, to the scene to process them to the correct move visual now that paths have been merged.
            </summary>
            <param name="loadPositions">The list of loads that belonged to the adjacent path prior to being merged.</param>
            <param name="adjacentConvPosition">The position of the adjacent conveyor's boundary with the current conveyor.</param>
            <param name="isAdjacentConvForwards">The direction of the adjacent conveyor.</param>
            <param name="adjacentConv">The adjacent conveyor.</param>
            <param name="isAdjConvNext">True if the adjacent conveyor is Conv.Next. False if it is Conv.Prev.</param>
            <param name="Conv">The current conveyor that.</param>
            <param name="convEndPosition">The current conveyor's end position.</param>
            <remarks>The last two parameters may not be needed if those assertions are never hit.</remarks>
            <remarks>I have to pass in Conv because otherwise this.Conv would potentially flag an error as it is seemingly set to null when paths are recreated. TODO: Check if this is intentional.</remarks>
        </member>
        <member name="M:Demo3D.Simulation.LinearConveyorMoveSimulator.CalculateSize(Demo3D.Visuals.Visual)">
            avoid garbage collection (not threadsafe)
        </member>
        <member name="M:Demo3D.Simulation.LinearConveyorMoveSimulator.IsLinearPhysicsSupported(Demo3D.Visuals.ConveyorVisual)">
            <summary>
            Is the conveyor supported in Linear Physics?
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.LinearConveyorMoveSimulator.CreatePathMoveSimulator(Demo3D.Visuals.Document,Demo3D.Visuals.ConveyorVisual)">
            <summary>
            Find all conveyor paths that start with an unconnected conveyor.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.LinearConveyorMoveSimulator.GetOwningConveyorForSensor(Demo3D.Visuals.Visual)">
            <summary>
            The parent conveyor is considered to be the owning conveyor (D-8301).
            If not owned by a conveyor then Pick down to find the closest StraightConveyorVisual
            </summary>
            <param name="sensor">The sensor to find the owning conveyor for.</param>
            <returns>The conveyor that owns this sensor, or is directly below, or null if not owned by a conveyor or directly over a conveyor.</returns>
        </member>
        <member name="T:Demo3D.Simulation.EventPoint">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Simulation.SimulationState">
            <summary>
            State we need in order to simulate a load
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Simulation.SimulationState.owner">
            <summary>
            The visual that owns this simulation state
            </summary>
        </member>
        <member name="P:Demo3D.Simulation.SimulationState.Offset">
            <summary>
            Offset from move visual axis (for conveyor center offset)
            </summary>
        </member>
        <member name="P:Demo3D.Simulation.SimulationState.SpeedRatio">
            <summary>
            The ratio of the movement visual speed (for curve conveyors)
            </summary>
        </member>
        <member name="F:Demo3D.Simulation.SimulationState.IsVehicle">
            <summary>
            Remember whether a vehicle or load.
            </summary>
        </member>
        <member name="F:Demo3D.Simulation.SimulationState.DependantVisuals">
            <summary>
            Loads who are blocked by, or will be blocked by, this visual.
            </summary>
        </member>
        <member name="F:Demo3D.Simulation.SimulationState.PotentialDependantVisuals">
            <summary>
            List of loads behind a load which might be dependant
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.GetAllDependantVisuals">
            <summary>
            Get all dependant visuals as an IEnumerable sequence
            </summary>
            <returns>All dependant visuals IEnumerable</returns>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.GetAllDependantVisuals(System.Collections.Generic.List{Demo3D.Visuals.Visual}@)">
            <summary>
            Get all dependant visuals as a List 
            </summary>
            <param name="dependantVisuals">List to populate</param>
        </member>
        <member name="F:Demo3D.Simulation.SimulationState.blockingVisual">
            <summary>
            The visual which is blocking, or will next block, this visual.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.UpdateDependantVisuals">
            <summary>
            Update the moves of any dependant visuals.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.ClearDependantVisualsIsTouchingBlockingVisual">
            <summary>
            Tell dependant Visuals that they are not touching anymore
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.ClearDependantVisuals(System.Boolean)">
            <summary>
            Physics removed for visual.
            </summary>
        </member>
        <member name="P:Demo3D.Simulation.SimulationState.Speed">
            <summary>
            The slowest speed of anything blocking the load currently.
            </summary>
        </member>
        <member name="F:Demo3D.Simulation.SimulationState.BottomLocation">
            <summary>
            Rectangular base of load which is most closely aligned to moveSimulator surface.
            </summary>
        </member>
        <member name="P:Demo3D.Simulation.SimulationState.MoveThread">
            <summary>
            The thread that is animating the load. A transfer component will have to abort this thread
            and replace it with another, for example.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.SetMoveVisual(Demo3D.Visuals.Visual)">
            <summary>
            Change MoveVisual to supplied visual, and save a copy of previous visual into LastMoveVisual
            </summary>
            <param name="visual">New MoveVisual</param>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.OverwriteMoveVisual(Demo3D.Visuals.Visual)">
            <summary>
            Change MoveVisual to supplied visual, but do not save copy of previous visual into LastMoveVisual
            </summary>
            <param name="visual">New MoveVisual</param>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.OverwriteLastMoveVisual(Demo3D.Visuals.Visual)">
            <summary>
            Change LastMoveVisual to supplied visual
            </summary>
            <param name="visual">New MoveVisual</param>
        </member>
        <member name="M:Demo3D.Simulation.SimulationState.#ctor">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Simulation.LoadScriptThread">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Base implementation for simulation threads that animate loads. Derived classes assign
            methods to NextStatement in order to advance through a sequence of operations, so allowing
            the thread to be suspended as for normal scripting.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Simulation.MoveSimulator">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            MoveSimulator takes control of a load for a particular component. Every visual has MoveSimulator, which collects loads
            for animation and onward transfer.
            
            I would like to rename this class "SimulationController"
            
            A typical sequence of operations
            1. Load is added to MoveSimulator with AddLoad()
            2. MoveSimulator performs MoveTo operations on Load
            3. MoveSimulator transfers load to next MoveSimulator (step 1 for the next MoveSimulator)
            
            A load has a SimulationState instance which is used by the MoveSimulator to track the load through its animation.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.AttachTo(Demo3D.Visuals.Visual)">
            <summary>
            Should only be called from Visual.set_MoveSimulator.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.ClearMoveThread(Demo3D.Visuals.Visual)">
            <summary>
             Kill the current move thread for this load (in this implementation, it's an instance of ConveyLoadScript) 
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.UpdateLoadMovesFor(Demo3D.Visuals.Visual)">
            <summary>
            Safe wrapper for UpdateLoadMoves avoiding null references
            </summary>
            <param name="load">Load to call UpdateLoadMoves for</param>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.UpdateLoadMovesFor(Demo3D.Visuals.Visual[])">
            <summary>
            Call UpdateLoadMovesFor for all of the supplied loads
            </summary>
            <param name="loads">Array of loads to call UpdateLoadMovesFor with</param>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.UpdateLoadMovesForFiltered(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            UpdateLoadMovesFor, but ignoring if we match the load to ignore
            </summary>
            <param name="load">Load to call UpdateLoadMoves for</param>
            <param name="ignore">Load to filter out</param>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.UpdateLoadMovesForFiltered(Demo3D.Visuals.Visual[],Demo3D.Visuals.Visual)">
            <summary>
            UpdateLoadMovesFor, but ignoring if we match the load to ignore
            </summary>
            <param name="loads">Array of loads to call UpdateLoadMovesForFiltered with</param>
            <param name="ignore">Load to filter out</param>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.UpdateLoadMovesForOldDependants(Demo3D.Visuals.Visual)">
            <summary>
            Call UpdateLoadMoves for visuals' old dependants (telling them that something may have changed in front of them)
            </summary>
            <param name="visual">Visual that has changed</param>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.UpdateLoadMovesForNonBlockedPotentialDependants(Demo3D.Visuals.Visual)">
            <summary>
            Call UpdateLoadMoves for visuals' non-blocked potential dependants (telling them that something may have changed in front of them)
            </summary>
            <param name="visual">Visual that has changed</param>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.ClearLoads(Demo3D.Visuals.ISensor)">
            <summary>
            Disable the physics for a sensor and clear all the blocking loads.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.BlockLoads(Demo3D.Visuals.Visual)">
            <summary>
            Collide with future load simulation windows and update any affected loads.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.SortPoints(System.Collections.Generic.List{Demo3D.Simulation.EventPoint},System.Boolean)">
            <summary>
            Sort points using lambda expression in separate method for debugging Edit and Continue.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.UpdatePhysicsBottom(Demo3D.Visuals.Visual,Microsoft.DirectX.Vector3)">
            <summary>
            Get the local position and normal of the center of the face on the 
            physics bounding box that is most closely aligned with the world surface normal.
            This is used for aligning loads with conveyors or the floor.
            </summary>
        </member>
        <member name="F:Demo3D.Simulation.MoveSimulator.sp">
            avoid garbage collection (not threadsafe)
        </member>
        <member name="M:Demo3D.Simulation.MoveSimulator.GetBlockBox(Demo3D.Visuals.IPositionProvider,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            avoid garbage collection (not threadsafe)
        </member>
        <member name="M:Demo3D.Simulation.MoveLoadScript.NextCollision">
            <summary>
            Call CollideWith for each event point that is registered for this load
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.MoveLoadScript.HandleCollision">
            <summary>
            Continuation method for CollideWith that calls the custom collision handler. As long
            as the handler didn't cancel the events, we resume with NextCollision.
            </summary>
        </member>
        <member name="T:Demo3D.Simulation.MoveSimulatorAspect">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Simulation.PathVisualSimulator">
            <exclude />
        </member>
        <member name="T:Demo3D.Simulation.EnterConveyorEventPoint">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.MotorVisualChanged(System.Object,Demo3D.Visuals.VisualReference,Demo3D.Visuals.VisualReference)">
            <summary>
            Delegate called when MotorVisual is changed
            </summary>
            <param name="Instance">ConveyorProperties that were changed</param>
            <param name="oldValue">Old MotorVisual VisualReference</param>
            <param name="newValue">New MotorVisual VisualReference</param>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.SyncMotorListeners">
            <summary>
            Update Listeners on motor if the Motor Visual has changed
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.UpdateLoadMoves(Demo3D.Visuals.Visual)">
            <summary>
            Something changed (eg motor switched on or off); tear down all current moves and recalculate, and then tell upstream conveyors about it.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.UpdateVehicleMoves(Demo3D.Visuals.PhysicsObject)">
            <summary>
            Something changed (eg motor switched on or off); tear down all current moves and recalculate, and then tell upstream conveyors about it.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.VehicleSpeedProfileUpdated(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The Tracking SpeedProfile has changed in some way so recalculate the vehicle movement.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.TrackConveyor">
            <summary>
            Take control of movement of conveyor when doing lift or tilt.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.ConveyLoad(Demo3D.Visuals.Visual)">
            <summary>
            Take control of the movement of this load
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.TryBlockLoad(Demo3D.Simulation.EventPoint)">
            <summary>
            Expecting a blocker at this point but recalculate event points before blocking.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.SeparateLoad(Demo3D.Simulation.EventPoint)">
            <summary>
            Expecting a blocker at this point but recalculate event points before blocking.
            </summary>
        </member>
        <member name="F:Demo3D.Simulation.PlanarConveyorMoveSimulator.stack">
            <summary>
            Accumulation handling stack.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.BlockingVisualSpeedChange(Demo3D.Visuals.Visual)">
            <summary>
            Insert a TryBlock event when the blocking visual changes speed to the point where it will block this load.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.DropOffLoad(Demo3D.Simulation.EventPoint)">
            <summary>
            Lift lowers and drops loads to conveyor below.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.PickUpLoad(Demo3D.Simulation.EventPoint)">
            <summary>
            Lift raises and picks up a load from conveyor above.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.NeverIntersect(Demo3D.Visuals.ConveyorVisual,Demo3D.Visuals.Visual,Demo3D.Visuals.Visual,System.Boolean)">
            <summary>
            Will load intersect blocker?
            </summary>
            <param name="conv">Conveyor load is currently on</param>
            <param name="load">This load</param>
            <param name="blocker">Blocking visual (e.g. load / sensor)</param>
            <param name="fullCheck">Do a full 2D bounding box check</param>
            <returns>True if load and blocker can never intersect, false if they might</returns>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.AttachedConveyor(Demo3D.Visuals.Visual)">
            <summary>
            Get conveyor that load is associated with
            </summary>
            <param name="load">Load to Check</param>
            <returns>Conveyor it is associated with</returns>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.IsMovementForwards(Demo3D.Visuals.Visual)">
            <summary>
            Given a visual, determine if it will be moving forwards (increasing "position"), or backwards (decreasing "position")
            along the conveyor surface
            
            If object is not tracking, then we defer to the conveyor, if object is tracking, we use it's information
            </summary>
            <param name="visual">Load/Vehicle</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Simulation.PlanarConveyorMoveSimulator.ConveyLoadScript.CollideWith(Demo3D.Simulation.EventPoint)">
            <summary>
            Move the load to the collide point, and then call the custom handler. The custom handler
            is called by HandleCollision after the move has been completed.
            </summary>
        </member>
        <member name="F:Demo3D.Simulation.PlanarConveyorPositionAnimator.lastTimeDelta">
            <summary>
            The value of the time delta the last time UpdateMatrix was called.
            </summary>
        </member>
        <member name="T:Demo3D.Simulation.GeneralPusherMoveSimulator">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Simulation of a pusher using a generic visual. Tested with PusherVisual and BoxVisual.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Simulation.GeneralPusherMoveSimulator.PushSpeed">
            <summary>
            Overriden by PusherMoveSimulator to dynamically obtain speed
            </summary>
        </member>
        <member name="P:Demo3D.Simulation.GeneralPusherMoveSimulator.PushTarget">
            <summary>
            Overriden by PusherMoveSimulator to dynamically obtain target
            </summary>
        </member>
        <member name="T:Demo3D.Simulation.GeneralPusherMoveSimulator.PositionProvider">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            For non-PusherVisuals (which already implement IPositionProvider). Maps position space (which is 2D, with X in direction of travel)
            into 3D space. PositionAxis represents the direction of travel, and SideAxis is orthogonal with PositionAxis and local [0,1,0] (a 
            reasonable assumption).
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Simulation.PusherMoveSimulator">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Simulation.SceneMoveSimulator">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Simulation.SceneMoveSimulator.SetFloorSimulationWindow(Demo3D.Visuals.Visual,Demo3D.Visuals.Visual)">
            <summary>
            Sets a bounding box shaped (but just extruded along its world bottom normal) simulation window to the floor
            based on the current velocity of the object (i.e. from the centre of the top of the object to the point it
            will hit the floor)
            </summary>
            <param name="load">Visual to project simulation window for</param>
            <param name="fallToVisual">Visual to project simulation window to (if null, then the floor)</param>
        </member>
        <member name="M:Demo3D.Simulation.SceneMoveSimulator.SetCompleteFloorSimulationWindow(Demo3D.Visuals.Visual)">
            <summary>
            Sets a simulation window to the floor which contains the entire path of the object
            based on the current velocity of the object (basically, the union of the object aligned
            bounding box where it is now, with the object aligned bounding box at the postion it
            hits the floor)
            </summary>
            <param name="load"></param>
        </member>
        <member name="T:Demo3D.Simulation.SimulationLoadAspect">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Simulation.SimulationLoadAspect.SimulationLoad">
            <summary>
            Only set if the load is on a simulation optimized path.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.SimulationLoadAspect.ClearSimulationLoad">
            <summary>
            Clear the simulation load and cancel any associated moves.
            </summary>
        </member>
        <member name="M:Demo3D.Simulation.SimulationLoadAspect.UpdateSimulationLoadSize">
            <summary>
            Update the Size field on SimulationLoad.
            </summary>
            <returns>'true' if the Size changed.</returns>
        </member>
        <member name="T:Demo3D.NamespaceGroupDoc">
            <summary>
            <h2>Welcome to the Demo3D Scripting API Reference.</h2>
            <para>
            This section of the documentation contains details of the scripting API that Demo3D provides.
            To use this information, you should be familiar with the basic theory and practice of scripting
            in Demo3D which is explained in the 
            <a href="http://www.sim3d.com/help2019/Demo3D/#pageid=scripting" target="_blank">JScript Scripting</a> and
            <a href="http://www.sim3d.com/help2019/Demo3D/#pageid=native_scripting" target="_blank">C# Scripting</a> sections of the
            <a href="http://www.sim3d.com/help2019/Demo3D/" target="_blank">Online Manual</a>.
            </para>
            <para>
            The scripting reference is organized according to the classes available to scripts which are described
            along with their methods, properties and any other information relevant to their use.
            </para>
            <para>
            The example code can be viewed in either C# and in some cases in JScript and is free to use in your own scripts.
            Note that the API is the same regardless of which language is used.
            </para>
            <para>
            The APIs are grouped by namespaces they belong to, and can be selected from the sidebar to the left. For most users, the Demo3D.Visuals section will be the most useful.
            </para>
            </summary>
        </member>
        <member name="T:Demo3D.NamespaceDoc">
            <summary>
            The Demo3D namespace.
            </summary>
        </member>
        <member name="T:Demo3D.EventQueueExtension">
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.AttachedProperties">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.ConstraintType">
            <summary>
            Constraint types.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.IConstrainsTwoPoints">
            <summary>
            Interface for a constraint that constrains two points.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.DimensionType">
            <summary>
            Dimension types.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.IConstrainsDimension">
            <summary>
            Interface for a constraint that constrains a dimension.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.Constraint">
            <summary>
            Sketch constraint.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.PointOnPointConstraint">
            <summary>
            Coincident constraint.
            </summary>
            <remarks>
            Constrains two point entities to be coincident.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.PointOnHorizontalConstraint">
            <summary>
            Horizontal points constraint.
            </summary>
            <remarks>
            Constrains two point entities to be horizontal from each other.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.PointOnVerticalConstraint">
            <summary>
            Vertical points constraint.
            </summary>
            <remarks>
            Constrains two point entities to be vertical from each other.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.LineHorizontalConstraint">
            <summary>
            Horizontal line constraint.
            </summary>
            <remarks>
            Constrains a line to be horizontal.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.LineVerticalConstraint">
            <summary>
            Vertical line constraint.
            </summary>
            <remarks>
            Constrains a line to be vertical.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.PointDistanceConstraint">
            <summary>
            Distance constraint.
            </summary>
            <remarks>
            Constrains the distance between two point entities.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.LineLengthConstraint">
            <summary>
            Line length constraint.
            </summary>
            <remarks>
            Constrains the length of a line entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.CircleDiameterConstraint">
            <summary>
            Circle diameter constraint.
            </summary>
            <remarks>
            Constrains the diameter of a circle entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.ArcRadiusConstraint">
            <summary>
            Arc radius constraint.
            </summary>
            <remarks>
            Constrains the radius of an arc entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.AngleBetweenLinesConstraint">
            <summary>
            Angle constraint.
            </summary>
            <remarks>
            Constrains the angle between two line entities.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.PointOnCurveConstraint">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.PointOnLineConstraint">
            <summary>
            Point-line coincidence constraint.
            </summary>
            <remarks>
            Constrains a point entity to lie on the infinite line collinear to a line entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.PointOnCircleConstraint">
            <summary>
            Point-circle coincidence constraint.
            </summary>
            <remarks>
            Constrains a point entity to lie on a circle entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.PointOnArcConstraint">
            <summary>
            Point-arc coincidence constraint.
            </summary>
            <remarks>
            Constrains a point entity to lie on the circle defining an arc entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.ParallellLinesConstraint">
            <summary>
            Parallel constraint.
            </summary>
            <remarks>
            Constrains two line entities to be parallel.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.OrthogonalLinesConstraint">
            <summary>
            Orthogonal constraint.
            </summary>
            <remarks>
            Constrains two line entities to be perpendicular.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.TangentLineRadiusConstraint">
            <summary>
            Tangent constraint.
            </summary>
            <remarks>
            Constrains a line entity to be tangent to a radius (arc/circle) entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.NormalLineRadiusConstraint">
            <summary>
            Normal constraint.
            </summary>
            <remarks>
            Constrains a line entity to be normal to a radius (arc/circle) entity.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.ConstraintCollection">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.Construction">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.EntityConstruction">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.ConstraintConstruction">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.NamespaceDoc">
            <summary>
            The Demo3D.Sketch namespace.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.EditDimensionDialog">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Interaction logic for EditDimensionDialog.xaml
            </summary>
            <exclude />
            <summary>
            EditDimensionDialog
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.EditDimensionDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.EntityType">
            <summary>
            Entity types.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.Entity">
            <summary>
            Sketch entity.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.CurveEntity">
            <summary>
            Sketch curve entity.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.PointEntity">
            <summary>
            Sketch point entity.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.ExplicitPointEntity">
            <summary>
            Sketch explicit point entity.
            </summary>
            <remarks>
            An explicit point entity is defined by a 2D point.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.ImplicitPointEntity">
            <summary>
            Sketch implicit point entity.
            </summary>
            <remarks>
            An implicit point entity is defined implicitly by an equation on some sketch parameters. For
            example, the start and end points of an arc are implicitly defined by the arc's center
            point, radius, start angle and swept angle. The position of an implicit point entity cannot
            be set directly.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.LineEntity">
            <summary>
            Sketch line entity.
            </summary>
            <remarks>
            A line segment spanning between two point entities.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.RadiusEntity">
            <summary>
            Sketch radius entity.
            </summary>
            <remarks>
            The base type for circle and arc entities.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.ArcEntity">
            <summary>
            Sketch arc entity.
            </summary>
            <remarks>
            An arc swept about a center point entity with specified radius, start angle and swept angle.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.CircleEntity">
            <summary>
            Sketch circle entity.
            </summary>
            <remarks>
            A circle centered at a point entity with specified radius.
            </remarks>
        </member>
        <member name="T:Demo3D.Sketch.EntityCollection">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.EquationEmitter">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.EquationSystem">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="P:Demo3D.Sketch.EquationSystem.M">
            <summary>
            The number of equations.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.EquationSystem.N">
            <summary>
            The number of parameters (variables).
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Equation(System.Int32)">
            <summary>
            Accessor for the equation at the specified index.
            </summary>
            <param name="index">The index for the equation.</param>
            <returns>The ID for the equation.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.AddEquation(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Adds an equation to the system.
            </summary>
            <remarks>
            All expressions composing the provided expression must have been created through the
            system. Failure to do this will result in undefined behaviour.
            </remarks>
            <param name="equation">The ID for the equation.</param>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Clear">
            <summary>
            Clears the equation system.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Include(Demo3D.Sketch.EquationSystem)">
            <summary>
            Includes all the equations from the provided equation system into this equation system.
            </summary>
            <remarks>
            This will recursively include all expressions that are referenced by any equations. It
            won't include any expressions that are not referenced by any equations.
            </remarks>
            <param name="other">The equation system to be included.</param>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Include(Demo3D.Sketch.Expression.Tape.ExprID,Demo3D.Sketch.EquationSystem)">
            <summary>
            Recursively includes the specified expression from the provided equation system into
            this equation system.
            </summary>
            <param name="expression">The expression to be included.</param>
            <param name="system">The equation system from which the expression is to be included.</param>
            <returns>The corresponding expression added to this equation system.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Evaluate">
            <summary>
            Evaluates the equations.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Value(System.Int32)">
            <summary>
            Accessor for the value of the equation at the specified index.
            </summary>
            <param name="index">The equation index.</param>
            <returns>The equation value.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Value(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Accessor for the value of the specified expression.
            </summary>
            <param name="expression">The ID for the expression.</param>
            <returns>The expression value.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Initial(System.Double[])">
            <summary>
            Populates the variable vector with the current parameter values.
            </summary>
            <param name="x">The variable vector.</param>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.EvaluateEquations(System.Double[],System.Double[])">
            <summary>
            Evaluates the equations and populates the residual vector with the equation values.
            </summary>
            <param name="x">The variable value vector.</param>
            <param name="obj">The residual vector, which is to be populated.</param>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.EvaluateJacobian(System.Double[],System.Double[],System.Int32)">
            <summary>
            Evaluates and populates the Jacobian matrix.
            </summary>
            <remarks>
            The elements of the Jacobian matrix are stored column-major.
            </remarks>
            <param name="x">The variable value vector.</param>
            <param name="jacobian">The Jacobian matrix.</param>
            <param name="offset">The offset between the end of one column and the start of the next.</param>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Evaluate(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Evaluates and populates the resodual vector and Jacobian matrix.
            </summary>
            <remarks>
            The elements of the Jacobian matrix are stored column-major.
            </remarks>
            <param name="x">The variable value vector.</param>
            <param name="obj">The residual vector, which is to be populated.</param>
            <param name="jacobian">The Jacobian matrix.</param>
            <param name="offset">The offset between the end of one column and the start of the next.</param>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Solve(System.Int32,System.Double,System.Double)">
            <summary>
            Solves the equation system.
            </summary>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <param name="zeps">The zero convergence tolerance.</param>
            <param name="feps">The value convergence tolerance.</param>
            <returns>The termination condition.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.MaxAbs(System.Double[],System.Int32)">
            <summary>
            Calculates the maximum absolute value of the provided value vector.
            </summary>
            <param name="values">The value vector.</param>
            <param name="count">The number of elements to consider.</param>
            <returns>The maximum absolute value.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.SumAbs(System.Double[],System.Int32)">
            <summary>
            Calculates the sum of the absolute values of the provided value vector.
            </summary>
            <param name="values">The value vector.</param>
            <param name="count">The number of elements to consider.</param>
            <returns>The sum of the absolute values.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.ApplySolution">
            <summary>
            Updates the parameters with the most recent solved values.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.UpdateParameters">
            <summary>
            Updates the parameter expression values to the values on the parameters.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Parameter(Demo3D.Sketch.Parameter)">
            <summary>
            Finds or creates a parameter expression for the specified parameter.
            </summary>
            <param name="parameter">The parameter.</param>
            <returns>The ID for the corresponding parameter expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Parameter(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Finds the parameter for the specified parameter expression.
            </summary>
            <param name="parameter">The ID for the parameter expression.</param>
            <returns>The parameter.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Constant(System.Double)">
            <summary>
            Creates a constant expression.
            </summary>
            <param name="value">The value for the constant.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Add(Demo3D.Sketch.Expression.Tape.ExprID,Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates an addition expression.
            </summary>
            <param name="lhs">The left-hand operand.</param>
            <param name="rhs">The right-hand operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Subtract(Demo3D.Sketch.Expression.Tape.ExprID,Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a subtraction expression.
            </summary>
            <param name="lhs">The left-hand operand.</param>
            <param name="rhs">The right-hand operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Multiply(Demo3D.Sketch.Expression.Tape.ExprID,Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a multiplication expression.
            </summary>
            <param name="lhs">The left-hand operand.</param>
            <param name="rhs">The right-hand operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Divide(Demo3D.Sketch.Expression.Tape.ExprID,Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a division expression.
            </summary>
            <param name="lhs">The left-hand operand.</param>
            <param name="rhs">The right-hand operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Negate(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a negation expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Atan2(Demo3D.Sketch.Expression.Tape.ExprID,Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates an arctangent2 expression.
            </summary>
            <param name="lhs">The left-hand operand.</param>
            <param name="rhs">The right-hand operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Sin(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a sine expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Cos(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a cosine expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Tan(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a tangent expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Asin(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates an arcsin expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Acos(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates an arccosine expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Atan(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates an arctangent expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Sqr(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a square expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="M:Demo3D.Sketch.EquationSystem.Sqrt(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Creates a square-root expression.
            </summary>
            <param name="operand">The operand.</param>
            <returns>The ID for the created expression.</returns>
        </member>
        <member name="T:Demo3D.Sketch.Expression.Tape">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="M:Demo3D.Sketch.Expression.Tape.ValueUnsafe(Demo3D.Sketch.Expression.Tape.ExprID)">
            <summary>
            Accessor for the expression value.
            </summary>
            <remarks>
            This method doesn't assert that the tape is not dirty. It is useful for accessing values
            whilst updating values.
            </remarks>
            <param name="expression">The ID for the expression.</param>
            <returns>The expression value.</returns>
        </member>
        <member name="T:Demo3D.Sketch.GenericCollection`1">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.Parameter">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.PowellDogLegSolver">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect">
            <summary>
            2D Sketch Aspect.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.Command">
            <summary>
            Command states.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.DimensionDisplay">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Dimension display options.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.DisplayFlags">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            General display options.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.ConstraintInference">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.SelectionMode">
            <summary>
            Selection modes.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.Projection">
            <summary>
            Camera projection mode.
            </summary>
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.ConstraintButtonData">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Data for constraint tooltip buttons.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.ConstraintButtonData.ButtonState">
            <summary>
            Button states.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchAspect.ConstraintMenuData">
            <summary>
            Data for the constraint tooltip menu.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.MAX_CHORD_LENGTH">
            <summary>
            The maximum (screen-space) chord length to use when rendering.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.TOOLBAR_NAME">
            <summary>
            The name for the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.ACTION_GROUP_NAME">
            <summary>
            The name for the action group in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.FINISH_SKETCH_NAME">
            <summary>
            The name for the finish sketch button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.GEOMETRY_GROUP_NAME">
            <summary>
            The name for the geometry group in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.LINE_GEOMETRY_NAME">
            <summary>
            The name for the line geometry button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.CENTER_POINT_ARC_GEOMETRY_NAME">
            <summary>
            The name for the center point arc geometry button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.TRI_POINT_ARC_GEOMETRY_NAME">
            <summary>
            The name for the three point arc geometry button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.CIRCLE_GEOMETRY_NAME">
            <summary>
            The name for the circle geometry button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.CONSTRAINT_GROUP_NAME">
            <summary>
            The name for the constraint group in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.POINT_ON_POINT_CONSTRAINT_NAME">
            <summary>
            The name for the point-on-point constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.POINT_ON_CURVE_CONSTRAINT_NAME">
            <summary>
            The name for the point-on-curve constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.HORIZONTAL_CONSTRAINT_NAME">
            <summary>
            The name for the horizontal constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.VERTICAL_CONSTRAINT_NAME">
            <summary>
            The name for the vertical constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.PARALLEL_CONSTRAINT_NAME">
            <summary>
            The name for the parallel constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.ORTHOGONAL_CONSTRAINT_NAME">
            <summary>
            The name for the orthogonal constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.TANGENT_CONSTRAINT_NAME">
            <summary>
            The name for the tangent constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.NORMAL_CONSTRAINT_NAME">
            <summary>
            The name for the normal constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.DIMENSION_CONSTRAINT_NAME">
            <summary>
            The name for the dimension constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.ANGLE_CONSTRAINT_NAME">
            <summary>
            The name for the angle constraint button in the ribbon toolbar.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.DIMENSION_FONT_SIZE">
            <summary>
            The font size for the dimension text.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.POINT_SELECT_DISTANCE">
            <summary>
            The screen-space distance from a curve at which the point can be selected.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.CURVE_SELECT_DISTANCE">
            <summary>
            The screen-space distance from a curve at which the curve can be selected.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.CURVE_SNAP_DISTANCE">
            <summary>
            The screen-space distance at which a point can be snapped to a curve.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.POINT_SNAP_DISTANCE">
            <summary>
            The screen-space distance at which a point can be snapped to a point.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.ORIGIN_SNAP_DISTANCE">
            <summary>
            The screen-space distance at which a point can be snapped to the sketch origin.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.AXIS_SNAP_DISTANCE">
            <summary>
            The screen-space distance at which a point can be snapped to a sketch axis.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.HORIZONTAL_SNAP_DISTANCE">
            <summary>
            The screen-space distance at which a point can be snapped to the horizontal line passing
            through a point entity.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.VERTICAL_SNAP_DISTANCE">
            <summary>
            The screen-space distance at which a point can be snapped to the vertical line passing
            through a point entity.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.INTERSECTION_SNAP_DISTANCE">
            <summary>
            The screen-space distance at which a point can be snapped to the intersection of two
            lines or curves.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.MAX_TESSELLATION_LENGTH">
            <summary>
            The maximum screen-space length to use when rendering tessellated curves.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.INFINITE_LINE_LENGTH">
            <summary>
            The length to use for "infinite" lines.
            </summary>
            <remarks>
            Lazy! To avoid writing infinite line tests.
            </remarks>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.Z_EPS">
            <summary>
            Distance (world space) to raise lines/points above the surface of the sketch plane.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.TOOLTIP_MENU_OFFSET_X">
            <summary>
            The screen-space x-axis offset distance from the cursor to the center of the tooltip
            menu.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.TOOLTIP_MENU_OFFSET_Y">
            <summary>
            The screen-space y-axis offset distance from the cursor to the center of the tooltip
            menu.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.TOOLTIP_MENU_BUTTON_SIZE">
            <summary>
            The screen-space size for buttons in the tooltip menu.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.SOLVER_ITERATIONS">
            <summary>
            The maximum number of solver iterations.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.SOLVER_ZERO_TOLERANCE">
            <summary>
            The solver zero convergence tolerance.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.SOLVER_VALUE_TOLERANCE">
            <summary>
            The solver value convergence tolerance.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.visualPlane">
            <summary>
            The plane in which the sketch lies, local to a visual.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.entities">
            <summary>
            The sketch entities.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.constraints">
            <summary>
            The sketch constraints.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.showDimensions">
            <summary>
            Whether (unselected) dimensions should be rendered.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.displayOptions">
            <summary>
            General display options.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.inferConstraints">
            <summary>
            The constraints that should be inferred from snapping.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.construction">
            <summary>
            The current construction.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.command">
            <summary>
            The command state.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.tool">
            <summary>
            The sketch tool.
            </summary>
            <remarks>
            This will be non-null when the sketch is being edited.
            </remarks>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.drag">
            <summary>
            The current mouse drag.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.tooltipMenu">
            <summary>
            The tooltip menu.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.recordEdits">
            <summary>
            Whether edits should be recorded for undo/redo.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.cameraProjection">
            <summary>
            The camera projection before focusing the sketch plane.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.cameraPosition">
            <summary>
            The camera position before focusing the sketch plane.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.SketchAspect.cameraTarget">
            <summary>
            The camera target before focusing the sketch plane.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.Plane">
            <summary>
            The plane in which the sketch lies.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.PlaneValid">
            <summary>
            Whether the sketch plane is valid.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.Editing">
            <summary>
            Whether the sketch is currently being edited.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.CanEdit">
            <summary>
            Whether the sketch can be edited.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.Entities">
            <summary>
            The sketch entities.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.Constraints">
            <summary>
            The sketch entities.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.ShowDimensions">
            <summary>
            Whether (unselected) dimensions should be rendered.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.DisplayOptions">
            <summary>
            Display options.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.InferConstraints">
            <summary>
            The constraints that should be inferred from snapping.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.SketchAspect.PPM">
            <summary>
            The number of pixels per meter.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.ForceRender">
            <summary>
            Forces a render.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.PlanarCoordinates(System.Drawing.Point,Demo3D.Common.Geometry.Plane3D)">
            <summary>
            Converts the specified screen-space point to planar coordinates.
            </summary>
            <param name="point">The screen-space point.</param>
            <param name="plane">The plane.</param>
            <returns>The planar coordinates.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.ScreenCoordinates(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Plane3D)">
            <summary>
            Converts the specified planar coordinates to a screen-space point.
            </summary>
            <param name="planarCoordinates">The planar coordinates.</param>
            <param name="plane">The plane.</param>
            <returns>The screen-space point.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.WorldCoordinates(Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Converts the specified point in planar coordinates to world-space.
            </summary>
            <param name="planarCoordinates">The planar coordinates.</param>
            <returns>The world coordinates.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.WorldDirection(Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Converts the specified direction in planar coordinates to world-space.
            </summary>
            <param name="planarDirection">The planar coordinates.</param>
            <returns>The world coordinates.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.TryGetPlane(Demo3D.Common.Geometry.Plane3D@)">
            <summary>
            Tries to get the plane for the sketch in world-space.
            </summary>
            <param name="plane">The plane.</param>
            <returns>True if succeeded, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.FocusPlane">
            <summary>
            Rotates and pans the camera to focus on the sketch plane.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RevertFocus">
            <summary>
            Reverts the camera view.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.EditSketch">
            <summary>
            Starts editing the sketch.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.FinishSketch">
            <summary>
            Finishes editing the sketch.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.SwitchCommand(Demo3D.Sketch.SketchAspect.Command)">
            <summary>
            Switches the state to the specified command.
            </summary>
            <param name="newCommand">The new command.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.PickEntity(System.Drawing.Point,Demo3D.Sketch.EntityType)">
            <summary>
            Picks an entity close to the specified screen coordinates.
            </summary>
            <param name="screenCoordinates">The pick location in screen coordinates.</param>
            <param name="types">The types of entity that can be picked.</param>
            <returns>The picked entity (or null).</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Select(System.Drawing.Point,Demo3D.Sketch.SketchAspect.SelectionMode)">
            <summary>
            Point selection with the specified mode.
            </summary>
            <param name="screenCoordinates">The screen coordinates for the point selection.</param>
            <param name="mode">The selection mode.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Select(System.Drawing.Point,System.Drawing.Point,Demo3D.Sketch.SketchAspect.SelectionMode)">
            <summary>
            Area selection with the specified mode.
            </summary>
            <param name="start">The starting screen coordinates for the rectangular selection area.</param>
            <param name="end">The ending screen coordinates for the rectangular selection area.</param>
            <param name="mode">The selection mode.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnEntityCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the list of entities changes.
            </summary>
            <param name="sender">The collection of entities.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnEntitySelectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the list of selected entities changes.
            </summary>
            <param name="sender">The collection of selected entities.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnEntityAdded(Demo3D.Sketch.GenericCollection{Demo3D.Sketch.Entity},Demo3D.Sketch.Entity)">
            <summary>
            Called when an entity is added.
            </summary>
            <param name="sender">The collection of entities.</param>
            <param name="entity">The entity that was added.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnEntityRemoved(Demo3D.Sketch.GenericCollection{Demo3D.Sketch.Entity},Demo3D.Sketch.Entity)">
            <summary>
            Called when an entity is removed.
            </summary>
            <param name="sender">The collection of entities.</param>
            <param name="entity">The entity that was removed.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.FindConstraintsRecursive(Demo3D.Sketch.Entity,System.Collections.Generic.HashSet{Demo3D.Sketch.Constraint})">
            <summary>
            Finds all constraints depending on the specified entity or any descendant subentities.
            </summary>
            <param name="entity">The entity.</param>
            <param name="set">The set of constraints to be populated.</param>
            <returns>The populated set of constraints.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RemoveConstraintsRecursive(Demo3D.Sketch.Entity)">
            <summary>
            Removes any constraints depending on the specified entity or any descendant subentities.
            </summary>
            <param name="entity">The root entity.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnConstraintCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the list of constraints changes.
            </summary>
            <param name="sender">The collection of constraints.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnConstraintSelectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Called when the list of selected constraints changes.
            </summary>
            <param name="sender">The collection of selected constraints.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnConstraintAdded(Demo3D.Sketch.GenericCollection{Demo3D.Sketch.Constraint},Demo3D.Sketch.Constraint)">
            <summary>
            Called when a constraint is added.
            </summary>
            <param name="sender">The collection of constraints.</param>
            <param name="constraint">The constraint that was added.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnConstraintRemoved(Demo3D.Sketch.GenericCollection{Demo3D.Sketch.Constraint},Demo3D.Sketch.Constraint)">
            <summary>
            Called when a constraint is removed.
            </summary>
            <param name="sender">The collection of constraints.</param>
            <param name="constraint">The constraint that was removed.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.BoundingBox(Demo3D.Sketch.IConstrainsDimension,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Determines the axis-aligned bounding box for the text of a dimension constraint.
            </summary>
            <param name="dimensionConstraint">The dimension constraint.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display.</param>
            <returns>The axis-aligned bounding box.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Contains(Demo3D.Sketch.Entity)">
            <summary>
            Determines whether the sketch contains the specified entity.
            </summary>
            <remarks>
            The sketch may contain the specified entity directly or indirectly (as a subentity of a
            a directly contained entity).
            </remarks>
            <param name="entity">The entity.</param>
            <returns>True if the sketch contains the entity, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.AddInternal(Demo3D.Sketch.Entity)">
            <summary>
            Adds a single constraint to the sketch without adding an edit.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RemoveInternal(Demo3D.Sketch.Entity)">
            <summary>
            Removes a single constraint from the sketch without adding an edit.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Add(Demo3D.Sketch.Entity)">
            <summary>
            Adds a single entity to the sketch.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Add(Demo3D.Sketch.Entity,System.Collections.Generic.IEnumerable{Demo3D.Sketch.Constraint})">
            <summary>
            Adds a single entity along with a collection of constraints.
            </summary>
            <param name="entity">The entity.</param>
            <param name="constraints">The collection of constraints.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Remove(Demo3D.Sketch.Entity)">
            <summary>
            Removes a single entity from the sketch.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Contains(Demo3D.Sketch.Constraint)">
            <summary>
            Determines whether the sketch contains the specified constraint.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>True if the sketch contains the constraint, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.AddInternal(Demo3D.Sketch.Constraint)">
            <summary>
            Adds a single constraint to the sketch without triggering a solve or adding an edit.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RemoveInternal(Demo3D.Sketch.Constraint)">
            <summary>
            Removes a single constraint to the sketch without triggering a solve or adding an edit.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Add(Demo3D.Sketch.Constraint)">
            <summary>
            Adds a single constraint to the sketch.
            </summary>
            <param name="constraint">The constraint.</param>
            <returns>Whether the constraint was added.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Add(System.Collections.Generic.IEnumerable{Demo3D.Sketch.Constraint})">
            <summary>
            Adds a collection of constraints to the skecth.
            </summary>
            <remarks>
            Performs a single edit.
            </remarks>
            <param name="constraints">The collection of constraints.</param>
            <returns>Whether the constraints were added.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Remove(Demo3D.Sketch.Constraint)">
            <summary>
            Removes a single constraint from the sketch.
            </summary>
            <param name="constraint">The constraint.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RemoveSelected">
            <summary>
            Removes all selected entities and constraints from the sketch.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Solve">
            <summary>
            Attempts to solve the constraints and applies the solution if successful.
            </summary>
            <returns>True if the solve was successful, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.State">
            <summary>
            Returns the current state of all parameters in the sketch.
            </summary>
            <returns>The current state.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.PopulateState(Demo3D.Sketch.Entity,Demo3D.Sketch.State)">
            <summary>
            Populates the provided state with all parameters for the entity and its descendant
            entities.
            </summary>
            <param name="entity">The entity.</param>
            <param name="state">The state to be populated./</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnEnabled">
            <summary>
            Called when the aspect is enabled.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnDisabled">
            <summary>
            Called when the aspect is disabled.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.UnloadToolbar">
            <summary>
            Unloads the sketch toolbar.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.LoadToolbar">
            <summary>
            Loads the sketch toolbar.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnLineButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the create line button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnCenterPointArcButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the create center point arc button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnTriPointArcButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the create tri point arc button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnCircleButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the create circle button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnPointOnPointButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the point-on-point button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnPointOnCurveButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the point-on-curve button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnHorizontalButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the horizontal button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnVerticalButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the vertical button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnParallelButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the parallel button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnOrthogonalButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the orthogonal button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnTangentButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the tangent button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnNormalButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the normal button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnAngleButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the angle button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnDimensionButtonCheckedChanged(System.Object,System.EventArgs)">
            <summary>
            Called when the dimension button is checked/unchecked.
            </summary>
            <param name="sender">The button.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.OnRender(System.Object,Demo3D.Visuals.ToolRenderedEventArgs)">
            <summary>
            Called when rendering the view.
            </summary>
            <param name="sender">The window being rendered.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.Render(Demo3D.Visuals.IDisplay)">
            <summary>
            Renders the sketch.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderEntity(Demo3D.Sketch.Entity,System.Drawing.Color,System.Int32,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single entity.
            </summary>
            <param name="entity">The entity to render.</param>
            <param name="color">The color for the entity.</param>
            <param name="size">The size for the points.</param>
            <param name="thickness">The thickness for the curves.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderConstraint(Demo3D.Sketch.Constraint,System.Int32,System.Drawing.Color,System.Int32,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single constraint.
            </summary>
            <param name="constraint">The constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="size">The size for the points.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderTwoPointConstraint(Demo3D.Sketch.IConstrainsTwoPoints,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single constraint that constrains two points.
            </summary>
            <param name="constraint">The constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointOnPointConstraint(Demo3D.Sketch.PointOnPointConstraint,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-on-point constraint.
            </summary>
            <param name="constraint">The point-on-point constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointOnHorizontalConstraint(Demo3D.Sketch.PointOnHorizontalConstraint,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-on-horizontal constraint.
            </summary>
            <param name="constraint">The point-on-horizontal constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointOnVerticalConstraint(Demo3D.Sketch.PointOnVerticalConstraint,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-on-vertical constraint.
            </summary>
            <param name="constraint">The point-on-horizontal constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderLineDirectionConstraint(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single line-direction constraint.
            </summary>
            <param name="p1">The start point for the line.</param>
            <param name="p2">The end point for the line.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderLineHorizontalConstraint(Demo3D.Sketch.LineHorizontalConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single line-horizontal constraint.
            </summary>
            <param name="constraint">The line-horizontal constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderLineVerticalConstraint(Demo3D.Sketch.LineVerticalConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single line-vertical constraint.
            </summary>
            <param name="constraint">The line-vertical constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderParallelLinesConstraint(Demo3D.Sketch.ParallellLinesConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single parallel-lines constraint.
            </summary>
            <param name="constraint">The parallel-lines constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderOrthogonalLinesConstraint(Demo3D.Sketch.OrthogonalLinesConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single orthogonal-lines constraint.
            </summary>
            <param name="constraint">The orthogonal-lines constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderTangentLineRadiusConstraint(Demo3D.Sketch.TangentLineRadiusConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single tangent line-radius constraint.
            </summary>
            <param name="constraint">The tangent line-radius constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderNormalLineRadiusConstraint(Demo3D.Sketch.NormalLineRadiusConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single normal line-radius constraint.
            </summary>
            <param name="constraint">The normal line-radius constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointOnCurveConstraint(Demo3D.Sketch.PointOnCurveConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-on-curve constraint.
            </summary>
            <param name="constraint">The point-on-curve constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointOnLineConstraint(Demo3D.Sketch.PointOnLineConstraint,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-on-line constraint.
            </summary>
            <param name="constraint">The point-on-line constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointOnCircleConstraint(Demo3D.Sketch.PointOnCircleConstraint,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-on-circle constraint.
            </summary>
            <param name="constraint">The point-on-circle constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointOnArcConstraint(Demo3D.Sketch.PointOnArcConstraint,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-on-arc constraint.
            </summary>
            <param name="constraint">The point-on-arc constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderDimension(System.String,Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a dimension.
            </summary>
            <param name="text">The text for the dimension.</param>
            <param name="p1">The first point for the dimension.</param>
            <param name="p2">The second point for the dimension.</param>
            <param name="offset">The offset in the direction and orthogonal to the direction of the constraint.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderLineLengthConstraint(Demo3D.Sketch.LineLengthConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single line-length constraint.
            </summary>
            <param name="constraint">The line-length constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointDistanceConstraint(Demo3D.Sketch.PointDistanceConstraint,System.Int32,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point-distance constraint.
            </summary>
            <param name="constraint">The point-distance constraint to render.</param>
            <param name="step">The current construction step.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderCircleDiameterConstraint(Demo3D.Sketch.CircleDiameterConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single circle-diameter constraint.
            </summary>
            <param name="constraint">The circle-diameter constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderArcRadiusConstraint(Demo3D.Sketch.ArcRadiusConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single arc-radius constraint.
            </summary>
            <param name="constraint">The arc-radius constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderAngleBetweenLinesConstraint(Demo3D.Sketch.AngleBetweenLinesConstraint,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single angle-between-lines constraint.
            </summary>
            <param name="constraint">The angle-between-lines constraint to render.</param>
            <param name="color">The color for the constraint.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPoints(System.Collections.Generic.IEnumerable{Demo3D.Sketch.Entity},System.Drawing.Color,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders all point entities, including sub-entities, in the provided list of entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="color">The color for the point entities.</param>
            <param name="size">The size for the points.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderCurves(System.Collections.Generic.IEnumerable{Demo3D.Sketch.Entity},System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders all curve entities in the provided list of entities.
            </summary>
            <param name="entities">The entities.</param>
            <param name="color">The color for the curves.</param>
            <param name="thickness">The thickness for the curves.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderCurve(Demo3D.Common.Geometry.ICurve2D,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single curve.
            </summary>
            <param name="curve">The curve to render.</param>
            <param name="color">The color for the curve.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderDashedCurve(Demo3D.Common.Geometry.ICurve2D,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single dashed curve.
            </summary>
            <param name="curve">The curve to render.</param>
            <param name="color">The color for the curve.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderRectangle(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders an plane-aligned rectangle.
            </summary>
            <param name="position">The center position of the rectange.</param>
            <param name="dimensions">The dimensions of the rectangle.</param>
            <param name="color">The color for the rectangle.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderInfiniteLine(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,System.Double,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders an infinite line.
            </summary>
            <param name="start">The start point for the solid section of the line.</param>
            <param name="end">The end point for the solid section of the line.</param>
            <param name="color">The color for the line.</param>
            <param name="thickness">The thickness for the line.</param>
            <param name="dashedLength">The length of the dashed ends (in pixels).</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderCompletedArc(Demo3D.Common.Geometry.Arc2D,System.Drawing.Color,System.Int32,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders an arc, where the curve traced by the arc is solid and the remaining is dashed.
            </summary>
            <param name="arc">The arc.</param>
            <param name="color">The color for the arc.</param>
            <param name="thickness">The thickness for the arc.</param>
            <param name="ppm">The number of pixels per meter.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderDashedLine(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a dashed line between the specified points.
            </summary>
            <param name="start">The start point for the dashed line.</param>
            <param name="end">The end point for the dashed line.</param>
            <param name="color">The color for the dashed line.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderLine(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a solid line between the specified points.
            </summary>
            <param name="start">The start point for the solid line.</param>
            <param name="end">The end point for the solid line.</param>
            <param name="color">The color for the solid line.</param>
            <param name="thickness">The thickness for the line.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderLineList(System.Collections.Generic.IEnumerable{Demo3D.Common.Geometry.Vector2D},System.Drawing.Color,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a list of lines.
            </summary>
            <param name="points">The ordered pairs of points for each line.</param>
            <param name="color">The color for the lines.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderLineStrip(System.Collections.Generic.IEnumerable{Demo3D.Common.Geometry.Vector2D},System.Drawing.Color,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a line strip from point to point.
            </summary>
            <param name="points">The points to render lines between.</param>
            <param name="color">The color for the lines.</param>
            <param name="thickness">The thickness for the lines.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPointList(System.Collections.Generic.IEnumerable{Demo3D.Common.Geometry.Vector2D},System.Drawing.Color,System.Double,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a list of points.
            </summary>
            <param name="points">The points to render.</param>
            <param name="color">The color for the points.</param>
            <param name="size">The size for the points.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderPoint(Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single point.
            </summary>
            <param name="point">The point to render.</param>
            <param name="color">The color for the point.</param>
            <param name="size">The size for the point.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderBandedPoint(Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Drawing.Color,System.Int32,System.Int32,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a single banded point.
            </summary>
            <param name="point">The point to render.</param>
            <param name="color1">The color for the inner point and all even bands.</param>
            <param name="color2">The color for all odd bands.</param>
            <param name="size">The size of the inner point.</param>
            <param name="thickness">The thickness of each band.</param>
            <param name="bands">The number of bands.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderArrow(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Double,System.Double,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a solid arrow between the specified points.
            </summary>
            <param name="start">The start point for the solid arrow.</param>
            <param name="end">The end point for the solid arrow.</param>
            <param name="color">The color for the solid arrow.</param>
            <param name="angle">The tick angle for the solid arrow.</param>
            <param name="length">The tick length for the solid arrow.</param>
            <param name="thickness">The thickness for the arrow.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.MeasureText(System.String,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Measures the dimensions of the text string.
            </summary>
            <param name="text">The text string.</param>
            <param name="size">The font size.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display.</param>
            <returns>The planar dimensions.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.RenderText(System.String,Demo3D.Common.Geometry.Vector2D,System.Drawing.Color,System.Int32,Demo3D.Common.Geometry.Plane3D,Demo3D.Visuals.IDisplay)">
            <summary>
            Renders a text string.
            </summary>
            <param name="text">The text string.</param>
            <param name="position">The center position for the text.</param>
            <param name="color">The color for the text.</param>
            <param name="size">The font size for the text.</param>
            <param name="plane">The sketch plane.</param>
            <param name="display">The display to render to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.PopulateDiscreteSnaps(System.Collections.Generic.List{Demo3D.Sketch.DiscreteSnapEntry},Demo3D.Sketch.PointEntity)">
            <summary>
            Populates the provided list with all discrete snaps.
            </summary>
            <param name="snaps">The list to be populated.</param>
            <param name="startEntity">The (optional) additional point entity that can be snapped to.</param>
        </member>
        <member name="M:Demo3D.Sketch.SketchAspect.SnapPoint(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Plane3D,Demo3D.Sketch.PointEntity,Demo3D.Sketch.SnapType)">
            <summary>
            Attempts to snap the specified point to possible constrained positions.
            </summary>
            <param name="point">The point.</param>
            <param name="plane">The sketch plane.</param>
            <param name="startEntity">The (optional) additional point entity that can be snapped to.</param>
            <param name="snapTo">The (optional) types to snap to.</param>
            <returns>The snap result.</returns>
        </member>
        <member name="T:Demo3D.Sketch.SketchConversion">
            <summary>
            Sketch to visual curve conversion functions.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.SketchConversion.ConvertSketch(Demo3D.Sketch.SketchAspect)">
            <summary>
            Converts a sketch aspect to a sorted <see cref="T:Demo3D.Visuals.VisualCompositeCurve" />.
            </summary>
            <param name="sketch">The sketch aspect.</param>
            <returns>The sorted visual composite curve.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchConversion.ConvertSketch(Demo3D.Sketch.SketchAspect,System.Boolean)">
            <summary>
            Converts a sketch aspect to a <see cref="T:Demo3D.Visuals.VisualCompositeCurve" />.
            </summary>
            <param name="sketch">The sketch aspect.</param>
            <param name="sort">Whether to sort the composite curve.</param>
            <returns>The visual composite curve.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchConversion.ConvertCurve(Demo3D.Sketch.SketchAspect,Demo3D.Sketch.CurveEntity)">
            <summary>
            Converts a sketch curve entity to a <see cref="T:Demo3D.Visuals.VisualCurve" />/
            </summary>
            <param name="sketch">The sketch aspect.</param>
            <param name="curveEntity">The curve entity belonging to the sketch aspect.</param>
            <returns>The equivalent visual curve.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchConversion.ConvertLine(Demo3D.Sketch.SketchAspect,Demo3D.Sketch.LineEntity)">
            <summary>
            Converts a sketch line entity to a <see cref="T:Demo3D.Visuals.VisualLine" />/
            </summary>
            <param name="sketch">The sketch aspect.</param>
            <param name="lineEntity">The line entity belonging to the sketch aspect.</param>
            <returns>The equivalent visual line.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchConversion.ConvertCircle(Demo3D.Sketch.SketchAspect,Demo3D.Sketch.CircleEntity)">
            <summary>
            Converts a sketch circle entity to a <see cref="T:Demo3D.Visuals.VisualCircle" />/
            </summary>
            <param name="sketch">The sketch aspect.</param>
            <param name="circleEntity">The circle entity belonging to the sketch aspect.</param>
            <returns>The equivalent visual circle.</returns>
        </member>
        <member name="M:Demo3D.Sketch.SketchConversion.ConvertArc(Demo3D.Sketch.SketchAspect,Demo3D.Sketch.ArcEntity)">
            <summary>
            Converts a sketch arc entity to a <see cref="T:Demo3D.Visuals.VisualArc" />/
            </summary>
            <param name="sketch">The sketch aspect.</param>
            <param name="arcEntity">The arc entity belonging to the sketch aspect.</param>
            <returns>The equivalent visual arc.</returns>
        </member>
        <member name="T:Demo3D.Sketch.SketchEdit">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchAddEntityEdit">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchRemoveEntityEdit">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchAddConstraintsEdit">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchRemoveConstraintsEdit">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchMoveDimensionEdit">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchChangeDimensionEdit">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.MouseMoveEventHandler">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.MouseDragEventHandler">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.DoubleClickEventHandler">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.ShortcutEventHandler">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SketchTool">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.SnapType">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.DiscreteSnapEntry">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.Snap">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="F:Demo3D.Sketch.Snap.Type">
            <summary>
            The snap type.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.Snap.Entity">
            <summary>
            The first entity that the snap relates to.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.Snap.Entity2">
            <summary>
            The second entity that the snap relates to.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.Snap.Data">
            <summary>
            Additional data for the snap.
            </summary>
        </member>
        <member name="F:Demo3D.Sketch.Snap.UnsnappedPosition">
            <summary>
            The unsnapped position.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.Snap.#ctor(Demo3D.Sketch.SnapType,Demo3D.Sketch.Entity,Demo3D.Sketch.Entity,System.Object,Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="type">The snap type.</param>
            <param name="entity">The first entity that the snap relates to.</param>
            <param name="entity2">The second entity that the snap relates to.</param>
            <param name="data">The additional data for the snap.</param>
            <param name="unsnappedPosition">The unsnapped position.</param>
        </member>
        <member name="M:Demo3D.Sketch.Snap.#ctor(Demo3D.Sketch.DiscreteSnapEntry,Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Constructor.
            </summary>
            <param name="entry">The discrete snap.</param>
            <param name="unsnappedPosition">The unsnapped position.</param>
        </member>
        <member name="M:Demo3D.Sketch.Snap.SnappedPosition">
            <summary>
            Determines the snapped position.
            </summary>
            <returns>The snapped position.</returns>
        </member>
        <member name="T:Demo3D.Sketch.Solver">
            <summary>
            A (dense) linear least-squares solver, minimizing ||Ax - b||.
            </summary>
            <remarks>
            Uses singular value decomposition of the coefficient matrix, A. This method is slower than
            the typical QR factorization approach, but doesn't require the matrix to have full rank.
            Note that this solver is accelerated by the Intel MKL library.
            </remarks>
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="M:Demo3D.Sketch.Solver.Solve(System.Int32,System.Int32,System.Double[],System.Double[],System.Double[],System.Double[],System.Int32[],System.Double[])">
            <summary>
            Solves the linear least-squares problem, which minimizes ||b - Ax||.
            </summary>
            <remarks>
            Time-complexity O(max(m,n)^3).
            
            Note that while <paramref name="b" /> is mathematically an m-dimensional vector, the
            solver requires that it is passed as an array of length max(m,n). This is because the
            array is updated to hold the solution, which is n-dimensioned.
            </remarks>
            <param name="m">The number of rows in the matrix A.</param>
            <param name="n">The number of columns in the matrix A.</param>
            <param name="A">The (mxn) matrix A, in column-major storage.</param>
            <param name="b">The (max(m,n)-dimensional) vector b.</param>
            <param name="x">The (n-dimensional) vector x.</param>
            <param name="s">The (min(m,n)-dimensional) vector of singular values.</param>
            <param name="iwork">The integer workspace.</param>
            <param name="dwork">The double workspace.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Sketch.Solver.Prepare(System.Int32,System.Int32,System.Double[]@,System.Int32[]@,System.Double[]@)">
            <summary>
            Allocates the singular value array, the integer workspace array and the double workspace
            array in preparation for solving.
            </summary>
            <remarks>
            This should be called once before solving a problem of the given mxn dimensions. The
            allocated arrays may be used to solve multiple times. Avoid calling this method before
            each solve! The cost of performing workspace dimension queries and allocating the arrays
            is quite high.
            </remarks>
            <param name="m">The number of rows in the matrix A.</param>
            <param name="n">The number of columns in the matrix A.</param>
            <param name="s">The allocated (min(m,n)-dimensional) vector of singular values.</param>
            <param name="iws">The allocated integer workspace.</param>
            <param name="dws">The allocated double workspace.</param>
            <returns>True if successful, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Sketch.ISolverProblem">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="P:Demo3D.Sketch.ISolverProblem.M">
            <summary>
            The number of equations.
            </summary>
        </member>
        <member name="P:Demo3D.Sketch.ISolverProblem.N">
            <summary>
            The number of variables.
            </summary>
        </member>
        <member name="M:Demo3D.Sketch.ISolverProblem.Initial(System.Double[])">
            <summary>
            Populates the variable vector with the initial values (guesses).
            </summary>
            <param name="x">The variable vector.</param>
        </member>
        <member name="M:Demo3D.Sketch.ISolverProblem.EvaluateEquations(System.Double[],System.Double[])">
            <summary>
            Evaluates the residual vector obj = y - f(x).
            </summary>
            <param name="x">The variable value vector.</param>
            <param name="obj">The residual vector, which is to be populated.</param>
        </member>
        <member name="M:Demo3D.Sketch.ISolverProblem.EvaluateJacobian(System.Double[],System.Double[],System.Int32)">
            <summary>
            Evaluates the Jacobian matrix.
            </summary>
            <remarks>
            Each entry (i, j) of the Jacobian matrix should contain the partial derivative of
            the objective function df[i]/dx[j]. The matrix is stored column-major.
            </remarks>
            <param name="x">The variable value vector.</param>
            <param name="jac">The jacobian matrix, which is to be populated.</param>
            <param name="offset">The offset between the end of one column and the start of the next.</param>
        </member>
        <member name="M:Demo3D.Sketch.ISolverProblem.Evaluate(System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            Evaluates the residual vector and Jacobian matrix.
            </summary>
            <remarks>
            Each entry (i, j) of the Jacobian matrix should contain the partial derivative of
            the objective function df[i]/dx[j]. The matrix is stored column-major.
            </remarks>
            <param name="x">The variable value vector.</param>
            <param name="obj">The residual vector, which is to be populated.</param>
            <param name="jac">The jacobian matrix, which is to be populated.</param>
            <param name="offset">The offset between the end of one column and the start of the next.</param>
        </member>
        <member name="T:Demo3D.Sketch.State">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.TooltipMenu">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="T:Demo3D.Sketch.TrustRegionSolver">
            <para>FOR INTERNAL USE ONLY</para>
            <exclude />
        </member>
        <member name="M:Demo3D.Sketch.Util.SafeSignedAngle(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Determines the signed angle between the two vectors.
            </summary>
            <remarks>
            Return zero if either vector is zero.
            </remarks>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The signed angle between the two vectors.</returns>
        </member>
        <member name="M:Demo3D.Sketch.Util.NormalizeClosest(System.Double,System.Double)">
            <summary>
            Normalizes the specified new angle to the interval (-2PI, 2PI) such that the distance
            between the normalized angle and the old angle is minimized.
            </summary>
            <param name="oldAngle">The old angle.</param>
            <param name="newAngle">The new angle.</param>
            <returns>The new angle, normalized to the interval (-2PI, 2PI).</returns>
        </member>
        <member name="T:Demo3D.Soap.HtmlModelWriter">
            <summary>
            Server specific urls that match the current model and resources.
            </summary>
        </member>
        <member name="T:Demo3D.TableQuery.EvaluationContext">
            <summary>
            Concrete implementation of IExpressionEvaluator that wraps ExprAny
            </summary>
        </member>
        <member name="F:Demo3D.TableQuery.NodeControls.ColumnSelector.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.TableQuery.NodeControls.ColumnSelector.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.TableQuery.NodeControls.ColumnSelector.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Demo3D.TableQuery.NodeControls.SortNodeEditor.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Demo3D.TableQuery.NodeControls.SortNodeEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Demo3D.TableQuery.NodeControls.SortNodeEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Demo3D.TableQuery.IEvaluationContext">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.IEvaluationContextProvider">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.TableQuery">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.QueryNode">
            <summary>
            Base node for all query operations
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.QueryNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.QueryNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.QueryEditorAttribute">
            <summary>
            Provides display hints to the editor for each node
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.DataTableNode">
            <summary>
            Node for introducing data into a query. The DataTableNode therefore takes no tables as input, but does
            allow you to edit the initial table, or specify an expression that evaluates to a DataTable, another
            TableQuery, or a VisualList.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.DataTableNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.DataTableNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.UnaryNode">
            <summary>
            Base class for operations that operate on a single table
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.UnaryNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.UnaryNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.BinaryNode">
            <summary>
            Base class for operations that combine two tables (join and union).
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.BinaryNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.BinaryNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.LookupNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.LookupNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.AggregateFunction">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.AggregateColumn">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.GroupedTable">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.GroupKey">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.ColumnName">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.AggregateNode">
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.AggregateNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.AggregateNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.CalculateDefinition">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.CalculateNode">
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.CalculateNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.CalculateNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.FilterNode">
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.FilterNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.FilterNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.SortClause">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.SortOrder">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.SortComparer">
            <exclude />
        </member>
        <member name="T:Demo3D.TableQuery.SortNode">
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.SortNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.SortNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.ExpandNode">
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.ExpandNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.ExpandNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TableQuery.ConcatNode">
            <exclude />
        </member>
        <member name="M:Demo3D.TableQuery.ConcatNode.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.TableQuery.ConcatNode.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.UnitTesting.Test">
            <summary>
            Summary description for Class1.
            </summary>
        </member>
        <member name="T:Demo3D.VR.VRPropertiesAspect">
            <summary>The VR properties of a visual.</summary>
        </member>
        <member name="P:Demo3D.VR.VRPropertiesAspect.ClientOwnerId">
            <summary><!-- No matching elements were found for the following include tag --><include file="..\Globalization\Strings.resx" path="root/data[@name=&quot;VRPropertiesAspect_ClientOwnerId_Description&quot;]/value" /></summary>
        </member>
        <member name="P:Demo3D.VR.VRPropertiesAspect.ReserveForUser">
            <summary>Only connections with the specified username will be allowed to take ownership of this visual.</summary>
        </member>
        <member name="P:Demo3D.VR.VRPropertiesAspect.ActAsFloor">
            <summary>Allow teleportation on the the owning visual.</summary>
        </member>
        <member name="P:Demo3D.VR.VRPropertiesAspect.ClientOwnerUsername">
            <summary>The username of the client that is currently interacting with the owning visual.</summary>
        </member>
        <member name="P:Demo3D.VR.VRPropertiesAspect.InteractionMode">
            <summary>The current interaction mode of the owning visual.</summary>
        </member>
        <member name="P:Demo3D.VR.VRPropertiesAspect.InterpolationMode">
            <summary>The interpolation mode used when the owning visual moves.</summary>
        </member>
        <member name="P:Demo3D.VR.VRPropertiesAspect.OnClientOwnerChanged">
            <summary>The script event which occurs when the Client Owner changes.</summary>
        </member>
        <member name="T:Demo3D.VR.VRScenePropertiesAspect">
            <summary>The VR Properties of the scene</summary>
        </member>
        <member name="P:Demo3D.VR.VRScenePropertiesAspect.AllowTeleportOnDefaultFloor">
            <summary>When true, allows the VR user to teleport anywhere on the floor.</summary>
        </member>
        <member name="P:Demo3D.VR.VRScenePropertiesAspect.ShowDefaultFloor">
            <summary>When true, show the default floor in VR.</summary>
        </member>
        <member name="P:Demo3D.VR.VRScenePropertiesAspect.UseDefaultLighting">
            <summary>When true, use the default lighting in VR. When false, use the lighting from the scene.</summary>
        </member>
        <member name="P:Demo3D.VR.VRScenePropertiesAspect.LocalUserName">
            <summary>Use this Username when starting VR from the Visualization tab.</summary>
        </member>
        <member name="M:Demo3D.WebStore.WebStore.CheckSession">
            <summary>
            Find out if our session is still valid. sessioncheck.php returns OK if we're still
            logged in, ERROR otherwise.
            </summary>
        </member>
        <member name="M:Demo3D.WebStore.WebStore.ProcessResponseWithLogin``1(System.String,System.String)">
            <summary>
            If processing fails, tries to relog once and tries again
            </summary>
            <typeparam name="T"></typeparam>
            <param name="formUrl"></param>
            <param name="formParams"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.WebStore.WebStoreHttpGrid">
            <summary>
            Interaction logic for WebStoreHttpGrid.xaml
            </summary>
            <summary>
            WebStoreHttpGrid
            </summary>
        </member>
        <member name="M:Demo3D.WebStore.WebStoreHttpGrid.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DrawWpf.CanvasObject">
            <summary>
            Object for draggable canvas that contains the drawing shape
            </summary>
        </member>
        <member name="P:DrawWpf.CanvasPointObject.Position">
            <summary>
            Get current Position
            </summary>
        </member>
        <member name="P:DrawWpf.CanvasSelection.FirstSelection">
            <summary>
            First item in the selection
            </summary>
        </member>
        <member name="T:DrawWpf.CanvasShape">
            <summary>
            Drawing shape, used with a CanvasObject
            </summary>
        </member>
        <member name="M:DrawWpf.DraggableCanvas.UpdateGrid">
            <summary>
            Redraw grid lines
            </summary>
        </member>
        <member name="P:DrawWpf.ProfileLineObject.Start">
            <summary>
            Get or set start point of line
            </summary>
        </member>
        <member name="P:DrawWpf.ProfileLineObject.End">
            <summary>
            Get or set end point of line
            </summary>
        </member>
        <member name="M:DrawWpf.ProfilePolygon.#ctor(DrawWpf.DraggableCanvas)">
            <summary>
            Create empty polygon
            </summary>
            <param name="canvas"></param>
        </member>
        <member name="P:DrawWpf.QuickMovieLineObject.Start">
            <summary>
            Get or set start point of line
            </summary>
        </member>
        <member name="P:DrawWpf.QuickMovieLineObject.End">
            <summary>
            Get or set end point of line
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.SUPPRESS_FINDER">
             <summary>
             <para>FOR INTERNAL USE ONLY</para>
             "suppressFinder" flags
             The FLEXlm activation framework displays a License Finder Dialog if it cannot find a valid activation. 
             The user can use the dialog to identify the location of an activation file or activation server. 
             Use the FLEX_SUPRESS_FINDER_FLAGS enumeration with all Flex_CheckOut functions to control the display of 
             this finder dialog and to control whether FactoryTalk Activation messages are displayed in message boxes 
             or logged to FactoryTalk Diagnostics. Values specified for this enumeration are passed in via the 
             suppressFinder [in] parameter for the checkout function.
            
             These flags can be combined using logical OR.
            
             Callers should specify both a finder dialog disposition and an interactive mode 
             (for example, FLEX_SUPPRESS_FINDER | FLEX_NON_INTERACTIVE_MODE). Default behavior is to suppress the 
             finder and assume the product is in non-interactive mode.
             </summary>
             <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_DISPLAY_FINDER">
            <summary>
            Display FLEXlm finder dialog
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_SUPPRESS_FINDER">
            <summary>
            Suppress FLEXlm finder dialog
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_INTERACTIVE_MODE">
            <summary>
            Caller will display interactive GUI. The EvRSI warning message required in CPR 9 will be displayed in a message box.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_NON_INTERACTIVE_MODE">
            <summary>
            Caller won't display interactive GUI (e.g. running as a service) The EvRSI warning message will be logged to 
            FactoryTalk Diagnostics but not otherwise displayed.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_ENABLE_GRACE_PERIOD">
            <summary>
            Caller expects to receive grace period information.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_ENABLE_GRACE_NO_GUI">
            <summary>
            Caller expects to receive grace period informationbut does not display an interactive GUI
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_GRACE_KEEP_PERIODIC_CHECKOUT">
            <summary>
            Caller expects periodic reattempts to be kept checked out
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SUPPRESS_FINDER.FLEX_GRACE_NO_CLEAR_PERIODIC_CHECKOUT">
            <summary>
            Caller expects periodic reattempts should not clear the grace period timer
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.FeatureInfo">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Information on a Feature. A public class so clients may consume it directly.
            This is used for interop and the layout must exactly match that expected by
            the Win32 API - DO NOT CHANGE unless you understand exactly what the consequences are.
            </summary>
            <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.feature">
            <summary>
            Activation feature name
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.expiry_date">
            <summary>
            Feature expiry date [dd-mmm-yyyy]
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.start_date">
            <summary>
            Feature start date [dd-mmmm-yyyy] (date feature becomes valid)
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.version">
            <summary>
            Version string
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.serial">
            <summary>
            Feature serial number
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.num_lic">
            <summary>
            Number of available licenses
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.user_cnt">
            <summary>
            Number of processes currently using licenses
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.total_in_use">
            <summary>
            Total number of licenses in use
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.demo">
            <summary>
            DEMO license flag
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.float_in_use">
            <summary>
            Floating (served) licenses in use
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.dup">
            <summary>
            DUP group for this license
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FeatureInfo.borrowed">
            <summary>
            Number of borrowed licenses
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.SupportEndDateInfo">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Information about support contract end date. A public struct so clients may consume it directly.
            This is used for interop and the layout must exactly match that expected by
            the Win32 API - DO NOT CHANGE unless you understand exactly what the consequences are.
            </summary>
            <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.SupportEndDateInfo.feature">
            <summary>
            Activation feature name
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SupportEndDateInfo.support_expiry_date">
            <summary>
            Feature expiry date [dd-mmm-yyyy]
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.SupportEndDateInfo.serial">
            <summary>
            Feature serial number
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.GraceInfo">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Information from the grace info files (.rnl files in C:\ProgramData\Rockwell Automation\FactoryTalk Activation. 
            A public class so clients may consume it directly.
            This is used for interop and the layout must exactly match that expected by
            the Win32 API - DO NOT CHANGE unless you understand exactly what the consequences are.
            </summary>
            <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.GraceInfo.feature">
            <summary>
            Activation feature name
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.GraceInfo.version">
            <summary>
            Version string
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.GraceInfo.err">
            <summary>
            No longer used. At one point used to hold checkout error.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.GraceInfo.checkout_time">
            <summary>
            The time of the last checkout attempt.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.GraceInfo.elapsed_time">
            <summary>
            The amount of time in minutes that the feature has been in grace period.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.GraceInfo.remaining_time">
            <summary>
            The amount of time in minutes remaining in grace period.
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.LM_HANDLE">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            FLEXlm job handle structure
            </summary>
            <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.LM_HANDLE.type">
            <summary>
            The type of handle
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Combines bit flags to determine the license type. It can be
            Wattlock or FlexLM.
            </summary>
            <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_NORMAL">
            <summary>
            As in NORMAL versus DEMO
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_DEMO">
            <summary>
            as in DEMO versus NORMAL
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_NODELOCK">
            <summary>
            this is a NODELOCKed license (mutually exclusive with FLOATING)
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_FLOATING">
            <summary>
            this is a FLOATING license (mutually exclusive with NODELOCK)
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_WATTLOCK">
            <summary>
            this is a WATTLOCK license, absence of this flag indicates a FLEXLM license
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_UNPROT">
            <summary>
            this is a UNPROTected license
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_GOLDMASTER">
            <summary>
            this license request was satisfied by GoldMaster
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_PERS">
            <summary>
            this is a PERSonalized activation
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_GRACE_ACT">
            <summary>
            this is a Grace Period activation
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE.FLEX_TYPE_GRACE_EXPIRED">
            <summary>
            this is an Expired Grace Period activation
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.FLEX_LOCK_TYPE">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            : FLEX_DUP_HOST 0 == the function only checks out one license per host
            : FLEX_DUP_USER 1 == the function only checks out one license per user
            : FLEX_DUP_HOSTUSER 2 == the function only checks out one license per host/user pair
            : FLEX_DUP_NONE 3 == each call to the function checks out one license
            </summary>
            <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LOCK_TYPE.FLEX_DUP_HOST">
            <summary>
            the function only checks out one license per host
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LOCK_TYPE.FLEX_DUP_USER">
            <summary>
            the function only checks out one license per user
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LOCK_TYPE.FLEX_DUP_HOSTUSER">
            <summary>
            the function only checks out one license per host/user pair
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LOCK_TYPE.FLEX_DUP_NONE">
            <summary>
            each call to the function checks out one license
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_LOCK_TYPE.FLEX_DUP_SITE">
            <summary>
            only one license of a particular type will be checked out per site
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.FLEX_SYS_TYPE">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Only used with checkout functions. Indicates the order that the
            system will search for activations in.
            </summary>
            <exclude />
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_SYS_TYPE.WATTLOCK_FLEX">
            <summary>
            looks for wattlock first, then flex
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_SYS_TYPE.FLEXLM_ONLY">
            <summary>
            FlexLM only
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_SYS_TYPE.WATTLOCK_ONLY">
            <summary>
            Wattlock only
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.FLEX_SYS_TYPE.FLEX_WATTLOCK">
            <summary>
            Flex first, then wattlock
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            Activation definitions.
            </summary>
            <remarks>
            Interop and wrapper methods for FactoryTalk Activation
            </remarks>
            <exclude />
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD">
            <summary>
            This uses WINAPI as the calling convention 
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo">
            <summary>
            Information on a checked out feature. 
            Public so clients may consume it directly.
            This is used for interop and the layout must exactly match that expected by
            the Win32 API - DO NOT CHANGE unless you understand exactly what the consequences are.
            This MUST be defined as a struct. When defined as a class it does not marshal correctly.
            This means that when creating one of these objects the fields must be explicitly initialized
            since a default constructor is not supported.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.#ctor(System.Boolean)">
            <summary>
            Reset the struct members
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.Reset">
            <summary>
            Initializes all fields to defaults.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.Copy(RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo)">
            <summary>
            Copies the source object to this instance.
            </summary>
            <param name="s">The source object</param>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.feature">
            <summary>
            feature name
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.expiry_date">
            <summary>
            feature expiry date [dd-mmm-yyyy]
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.start_date">
            <summary>
            feature start date [dd-mmmm-yyyy] (date feature becomes valid)
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.version">
            <summary>
            version string
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.serial">
            <summary>
            feature serial number
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.product_name">
            <summary>
            product name
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.num_lic">
            <summary>
            number of available licenses
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.user_cnt">
            <summary>
            number of processes currently using licenses
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.total_in_use">
            <summary>
            total number of licenses in use
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.demo">
            <summary>
            DEMO license flag (TRUE/FALSE)
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.float_in_use">
            <summary>
            Floating (served) licenses in use
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.dup">
            <summary>
            Dup group for this license. This refers to the dup grouping in effect for 
            this license. This is dependent on the dup group passed to the checkout function
            the first time an activation of this type is checked out.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.borrowed">
            <summary>
            Number of borrowed licenses
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.licenseType">
            <summary>
            [out] Activation type: OR'd set of activation flags. See the
            enumerated type FLEX_LICENSE_TYPE.
            Indicates the type of activation that was checked out.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.job">
            <summary>
            [out]
            FLEXlm job handle. Set to valid value on successful checkout of Flex license. 
            If Wattlock, then this value should be set to 0. May be used as input to 
            other FlexLM specific calls
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.drive">
            <summary>
            [out] 
            Activation host drive (WattLock only)
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo.server">
            <summary>
            [out] 
            FlexLM only. The server from which the license was checked out.
            Activation server hosting this activation 
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_CheckOutLicenseInfoNET(System.String,System.String,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32,System.Int32,RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo@)">
            <summary>
            Checks out an activation an returns a detailed activation data struct
            </summary>
            <param name="featureName">The feature to checkout</param>
            <param name="featureVersion">The version of the feature to checkout</param>
            <param name="lockNew">Can have one of the values from the
            FLEX_LOCK_TYPE enumeration, specified as an integer.</param>
            <param name="callback">delegate of a callback</param>
            <param name="suppressFinder">true to display a dialog</param>
            <param name="systemType">A value from the FLEX_SYS_TYPE enum. 
            This determines the search order used to find a license, either wattlock
            or flexlm.</param>
            <param name="featureInfo">The results of the checkout are put into this struct.
            This must be memory allocated using the Marshal API.
            </param>
            <returns>FLEX_OK if normal checkout, FLEX_DEMO if DEMO checkout,
            all other returns indicate an error.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_CheckOutLicenseNET(System.IntPtr@,System.String,System.String,System.Int32@,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Check out a standard activation
            </summary>
            <param name="jobs">Array of job handles. Filled by method.</param>
            <param name="featureName">Name of feature/activation key</param>
            <param name="featureVersion">Minimum activation version to be checked out.</param>
            <param name="serialNumber">Serial number of checked out activation. Filled by method.</param>
            <param name="lockNew">FLEXlm DUP_GROUP controlling activation sharing. Cast Activation.FLEX_LOCK_TYPE to int.</param>
            <param name="callback">Method ptr to be called if connectivity is lost between server and client.</param>
            <param name="licenseType">License type of checked out activation. Filled by method. int cast of Activation.FLEX_LICENSE_TYPE.</param>
            <param name="suppressFinder">Flag controlling GracePeriod GUI display. int cast of Activation.SUPPRESS_FINDER.</param>
            <param name="systemType">Activation sub-system type. int cast of Activation.FLEX_SYS_TYPE.</param>
            <returns>int representation of FTA error</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GraceGetInfo(System.IntPtr,System.Int32@)">
            <summary>
            Returns a buffer filled with grace information structures corresponding
             to all features in grace period.
            </summary>
            <param name="graceInfo">Grace info structure. Filled by method.</param>
            <param name="dwBufLen"></param>
            <returns>int representation of FLEX_ERR</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetAPIVersion">
            <summary>
             Returns DWORD representation of API version if successful, 0 if not successful
             Version number is a translation of the version string AA.BB.CC.DD into a 32-bit
             unsigned integer as 0xAABBCCDD
            </summary>
            <returns>DWORD representation of FTA API version.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.IsPersonalized">
            <summary>
            Determines if the Activation DLL is Personalized or not
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.PersData">
            <summary>
            Personalized info data structure
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.PersData.Init">
            <summary>
            Initializes all fields to defaults.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.PersData.Copy(RockwellAutomation.FTActivation.Activation.PersData)">
            <summary>
            Copies the source object to this instance.
            </summary>
            <param name="s">The source object</param>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchCoName">
            <summary>
            company name
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchCoAddress">
            <summary>
            company address
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchCoRegUser">
            <summary>
            company registered user
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchCoPhone">
            <summary>
            company phone number
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchText">
            <summary>
            text buffer
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchSerial">
            <summary>
            Serial Number
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchProdInfo">
            <summary>
            Product-specific functional information encoded in the activation file with the 
            tag PROD_INFO. This provides information about the functional level of the product 
            (Standard vs. Professional, for example) and about the capacity (10 clients, for example).
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchExpiryDate">
            <summary>
            Expiration date
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.PersData.uchProdName">
            <summary>
            Product name
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_CheckOutPersNET(System.IntPtr@,System.String,System.String,System.Int32@,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32@,System.Int32,System.Int32,RockwellAutomation.FTActivation.Activation.PersData@)">
            <summary>
            Checks out a personalized activation license.
            </summary>
            <param name="jobs">Handle to the activation license</param>
            <param name="featureName">The feature to checkout</param>
            <param name="featureVersion">The version of the feature to checkout</param>
            <param name="serialNumber">Serial number of checked out activation. Filled by method.</param>
            <param name="lockNew">Can have one of the values from the
            FLEX_LOCK_TYPE enumeration, specified as an integer.</param>
            <param name="callback">delegate of a callback</param>
            <param name="licenseType">Indicates the type of activation that was checked out</param>
            <param name="suppressFinder">true to display a dialog</param>
            <param name="systemType">A value from the FLEX_SYS_TYPE enum.</param> 
            <param name="persInfo">Contains personalized license information.</param>
            <returns>FLEX_OK if normal checkout, FLEX_DEMO if DEMO checkout,
            all other returns indicate an error.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_CheckOutPersInfoNET(System.String,System.String,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32,System.Int32,RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo@,RockwellAutomation.FTActivation.Activation.PersData@)">
            <summary>
            Checks out a personalized activation license.
            </summary>
            <param name="featureName">The feature to checkout</param>
            <param name="featureVersion">The version of the feature to checkout</param>
            <param name="lockNew">Can have one of the values from the
            FLEX_LOCK_TYPE enumeration, specified as an integer.</param>
            <param name="callback">delegate of a callback</param>
            <param name="suppressFinder">true to display a dialog</param>
            <param name="systemType">A value from the FLEX_SYS_TYPE enum. 
            This determines the search order used to find a license, either wattlock
            or flexlm.</param>
            <param name="featureInfo">The results of the checkout are put into this struct.
            This must be memory allocated using the Marshal API.
            </param>
            <param name="persInfo">Personalized activation info structure. Filled by method.</param>
            <returns>FLEX_OK if normal checkout, FLEX_DEMO if DEMO checkout,
            all other returns indicate an error.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_CheckOutPersListNET(System.IntPtr,System.String[],System.String[],System.IntPtr,System.IntPtr,RockwellAutomation.FTActivation.Activation.PersData@,System.Int32,System.Int32,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32,System.Int32)">
            <summary>
            Checks out a list of Personalized activations
            </summary>
            <param name="jobs">Array of job handles. Filled by method.</param>
            <param name="featureNames">String array of feature names/activation keys.</param>
            <param name="featureVersions"></param>
            <param name="systemType">Activation sub-system type. int cast of Activation.FLEX_SYS_TYPE.</param>
            <param name="serialNumbers">Array of checked out serial numbers. Filled by method.</param>
            <param name="licenseTypes">Array of license types of checked out activations. Filled by method. int casts of Activation.FLEX_LICENSE_TYPE</param>
            <param name="persInfo">Personalized activation info structure. Filled by method.</param>
            <param name="numFeatures">Number of activations features in featureNames array.</param>
            <param name="lockNew">FLEXlm DUP_GROUP controlling activation sharing. Cast Activation.FLEX_LOCK_TYPE to int.</param>
            <param name="single">Simple flag. Check out single activation if != 0.</param>
            <param name="callback">Method ptr to be called if connectivity is lost between server and client.</param>
            <param name="suppressFinder">Flag controlling GracePeriod GUI display. int cast of Activation.SUPPRESS_FINDER.</param>
            <returns>int representation of a FTA error</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GraceRegHwnd(System.IntPtr)">
            <summary>
            Registers a window to be the parent of the grace period warning dialogs so
            the warning dialog are modal to the window
            </summary>
            <param name="hwnd">Window handle to the primary window of the calling application.</param>
            <returns>int representation of a FTA error.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_Unload">
            <summary>
            Should be called prior to unloading the FactoryTalk activation DLL. If this function is 
            not called, FactoryTalk activation cannot call CoUninitialize() on its threads that use COM.
            </summary>
            <returns>int representation of a FTA error.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GraceClearAllGracePeriods">
            <summary>
            Allows caller to clear all GracePeriods for all activations associated with this product. 
            Capacity products should use this function to clear GracePeriods after they have been 
            successfully activated.
            </summary>
            <returns>int representation of a FTA error.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_CheckOutListNET(System.IntPtr,System.String[],System.String[],System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32,System.Int32)">
            <summary>
            Check out a list of standard activations
            Can either stop checking at first success (single == 1) or 
             return all successful checkouts (single == 0)
            </summary>
            <param name="jobs"></param>
            <param name="featureNames">String array of feature names/activation keys.</param>
            <param name="featureVersions"></param>
            <param name="systemType">Activation sub-system type. int cast of Activation.FLEX_SYS_TYPE.</param>
            <param name="serialNumbers">Array of checked out serial numbers. Filled by method.</param>
            <param name="licenseTypes">Array of license types of checked out activations. Filled by method. int casts of Activation.FLEX_LICENSE_TYPE</param>
            <param name="numFeatures"></param>
            <param name="lockNew">FLEXlm DUP_GROUP controlling activation sharing. Cast Activation.FLEX_LOCK_TYPE to int.</param>
            <param name="single">Simple flag. Check out single activation if != 0.</param>
            <param name="callback">Method ptr to be called if connectivity is lost between server and client.</param>
            <param name="suppressFinder">Flag controlling GracePeriod GUI display. int cast of Activation.SUPPRESS_FINDER.</param>
            <returns>int representation of a FLEX_ERR</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_CheckInLicense(System.IntPtr,System.String,System.Int32)">
            <summary>
            Checks in a FTA activation
            </summary>
            <param name="job">FLEXlm Job handle. Filled by method.</param>
            <param name="featureName">Name of feature/activation key</param>
            <param name="keepConnection">Simple flag controlling whether network connection is retained. Set to 0.</param>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetSearchList(System.IntPtr@)">
            <summary>
            Returns a ptr to a list of files or server names configured on this host
            </summary>
            <param name="searchList">String arrary of files/server names. Filled by method.</param>
            <returns>int representation of a FTA error</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetFeatureList(System.IntPtr,System.Int32)">
            <summary>
            Returns list of available features
            If the passed-in job is null, the fxn creates a new job
            </summary>
            <param name="job">FLEXlm Job handle. Filled by method.</param>
            <param name="searchAll">1 to search all activation files, 0 to only search first file located.</param>
            <returns>int representation of a FTA error</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetFeatureInfoEx(System.IntPtr,System.String,System.IntPtr,System.Int32@)">
            <summary>
            Returns a buffer filled with feature information structures (corresponding
             to all located FEATURE/INCREMENT lines for Flex licenses)
            </summary>
            <param name="job">FLEXlm Job handle. Filled by method.</param>
            <param name="featureName">Name of feature/activation key</param>
            <param name="featureInfo">Activation feature info structure. Filled by method.</param>
            <param name="dwBufLen"></param>
            <returns>int representation of FLEX_ERR</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetAllFeatureInfoEx(System.IntPtr,System.String,System.IntPtr,System.Int32@)">
            <summary>
            Returns a buffer filled with feature information structures (corresponding
             to all located FEATURE/INCREMENT lines for Flex licenses). This includes
             information for CodeMeter activations that have expired.
            </summary>
            <param name="job">FLEXlm Job handle. Filled by method.</param>
            <param name="featureName">Name of feature/activation key</param>
            <param name="featureInfo">Activation feature info structure. Filled by method.</param>
            <param name="dwBufLen"></param>
            <returns>int representation of FLEX_ERR</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetErrorInfo(System.IntPtr)">
            <summary>
            Returns LM_ERR_INFO*
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetConfigSettings(System.IntPtr)">
            <summary>
            Gets the configuration settings for server processes.
            </summary>
            <param name="pSettings">Pointer to stucture to return the Configuration Settings.</param>
            <returns>int representation of FLEX_ERR</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetServerSearchPathCount">
            <summary>
            Gets the count of how many servers are configured in the search path.
            </summary>
            <returns>Count of configured servers</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetServerSearchPath(System.IntPtr)">
            <summary>
            Gets list of servers configured in the search path.
            </summary>
            <param name="pSearchPaths">Pointer to an array of strings containing machine names.</param>
            <returns>Returns the count of configured servers.</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetSerialNumberCount(System.Boolean)">
            <summary>
            Gets the number of available serial numbers.
            </summary>
            <param name="bSearchAll">Flag to search all of server path or just local machine.</param>
            <returns>Returns the count of available serial numbers.</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetSerialNumberList(System.Boolean,System.IntPtr)">
            <summary>
            Gets list of servers configured in the search path.
            </summary>
            <param name="bSearchAll">Flag to search all of server path or just local machine.</param>
            <param name="pSerialNumbers">Pointer to an array of strings containing serial numbers.</param>
            <returns>Returns the count of available serial numbers.</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetSerialNumberInfoCount(System.String,System.Boolean)">
            <summary>
            Gets the number of available serial numbers.
            </summary>
            <param name="serialNumber">Serial number to get usage data for.</param>
            <param name="bSearchAll">Flag to search all of server path or just local machine.</param>
            <returns>Returns the count of available usage data structures.</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetSerialNumberInfo(System.String,System.Boolean,System.IntPtr)">
            <summary>
            Gets list of serial number available to this machine.
            </summary>
            <param name="serialNumber">Serial number to get usage data for.</param>
            <param name="bSearchAll">Flag to search all of server path or just local machine.</param>
            <param name="pSerialNumbers">Pointer to an array of usage data structures.</param>
            <returns>Returns the count of available usage data structures.</returns>        
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.SupportEndDateInfo">
            <summary>
            Information on a checked out feature. 
            Public so clients may consume it directly.
            This is used for interop and the layout must exactly match that expected by
            the Win32 API - DO NOT CHANGE unless you understand exactly what the consequences are.
            This MUST be defined as a struct. When defined as a class it does not marshal correctly.
            This means that when creating one of these objects the fields must be explicitly initialized
            since a default constructor is not supported.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.SupportEndDateInfo.#ctor(System.Boolean)">
            <summary>
            Reset the struct members
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.SupportEndDateInfo.Reset">
            <summary>
            Initializes all fields to defaults.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.SupportEndDateInfo.Copy(RockwellAutomation.FTActivation.Activation.SupportEndDateInfo)">
            <summary>
            Copies the source object to this instance.
            </summary>
            <param name="s">The source object</param>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.SupportEndDateInfo.feature">
            <summary>
            feature name
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.SupportEndDateInfo.support_expiry_date">
            <summary>
            feature expiry date [dd-mmm-yyyy]
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.SupportEndDateInfo.serial">
            <summary>
            feature serial number
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Flex_GetSupportEndDateInfo(System.String,System.Int32,System.IntPtr,System.Int32@)">
            <summary>
            Returns a buffer filled with support end date information structures for the given
            feature name that are within the given time period of expiring. If time period given
            is 0 then all serial numbers of the given feature name will be returned.
            </summary>
            <param name="featureName">Name of feature/activation key</param>
            <param name="supportEndDateInfo">Support end date info structure. Filled by method.</param>
            <param name="dwBufLen"></param>
            <param name="timePeriodInDays">The returned serial numbers will be within this number of days of expiration of their support contract.</param>
            <returns>int representation of FLEX_ERR</returns>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.LM_ERR_INFO">
            <summary>
            FLEXlm error info struct
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_ERR_INFO.maj_errno">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_ERR_INFO.min_errno">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_ERR_INFO.sys_errno">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_ERR_INFO.lic_files">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_ERR_INFO.feature">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_ERR_INFO.context">
            <summary>
            
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.LM_VENDORCODE_PUBKEYINFO">
            <summary>
            FLEXlm vendor code public key info structure
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_VENDORCODE_PUBKEYINFO.pubkeysize">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_VENDORCODE_PUBKEYINFO.pubkey">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_VENDORCODE_PUBKEYINFO.fptr">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_VENDORCODE_PUBKEYINFO.strength">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.LM_VENDORCODE_PUBKEYINFO.sign_level">
            <summary>
            
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.VENDORCODE">
            <summary>
            FLEXlm vendor code structure
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.data">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.keys">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.flexlm_version">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.flexlm_revision">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.flexlm_patch">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.behavior_ver">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.crokeys">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.signs">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.strength">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.sign_level">
            <summary>
            
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.VENDORCODE.pubkeyinfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.JobList">
            <summary>
            Object for handling a list of FLEXlm job handles
            </summary>
        </member>
        <member name="P:RockwellAutomation.FTActivation.Activation.JobList.JobListPtr">
            <summary>
            
            </summary>
        </member>
        <member name="P:RockwellAutomation.FTActivation.Activation.JobList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.JobList.#ctor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.JobList.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.JobList.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:RockwellAutomation.FTActivation.Activation.JobList.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.FLEX_ERRS">
            <summary>
            FTA error number definitions
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_OK">
            <summary>
            all good
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_DEMO">
            <summary>
            indicates that a checkout has found a DEMO license - product must act accordingly
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_CHECKOUT_ERR">
            <summary>
            unspecified checkout error
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_UNSPEC_ERR">
            <summary>
            general unspecified error
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NEWJOB_ERR">
            <summary>
            error while creating a new job
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_BAD_ARG">
            <summary>
            bad argument passed into a Flex_ function
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_JOB">
            <summary>
            called a function that requires a job, but didn't pass in a job
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_LOG_FAIL">
            <summary>
            failed to log a message with FTDiagnostics
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_NAME">
            <summary>
            can't make a WattLock key name from this FLEXlm feature name [deprecated]
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_LICFILE">
            <summary>
            can't find license file
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_SERVER">
            <summary>
            can't connect to license server
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_MAX_USERS">
            <summary>
            already reached max users
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_FEATURE">
            <summary>
            feature name is not available
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_HOST_ERR">
            <summary>
            invalid host
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_EXPIRED">
            <summary>
            feature has expired
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_SERVERLINES">
            <summary>
            no server lines in license file
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_BADHOST">
            <summary>
            can't find SERVER hostname
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_CANTCONNECT">
            <summary>
            can't connect to license server
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NOSERVSUPP">
            <summary>
            license server doesn't support this feature
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_SERVBUSY">
            <summary>
            license server busy - retry checkout
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_OLDVER">
            <summary>
            license file doesn't support this version
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_TOOMANY">
            <summary>
            can't checkout this many instances of this feature
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_ETHER">
            <summary>
            can't find an ethernet adaptor
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_READLIC">
            <summary>
            can't read the license file
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_TOOEARLY">
            <summary>
            feature is not yet available  (current date less then start date)
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_CLOCKBAD">
            <summary>
            clock diff between client and server is too great
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_FEAT_EXCLUDE">
            <summary>
            the user/host/display is excluded by the end-user options file
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_FEAT_NOTINCLUDE">
            <summary>
            the user/host/display is not included by the end-user options file
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NOSERVRESP">
            <summary>
            server did not respond
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_BADCHECKSUM">
            <summary>
            poor network communications
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NONETWORK">
            <summary>
            no TCP/IP stack available
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NONETOBORROW">
            <summary>
            no licenses available to borrow
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NOBORROWSUPP">
            <summary>
            borrow not supported
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_SERVOLDVER">
            <summary>
            server is older than client 
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_USER_BASED">
            <summary>
            incorrect number of USERS/HOSTS included in end-user options file
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_MAXLIMIT">
            <summary>
            end-user option MAX has been specified for this feature
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_BADSYSDATE">
            <summary>
            clock has been set back
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_SERVER_REMOVED">
            <summary>
            license file inconsistency between this client and the server
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_HOSTDOWN">
            <summary>
            license server system is down
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_VENDOR_DOWN">
            <summary>
            vendor daemon is down
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_RESVFOROTHERS">
            <summary>
            all licenses are reserved for others
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_BORROW_TOOLONG">
            <summary>
            can't borrow that long
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NODONGLE">
            <summary>
            dongle not attached
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_SERVER_MAXED_OUT">
            <summary>
            vendor daemon can't handle more users
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_TSOK_ERR">
            <summary>
            can't user terminal server client
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NODONGLEDRIVER">
            <summary>
            dongle driver not installed
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_BORROW_EXPIRED">
            <summary>
            borrowed license has expired
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_BADCODE">
            <summary>
            bad license file encryption  
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_REG_ERR">
            <summary>
            Error retrieving value from the registry 
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_DIAG">
            <summary>
            FTDiagnostics isn't installed
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_EVENT">
            <summary>
            Couldn't locate the specified heart beat event
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_ATTR_ERR">
            <summary>
            Failed to set a FLEXlm attribute
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_GOLD_MASTER">
            <summary>
            The registry settings for GoldMaster or activation subsystem prevented a GoldMaster checkout
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_PERS">
            <summary>
            Can't parse Personalization data from this CONFIG
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_PERS_ONLY">
            <summary>
            Only a personalized activation is available, but this isn't a personalized method call
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_UNPERS">
            <summary>
            This method call failed because this is not a personalized DLL. No activation check was performed.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_GRACE_EXPIRED">
            <summary>
            The Grace Period for this activation has expired
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_GRACE_REC">
            <summary>
            No record of the requested Grace Period exists
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_GRACE_EXISTS">
            <summary>
            Grace Period record exists.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_FILE">
            <summary>
            Grace Period record file doesn't exist.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_FILE_ERR">
            <summary>
            File error while reading the Grace Period record list.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_ENCRYPT_ERR">
            <summary>
            Error encrypting or decrypting the Grace Period record list.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_GUI">
            <summary>
            No Grace Period warning dialogs will be displayed.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_GRACE_EVENT_ERR">
            <summary>
            Error with Grace Period events.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.FLEX_ERRS.FLEX_NO_DISPLAYNAME">
            <summary>
            No Grace Period feature name was set.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.#ctor">
            <summary>
            create a default object
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Dispose">
            <summary>
            This supports the floating license. This will return to the
            license manager all open instances of the license.
            NOTE: DO NOT REMOVE THIS METHOD.
            Even though this class itself does not do much with the Dispose, 
            derived classes can override the dispose method and to ensure that
            these function correctly these methods must be left in place.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Finalize">
            <summary>
            Release unmanaged resources. 
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Dispose(System.Boolean)">
            <summary>
            Called by both a finalizer and a dispose method. Virtual so it may be overridden
            in a derived class. 
            </summary>
            <param name="disposing">true if invoked from user code via Dispose, otherwise
            false when invoked from the finalizer</param>
        </member>
        <member name="P:RockwellAutomation.FTActivation.Activation.DefaultFeatureInfo">
            <summary>
            A collection of default settings. This creates a new instance of
            this object so it may be overwritten as needed
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Copy(RockwellAutomation.FTActivation.FeatureInfo)">
            <summary>
            Creates a new object, copies the source to the it.
            </summary>
            <param name="src">contains the data that will populat the new object</param>
            <returns>the new object</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Copy(RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo)">
            <summary>
            Creates a new object, copies the source to it and returns the new object.
            </summary>
            <param name="src">ActivationFeatureInfo object to be copied</param>
            <returns>Copy of the passed-in ActivationFeatureInfo.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Copy(RockwellAutomation.FTActivation.FeatureInfo@,RockwellAutomation.FTActivation.Activation.ActivationFeatureInfo)">
            <summary>
            Copies portions of the ActivationFeatureInfo struct to the destination
            FeatureInfo struct.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.MyFLEX_EXITCALL_CALLBACKRoutine(System.String)">
            <summary>
            DO NOT USE with original callback definition.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.IsActivationInstalled(System.String,System.String)">
            <summary>
            This is useful for node-locked activation which will do a one-time check for the 
            lifetime of the application. This is less useful (or perhaps not at all for 
            those apps that use floating licenses, since that implies that the license must
            remain checked out throughout the lifetime of the app. 
            This will attempt to checkout the file. It records if it succeeded, then checks the file
            back in again. When this method returns the activation count is unchanged.
            </summary>
            <param name="featureName">The name of the license to checkout</param>
            <param name="featureVersion">The feature to check out. Usually set at 1.0</param>
            <returns>true if an activation exist, otherwise false</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckinLicense(System.IntPtr,System.String,System.Int32,System.String@)">
             <summary>
             Checks in a single license.
             This overload requires the caller to handle all intermediate caching issues, such as those 
             related to the Job handle.
             </summary>
             <param name="job">FLEXlm Job handle. Filled by method.</param>
             <param name="featureName">Name of feature/activation key</param>
             <param name="keepConnection">Simple flag controlling whether network connection is retained. Set to 0.</param>
             <param name="errorMessage">Error message returned from FTA. Filled by method.</param>
             <remarks>This call never returns an error indication. It will not fail even if nothing
             got checked in. The only failures from here are catastrophic in nature.
            </remarks>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckinLicense(System.IntPtr,System.String)">
             <summary>
             Checks in a single license.
             This overload requires the caller to handle all intermediate caching issues
             related to the Job handle.
            		This will only checkin a FlexLM license. If the license was a wattlock then a method that will 
             checkin  a wattlock license must be used.
             </summary>
             <param name="job">The job handle</param>
             <param name="feature">The feature to be checked in</param>
             <remarks>This call never returns an error indication. It will not fail even if nothing
             got checked in. The only failures from here are catastrophic in nature.
             Exceptions are rethrown and must be handled by the caller.
            </remarks>
            <exception>This throws the underlying exception type</exception>
        </member>
        <member name="T:RockwellAutomation.FTActivation.Activation.CheckoutRecord">
            <summary>
            Contains information about a checked out license.
            This encapsulates many separate chunks of data.
            All values initialized to defaults suitable with .NET and
            floating licenses.
            </summary>
            <remarks>
            SOR 212: Software leasing
            </remarks>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutRecord.#ctor">
            <summary>
            Create default object
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.serialNumber">
            <summary>
            [out]
            On successful checkout this contains the serial number of the 
            license that was checked out. 
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.licenseType">
            <summary>
            [out]
            On successful checkout this contains the type of license that
            was checked out. 
            This is a combination of 
            bit flags from the FLEX_LICENSE_TYPE enumeration.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.flexError">
            <summary>
            [out]
            Contains error code from low-level API call.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.errorMessage">
            <summary>
            [out]
            On failure this contains an error message.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.job">
            <summary>
            [out]
            On success this congtains a job handle if the license type supports
            handles. For Wattlock this field is zero. For FlexLM this field contains 
            a handle that must be saved by the caller. This handle must be used to 
            checkin the license.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.featureName">
            <summary>
            [in]
            The feature name to obtain a license for.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.featureVersion">
            <summary>
            [in]
            The version. This must be set to 1.0
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.lockType">
            <summary>
            [in]
            Set on input to the type of license desired. 
            FLEX_DUP_HOST 0 == the function only checks out one license per host
            FLEX_DUP_USER 1 == the function only checks out one license per user
            FLEX_DUP_HOSTUSER 2 == the function only checks out one license per host/user pair
            FLEX_DUP_NONE 3 == each call to the function checks out one license
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.callback">
            <summary>
            [in]
            Used with connection callbacks. As of 5.2004 this is non-functional.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.systemType">
            <summary>
            [in]
            2.2004 DAL: definitions for SystemSearchType parameter
            Use FLEX_SYS_TYPE enumerated type
            FLEX_SYS_TYPE_WATTLOCK_FLEX = 0 looks for wattlock first, then flex
            FLEX_SYS_TYPE_FLEXLM_ONLY = 1,	 only looks for flex
            FLEX_SYS_TYPE_WATTLOCK_ONLY = 2		only looks for wattlock
            FLEX_SYS_TYPE_FLEX_WATTLOCK = 3	looks for flex, then wattlock
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.suppressFinder">
            <summary>
            [in]
            Callers should specify both a finder dialog disposition and an interactive mode 
            (for example, FLEX_SUPPRESS_FINDER | FLEX_NON_INTERACTIVE_MODE). Default behavior is to suppress the 
            finder and assume the product is in non-interactive mode.
            
            FLEX_DISPLAY_FINDER = 0x0                       Display FLEXlm finder dialog
            FLEX_SUPPRESS_FINDER = 0x1,                     Suppress FLEXlm finder dialog
            FLEX_INTERACTIVE_MODE = 0x2,                    Caller will display interactive GUI
            FLEX_NON_INTERACTIVE_MODE = 0x4,                Caller won't display interactive GUI (e.g. running as a service)
            FLEX_ENABLE_GRACE_PERIOD = 0x8,                 Caller expects to receive grace period information.
            FLEX_ENABLE_GRACE_NO_GUI = 0x10,                Caller expects to receive grace period informationbut does not display an interactive GUI
            FLEX_GRACE_KEEP_PERIODIC_CHECKOUT = 0x20,       Caller expects periodic reattempts to be kept checked out
            FLEX_GRACE_NO_CLEAR_PERIODIC_CHECKOUT =	0x40,   Caller expects periodic reattempts should not clear the grace period timer
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.checkedOut">
            <summary>
            [out]
            Contains the results of the call to CheckoutLicense. 
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.synchronized">
            <summary>
            [out]
            Indicates the method used to checkout the license. If a newer DLL is found and 
            used then the information in the checkout record is synchronized to the 
            actual license that was checked out, so no additional methods need to be
            called to determine the license type, etc. for the one actually checked out.
            If not synchronized then some of the license information will not be filled in 
            on return, and additional calls are necessary, and even with that there are no 
            guarantees that clients will be able to match the actual license that was checked out
            to the activation record data.
            
            If synchronized the afi field will have valid values in them.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.afi">
            <summary>
            If the checkout call is synchronized then the contents of this field 
            are valid and filled in.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FTActivation.Activation.CheckoutRecord.personalizationInfo">
            <summary>
            Filled in with personalization information when used with personalized checkout method
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutRecord.Reset">
            <summary>
            Resets the object to default values.
            Useful when invoking Checkout in a loop and
            using the same info object.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutLicense(System.IntPtr@,System.String,System.String,RockwellAutomation.FTActivation.FLEX_LOCK_TYPE,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32@,System.Int32@,RockwellAutomation.FTActivation.Activation.FLEX_ERRS@,System.String@)">
            <summary>
            Checks out a single license
            </summary>
            <param name="job">FLEXlm Job handle. Filled by method.</param>
            <param name="featureName">Name of feature/activation key</param>
            <param name="featureVersion">Minimum activation version to be checked out.</param>
            <param name="lockType">FLEX_DUP_HOST=checks out one license per host,FLEX_DUP_USER=checks out one license per user,FLEX_DUP_HOSTUSER=checks out one license per host/user pair,FLEX_DUP_NONE=checks out one license</param>
            <param name="suppressFinder"></param>
            <param name="callback"></param>
            <param name="serialNumber">Serial number of checked out activation. Filled by method.</param>
            <param name="licenseType">License type of checked out activation. Filled by method. int cast of Activation.FLEX_LICENSE_TYPE.</param>
            <param name="flexError">int representation of FLEX_ERR returned from FTA function. Filled by method.</param>
            <param name="errorMessage">Error message returned from FTA. Filled by method.</param>
            <returns>true if an activation was checked out, false otherwise</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutLicense(RockwellAutomation.FTActivation.Activation.CheckoutRecord@)">
            <summary>
            Attempts to checkout a license for the given feature name using
            the values in the input object. Values are returned via the 
            same object.
            This detects the version of RSDesk32 and uses the appropriate method
            </summary>
            <param name="info">the object that contains input args and will be populated with the results.</param>
            <returns>true if a license was checked out, otherwise false.</returns>
            <exception>throws whatever is thrown by the underlying API. This can be anything.</exception>
            <remarks>
            SOR 212: Software leasing
            </remarks>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutLicenseSyncd(RockwellAutomation.FTActivation.Activation.CheckoutRecord@)">
            <summary>
            Attempts to checkout a license for the given feature name using
            the values in the input object. Values are returned via the 
            same object.
            This uses the new methods exported from the activation DLL that does guarantees that
            the checkout info is synchronized to the license that was actually checked out.
            </summary>
            <param name="info">the object that contains input args and will be populated with the results.</param>
            <returns>true if a license was checked out, otherwise false.</returns>
            <exception>throws whatever is thrown by the underlying API. This can be anything.</exception>
            <remarks>
            SOR 212: Software leasing
            </remarks>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutPersonalizedLicenseSyncd(RockwellAutomation.FTActivation.Activation.CheckoutRecord@)">
            <summary>
            Attempts to checkout a license for the given feature name using
            the values in the input object. Values are returned via the 
            same object.
            This uses the new methods exported from the activation DLL that does guarantees that
            the checkout info is synchronized to the license that was actually checked out.
            </summary>
            <param name="info">the object that contains input args and will be populated with the results.</param>
            <returns>true if a license was checked out, otherwise false.</returns>
            <exception>throws whatever is thrown by the underlying API. This can be anything.</exception>
            <remarks>
            SOR 212: Software leasing
            </remarks>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetFlexAPIVersion">
            <summary>
            Returns the API version number. 
            Flex defines it as...
            Returns DWORD representation of API version if successful, 0 if not successful
            	Version number is a translation of the version string AA.BB.CC.DD into a 32-bit
            	unsigned integer as 0xAABBCCDD.
            <para>For our purposes just treat it as an integer and do a straight numeric 
            comparison on the value. The 1st version detected is...
            </para>
            Since this should be constant throughout the duration of this session this will
            cache the results.
            </summary>
            <returns>the version number if successful, otherwise 0.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutList(RockwellAutomation.FTActivation.Activation.JobList@,System.String[],System.String[],RockwellAutomation.FTActivation.FLEX_LOCK_TYPE,System.Int32,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32[]@,System.Int32[]@,RockwellAutomation.FTActivation.Activation.FLEX_ERRS@,System.String@)">
            <summary>
            Checks out a list of licenses
            </summary>
            <param name="jobs">User must call Marshal.FreeCoTaskMem to free the memory returned</param>
            <param name="featureNames">String array of feature names/activation keys.</param>
            <param name="featureVersions"></param>
            <param name="lockType">FLEX_DUP_HOST=checks out one license per host,FLEX_DUP_USER=checks out one license per user,FLEX_DUP_HOSTUSER=checks out one license per host/user pair,FLEX_DUP_NONE=checks out one license</param>
            <param name="single">If 0 all licenses from the list will be locked, else if non zero only the first lecense in the list is checked out</param>
            <param name="serialNumbers">Array of checked out serial numbers. Filled by method.</param>
            <param name="licenseTypes">ORed values of FLEX_TYPE_NORMAL(0x1),FLEX_TYPE_DEMO(0x2),FLEX_TYPE_NODELOCK(0x4),FLEX_TYPE_FLOATING(0x8),FLEX_TYPE_WATTLOCK(0x10)</param>
            <param name="flexError">int representation of FLEX_ERR returned from FTA function. Filled by method.</param>
            <param name="errorMsg">Error message returned from FTA. Filled by method.</param>
            <param name="suppressFinder">Flag controlling GracePeriod GUI display. int cast of Activation.SUPPRESS_FINDER.</param>
            <param name="callback">Method ptr to be called if connectivity is lost between server and client.</param>
            <returns>true if an activation was checked out, false otherwise</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.CheckoutPersonalizedList(RockwellAutomation.FTActivation.Activation.JobList@,System.String[],System.String[],RockwellAutomation.FTActivation.FLEX_LOCK_TYPE,System.Int32,System.Int32,System.Int32,RockwellAutomation.FTActivation.Activation.FLEX_EXITCALL_CALLBACK_STD,System.Int32[]@,System.Int32[]@,RockwellAutomation.FTActivation.Activation.FLEX_ERRS@,System.String@)">
            <summary>
            Attempts to check out a list of Personalized activations
            </summary>
            <param name="jobs">Array of job handles. Filled by method.</param>
            <param name="featureNames">String array of feature names/activation keys.</param>
            <param name="featureVersions"></param>
            <param name="systemType">Activation sub-system type. int cast of Activation.FLEX_SYS_TYPE.</param>
            <param name="lockType">FLEX_DUP_HOST=checks out one license per host,FLEX_DUP_USER=checks out one license per user,FLEX_DUP_HOSTUSER=checks out one license per host/user pair,FLEX_DUP_NONE=checks out one license</param>
            <param name="single">Simple flag. Check out single activation if != 0.</param>
            <param name="suppressFinder">Flag controlling GracePeriod GUI display. int cast of Activation.SUPPRESS_FINDER.</param>
            <param name="callback">Method ptr to be called if connectivity is lost between server and client.</param>
            <param name="serialNumbers">Array of checked out serial numbers. Filled by method.</param>
            <param name="licenseTypes">Array of license types of checked out activations. Filled by method. int casts of Activation.FLEX_LICENSE_TYPE</param>
            <param name="flexError">int representation of FLEX_ERR returned from FTA function. Filled by method.</param>
            <param name="errorMessage">Error message returned from FTA. Filled by method.</param>
            <returns>true if an activation was checked out, false otherwise</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.Unload">
            <summary>
            Should be called prior to unloading the FactoryTalk activation DLL. If this function is 
            not called, FactoryTalk activation cannot call CoUninitialize() on its threads that use COM.
            </summary>
            <returns>FLEX_OK indicates success</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GracePeriod_RegisterMainWindow(System.IntPtr)">
            <summary>
            Allows Grace Period messages to be displayed as modal relative to the window passed in. If you don't, they're modeless
            </summary>
            <param name="hwnd">Handle to the main window</param>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GracePeriod_ClearAllGracePeriods">
            <summary>
            Allows the caller to clear all grace periods for all activations 
            associated with the product. Capacity products should use this function 
            to clear grace periods after the product has been successfully activated.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetSearchList(System.Collections.ArrayList@)">
            <summary>
            Retrieves a list of the searched license files
            </summary>
            <param name="searchList">String arrary of files/server names. Filled by method.</param>
            <returns>FLEX_ERR returned from FTA call.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.IsPersonalizedActivationDLL">
            <summary>
            Determines if the Activation DLL is Personalized or not
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.IsWattlock(RockwellAutomation.FTActivation.FLEX_LICENSE_TYPE)">
            <summary>
            Tests if the license type is wattlock. 
            </summary>
            <param name="type">FLEX_LICENSE_TYPE flags to be evaluated.</param>
            <returns>true if the passed-in type indicates a WattLock activation, false if otherwise.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetErrorString(System.IntPtr)">
            <summary>
            Returns FLEXlm error info string for the last error associated 
             with the passed-in job handle
            </summary>
            <param name="job">FLEXlm Job handle. Filled by method.</param>
            <returns>String representation of last error associated with the passed-in job.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetErrorInfo(System.IntPtr)">
            <summary>
            Returns LM_ERR_INFO* for a specific job handle.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetFeatureList(System.IntPtr,System.Boolean)">
            <summary>
            Returns the features available to hJob as a array of strings
            If null is passed for the job handle, Flex_GetFeatureList() creates a new job.
            </summary>
            <param name="job">FLEXlm Job handle. Filled by method.</param>
            <param name="searchAll">1 to search all activation files, 0 to only search first file located.</param>
            <returns>List of available features.</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetAllFeatureInfoEx(System.IntPtr,System.String,RockwellAutomation.FTActivation.FeatureInfo[]@)">
            <summary>
            Returns Feature Information based on the Feature string passed in.
            This is an array of structures. The method returns information for
            CodeMeter activations that have expired.
            <para>
            If the feature was never installed then the API (as of 3.2004) will return a value
            of FLEX_BAD_ARG and the required buffer length field will be set to zero.
            
            NOTE: The feature information returned from this function is *not* validated and 
             should not be used to grant licensing-type privileges.
            
            ALSO: In most cases the presence of a local node-locked licenses will mask served licenses of
            the same name, so that only the node-locked FLEX_FEAT_INFO struct will be returned.
            </para>
            </summary>
            <param name="job">The job handle returned when the feature was checked out, or null (recommended)</param>
            <param name="featureName">The feature to get information about</param>
            <param name="infos">An array of zero or more objects</param>
            <returns>The flex error; 0 for success</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetFeatureInfoEx(System.IntPtr,System.String,RockwellAutomation.FTActivation.FeatureInfo[]@)">
            <summary>
            Returns Feature Information based on the Feature string passed in.
            This is an array of structures. This does not return information for
            expired CodeMeter activations.
            <para>
            If the feature was never installed then the API (as of 3.2004) will return a value
            of FLEX_BAD_ARG and the required buffer length field will be set to zero.
            
            NOTE: The feature information returned from this function is *not* validated and 
             should not be used to grant licensing-type privileges.
            
            ALSO: In most cases the presence of a local node-locked licenses will mask served licenses of
            the same name, so that only the node-locked FLEX_FEAT_INFO struct will be returned.
            </para>
            </summary>
            <param name="job">The job handle returned when the feature was checked out, or null (recommended)</param>
            <param name="featureName">The feature to get information about</param>
            <param name="infos">An array of zero or more objects</param>
            <returns>The flex error; 0 for success</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetFeatureInfoExHelper(System.Boolean,System.IntPtr,System.String,RockwellAutomation.FTActivation.FeatureInfo[]@)">
            <summary>
            Helper method for GetAllFeatureInfoEx and GetFeatureInfoEx.
            <para>
            If the feature was never installed then the API (as of 3.2004) will return a value
            of FLEX_BAD_ARG and the required buffer length field will be set to zero.
            
            NOTE: The feature information returned from this function is *not* validated and 
             should not be used to grant licensing-type privileges.
            
            ALSO: In most cases the presence of a local node-locked licenses will mask served licenses of
            the same name, so that only the node-locked FLEX_FEAT_INFO struct will be returned.
            </para>
            </summary>
            <param name="bGetAll"></param>
            <param name="job">The job handle returned when the feature was checked out, or null (recommended)</param>
            <param name="featureName">The feature to get information about</param>
            <param name="infos">An array of zero or more objects</param>
            <returns>The flex error; 0 for success</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetSupportEndDateInfo(System.String,System.Int32,RockwellAutomation.FTActivation.Activation.SupportEndDateInfo[]@)">
            <summary>
            Returns Support End Date Information based on the Feature string and Time Period passed in.
            This is an array of structures. 
            </summary>
            <param name="featureName">The feature to get information about</param>
            <param name="timePeriodInDays">The returned serial numbers will be within this number of days of expiration of their support contract.</param>
            <param name="infos">An array of zero or more objects</param>
            <returns>The flex error; 0 for success</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetConfigurationSettings(RockwellAutomation.FTActivation.Activation.ConfigSettings@)">
            <summary>
            Gets the configuration settings for server processes.
            </summary>
            <param name="configSettings">Object of type ConfigSettings to return the server configuration settings.</param>
            <returns>int representation of FLEX_ERR</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetServerSearchPath(System.String[]@)">
            <summary>
            Gets list of servers configured in the search path.
            </summary>
            <param name="searchPaths">Array of strings containing the names of servers in search path.</param>
            <returns>int representation of FLEX_ERR.</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetSerialNumberList(System.Boolean,System.String[]@)">
            <summary>
            Gets list of serial numbers available.
            </summary>
            <param name="bSearchAll">If true, search all servers for available serial number, if false, return local serial numbers
                Currently bSearchAll argument is not supported.</param>
            <param name="serialNumberList">Array of strings containing the available serial numbers.</param>
            <returns>int representation of FLEX_ERR.</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetSerialNumberInfo(System.String,System.Boolean,RockwellAutomation.FTActivation.Activation.SerialNumberInfo[]@)">
            <summary>
            Gets the usage data for the serial number provided.
            </summary>
            <param name="serialNumber">Serial number to get the usage data for.</param>
            <param name="bSearchAll">Flag to search all servers in search path, true to search all, false to just use local information.</param>
            <param name="serialNumberInfo">Array of SerialNumberInfo object containing data usage for this serial number.</param>
            <returns>int representation of FLEX_ERR.</returns>        
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GraceGetInfo(RockwellAutomation.FTActivation.GraceInfo[]@)">
            <summary>
            Return the grace information.
            <para>
            </para>
            </summary>
            <param name="infos">An array of zero or more objects containing the grace information</param>
            <returns>The flex error; 0 for success</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetCustomerErrorString(RockwellAutomation.FTActivation.Activation.FLEX_ERRS)">
            <summary>
            Converts Flex Error code to a Customer Friendly error string.
            Displays a specific error string or a general error string if the
            specific error string woouldn't make sense to the customer.
            </summary>
            <param name="flexError">Error code to be converted</param>
            <returns>Error message string</returns>
        </member>
        <member name="M:RockwellAutomation.FTActivation.Activation.GetFlexErrorString(RockwellAutomation.FTActivation.Activation.FLEX_ERRS)">
            <summary>
            Converts Flex Error code to the specific Flex Error string
            </summary>
            <param name="flexError">Error code to be converted</param>
            <returns>Error message string</returns>
        </member>
        <member name="T:RockwellAutomation.FactoryTalk.eFTAAppInit">
            <summary>Return codes for FTAApp.Init.</summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.OK">
            <summary>
            Success.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.CreateEventFail">
            <summary>
            An event used for thread synchronization couldn't be created.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.CreateThreadFail">
            <summary>
            The background thread that checks for tampering couldn't be created.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.LoadLibraryFail">
            <summary>
            The FTAStub.dll could not be loaded.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.InitFail">
            <summary>
            General initialization failure.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.PathFail">
            <summary>
            Couldn't determine the executable's absolute path, or the path was too long.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.LoadCommonFail">
            <summary>
            Couldn't locate or load FTA common components; advise user to install latest FTA.
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.eFTAAppInit.StubVersionFail">
            <summary>
            The stub DLL is too old for us to load it
            </summary>
        </member>
        <member name="F:RockwellAutomation.FactoryTalk.FTALoader.ftaAppObject">
            <summary>
            Declaring this as FTAApp results in an attempt to load the embedded assembly
            before the AssemblyResolve event gets set. We need to be sneaky to make this work...
            .NET can't be wise to the actual object type before we have our hook in place for
            loading the DLL from an embedded resource.
            </summary>
        </member>
        <member name="P:RockwellAutomation.FactoryTalk.FTALoader.FTAAppObject">
            <summary>
            Returns our FTAApp instance.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FactoryTalk.FTALoader.Init(System.String,System.String,System.String,System.Boolean,System.Windows.Forms.IWin32Window,System.Globalization.CultureInfo)">
            <summary>
            Initialize the object, FactoryTalk Activation, and the tamper detection mechanism. This
            method must be called prior to using any other FactoryTalk Activation APIs.
            </summary>
            <param name="uniqueID">Short string that uniquely identifies the product. For legacy products, this
            should be the name of their old FactoryTalk Activation DLL (usually in the form RSxxx32.DLL, where "xxx"
            is actually 2 to 4 product-specific characters). This string is case sensitive, and legacy products
            should observe the casing of their old FTA DLL name. Newer products should generate a GUID and pass a
            string representation of it, keeping it constant from one version of the product to the next.</param>
            <param name="productID">Human readable name of the product for use in message boxes or FactoryTalk
            Diagnostic log messages.</param>
            <param name="stubPath"></param>
            <param name="hasUI">Pass true for GUI applications, false for applications without a user interface,
            such as a Windows service. Passing false suppresses periodic tamper message boxes in the event that
            FactoryTalk Activation determines that it has been compromised.</param>
            <param name="owner">Used as the owner window for periodic tamper messages if FactoryTalk Activation
            believes it is compromised. If your application needs to check out licenses before its main window is
            created, null may be passed in, and the owning window may later be set using the SetHwndOwner method.
            Windows services and other software lacking a UI should pass null. If the application has a UI, it is
            important to set an owner window, or the message box could end up obscured behind your main window, 
            invisibly blocking the application from exiting.</param>
            <param name="culture">Culture to use for dialog display. Pass in a null to use the current locale. If your
            application does not support the current locale and you want dialogs to be presented in the same language
            as your application, create the desired culture and pass it in this parameter.</param>
            <returns>0 if successful, else a code indicating an error condition. If Init fails, FactoryTalk
            Activation APIs will not be usable.</returns>
        </member>
        <member name="M:RockwellAutomation.FactoryTalk.FTALoader.SetOwnerHwnd(System.Windows.Forms.IWin32Window)">
            <summary>Provides a means to set the window that will act as the owner of any message box displayed
            as a result of tampering with FactoryTalk Activation. This method is only needed by applications that
            must use FactoryTalk Activation prior to creating their main window; otherwise, the window handle passed
            in the Init method will suffice.</summary>
            <param name="owner">Handle of the application's main window.</param>
        </member>
        <member name="M:RockwellAutomation.FactoryTalk.FTALoader.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FactoryTalk.FTALoader.Dispose">
            <summary>
            Disposal.
            </summary>
        </member>
        <member name="M:RockwellAutomation.FactoryTalk.FTALoader.OnAssemblyResolve(System.Object,System.ResolveEventArgs)">
            <summary>
            Event handler invoked when a referenced DLL or resource couldn't be found. The handler
            here takes care of loading the embedded DLL.
            </summary>
            <param name="sender">Object that issued the event. Not used, here.</param>
            <param name="args">Argument object detailing what it is that needs to be located.</param>
            <returns>The embedded DLL assembly, or null if not found. If null is returned, .NET will throw
            a FileNotFound exception for the missing DLL. This likely indicates the DLL wasn't embedded as
            a resource in the application.</returns>
        </member>
        <member name="T:IWear.Tracker.Driver">
            <summary>
            .NET Bindings for the Vuzix iWear Tracker SDK library.
            </summary>
        </member>
        <member name="T:IWear.Stereo.Driver">
            <summary>
            .NET Bindings for the Vuzix iWear Stereo SDK library.
            </summary>
        </member>
        <member name="T:Microsoft.DirectX.Direct3D.LightType">
            <exclude />
        </member>
        <member name="T:Microsoft.DirectX.Direct3D.Material">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Direct3D.Material.DiffuseColor">
            <summary>
            The diffuse component of the material.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Direct3D.Material.SpecularColor">
            <summary>
            The specular component of the material.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Direct3D.Material.AmbientColor">
            <summary>
            The ambient component of the material.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Direct3D.Material.EmissiveColor">
            <summary>
            The emissive component of the material.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Direct3D.Material.Diffuse">
            <summary>
            The diffuse component of the material.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Direct3D.Material.Specular">
            <summary>
            The specular component of the material.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Direct3D.Material.Ambient">
            <summary>
            The ambient component of the material.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Direct3D.Material.Emissive">
            <summary>
            The emissive component of the material.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Direct3D.Material.SpecularSharpness">
            <summary>
            The power of the specular component, a high value leads to a shinier effect.
            </summary>
        </member>
        <member name="M:DrawTools.WpfTool.OnMouseDown(DrawTools.ProfileEditor,DrawWpf.DraggableCanvas,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Left mouse button is pressed
            </summary>
            <param name="editor"></param>
            <param name="canvas"></param>
            <param name="e"></param>
        </member>
        <member name="M:DrawTools.WpfTool.OnMouseDoubleClick(DrawTools.ProfileEditor,DrawWpf.DraggableCanvas,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Left mouse button is pressed
            </summary>
            <param name="editor"></param>
            <param name="canvas"></param>
            <param name="e"></param>
        </member>
        <member name="M:DrawTools.WpfTool.OnMouseMove(DrawTools.ProfileEditor,DrawWpf.DraggableCanvas,System.Windows.Input.MouseEventArgs)">
            <summary>
            Mouse is moved, left mouse button is pressed or none button is pressed
            </summary>
            <param name="editor"></param>
            <param name="canvas"></param>
            <param name="e"></param>
        </member>
        <member name="M:DrawTools.WpfTool.OnMouseUp(DrawTools.ProfileEditor,DrawWpf.DraggableCanvas,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Left mouse button is released
            </summary>
            <param name="editor"></param>
            <param name="canvas"></param>
            <param name="e"></param>
        </member>
        <member name="M:DrawTools.ProfileEditor.SaveSettingsToRegistry">
            <summary>
            Save application settings to the Registry
            </summary>
        </member>
        <member name="M:DrawTools.ProfileEditor.LoadSettingsFromRegistry">
            <summary>
            Load application settings from the Registry
            </summary>
        </member>
        <member name="T:DrawTools.ProfileEditorControl">
            <summary>
            Interaction logic for ProfileEditorControl.xaml
            </summary>
            <summary>
            ProfileEditorControl
            </summary>
        </member>
        <member name="M:DrawTools.ProfileEditorControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Pieter.Utilities.Rtf.Helpers">
            <summary>
            Summary description for Helpers.
            </summary>
        </member>
        <member name="M:Pieter.Utilities.Rtf.Helpers.GdipEmfToWmfBits(System.IntPtr,System.UInt32,System.Byte[],System.Int32,Pieter.Utilities.Rtf.Helpers.EmfToWmfBitsFlags)">
            <summary>
            Use the EmfToWmfBits function in the GDI+ specification to convert a 
            Enhanced Metafile to a Windows Metafile
            </summary>
            <param name="_hEmf">
            A handle to the Enhanced Metafile to be converted
            </param>
            <param name="_bufferSize">
            The size of the buffer used to store the Windows Metafile bits returned
            </param>
            <param name="_buffer">
            An array of bytes used to hold the Windows Metafile bits returned
            </param>
            <param name="_mappingMode">
            The mapping mode of the image.  This control uses MM_ANISOTROPIC.
            </param>
            <param name="_flags">
            Flags used to specify the format of the Windows Metafile returned
            </param>
        </member>
        <member name="M:Pieter.Utilities.Rtf.Helpers.GetRtfImage(System.Drawing.Image)">
            <summary>
            Gets the RTF image.
            </summary>
            
        </member>
        <member name="M:Pieter.Utilities.Rtf.Helpers.CreateRtfImage(System.Drawing.Image)">
            <summary>
            Wraps the image in an Enhanced Metafile by drawing the image onto the
            graphics context, then converts the Enhanced Metafile to a Windows
            Metafile, and finally appends the bits of the Windows Metafile in HEX
            to a string and returns the string.
            </summary>
            <param name="_image"></param>
            <returns>
            A string containing the bits of a Windows Metafile in HEX
            </returns>
        </member>
        <member name="M:Pieter.Utilities.Rtf.Helpers.GetImagePrefix(System.Drawing.Image,System.Single,System.Single)">
            <summary>
            Creates the RTF control string that describes the image being inserted.
            This description (in this case) specifies that the image is an
            MM_ANISOTROPIC metafile, meaning that both X and Y axes can be scaled
            independently.  The control string also gives the images current dimensions,
            and its target dimensions, so if you want to control the size of the
            image being inserted, this would be the place to do it. The prefix should
            have the form ...
            
            {\pict\wmetafile8\picw[A]\pich[B]\picwgoal[C]\pichgoal[D]
            
            where ...
            
            A    = current width of the metafile in hundredths of millimeters (0.01mm)
                   = Image Width in Inches * Number of (0.01mm) per inch
                   = (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 2540
                   = (Image Width in Pixels / Graphics.DpiX) * 2540
            
            B    = current height of the metafile in hundredths of millimeters (0.01mm)
                   = Image Height in Inches * Number of (0.01mm) per inch
                   = (Image Height in Pixels / Graphics Context's Vertical Resolution) * 2540
                   = (Image Height in Pixels / Graphics.DpiX) * 2540
            
            C    = target width of the metafile in twips
                   = Image Width in Inches * Number of twips per inch
                   = (Image Width in Pixels / Graphics Context's Horizontal Resolution) * 1440
                   = (Image Width in Pixels / Graphics.DpiX) * 1440
            
            D    = target height of the metafile in twips
                   = Image Height in Inches * Number of twips per inch
                   = (Image Height in Pixels / Graphics Context's Horizontal Resolution) * 1440
                   = (Image Height in Pixels / Graphics.DpiX) * 1440
               
            </summary>
            <remarks>
            The Graphics Context's resolution is simply the current resolution at which
            windows is being displayed.  Normally it's 96 dpi, but instead of assuming
            I just added the code.
            
            According to Ken Howe at pbdr.com, "Twips are screen-independent units
            used to ensure that the placement and proportion of screen elements in
            your screen application are the same on all display systems."
            
            Units Used
            ----------
            1 Twip = 1/20 Point
            1 Point = 1/72 Inch
            1 Twip = 1/1440 Inch
            
            1 Inch = 2.54 cm
            1 Inch = 25.4 mm
            1 Inch = 2540 (0.01)mm
            </remarks>
            <param name="_image"></param>
            <param name="xDpi"></param>
            <param name="yDpi"></param>
            <returns></returns>
        </member>
    </members>
</doc>
