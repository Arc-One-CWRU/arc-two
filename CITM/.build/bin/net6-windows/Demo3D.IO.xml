<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Demo3D.IO</name>
    </assembly>
    <members>
        <member name="T:Demo3D.Common.ArraySegmentExtensions">
            <summary>
            ArraySegment extension methods.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.ArraySegmentExtensions.ArrayNonNull(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.BaseCustomTypeDescriptor">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            The simplest implementation of ICustomTypeDescriptor, from which classes
            can derive and override just the parts they need to.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetClassName">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetAttributes">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetComponentName">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetConverter">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetDefaultEvent">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetDefaultProperty">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetEditor(System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetEvents(System.Attribute[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetEvents">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetProperties(System.Attribute[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BaseCustomTypeDescriptor.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.LogMessage">
            <summary>
            A loggable message.
            </summary>
        </member>
        <member name="T:Demo3D.Common.LogMessage.LogLevel">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="F:Demo3D.Common.LogMessage.LogLevel.Detailed">
            <summary>
            Detailed diagnostics.
            </summary>
        </member>
        <member name="F:Demo3D.Common.LogMessage.LogLevel.Diag">
            <summary>
            Diagnostics.
            </summary>
        </member>
        <member name="F:Demo3D.Common.LogMessage.LogLevel.Normal">
            <summary>
            Component specific information.
            </summary>
        </member>
        <member name="F:Demo3D.Common.LogMessage.LogLevel.Info">
            <summary>
            General information.
            </summary>
        </member>
        <member name="F:Demo3D.Common.LogMessage.LogLevel.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Demo3D.Common.LogMessage.LogLevel.Alert">
            <summary>
            Alert.
            </summary>
        </member>
        <member name="F:Demo3D.Common.LogMessage.LogLevel.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="P:Demo3D.Common.LogMessage.Level">
            <summary>
            Message severity.
            </summary>
        </member>
        <member name="P:Demo3D.Common.LogMessage.Message">
            <summary>
            Message content.
            </summary>
        </member>
        <member name="P:Demo3D.Common.LogMessage.Context">
            <summary>
            Additional information (or null).
            </summary>
        </member>
        <member name="M:Demo3D.Common.LogMessage.#ctor(Demo3D.Common.LogMessage.LogLevel,System.String,System.Object)">
            <summary>
            Constructs a new message.
            </summary>
            <param name="level">Message severity.</param>
            <param name="message">Message content.</param>
            <param name="context">Additional information (or null).</param>
        </member>
        <member name="T:Demo3D.Common.ComponentLogWriter">
            <summary>
            A class that logs messages.
            </summary>
        </member>
        <member name="P:Demo3D.Common.ComponentLogWriter.Default">
            <summary>
            The default log writer.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ComponentLogWriter.SetDefaultLogAction(System.Action{Demo3D.Common.LogMessage.LogLevel,System.String,System.Object})">
            <exclude />
        </member>
        <member name="E:Demo3D.Common.ComponentLogWriter.LogLevelChanged">
            <summary>
            Raised when the writer's log level changes.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ComponentLogWriter.#ctor(Demo3D.Common.LogMessage.LogLevel)">
            <summary>
            Construct a new log.
            </summary>
            <param name="level">The log level.</param>
        </member>
        <member name="P:Demo3D.Common.ComponentLogWriter.LogLevel">
            <summary>
            Messages below this level are suppressed.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ComponentLogWriter.NameChanged(Demo3D.Common.ComponentLog)">
            <summary>
            Notified that a log name has been changed.
            </summary>
            <param name="log">The log that's been changed.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLogWriter.AddLog(Demo3D.Common.ComponentLog)">
            <summary>
            Notifies that a log has been added.
            </summary>
            <param name="log">The log that's been added.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLogWriter.RemoveLog(Demo3D.Common.ComponentLog)">
            <summary>
            Notifies that a log has been removed.
            </summary>
            <param name="log">The log that's been removed.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLogWriter.LogMessage(Demo3D.Common.ComponentLog,Demo3D.Common.LogMessage)">
            <summary>
            Logs a message.
            </summary>
            <param name="log">The specific log.</param>
            <param name="message">Message to log.</param>
        </member>
        <member name="T:Demo3D.Common.ComponentLog">
            <summary>
            A log.
            </summary>
        </member>
        <member name="F:Demo3D.Common.ComponentLog.Default">
            <summary>
            The default log.
            </summary>
        </member>
        <member name="P:Demo3D.Common.ComponentLog.Parent">
            <summary>
            The parent of this log (or null).
            </summary>
        </member>
        <member name="P:Demo3D.Common.ComponentLog.LogLevel">
            <summary>
            Messages below this level are suppressed.
            </summary>
        </member>
        <member name="P:Demo3D.Common.ComponentLog.Name">
            <summary>
            Log name (or null).
            </summary>
        </member>
        <member name="P:Demo3D.Common.ComponentLog.Children">
            <summary>
            The list of sub-logs.
            </summary>
        </member>
        <member name="P:Demo3D.Common.ComponentLog.Descendants">
            <summary>
            All descendants.
            </summary>
        </member>
        <member name="P:Demo3D.Common.ComponentLog.All">
            <summary>
            All logs.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ComponentLog.Subscribe(Demo3D.Common.ComponentLogWriter)">
            <summary>
            Subscribe to log messages.
            </summary>
            <param name="writer">The subscribing log writer.</param>
            <returns>True if the log was subscribed.</returns>
        </member>
        <member name="M:Demo3D.Common.ComponentLog.Unsubscribe(Demo3D.Common.ComponentLogWriter)">
            <summary>
            Unsubscribe from log messages.
            </summary>
            <param name="writer">The unsubscribing log writer</param>
            <returns>True if the log was unsubscribed.</returns>
        </member>
        <member name="M:Demo3D.Common.ComponentLog.Log(Demo3D.Common.LogMessage)">
            <summary>
            Logs a message.
            </summary>
            <param name="message">Message to log.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLog.NewLog(System.String)">
            <summary>
            Create a new log.
            </summary>
            <param name="name">The name of the log.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLog.Release">
            <summary>
            Releases the log.
            </summary>
        </member>
        <member name="T:Demo3D.Common.IComponentLogger">
            <summary>
            Represents a class that contains a log.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IComponentLogger.GetLog">
            <summary>
            Gets the current log (or null).
            </summary>
            <returns>The current log.</returns>
        </member>
        <member name="T:Demo3D.Common.ComponentLoggerExtensions">
            <exclude/>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.Subscribe(Demo3D.Common.IComponentLogger,Demo3D.Common.ComponentLogWriter)">
            <summary>
            Subscribe to log messages.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="writer">The subscribing log writer.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.Unsubscribe(Demo3D.Common.IComponentLogger,Demo3D.Common.ComponentLogWriter)">
            <summary>
            Unsubscribe from log messages.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="writer">The unsubscribing log writer</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.Subscribe(Demo3D.Common.IComponentLogger,System.Action{Demo3D.Common.LogMessage},Demo3D.Common.LogMessage.LogLevel)">
            <summary>
            Subscribe to log messages.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="logMessage">Delegate to report a message.</param>
            <param name="level">The log level.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.IsLogging(Demo3D.Common.IComponentLogger,Demo3D.Common.LogMessage.LogLevel)">
            <summary>
            Returns true if the log file is logging at the specified level.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="level">The level to check.</param>
            <returns>True if the log file is logging at the specified level.</returns>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.Log(Demo3D.Common.IComponentLogger,Demo3D.Common.LogMessage)">
            <summary>
            Logs a message.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="message">Message content.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.Log(Demo3D.Common.IComponentLogger,Demo3D.Common.LogMessage.LogLevel,System.String,System.Object)">
            <summary>
            Logs a message.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="level">Message severity.</param>
            <param name="message">Message content.</param>
            <param name="context">Additional information (or null).</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.Log(Demo3D.Common.IComponentLogger,System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="message">Message content.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLoggerExtensions.NewLog(Demo3D.Common.IComponentLogger,System.String)">
            <summary>
            Creates a new.
            </summary>
            <param name="logger">The log provider (or null).</param>
            <param name="name">Log name.</param>
            <returns>A new log.</returns>
        </member>
        <member name="T:Demo3D.Common.ComponentLogDirector">
            <summary>
            A logger that can redirect log messages.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ComponentLogDirector.#ctor(Demo3D.Common.ComponentLog)">
            <summary>
            Construct a component log director.
            </summary>
            <param name="log">Optional log.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLogDirector.GetLog">
            <summary>
            Gets the current log (or null).
            </summary>
            <returns>The current log.</returns>
        </member>
        <member name="M:Demo3D.Common.ComponentLogDirector.SetLog(Demo3D.Common.ComponentLog)">
            <summary>
            Sets the current log.
            </summary>
            <param name="log">The new log.</param>
        </member>
        <member name="T:Demo3D.Common.ComponentLogger">
            <exclude/>
        </member>
        <member name="M:Demo3D.Common.ComponentLogger.Log(Demo3D.Common.LogMessage)">
            <summary>
            Logs a message.
            </summary>
            <param name="message">Message content.</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLogger.Log(Demo3D.Common.LogMessage.LogLevel,System.String,System.Object)">
            <summary>
            Logs a message.
            </summary>
            <param name="level">Message severity.</param>
            <param name="message">Message content.</param>
            <param name="context">Additional information (or null).</param>
        </member>
        <member name="M:Demo3D.Common.ComponentLogger.Log(System.String)">
            <summary>
            Logs a message.
            </summary>
            <param name="message">Message content.</param>
        </member>
        <member name="T:Demo3D.Common.DateTimePrecise">
            <summary>
            A class for accessing precise time.
            </summary>
        </member>
        <member name="P:Demo3D.Common.DateTimePrecise.FileTimeNowTicks">
            <summary>
            Returns the number ticks from GetSystemTimePreciseAsFileTime, the number of ticks since 1601.
            </summary>
        </member>
        <member name="P:Demo3D.Common.DateTimePrecise.UtcNow">
            <summary>
            Gets a <see cref="T:System.DateTime"/> object that is set to the precise current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="T:Demo3D.Common.DefaultValuePropertyAttribute">
            <summary>
            Use this attribute in place of DefaultValueAttribute to point to another property on the same property bag
            that provides the default value.  <see cref="M:Demo3D.Common.DefaultValuePropertyAttribute.GetProperties(System.Object,System.ComponentModel.PropertyDescriptorCollection)"/> will then
            return a property descriptor collection that contains a DefaultValueAttribute using the value returned by
            that property.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.DefaultValuePropertyAttribute.#ctor(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.DefaultValuePropertyAttribute.GetProperties(System.Object,System.ComponentModel.PropertyDescriptorCollection)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ExceptionLocation">
            <summary>
            Records the location of an exception in System.Exception.Data.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ExceptionLocation.LocationList">
            <summary>
            Stored on Exception.Data using the <see cref="F:Demo3D.Common.ExceptionLocation.locationKey"/> "Location".
            Contains a list of location objects describing the location of the error being reported.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ExceptionLocation.AddLocation(System.Exception,Demo3D.Common.Location)">
            <summary>
            Adds the location of an error in some larger object (eg a network packet, or a disassembled stream of bytes).
            </summary>
            <param name="exception">The exception being thrown.</param>
            <param name="location">The location information to add to the exception.</param>
            <returns>Returns the parameter <paramref name="exception"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.ExceptionLocation.ConnectedTo(System.Exception,System.String)">
            <summary>
            Describes an exception caused by a particular connection.
            </summary>
            <param name="exception">The exception being thrown.</param>
            <param name="connection">The name of connection throwing the exception.</param>
            <returns>Returns the parameter <paramref name="exception"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.ExceptionLocation.AtMethod(System.Exception,System.String)">
            <summary>
            Describes an exception thrown from within a specified method.
            </summary>
            <param name="exception">The exception being thrown.</param>
            <param name="atMethod">The name of method throwing the exception.</param>
            <returns>Returns the parameter <paramref name="exception"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.ExceptionLocation.InData(System.Exception,System.String)">
            <summary>
            Describes an exception thrown at a particular data location.
            </summary>
            <param name="exception">The exception being thrown.</param>
            <param name="location">The position in the data causing the error.</param>
            <returns>Returns the parameter <paramref name="exception"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.ExceptionLocation.SetOriginalStack(System.Exception)">
            <summary>
            Sets the stack trace on an exception to be the current stack.
            </summary>
            <param name="exception">Exception to set the stack trace on.</param>
            <returns>Exception with the stack trace set.</returns>
        </member>
        <member name="M:Demo3D.Common.ExceptionLocation.ReThrow(System.Exception)">
            <summary>
            Rethrows a template exception.
            </summary>
            <param name="exception">A template for the exception to rethrow.</param>
            <remarks>
            This is used to rethrow a template exception.  The template was created at some point capturing some error.
            The stack trace at the time of the error is contained within the template.  But we often also want to know
            the track trace at the time of the rethrow.
            </remarks>
        </member>
        <member name="T:Demo3D.Common.LocationException">
            <summary>
            An exception that includes location information.
            </summary>
        </member>
        <member name="M:Demo3D.Common.LocationException.#ctor">
            <summary>
            An exception that includes location information.
            </summary>
        </member>
        <member name="M:Demo3D.Common.LocationException.#ctor(System.String)">
            <summary>
            An exception that includes location information.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Demo3D.Common.LocationException.#ctor(System.String,System.Exception)">
            <summary>
            An exception that includes location information.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The original inner exception..</param>
        </member>
        <member name="M:Demo3D.Common.LocationException.InData(System.String)">
            <summary>
            Describes the location within a data source of the error.
            </summary>
            <param name="location">The position within the data causing the error.</param>
        </member>
        <member name="M:Demo3D.Common.Hash.HashCombine(System.Int32@,System.Int32)">
            <summary>
            Utility function to combine together two hash codes (<see cref="M:System.Object.GetHashCode"/>)
            </summary>
            <param name="hash">First hash code (passed by reference)</param>
            <param name="additionalHash">Second hash code (passed by value)</param>
            <returns>Combined hash code (the first hash code has also been changed)</returns>
        </member>
        <member name="M:Demo3D.Common.Hash.HashCombine(System.Int32,System.Int32)">
            <summary>
            Utility function to combine together two hash codes (<see cref="M:System.Object.GetHashCode"/>)
            </summary>
            <param name="hash">First hash code (passed by value)</param>
            <param name="additionalHash">Second hash code (passed by value)</param>
            <returns>Combined hash code</returns>
        </member>
        <member name="T:Demo3D.Common.HexDump">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.HexDump.Indent">
            <summary>
            String to prepend to each line.
            </summary>
        </member>
        <member name="P:Demo3D.Common.HexDump.Width">
            <summary>
            Maximum number of bytes per line.
            </summary>
        </member>
        <member name="M:Demo3D.Common.HexDump.#ctor">
            <summary>
            Contructs a HexDump object.
            </summary>
        </member>
        <member name="M:Demo3D.Common.HexDump.ToString(System.Collections.Generic.IEnumerable{System.Byte},System.Int32)">
            <summary>
            Create a hex dump string from an array of bytes.
            </summary>
            <param name="bytes">Bytes to dump.</param>
            <param name="length">Number of bytes to dump.</param>
            <returns>Hex dump.</returns>
        </member>
        <member name="M:Demo3D.Common.HexDump.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Create a hex dump string from an array of bytes.
            </summary>
            <param name="buffer">Bytes to dump.</param>
            <param name="offset">Offset of first byte to dump.</param>
            <param name="length">Number of bytes to dump.</param>
            <returns>Hex dump.</returns>
        </member>
        <member name="T:Demo3D.Common.IBatchEditable">
            <summary>
            Provides a mechanism for batch editing.
            </summary>
            <remarks>
            These methods should only ever be called in pairs, first <see cref="M:Demo3D.Common.IBatchEditable.BeginEditAsync(System.Boolean)"/> and later
            <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/>.  Consider using <see cref="T:Demo3D.Common.BatchEdit"/>.
            <code>
            // For async code.
            await BatchEdit.BeginEditAsync(editable).UsingAsync(() => {
                // issue commands to be batched
            });
            
            // For synchronous code.
            using (new BatchEdit(editable)) {
                // issue commands to be batched
            }
            </code>
            </remarks>
        </member>
        <member name="E:Demo3D.Common.IBatchEditable.EditBegunAsync">
            <summary>
            Raised on first call to <see cref="M:Demo3D.Common.IBatchEditable.BeginEditAsync(System.Boolean)"/>.
            </summary>
        </member>
        <member name="E:Demo3D.Common.IBatchEditable.EditEndedAsync">
            <summary>
            Raised on last call to <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IBatchEditable.BeginEditAsync(System.Boolean)">
            <summary>
            Start batch editing.  Use <see cref="T:Demo3D.Common.BatchEdit"/> where possible instead.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)">
            <summary>
            End batch editing.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.Common.BatchEditableExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BatchEditableExtensions.BeginEdit(Demo3D.Common.IBatchEditable)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BatchEditableExtensions.EndEdit(Demo3D.Common.IBatchEditable)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.BatchEditable">
            <summary>
            A base class for implementing <see cref="T:Demo3D.Common.IBatchEditable"/>.
            </summary>
            <remarks>
            Notes:
            <para>
            NotifyEditBegunAsync and NotifyEditEndedAsync occur at most once per 'batch', and in strict order (so that
            NotifyEditEndedAsync always occurs before NotifyEditEndedAsync).
            </para>
            <para>
            There's no guarantee that NotifyEditBegunAsync will be called before BeginEditAsync returns.  It may be
            called at any point between BeginEdit and EndEdit, or even after EndEdit.  And under certain circumstances,
            a sequence of BeginEdit/EndEdit may not call the Notify methods at all.
            </para>
            <para>
            NotifyEditBegunAsync may not be called in the same thread (or even synchronisation context) as BeginEditAsync.
            And NotifyEditEndedAsync may not be called in the same thread (or synchronisation context) as NotifyEditBegunAsync.
            </para>
            </remarks>
        </member>
        <member name="E:Demo3D.Common.BatchEditable.EditBegunAsync">
            <summary>
            Raised on first call to <see cref="M:Demo3D.Common.BatchEditable.BeginEditAsync(System.Boolean)"/>.
            </summary>
        </member>
        <member name="E:Demo3D.Common.BatchEditable.EditEndedAsync">
            <summary>
            Raised on last call to <see cref="M:Demo3D.Common.BatchEditable.EndEditAsync(System.Boolean)"/>.
            </summary>
        </member>
        <member name="T:Demo3D.Common.BatchEditable.OperationType">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.Invalid">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.BeginEditCalled">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.BeginEditCurrentBatch">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.BeginEditException">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.BeginEditDone">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.EndEditCalled">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.EndEditCurrentBatch">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.EndEditException">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.EndEditNotified">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.EndEditReRaise">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BatchEditable.OperationType.EndEditDone">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BatchEditable.BeginEditAsync(System.Boolean)">
            <summary>
            Start batch editing.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Common.BatchEditable.EndEditAsync(System.Boolean)">
            <summary>
            End batch editing.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.Common.BatchEdit">
            <summary>
            Starts and ends editing an <see cref="T:Demo3D.Common.IBatchEditable"/> or <see cref="T:Demo3D.Common.IBatchEditable"/> object.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BatchEdit.#ctor(Demo3D.Common.IBatchEditable)">
            <summary>
            Starts editing an <see cref="T:Demo3D.Common.IBatchEditable"/> object.
            The objects <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called when <see cref="M:System.IDisposable.Dispose"/>is called.
            </summary>
            <param name="editable">The editable object.</param>
        </member>
        <member name="M:Demo3D.Common.BatchEdit.BeginEditAsync(System.Boolean,Demo3D.Common.IBatchEditable)">
            <summary>
            Starts editing an <see cref="T:Demo3D.Common.IBatchEditable"/> object.
            The objects <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called when <see cref="M:Demo3D.Common.IAsyncCompletable.Complete(System.Boolean)"/>is called.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="editable">The editable object.</param>
            <returns>New <see cref="T:Demo3D.Common.BatchEdit"/> instance.</returns>
        </member>
        <member name="P:Demo3D.Common.BatchEdit.Demo3D#Common#IAsyncCompletable#Completion">
            <summary>
            Gets a task that represents the asynchronous completion.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BatchEdit.Demo3D#Common#IAsyncCompletable#Complete(System.Boolean)">
            <summary>
            End editing asynchronously.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BatchEdit.System#IDisposable#Dispose">
            <summary>
            End editing synchronously.
            </summary>
        </member>
        <member name="T:Demo3D.Common.BatchProcess`1">
            <summary>
            Batches a stream of objects, processing each immediately if the editable object is not being batch edited,
            or processing them later on <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/>.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BatchProcess`1.#ctor(Demo3D.Common.IBatchEditable,System.Func{System.Boolean,System.Collections.Generic.List{`0},System.Boolean,System.Threading.Tasks.Task})">
            <summary>
            Constructs a <see cref="T:Demo3D.Common.BatchProcess`1"/> object to batch process objects.
            </summary>
            <param name="editable">The editable object.</param>
            <param name="batchingActionAsync">The action to call to batch process objects.</param>
        </member>
        <member name="M:Demo3D.Common.BatchProcess`1.#ctor(Demo3D.Common.IBatchEditable,System.Action{System.Collections.Generic.List{`0},System.Boolean})">
            <summary>
            Constructs a <see cref="T:Demo3D.Common.BatchProcess`1"/> object to batch process objects.
            </summary>
            <param name="editable">The editable object.</param>
            <param name="batchingAction">The action to call to batch process objects.</param>
        </member>
        <member name="M:Demo3D.Common.BatchProcess`1.ProcessAsync(System.Boolean,`0,System.Func{System.Boolean,System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            If the editable object is not being batched, then <paramref name="obj"/> is processed immediatey.
            Otherwise it will be processed later when <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="obj">The object to batch process.</param>
            <param name="actionIfBatching">The action to call now if batching (or null).</param>
            <param name="once">True to process <paramref name="obj"/> just once per EndEdit.</param>
            <returns>True if batching.</returns>
        </member>
        <member name="M:Demo3D.Common.BatchProcess`1.ProcessAsync(`0,System.Func{System.Threading.Tasks.Task},System.Boolean)">
            <summary>
            If the editable object is not being batched, then <paramref name="obj"/> is processed immediatey.
            Otherwise it will be processed later when <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called.
            </summary>
            <param name="obj">The object to batch process.</param>
            <param name="actionIfBatching">The action to call now if batching (or null).</param>
            <param name="once">True to process <paramref name="obj"/> just once per EndEdit.</param>
            <returns>True if batching.</returns>
        </member>
        <member name="M:Demo3D.Common.BatchProcess`1.Process(`0,System.Action,System.Boolean)">
            <summary>
            If the editable object is not being batched, then <paramref name="obj"/> is processed immediatey.
            Otherwise it will be processed later when <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called.
            </summary>
            <param name="obj">The object to batch process.</param>
            <param name="actionIfBatching">The action to call now if batching (or null).</param>
            <param name="once">True to process <paramref name="obj"/> just once per EndEdit.</param>
            <returns>True if batching.</returns>
        </member>
        <member name="M:Demo3D.Common.BatchProcess`1.Dispose">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.BatchExecute">
            <summary>
            Batches an action, executing the action immediately if the editable object is not being batch edited,
            or executing it later on <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/>.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BatchExecute.#ctor(Demo3D.Common.IBatchEditable)">
            <summary>
            Constructs a <see cref="T:Demo3D.Common.BatchExecute"/> object to batch execute an action.
            </summary>
            <param name="editable">The editable object.</param>
        </member>
        <member name="M:Demo3D.Common.BatchExecute.InvokeAsync(System.Boolean,System.Func{System.Boolean,System.Threading.Tasks.Task},System.Func{System.Boolean,System.Threading.Tasks.Task},System.Func{System.Boolean,System.Threading.Tasks.Task})">
            <summary>
            If the editable object is not being batched, then <paramref name="actionIfNotBatching"/> is invoked immediately.
            Otherwise <paramref name="actionIfBatching"/> is invoked immediately and then <paramref name="batchingAction"/>
            will be invoked (just once) later when <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="batchingAction">The action to call at EndEdit if batching (or null).</param>
            <param name="actionIfNotBatching">The action to call now if not batching (or null).</param>
            <param name="actionIfBatching">The action to call now if batching (or null).</param>
            <returns>True if action was batched.</returns>
        </member>
        <member name="M:Demo3D.Common.BatchExecute.Invoke(System.Action,System.Action,System.Action)">
            <summary>
            If the editable object is not being batched, then <paramref name="actionIfNotBatching"/> is invoked immediately.
            Otherwise <paramref name="actionIfBatching"/> is invoked immediately and then <paramref name="batchingAction"/>
            will be invoked (just once) later when <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called.
            </summary>
            <param name="batchingAction">The action to call at EndEdit if batching (or null).</param>
            <param name="actionIfNotBatching">The action to call now if not batching (or null).</param>
            <param name="actionIfBatching">The action to call now if batching (or null).</param>
            <returns>True if batching.</returns>
        </member>
        <member name="M:Demo3D.Common.BatchExecute.BatchAsync(System.Boolean,System.Func{System.Boolean,System.Threading.Tasks.Task})">
            <summary>
            If the editable object is not being batched, then <paramref name="action"/> is invoked immediately.
            Otherwise it'll be invoked (just once) when <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="action">The action to call.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Common.BatchExecute.Batch(System.Action)">
            <summary>
            If the editable object is not being batched, then <paramref name="action"/> is invoked immediately.
            Otherwise it'll be invoked (just once) when <see cref="M:Demo3D.Common.IBatchEditable.EndEditAsync(System.Boolean)"/> is called.
            </summary>
            <param name="action">The action to call.</param>
        </member>
        <member name="M:Demo3D.Common.BatchExecute.Dispose">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.IDataLocationProvider">
            <summary>
            Provides information about the location in a data source, eg position in a file, element in an xml document, or section in a network packet.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IDataLocationProvider.GetDataLocation">
            <summary>
            Gets the current location in a data source.
            </summary>
            <returns>A new Location.Data.</returns>
        </member>
        <member name="T:Demo3D.Common.IPropertyGridProvider">
            <summary>
            Provides a property bag to show in the GUI.
            </summary>
            <remarks>
            Normally an object can control the properties shown in the GUI using the facilities of
            System.ComponentModel.TypeDescriptor.  This interface doesn't replace that (the object
            returned is inspected using TypeDescriptor).  This interface is for controls such as the
            WorldExplorer to enquire whether an object is willing to show properties in the property
            grid.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.IPropertyGridProvider.Properties">
            <summary>
            A property bag to show in the GUI.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Location">
            <summary>
            Exception location base class.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Location.ReThrownException">
            <summary>
            An exception that's been rethrown.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Location.ReThrownException.OriginalStack">
            <summary>
            The original stack.
            Or null if the template exception was never originally thrown.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Location.ReThrownException.RethrowStack">
            <summary>
            The stack at the point of rethrow.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Location.ReThrownException.#ctor(System.String)">
            <summary>
            Constructs ReThrownException information.
            </summary>
            <param name="originalStack">The original stack.</param>
        </member>
        <member name="M:Demo3D.Common.Location.ReThrownException.ToString">
            <summary>
            Combined stack trace.
            </summary>
            <returns>Combined stack trace.</returns>
        </member>
        <member name="T:Demo3D.Common.Location.Stack">
            <summary>
            This adds hierachical human readable information in stack format describing what's happening when an exception is thrown.
            Not a direct replacement for StackTrace, in that it's not expected to be a complete stack trace.  But it does add
            information, especially for obfuscated code.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Location.Stack.StackPosition">
            <summary>
            Declares the position of a StackLocation entry.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Location.Stack.StackPosition.Bottom">
            <summary>
            Bottom of the stack.  Adding a 'Bottom' entry will remove all entries already added.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Location.Stack.StackPosition.Middle">
            <summary>
            Middle of the stack.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Location.Stack.StackPosition.Top">
            <summary>
            Top of the stack.  No new stack information is added above an entry marked Top.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Location.Stack.Position">
            <summary>
            The position in the stack.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Location.Stack.Description">
            <summary>
            Description of the location of the error.  (Eg 'at..' or 'doing..'.)
            </summary>
        </member>
        <member name="M:Demo3D.Common.Location.Stack.#ctor(Demo3D.Common.Location.Stack.StackPosition,System.String)">
            <summary>
            Creates a location of an error in the stack.
            </summary>
            <param name="position">Position of this location in the stack.</param>
            <param name="description">Description of the location of the error.</param>
        </member>
        <member name="M:Demo3D.Common.Location.Stack.ToString">
            <summary>
            Returns the stack location.
            </summary>
            <returns>The stack location.</returns>
        </member>
        <member name="T:Demo3D.Common.Location.Data">
            <summary>
            The location of error in a data source, eg position in a file, element in an xml document, or section in a network packet.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Location.Data.DataSource">
            <summary>
            A unique object identifying the data source (or null).
            </summary>
        </member>
        <member name="P:Demo3D.Common.Location.Data.Description">
            <summary>
            Description or the location of the error.  (Eg 'in file..' or 'connected to..'.)
            </summary>
        </member>
        <member name="P:Demo3D.Common.Location.Data.Positions">
            <summary>
            The location within the data source. (Eg. 'in..' headers, section, xml element, cursors, etc.)
            </summary>
        </member>
        <member name="M:Demo3D.Common.Location.Data.#ctor(System.Object,System.String)">
            <summary>
            Creates a new data location describing the data at fault.
            </summary>
            <param name="dataSource">A unique object identifying the data source (or null).</param>
            <param name="description">A description of the location of the error.</param>
        </member>
        <member name="M:Demo3D.Common.Location.Data.ToString">
            <summary>
            Returns the data location.
            </summary>
            <returns>The data location.</returns>
        </member>
        <member name="T:Demo3D.Common.Parse">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.TryInt(System.String,System.Boolean,System.Int32@)">
            <summary>
            Parse int; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <param name="n">Parsed value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.Int(System.String,System.Boolean)">
            <summary>
            Parse int; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.Int(System.String)">
            <summary>
            Parse decimal int.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.TryUInt(System.String,System.Boolean,System.UInt32@)">
            <summary>
            Parse uint; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <param name="n">The parsed value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.UInt(System.String,System.Boolean)">
            <summary>
            Parse uint; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.UInt(System.String)">
            <summary>
            Parse decimal uint.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.TryUIntHex(System.String,System.UInt32@)">
            <summary>
            Parse hexadecimal uint.
            </summary>
            <param name="s">String to parse.</param>
            <param name="n">The parsed value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.UIntHex(System.String)">
            <summary>
            Parse hexadecimal uint.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.TryPositiveInt(System.String,System.Boolean,System.Int32@)">
            <summary>
            Parse int; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <param name="n">The parsed value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.PositiveInt(System.String,System.Boolean)">
            <summary>
            Parse int; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.TryPositiveInt(System.String,System.Int32@)">
            <summary>
            Parse decimal int.
            </summary>
            <param name="s">String to parse.</param>
            <param name="n">The parsed value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.PositiveInt(System.String)">
            <summary>
            Parse decimal int.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.TryPositiveIntOct(System.String,System.Int32@)">
            <summary>
            Parse octal int.
            </summary>
            <param name="s">String to parse.</param>
            <param name="n">The parsed value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.PositiveIntOct(System.String)">
            <summary>
            Parse octal int.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.TryPositiveIntHex(System.String,System.Int32@)">
            <summary>
            Parse hexadecimal int.
            </summary>
            <param name="s">String to parse.</param>
            <param name="n">The parsed value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.PositiveIntHex(System.String)">
            <summary>
            Parse hexadecimal int.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.Long(System.String,System.Boolean)">
            <summary>
            Parse long; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.PositiveLong(System.String,System.Boolean)">
            <summary>
            Parse long; allow hexadecimal.
            </summary>
            <param name="s">String to parse.</param>
            <param name="allowHex">True to allow hexadecimal values (which optionally may start with 0x).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.PositiveLong(System.String)">
            <summary>
            Parse decimal int.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.Bit(System.String)">
            <summary>
            Parse bit number.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.BitOffset(System.String,System.Int32@)">
            <summary>
            Parse "byte.bit" string.
            </summary>
            <param name="s">String to parse.</param>
            <param name="elementSizeBits">Updates/returns minimum number of bits in element.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Parse.BitOffset(System.String)">
            <summary>
            Parse "byte.bit" string.
            </summary>
            <param name="s">String to parse.</param>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.PropertyGridBrowsableState">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.PropertyGridBrowsableState.Never">
            <summary>
            Not browsable.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PropertyGridBrowsableState.Always">
            <summary>
            Always browsable; it's a simple property.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PropertyGridBrowsableState.AdvancedIfDefault">
            <summary>
            It's an advanced property if it has the default value, otherwise it's simple.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PropertyGridBrowsableState.Advanced">
            <summary>
            It's an advanced property.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PropertyGridBrowsableState.Expert">
            <summary>
            It's an expert property - ie neither simple nor advanced.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PropertyGridBrowsableAttribute">
            <summary>
            Declares whether a property is browsable in the property grid.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.PropertyGridBrowsableAttribute.State">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PropertyGridBrowsableAttribute.#ctor(Demo3D.Common.PropertyGridBrowsableState)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.PropertyGridBrowsable">
            <summary>
            Determines whether a property should be shown in a property grid.
            Looks at both BrowsableAttribute and PropertyGridBrowsableAttribute.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.PropertyGridBrowsable.ShowInSimple">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.PropertyGridBrowsable.ShowInAdvanced">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.PropertyGridBrowsable.ShowInExpert">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PropertyGridBrowsable.Show(System.Boolean,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PropertyGridBrowsable.IsAdvanced(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PropertyGridBrowsable.Get(System.Object,System.ComponentModel.PropertyDescriptor)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PropertyGridBrowsable.Get(System.Object)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.RedirectPropertyTypeConverter">
            <summary>
            Provides a base PropertyDescriptor that redirects all properties and methods to another PropertyDescriptor,
            allowing you to override only those properties and methods that you need to modify.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.pd">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.Attributes">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.Category">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.Converter">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.Description">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.DisplayName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.IsLocalizable">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.IsReadOnly">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.IsBrowsable">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.GetEditor(System.Type)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.GetValue(System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.SetValue(System.Object,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.RedirectPropertyTypeConverter.RedirectPropertyDescriptor.ToString">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.SemaphoreSlimExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SemaphoreSlimExtensions.WaitAsync(System.Threading.SemaphoreSlim,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SemaphoreSlimExtensions.WaitAsync(System.Threading.SemaphoreSlim,System.Boolean,System.Int32)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.SimplePropertyList">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SimplePropertyList.Add(System.String,System.String,System.Type,System.Object,System.Attribute[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SimplePropertyList.Remove(System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.SimplePropertyList.Item(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SimplePropertyList.GetProperties">
            <exclude />
        </member>
        <member name="E:Demo3D.Common.SimplePropertyList.PropertyChanged">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SimplePropertyList.NotifyPropertyChanged(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SimplePropertyList.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Utilities">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Utilities.SuppressUnusedWarning(System.Object)">
            <summary>
            Used to suppress "The variable 'o' is declared but never used" warning.
            </summary>
            <param name="o">Object to suppress warning for.</param>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IOGlobal">
            <exclude />
        </member>
        <member name="P:Demo3D.IO.IOGlobal.Expert">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.IOGlobal.Load">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.IOGlobal.Initialize(System.Action{Demo3D.Common.LogMessage.LogLevel,System.String,System.Object},System.Func{System.Boolean})">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.IOGlobal.Reset">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.IOGlobal.Clear">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.Administrator">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.Administrator.IsAdministrator">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.ArrayIO">
            <summary>
            IO using an ArraySegment{byte} as a binary reader/writer.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.Index(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.Index(System.ArraySegment{System.Byte}@,System.Int32,System.Byte)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.Advance(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadBytes(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadByte(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadInt16LE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadUInt16LE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadInt32LE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadUInt32LE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadInt64LE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadUInt64LE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadSingleLE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadDoubleLE(System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadBytes(System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadByte(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadInt16LE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadUInt16LE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadInt32LE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadUInt32LE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadInt64LE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadUInt64LE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadSingleLE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.ReadDoubleLE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteBytes(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteBytes(System.ArraySegment{System.Byte}@,System.ArraySegment{System.Byte})">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteByte(System.ArraySegment{System.Byte}@,System.Byte)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteInt16LE(System.ArraySegment{System.Byte}@,System.Int16)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteUInt16LE(System.ArraySegment{System.Byte}@,System.UInt16)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteInt32LE(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteUInt32LE(System.ArraySegment{System.Byte}@,System.UInt32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteInt64LE(System.ArraySegment{System.Byte}@,System.Int64)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteUInt64LE(System.ArraySegment{System.Byte}@,System.UInt64)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteSingleLE(System.ArraySegment{System.Byte}@,System.Single)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteDoubleLE(System.ArraySegment{System.Byte}@,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteBytes(System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteBytes(System.ArraySegment{System.Byte}@,System.Int32,System.ArraySegment{System.Byte})">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteByte(System.ArraySegment{System.Byte}@,System.Int32,System.Byte)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteInt16LE(System.ArraySegment{System.Byte}@,System.Int32,System.Int16)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteUInt16LE(System.ArraySegment{System.Byte}@,System.Int32,System.UInt16)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteInt32LE(System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteUInt32LE(System.ArraySegment{System.Byte}@,System.Int32,System.UInt32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteInt64LE(System.ArraySegment{System.Byte}@,System.Int32,System.Int64)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteUInt64LE(System.ArraySegment{System.Byte}@,System.Int32,System.UInt64)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteSingleLE(System.ArraySegment{System.Byte}@,System.Int32,System.Single)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.ArrayIO.WriteDoubleLE(System.ArraySegment{System.Byte}@,System.Int32,System.Double)">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.BinaryConvert">
            <summary>
            Changes the .Net type of a value.
            </summary>
            <remarks>
            <para>
            Like System.Convert, except these methods won't throw an exception if the value overflows the target type.
            By default, all numerical values are converted numerically (ie integers are sign extended, and float to integer conversions are rounded, etc).
            For converting floating point to integers, use the <see cref="F:Demo3D.IO.BinaryConvert.ConversionType.BitConversion"/> to convert the value bitwise, such that a direct memory
            copy (rather than a conversion of the numerical value) is returned.
            </para>
            <para>
            Arrays are converted by converting all the elements of the array to the target type.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.IO.BinaryConvert.ConversionType">
            <summary>
            How to convert one type to another.
            </summary>
        </member>
        <member name="F:Demo3D.IO.BinaryConvert.ConversionType.BitConversion">
            <summary>
            Convert one type to another using a bit-copy.
            </summary>
        </member>
        <member name="F:Demo3D.IO.BinaryConvert.ConversionType.NumericalConversion">
            <summary>
            Convert one type to another by casting the value.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToSingle(System.UInt64)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToDouble(System.UInt64)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToUInt64(System.Single)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToUInt64(System.Double)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToSingle(System.Int64)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToDouble(System.Int64)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToInt64(System.Single)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToInt64(System.Double)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToSingle(System.UInt32)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToDouble(System.UInt32)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToUInt32(System.Single)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToUInt32(System.Double)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToSingle(System.Int32)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToDouble(System.Int32)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToInt32(System.Single)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToInt32(System.Double)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToUInt16(System.Single)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToUInt16(System.Double)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToInt16(System.Single)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ToInt16(System.Double)">
            <summary>
            Bit conversion.
            </summary>
            <param name="from">The value to change.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.UInt64,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change.</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Int64,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changse a value to a different type.
            </summary>
            <param name="from">The value to change.</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.UInt32,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change.</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Int32,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change.</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Boolean,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Char,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.SByte,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Byte,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.UInt16,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Int16,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Single,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Double,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.String,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="_"></param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(Demo3D.IO.BinaryString,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.TypeCode,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
            <remarks>
            Unboxes the object and then converts.  Won't convert arrays - use ChangeType(object, Type) instead.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Collections.IList,System.Type,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)">
            <summary>
            Changes a value to a different type.
            </summary>
            <param name="from">The value to change</param>
            <param name="to">The type to change to.</param>
            <param name="conversion">How to change the value (by bit-copying or numerical conversion).</param>
            <returns>The converted value (or null if the conversion can't be perfomed).</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.CanConvert(System.Type,System.Type,System.Boolean)">
            <summary>
            Returns true if ConvertType can perform a conversion.
            </summary>
            <param name="sourceType">The source type.</param>
            <param name="destinationType">The destination type.</param>
            <param name="castTypes">False if the conversion should be lossless.</param>
            <returns>True if ConvertType can perform a conversion.</returns>
            <remarks>
            <para>
            If <paramref name="castTypes"/> is true, then BinaryConvert will attempt any conversion,
            including conversions that lose data (eg unsigned to signed int, int to bool, or string to int).
            If it's false, then BinaryConvert will only attempt lossless conversions (eg int16 to int32).
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.IO.BinaryConvert.ConversionFunction(System.Type,System.Type)">
            <summary>
            Returns a function to perform a conversion, or null if no conversion is possible.
            </summary>
            <param name="sourceType">The source type.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The conversion function, or null.</returns>
            <remarks>
            <para>
            BinaryConvert will attempt any conversion, including conversions that lose data (eg unsigned to signed int, or int to bool).
            </para>
            <para>
            The function returned will return null if the conversion can't be performed.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.IO.BinaryString">
            <summary>
            The binary representation of a string.
            </summary>
            <remarks>
            Like System.String except that it handles strings decoded from binary data.
            Handles the case where the binary data includes nulls and control characters.
            </remarks>
        </member>
        <member name="F:Demo3D.IO.BinaryString.Empty">
            <summary>
            The empty string.
            </summary>
        </member>
        <member name="T:Demo3D.IO.BinaryString.BinaryStringConverter">
            <summary>
            Type converter for converting between System.String and BinaryString.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BinaryString.BinaryStringConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">A System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A System.Type that represents the type you want to convert to.</param>
            <returns>True if the conversion will succeed.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.BinaryStringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert from the given type to a BinaryString.
            </summary>
            <param name="context">A System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="sourceType">A System.Type that represents the type you want to convert from.</param>
            <returns>True if the conversion will succeed.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.BinaryStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert a string to a BinaryString.
            </summary>
            <param name="context">A System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.BinaryStringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert a string to a BinaryString.
            </summary>
            <param name="context">A System.ComponentModel.ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">The System.Globalization.CultureInfo to use as the current culture.</param>
            <param name="value">The System.Object to convert.</param>
            <returns>The converted object.</returns>
        </member>
        <member name="P:Demo3D.IO.BinaryString.String">
            <summary>
            The string representation.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BinaryString.BytesValid">
            <summary>
            The encoded byte array <see cref="P:Demo3D.IO.BinaryString.Bytes"/> is valid.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BinaryString.Bytes">
            <summary>
            The encoded byte array (includes any header data, etc); only if <see cref="P:Demo3D.IO.BinaryString.BytesValid"/> is true.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BinaryString.Encoding">
            <summary>
            The binary text encoding.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BinaryString.Set(System.String,System.Boolean,Demo3D.IO.BufferSegment,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Sets the value of the BinaryString.
            </summary>
            <param name="str">The string representation.</param>
            <param name="bytesValid">True if bytes are valid.</param>
            <param name="bytes">The string encoded in the <paramref name="encoding"/> format.</param>
            <param name="encoding">The encoding of the string.</param>
            <remarks>
            <para>
            BinaryString is effectively immutable.  This is only used during construction, or by BinaryTextEncoding to cache the
            results of an encoding.
            </para>
            <para>
            Either <paramref name="str"/> or <paramref name="bytes"/> needs to be non-null.  If <paramref name="str"/> is null then it
            can be deduced from <paramref name="bytes"/> so long as <paramref name="encoding"/> is not null.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.IO.BinaryString.#ctor(System.String,System.Boolean,System.ArraySegment{System.Byte}@,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Creates a new BinaryString.
            </summary>
            <param name="str">The string representation.</param>
            <param name="bytesValid">True if bytes are valid.</param>
            <param name="bytes">The string encoded in the <paramref name="encoding"/> format.</param>
            <param name="encoding">The encoding of the string.</param>
            <remarks>
            Either <paramref name="str"/> or <paramref name="bytes"/> needs to be non-null.  If <paramref name="str"/> is null then it
            can be deduced from <paramref name="bytes"/> so long as <paramref name="encoding"/> is not null.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.BinaryString.#ctor(System.String,System.ArraySegment{System.Byte}@,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Creates a new BinaryString.
            </summary>
            <param name="str">The string representation.</param>
            <param name="bytes">The string encoded in the <paramref name="encoding"/> format.</param>
            <param name="encoding">The encoding of the string.</param>
            <remarks>
            Either <paramref name="str"/> or <paramref name="bytes"/> needs to be non-null.  If <paramref name="str"/> is null then it
            can be deduced from <paramref name="bytes"/> so long as <paramref name="encoding"/> is not null.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.BinaryString.#ctor">
            <summary>
            Creates the empty string.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BinaryString.#ctor(System.String)">
            <summary>
            Creates a BinaryString with just its string representation.
            </summary>
            <param name="str">The string representation.</param>
        </member>
        <member name="M:Demo3D.IO.BinaryString.#ctor(System.String,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Creates a BinaryString with the string and encoding.
            </summary>
            <param name="str">The string representation.</param>
            <param name="encoding">The text encoding for marshalling/unmarshalling the string.</param>
        </member>
        <member name="M:Demo3D.IO.BinaryString.#ctor(System.ArraySegment{System.Byte}@,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Creates a BinaryString with the data bytes and encoding.
            </summary>
            <param name="bytes">The string encoded in the <paramref name="encoding"/> format.</param>
            <param name="encoding">The text encoding for marshalling/unmarshalling the string.</param>
        </member>
        <member name="M:Demo3D.IO.BinaryString.op_Implicit(Demo3D.IO.BinaryString)~System.String">
            <summary>
            Implicity converts a BinaryString to a System.String.
            </summary>
            <param name="binaryString">The BinaryString to convert.</param>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.op_Implicit(System.String)~Demo3D.IO.BinaryString">
            <summary>
            Implicity converts a System.String to a BinaryString.
            </summary>
            <param name="str">The string representation.</param>
            <returns>A BinaryString containing the string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.CompareTo(Demo3D.IO.BinaryString)">
            <summary>
            Compares the current instance with another BinaryString and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order
            as the other object.
            </summary>
            <param name="other">A BinaryString to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has
            these meanings:
            Less than zero: This instance precedes <paramref name="other"/> in the sort order.
            Zero: This instance occurs in the same position in the sort order as <paramref name="other"/>.
            Greater than zero: This instance follows <paramref name="other"/> in the sort order.
            </returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.CompareTo(System.String)">
            <summary>
            Compares the current instance with another string and returns an integer that indicates whether
            the current instance precedes, follows, or occurs in the same position in alphabetical order.
            </summary>
            <param name="other">An string to compare with this instance.</param>
            <returns>
            A value that indicates the relative order of the strings being compared. The return value has
            these meanings:
            Less than zero: This instance precedes <paramref name="other"/> in the sort order.
            Zero: This instance occurs in the same position in the sort order as <paramref name="other"/>.
            Greater than zero: This instance follows <paramref name="other"/> in the sort order.
            </returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.Equals(Demo3D.IO.BinaryString)">
            <summary>
            Indicates whether the current BinaryString is equal to another string.
            </summary>
            <param name="other">A string to compare.</param>
            <returns>True if the cyrrent string is equal to the other string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.Equals(System.String)">
            <summary>
            Indicates whether the current BinaryString is equal to another string.
            </summary>
            <param name="other">A string to compare.</param>
            <returns>True if the cyrrent string is equal to the other string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#GetTypeCode">
            <summary>
            Returns the type code of a BinaryString.
            </summary>
            <returns>TypeCode.Object</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Returns a boolean whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Returns a byte whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Returns a signed boolean whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Returns a character whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Returns a 16bit signed integer whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Returns a 16bit unsigned integer whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Returns a 32bit signed integer whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Returns a 32bit unsigned integer whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Returns a 64bit signed integer whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Returns a 64bit unsigned integer whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Returns a single floating point whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Returns a double floating point whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Returns a decimal whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Returns a DateTime point whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Returns the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Returns an object whose value is equivalent to the string representation.
            A <paramref name="provider"/> supplies culture-specific formatting information.
            </summary>
            <param name="conversionType">The type of the value to return.</param>
            <param name="provider">Culture-specific formatting information.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.Equals(System.Object)">
            <summary>
            Indicates whether the current BinaryString is equal to another string.
            </summary>
            <param name="other">A string to compare.</param>
            <returns>True if the cyrrent string is equal to the other string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.GetHashCode">
            <summary>
            The default hash code.
            </summary>
            <returns>Hash code for this string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryString.ToString">
            <summary>
            Returns the current string value.
            </summary>
            <returns>The string value.</returns>
        </member>
        <member name="T:Demo3D.IO.BinaryTextEncoding">
            <summary>
            Represents a binary text exconding.
            </summary>
            <remarks>
            <para>
            Like System.Text.Encoding except that this class takes into account not just the encoding of the characters in the text,
            but also the marashalling of the characters into the byte stream.  It doesn't just assume it's "length encoded" as BinaryWriter does.
            It also copes with binary data containing nulls and control characters, and removes them from the string.
            </para>
            <para>
            Use of this class is essential for passing string data between peers.  All the IO ReadString and WriteString methods use
            an instance of this class to determine how to encode strings into network/IO packets.  (See <see cref="M:Demo3D.IO.DataReaderExtensions.ReadString(Demo3D.IO.IDataReader,Demo3D.IO.BinaryTextEncoding)"/>
            and <see cref="M:Demo3D.IO.DataWriterExtensions.WriteString(Demo3D.IO.IDataWriter,Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)"/> for example).
            </para>
            </remarks>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="FixedStrings" />
            <para>
            Very often, especially when communicating over <see cref="T:Demo3D.Net.Protocols.TCP"/>, strings are encapsulated in some way
            that describes how much of the incoming data belongs to the string.  Common techniques include null-terminated
            (<see cref="M:Demo3D.IO.BinaryTextEncoding.NullTerminated(System.Text.Encoding)"/>), length-encoded (<see cref="M:Demo3D.IO.BinaryTextEncoding.LengthEncoded(System.Int32,System.Boolean,System.Text.Encoding)"/>), or string-delimited
            (<see cref="M:Demo3D.IO.BinaryTextEncoding.StringDelimited(System.String,System.String,System.Text.Encoding)"/>) strings.
            </para>
            <para>
            Null-terminated is common with ASCII strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="NullTerminated" />
            <para>
            Length-encoding is common when communicating with low-level systems; systems that typically use a binary protocol.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="LengthEncoded" />
            <para>
            String-delimited is common when communicating with high-level systems; systems that typically use a string-based protocol.
            These protocols usually encode the packet entirely in ASCII.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="StringDelimited" />
            <para>
            The following examples shows complete client and server implementations using a simple string-based protocol.  The high-level system
            connects to this server, and then the Demo3D model (the server) and the high-level system (the client) exchange string commands.
            The protocol dictates that each string is encapsulated with the STX and ETX characters.
            </para>
            <para>
            Either side can initiate a command.  The other side needs to respond with "ACK" once the command has been received and executed.
            </para>
            <code lang="C#" source="Examples\Net\StringServer.cs" region="Example" />
            <code lang="C#" source="Examples\Net\StringClient.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetByteCount(System.String)">
            <summary>
            Calculates the number of bytes produced by encoding the characters in the specified string.
            </summary>
            <param name="s">The string being encoded.</param>
            <returns>The number of encoded bytes.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetByteCount(Demo3D.IO.BinaryString)">
            <summary>
            Calculates the number of bytes produced by encoding the characters in the specified string.
            </summary>
            <param name="s">The string being encoded.</param>
            <returns>The number of encoded bytes.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetBytesInternal(System.String,Demo3D.IO.IDataWriter)">
            <summary>
            Encodes a string into a byte array.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="writer">The buffer to encode the string into.</param>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetBytes(Demo3D.IO.BinaryString,Demo3D.IO.IDataWriter)">
            <summary>
            Encodes a string into a byte array.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="writer">The buffer to encode the string into.</param>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetBytes(Demo3D.IO.BinaryString,System.ArraySegment{System.Byte}@)">
            <summary>
            Encodes a string into a byte array.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="buffer">The buffer to encode the string into.</param>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetBytes(Demo3D.IO.BinaryString,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a string into a byte array.
            </summary>
            <param name="s">The string to encode.</param>
            <param name="bytes">The byte array to store the encoded string in.</param>
            <param name="bytesIndex">The index into the byte array to start.</param>
            <param name="maxBytes">The maximum number of bytes to encode into.</param>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetBytes(Demo3D.IO.BinaryString)">
            <summary>
            Encodes a string into a byte array.
            </summary>
            <param name="s">The string to encode.</param>
            <returns>The byte array containing the encoded data.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetStringInternalAsync(Demo3D.IO.IDataReader)">
            <summary>
            Decodes a string from a byte array.
            </summary>
            <param name="reader">The buffer to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetStringAsync(Demo3D.IO.IDataReader)">
            <summary>
            Decodes a string from a byte array.
            </summary>
            <param name="reader">The buffer to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetStringInternal(Demo3D.IO.IDataReader)">
            <summary>
            Decodes a string from a byte array.
            </summary>
            <param name="reader">The buffer to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetString(Demo3D.IO.IDataReader)">
            <summary>
            Decodes a string from a byte array.
            </summary>
            <param name="reader">The buffer to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetString(System.ArraySegment{System.Byte}@)">
            <summary>
            Decodes a string from a byte array.
            </summary>
            <param name="buffer">The byte array to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a string from a byte array.
            </summary>
            <param name="bytes">The byte array to decode.</param>
            <param name="bytesIndex">The index into the byte array to start.</param>
            <param name="maxBytes">The maximum number of bytes to decode.</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="T:Demo3D.IO.BinaryTextEncoding.CodePageEncoding">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.FixedLength(System.Text.Encoding,System.UInt16)">
            <summary>
            Returns an encoder that will encode and decode fixed length string given a character encoding.
            </summary>
            <param name="characterEncoding">The character encoding.</param>
            <param name="length">The fixed length of the string in bytes (or 0).</param>
            <returns>An instance of BinaryTextEncoding that will encode and decode strings in this format.</returns>
            <remarks>
            If <paramref name="length"/> is 0 then the length of the string is determined dynamically.
            When reading a string, all the data in the IDataReader will be consumed and converted to a string.
            When writing a string, all the characters in the string are written to the IDataWriter.
            </remarks>
            <example>
            <para>
            The following example shows simple examples for reading and writing fixed/variable length strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="FixedStrings" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.FixedLengthASCII">
            <summary>
            An encoder that will encode and decode fixed length ASCII string.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing fixed/variable length strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="FixedStrings" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.FixedLengthUnicode">
            <summary>
            An encoder that will encode and decode fixed length Unicode string.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing fixed/variable length strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="FixedStrings" />
            </example>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.LengthEncoded(System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Returns an encoder that will encode and decode length encoded string.
            </summary>
            <param name="headerLength">The number of bytes that describe the length of the string that follows in the data buffer.</param>
            <param name="littleEndian">The format of the bytes that describe the length of the string.</param>
            <param name="characterEncoding">The character encoding.</param>
            <returns>An instance of BinaryTextEncoding that will encode and decode strings in this format.</returns>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="LengthEncoded" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.LengthEncodedASCII1">
            <summary>
            Returns an encoder that will encode and decode 1-byte length encoded ASCII string.  The string is formatted
            in the data buffer with the first byte containing the length of the string that follows.  The characters
            in the string are ASCII.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="LengthEncoded" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.LengthEncodedASCII2BE">
            <summary>
            Returns an encoder that will encode and decode 2-byte big-endian length encoded ASCII string.  The string is formatted
            in the data buffer with the first two bytes containing the length of the string that follows.  The characters
            in the string are ASCII.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="LengthEncoded" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.LengthEncodedASCII2LE">
            <summary>
            Returns an encoder that will encode and decode 2-byte little-endian length encoded ASCII string.  The string is
            formatted in the data buffer with the first two bytes containing the length of the string that follows.  The
            characters in the string are ASCII.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="LengthEncoded" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.LengthEncodedASCII4LE">
            <summary>
            Returns an encoder that will encode and decode 4-byte little-endian length encoded ASCII string.  The string is
            formatted in the data buffer with the first two bytes containing the length of the string that follows.  The
            characters in the string are ASCII.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="LengthEncoded" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.LengthEncodedUnicode2LE">
            <summary>
            Returns an encoder that will encode and decode 2-byte little-endian length encoded Unicode string.  The string is
            formatted in the data buffer with the first two bytes containing the length of the string that follows.  The
            characters in the string are Unicode.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="LengthEncoded" />
            </example>
        </member>
        <member name="T:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding">
            <summary>
            String delimited encoding.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding.GetByteCount(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding.GetBytesInternal(System.String,Demo3D.IO.IDataWriter)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding.GetStringInternalAsync(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding.GetStringInternal(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding.Equals(Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other">The object to compare with the current object.</param>
            <returns>True if the specified object is equal to the current object; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimitedEncoding.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.            
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.StringDelimited(System.String,System.String,System.Text.Encoding)">
            <summary>
            Returns an encoder that will encode and decode string-delimited strings given a character encoding.
            </summary>
            <param name="header">The expected string header (or null).</param>
            <param name="footer">The string footer/delimiter.</param>
            <param name="characterEncoding">The character encoding. (Defaults to ASCII.)</param>
            <returns>An instance of BinaryTextEncoding that will encode and decode strings in this format.</returns>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="StringDelimited" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.StxEtx">
            <summary>
            An encoder that will encode and decode STX/ETX delimted ASCII strings.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="StringDelimited" />
            </example>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.NullTerminated(System.Text.Encoding)">
            <summary>
            Returns an encoder that will encode and decode null terminated string given a character encoding.
            </summary>
            <param name="characterEncoding">The character encoding.</param>
            <returns>An instance of BinaryTextEncoding that will encode and decode strings in this format.</returns>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="NullTerminated" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.NullTerminatedASCII">
            <summary>
            An encoder that will encode and decode null terminated ASCII strings.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="NullTerminated" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.NullTerminatedUnicode">
            <summary>
            An encoder that will encode and decode null terminated Unicode strings.
            </summary>
            <example>
            <para>
            The following example shows simple examples for reading and writing strings.
            </para>
            <code lang="C#" source="Examples\Net\BinaryTextEncoding.cs" region="NullTerminated" />
            </example>
        </member>
        <member name="P:Demo3D.IO.BinaryTextEncoding.Default">
            <summary>
            The default encoding is 2-byte big-endian length-encoded ASCII.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BinaryTextEncoding.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.Buffer">
            <summary>
            Represents a pointer into a memory buffer.
            </summary>
        </member>
        <member name="P:Demo3D.IO.Buffer.Empty">
            <summary>
            An empty buffer.
            </summary>
        </member>
        <member name="M:Demo3D.IO.Buffer.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new Buffer.
            </summary>
            <param name="data">Underlying memory byte array.</param>
            <param name="from">Index into data of the first byte in the Buffer.</param>
            <param name="length">Number of bytes.</param>
        </member>
        <member name="M:Demo3D.IO.Buffer.#ctor(System.ArraySegment{System.Byte}@)">
            <summary>
            Creates a new Buffer referencing a subsection of the same underlying memory byte array as the specified pointer.
            </summary>
            <param name="pointer">The pointer to the current memory byte array.</param>
        </member>
        <member name="M:Demo3D.IO.Buffer.#ctor(System.Byte[])">
            <summary>
            Creates a new Buffer describing the entire specified byte array.
            </summary>
            <param name="buffer">The underlying memory byte array.</param>
        </member>
        <member name="M:Demo3D.IO.Buffer.#ctor(System.Int64)">
            <summary>
            Creates a new Buffer with a given fixed size.
            </summary>
            <param name="size">The size of the new Buffer.</param>
        </member>
        <member name="M:Demo3D.IO.Buffer.#ctor(System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Creates a new Buffer referencing a subsection of the same underlying memory byte array as the specified pointer.
            </summary>
            <param name="pointer">The pointer to the current memory byte array.</param>
            <param name="offset">Offset into pointer.</param>
            <param name="length">The length of the Buffer to reference.</param>
        </member>
        <member name="P:Demo3D.IO.Buffer.Data">
            <summary>
            The underlying memory byte array.
            </summary>
        </member>
        <member name="P:Demo3D.IO.Buffer.From">
            <summary>
            Index into Data of the first byte in the BufferSegment.
            </summary>
        </member>
        <member name="P:Demo3D.IO.Buffer.To">
            <summary>
            Returns the index into Data of the first byte after the BufferSegment.
            </summary>
        </member>
        <member name="P:Demo3D.IO.Buffer.Length">
            <summary>
            The number of bytes being referenced by this BufferSegment.
            </summary>
        </member>
        <member name="M:Demo3D.IO.Buffer.op_Implicit(Demo3D.IO.Buffer)~System.ArraySegment{System.Byte}">
            <summary>
            Convert Buffer to ArraySegment{byte}.
            </summary>
            <param name="buffer">The buffer to convert.</param>
        </member>
        <member name="M:Demo3D.IO.Buffer.op_Implicit(Demo3D.IO.Buffer)~Demo3D.IO.BufferSegment">
            <summary>
            Convert Buffer to BufferSegment.
            </summary>
            <param name="buffer">The buffer to convert.</param>
        </member>
        <member name="M:Demo3D.IO.Buffer.op_Explicit(Demo3D.IO.BufferSegment)~Demo3D.IO.Buffer">
            <summary>
            Convert BufferSegment to Buffer.
            </summary>
            <param name="buffer">The buffer segment to convert.</param>
        </member>
        <member name="M:Demo3D.IO.Buffer.GetReference``1(System.Int32)">
            <summary>
            Returns a reference to data of type <typeparamref name="T"/> at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>A reference to the value in the buffer.</returns>
        </member>
        <member name="P:Demo3D.IO.Buffer.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="M:Demo3D.IO.Buffer.ToByteArray">
            <summary>
            Returns a byte array containing the data referenced by this Buffer.
            The byte array returned may or may not reference the same memory byte array as this Buffer.
            </summary>
            <returns>Byte array containing the data.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.Clone">
            <summary>
            Return a copy of the data.  The underlying buffer is not shared.
            </summary>
            <returns>Cloned data.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.Equals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true if <paramref name="length"/> portion of the two buffers have the same content.
            </summary>
            <param name="a">The buffer to compare.</param>
            <param name="aOffset">The offset into <paramref name="a"/> to compare.</param>
            <param name="b">The buffer to compare.</param>
            <param name="bOffset">The offset into <paramref name="b"/> to compare.</param>
            <param name="length">The length to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.Equals(Demo3D.IO.Buffer)">
            <summary>
            Returns true if the two buffers have the same content.
            </summary>
            <param name="other">The buffer to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.Equals(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true if <paramref name="length"/> portion of the two buffers have the same content.
            </summary>
            <param name="offset">The offset into this buffer to compare.</param>
            <param name="other">The buffer to compare.</param>
            <param name="otherOffset">The offset into <paramref name="other"/> to compare.</param>
            <param name="length">The length to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.Equals(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true if <paramref name="length"/> portion of the two buffers have the same content.
            </summary>
            <param name="other">The buffer to compare.</param>
            <param name="otherOffset">The offset into <paramref name="other"/> to compare.</param>
            <param name="length">The length to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.Equals(System.Byte[])">
            <summary>
            Returns true if the two buffers have the same content.
            </summary>
            <param name="other">The buffer to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.Equals(System.Object)">
            <summary>
            Returns true if the two buffers have the same content.
            </summary>
            <param name="obj">The buffer to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.GetHashCode">
            <summary>
            Serves has a hash function for the content of the buffer.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Demo3D.IO.Buffer.ToString">
            <summary>
            Returns a description of the buffer.
            </summary>
            <returns>A description of the buffer.</returns>
        </member>
        <member name="T:Demo3D.IO.BufferReader">
            <summary>
            Reads data from a buffer.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferReader.Position">
            <summary>
            Returns the current position in the data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferReader.#ctor(System.ArraySegment{System.Byte}@)">
            <summary>
            Constructs a BufferReader.
            </summary>
            <param name="buffer">The buffer of data to read from.</param>
        </member>
        <member name="M:Demo3D.IO.BufferReader.#ctor(System.Byte[])">
            <summary>
            Constructs a BufferReader.
            </summary>
            <param name="buffer">The buffer of data to read from.</param>
        </member>
        <member name="P:Demo3D.IO.BufferReader.Length">
            <summary>
            Returns the current length of the data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferReader.Remaining">
            <summary>
            Returns the remaining data available.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferReader.IsFixed">
            <summary>
            Returns true if this is a fixed size data source.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferReader.Advance(System.Int32)">
            <summary>
            Advances the current packet position..
            </summary>
            <param name="length">The number of bytes to advance the current buffer position.</param>
        </member>
        <member name="M:Demo3D.IO.BufferReader.Seek(System.Int32)">
            <summary>
            Sets the current packet position.
            </summary>
            <param name="position">The new buffer position.</param>
        </member>
        <member name="T:Demo3D.IO.BufferWriter">
            <summary>
            Writes data into a buffer.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferWriter.Position">
            <summary>
            Returns the current position in the data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferWriter.IsFixed">
            <summary>
            Returns true if this is a fixed size data source.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.#ctor">
            <summary>
            Creates a BufferWriter that will create a new buffer with the data written into it.
            The new buffer will expand to accomodate the data written.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.#ctor(System.ArraySegment{System.Byte}@)">
            <summary>
            Creates a BufferWriter that will write data into the buffer provided.
            </summary>
            <param name="buffer">The buffer to contain the data written.</param>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.#ctor(Demo3D.IO.BufferSegment@)">
            <summary>
            Creates a BufferWriter that will write data into the buffer provided.
            </summary>
            <param name="buffer">The buffer to contain the data written.</param>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.#ctor(System.Byte[])">
            <summary>
            Creates a BufferWriter that will write data into the buffer provided.
            </summary>
            <param name="buffer">The buffer to contain the data written.</param>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.#ctor(System.Int64)">
            <summary>
            Creates a BufferWriter that will write data into the buffer provided.
            </summary>
            <param name="size">The size of the buffer to contain the data written.</param>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.#ctor(Demo3D.IO.Buffer)">
            <summary>
            Creates a BufferWriter that will write data into the buffer provided.
            </summary>
            <param name="buffer">The buffer to contain the data written.</param>
        </member>
        <member name="P:Demo3D.IO.BufferWriter.Length">
            <summary>
            Returns the current length of the data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferWriter.Remaining">
            <summary>
            Returns the remaining space available.  (Always 0 for an expandable buffer.)
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.Advance(System.Int32)">
            <summary>
            Advances the current packet position.
            </summary>
            <param name="length">The number of bytes to advance the current buffer position.</param>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.Seek(System.Int32)">
            <summary>
            Sets the current packet position..
            </summary>
            <param name="position">The new buffer position.</param>
        </member>
        <member name="M:Demo3D.IO.BufferWriter.Resolve">
            <summary>
            Resolve this writer into a data buffer.
            </summary>
            <returns>A buffer containing all the data.</returns>
        </member>
        <member name="T:Demo3D.IO.BufferSegment">
            <summary>
            Represents a pointer into a memory buffer.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferSegment.Empty">
            <summary>
            An empty buffer.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new BufferSegment.
            </summary>
            <param name="data">Underlying memory byte array.</param>
            <param name="from">Index into data of the first byte in the BufferSegment.</param>
            <param name="length">Number of bytes.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.#ctor(System.Byte[])">
            <summary>
            Creates a new BufferSegment describing the entire specified byte array.
            </summary>
            <param name="buffer">The underlying memory byte array.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.#ctor(System.Int64)">
            <summary>
            Creates a new BufferSegment with a given fixed size.
            </summary>
            <param name="size">The size of the new BufferSegment.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.#ctor(System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Creates a new BufferSegment referencing a subsection of the same underlying memory byte array as the specified pointer.
            </summary>
            <param name="pointer">The pointer to the current memory byte array.</param>
            <param name="offset">Offset into pointer.</param>
            <param name="length">The length of the BufferSegment to reference.</param>
        </member>
        <member name="P:Demo3D.IO.BufferSegment.Data">
            <summary>
            The underlying memory byte array.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferSegment.From">
            <summary>
            Index into Data of the first byte in the BufferSegment.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferSegment.To">
            <summary>
            Returns the index into Data of the first byte after the BufferSegment.
            </summary>
        </member>
        <member name="P:Demo3D.IO.BufferSegment.Length">
            <summary>
            The number of bytes being referenced by this BufferSegment.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.op_Implicit(Demo3D.IO.BufferSegment)~System.ArraySegment{System.Byte}">
            <summary>
            Convert BufferSegment to ArraySegment{byte}.
            </summary>
            <param name="buffer">The buffer to convert.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.op_Implicit(System.ArraySegment{System.Byte})~Demo3D.IO.BufferSegment">
            <summary>
            Convert ArraySegment{byte} to BufferSegment.
            </summary>
            <param name="array">The array to convert.</param>
        </member>
        <member name="P:Demo3D.IO.BufferSegment.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ToByteArray">
            <summary>
            Returns a byte array containing the data referenced by this BufferSegment.
            The byte array returned may or may not reference the same memory byte array as this BufferSegment.
            </summary>
            <returns>Byte array containing the data.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.GetReference``1(System.Int32)">
            <summary>
            Returns a reference to data of type <typeparamref name="T"/> at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>A reference to the value in the buffer.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadBoolean(System.Int32)">
            <summary>
            Reads a boolean at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadBit(System.Int32,System.Int32)">
            <summary>
            Reads a bit at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="bitNo">The bit within the byte at <paramref name="offset"/></param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadChar(System.Int32)">
            <summary>
            Reads a character at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadUInt16(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadUInt16BE(System.Int32)">
            <summary>
            Reads a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadInt16(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadInt16BE(System.Int32)">
            <summary>
            Reads a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadUInt32(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadUInt32BE(System.Int32)">
            <summary>
            Reads a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadInt32(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadInt32BE(System.Int32)">
            <summary>
            Reads a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadUInt64(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadUInt64BE(System.Int32)">
            <summary>
            Reads a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadInt64(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadInt64BE(System.Int32)">
            <summary>
            Reads a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadSingle(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadSingleBE(System.Int32)">
            <summary>
            Reads a 32bit single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadDouble(System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadDoubleBE(System.Int32)">
            <summary>
            Reads a 64bit double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadString(System.Int32,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads a string at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="encoding">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.GetString(System.Int32,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads a string at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="encoding">The encoding of the data in the buffer.</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadBytes(System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The value read.</returns>
            <remarks>
            The buffer returned may be a copy of the data.
            For a PacketReader the data is effectively immutable, it doesn't matter.
            For a PacketWriter it means that there's no guarantee that the buffer returned will reflect subsequent
            changes to the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="toBuffer">The buffer to fill.</param>
            <param name="toBufferOffset">The start position within <paramref name="toBuffer"/> to start writing.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadBytes(System.Int32,Demo3D.IO.IDataWriter,System.Int32)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="toPacket">The packet to fill.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ReadBytes(System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="toBuffer">The buffer to fill.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteByte(System.Int32,System.Byte)">
            <summary>
            Writes a byte at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteBoolean(System.Int32,System.Boolean)">
            <summary>
            Writes a boolean at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteBit(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Writes a bit at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="bitNo">The bit within the byte to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteChar(System.Int32,System.Char)">
            <summary>
            Writes an 8bit character at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteSByte(System.Int32,System.SByte)">
            <summary>
            Writes a signed byte at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt16(System.Int32,System.Int16,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt16BE(System.Int32,System.Int16)">
            <summary>
            Writes a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt16LE(System.Int32,System.Int16)">
            <summary>
            Writes a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt16(System.Int32,System.UInt16,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt16BE(System.Int32,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt16LE(System.Int32,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt32(System.Int32,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt32BE(System.Int32,System.Int32)">
            <summary>
            Writes a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt32LE(System.Int32,System.Int32)">
            <summary>
            Writes a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt32(System.Int32,System.UInt32,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt32BE(System.Int32,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt32LE(System.Int32,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt64(System.Int32,System.Int64,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt64BE(System.Int32,System.Int64)">
            <summary>
            Writes a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteInt64LE(System.Int32,System.Int64)">
            <summary>
            Writes a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt64(System.Int32,System.UInt64,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt64BE(System.Int32,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteUInt64LE(System.Int32,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteSingle(System.Int32,System.Single,Demo3D.IO.Endian)">
            <summary>
            Writes a single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteSingleBE(System.Int32,System.Single)">
            <summary>
            Writes a single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteSingleLE(System.Int32,System.Single)">
            <summary>
            Writes a single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteDouble(System.Int32,System.Double,Demo3D.IO.Endian)">
            <summary>
            Writes a double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteDoubleBE(System.Int32,System.Double)">
            <summary>
            Writes a double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteDoubleLE(System.Int32,System.Double)">
            <summary>
            Writes a double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteString(System.Int32,Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Writes a string at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="encoding">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteBytes(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">The data to write.</param>
            <param name="fromBufferOffset">The offset into <paramref name="fromBuffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteBytes(System.Int32,System.ArraySegment{System.Byte}@,System.Int32)">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">The data to write.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteBytes(System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.WriteBytes(System.Int32,System.Byte[])">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">A list of bytes to write.</param>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.Clone">
            <summary>
            Return a copy of the data.  The underlying buffer is not shared.
            </summary>
            <returns>Cloned data.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.Equals(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true if <paramref name="length"/> portion of the two buffers have the same content.
            </summary>
            <param name="a">The buffer to compare.</param>
            <param name="aOffset">The offset into <paramref name="a"/> to compare.</param>
            <param name="b">The buffer to compare.</param>
            <param name="bOffset">The offset into <paramref name="b"/> to compare.</param>
            <param name="length">The length to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.Equals(Demo3D.IO.BufferSegment)">
            <summary>
            Returns true if the two buffers have the same content.
            </summary>
            <param name="other">The buffer to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.Equals(System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true if <paramref name="length"/> portion of the two buffers have the same content.
            </summary>
            <param name="offset">The offset into this buffer to compare.</param>
            <param name="other">The buffer to compare.</param>
            <param name="otherOffset">The offset into <paramref name="other"/> to compare.</param>
            <param name="length">The length to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.Equals(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns true if <paramref name="length"/> portion of the two buffers have the same content.
            </summary>
            <param name="other">The buffer to compare.</param>
            <param name="otherOffset">The offset into <paramref name="other"/> to compare.</param>
            <param name="length">The length to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.Equals(System.Byte[])">
            <summary>
            Returns true if the two buffers have the same content.
            </summary>
            <param name="other">The buffer to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.Equals(System.Object)">
            <summary>
            Returns true if the two buffers have the same content.
            </summary>
            <param name="obj">The buffer to compare.</param>
            <returns>True if the two buffers have the same content.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.GetHashCode">
            <summary>
            Serves has a hash function for the content of the buffer.
            </summary>
            <returns>The hash.</returns>
        </member>
        <member name="M:Demo3D.IO.BufferSegment.ToString">
            <summary>
            Returns a description of the buffer.
            </summary>
            <returns>A description of the buffer.</returns>
        </member>
        <member name="T:Demo3D.IO.BigEndian">
            <summary>
            Encodes and decodes simple data types in the big endian format.
            </summary>
        </member>
        <member name="M:Demo3D.IO.BigEndian.WriteUInt16(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Encodes a 16bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BigEndian.WriteInt16(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Encodes a 16bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BigEndian.WriteUInt32(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Encodes a 32bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BigEndian.WriteInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a 32bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BigEndian.WriteUInt64(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Encodes a 64bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BigEndian.WriteInt64(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Encodes a 64bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BigEndian.WriteBit(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes a single bit into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="bitNo">The position of the bit in the byte.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.BigEndian.ReadUInt16(System.Byte[],System.Int32)">
            <summary>
            Decodes a 16bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.BigEndian.ReadInt16(System.Byte[],System.Int32)">
            <summary>
            Decodes a 16bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.BigEndian.ReadUInt32(System.Byte[],System.Int32)">
            <summary>
            Decodes a 32bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.BigEndian.ReadInt32(System.Byte[],System.Int32)">
            <summary>
            Decodes a 32bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.BigEndian.ReadUInt64(System.Byte[],System.Int32)">
            <summary>
            Decodes a 64bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.BigEndian.ReadInt64(System.Byte[],System.Int32)">
            <summary>
            Decodes a 64bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.BigEndian.ReadBit(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a single bit from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <param name="bitNo">The position of the bit in the byte.</param>
            <returns>The value read.</returns>
        </member>
        <member name="T:Demo3D.IO.LittleEndian">
            <summary>
            Encodes and decodes simple data types in the little endian format.
            </summary>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.WriteUInt16(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Encodes a 16bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.WriteInt16(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Encodes a 16bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.WriteUInt32(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Encodes a 32bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.WriteInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a 32bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.WriteUInt64(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Encodes a 64bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.WriteInt64(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Encodes a 64bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.WriteBit(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Encodes a single bit into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="bitNo">The position of the bit in the byte.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.ReadUInt16(System.Byte[],System.Int32)">
            <summary>
            Decodes a 16bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.ReadInt16(System.Byte[],System.Int32)">
            <summary>
            Decodes a 16bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.ReadUInt32(System.Byte[],System.Int32)">
            <summary>
            Decodes a 32bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.ReadInt32(System.Byte[],System.Int32)">
            <summary>
            Decodes a 32bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.ReadUInt64(System.Byte[],System.Int32)">
            <summary>
            Decodes a 64bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.ReadInt64(System.Byte[],System.Int32)">
            <summary>
            Decodes a 64bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.LittleEndian.ReadBit(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decodes a single bit from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <param name="bitNo">The position of the bit in the byte.</param>
            <returns>The value read.</returns>
        </member>
        <member name="T:Demo3D.IO.Endian">
            <summary>
            Encodes and decodes simple data types in a particular endian format.
            </summary>
        </member>
        <member name="M:Demo3D.IO.Endian.WriteInt16(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Encodes a 16bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.Endian.WriteInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encodes a 32bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.Endian.WriteInt64(System.Byte[],System.Int32,System.Int64)">
            <summary>
            Encodes a 64bit signed integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.Endian.WriteUInt16(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Encodes a 16bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.Endian.WriteUInt32(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Encodes a 32bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.Endian.WriteUInt64(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Encodes a 64bit unsigned integer into the data buffer.
            </summary>
            <param name="buffer">Buffer to write the data into.</param>
            <param name="offset">Offset into 'buffer' to start writing the data.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.Endian.ReadInt16(System.Byte[],System.Int32)">
            <summary>
            Decodes a 16bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.Endian.ReadInt32(System.Byte[],System.Int32)">
            <summary>
            Decodes a 32bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.Endian.ReadInt64(System.Byte[],System.Int32)">
            <summary>
            Decodes a 64bit signed integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.Endian.ReadUInt16(System.Byte[],System.Int32)">
            <summary>
            Decodes a 16bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.Endian.ReadUInt32(System.Byte[],System.Int32)">
            <summary>
            Decodes a 32bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="M:Demo3D.IO.Endian.ReadUInt64(System.Byte[],System.Int32)">
            <summary>
            Decodes a 64bit unsigned integer from the data buffer.
            </summary>
            <param name="buffer">Buffer to read the data from.</param>
            <param name="offset">Offset into 'buffer' to start reading the data.</param>
            <returns>The value to read.</returns>
        </member>
        <member name="F:Demo3D.IO.Endian.Big">
            <summary>
            Encodes and decodes simple data types in the big endian format.
            </summary>
        </member>
        <member name="F:Demo3D.IO.Endian.Little">
            <summary>
            Encodes and decodes simple data types in the little endian format.
            </summary>
        </member>
        <member name="M:Demo3D.IO.Endian.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.APIException">
            <summary>
            Demo3D.IO API exception.
            </summary>
        </member>
        <member name="M:Demo3D.IO.APIException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the IOException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Demo3D.IO.ClosedException">
            <summary>
            An exception thrown when the connection closed.
            </summary>
        </member>
        <member name="M:Demo3D.IO.ClosedException.#ctor">
            <summary>
            Generates a ClosedException.
            </summary>
        </member>
        <member name="T:Demo3D.IO.IOException">
            <summary>
            Error in data received, or error caused by peer, or user configuration error, etc.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IOException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the DataException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Demo3D.IO.IOException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the DataException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception (or null).</param>
        </member>
        <member name="T:Demo3D.IO.ProtocolPeerException">
            <summary>
            An exception thrown when the an error is detected caused by the peer.
            </summary>
        </member>
        <member name="M:Demo3D.IO.ProtocolPeerException.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the ProtocolPeerException class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="internalData">Optional internal data associated with the error.</param>
        </member>
        <member name="M:Demo3D.IO.ProtocolPeerException.TryGetInternalData``1(``0@)">
            <summary>
            Get additional data associated with the error.
            </summary>
        </member>
        <member name="M:Demo3D.IO.ProtocolPeerException.GetInternalData``1(``0)">
            <summary>
            Get additional data associated with the error.
            </summary>
            <param name="defaultValue">The default value to return.</param>
            <returns>The data value or the <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:Demo3D.IO.ProtocolPeerException.SetInternalData(System.Type,System.Object)">
            <summary>
            Set additional data associated with the error.
            </summary>
        </member>
        <member name="M:Demo3D.IO.ProtocolPeerException.SetInternalData(System.Object)">
            <summary>
            Set additional data associated with the error.
            </summary>
        </member>
        <member name="M:Demo3D.IO.ProtocolPeerException.SetInternalData``1(``0)">
            <summary>
            Set additional data associated with the error.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PeerDisconnectedException">
            <summary>
            An exception thrown when the peer disconnects.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PeerDisconnectedException.#ctor(System.String)">
            <summary>
            The peer disconnected.
            </summary>
            <param name="message">Additional detail about the disconnection.</param>
        </member>
        <member name="T:Demo3D.IO.TimeoutException">
            <summary>
            An exception thrown when a timeout occurs.
            </summary>
        </member>
        <member name="M:Demo3D.IO.TimeoutException.#ctor(System.String)">
            <summary>
            Generates a TimeoutException.
            </summary>
            <param name="message">Additional detail about the timeout.</param>
        </member>
        <member name="T:Demo3D.IO.OSException">
            <summary>
            An exception thrown by the Operating System.
            </summary>
        </member>
        <member name="M:Demo3D.IO.OSException.#ctor(System.String,System.Exception)">
            <summary>
            Generates an OSException.
            </summary>
            <param name="message">Additional detail about the error.</param>
            <param name="innerException">The OS exception that is the cause of this exception.</param>
        </member>
        <member name="T:Demo3D.IO.Exceptions">
            <summary>
            Exception factories.  A set of methods that create exceptions for particular classes of event.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.Exceptions.GeneralError(System.String,System.String)">
            <summary>
            Creates an exception for a general IO error.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="atMethod">The method that is raising the exception.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.AddErrorLocation(System.Exception,Demo3D.Common.IDataLocationProvider,System.String,System.String)">
            <summary>
            Adds location information to an exception generated while reading from or writing to a packet.
            </summary>
            <param name="exception">The exception being thrown.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method reading/writing to the packet.</param>
            <param name="inData">The data section within the packet being read/written.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.NotEnoughSpace(System.Int32,System.Int32,Demo3D.Common.IDataLocationProvider,System.String,System.String)">
            <summary>
            Creates an exception when insufficient space is available in the buffer or packet.
            </summary>
            <param name="expected">The expected amount of space.</param>
            <param name="available">The amount of space available.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method that was writing the data.</param>
            <param name="inData">The section in the data where the error occured.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.NotEnoughData(System.Int32,System.Int32,Demo3D.Common.IDataLocationProvider,System.String,System.String)">
            <summary>
            Creates an exception when insufficient data is received from the peer.
            </summary>
            <param name="expected">The expected amount of data.</param>
            <param name="got">The amount of data received.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method that was reading the data.</param>
            <param name="inData">The section in the data where the error occured.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.UnexpectedAmountOfData(System.Int32,System.Int32,Demo3D.Common.IDataLocationProvider,System.String,System.String)">
            <summary>
            Creates an exception when an unexpected amount of data is received from the peer.
            </summary>
            <param name="expected">The expected amount of data.</param>
            <param name="got">The amount of data received.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method that was reading the data.</param>
            <param name="inData">The section in the data where the error occured.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.ProtocolApiError(System.String,Demo3D.Common.IDataLocationProvider,System.String,System.String)">
            <summary>
            Creates an exception for an internal programming error.
            </summary>
            <param name="message">Details about the error.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method reading/writing to the socket.</param>
            <param name="inData">The section of the data where the error occured.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.ClosedError(Demo3D.Common.IDataLocationProvider,System.String)">
            <summary>
            Creates a connection closed exception.
            </summary>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method reading/writing to the socket.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.ProtocolError(System.String,Demo3D.Common.IDataLocationProvider,System.String,System.Exception)">
            <summary>
            Generates an exception with information about an error detected on a packet.
            </summary>
            <param name="message">Additional detail about the error.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method reading/writing to the packet.</param>
            <param name="innerException">The inner exception that reported the error.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.ProtocolPeerError(System.String,Demo3D.Common.IDataLocationProvider,System.Object,System.String,System.String)">
            <summary>
            Creates an exception for an error in the data received from the peer.
            </summary>
            <param name="message">Details about the error.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="internalData">Optional additional data associated with the error.</param>
            <param name="atMethod">The method reading from the socket.</param>
            <param name="inData">The section of the data where the error occured.</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.Timeout(System.String,Demo3D.Common.IDataLocationProvider,System.String)">
            <summary>
            Generates a TimeoutException.
            </summary>
            <param name="message">The timeout message.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method that was reading from or writing to the connection (or null).</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.PeerDisconnected(System.String,Demo3D.Common.IDataLocationProvider,System.String)">
            <summary>
            Generates a PeerDisconnectedException.
            </summary>
            <param name="message">The disconnection message.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <param name="atMethod">The method that was reading from the connection (or null).</param>
            <returns>The exception.</returns>
        </member>
        <member name="M:Demo3D.IO.Exceptions.OSError(System.String,System.Exception,Demo3D.Common.IDataLocationProvider)">
            <summary>
            Generates an exception with information about an error from the Operating System.
            </summary>
            <param name="atMethod">The method reading/writing to the packet.</param>
            <param name="innerException">The inner exception that reported the error.</param>
            <param name="location">The socket or packet reader/writer that was reading/writing to the connection.</param>
            <returns>The exception.</returns>
        </member>
        <member name="T:Demo3D.IO.External.CommandBase">
            <summary>
            IPC command base id.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.External.Command">
            <summary>
            IPC command.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.External.CommandExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.External.CommandExtensions.Make(Demo3D.IO.External.CommandBase,System.UInt16)">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.External.IMemoryXAllocator">
            <summary>
            Represents a class for allocating shared memory for data exchange.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.IO.External.IMemoryXAllocator.MemName">
            <summary>
            The shared memory map or file name (or null for in-core memory).
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IMemoryXAllocator.AllocMemory(System.Int32)">
            <summary>
            Allocate memory exchange.
            </summary>
            <param name="length">Memory size.</param>
            <returns>Memory exchange.</returns>
        </member>
        <member name="T:Demo3D.IO.External.IPC">
            <summary>
            Simple interprocess communication.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.Reply">
            <summary>
            Reply to a request.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.Stop">
            <summary>
            Stop processing commands.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.Log">
            <summary>
            Log a message.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.AddLog">
            <summary>
            Add a new component log.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.RemoveLog">
            <summary>
            Remove a component log.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.AddRoles">
            <summary>
            Add IPC rol.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.Execute">
            <summary>
            Execute code remotely.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPC.IPCCommand.User">
            <summary>
            First user command.
            </summary>
        </member>
        <member name="T:Demo3D.IO.External.IPC.BuiltinCommands">
            <summary>
            Builtin commands.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinCommands.AllocateCommandRange(System.Int32)">
            <summary>
            Allocate command id range.
            </summary>
            <param name="num">Number to allocate.</param>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinCommands.GetLogId(Demo3D.Common.ComponentLog)">
            <summary>
            Get a log id that uniquely identifies the specified log.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinCommands.GetLog(System.UInt32)">
            <summary>
            Get the component log for a specified log id.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinCommands.ExecuteAsync(System.Boolean,Demo3D.IO.External.IPC.ExecuteAsyncDelegate,System.ArraySegment{System.Byte},Demo3D.IO.External.CommandBase,Demo3D.Common.IComponentLogger)">
            <summary>
            Execute a static method with a single parameter.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinCommands.StartAsync(System.Boolean,Demo3D.Common.IComponentLogger)">
            <summary>
            Register and start processing log requests.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinCommands.Stop">
            <summary>
            Close all slave logs.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinHostCommands.AllocateCommandRange(System.Int32)">
            <summary>
            Allocate command id's.
            </summary>
            <param name="num">Number to allocate.</param>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinHostCommands.GetLogId(Demo3D.Common.ComponentLog)">
            <summary>
            Get a log id that uniquely identifies the specified log.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinHostCommands.GetLog(System.UInt32)">
            <summary>
            Get the component log for a specified log id.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinHostCommands.StartAsync(System.Boolean,Demo3D.Common.IComponentLogger)">
            <summary>
            Register and start processing log requests.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinHostCommands.Stop">
            <summary>
            Close all slave logs.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinSlaveCommands.#ctor(Demo3D.IO.External.IPC,System.Boolean)">
            <summary>
            Construct builtin slave commands.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinSlaveCommands.GetLogId(Demo3D.Common.ComponentLog)">
            <summary>
            Get a log id that uniquely identifies the specified log.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.BuiltinSlaveCommands.GetLog(System.UInt32)">
            <summary>
            Get the component log for a specified log id.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.#ctor(System.String)">
            <summary>
            Construct IPC host.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.#ctor(System.IO.Pipes.NamedPipeServerStream,System.Boolean)">
            <summary>
            Construct IPC slave.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.AddRole(System.String)">
            <summary>
            Update the IPC name with a descriptive role.
            </summary>
            <param name="role"></param>
        </member>
        <member name="M:Demo3D.IO.External.IPC.SetProcessId(System.Int32)">
            <summary>
            Update the IPC name with the peer process id.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.AllocateCommandRange(System.Int32)">
            <summary>
            Allocate command id range.
            </summary>
            <param name="numCommands">Number to allocate.</param>
            <returns>First allocated command id.</returns>
        </member>
        <member name="T:Demo3D.IO.External.IPC.ExecuteAsyncDelegate">
            <summary>
            Delegate for unmarshalling RPI event methods.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="args">Args.</param>
            <param name="ipc">IPC.</param>
            <param name="commandBase">Base for module specific commands.</param>
            <param name="logger">A method for logging messages.</param>
            <returns>nothing.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.ExecuteAsync(System.Boolean,Demo3D.IO.External.IPC.ExecuteAsyncDelegate,System.ArraySegment{System.Byte}@,Demo3D.IO.External.CommandBase,Demo3D.Common.IComponentLogger)">
            <summary>
            Execute static method remotely.
            </summary>
            <param name="sync">If true the Task returned is guaranteed to be complete.</param>
            <param name="method">The method to call.  Must be a static method with three arguments.</param>
            <param name="arg">Generic arguments to pass to the method.</param>
            <param name="commandBase">Base for module specific commands.</param>
            <param name="logger">An object that can log messages.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.StartServerAsync``1(System.Boolean,System.Int32,Demo3D.IO.External.IPC.ExecuteAsyncDelegate,System.ArraySegment{System.Byte},Demo3D.Common.IComponentLogger)">
            <summary>
            Starts a server in the external process (if not already started) and returns the server command base id.
            </summary>
            <typeparam name="T">The server type.</typeparam>
            <param name="sync">If true the Task returned is guaranteed to be complete.</param>
            <param name="numCommands">Number of IPC commands to allocate for server communications.</param>
            <param name="method">Server main routine.</param>
            <param name="arg">Method argument.</param>
            <param name="logger">An object that can log messages.</param>
            <returns>First allocated command id.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.StartServer``1(System.Func{``0})">
            <summary>
            Starts a server in the local process (if not already started) and returns the server instance.
            </summary>
            <typeparam name="T">The server type.</typeparam>
            <param name="start">Server main routine.</param>
            <returns>The server instance.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.GetTxId">
            <summary>
            Gets a unique transaction id (never 0).  Used for sending messages that require a reply.
            </summary>
            <returns>Unique transation id.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.SendMessage(Demo3D.IO.External.Command,System.UInt32,Demo3D.Common.IComponentLogger)">
            <summary>
            Creates a packet writer for sending message.
            The caller must <see cref="M:Demo3D.IO.PacketWriter.FlushAsync(System.Boolean)"/> the writer to send the message.
            </summary>
            <param name="command">Command id.</param>
            <param name="txId">Transaction id (or 0).</param>
            <param name="logger">Component logger.</param>
            <returns>A packet writer for adding command data.</returns>
        </member>
        <member name="T:Demo3D.IO.External.IPC.ExpectedReplyHandle">
            <summary>
            A handle for waiting on a reply.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.ExpectReply(System.UInt32)">
            <summary>
            Register an expected reply.
            To avoid a race, the expected reply should be registered before the request is sent.
            </summary>
            <param name="txId">The request transaction id.</param>
            <returns>A reply handle.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.WaitForReplyAsync(System.Boolean,Demo3D.IO.External.IPC.ExpectedReplyHandle,System.Int32)">
            <summary>
            Wait for a reply.
            </summary>
            <param name="sync">If true the task returned is guaranteed to be complete.</param>
            <param name="handle">The reply handle from <see cref="T:Demo3D.IO.External.IPC.ExpectedReply"/>.</param>
            <param name="milliseconds">Timeout (or -1).</param>
            <returns>The reply result.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.StartTransaction(Demo3D.IO.External.Command,System.UInt32@,Demo3D.Common.IComponentLogger)">
            <summary>
            Starts an RPC style transaction.
            The packet writer and transaction id returned should be passed to <see cref="M:Demo3D.IO.External.IPC.EndTransactionAsync(System.Boolean,System.UInt32,Demo3D.IO.PacketWriter,System.Int32)"/> to complete the transaction.
            </summary>
            <param name="command">The command id.</param>
            <param name="txId">An allocated transaction id.</param>
            <param name="logger">Component logger.</param>
            <returns>A packet writer for adding command data.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.EndTransactionAsync(System.Boolean,System.UInt32,Demo3D.IO.PacketWriter,System.Int32)">
            <summary>
            Completes a transaction started by <see cref="M:Demo3D.IO.External.IPC.StartTransaction(Demo3D.IO.External.Command,System.UInt32@,Demo3D.Common.IComponentLogger)"/>.
            </summary>
            <param name="sync">If true the task returned is guaranteed to be complete.</param>
            <param name="txId">The transaction id.</param>
            <param name="writer">The packet writer containing the request.</param>
            <param name="milliseconds">Timeout (or -1).</param>
            <returns>The reply result.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.TransactionAsync(System.Boolean,Demo3D.IO.External.Command,Demo3D.Common.IComponentLogger,System.Int32)">
            <summary>
            Sends an RPC style transaction that does not require any command data.
            </summary>
            <param name="sync">If true the task returned is guaranteed to be complete.</param>
            <param name="command">The command id.</param>
            <param name="logger">Component logger.</param>
            <param name="milliseconds">Timeout (or -1).</param>
            <returns>The reply result.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPC.SendReply(System.UInt32,System.Exception)">
            <summary>
            Creates a packet writer for sending a reply.
            The caller must <see cref="M:Demo3D.IO.PacketWriter.FlushAsync(System.Boolean)"/> the writer to send the reply.
            </summary>
            <param name="txId">The request transaction id.</param>
            <param name="error">Optional error (or null).</param>
            <returns>A packet writer for adding reply data.</returns>
        </member>
        <member name="T:Demo3D.IO.External.IPC.Request">
            <summary>
            A request received.
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.IPC.Request.RequestData">
            <summary>
            The request data (or null).
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.IPC.Request.ReplyData">
            <summary>
            Reply data (or null).
            If non-null, the reply in <see cref="P:Demo3D.IO.External.IPC.Request.ReplyData"/> will be flushed after the request is processed.
            Set to null to disable automatic sending a reply, in which case the caller must reply manually by flushing ReplyData.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.Request.GetRequestData">
            <summary>
            The request data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.Request.GetReplyData">
            <summary>
            The reply data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.ExpectCommand(Demo3D.IO.External.Command,System.Func{System.Boolean,Demo3D.IO.External.IPC.Request,Demo3D.Common.IComponentLogger,System.Threading.Tasks.Task})">
            <summary>
            Register an action to be called when a specified command is received.
            </summary>
            <param name="command">The command id.</param>
            <param name="action">Action to call.</param>
        </member>
        <member name="M:Demo3D.IO.External.IPC.StopExpecting(Demo3D.IO.External.Command)">
            <summary>
            Unregister command.
            </summary>
            <param name="command">The command id.</param>
        </member>
        <member name="M:Demo3D.IO.External.IPC.ProcessCommandsAsync(System.Boolean,Demo3D.Common.IComponentLogger)">
            <summary>
            Run the command processing main loop.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.StartMonitoringPeerProcess(System.Diagnostics.Process)">
            <summary>
            Start monitoring peer process.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.Run(System.IO.Pipes.NamedPipeServerStream,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.External.IPC.StartHostAsync(System.Boolean,Demo3D.Common.IComponentLogger,System.Boolean,System.Diagnostics.ProcessPriorityClass,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Start the IPC host.
            </summary>
        </member>
        <member name="E:Demo3D.IO.External.IPC.OnShutdown">
            <summary>
            Occurs when the IPC is shut down.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPC.Stop(System.Boolean,System.String,Demo3D.Common.IComponentLogger)">
            <summary>
            Stop and close the connection.
            </summary>
            <param name="wait">False if the connection is already closed.</param>
            <param name="why">Reason for stopping.</param>
            <param name="logger">Component logger.</param>
        </member>
        <member name="M:Demo3D.IO.External.IPC.Stop(Demo3D.Common.IComponentLogger)">
            <summary>
            Stop and close the connection.
            </summary>
            <param name="logger">Component logger (or null).</param>
        </member>
        <member name="M:Demo3D.IO.External.IPC.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.External.IPCProcessAllocate">
            <summary>
            Controls where to place a function.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPCProcessAllocate.SeparateProcess">
            <summary>
            Allocate function to a separate process.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.IPCProcessAllocate.SharedProcess">
            <summary>
            Allocate function to shared process pool.
            </summary>
        </member>
        <member name="T:Demo3D.IO.External.IPCProcessRequest">
            <summary>
            Controls where to place a function.
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.IPCProcessRequest.SeparateProcess">
            <summary>
            Allocate function to a separate process.
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.IPCProcessRequest.Allocate">
            <summary>
            How to allocate.
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.IPCProcessRequest.Weight">
            <summary>
            For shared processes, this defines the weight of this function.
            Units are the percentage of one second that this function will require CPU.
            So for example, a CIP IO device that has an RPI of 10ms (rpi), and each update takes 1ms (time)
               Weight = time / rpi
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPCProcessRequest.#ctor(Demo3D.IO.External.IPCProcessAllocate)">
            <summary>
            Constructs an IPCProcessAllocation.
            </summary>
            <param name="allocate">Where to place the function.</param>
        </member>
        <member name="M:Demo3D.IO.External.IPCProcessRequest.#ctor(Demo3D.IO.External.IPCProcessAllocate,System.Double)">
            <summary>
            Constructs an IPCProcessAllocation.
            </summary>
            <param name="allocate">Where to place the function.</param>
            <param name="weight">The 'weight' of the function.</param>
        </member>
        <member name="T:Demo3D.IO.External.IPCProcessAllocation">
            <summary>
            Defines where a function has been allocated.
            </summary>
        </member>
        <member name="T:Demo3D.IO.External.IPCProcessAllocator">
            <summary>
            A class for allocating functions to IPC processes.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPCProcessAllocator.#ctor(System.Int32)">
            <summary>
            Constructs an IPCProcessAllocator.
            </summary>
            <param name="numExternalProcesses">Number of external processes to start (or 0 to run all functions locally).</param>
        </member>
        <member name="P:Demo3D.IO.External.IPCProcessAllocator.Hosts">
            <summary>
            The IPC hosts allocated.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.IPCProcessAllocator.AddAllocation(System.String,Demo3D.IO.External.IPCProcessRequest)">
            <summary>
            Register a function allocation.
            Call this first for each function in order to define the total process requirements.
            </summary>
            <param name="name">The name of the function.</param>
            <param name="request">A request for a function that needs to be allocated to an IPC host process.</param>
        </member>
        <member name="M:Demo3D.IO.External.IPCProcessAllocator.AllocateIPC(Demo3D.IO.External.IPCProcessAllocation)">
            <summary>
            Allocate a function to an IPC host.
            </summary>
            <param name="allocation">IPC process allocation.</param>
            <returns>The IPC host (or null to run locally).</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPCProcessAllocator.StartIPCProcessesAsync(System.Boolean,Demo3D.Common.IComponentLogger,System.Boolean)">
            <summary>
            Start all IPC host proceses.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="logger">An object for logging messages.</param>
            <param name="autoStart">True to auto-start the IPC host process.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.IO.External.IPCProcessAllocator.StopIPCProcesses(Demo3D.Common.IComponentLogger)">
            <summary>
            Stops all IPC host processes.
            </summary>
            <param name="logger">An object for logging messages.</param>
        </member>
        <member name="T:Demo3D.IO.External.MemoryX">
            <summary>
            A class for representing a section of shared memory for data exchange.
            </summary>
        </member>
        <member name="E:Demo3D.IO.External.MemoryX.OnFree">
            <summary>
            Occurs when <see cref="M:Demo3D.IO.External.MemoryX.Free"/> is called, just before the memory is freed.
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.MemoryX.Allocator">
            <summary>
            The memory allocator that owns this memory (or null for in-core memory).
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.MemoryX.ViewHandle">
            <summary>
            A handle to the view of the memory-mapped file (or null).
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.MemoryX.Address">
            <summary>
            The memory exchange address.
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.MemoryX.Length">
            <summary>
            The memory exchange length.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.GetReference``1(System.Int32)">
            <summary>
            Returns a reference to data of type <typeparamref name="T"/> at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>A reference to the value in the buffer.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.ReadBytes(System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Read data out of shared memory into the specified buffer.
            </summary>
            <param name="offset">Position in memory exchange.</param>
            <param name="to">The buffer to copy the data into.</param>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.ReadBytes(System.Int32,System.Int32)">
            <summary>
            Reads the memory exchange from the specified offset and returns the data as a value.
            </summary>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="length">Number of bytes to read (or -1).</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.ReadArray``1(System.Int32,System.ArraySegment{``0}@)">
            <summary>
            Read data out of shared memory into the specified buffer.
            </summary>
            <typeparam name="E">Element type.</typeparam>
            <param name="offset">Position in memory exchange.</param>
            <param name="to">The buffer to copy the data into.</param>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.ReadString(System.Int32,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads the memory exchange from the specified offset and returns the data as a value.
            </summary>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="encoding">Text encoding.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.WriteBytes(System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Write data into shared memory from the specified buffer.
            </summary>
            <param name="offset">Position in memory exchange.</param>
            <param name="from">The buffer to copy the data from.</param>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.WriteArray``1(System.Int32,System.ArraySegment{``0}@)">
            <summary>
            Write data into shared memory from the specified buffer.
            </summary>
            <typeparam name="E">Element type.</typeparam>
            <param name="offset">Position in memory exchange.</param>
            <param name="from">The buffer to copy the data from.</param>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.WriteString(System.Int32,Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Write a value to the memory exchange at the specified offset.
            </summary>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
            <param name="encoding">The text encoding.</param>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.AllocMemory(System.Int32,System.Int32)">
            <summary>
            Allocate a sub address range within this memory exchange.
            </summary>
            <param name="offset">Offset within this memory exchange.</param>
            <param name="length">Memory size.</param>
            <returns>Memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.FreeMemory">
            <summary>
            Free this memory exchange.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryX.Free">
            <summary>
            Free this memory exchange.
            </summary>
        </member>
        <member name="T:Demo3D.IO.External.MemoryXAddressSpace">
            <summary>
            A MemoryX address space.
            Provides shared memory allocation routines.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.External.MemoryXAddressSpace.ShmAccess">
            <summary>
            Shared memory access.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.ShmAccess.#ctor(Demo3D.IO.External.MemoryXAddressSpace,System.Int32,System.Int32,System.String,System.IO.MemoryMappedFiles.MemoryMappedViewAccessor)">
            <summary>
            Construct a shared memory access.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.ShmAccess.SetSharedMemory(System.String,System.IO.MemoryMappedFiles.MemoryMappedViewAccessor)">
            <summary>
            Set the shared memory file for this access.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.ShmAccess.Release">
            <summary>
            Release shared memory access.
            </summary>
        </member>
        <member name="F:Demo3D.IO.External.MemoryXAddressSpace.SlaveMemoryXAddressSpace.addressSpaces">
            <summary>
            <see cref="M:Demo3D.IO.External.MemoryXAddressSpace.Connect(System.String)"/> can be called more than once for the same address space.
            </summary>
        </member>
        <member name="P:Demo3D.IO.External.MemoryXAddressSpace.MemName">
            <summary>
            The shared memory map or file name (or null for in-core memory).
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.AllocMemory(System.Int32,System.Int32)">
            <summary>
            Allocate memory exchange at a specified memory address, or -1 to allocate at the next free address.
            </summary>
            <param name="length">Memory size.</param>
            <param name="address">Address to assign, or -1 for the next free address.</param>
            <returns>Memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.AllocMemory(System.Int32)">
            <summary>
            Allocate memory exchange.
            </summary>
            <param name="length">Memory size.</param>
            <returns>Memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.FreeMemory(Demo3D.IO.External.MemoryX)">
            <summary>
            Free memory.
            </summary>
            <param name="memory">Memory to free.</param>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.Start">
            <summary>
            Create/connect to address space.
            </summary>
            <returns>Name of the address space.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.Shutdown">
            <summary>
            Shutdown/disconnect from address space.
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.Create">
            <summary>
            Create a new address space.
            </summary>
            <returns>New address space.</returns>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXAddressSpace.Connect(System.String)">
            <summary>
            Connect to an existing address space.
            </summary>
            <param name="memName">Address space name (from <see cref="M:Demo3D.IO.External.MemoryXAddressSpace.Start"/>).</param>
            <returns>Connected address space.</returns>
        </member>
        <member name="T:Demo3D.IO.External.MemoryXBufferAllocator">
            <summary>
            In-process "shared" memory.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.External.MemoryXManager">
            <summary>
            Manages a lump of pre-allocated MemoryX buffer space.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.External.MemoryXManager.#ctor(Demo3D.IO.External.MemoryX)">
            <exclude />
        </member>
        <member name="P:Demo3D.IO.External.MemoryXManager.MemName">
            <summary>
            The shared memory map or file name (or null for in-core memory).
            </summary>
        </member>
        <member name="M:Demo3D.IO.External.MemoryXManager.AllocMemory(System.Int32)">
            <summary>
            Allocate memory.
            </summary>
        </member>
        <member name="T:Demo3D.IO.ID">
            <summary>
            Provides additional packet/message/connection information.
            </summary>
        </member>
        <member name="P:Demo3D.IO.ID.Description">
            <summary>
            Printable packet/message/connection description.
            </summary>
        </member>
        <member name="P:Demo3D.IO.ID.RoutingInfo">
            <summary>
            Routing information (or null).
            </summary>
        </member>
        <member name="P:Demo3D.IO.ID.Data">
            <summary>
            Other packet/protocol data (header information, packet timestamps, hardware details, or null).
            </summary>
        </member>
        <member name="M:Demo3D.IO.ID.#ctor(System.String)">
            <summary>
            Constructs an ID object.
            </summary>
            <param name="description">A printable string description (or null).</param>
        </member>
        <member name="M:Demo3D.IO.ID.Set(Demo3D.IO.RoutingInfo,System.Object)">
            <summary>
            Create a new ID with altered information.
            </summary>
            <param name="routingInfo">Routing information (or null).</param>
            <param name="data">Other packet/protocol data (header information, packet timestamps, hardware details, or null).</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.IO.ID.SetRoutingInfo(Demo3D.IO.RoutingInfo)">
            <summary>
            Create a new ID with altered routing information.
            </summary>
            <param name="routingInfo">Routing information (or null).</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.IO.ID.SetData(System.Object)">
            <summary>
            Create a new ID with altered miscellaneous data.
            </summary>
            <param name="data">Other packet/protocol data (header information, packet timestamps, hardware details, or null).</param>
            <returns></returns>
        </member>
        <member name="P:Demo3D.IO.ID.String">
            <summary>
            A printable string description.
            </summary>
        </member>
        <member name="M:Demo3D.IO.ID.ToString">
            <summary>
            A printable string describing the packet/connection.
            </summary>
            <returns>A printable string describing the packet/connection.</returns>
        </member>
        <member name="T:Demo3D.IO.IDataReferenceReader">
            <summary>
            Represents a class that can return a reference to data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IDataReferenceReader.GetReference``1(System.Int32)">
            <summary>
            Returns a reference to data of type <typeparamref name="T"/> at the specified <paramref name="offset"/>.
            </summary>
            <param name="offset">The offset into the buffer to access.</param>
            <returns>A reference to the value in the buffer.</returns>
        </member>
        <member name="T:Demo3D.IO.IDataReferenceWriter">
            <summary>
            Represents a class that can return a reference to data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IDataReferenceWriter.GetReference``1(System.Int32)">
            <summary>
            Returns a reference to data of type <typeparamref name="T"/> at the specified <paramref name="offset"/>.
            </summary>
            <param name="offset">The offset into the buffer to access.</param>
            <returns>A reference to the value in the buffer.</returns>
        </member>
        <member name="T:Demo3D.IO.IDataReference">
            <summary>
            Represents a class that can return a reference to data.
            </summary>
        </member>
        <member name="T:Demo3D.IO.DataReferenceExtensions">
            <summary>
            IDataReference extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.GetReference``1(System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.GetReference``1(System.ArraySegment{System.Byte}@,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadByte(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadSByte(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadInt16LE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadUInt16LE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadInt32LE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads the memory exchange from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadUInt32LE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadInt64LE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadUInt64LE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadSingleLE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.ReadDoubleLE(Demo3D.IO.IDataReferenceReader,System.Int32)">
            <summary>
            Reads from the specified offset and returns the data as a value.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteByte(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Byte)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteSByte(Demo3D.IO.IDataReferenceWriter,System.Int32,System.SByte)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteInt16LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Int16)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteUInt16LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.UInt16)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteInt32LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Int32)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteUInt32LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.UInt32)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteInt64LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Int64)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteUInt64LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.UInt64)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteSingleLE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Single)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="M:Demo3D.IO.DataReferenceExtensions.WriteDoubleLE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Double)">
            <summary>
            Write a value at the specified offset.
            </summary>
            <param name="data">The data buffer.</param>
            <param name="offset">Offset into the memory exchange.</param>
            <param name="value">The value to write to the memory exchange.</param>
        </member>
        <member name="T:Demo3D.IO.InternalBufferPointer">
            <exclude />
        </member>
        <member name="F:Demo3D.IO.InternalBufferPointer.data">
            <exclude />
        </member>
        <member name="F:Demo3D.IO.InternalBufferPointer.offset">
            <exclude />
        </member>
        <member name="F:Demo3D.IO.InternalBufferPointer.length">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.InternalBufferPointer.#ctor(System.Byte[],System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="P:Demo3D.IO.InternalBufferPointer.Empty">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.InternalBufferPointer.GetBufferPointer(System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IOffsetDataReader">
            <summary>
            Represents a class that can read data from a data source at an offset.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IOffsetDataReader.GetBufferPointer(System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.OffsetDataReaderExtensions">
            <summary>
            IOffsetDataReader extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadBoolean(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a boolean at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadBit(Demo3D.IO.IOffsetDataReader,System.Int32,System.Int32)">
            <summary>
            Reads a bit at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="bitNo">The bit within the byte at <paramref name="offset"/></param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadChar(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a character at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUInt16(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUInt16BE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadInt16(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadInt16BE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUInt32(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUInt32BE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadInt32(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadInt32BE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUInt64(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUInt64BE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadInt64(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadInt64BE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadSingle(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadSingleBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 32bit single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadDouble(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadDoubleBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 64bit double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadString(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads a string at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="encoding">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadBytes(Demo3D.IO.IOffsetDataReader,System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The value read.</returns>
            <remarks>
            The buffer returned may be a copy of the data.
            For a PacketReader the data is effectively immutable, it doesn't matter.
            For a PacketWriter it means that there's no guarantee that the buffer returned will reflect subsequent
            changes to the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadBytes(Demo3D.IO.IOffsetDataReader,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="toBuffer">The buffer to fill.</param>
            <param name="toBufferOffset">The start position within <paramref name="toBuffer"/> to start writing.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadBytes(Demo3D.IO.IOffsetDataReader,System.Int32,Demo3D.IO.IDataWriter,System.Int32)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="toPacket">The packet to fill.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadBytes(Demo3D.IO.IOffsetDataReader,System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Reads a number of bytes at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <param name="toBuffer">The buffer to fill.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUShortBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUShortLE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadShortBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadShortLE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUIntBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadUIntLE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadIntBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadIntLE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadULongBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadULongLE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadLongBE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataReaderExtensions.ReadLongLE(Demo3D.IO.IOffsetDataReader,System.Int32)">
            <summary>
            Reads a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IDataIO">
            <summary>
            Represents a stream of data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IDataIO.Length">
            <summary>
            Returns the current length of the data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IDataIO.Position">
            <summary>
            Returns the current position in the data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IDataIO.Remaining">
            <summary>
            Returns the remaining data/space available.  (Always 0 for an expandable buffer.)
            </summary>
        </member>
        <member name="P:Demo3D.IO.IDataIO.IsFixed">
            <summary>
            Returns true if this is a fixed size data source.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IDataIO.Advance(System.Int32)">
            <summary>
            Advances the current data position..
            </summary>
            <param name="length">The number of bytes to advance the current data position.</param>
        </member>
        <member name="T:Demo3D.IO.IDataReader">
            <summary>
            Represents a class that can read data from a data source at the current position.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IDataReader.GetBufferPointer(System.Int32,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.IDataReader.EnsureAsync(System.Int32)">
            <summary>
            Ensure that the next length bytes of data is available in the packet.  If there isn't enough already
            available, and the packet isn't fixed, then it'll attempt to read more data into the packet.
            </summary>
            <param name="length">The number of bytes of the data to ensure.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.IO.IBufferReader">
            <summary>
            Represents a class that can read a <see cref="T:Demo3D.IO.BufferSegment"/> of data.
            </summary>
        </member>
        <member name="T:Demo3D.IO.DataReaderExtensions">
            <summary>
            IDataReader extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.Peek(Demo3D.IO.IDataReader,System.Int32)">
            <summary>
            Returns a new packet pointing to the next length bytes, but does not advance the current packet position.
            Implies EnsureAsync(length).
            </summary>
            <param name="reader">The data reader.</param>
            <param name="length">The number of bytes to peek.</param>
            <returns>A new PacketReader containing the peeked data.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.Consume(Demo3D.IO.IDataReader,System.Int32)">
            <summary>
            Returns a new data reader pointing to the next length bytes, and advances the current packet position.
            Implies EnsureAsync(length).
            </summary>
            <param name="reader">The data reader.</param>
            <param name="length">The number of bytes to peek.</param>
            <returns>A new PacketReader containing the peeked data.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadBoolean(Demo3D.IO.IDataReader)">
            <summary>
            Reads a boolean from the current position in the buffer.
            The current position is advanced by 1 byte.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadBit(Demo3D.IO.IDataReader,System.Int32)">
            <summary>
            Reads a bit from the current position in the buffer.
            The current position is advanced by 1 byte.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="bitNo">The bit within the byte to return.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadChar(Demo3D.IO.IDataReader)">
            <summary>
            Reads a character from the current position in the buffer.
            The current position is advanced by 1 byte.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadByte(Demo3D.IO.IDataReader)">
            <summary>
            Reads a byte from the current position in the buffer.
            The current position is advanced by 1 byte.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadSByte(Demo3D.IO.IDataReader)">
            <summary>
            Reads a signed byte from the current position in the buffer.
            The current position is advanced by 1 byte.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt16(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt16BE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt16LE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt16(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt16BE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt16LE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt32(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt32BE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt32LE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt32(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt32BE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt32LE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt64(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt64BE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUInt64LE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt64(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt64BE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadInt64LE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadSingle(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 32bit single floating point number at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadSingleBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit single floating point number at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadSingleLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit single floating point number at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadDouble(Demo3D.IO.IDataReader,Demo3D.IO.Endian)">
            <summary>
            Reads a 64bit double floating point number at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadDoubleBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit double floating point number at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadDoubleLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit double floating point number at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadString(Demo3D.IO.IDataReader,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads a string from the current position in the buffer.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="encoding">The encoding of the string in the packet (or null to use the default).</param>
            <returns>The value read.</returns>
            <remarks>See <see cref="T:Demo3D.IO.BinaryTextEncoding"/> for example usage.</remarks>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.GetString(Demo3D.IO.IDataReader,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads a string from the current position in the buffer.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="encoding">The encoding of the string in the packet (or null to use the default).</param>
            <returns>The string read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadBytes(Demo3D.IO.IDataReader,System.Int32)">
            <summary>
            Reads a number of bytes from the current position in the buffer.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="length">The number of bytes to read (or -1 to read all available data).</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadBytes(Demo3D.IO.IDataReader,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the current position in the buffer.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="toBuffer">The buffer to fill.</param>
            <param name="toBufferOffset">The start position within <paramref name="toBuffer"/> to start writing.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadBytes(Demo3D.IO.IDataReader,System.ArraySegment{System.Byte}@)">
            <summary>
            Reads a number of bytes from the current position in the buffer.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="toBuffer">The buffer to fill.</param>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadBytes(Demo3D.IO.IDataReader,System.ArraySegment{System.Byte}@,System.Int32,System.Int32)">
            <summary>
            Reads a number of bytes from the current position in the buffer.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="toBuffer">The buffer to fill.</param>
            <param name="toBufferOffset">The start position within <paramref name="toBuffer"/> to start writing.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadBytes(Demo3D.IO.IDataReader,Demo3D.IO.IDataWriter,System.Int32)">
            <summary>
            Reads a number of bytes from the current position in the buffer.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The data reader.</param>
            <param name="toPacket">The packet to fill.</param>
            <param name="length">The number of bytes to read.</param>
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUShortBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUShortLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadShortBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadShortLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUIntBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadUIntLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadIntBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadIntLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadULongBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadULongLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadLongBE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataReaderExtensions.ReadLongLE(Demo3D.IO.IDataReader)">
            <summary>
            Reads a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="reader">The data reader.</param>
            <returns>The value read.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IBufferResolver">
            <summary>
            Represents a class that can create a <see cref="T:Demo3D.IO.BufferSegment"/> of data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IBufferResolver.Resolve">
            <summary>
            Resolves the data to a concrete buffer.
            </summary>
            <returns>The resolved data in a buffer.</returns>
        </member>
        <member name="T:Demo3D.IO.IOffsetDataWriter">
            <summary>
            Represents a class that can write data to a data sink at an offset.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IOffsetDataWriter.GetBufferPointer(System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.OffsetDataWriterExtensions">
            <summary>
            IOffsetDataWriter extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteBoolean(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Boolean)">
            <summary>
            Writes a boolean at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteBit(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Writes a bit at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="bitNo">The bit within the byte to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteChar(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Char)">
            <summary>
            Writes an 8bit character at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteInt16(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int16,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteInt16BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int16)">
            <summary>
            Writes a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUInt16(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt16,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUInt16BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteInt32(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteInt32BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int32)">
            <summary>
            Writes a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUInt32(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt32,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUInt32BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteInt64(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int64,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteInt64BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int64)">
            <summary>
            Writes a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUInt64(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt64,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUInt64BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteSingle(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Single,Demo3D.IO.Endian)">
            <summary>
            Writes a single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteSingleBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Single)">
            <summary>
            Writes a single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteDouble(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Double,Demo3D.IO.Endian)">
            <summary>
            Writes a double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteDoubleBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Double)">
            <summary>
            Writes a double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteString(Demo3D.IO.IOffsetDataWriter,System.Int32,Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Writes a string at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="encoding">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteBytes(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">The data to write.</param>
            <param name="fromBufferOffset">The offset into <paramref name="fromBuffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteBytes(Demo3D.IO.IOffsetDataWriter,System.Int32,System.ArraySegment{System.Byte}@,System.Int32)">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">The data to write.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteBytes(Demo3D.IO.IOffsetDataWriter,System.Int32,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteBytes(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Byte[])">
            <summary>
            Writes a bytes at <paramref name="offset"/> in the data.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="fromBuffer">A list of bytes to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsBoolean(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a boolean at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Boolean)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsBit(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,System.Int32)">
            <summary>
            Writes a bit at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Boolean)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="bitNo">The bit within the byte to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsChar(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a character at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Char)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsByte(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a byte at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Byte)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsSByte(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a signed byte at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.SByte)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt16(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt16BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt16LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt16(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt16BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt16LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt32(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt32BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt32LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt32(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt32BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt32LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt64(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt64BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsInt64LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt64(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt64BE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsUInt64LE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsSingle(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit single floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Single)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsSingleBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 32bit single floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Single)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsSingleLE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 32bit single floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Single)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsDouble(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit double floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Double)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsDoubleBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a 64bit double floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Double)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsDoubleLE(Demo3D.IO.IDataReferenceWriter,System.Int32,System.Object)">
            <summary>
            Writes a 64bit double floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Double)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteAsString(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Object)">
            <summary>
            Writes a string at the current position in the buffer.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the data to start writing.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteShortBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int16)">
            <summary>
            Writes a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteShortLE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int16)">
            <summary>
            Writes a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUShortBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUShortLE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteIntBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int32)">
            <summary>
            Writes a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteIntLE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int32)">
            <summary>
            Writes a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUIntBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteUIntLE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteLongBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int64)">
            <summary>
            Writes a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteLongLE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.Int64)">
            <summary>
            Writes a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteULongBE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.OffsetDataWriterExtensions.WriteULongLE(Demo3D.IO.IOffsetDataWriter,System.Int32,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="offset">The offset into the buffer to start writing.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IDataWriter">
            <summary>
            Represents a class that can write data to a data sink at the current position.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IDataWriter.GetBufferPointer(System.Int32,System.Boolean)">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IBufferWriter">
            <summary>
            Represents a class that can write to and create a <see cref="T:Demo3D.IO.BufferSegment"/> of data.
            </summary>
        </member>
        <member name="T:Demo3D.IO.DataWriterExtensions">
            <summary>
            IDataWriter extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteByte(Demo3D.IO.IDataWriter,System.Byte)">
            <summary>
            Writes a byte at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteBoolean(Demo3D.IO.IDataWriter,System.Boolean)">
            <summary>
            Writes a boolean at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteBit(Demo3D.IO.IDataWriter,System.Boolean,System.Int32)">
            <summary>
            Writes a bit at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="bitNo">The bit within the byte to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteChar(Demo3D.IO.IDataWriter,System.Char)">
            <summary>
            Writes an 8bit character at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteSByte(Demo3D.IO.IDataWriter,System.SByte)">
            <summary>
            Writes a signed byte at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt16(Demo3D.IO.IDataWriter,System.Int16,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt16BE(Demo3D.IO.IDataWriter,System.Int16)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt16LE(Demo3D.IO.IDataWriter,System.Int16)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt16(Demo3D.IO.IDataWriter,System.UInt16,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt16BE(Demo3D.IO.IDataWriter,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt16LE(Demo3D.IO.IDataWriter,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt32(Demo3D.IO.IDataWriter,System.Int32,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt32BE(Demo3D.IO.IDataWriter,System.Int32)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt32LE(Demo3D.IO.IDataWriter,System.Int32)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt32(Demo3D.IO.IDataWriter,System.UInt32,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt32BE(Demo3D.IO.IDataWriter,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt32LE(Demo3D.IO.IDataWriter,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt64(Demo3D.IO.IDataWriter,System.Int64,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt64BE(Demo3D.IO.IDataWriter,System.Int64)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteInt64LE(Demo3D.IO.IDataWriter,System.Int64)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt64(Demo3D.IO.IDataWriter,System.UInt64,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt64BE(Demo3D.IO.IDataWriter,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUInt64LE(Demo3D.IO.IDataWriter,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteSingle(Demo3D.IO.IDataWriter,System.Single,Demo3D.IO.Endian)">
            <summary>
            Writes a single floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteSingleBE(Demo3D.IO.IDataWriter,System.Single)">
            <summary>
            Writes a single floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteSingleLE(Demo3D.IO.IDataWriter,System.Single)">
            <summary>
            Writes a single floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteDouble(Demo3D.IO.IDataWriter,System.Double,Demo3D.IO.Endian)">
            <summary>
            Writes a double floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteDoubleBE(Demo3D.IO.IDataWriter,System.Double)">
            <summary>
            Writes a double floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteDoubleLE(Demo3D.IO.IDataWriter,System.Double)">
            <summary>
            Writes a double floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteString(Demo3D.IO.IDataWriter,Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Writes a string at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="encoding">The encoding of the data in the buffer.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteBytes(Demo3D.IO.IDataWriter,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a bytes at the current position in the data.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="fromBuffer">The data to write.</param>
            <param name="fromBufferOffset">The offset into <paramref name="fromBuffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteBytes(Demo3D.IO.IDataWriter,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes a bytes at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="fromBuffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteBytes(Demo3D.IO.IDataWriter,System.Byte[])">
            <summary>
            Writes a bytes at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="fromBuffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteBytes(Demo3D.IO.IDataWriter,Demo3D.IO.IDataReader,System.Int32)">
            <summary>
            Writes a bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="fromData">The data to read from.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>A buffer into which data can be overwritten.</returns>
            <remarks>
            The buffer returned describes the area of the packet written to by this method.
            This buffer can be used to overwrite that portion of the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsBoolean(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a boolean at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Boolean)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsBit(Demo3D.IO.IDataWriter,System.Object,System.Int32)">
            <summary>
            Writes a bit at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Boolean)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="bitNo">The bit within the byte to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsChar(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a character at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Char)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsByte(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a byte at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Byte)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsSByte(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a signed byte at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.SByte)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 1 byte.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt16(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt16BE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt16LE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt16(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt16BE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt16LE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt32(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt32BE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt32LE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt32(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt32BE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt32LE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt64(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt64BE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsInt64LE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt64(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt64BE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsUInt64LE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsSingle(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 32bit single floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Single)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsSingleBE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 32bit single floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Single)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsSingleLE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 32bit single floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Single)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsDouble(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.Endian)">
            <summary>
            Writes a 64bit double floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Double)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="endian">The endian format (or null to use the default).</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsDoubleBE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 64bit double floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Double)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsDoubleLE(Demo3D.IO.IDataWriter,System.Object)">
            <summary>
            Writes a 64bit double floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Double)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteAsString(Demo3D.IO.IDataWriter,System.Object,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Writes a string at the current position in the buffer.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <param name="encoding">The text encoding.</param>
            <remarks>See <see cref="T:Demo3D.IO.BinaryTextEncoding"/> for example usage.</remarks>
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteShortBE(Demo3D.IO.IDataWriter,System.Int16)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteShortLE(Demo3D.IO.IDataWriter,System.Int16)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUShortBE(Demo3D.IO.IDataWriter,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUShortLE(Demo3D.IO.IDataWriter,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteIntBE(Demo3D.IO.IDataWriter,System.Int32)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteIntLE(Demo3D.IO.IDataWriter,System.Int32)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUIntBE(Demo3D.IO.IDataWriter,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteUIntLE(Demo3D.IO.IDataWriter,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteLongBE(Demo3D.IO.IDataWriter,System.Int64)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteLongLE(Demo3D.IO.IDataWriter,System.Int64)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteULongBE(Demo3D.IO.IDataWriter,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.DataWriterExtensions.WriteULongLE(Demo3D.IO.IDataWriter,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The data writer.</param>
            <param name="val">The value to write.</param>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IPacketMarker">
            <summary>
            Represents a position in a packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPacketMarker.DataLength">
            <summary>
            Returns the data length in bytes of the packet from this position to the current Position of the marked packet.
            (Ie the amount of data that's been read/written since the packet was Marked.)
            </summary>
        </member>
        <member name="T:Demo3D.IO.IPacketIO">
            <summary>
            Represents an IDataIO class that can report its data format.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPacketIO.Parent">
            <summary>
            Returns the parent packet, or null.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPacketIO.ID">
            <summary>
            Optional ID to identify the packet (eg source/destination, packet section, etc).
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPacketIO.Endian">
            <summary>
            Endianess for integral types.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPacketIO.TextEncoding">
            <summary>
            Encoding for text strings.
            </summary>
            <remarks>See <see cref="T:Demo3D.IO.BinaryTextEncoding"/> for example usage.</remarks>
        </member>
        <member name="M:Demo3D.IO.IPacketIO.MarkPosition">
            <summary>
            Return a position marker.
            </summary>
            <returns>A position marker.</returns>
        </member>
        <member name="T:Demo3D.IO.PacketIOExtensions">
            <summary>
            PacketIOExtensions extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketIOExtensions.GetEndian(Demo3D.IO.IPacketIO)">
            <summary>
            Returns the current endian format.
            </summary>
            <returns>The configured endian format if set, else BigEndian (the default network endianess).</returns>
        </member>
        <member name="M:Demo3D.IO.PacketIOExtensions.GetTextEncoding(Demo3D.IO.IPacketIO)">
            <summary>
            Returns the current text encoding.
            </summary>
            <returns>The configured text encoding if set, else 2 byte lengh encoded (big endian) ASCII.</returns>
        </member>
        <member name="T:Demo3D.IO.IOffsetPacketReader">
            <summary>
            Represents a class that can read data from a packet at an offset.
            </summary>
        </member>
        <member name="T:Demo3D.IO.OffsetPacketReaderExtensions">
            <summary>
            IOffsetPacketReader extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadInt16(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a 16bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadUInt32(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a 32bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadInt32(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a 32bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadUInt64(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a 64bit unsigned integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadInt64(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a 64bit signed integer at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadSingle(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a 32bit single floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadDouble(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a 64bit double floating point number at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.OffsetPacketReaderExtensions.ReadString(Demo3D.IO.IOffsetPacketReader,System.Int32)">
            <summary>
            Reads a string at <paramref name="offset"/> in the buffer.
            </summary>
            <param name="reader">The packet reader.</param>
            <param name="offset">The offset into the buffer to start reading.</param>
            <returns>The value read.</returns>
            <remarks>See <see cref="T:Demo3D.IO.BinaryTextEncoding"/> for example usage.</remarks>
        </member>
        <member name="T:Demo3D.IO.IPacketReader">
            <summary>
            Represents a class that can read data from a packet at the current position.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPacketReader.DataAvailable">
            <summary>
            Returns true if data is immediately available.  (Specifically that EnsureAsync(1) won't block.)
            Returns true if there's any data remaining in the packet (this.Remaining > 0), or if the underlying stream has data available.
            Returning false does not necessarily mean that data is not available.  It may be that it's not possible to detect data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IPacketReader.Peek(System.Int32,System.String)">
            <summary>
            Returns a new packet reader pointing to the next length bytes, but does not advance the current packet position.
            Implies Ensure(length).
            </summary>
            <param name="length">The number of bytes to peek.</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new packet reader containing the peeked data.</returns>
        </member>
        <member name="M:Demo3D.IO.IPacketReader.Consume(System.Int32,System.String)">
            <summary>
            Returns a new packet reader pointing to the next length bytes, and advances the current packet position.
            Implies Ensure(length).
            </summary>
            <param name="length">The number of bytes to consume.</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new packet reader containing the consumed data.</returns>
        </member>
        <member name="M:Demo3D.IO.IPacketReader.Close">
            <summary>
            Closes the current reader and closes access to the underlying stream.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketReaderExtensions">
            <summary>
            IPacketReader extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadUInt16(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 16bit unsigned integer from the current position in the packet packet.
            The current position is advanced by 2 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadInt16(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 16bit signed integer from the current position in the packet packet.
            The current position is advanced by 2 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadUInt32(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 32bit unsigned integer from the current position in the packet packet.
            The current position is advanced by 4 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadInt32(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 32bit signed integer from the current position in the packet packet.
            The current position is advanced by 4 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadUInt64(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 64bit unsigned integer from the current position in the packet packet.
            The current position is advanced by 8 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadInt64(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 64bit signed integer from the current position in the packet packet.
            The current position is advanced by 8 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadSingle(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 32bit single floating point number from the current position in the packet packet.
            The current position is advanced by 4 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadDouble(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a 64bit double floating point number from the current position in the packet packet.
            The current position is advanced by 8 bytes.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.ReadString(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a string from the current position in the packet packet.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReaderExtensions.GetString(Demo3D.IO.IPacketReader)">
            <summary>
            Reads a string from the current position in the packet packet.
            The current position is advanced by the number of bytes read.
            </summary>
            <param name="reader">The packet reader.</param>
            <returns>The string read.</returns>
        </member>
        <member name="T:Demo3D.IO.IPacketWriter">
            <summary>
            Represents a class that can write data to a packet at the current position.
            </summary>
        </member>
        <member name="E:Demo3D.IO.IPacketWriter.OnBeforeResolve">
            <summary>
            Occurs when this packet is being resolved.  Used, for example, to fill in missing information such as
            packet lengths and checksums.
            </summary>
        </member>
        <member name="E:Demo3D.IO.IPacketWriter.OnAfterResolve">
            <summary>
            Occurs when this packet is being resolved.  Used, for example, to fill in missing information such as
            packet lengths and checksums.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IPacketWriter.Insert(System.Int32,System.String)">
            <summary>
            Returns a new packet writer pointing to the current position in this packet.  Anything written into the new packet
            will be inserted into the data buffer when this packet is resolved.
            If length is non-negative, then a fixed packet will be returned.  Implies Ensure(length).
            If this packet is not fixed, and length is negative, then an expandable packet will be returned.
            </summary>
            <param name="length">The number of bytes to insert.</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new packet writer for writing the inserted data into.</returns>
        </member>
        <member name="M:Demo3D.IO.IPacketWriter.FlushAsync(System.Boolean)">
            <summary>
            Flush the data to the underlying stream.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.IO.IPacketWriter.Clear">
            <summary>
            Remove all data from the packet so it can be re-written.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IPacketWriter.Reset">
            <summary>
            Reset packet (and its ancestor packets) so that it can be resolved and flushed again.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketWriterExtensions">
            <summary>
            IPacketWriter extensions.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.FlushAsync(Demo3D.IO.IPacketWriter)">
            <summary>
            Flush the data to the underlying stream.
            </summary>
            <param name="writer">The packet writer.</param>
            <returns>The async task.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.Flush(Demo3D.IO.IPacketWriter)">
            <summary>
            Flush the data to the underlying stream.
            </summary>
            <param name="writer">The packet writer.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteInt16(Demo3D.IO.IPacketWriter,System.Int16)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteUInt16(Demo3D.IO.IPacketWriter,System.UInt16)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteInt32(Demo3D.IO.IPacketWriter,System.Int32)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteUInt32(Demo3D.IO.IPacketWriter,System.UInt32)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteInt64(Demo3D.IO.IPacketWriter,System.Int64)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteUInt64(Demo3D.IO.IPacketWriter,System.UInt64)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteSingle(Demo3D.IO.IPacketWriter,System.Single)">
            <summary>
            Writes a single floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteDouble(Demo3D.IO.IPacketWriter,System.Double)">
            <summary>
            Writes a double floating point number at the current position in the buffer.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteString(Demo3D.IO.IPacketWriter,Demo3D.IO.BinaryString)">
            <summary>
            Writes a string at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteBytes(Demo3D.IO.IPacketWriter,System.Int32)">
            <summary>
            Prepare a buffer for writing bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>A buffer into which data can be written.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteBytes(Demo3D.IO.IPacketWriter,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="fromBuffer">The data to write.</param>
            <param name="fromBufferOffset">The offset into <paramref name="fromBuffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>A buffer into which data can be overwritten.</returns>
            <remarks>
            The buffer returned describes the area of the packet written to by this method.
            This buffer can be used to overwrite that portion of the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteBytes(Demo3D.IO.IPacketWriter,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes a bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="fromBuffer">The data to write.</param>
            <returns>A buffer into which data can be overwritten.</returns>
            <remarks>
            The buffer returned describes the area of the packet written to by this method.
            This buffer can be used to overwrite that portion of the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteBytes(Demo3D.IO.IPacketWriter,System.Byte[])">
            <summary>
            Writes a bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="fromBuffer">A list of buffers to write.</param>
            <returns>A buffer into which data can be overwritten.</returns>
            <remarks>
            The buffer returned describes the area of the packet written to by this method.
            This buffer can be used to overwrite that portion of the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteBytes(Demo3D.IO.IPacketWriter,Demo3D.IO.IDataReader,System.Int32)">
            <summary>
            Writes a bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="fromPacket">The packet to read the data from.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>A buffer into which data can be overwritten.</returns>
            <remarks>
            The buffer returned describes the area of the packet written to by this method.
            This buffer can be used to overwrite that portion of the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteBytes(Demo3D.IO.IPacketWriter,Demo3D.IO.IOffsetDataReader,System.Int32,System.Int32)">
            <summary>
            Writes a bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="fromPacket">The packet to read the data from.</param>
            <param name="fromPacketOffset">The offset into <paramref name="fromPacket"/> to read the data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>A buffer into which data can be overwritten.</returns>
            <remarks>
            The buffer returned describes the area of the packet written to by this method.
            This buffer can be used to overwrite that portion of the data in the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.Insert(Demo3D.IO.IPacketWriter,System.Int32)">
            <summary>
            Returns a new buffer writer pointing to the current position in this packet.  Anything written into the new packet
            will be inserted into the data buffer when this packet is resolved.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="length">The number of bytes to insert.</param>
            <returns>A new packet writer for writing the inserted data into.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsInt16(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 16bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsUInt16(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 16bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt16)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 2 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsInt32(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 32bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsUInt32(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 32bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt32)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsInt64(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 64bit signed integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Int64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsUInt64(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 64bit unsigned integer at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.UInt64)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsSingle(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 32bit single floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Single)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 4 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="M:Demo3D.IO.PacketWriterExtensions.WriteAsDouble(Demo3D.IO.IPacketWriter,System.Object)">
            <summary>
            Writes a 64bit double floating point number at the current position in the buffer.
            The object is first converted using <c>BinaryConvert.ChangeType(val, TypeCode.Double)</c>.
            <see cref="M:Demo3D.IO.BinaryConvert.ChangeType(System.Object,System.Type,Demo3D.IO.BinaryConvert.ConversionType)"/>
            The current position is advanced by 8 bytes.
            </summary>
            <param name="writer">The packet writer.</param>
            <param name="val">The value to write.</param>
        </member>
        <member name="T:Demo3D.IO.Installation">
            <exclude />
        </member>
        <member name="F:Demo3D.IO.Installation.InstallationPath">
            <exclude />
        </member>
        <member name="M:Demo3D.IO.Installation.FindExe(System.String,System.Reflection.Assembly,Demo3D.Common.IComponentLogger,System.Boolean)">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.IPHelper">
            <summary>
            IP address helper.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.IPHelper.IsTemporary(System.Net.IPAddress)">
            <summary>
            Determines whether the IP address has been added temporarily to the NIC configuration.
            </summary>
            <param name="ipAddress">IP address to check.</param>
            <returns>True if the IP address has been added temporarily to the NIC configuration.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.IPHelper.AddIpAddressDirect(Demo3D.IO.NetworkCard,System.Net.IPAddress,System.Net.IPAddress,System.Boolean)">
            <summary>
            Add IP address to the NIC.
            </summary>
            <param name="nic">The card to add the IP address to.</param>
            <param name="ipAddress">IP address to add.</param>
            <param name="netMask">Netmask of the IP address.</param>
            <param name="isTemporary">True if the address added is temporary.</param>
            <returns>True if the IP address was added.  False if the network interface is already configured for this IP address.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.DeleteIpAddressDirect(System.Net.IPAddress)">
            <summary>
            Delete temporary IP address.
            </summary>
            <param name="ipAddress">IP address to delete.</param>
            <returns>True if the IP address was deleted.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.AddIpAddressAsync(System.Boolean,Demo3D.IO.NetworkCard,System.Net.IPAddress,System.Net.IPAddress,System.Boolean,Demo3D.Common.IComponentLogger)">
            <summary>
            Add IP address to the NIC.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="nic">The card to add the IP address to.</param>
            <param name="ipAddress">IP address to add.</param>
            <param name="netMask">Netmask of the IP address.</param>
            <param name="isTemporary">True if the address added is temporary.</param>
            <param name="logger">Component logger.</param>
            <returns>True if the IP address was added.  False if the network interface is already configured for this IP address.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.AddIpAddressAsync(System.Boolean,Demo3D.IO.NetworkCard,System.Net.IPAddress,System.Boolean,Demo3D.Common.IComponentLogger)">
            <summary>
            Add IP address to the NIC.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="nic">The card to add the IP address to.</param>
            <param name="ipAddress">IP address to add.</param>
            <param name="isTemporary">True if the address added is temporary.</param>
            <param name="logger">Component logger.</param>
            <returns>True if the IP address was added.  False if the network interface is already configured for this IP address.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.AddIpAddress(Demo3D.IO.NetworkCard,System.Net.IPAddress,System.Net.IPAddress,System.Boolean,Demo3D.Common.IComponentLogger)">
            <summary>
            Add IP address to the NIC.
            </summary>
            <param name="nic">The card to add the IP address to.</param>
            <param name="ipAddress">IP address to add.</param>
            <param name="netMask">Netmask of the IP address.</param>
            <param name="isTemporary">True if the address added is temporary.</param>
            <param name="logger">Component logger.</param>
            <returns>True if the IP address was added.  False if the network interface is already configured for this IP address.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.AddIpAddress(Demo3D.IO.NetworkCard,System.Net.IPAddress,System.Boolean,Demo3D.Common.IComponentLogger)">
            <summary>
            Add IP address to the NIC.
            </summary>
            <param name="nic">The card to add the IP address to.</param>
            <param name="ipAddress">IP address to add.</param>
            <param name="isTemporary">True if the address added is temporary.</param>
            <param name="logger">Component logger.</param>
            <returns>True if the IP address was added.  False if the network interface is already configured for this IP address.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.DeleteIpAddressAsync(System.Boolean,System.Net.IPAddress,Demo3D.Common.IComponentLogger)">
            <summary>
            Delete temporary IP address.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="ipAddress">IP address to delete.</param>
            <param name="logger">Component logger.</param>
            <returns>True if the IP address was deleted.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.DeleteIpAddress(System.Net.IPAddress,Demo3D.Common.IComponentLogger)">
            <summary>
            Delete temporary IP address.
            </summary>
            <param name="ipAddress">IP address to delete.</param>
            <param name="logger">Component logger.</param>
            <returns>True if the IP address was deleted.</returns>
        </member>
        <member name="M:Demo3D.IO.IPHelper.GetCardForArpEntry(System.Net.IPAddress)">
            <summary>
            Returns network card information for a card with an ARP table entry for <paramref name="ipAddress"/> specified.
            </summary>
            <param name="ipAddress">The IP network address.</param>
            <returns>Network card information for a card with an ARP table entry for <paramref name="ipAddress"/> specified.</returns>
        </member>
        <member name="T:Demo3D.IO.IPv4">
            <summary>
            A class that offers helper methods for managing IP addresses and hostnames.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IPv4.ToUInt32BE(System.Net.IPAddress)">
            <summary>
            IPv4 address as a 32bit integer (big endian, network byte order) from <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="address">The IPAddress.</param>
            <returns>IP address as a 32bit integer (big endian, network byte order).</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4.ToUInt32LE(System.Net.IPAddress)">
            <summary>
            IPv4 address as a 32bit integer (little endian, host byte order) from <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <param name="address">The IPAddress.</param>
            <returns>IP address as a 32bit integer (little endian, host byte order).</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4.HostToIPAddressAsync(System.Boolean,System.String)">
            <summary>
            Returns the IP address of this hostname.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="hostname">The hostname to lookup.</param>
            <returns>The first IP address of the hostname.</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4.HostToIPAddress(System.String)">
            <summary>
            Returns the IP address of this hostname.
            </summary>
            <param name="hostname">The hostname to lookup.</param>
            <returns>The first IP address of the hostname.</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4.UniqueIPAddressAsync(System.Boolean,System.String)">
            <summary>
            Tries to return a unique IP address for this hostname.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="hostname">The hostname to lookup.</param>
            <returns>A unique IP address of the hostname.</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4.UniqueIPAddress(System.String)">
            <summary>
            Tries to return a unique IP address for this hostname.
            </summary>
            <param name="hostname">The hostname to lookup.</param>
            <returns>A unique IP address of the hostname.</returns>
        </member>
        <member name="T:Demo3D.IO.IPv4Configuration">
            <summary>
            The IP configuration of one network device.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.IPAddress">
            <summary>
            The IP address.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.NetMask">
            <summary>
            The netmask.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.Gateway">
            <summary>
            The IP address of the configured gateway.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.DnsServer1">
            <summary>
            The IP address of the first configured DNS server.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.DnsServer2">
            <summary>
            The IP address of the alternate configured DNS server.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.Network">
            <summary>
            The network address.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.Broadcast">
            <summary>
            The broadcast address.
            </summary>
        </member>
        <member name="P:Demo3D.IO.IPv4Configuration.NIC">
            <summary>
            The network interface card.
            </summary>
        </member>
        <member name="M:Demo3D.IO.IPv4Configuration.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress,System.Net.IPAddress)">
            <summary>
            Constructs a new IPv4Configuration.
            </summary>
            <param name="address">The IP address.</param>
            <param name="netMask">The netmask (or null to use the default).</param>
            <param name="gateway">The configured gateway (or null).</param>
            <param name="dns1">First configured DNS server (or null).</param>
            <param name="dns2">Second configured DNS server (or null).</param>
        </member>
        <member name="M:Demo3D.IO.IPv4Configuration.GetLoopback">
            <summary>
            Returns the IPv4Configuration for the loopback interface.
            </summary>
            <returns>The IPv4Configuration for the loopback interface (or null).</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4Configuration.Get(Demo3D.IO.NetworkCard)">
            <summary>
            Returns the list of IPv4Configurations for a specific ethernet card.
            </summary>
            <param name="networkCard">The specified network card.</param>
            <returns>The list of IPv4Configurations of the network card (or null).</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4Configuration.Get">
            <summary>
            Returns the list of IPv4Configurations for all running ethernet cards.
            </summary>
            <returns>A list of IPv4Configurations for all running ethernet cards.</returns>
        </member>
        <member name="M:Demo3D.IO.IPv4Configuration.SameNetwork(System.Net.IPAddress)">
            <summary>
            Returns true if the address passed in belongs to the same network as this network device.
            </summary>
            <param name="address">The IP address to check.</param>
            <returns>True if the <paramref name="address"/> supplied is on the same network as this device.</returns>
        </member>
        <member name="T:Demo3D.IO.Message">
            <summary>
            A message.
            </summary>
        </member>
        <member name="P:Demo3D.IO.Message.Data">
            <summary>
            The received data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.Message.Timestamp">
            <summary>
            Receipt timestamp.
            </summary>
        </member>
        <member name="M:Demo3D.IO.Message.#ctor(System.ArraySegment{System.Byte},Demo3D.Time.RealTime)">
            <summary>
            Constructs a Message.
            </summary>
            <param name="data">The received data.</param>
            <param name="timestamp">Optional timestamp.</param>
        </member>
        <member name="T:Demo3D.IO.MessageFrom">
            <summary>
            A message plus peer information.
            </summary>
        </member>
        <member name="P:Demo3D.IO.MessageFrom.Data">
            <summary>
            The received data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.MessageFrom.RemoteEndPoint">
            <summary>
            Remote end point.
            </summary>
        </member>
        <member name="P:Demo3D.IO.MessageFrom.Timestamp">
            <summary>
            Receipt timestamp.
            </summary>
        </member>
        <member name="M:Demo3D.IO.MessageFrom.#ctor(System.ArraySegment{System.Byte},System.Net.IPEndPoint,Demo3D.Time.RealTime)">
            <summary>
            Constructs a Message.
            </summary>
            <param name="data">The received data.</param>
            <param name="remoteEndPoint">Remote end point.</param>
            <param name="timestamp">Optional timestamp.</param>
        </member>
        <member name="T:Demo3D.IO.NamespaceDoc">
            <summary>
            The Demo3D.IO namespace provides utility classes for external IO.
            </summary>
        </member>
        <member name="T:Demo3D.IO.NetworkCard">
            <summary>
            Contains information about a network card present in the machine.
            </summary>
        </member>
        <member name="T:Demo3D.IO.NetworkCard.Address">
            <summary>
            A network card physical address.
            </summary>
        </member>
        <member name="P:Demo3D.IO.NetworkCard.Address.PhysicalAddress">
            <summary>
            Returns the physical ethernet address.
            </summary>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.Address.#ctor(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Creates an ethernet address from a physical address.
            </summary>
            <param name="address">The physical ethernet address.</param>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.Address.#ctor(System.String)">
            <summary>
            Creates an ethernet address from a physical address.
            </summary>
            <param name="address">The string representation of the physical address.</param>
        </member>
        <member name="P:Demo3D.IO.NetworkCard.Address.String">
            <summary>
            Returns the string representation of the physical address.
            </summary>
        </member>
        <member name="P:Demo3D.IO.NetworkCard.Address.PrettyPrint">
            <summary>
            Returns the string representation of the physical address in human readable format.
            </summary>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.Address.ToString">
            <summary>
            Returns the string representation of the physical address in human readable format.
            </summary>
            <returns>The string representation of the physical address in human readable format</returns>
        </member>
        <member name="P:Demo3D.IO.NetworkCard.NIC">
            <summary>
            Returns the system Network Interface Card.
            </summary>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.#ctor(System.Net.NetworkInformation.NetworkInterface)">
            <summary>
            Constructs a NetworkCard from a system Network Interface Card.
            </summary>
            <param name="nic">The system Network Interface Card.</param>
        </member>
        <member name="P:Demo3D.IO.NetworkCard.Id">
            <summary>
            Returns the ethernet card interface id.
            </summary>
        </member>
        <member name="P:Demo3D.IO.NetworkCard.Name">
            <summary>
            Returns the network card interface name.
            </summary>
        </member>
        <member name="P:Demo3D.IO.NetworkCard.Description">
            <summary>
            Returns the network card interface description.
            </summary>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetPhysicalAddress">
            <summary>
            Returns the network address.
            </summary>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetIPv4Configuration">
            <summary>
            Returns the list of IPv4Configurations for this card.
            </summary>
            <returns>The list of IPv4Configurations for the network card.</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetCards">
            <summary>
            Returns a list of all running network cards in this machine.
            </summary>
            <returns>A list of network card information objects, one for each running network card detected.</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetCardByEthernetAddress(Demo3D.IO.NetworkCard.Address)">
            <summary>
            Returns network card information given a physical address.
            </summary>
            <param name="cardAddress">The network card (physical) address of the card.</param>
            <returns>Network card information (or null if not found or not running).</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetCardById(System.String)">
            <summary>
            Returns network card information given a card id.
            </summary>
            <param name="id">The network card interface id.</param>
            <returns>Network card information (or null if not found or not running).</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetCardByAddress(System.Net.NetworkInformation.PhysicalAddress)">
            <summary>
            Returns network card information for a card with the same physical address as the <paramref name="physicalAddress"/> specified.
            </summary>
            <param name="physicalAddress">The physical address.</param>
            <returns>Network card information for a card with the same physical address as the <paramref name="physicalAddress"/> specified.</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetCardByAddress(System.Net.IPAddress)">
            <summary>
            Returns network card information for a card with an IP configuration with the same address as the <paramref name="ipAddress"/> specified.
            </summary>
            <param name="ipAddress">The IP network address.</param>
            <returns>Network card information for a card with an IP configuration with the same address as the <paramref name="ipAddress"/> specified.</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetCardsBySameNetwork(System.Net.IPAddress)">
            <summary>
            Returns all the network card information for cards with an IP configuration with the same network address as the <paramref name="ipAddress"/> specified.
            </summary>
            <param name="ipAddress">The IP network address.</param>
            <returns>Network card information for cards with an IP configuration with the same network address as the <paramref name="ipAddress"/> specified.</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.GetCardBySameNetwork(System.Net.IPAddress)">
            <summary>
            Returns the first network card information for a card with an IP configuration with the same network address as the <paramref name="ipAddress"/> specified.
            </summary>
            <param name="ipAddress">The IP network address.</param>
            <returns>Network card information for a card with an IP configuration with the same network address as the <paramref name="ipAddress"/> specified.</returns>
        </member>
        <member name="M:Demo3D.IO.NetworkCard.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.IO.PacketPosition">
            <summary>
            Represents a position in a parent packet.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketPosition.#ctor(Demo3D.IO.PacketIO)">
            <summary>
            Creates a PacketPosition.
            </summary>
            <param name="parent">The parent packet position (or null).</param>
            <exclude />
        </member>
        <member name="P:Demo3D.IO.PacketPosition.Parent">
            <summary>
            Returns the parent packet, or null.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketPosition.PositionInParent">
            <summary>
            Returns the current position with respect to our parent packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketPosition.LengthToCurrentPositionOfParent">
            <summary>
            Returns the length in bytes from this position to the current position of our parent packet.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.PacketPosition.FixedPacketMarker">
            <summary>
            Creates a fixed packet marker.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketPosition.FixedPacketMarker.PositionInParent">
            <summary>
            Returns the current position with respect to our parent packet.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketMarker">
            <summary>
            A packet marker is an object that points to a position within the packet.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketMarker.#ctor(Demo3D.IO.PacketIO)">
            <summary>
            Creates a packet marker.
            </summary>
            <param name="parent">The parent packer that this packet marker points to.</param>
        </member>
        <member name="P:Demo3D.IO.PacketMarker.Position">
            <summary>
            Returns the position of this marker in the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketMarker.DataLength">
            <summary>
            Returns the data length in bytes of the packet from this position to the current Position of the marked packet.
            (Ie the amount of data that's been read/written since the packet was Marked.)
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketIO">
            <summary>
            Represents IO to/from one packet, or one section of a packet (eg a header, or a packet encapsulated within another packet).
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketIO.#ctor(Demo3D.IO.PacketIO,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a PacketIO object.
            </summary>
            <param name="parent">The parent packet (or null).</param>
            <param name="endian">The endianess of the data being read/written (or null if not known).</param>
            <param name="textEncoding">The text encoding of any strings in the packte (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
        </member>
        <member name="P:Demo3D.IO.PacketIO.ID">
            <summary>
            Optional ID to identify the packet (eg source/destination, packet section, etc).
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketIO.Top">
            <summary>
            Returns the top parent.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketIO.Endian">
            <summary>
            Endianess for integral types.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketIO.TextEncoding">
            <summary>
            Encoding for text strings.
            </summary>
            <remarks>See <see cref="T:Demo3D.IO.BinaryTextEncoding"/> for example usage.</remarks>
        </member>
        <member name="P:Demo3D.IO.PacketIO.IsFixed">
            <summary>
            Returns true if this is a fixed size packet. Ensure can't expand a fixed packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketIO.Length">
            <summary>
            Returns the current length of the packet.
            The Length of a packet may change without Ensure being called if it's an expandable PacketWriter and data is inserted.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketIO.Position">
            <summary>
            Returns the current position in this packet.
            The Position of a packet may change without Advance being called if it's an expandable PacketWriter and data is inserted.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketIO.Remaining">
            <summary>
            Returns the remaining data/space available in this packet.  If it's a fixed-size packet, then this is definitive.
            Otherwise Ensure can be used to try to extend the packet with more data/space.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketIO.PositionOfChild(Demo3D.IO.PacketIO)">
            <summary>
            Returns the current absolute position of a direct child packet position.
            </summary>
            <param name="child">The child packet.</param>
            <returns>The current absolute position of the child packet.</returns>
            <exclude />
        </member>
        <member name="P:Demo3D.IO.PacketIO.PositionInParent">
            <summary>
            Returns the current position with respect to our parent packet.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketIO.GetBufferPointer(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get a buffer that covers a specific portion of the packet.
            </summary>
            <param name="offset">The offset into the packet of the start of the buffer.  -1 means to use the current packet position.</param>
            <param name="length">The length of the buffer to return.  -1 means to return as much buffer as possible.</param>
            <param name="ensure">True to ensure data/space is available (or throw an exception).</param>
            <param name="advance">True to move the current packet position to 1 byte after the buffer being returned.</param>
            <param name="returnBuffer">True to return a buffer, otherwise an empty BufferPointer is returned.</param>
            <param name="read">True if the request is to read the buffer, and false to write to the buffer.</param>
            <returns>The buffer if <paramref name="returnBuffer"/> is true, otherwise an empty BufferPointer.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketIO.GetBuffer(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get a fixed length buffer from the current packet postion.
            </summary>
            <param name="length">The length of the buffer to return.</param>
            <param name="advance">True to move the current packet position to 1 byte after the buffer being returned.</param>
            <param name="read">True if the request is to read the buffer, and false to write to the buffer.</param>
            <returns>The buffer.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketIO.Ensure(System.Int32)">
            <summary>
            Ensure that the next length bytes of data/space are available in the packet.  If there isn't enough already
            available, and the packet isn't fixed, then it'll attempt to read more data into or create more space in the packet.
            </summary>
            <param name="length">The number of bytes of data/space to ensure are available in the packet.</param>
        </member>
        <member name="M:Demo3D.IO.PacketIO.Advance(System.Int32)">
            <summary>
            Advances the current packet position.  Implies Ensure(length).
            </summary>
            <param name="length">The number of bytes to advance the current packet position.</param>
        </member>
        <member name="M:Demo3D.IO.PacketIO.MarkPosition">
            <summary>
            Return a position marker.
            </summary>
            <returns>A position marker.</returns>
        </member>
        <member name="T:Demo3D.IO.PacketReader">
            <summary>
            Represents a packet reader/dissector.
            </summary>
        </member>
        <member name="F:Demo3D.IO.PacketReader.length">
            <summary>
            The length of the packet.
            </summary>
        </member>
        <member name="F:Demo3D.IO.PacketReader.position">
            <summary>
            The current position in the packet.
            </summary>
        </member>
        <member name="F:Demo3D.IO.PacketReader.remaining">
            <summary>
            The number of bytes of data remaining in the packet.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketReader.#ctor(Demo3D.IO.PacketIO,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a new packet reader.
            </summary>
            <param name="parent">The parent packet (or null).</param>
            <param name="endian">The endian format of the data in the packet (or null if not known).</param>
            <param name="textEncoding">The text encoding of the strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
        </member>
        <member name="P:Demo3D.IO.PacketReader.Length">
            <summary>
            Returns the current length of the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.Position">
            <summary>
            Returns the current position in the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.Remaining">
            <summary>
            Returns the remaining data/space available in the packet.  If it's a fixed-size packet, then this is definitive.
            Otherwise Ensure can be used to try to extend the packet with more data/space.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.DataAvailable">
            <summary>
            Returns true if data is immediately available.  (Specifically that EnsureAsync(1) won't block.)
            Returns true if there's any data remaining in the packet (this.Remaining > 0), or if the underlying stream has data available.
            Returning false does not necessarily mean that data is not available.  It may be that it's not possible to detect data.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.ValidFrom">
            <summary>
            Returns the low water mark of the packet.  Data prior to this mark may have been discarded and cannot be read.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketReader.MarkPosition">
            <summary>
            Return a position marker.
            </summary>
            <returns>A position marker.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.PositionOfChild(Demo3D.IO.PacketIO)">
            <summary>
            Returns the current absolute position of a direct child packet position.
            </summary>
            <param name="child">The child packet.</param>
            <returns>The current absolute position of the child packet.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.EnsureAdditionalDataAsync(System.Int32)">
            <summary>
            Wait for at least length additional data to become available.
            </summary>
            <param name="length">The number of bytes of the data to wait for.</param>
            <returns>Nothing.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.EnsureAsync(System.Int32)">
            <summary>
            Ensure that the next length bytes of data is available in the packet.  If there isn't enough already
            available, and the packet isn't fixed, then it'll attempt to read more data into the packet.
            </summary>
            <param name="length">The number of bytes of the data to ensure.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Peek(System.Int32,System.String)">
            <summary>
            Returns a new packet pointing to the next length bytes, but does not advance the current packet position.
            Implies Ensure(length).
            </summary>
            <param name="length">The number of bytes to peek.</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader containing the peeked data.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Consume(System.Int32,System.String)">
            <summary>
            Returns a new packet pointing to the next length bytes, and advances the current packet position.
            Implies Ensure(length).
            </summary>
            <param name="length">The number of bytes to consume.</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader containing the consumed data.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Prune(System.Int32)">
            <summary>
            Declare that we'll not want to read length bytes again, allowing the packet to free memory.
            Advances ValidFrom by length bytes.
            </summary>
            <param name="length">The number of bytes to prune from the start of the packet.</param>
        </member>
        <member name="P:Demo3D.IO.PacketReader.BaseStream">
            <summary>
            Exposes access to the underlying stream (or null).
            Only returns a stream if the underlying data source is a Stream.
            </summary>
            <remarks>
            You should first test that <see cref="P:Demo3D.IO.PacketReader.Remaining"/> returns 0 before reading data from the Stream.
            Otherwise you risk missing data that's already been read from the stream and buffered.
            </remarks>
        </member>
        <member name="M:Demo3D.IO.PacketReader.ClosePacket">
            <summary>
            Close access to any associated data stream.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.Close">
            <summary>
            Closes the current reader and closes access to the underlying stream.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketReader.FixedPacketReader">
            <summary>
            A fixed size packet reader.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.FixedPacketReader.IsFixed">
            <summary>
            Returns true. Ensure can't expand this packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.FixedPacketReader.PositionInParent">
            <summary>
            Position of this packet within its parent packet.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketReader.FixedPacketReader.GetBufferPointer(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Regarding data in the packet from offset to offset+length:
               If offset is -1, then use PacketIO.Position.
               If length is -1, then return as much buffer as possible.
               If ensure is true, try to ensure that the buffer is present in the packet.
               If advance is true, then set the current position to offset+length.
               If returnBuffer is true, return a Buffer.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.FixedPacketReader.EnsureAdditionalDataAsync(System.Int32)">
            <summary>
            Wait for at least length additional data to become available.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.FixedPacketReader.Prune(System.Int32)">
            <summary>
            Declare that we'll not want to read length bytes again, allowing the packet to free memory.
            Advances ValidFrom by length bytes.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketReader.ExpandablePacketReader">
            <summary>
            An expandable packet reader.  The packet can only be expanded at the end by reading more data into the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.ExpandablePacketReader.IsFixed">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketReader.ExpandablePacketReader.ReadDataAsync(System.Boolean,System.Int32)">
            <summary>
            Read a minimum number of bytes from the backing data packet and return it.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.ExpandablePacketReader.GetBufferPointer(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Regarding data in the packet from offset to offset+length:
               If offset is -1, then use PacketIO.Position.
               If length is -1, then return as much buffer as possible.
               If ensure is true, try to ensure that the buffer is present in the packet.
               If advance is true, then set the current position to offset+length.
               If returnBuffer is true, return a Buffer.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.ExpandablePacketReader.EnsureAdditionalDataAsync(System.Int32)">
            <summary>
            Wait for at least length additional data to become available.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketReader.ExpandablePacketReader.Prune(System.Int32)">
            <summary>
            Declare that we'll not want to read length bytes again, allowing the packet to free memory.
            Advances ValidFrom by length bytes.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketReader.PacketIOMethods">
            <summary>
            An abstract base class with methods for manipulating a PacketReader.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.PacketIOMethods.BaseStream">
            <summary>
            Returns the base stream (or null).
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketReader.PacketIOMethods.DataAvailable">
            <summary>
            Returns true if there's data immediately available.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketReader.PacketIOMethods.ReadDataAsync(System.Boolean,Demo3D.IO.IPacketReader,System.Int32)">
            <summary>
            Reads and returns numBytes of data.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="packet">The packet requesting the read.</param>
            <param name="numBytes">The number of bytes to read.</param>
            <returns>A buffer containing the data.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.PacketIOMethods.Close(Demo3D.IO.IPacketReader)">
            <summary>
            Called when the packet reader is closed.
            </summary>
            <param name="packet">The packet being closed.</param>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Create(System.ArraySegment{System.Byte}@,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketReader from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Create(System.Byte[],System.Int32,System.Int32,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketReader from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="offset">The offset of the first byte in the buffer.</param>
            <param name="length">The number of bytes in packet.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Create(System.Byte[],Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketReader from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Create(System.ArraySegment{System.Byte}@,System.Int32,System.Int32,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketReader from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="offset">The offset of the first byte in the buffer.</param>
            <param name="length">The number of bytes in packet.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Create(System.IO.Stream,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a PacketReader from a stream of data.
            The underlying stream is left open when the PacketReader is closed.
            </summary>
            <param name="stream">The underlying data source.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Create(System.IO.Stream,Demo3D.IO.PacketKey,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a PacketReader from a stream of data.
            The underlying stream is left open when the PacketReader is closed.
            </summary>
            <param name="stream">The underlying data source.</param>
            <param name="packetKey">The PacketKey that holds the lock on the underlying stream.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Create(Demo3D.IO.PacketReader.PacketIOMethods,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a PacketReader.
            </summary>
            <param name="methods">The methods for accessing underlying data.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketReader</returns>
        </member>
        <member name="M:Demo3D.IO.PacketReader.Dispose">
            <summary>
            Closes the current reader and closes access to the underlying stream.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketWriter">
            <summary>
            Represents a packet writer/constructor.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.#ctor(Demo3D.IO.PacketIO,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a new packet writer.
            </summary>
            <param name="parent">The parent packet.</param>
            <param name="endian">The endian format of the data in the packet (or null if not known).</param>
            <param name="textEncoding">The text encoding of the strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.CanGrow">
            <summary>
            Packet can be expanded.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.Resolved">
            <summary>
            Packet has been resolved into concrete data.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Insert(System.Int32,System.String)">
            <summary>
            Returns a new packet writer pointing to the current position in this packet.  Anything written into the new packet
            will be inserted into the data buffer when this packet is resolved.
            If length is non-negative, then a fixed packet will be returned.  Implies Ensure(length).
            If this packet is not fixed, and length is negative, then an expandable packet will be returned.
            </summary>
            <param name="length">The number of bytes to insert.</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new packet writer for writing the inserted data into.</returns>
        </member>
        <member name="E:Demo3D.IO.PacketWriter.OnBeforeResolve">
            <summary>
            Occurs when this packet is being resolved.  Used, for example, to fill in missing information such as
            packet lengths and checksums.
            </summary>
        </member>
        <member name="E:Demo3D.IO.PacketWriter.OnAfterResolve">
            <summary>
            Occurs when this packet is being resolved.  Used, for example, to fill in missing information such as
            packet lengths and checksums.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.NotifiableChildWriters">
            <summary>
            List of all child writers that need notifying.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.NotifyBeforeResolve">
            <summary>
            Fire OnBeforeResolve event for this packet and all its descendants.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.NotifyAfterResolve">
            <summary>
            Fire OnAfterResolve event for this packet and all its descendants.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ResolveBuffer">
            <summary>
            Resolve this packet into concrete data.
            </summary>
            <returns>A buffer containing the entire packet.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Resolve">
            <summary>
            Resolve this packet into concrete data.  Resolve makes two passes across the packet from start to end, depth-first.
            The first pass it calls OnBeforeResolve for each constituent packet, and the second pass it calls OnAfterResolve and
            collects the data to be returned.  You can write to a packet during Resolve.
            </summary>
            <returns>A buffer containing the entire packet.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Clear">
            <summary>
            Remove all data from the packet so it can be re-written.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Reset">
            <summary>
            Reset packet (and its ancestor packets) so that it can be resolved and flushed again.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.BaseStream">
            <summary>
            When overriden in a derived class, returns the base stream (if any).
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.FlushAsync(System.Boolean)">
            <summary>
            Flush the data to the underlying stream.
            </summary>
            <returns>The async task.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Extend(System.Int32)">
            <summary>
            Prepare a buffer for writing bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="length">The number of bytes to write.</param>
            <returns>A buffer into which data can be written.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Write(System.Byte[])">
            <summary>
            Writes a bytes at the current position in the packet packet.
            The current position is advanced by the number of bytes written.
            </summary>
            <param name="fromBuffer">A list of buffers to write.</param>
            <returns>A buffer into which data can be overwritten.</returns>
            <remarks>
            The buffer returned describes the area of the packet written to by this method.
            This buffer can be used to overwrite that portion of the data in the packet.
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.PacketWriter.FixedPacketWriter">
            <summary>
            A fixed size packet writer.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.FixedPacketWriter.IsFixed">
            <summary>
            Returns true. Ensure can't expand this packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.FixedPacketWriter.Remaining">
            <summary>
            Returns the remaining bytes of space in the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.FixedPacketWriter.Length">
            <summary>
            Returns the current length of the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.FixedPacketWriter.Position">
            <summary>
            Returns the current position of the packet.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.FixedPacketWriter.MarkPosition">
            <summary>
            Return a position marker.
            </summary>
            <returns>A position marker.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.FixedPacketWriter.PositionOfChild(Demo3D.IO.PacketIO)">
            <summary>
            Returns the current absolute position of a direct child packet position.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.FixedPacketWriter.GetBufferPointer(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Regarding data in the packet from offset to offset+length:
               If offset is -1, then use PacketIO.Position.
               If length is -1, then return as much buffer as possible.
               If ensure is true, try to ensure that the space is available in the packet.
               If advance is true, then set the current position to offset+length.
               If returnBuffer is true, return a Buffer for the data.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.FixedPacketWriter.Insert(System.Int32,System.String)">
            <summary>
            Returns a new packet pointing to the current position in this packet.  Anything written into the new packet
            will be inserted into the data buffer when this packet is resolved.
            If length is non-negative, then a fixed packet will be returned.  Implies Ensure(length).
            If this packet is not fixed, and length is negative, then an expandable packet will be returned.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.FixedPacketWriter.NotifiableChildWriters">
            <summary>
            List of all child writers that need notifying.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.FixedPacketWriter.ResolveBuffer">
            <summary>
            Resolve this packet into concrete data.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.FixedPacketWriter.Clear">
            <summary>
            Clear all the data from the packet so it can be re-written.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketWriter.ExpandablePacketWriter">
            <summary>
            An expandable packet writer.  Any part of the packet can be expanded.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.AtEndOfPacket(System.Int32,System.Int32)">
            <summary>
            <para>
            A position is 'at the end of the packet' if the {part, offset} points to the next byte after the packet.
            </para>
            <para>
            The end of packet position can either point to the last+1 byte of the last constituent part,
            or it can point to the first byte of the last+1 consituent part.
            </para>
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.LengthToPosition(System.Int32,System.Int32)">
            <summary>
            Returns the current number of data bytes from the beginning of the packet to position {part, offset}.
            Includes the current amount of data in any (user) child packets.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.LengthToEnd(System.Int32,System.Int32)">
            <summary>
            Returns the current number of data bytes from position {part, offset} to the end of the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.ExpandablePacketWriter.IsFixed">
            <summary>
            Returns false.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.ExpandablePacketWriter.Length">
            <summary>
            Returns the current length of the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.ExpandablePacketWriter.Position">
            <summary>
            Returns the current position of the packet.
            For an ExpandablePacketWriter, Ensure does nothing (except return true), so the Position is always the Length of the packet.
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.ExpandablePacketWriter.Remaining">
            <summary>
            Returns the remaining bytes of space in the packet.
            For an ExpandablePacketWriter, Ensure does nothing (except return true), so the remaining space is always 0.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.PositionOfChild(Demo3D.IO.PacketIO)">
            <summary>
            Returns the current absolute position of a direct child packet position.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.OffsetToPartOffset(System.Int32@,System.Int32@)">
            <summary>
            Convert startOffset from offset-into-packet to [part-index, offset-into-part],
            returning the result in {startPart, startOffset}.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.LengthToPartOffset(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Convert "{startPart, startOffset} + length" into "length + {endPart, endOffset}".
            If length is -1 then return the end position of the packet, and adjust length to be
            the actual length from start to end.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.GrowPacket(System.Int32)">
            <summary>
            If the last constituent part is a buffer, then it extends the buffer with more memory (if available).
            Otherwise is allocates a new buffer constituent part.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.GetBufferPointer(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Regarding data in the packet from offset to offset+length:
               If offset is -1, then use PacketIO.Position.
               If length is -1, then return as much buffer as possible.
               If ensure is true, try to ensure that the space is available in the packet.
               If advance is true, then set the current position to offset+length.
               If returnBuffer is true, return a Buffer for the data.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.Insert(System.Int32,System.String)">
            <summary>
            Returns a new packet pointing to the current position in this packet.  Anything written into the new packet
            will be inserted into the data buffer when this packet is resolved.
            If length is not -1, then a fixed packet will be returned.
            If this packet is not fixed, and length is -1, then an expandable packet will be returned.
            The new packet is inserted at Position, and Position is moved to point to the next byte after the inserted
            </summary>
        </member>
        <member name="P:Demo3D.IO.PacketWriter.ExpandablePacketWriter.NotifiableChildWriters">
            <summary>
            List of all child writers that need notifying.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.ResolveBuffer">
            <summary>
            Resolve this packet into concrete data.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.IO.PacketWriter.ExpandablePacketWriter.Clear">
            <summary>
            Clear all data so the packet can be re-written.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketWriter.PacketIOMethods">
            <summary>
            An abstract base class with methods for manipulating a PacketWriter.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.PacketIOMethods.FlushAsync(System.Boolean,Demo3D.IO.IPacketWriter)">
            <summary>
            Flushes the data.
            </summary>
            <param name="sync">If true, the task returned must be complete.</param>
            <param name="packet">The packet to flush.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.IO.PacketWriter.StreamPacketWriter">
            <summary>
            An expandable packet writer for writing packets to a stream.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(System.ArraySegment{System.Byte}@,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketWriter from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(System.Byte[],System.Int32,System.Int32,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketWriter from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="offset">The offset of the first byte in the buffer.</param>
            <param name="length">The number of bytes in packet.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(System.Byte[],Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketWriter from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(System.Int64,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketWriter from a buffer of data.
            </summary>
            <param name="length">The length of the underlying buffer of data.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(System.ArraySegment{System.Byte}@,System.Int32,System.Int32,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a fixed size PacketWriter from a buffer of data.
            </summary>
            <param name="buffer">The buffer of data.</param>
            <param name="offset">The offset of the first byte in the buffer.</param>
            <param name="length">The number of bytes in packet.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates an expandable PacketWriter.  The packet will expand to accomodate the data written into it.
            </summary>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(System.IO.Stream,Demo3D.IO.PacketLock,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates an expandable PacketWriter writing to a data stream.  The packet will expand to accomodate the data written into it.
            </summary>
            <param name="stream">The stream to write the packet to.</param>
            <param name="packetLock">
            A packet lock that controls access to the underlying stream (or null).
            <paramref name="packetLock"/> must be null (no locking), or unlocked.
            </param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Create(Demo3D.IO.PacketWriter.PacketIOMethods,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.String)">
            <summary>
            Creates a PacketWriter.
            </summary>
            <param name="methods">The methods for accessing underlying data.</param>
            <param name="endian">The endian format of the data (or null if not known).</param>
            <param name="textEncoding">The encoding of strings in the packet (or null if not known).</param>
            <param name="description">Printable packet/message/connection descrition.</param>
            <returns>A new PacketWriter</returns>
        </member>
        <member name="M:Demo3D.IO.PacketWriter.Dispose">
            <summary>
            A no-op.  Only here for backward compatibility.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.IO.PacketKey">
            <summary>
            A key for unlocking an associated PacketLock.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketKey.Unlock">
            <summary>
            Unlocks the associated PacketLock.
            </summary>
        </member>
        <member name="M:Demo3D.IO.PacketKey.Dispose">
            <summary>
            Unlocks the associated PacketLock.
            </summary>
        </member>
        <member name="T:Demo3D.IO.PacketLock">
            <summary>
            A lock for reading/writing to a stream.
            </summary>
            <remarks>
            <para>
            Write locking is quite simple.  We create a lock object (PacketLock) and pass it into Packet.Create().
            StreamPacketWriter then takes the lock just for the duration of flushing the packet to the stream.
            </para>
            <para>
            Read locking for message-stream protocols(such as COTP, or UDP) is also simple.
            If you've read a packet from a message-stream protocol, then the PacketReader you get returned to you
            is a FixedPacketReader and contains all the data for that message.  You don't need to lock anything
            to read data from the packet.
            </para>
            <para>
            But read locking for a byte-stream protocol (TCP) is a bit more complicated.
            If there are two threads both attempting to exchange protocol messages with a single server (over one
            connection), then you need to lock access to the byte-stream while you read the message.Unfortunately,
            we don't know the message boundaries, and possibly neither would our parent protocol.  It may be
            several protocols up before we know the true boundaries of a message.
            </para>
            <para>
            The solution is to grab the readLock when we first start reading a message.We pass the key to the
            PacketReader and it unlocks the lock when the packet is closed.
            </para>
            <para>
            This requires support from PacketReader so that it only closes the top-level packet and unlocks the
            byte-stream when the last child packet is closed.
            </para>
            <para>
            We also need this lock to be an Async lock, and it needs to be a semaphore so the lock isn't associated
            with any particular thread, but rather with a particular caller.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.IO.PacketLock.LockAsync(System.Boolean)">
            <summary>
            Locks the lock and return a key that can be used to unlock it.
            </summary>
            <param name="sync">If true, the task returned is guaranteed to be complete.</param>
            <returns>A key associated with the lock.</returns>
        </member>
        <member name="M:Demo3D.IO.PacketLock.Unlock(Demo3D.IO.PacketKey)">
            <summary>
            Unlocks the lock using the key that locked it.
            </summary>
            <param name="key">The key that fits the lock.</param>
        </member>
        <member name="M:Demo3D.IO.PacketLock.Dispose">
            <summary>
            Disposes the lock.
            </summary>
        </member>
        <member name="T:Demo3D.IO.RoutingInfo">
            <summary>
            Routing information.
            </summary>
        </member>
        <member name="P:Demo3D.IO.RoutingInfo.String">
            <summary>
            A printable string description.
            </summary>
        </member>
        <member name="M:Demo3D.IO.RoutingInfo.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.ByteStreamProperties">
            <summary>
            TCP connection properties.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ByteStreamProperties.SendDelay">
            <summary>
            Time (ms) to delay sending data out.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ByteStreamProperties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ByteStreamProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.ByteStreamProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.ByteStreamProperties.ToString">
            <summary>
            Returns the name of the TCP protocol.
            </summary>
            <returns>The name of the TCP protocol.</returns>
        </member>
        <member name="T:Demo3D.Net.Client`1">
            <summary>
            A client connection.
            </summary>
            <typeparam name="T">Required IO services.</typeparam>
        </member>
        <member name="M:Demo3D.Net.Client`1.OpenAsync(System.Boolean,Demo3D.Net.OpenParams,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Opens a client connection, calling <paramref name="dataChangedHandler"/> for each message received.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the client connection.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The new client.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
            <example>
            <code lang="C#" source="Examples\Net\TcpClientData.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Client`1.OpenAsync(System.Boolean,Demo3D.Net.ProtocolAddress,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Opens a client connection, calling <paramref name="dataChangedHandler"/> for each message received.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The new client.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
            <example>
            <code lang="C#" source="Examples\Net\TcpClientData.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Client`1.Open(Demo3D.Net.OpenParams,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Opens a client connection, calling <paramref name="dataChangedHandler"/> for each message received.
            </summary>
            <param name="parameters">Parameters to open the client connection.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The new client.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
            <example>
            <code lang="C#" source="Examples\Net\TcpClientData.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Client`1.Open(Demo3D.Net.ProtocolAddress,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Opens a client connection, calling <paramref name="dataChangedHandler"/> for each message received.
            </summary>
            <param name="address">Address to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The new client.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
            <example>
            <code lang="C#" source="Examples\Net\TcpClientData.cs" region="Example" />
            </example>
        </member>
        <member name="P:Demo3D.Net.Client`1.IO">
            <summary>
            The IO services provided by the protocol.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Client`1.OpenAsync(System.Boolean,Demo3D.Net.OpenParams)">
            <summary>
            Opens a client connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the client connection.</param>
            <returns>The new client.</returns>
        </member>
        <member name="M:Demo3D.Net.Client`1.OpenAsync(System.Boolean,Demo3D.Net.ProtocolAddress,Demo3D.Net.Flags)">
            <summary>
            Opens a client connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>The new client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\TcpClient2.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Client`1.Open(Demo3D.Net.OpenParams)">
            <summary>
            Opens a client connection.
            </summary>
            <param name="parameters">Parameters to open the client connection.</param>
            <returns>The new client.</returns>
        </member>
        <member name="M:Demo3D.Net.Client`1.Open(Demo3D.Net.ProtocolAddress,Demo3D.Net.Flags)">
            <summary>
            Opens a client connection.
            </summary>
            <param name="address">Address to open.</param>
            <param name="flags">Connection flags.</param>
            <returns>The new client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\TcpClient2.cs" region="Example" />
            </example>
        </member>
        <member name="T:Demo3D.Net.DataStreamManager`1">
            <summary>
            Message reader helper class for data stream services.
            </summary>
            <typeparam name="T">An appropriate message type.</typeparam>
            <remarks>
            <para>
            This is a compromise on an ideal.  INotityDataChanged provides a single interface for subscribing to data changed
            events.  And it works very well for services such as Memory and Tag services, where the data is cached, and the
            caller can always go back to the Memory or Tag cache to see the underlying current state.  It works well for
            <see cref="M:Demo3D.Net.ProtocolServer.Open``1(Demo3D.Net.ProtocolAddress,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)"/>, for example,
            a simple method that provides a lot of functionality.
            </para>
            <para>
            But IPacketIOService, or any data stream service, is in a more difficult position.  The DataChanged event
            needs to be an event that many handlers can subscribe to.  But only one of them can get the message that raised the
            event, and if none of them get the message, then that message needs to remain available for the next caller to Read.
            Every incoming message must cause exactly one event, and the event handler can optionally retrieve the message that
            raised the event, or can optionally read the message direct from the service, or can leave the message for another
            thread to read.
            </para>
            <para>
            Although IPacketIOService methods are thread safe, it's undefined which thread gets which packet when more than one
            calls Read simultaneously.  However, to implement the DataChanged event, we need a private background thread that
            waits for data to arrive so that it can issue the events.
            </para>
            <para>
            This class helps with this by intercepting all calls to Read(Async) with its own methods.  All message reads go
            through this class, and so it sees all incoming messages, generates all the events, and manages event messages.
            </para>
            <para>
            It's efficient enough that Reads to a service that has no registered DataChanged event handlers just get passed
            immediately back to the underlying Read methods on the service.
            </para>
            <para>
            <see cref="T:Demo3D.Net.EventStreamManager"/> for the converse of this class.  It takes events and turns them into data to be
            returned via a Read(Async) method.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Wait for a message to be received.  It should return exactly once for each message that arrives,
            even if there have been messages that have already been consumed (by another thread).  This way
            we get to produce one event for each and every message.
            </summary>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.ReadAsync(System.Boolean)">
            <summary>
            This gets called by the ProtocolInstance in place of its own ReadAsync method.
            It reads and returns the next message.  Does not require RunBackgroundAsync to be running.
            </summary>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.Discard">
            <summary>
            Discard all pending messages.
            </summary>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.NewNotifierArgs(System.Func{`0},System.Func{`0})">
            <summary>
            How to create data changed notification arguments for a received message.
            </summary>
            <param name="peek">A function that will return the message without consuming it, or null if the message is already consumed.</param>
            <param name="consume">A function that will consume and return the message, or null if the message is already consumed.</param>
            <returns>Data changed notification arguments.</returns>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.RunBackgroundAsync(Demo3D.Net.DataStreamManager{`0}.StartStopSignals)">
            <summary>
            Run the notifier loop, but only if event handlers are registered on the DataChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.StartService">
            <summary>
            Called when the first event handler is registered on DataChanged.
            </summary>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.StopService">
            <summary>
            Called when the last event handler is unregistered on DataChanged.
            </summary>
        </member>
        <member name="P:Demo3D.Net.DataStreamManager`1.CanSubscribe">
            <summary>
            Returns true if data can be subscribed to.
            </summary>
        </member>
        <member name="P:Demo3D.Net.DataStreamManager`1.DataSubscribed">
            <summary>
            Returns true if data changes have been subscribed to.
            </summary>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.AddDataChanged(Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.RemoveDataChanged(Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Remove a handler from the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to remove.</param>
        </member>
        <member name="E:Demo3D.Net.DataStreamManager`1.DataChanged">
            <summary>
            Occurs when data has arrived or changed.
            </summary>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.UnderlyingReadAsync(System.Boolean)">
            <summary>
            Read the next message from the message stream.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>The next message</returns>
        </member>
        <member name="M:Demo3D.Net.DataStreamManager`1.#ctor(Demo3D.Net.ProtocolSocket,System.Object)">
            <summary>
            Constructs a data stream reader.
            </summary>
            <param name="socket">The protocol instance to monitor.</param>
            <param name="service">The service to monitor (or null is this is the service object).</param>
        </member>
        <member name="T:Demo3D.Net.DetectedState">
            <summary>
            Detected state.
            </summary>
        </member>
        <member name="F:Demo3D.Net.DetectedState.CantDetect">
            <summary>
            Neither yes nor no.
            </summary>
        </member>
        <member name="F:Demo3D.Net.DetectedState.Yes">
            <summary>
            Installation or connection detected.
            </summary>
        </member>
        <member name="F:Demo3D.Net.DetectedState.No">
            <summary>
            Installation or connection not detected.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Detected">
            <summary>
            Represents the result of a detection.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Detected.State">
            <summary>
            The detection state.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Detected.Message">
            <summary>
            Corresponding supporting message (or null).
            </summary>
        </member>
        <member name="P:Demo3D.Net.Detected.Permanent">
            <summary>
            The detected state is permanent.  Detecting again will always return the same result.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Detected.#ctor(Demo3D.Net.DetectedState,System.String,System.Boolean)">
            <summary>
            Constructs a new Detected result.
            </summary>
            <param name="state">The detection state.</param>
            <param name="message">Corresponding supporting message (or null).</param>
            <param name="permanent">The detected state is permanent.</param>
        </member>
        <member name="M:Demo3D.Net.Detected.#ctor(Demo3D.Net.DetectedState,System.Boolean)">
            <summary>
            Constructs a new Detected result.
            </summary>
            <param name="state">The detection state.</param>
            <param name="permanent">The detected state is permanent.</param>
        </member>
        <member name="F:Demo3D.Net.Detected.CantDetect">
            <summary>
            Neither yes nor no, but no point asking again.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Detected.CantDetectPermanent">
            <summary>
            Neither yes nor no, but no point asking again.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Detected.Yes">
            <summary>
            Installation or connection detected, but might change.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Detected.YesPermanent">
            <summary>
            Installation or connection detected, and no point asking again.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Detected.No(System.String)">
            <summary>
            Installation or connection not detected, but might change.
            </summary>
            <param name="message">Corresponding supporting message (or null).</param>
            <returns>A Detected state indicating detection failure.</returns>
        </member>
        <member name="M:Demo3D.Net.Detected.NoPermanent(System.String)">
            <summary>
            Detected that the installation or connection doesn't and can't exist, and no point asking again.
            </summary>
            <param name="message">Corresponding supporting message (or null).</param>
            <returns>A Detected state indicating detection failure.</returns>
        </member>
        <member name="T:Demo3D.Net.EventStreamManager">
            <summary>
            Message data changed event helper class for data stream services.
            </summary>
            <remarks>
            <para>
            This is the converse of <see cref="T:Demo3D.Net.DataStreamManager`1"/>, which uses ReadAsync to read the data stream
            and then generates data changed events.  This class does the opposite.  It subscribes to data changed
            events and uses the event data to provide an implementation of Read(Async).
            </para>
            <para>
            All events that arrive are queued to be read, and then published to any subscribed handlers.  If a handler
            'consumes' the event data it can call Consume to remove the event from the readQueue.  An event only gets
            removed from the readQueue when it's Read or Consumed.  The caller is responsible for ensuring that the
            queue gets drained one way or another.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.EventStreamManager.PeekEventAsync(System.Boolean,System.Int32)">
            <summary>
            Returns a single event since the last call without removing it from the event queue.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="timeoutMs">Timeout in milliseconds (or -1).</param>
            <returns>A single event.</returns>
        </member>
        <member name="M:Demo3D.Net.EventStreamManager.Peek(Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Peek to see if an event remains on the 'Read' queue.
            </summary>
            <param name="e">The event to peek.</param>
            <returns>True if the event remains on the event queue.</returns>
        </member>
        <member name="M:Demo3D.Net.EventStreamManager.Consume(Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Remove an event whose data has been consumed from the 'Read' queue.
            </summary>
            <param name="e">The event to remove.</param>
            <returns>The event removed or null if the event was already consumed.</returns>
        </member>
        <member name="P:Demo3D.Net.EventStreamManager.CanSubscribe">
            <summary>
            Returns true if data can be subscribed to.
            </summary>
        </member>
        <member name="P:Demo3D.Net.EventStreamManager.DataSubscribed">
            <summary>
            Returns true if data changes have been subscribed to.
            </summary>
        </member>
        <member name="M:Demo3D.Net.EventStreamManager.AddDataChanged(Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
        </member>
        <member name="M:Demo3D.Net.EventStreamManager.RemoveDataChanged(Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Remove a handler from the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to remove.</param>
        </member>
        <member name="E:Demo3D.Net.EventStreamManager.DataChanged">
            <summary>
            Occurs when data has arrived or changed.
            </summary>
        </member>
        <member name="M:Demo3D.Net.EventStreamManager.NotifyDataChanged(Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Raise a DataChanged event and queues an event to be read.
            </summary>
            <param name="socket">The protocol socket that raised the event.</param>
            <param name="service">The service that raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="M:Demo3D.Net.EventStreamManager.Dispose">
            <summary>
            Release resource and unsubscribe from events.
            </summary>
        </member>
        <member name="T:Demo3D.Net.EventStreamManager`1">
            <summary>
            A helper class to implement Read(Async) using INotifyDataChanged events.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.EventStreamManager`1.ReadAsync(System.Boolean,System.Int32)">
            <summary>
            Gets a data buffer for reading.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="timeoutMs">Timeout in milliseconds (or -1).</param>
            <returns>A PacketReader that contains the data read.</returns>
        </member>
        <member name="T:Demo3D.Net.IByteStreamService">
            <summary>
            Protocol byte stream service.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IByteStreamService.DataAvailable">
            <summary>
            True if data is immediately available.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IByteStreamService.Stream">
            <summary>
            Returns the underlying stream (or null if closed).
            </summary>
        </member>
        <member name="T:Demo3D.Net.IDetectInstallationService">
            <summary>
            A service for detecting whether the correct software and hardware is installed for a protocol.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IDetectInstallationService.DetectInstallation">
            <summary>
            Detect whether Protocol.Open is likely to succeed.
            </summary>
            <returns>The detection result.</returns>
            <remarks>
            <para>
            Called with the connection closed.
            </para>
            <para>
            This should not block.  It does not detect specific instances of a peer or PLC, just whether
            the correct software/hardware is installed to achieve a connection.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.Net.IDetectConnectionService">
            <summary>
            A service for detecting a connection.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IDetectConnectionService.DetectConnectionAsync(System.Boolean)">
            <summary>
            Detect (without connecting) whether Protocol.Open is likely to succeed.
            </summary>
            <returns>Detection result.</returns>
            <remarks>
            Should include detecting whether the required software/hardware is installed, the connection parameters,
            and (optionally, if possible) whether the PLC is likely to be reachable.
            </remarks>
        </member>
        <member name="T:Demo3D.Net.IEmbeddedPacketIOService">
            <summary>
            An embedded virtual connection.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IEmbeddedPacketIOService.OpenAsync(System.Boolean,System.Object)">
            <summary>
            Opens a new connection with the given connection parameters.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="connectionParameters">Connection parameters.</param>
            <returns>A new connection service.</returns>
        </member>
        <member name="M:Demo3D.Net.IEmbeddedPacketIOService.Close(Demo3D.Net.IPacketIOService)">
            <summary>
            Closes a connection service.
            </summary>
            <param name="connection">The connection service to close.</param>
        </member>
        <member name="T:Demo3D.Net.Protocols.IInterfaceList">
            <summary>
            A list of interfaces serviced by a server.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.IInterfaceList.LocalInterface(Demo3D.Net.IPRoutingInfo)">
            <summary>
            Gets the configuration of the local interface that a packet arrived on.
            This may not be the actual interface that the packet arrived on, but will depend on the configuration assigned.
            </summary>
            <param name="routingInformation">The packet routing information.</param>
            <returns>The local interface that the packet arrived on (or null if there are no interfaces).</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.IPv4InterfaceList">
            <summary>
            A list of IPv4 interfaces serviced by a server.
            Depends on packets supporting <see cref="T:Demo3D.Net.IPRoutingInfo"/> in their <see cref="P:Demo3D.IO.IPacketIO.ID"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.IPv4InterfaceList.#ctor(System.Collections.Generic.IReadOnlyList{Demo3D.IO.IPv4Configuration})">
            <summary>
            Instantiates an IPv4InterfaceList from a list of configurations.
            </summary>
            <param name="localInterfaces">The local interface configurations services by a server.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.IPv4InterfaceList.#ctor(Demo3D.IO.IPv4Configuration[])">
            <summary>
            Instantiates an IPv4InterfaceList from a list of configurations.
            </summary>
            <param name="localInterfaces">The local interface configurations services by a server.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.IPv4InterfaceList.LocalInterface(Demo3D.Net.IPRoutingInfo)">
            <summary>
            Gets the configuration of the local interface that the packet arrived on.
            This may not be the actual interface that the packet arrived on, but will depend on the interface list assigned.
            </summary>
            <param name="routingInformation">The packet end point.</param>
            <returns>The local interface that the packet arrived on (or null if there are no interfaces).</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.CotpProperties">
            <summary>
            COTP connection properties.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.CotpProperties.PduSize">
            <summary>
            Preferred protocol data unit size.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.CotpProperties.NegotiatedPduSize">
            <summary>
            Negotiated protocol data unit size.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocols.CotpProperties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpProperties.ToString">
            <summary>
            Connection properties name.
            </summary>
            <returns>The connection properties name.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.CotpClientProperties">
            <summary>
            COTP client connection properties.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.CotpServerProperties">
            <summary>
            COTP server connection properties.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.CotpServerProperties.MaxQueueLen">
            <summary>
            Maximum number of incoming connections to queue while waiting to be accepted.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.COTP">
            <summary>
            The ISO COTP protocol.
            </summary>
            <remarks>
            See <see cref="T:Demo3D.Net.Protocols.CotpClient"/> and <see cref="T:Demo3D.Net.Protocols.CotpServer"/> for simple ISO COTP client/server examples.
            </remarks>
        </member>
        <member name="F:Demo3D.Net.Protocols.COTP.Name">
            <summary>
            The COTP protocol name.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.COTP.Scheme">
            <summary>
            The COTP protocol scheme.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.COTP.ISOPort">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Protocols.ICOTPInternal">
            <exclude />
        </member>
        <member name="P:Demo3D.Net.Protocols.ICOTPInternal.PeerTSAPDescription">
            <summary>
            Get/set a user recognisable description of the peer TSAP.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.CotpClient">
            <summary>
            A COTP client socket.
            </summary>
            <remarks>
            This class is a wrapper around Client{IPacketIOService}.Open and ProtocolAddressBuilder.
            See <see cref="T:Demo3D.Net.Client`1"/> and <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> for more advanced usage.
            </remarks>
            <example>
            <para>
            The following example shows a simple ISO COTP client that connects to a configured server and sends
            a simple message once per second.
            </para>
            <para>
            See <see cref="T:Demo3D.Net.Protocols.CotpServer"/> for the implementation of the server that works with this client.
            </para>
            <code lang="C#" source="Examples\Net\CotpClient.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.Boolean,System.String,System.Byte[],Demo3D.Net.Flags,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="flags">Connection flags.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.Boolean,System.String,System.String,Demo3D.Net.Flags,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="flags">Connection flags.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.Boolean,System.String,System.Byte[],Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.Boolean,System.String,System.String,Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.String,System.Byte[],Demo3D.Net.Flags,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="flags">Connection flags.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.String,System.String,Demo3D.Net.Flags,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="flags">Connection flags.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.String,System.Byte[],Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.OpenAsync(System.String,System.String,Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.Open(System.String,System.Byte[],Demo3D.Net.Flags,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="flags">Connection flags.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpen" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.Open(System.String,System.String,Demo3D.Net.Flags,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="flags">Connection flags.</param>
            <param name="port">ISO port number.</param>
            <returns>A new COTP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpen" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.Open(System.String,System.Byte[],Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="port">ISO port number.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenData" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpClient.Open(System.String,System.String,Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open an ISO COTP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="tsap">The destination TSAP.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="port">ISO port number.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpClientOpenData" />
            </example>
        </member>
        <member name="T:Demo3D.Net.Protocols.CotpServer">
            <summary>
            A COTP server.
            </summary>
            <remarks>
            This class is a wrapper around ProtocolServer.Open{IPacketIOService} and ProtocolAddressBuilder.
            See <see cref="T:Demo3D.Net.ProtocolServer"/> and <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> for more advanced usage.
            </remarks>
            <example>
            <para>
            The following example shows a simple ISO COTP server that accepts connections, waits for data to be received and then
            calls a method to handle the messages read from the each of the clients.
            </para>
            <para>
            See <see cref="T:Demo3D.Net.Protocols.CotpClient"/> for the implementation of the client that works with this server.
            </para>
            <code lang="C#" source="Examples\Net\CotpServer.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.Boolean,System.Byte[],Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService},System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.Boolean,System.String,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService},System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.Boolean,System.Byte[],Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.Boolean,System.String,Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.Byte[],Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService},System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.String,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService},System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.Byte[],Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.OpenAsync(System.String,Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.Open(System.Byte[],Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService},System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpen" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.Open(System.String,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService},System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpen" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.Open(System.Byte[],Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenData" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.CotpServer.Open(System.String,Demo3D.Net.NotifyDataChangedEventHandler,System.Int32)">
            <summary>
            Open a COTP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="tsap">The local TSAP to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <param name="port">ISO port number.</param>
            <returns>The COTP protocol socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="CotpServerOpenData" />
            </example>
        </member>
        <member name="T:Demo3D.Net.Protocols.EthernetConnectionProperties">
            <summary>
            Ethernet connection properties.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetConnectionProperties.ReceiveTimeout">
            <summary>
            Maximum time (ms) to wait for a packet to be received. (-1 means wait forever.)
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetConnectionProperties.BatchWaitTime">
            <summary>
            Maximum time (ms) to wait for packets to be received. (0 means wait forever.)
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetConnectionProperties.BatchPacketCount">
            <summary>
            Maximum number of packets to wait for.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocols.EthernetConnectionProperties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetConnectionProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetConnectionProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetConnectionProperties.ToString">
            <summary>
            Returns the name of the ethernet protocol.
            </summary>
            <returns>The name of the ethernet protocol.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.Ethernet">
            <summary>
            Raw ethernet.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.Ethernet.Name">
            <summary>
            The ethernet protocol name.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.Ethernet.Scheme">
            <summary>
            The ethernet protocol scheme.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.EthernetPacketInformation">
            <summary>
            Ethernet packet information.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetPacketInformation.Time">
            <summary>
            Capture time.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetPacketInformation.PacketLength">
            <summary>
            The length of the packet on the wire.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetPacketInformation.Card">
            <summary>
            The ethernet card.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetPacketInformation.#ctor(System.DateTime,System.UInt32,Demo3D.IO.NetworkCard)">
            <summary>
            Constructs a new EthernetPacketID.
            </summary>
            <param name="time">The time the packet arrived at the network card.</param>
            <param name="packetLength">The length of the packet on the network.</param>
            <param name="card">The network card that received the packet.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetPacketInformation.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Protocols.EthernetPacketRoutingInfo">
            <summary>
            Ethernet packet routing information.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetPacketRoutingInfo.Header">
            <summary>
            Ethernet header.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetPacketRoutingInfo.#ctor(Demo3D.IO.BufferSegment)">
            <summary>
            Constructs a new EthernetPacketID.
            </summary>
            <param name="header">The ethernet header.</param>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetPacketRoutingInfo.SourceAddress">
            <summary>
            The packet source address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetPacketRoutingInfo.DestAddress">
            <summary>
            The packet destination address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetPacketRoutingInfo.String">
            <summary>
            A printable string description.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetPacketRoutingInfo.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Protocols.EthernetAddressEditor">
            <summary>
            Address editor for the Ethernet protocol.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.PeerAddress">
            <exclude />
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.CardAddress">
            <exclude />
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.DestAddress">
            <summary>
            Ethernet peer address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.SourceAddress">
            <summary>
            Ethernet source address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.LLC">
            <summary>
            LLC frames.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.DSAP">
            <summary>
            LLC DSAP address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.SSAP">
            <summary>
            LLC SSAP address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.Control">
            <summary>
            LLC Control.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.Snap">
            <exclude />
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.OUI">
            <summary>
            LLC SNAP organisation unique id.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.EthernetAddressEditor.ProtocolId">
            <summary>
            Ethernet v2 EtherType or LLC SNAP protocol id.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetAddressEditor.GetProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetAddressEditor.GetProperties(System.Attribute[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetAddressEditor.GetAddress">
            <summary>
            Returns a ProtocolAddress that represents the configuration defined by this object.
            </summary>
            <returns>The protocol address according to the current setting of the editor properties.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetAddressEditor.SetAddress(Demo3D.Net.ProtocolAddress)">
            <summary>
            Sets this configuration object properties from the ProtocolAddress given.
            </summary>
            <param name="address">The current address.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.EthernetAddressEditor.NextProperty">
            <summary>
            Returns the next property that needs to be edited to complete the address.
            </summary>
            <returns>The name of the property, or null.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.NamespaceDoc">
            <summary>
            Built-in protocol implementations.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.Protocols">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.Protocols.Initialize">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Protocols.TcpConnectionProperties">
            <summary>
            TCP connection properties.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TcpConnectionProperties.ReceiveTimeout">
            <summary>
            Maximum time (ms) to wait for a packet to be received. (-1 means wait forever.)
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TcpConnectionProperties.SendTimeout">
            <summary>
            Maximum time (ms) to wait for the operating system to send a packet. (-1 means wait forever.)
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TcpConnectionProperties.NoDelay">
            <summary>
            Enable TCP no-delay.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpConnectionProperties.GetProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpConnectionProperties.GetProperties(System.Attribute[])">
            <exclude />
        </member>
        <member name="E:Demo3D.Net.Protocols.TcpConnectionProperties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpConnectionProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpConnectionProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpConnectionProperties.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpConnectionProperties.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpConnectionProperties.ToString">
            <summary>
            Returns the name of the TCP protocol.
            </summary>
            <returns>The name of the TCP protocol.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.TcpClientProperties">
            <summary>
            TCP client connection properties.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TcpClientProperties.ConnectTimeout">
            <summary>
            Maximum time (ms) to wait for a connection be to established.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TcpClientProperties.MinReconnectDelay">
            <summary>
            Minimum time (ms) to wait before reconnecting to the same address.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClientProperties.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Protocols.TcpServerProperties">
            <summary>
            TCP server connection properties.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.TCP">
            <summary>
            The TCP protocol.
            </summary>
            <remarks>
            See <see cref="T:Demo3D.Net.Protocols.TcpClient"/> and <see cref="T:Demo3D.Net.Protocols.TcpServer"/> for simple TCP client/server examples.
            </remarks>
        </member>
        <member name="F:Demo3D.Net.Protocols.TCP.Name">
            <summary>
            The TCP protocol name.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.TCP.Scheme">
            <summary>
            The TCP protocol scheme.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.TcpAddressEditor">
            <summary>
            TCP address editor.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TcpAddressEditor.Host">
            <summary>
            The server host.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TcpAddressEditor.Port">
            <summary>
            The server port.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpAddressEditor.GetAddress">
            <summary>
            Returns a ProtocolAddress that represents the configuration defined by this object.
            </summary>
            <returns>The protocol address according to the current setting of the editor properties.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpAddressEditor.SetAddress(Demo3D.Net.ProtocolAddress)">
            <summary>
            Sets this configuration object properties from the ProtocolAddress given.
            </summary>
            <param name="address">The current address.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpAddressEditor.NextProperty">
            <summary>
            Returns the next property that needs to be edited to complete the address.
            </summary>
            <returns>The name of the property, or null.</returns>
        </member>
        <member name="P:Demo3D.Net.Protocols.TCP_Protocol.TcpConnection.ID">
            <summary>
            A description of this socket.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.TCP_Protocol.TcpServerProtocol.TcpServer.ID">
            <summary>
            A description of this socket.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.TcpClient">
            <summary>
            A TCP client socket.
            </summary>
            <remarks>
            This class is a wrapper around Client{IPacketIOService}.Open and ProtocolAddressBuilder.
            See <see cref="T:Demo3D.Net.Client`1"/> and <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> for more advanced usage.
            </remarks>
            <example>
            <para>
            This example shows a simple TCP client that connects to a configured server and sends
            a simple message once per second using the underlying <see cref="T:System.IO.Stream"/>.
            </para>
            <para>
            See <see cref="T:Demo3D.Net.Protocols.TcpServer"/> for the implementation of the server that works with this client.
            </para>
            <code lang="C#" source="Examples\Net\TcpStreamClient.cs" region="Example" />
            </example>
            <example>
            <para>
            This example shows a simple TCP client that connects to a configured server and sends
            a simple message once per second.
            </para>
            <para>
            See <see cref="T:Demo3D.Net.Protocols.TcpServer"/> for the implementation of the server that works with this client.
            See also <see cref="T:Demo3D.IO.BinaryTextEncoding"/> for help with string-based protocols.
            </para>
            <code lang="C#" source="Examples\Net\TcpClient.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.OpenStreamAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenStreamAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.OpenStreamAsync(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenStreamAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.OpenAsync(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.OpenAsync(System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.OpenStream(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TCP client.</returns>
            <remarks>
            Don't use blocking methods in Demo3D scripting.  Consider using <see cref="M:Demo3D.Net.Protocols.TcpClient.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)"/> instead.
            </remarks>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenStream" />
            </example>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolProperties" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.Open(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TCP client.</returns>
            <remarks>
            Don't use blocking methods in Demo3D scripting.  Consider using <see cref="M:Demo3D.Net.Protocols.TcpClient.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)"/> instead.
            </remarks>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpen" />
            </example>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolProperties" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpClient.Open(System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a TCP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new TCP client.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcClientOpenData" />
            </example>
        </member>
        <member name="T:Demo3D.Net.Protocols.TcpServer">
            <summary>
            A TCP server.
            </summary>
            <remarks>
            This class is a wrapper around ProtocolServer.Open{IPacketIOService} and ProtocolAddressBuilder.
            See <see cref="T:Demo3D.Net.ProtocolServer"/> and <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> for more advanced usage.
            </remarks>
            <example>
            <para>
            This example shows a simple TCP server that accepts connections, calling a function for each connection
            accepted.  The function reads data directly from the underlying Stream.
            </para>
            <para>
            See <see cref="T:Demo3D.Net.Protocols.TcpClient"/> for the implementation of the client that works with this server.
            </para>
            <code lang="C#" source="Examples\Net\TcpStreamServer.cs" region="Example" />
            </example>
            <example>
            <para>
            This example shows a simple TCP server that accepts connections, waits for data to be received and then
            calls a method to handle the messages read from the each of the clients.
            </para>
            <para>
            See <see cref="T:Demo3D.Net.Protocols.TcpClient"/> for the implementation of the client that works with this server.
            See also <see cref="T:Demo3D.IO.BinaryTextEncoding"/> for help with string-based protocols.
            </para>
            <code lang="C#" source="Examples\Net\TcpServer.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.OpenAsync(System.Boolean,System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IByteStreamService})">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenStreamAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.OpenAsync(System.Boolean,System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService})">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.OpenAsync(System.Boolean,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="port">The port to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.OpenAsync(System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IByteStreamService})">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenStreamAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.OpenAsync(System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService})">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.OpenAsync(System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenDataAsync" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.Open(System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IByteStreamService})">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenStream" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.Open(System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService})">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpen" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Protocols.TcpServer.Open(System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a TCP server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <returns>The TCP protocol server socket.</returns>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="TpcServerOpenData" />
            </example>
        </member>
        <member name="T:Demo3D.Net.Protocols.TPKT">
            <summary>
            The TPKT protocol.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.TPKT.Name">
            <summary>
            The TPKT protocol name.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.TPKT.Scheme">
            <summary>
            The TPKT protocol scheme.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.TpktClient">
            <summary>
            A TPKT client socket.
            </summary>
            <remarks>
            This class is a wrapper around Client{IPacketIOService}.Open and ProtocolAddressBuilder.
            See <see cref="T:Demo3D.Net.Client`1"/> and <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> for more advanced usage.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktClient.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Open a TPKT connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TPKT client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktClient.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Open a TPKT connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new TPKT client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktClient.OpenAsync(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Open a TPKT connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TPKT client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktClient.OpenAsync(System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Open a TPKT connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new TPKT client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktClient.Open(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Open a TPKT connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new TPKT client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktClient.Open(System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Open a TPKT connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new TPKT client.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.TpktServer">
            <summary>
            A TPKT server.
            </summary>
            <remarks>
            This class is a wrapper around ProtocolServer.Open{IPacketIOService} and ProtocolAddressBuilder.
            See <see cref="T:Demo3D.Net.ProtocolServer"/> and <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> for more advanced usage.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktServer.OpenAsync(System.Boolean,System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService})">
            <summary>
            Open a TPKT server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TPKT protocol server socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktServer.OpenAsync(System.Boolean,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Open a TPKT server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="port">The port to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <returns>The TPKT protocol server socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktServer.OpenAsync(System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService})">
            <summary>
            Open a TPKT server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TPKT protocol server socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktServer.OpenAsync(System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Open a TPKT server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <returns>The TPKT protocol server socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktServer.Open(System.Int32,Demo3D.Net.ServiceClientAsync{Demo3D.Net.IPacketIOService})">
            <summary>
            Open a TPKT server.
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="serviceConnection">Delegate for servicing a new connection.</param>
            <returns>The TPKT protocol server socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.TpktServer.Open(System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Open a TPKT server.
            Creates a server and starts accepting connections, calling 'dataChangedHandler' with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="port">The port to open the server on.</param>
            <param name="dataChangedHandler">Delegate for servicing new data arriving on a client connection.</param>
            <returns>The TPKT protocol server socket.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.UdpConnectionProperties">
            <summary>
            UDP connection properties.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpConnectionProperties.#ctor">
            <summary>
            Constructs default UDP connection properties.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UdpConnectionProperties.ReceiveTimeout">
            <summary>
            Maximum time (ms) to wait for a packet to be received. (-1 means wait forever.)
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UdpConnectionProperties.SendTimeout">
            <summary>
            Maximum time (ms) to wait for the operating system to send a packet. (-1 means wait forever.)
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpConnectionProperties.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpConnectionProperties.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude />
        </member>
        <member name="E:Demo3D.Net.Protocols.UdpConnectionProperties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpConnectionProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpConnectionProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpConnectionProperties.ToString">
            <summary>
            Returns the name of the UDP protocol.
            </summary>
            <returns>The name of the UDP protocol.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.UDP">
            <summary>
            The UDP protocol.
            </summary>
            <remarks>
            See <see cref="T:Demo3D.Net.Protocols.UdpSocket"/> for simple UDP client/server example.
            </remarks>
        </member>
        <member name="F:Demo3D.Net.Protocols.UDP.Name">
            <summary>
            The UDP protocol name.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Protocols.UDP.Scheme">
            <summary>
            The UDP protocol scheme.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.UdpAddressEditor">
            <summary>
            UDP address editor.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpAddressEditor.#ctor">
            <summary>
            Construct an address.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpAddressEditor.#ctor(Demo3D.Net.ProtocolAddress)">
            <summary>
            Construct an address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UdpAddressEditor.Host">
            <summary>
            The server host.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UdpAddressEditor.Port">
            <summary>
            The server port.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UdpAddressEditor.RemoteHost">
            <summary>
            The remote host.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UdpAddressEditor.RemotePort">
            <summary>
            The remote port.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpAddressEditor.GetParts">
            <summary>
            Returns the parts of the address.
            </summary>
            <returns>The parts of the address.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpAddressEditor.GetAddress">
            <summary>
            Returns a ProtocolAddress that represents the configuration defined by this object.
            </summary>
            <returns>The protocol address according to the current setting of the editor properties.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpAddressEditor.SetAddress(Demo3D.Net.ProtocolAddress)">
            <summary>
            Sets this configuration object properties from the ProtocolAddress given.
            </summary>
            <param name="address">The current address.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpAddressEditor.NextProperty">
            <summary>
            Returns the next property that needs to be edited to complete the address.
            </summary>
            <returns>The name of the property, or null.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.UDPPacketInformation">
            <summary>
            UDP packet information.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UDPPacketInformation.TimeQPC">
            <summary>
            Capture time.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.UDPPacketInformation.TimeSystem">
            <summary>
            Capture time.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.UDPPacketInformation.#ctor(Demo3D.Time.RealTime,System.DateTime)">
            <summary>
            Constructs a new UDPPacketInformation.
            </summary>
            <param name="timeQPC">The eal time the packet arrived.</param>
            <param name="timeSystem">The real time the packet arrived.</param>
        </member>
        <member name="M:Demo3D.Net.Protocols.UDPPacketInformation.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Protocols.IUDPService">
            <summary>
            UDP specific services.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.IUDPService.JoinMulticastGroup(System.Net.IPAddress)">
            <summary>
            Adds the socket to the multicast group.
            </summary>
            <param name="multicastAddr">The multicast group to join.</param>
        </member>
        <member name="T:Demo3D.Net.Protocols.UdpSocket">
            <summary>
            A UDP client/server socket.
            </summary>
            <remarks>
            This class is a wrapper around Client{IUdpIOService}.Open and ProtocolAddressBuilder.
            See <see cref="T:Demo3D.Net.Client`1"/> and <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> for more advanced usage.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a UDP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new UDP client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a UDP connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new UDP client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a UDP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new UDP client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a UDP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new UDP client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.Open(System.String,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a UDP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new UDP client.</returns>
            <remarks>
            Don't use blocking methods in Demo3D scripting.  Consider using <see cref="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)"/> instead.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.Open(System.String,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a UDP connection.
            </summary>
            <param name="host">The host to connect to.</param>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new UDP client.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Boolean,System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a UDP server.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="port">The port to run the server on.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new UDP server.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Boolean,System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a UDP server.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="port">The port to run the server on.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new UDP server.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a UDP server.
            </summary>
            <param name="port">The port to run the server on.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new UDP server.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a UDP server.
            </summary>
            <param name="port">The port to run the server on.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new UDP server.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.Open(System.Int32,Demo3D.Net.Flags)">
            <summary>
            Opens a UDP server.
            </summary>
            <param name="port">The port to run the server on.</param>
            <param name="flags">Connection flags.</param>
            <returns>A new UDP server.</returns>
            <remarks>
            Don't use blocking methods in Demo3D scripting.  Consider using <see cref="M:Demo3D.Net.Protocols.UdpSocket.OpenAsync(System.Boolean,System.String,System.Int32,Demo3D.Net.Flags)"/> instead.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Protocols.UdpSocket.Open(System.Int32,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Opens a UDP server.
            </summary>
            <param name="port">The port to connect to.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <returns>A new UDP server.</returns>
        </member>
        <member name="T:Demo3D.Net.IIOStatsService">
            <summary>
            Simple connection IO statistics.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IIOStatsService.BytesSent">
            <summary>
            Total bytes sent over this connection.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IIOStatsService.BytesReceived">
            <summary>
            Total bytes received over this connection.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IIOStatsService.ResponseTimeYs">
            <summary>
            An indication of request response time in microseconds.
            </summary>
            <returns>Request response time, or 0 if not detectable.</returns>
        </member>
        <member name="T:Demo3D.Net.IOStatsService">
            <summary>
            A base class for implementing IIOStatsService.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.IOStatsService.Next">
            <summary>
            The next service (downstream) that may provide other stats.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IOStatsService.#ctor">
            <summary>
            Creates a new IOStatsService.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IOStatsService.#ctor(Demo3D.Net.IIOStatsService)">
            <summary>
            Creates a new IOStatsService.
            </summary>
            <param name="next">The next service (downstream) that may provide others stats.</param>
        </member>
        <member name="M:Demo3D.Net.IOStatsService.#ctor(Demo3D.Net.ProtocolSocket)">
            <summary>
            Creates a new IOStatsService.
            </summary>
            <param name="downstream">The downstream protocol that may provide others stats.</param>
        </member>
        <member name="P:Demo3D.Net.IOStatsService.BytesSent">
            <summary>
            Total bytes sent over this connection.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IOStatsService.BytesReceived">
            <summary>
            Total bytes received over this connection.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IOStatsService.ResponseTimeYs">
            <summary>
            An indication of request response time in microseconds.
            </summary>
            <returns>Request response time, or 0 if not detectable.</returns>
        </member>
        <member name="T:Demo3D.Net.BytesIOStats">
            <summary>
            A class for implementing bytes in/out statistics.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.BytesIOStats.#ctor">
            <summary>
            Creates a new <see cref="T:Demo3D.Net.BytesIOStats"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Net.BytesIOStats.#ctor(Demo3D.Net.IIOStatsService)">
            <summary>
            Creates a new <see cref="T:Demo3D.Net.BytesIOStats"/>.
            </summary>
            <param name="downstream">The downstream stats.</param>
        </member>
        <member name="M:Demo3D.Net.BytesIOStats.#ctor(Demo3D.Net.ProtocolSocket)">
            <summary>
            Creates a new <see cref="T:Demo3D.Net.BytesIOStats"/>.
            </summary>
            <param name="downstream">The downstream protocol that may provide others stats.</param>
        </member>
        <member name="P:Demo3D.Net.BytesIOStats.BytesSent">
            <summary>
            Total bytes sent over this connection.
            </summary>
        </member>
        <member name="P:Demo3D.Net.BytesIOStats.BytesReceived">
            <summary>
            Total bytes received over this connection.
            </summary>
        </member>
        <member name="M:Demo3D.Net.BytesIOStats.Sent(System.Int64)">
            <summary>
            Increment bytes sent.
            </summary>
            <param name="bytes">Number of bytes sent.</param>
        </member>
        <member name="M:Demo3D.Net.BytesIOStats.Received(System.Int64)">
            <summary>
            Increment bytes received.
            </summary>
            <param name="bytes">Number of bytes sent.</param>
        </member>
        <member name="T:Demo3D.Net.ResponseTimeStats">
            <summary>
            A class for implementing request response statistics.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ResponseTimeStats.#ctor">
            <summary>
            Creates a new <see cref="T:Demo3D.Net.ResponseTimeStats"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ResponseTimeStats.#ctor(Demo3D.Net.IIOStatsService)">
            <summary>
            Creates a new <see cref="T:Demo3D.Net.ResponseTimeStats"/>.
            </summary>
            <param name="downstream">The downstream stats.</param>
        </member>
        <member name="M:Demo3D.Net.ResponseTimeStats.#ctor(Demo3D.Net.ProtocolSocket)">
            <summary>
            Creates a new <see cref="T:Demo3D.Net.ResponseTimeStats"/>.
            </summary>
            <param name="downstream">The downstream protocol that may provide others stats.</param>
        </member>
        <member name="M:Demo3D.Net.ResponseTimeStats.ResponseTimeYs">
            <summary>
            An indication of request response time in microseconds.
            </summary>
            <returns>Request response time, or 0 if not detectable.</returns>
        </member>
        <member name="M:Demo3D.Net.ResponseTimeStats.SetResponseTimeYs(Demo3D.Time.RealTime)">
            <summary>
            Sets the current request response time in microseconds.
            </summary>
            <param name="responseTimeYs">The current request response time.</param>
        </member>
        <member name="T:Demo3D.Net.IMessageService">
            <summary>
            Protocol message stream service.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IMessageService.PduSize">
            <summary>
            Gets the PDU size.
            </summary>
            <remarks>
            This value may change since it may be negotiated with the peer (eg COTP).  Negotiation only happens
            on connection so it's guaranteed not to change after the connection has been established.
            </remarks>
        </member>
        <member name="P:Demo3D.Net.IMessageService.HeaderSize">
            <summary>
            Gets the message header size.
            </summary>
            <remarks>
            The buffer passed to <see cref="M:Demo3D.Net.IMessageService.WriteAsync(System.Boolean,System.ArraySegment{System.Byte})"/> and
            <see cref="M:Demo3D.Net.IMessageService.WriteToAsync(System.Boolean,System.ArraySegment{System.Byte},System.Net.EndPoint)"/> must have at least this many bytes free
            before the data segment in which to prepend a header of this size.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IMessageService.WriteAsync(System.Boolean,System.ArraySegment{System.Byte})">
            <summary>
            Writes data.
            </summary>
            <param name="sync">If true, the task returned is guaranteed to be complete.</param>
            <param name="buffer">Buffer of data to send.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.IMessageService.WriteToAsync(System.Boolean,System.ArraySegment{System.Byte},System.Net.EndPoint)">
            <summary>
            Writes data.
            </summary>
            <param name="sync">If true, the task returned is guaranteed to be complete.</param>
            <param name="buffer">Buffer of data to send.</param>
            <param name="remoteEndPoint">End point to send the data.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.Net.IMessageStreamService">
            <summary>
            Protocol message stream service.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IMessageStreamService.ReadAsync(System.Boolean,System.ArraySegment{System.Byte})">
            <summary>
            Reads data.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="buffer">Buffer to receive data.</param>
            <returns>The next message.</returns>
        </member>
        <member name="M:Demo3D.Net.IMessageStreamService.ReadFromAsync(System.Boolean,System.ArraySegment{System.Byte})">
            <summary>
            Reads data with peer information.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="buffer">Buffer to receive data.</param>
            <returns>The next message.</returns>
        </member>
        <member name="T:Demo3D.Net.MessageReceivedDelegate">
            <summary>
            Delegate for handling a received message.
            </summary>
            <param name="message">The received message.</param>
        </member>
        <member name="T:Demo3D.Net.IMessageNotifyService">
            <summary>
            Protocol message stream service.
            </summary>
        </member>
        <member name="E:Demo3D.Net.IMessageNotifyService.OnMessageReceived">
            <summary>
            Occurs when a message is received.
            </summary>
        </member>
        <member name="T:Demo3D.Net.MessageService">
            <summary>
            Extension methods for <see cref="T:Demo3D.Net.IMessageStreamService"/> and <see cref="T:Demo3D.Net.IMessageNotifyService"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Net.MessageService.Read(Demo3D.Net.IMessageStreamService,System.ArraySegment{System.Byte}@)">
            <summary>
            Reads data.
            </summary>
            <param name="service">The IMessageStreamService.</param>
            <param name="buffer">Buffer to receive data.</param>
            <returns>The next message.</returns>
        </member>
        <member name="M:Demo3D.Net.MessageService.Write(Demo3D.Net.IMessageService,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes data.
            </summary>
            <param name="service">The IMessageService.</param>
            <param name="buffer">Buffer of data to send.</param>
        </member>
        <member name="T:Demo3D.Net.IncomingMessageManager">
            <summary>
            The IncomingMessageManager base class.
            </summary>
        </member>
        <member name="T:Demo3D.Net.IncomingMessageManager.Properties">
            <summary>
            The IncomingMessageManager configuration properties.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.Properties.RespondBehindDefault">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager.Properties.#ctor">
            <summary>
            Constructs new IncommingMessageManager configuration properties.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager.Properties.#ctor(System.Boolean)">
            <summary>
            Constructs new IncommingMessageManager configuration properties.
            </summary>
            <param name="respondBehind">Default respond behind configuration.</param>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.Properties.RespondBehind">
            <summary>
            Read any outstanding delayed response before sending another request to the server.
            </summary>
            <remarks>
            Since write responses (for example) only contains success indication, you can continue with other tasks while the peer processes the request,
            and only read the result when it arrives later.
            </remarks>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.Properties.MessagesSent">
            <summary>
            Number of messages sent.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.Properties.MessagesReceived">
            <summary>
            Number of messages received.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.Properties.ResponseTime">
            <summary>
            Current request response time in microseconds.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager.Properties.GetProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager.Properties.GetProperties(System.Attribute[])">
            <exclude />
        </member>
        <member name="E:Demo3D.Net.IncomingMessageManager.Properties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager.Properties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager.Properties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that's changed.</param>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager.Properties.ToString">
            <summary>
            Returns a summary of the configuration properties.
            </summary>
            <returns>A summary of the configuration properties</returns>
        </member>
        <member name="T:Demo3D.Net.IncomingMessageManager.RequestStats">
            <summary>
            A class for reporting request statistics.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.RequestStats.WaitForSocket">
            <summary>
            Length of time (in microseconds) that this request had to wait for access to the socket.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.RequestStats.WaitForPreviousResponse">
            <summary>
            Length of time (in microseconds) that this request had to wait for a response to the previous request.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.RequestStats.SendTime">
            <summary>
            Length of time (in microseconds) that it took for the lower level protocol to send the request.
            </summary>
        </member>
        <member name="T:Demo3D.Net.IncomingMessageManager.TransactionStats">
            <summary>
            A class for reporting transaction statistics.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager.TransactionStats.ResponseTime">
            <summary>
            Length of time (in microseconds) between the point just before sending the request and completely receiving the response.
            </summary>
        </member>
        <member name="T:Demo3D.Net.IncomingMessageManager`1">
            <summary>
            Manages incoming messages received on a connection.
            </summary>
            <typeparam name="T">The message type.</typeparam>
            <remarks>
            <para>
            Takes control of reading data from the socket.  Matches incoming messages with an <see cref="T:Demo3D.Net.IncomingMessageManager`1.MessageHandler"/>
            that's expecting the message to arrive.
            </para>
            <para>
            The message manager can be used with predefined IncomingMessageHandlers to accept incoming messages and route them
            to the appropriate handler.  Or it can be used to manage a request/response style transactions, sending the request
            and waiting for the response.
            </para>
            <para>
            It can be configured to send transactions synchronously or asynchronously (allow 'respond-behind').
            See <see cref="T:Demo3D.Net.IncomingMessageManager.Properties"/> for more details.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Net.IncomingMessageManager`1.MessageHandler">
            <summary>
            A base class for matching and handling message notifications.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MessageHandler.Match(`0)">
            <summary>
            Attempts to match an incoming message.
            </summary>
            <param name="message">The message that's been received.</param>
            <returns>True if this handler can handle this message.</returns>
            <remarks>
            This method is NOT Demo3D thread safe.
            It may be called in any thread including a .Net System thread.
            Do not access Demo3D core code from within this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MessageHandler.HandleMessage(`0)">
            <summary>
            Handles a message.  The connection transaction manager is blocked while this is running.
            </summary>
            <param name="message">The message that's been received.</param>
            <remarks>
            This method is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the method used to register this IncomingMessageHandler.
            </remarks>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager`1.MessageHandler.Description">
            <summary>
            A description of the message expected.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MessageHandler.ToString">
            <summary>
            Returns a description of the message expected.
            </summary>
            <returns>A description of the message expected.</returns>
        </member>
        <member name="T:Demo3D.Net.IncomingMessageManager`1.MHInstance">
            <summary>
            One instance of a registered message handler.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager`1.MHInstance.Handler">
            <summary>
            The wrapped up message handler.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager`1.MHInstance.MultipleMessages">
            <summary>
            Handles more than one message.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager`1.MHInstance.HandleMessage">
            <summary>
            How to handle the message.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager`1.MHInstance.Done">
            <summary>
            Semaphore that's released when the message has been received.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MHInstance.Match(`0)">
            <summary>
            Attempts to match an incoming message.
            </summary>
            <param name="message">The message that's been received.</param>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MHInstance.HandleAndSignal(System.Action{`0},System.Boolean)">
            <summary>
            Returns a message handler that will handle a message and then signal success (or error).
            </summary>
            <param name="handleMessage">The message handler.</param>
            <param name="disposeMessage">True to dispose the message.</param>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MHInstance.MessageReceived(`0)">
            <summary>
            Called when a message has been received.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MHInstance.Error(System.Exception)">
            <summary>
            Signals a message/connection error.
            </summary>
            <param name="x">The exception that describes the error.</param>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.MHInstance.ThrowOnError">
            <summary>
            Throw any stored error.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.#ctor(Demo3D.Net.ProtocolSocket,Demo3D.Net.INotifyDataChanged,Demo3D.Net.IncomingMessageManager.Properties)">
            <summary>
            Manages and dispatches incoming messages.
            </summary>
            <param name="socket">The connection to monitor.</param>
            <param name="notifyDataChanged">Downstream message notifier.</param>
            <param name="properties">The incoming message manager properties (or null).</param>
        </member>
        <member name="E:Demo3D.Net.IncomingMessageManager`1.OnMessageSent">
            <summary>
            Occurs when a message is sent.
            </summary>
            <remarks>
            May be called in any thread.  Callbacks should involve minimal processing time.
            The event is raised immediately after the message is sent.
            </remarks>
            <exclude />
        </member>
        <member name="E:Demo3D.Net.IncomingMessageManager`1.OnMessageReceived">
            <summary>
            Occurs when a message is received.
            </summary>
            <remarks>
            May be called in any thread.  Callbacks should involve minimal processing time.
            The event is raised immediately after the message is received, and before the message is handled.
            </remarks>
            <exclude />
        </member>
        <member name="E:Demo3D.Net.IncomingMessageManager`1.OnResponseReceived">
            <summary>
            Occurs when a response to a request is received.  Passes the response time in microseconds.
            </summary>
            <remarks>
            May be called in any thread.  Callbacks should involve minimal processing time.
            The event is raised immediately after the response is received, and before the response is handled.
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.NotifyMessageSent(Demo3D.Net.IncomingMessageManager.RequestStats)">
            <summary>
            Raises the OnMessageSent event.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.NotifyMessageReceived">
            <summary>
            Raises the OnMessageReceived event.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.NotifyResponseReceived(Demo3D.Net.IncomingMessageManager.TransactionStats)">
            <summary>
            Raises the OnResponseReceived event.
            </summary>
            <param name="stats">The request statistics.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.NotifyHandlerError(System.Exception)">
            <summary>
            Called when a handler not using CallbackContext.Inline throws an exception.
            </summary>
            <param name="e">The exception thrown.</param>
        </member>
        <member name="P:Demo3D.Net.IncomingMessageManager`1.DisposeMessages">
            <summary>
            True to automatically Dispose messages after they're handled.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.HandleInContext(System.Action{`0},Demo3D.Net.CallbackContext)">
            <summary>
            Returns a message handler delegate wrapping up the callers synchronization context.
            </summary>
            <param name="handleMessage">The users message handler, wrapped by HandleAndSignal so that exceptions are caught and handled.</param>
            <param name="callbackContext">The requested synchronization context.</param>
            <returns>A new message handler wrapping up the requested context.</returns>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.Expect(Demo3D.Net.IncomingMessageManager{`0}.MessageHandler,System.Boolean,Demo3D.Net.CallbackContext)">
            <summary>
            Sets up a handler for incoming requests.
            </summary>
            <param name="handler">The handler for specific types of incoming messages.</param>
            <param name="multipleMessages">Handles more than one message.</param>
            <param name="callbackContext">Defines the context in which the message handler should be called.</param>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.StopExpecting(Demo3D.Net.IncomingMessageManager{`0}.MessageHandler)">
            <summary>
            Removes a handler for incoming requests.
            </summary>
            <param name="handler">A handler previously passed in to Expect.</param>
            <returns>True if the handler was removed.</returns>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.TransactionAsync(System.Boolean,System.Func{System.Boolean,System.Threading.Tasks.Task},Demo3D.Net.IncomingMessageManager{`0}.MHInstance,System.Boolean,System.Int32,Demo3D.Net.IncomingMessageManager.TransactionStats,Demo3D.Time.RealTime.Stopwatch)">
            <summary>
            Sends a (pre-prepared) request and waits for a response (synchronously or asynchronously).
            <paramref name="responseInstance"/> will already have the context captured (if need be).
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="sendMessageAsync">A method for sending the initial request message.</param>
            <param name="responseInstance">A handler instance for receiving the response (or null).</param>
            <param name="waitForResponse">True to wait for and handle the response before returning.  Otherwise the response is handled asynchronously in a separate thread.</param>
            <param name="waitTimeoutMs">How long to wait for the response (in milliseconds).</param>
            <param name="stats">The statistics for this transaction.</param>
            <param name="stopwatch">Stopwatch for timing events.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.TransactionAsync(System.Boolean,System.Func{System.Boolean,System.Threading.Tasks.Task},Demo3D.Net.IncomingMessageManager{`0}.MessageHandler,System.Boolean,System.Int32,Demo3D.Net.CallbackContext)">
            <summary>
            Sends a (pre-prepared) request and (optionally) waits for a response (synchronously or asynchronously).
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="sendMessageAsync">A method for sending the initial request message.</param>
            <param name="response">A handler for receiving the response (or null).</param>
            <param name="waitForResponse">True to wait for and handle the response before returning.  Otherwise the response is handled asynchronously in a separate thread.</param>
            <param name="waitTimeoutMs">How long to wait for the response (in milliseconds).</param>
            <param name="callbackContext">Defines the context in which the message handler should be called.</param>
            <returns>Request statistics.</returns>
            <remarks>
            <para>Exceptions:</para>
            <para>
            This method may throw exceptions under different circumstances, depending on the configuration and
            the parameters passed to this call and to previous calls.  If a handler throws an exception
            then the exception may be reported here.  But if (for example) <paramref name="waitForResponse"/> is false
            then the exception may be reported in the next call to this method, even though it does not relate to
            that transaction.
            </para>
            <para>
            Best practice is for a handler not to throw exceptions, but rather to catch and handle the exceptions itself.
            </para>
            <para>Timeouts:</para>
            <para>
            It may still be necessary to pass a non-zero timeout in <paramref name="waitTimeoutMs"/> even if
            <paramref name="waitForResponse"/> is false.  Although <paramref name="waitForResponse"/> false implies that
            this method should not wait, and therefore a timeout is not required, there are circumstances when it will wait.
            </para>
            <para>
            Depending on the configuration this method may be subject to flow control.  For example if the configuration is
            RespondBehind, then we can't send this request until we've received the reply to the previous request, and this
            call will need to wait for that reply before it can send.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.Transaction(System.Action,Demo3D.Net.IncomingMessageManager{`0}.MessageHandler,System.Boolean,System.Int32,Demo3D.Net.CallbackContext)">
            <summary>
            Sends a (pre-prepared) request and (optionally) waits for a response (synchronously or asynchronously).
            </summary>
            <param name="sendMessage">A method for sending the initial request message.</param>
            <param name="response">A handler for receiving the response (or null).</param>
            <param name="waitForResponse">True to wait for and handle the response before returning.  Otherwise the response is handled asynchronously in a separate thread.</param>
            <param name="waitTimeoutMs">How long to wait for the response (in milliseconds).</param>
            <param name="callbackContext">Defines the context in which the message handler should be called.</param>
            <returns>Request statistics.</returns>
            <remarks>
            <para>Exceptions:</para>
            <para>
            This method may throw exceptions under different circumstances, depending on the configuration and
            the parameters passed to this call and to previous calls.  If a handler throws an exception
            then the exception may be reported here.  But if (for example) <paramref name="waitForResponse"/> is false
            then the exception may be reported in the next call to this method, even though it does not relate to
            that transaction.
            </para>
            <para>
            Best practice is for a handler not to throw exceptions, but rather to catch and handle the exceptions itself.
            </para>
            <para>Timeouts:</para>
            <para>
            It may still be necessary to pass a non-zero timeout in <paramref name="waitTimeoutMs"/> even if
            <paramref name="waitForResponse"/> is false.  Although <paramref name="waitForResponse"/> false implies that
            this method should not wait, and therefore a timeout is not required, there are circumstances when it will wait.
            </para>
            <para>
            Depending on the configuration this method may be subject to flow control.  For example if the configuration is
            RespondBehind, then we can't send this request until we've received the reply to the previous request, and this
            call will need to wait for that reply before it can send.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.PeekMessage(Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Extracts and returns the message from the notification arguments, without consuming it.
            </summary>
            <param name="args">The notification arguments.</param>
            <returns>The corresponding message (or null if the message has already been consumed).</returns>
            <remarks>
            This method can be used to inspect a message, or pull (peek) more data from a stream into a message in
            order to inspect it, but should not consume the message or consume data from the underlying stream (move
            stream pointers forward).
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.ConsumeMessage(Demo3D.Net.NotifyDataChangedEventArgs,`0)">
            <summary>
            Checks that the message from the notification arguments has not yet been consumed,
            consuming it so that no other callback can retreive the same message.
            </summary>
            <param name="args">The notification arguments.</param>
            <param name="peekedMessage">The message that was returned from <see cref="M:Demo3D.Net.IncomingMessageManager`1.PeekMessage(Demo3D.Net.NotifyDataChangedEventArgs)"/>.</param>
            <returns>The peeked message (or null if the message has already been consumed).</returns>
            <remarks>
            This method should consume the message from the event and consume any header data from the underlying stream.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.NotifyMessageReceived(Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Notifies receipt of a message.
            </summary>
            <param name="socket">The protocol socket that raised the event.</param>
            <param name="service">The service that raised the event.</param>
            <param name="args">Notification of the message received.</param>
            <remarks>
            <para>
            <see cref="M:Demo3D.Net.IncomingMessageManager`1.PeekMessage(Demo3D.Net.NotifyDataChangedEventArgs)"/> and <see cref="M:Demo3D.Net.IncomingMessageManager`1.ConsumeMessage(Demo3D.Net.NotifyDataChangedEventArgs,`0)"/>
            may well read data from an underlying stream in order to determine if the message matches and then to consume it.
            </para>
            <para>
            Even so, this callback must not be async since there could be multiple callbacks registered on the underlying
            DataChanged event, and they must run synchronously in turn.  Otherwise you potentially get a race with one callback
            peeking and consuming a message while another still has yet to peek.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IncomingMessageManager`1.Dispose">
            <summary>
            Cancels outstanding message handlers.
            </summary>
        </member>
        <member name="T:Demo3D.Net.IncomingPacketManager">
            <summary>
            Manages incoming packets on a connection.  Expects the connection to support the IPacketIOService.
            </summary>
            <remarks>
            <para>
            Takes control of reading packets from the socket.  Matches incoming packets with a MessageHandler that's expecting
            the packet to arrive.
            </para>
            <para>
            The message manager can be used with predefined MessageHandlers to accept incoming packets and route them
            to the appropriate handler.  Or it can be used to manage a request/response style transactions, sending the request
            and waiting for the response.
            </para>
            <para>
            It can be configured to send transactions synchronously, allow 'respond-behind', or allow overlapping transactions.
            See <see cref="T:Demo3D.Net.IncomingMessageManager.Properties"/> for more details.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IncomingPacketManager.#ctor(Demo3D.Net.ProtocolSocket,Demo3D.Net.IncomingMessageManager.Properties)">
            <summary>
            Manages incoming packets on a connection.
            </summary>
            <param name="socket">The connection to monitor.</param>
            <param name="properties">Connection management properties (or null).</param>
        </member>
        <member name="M:Demo3D.Net.IncomingPacketManager.PeekMessage(Demo3D.Net.NotifyDataChangedEventArgs)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.IncomingPacketManager.ConsumeMessage(Demo3D.Net.NotifyDataChangedEventArgs,Demo3D.IO.PacketReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.NotifyDataChangedEventArgs">
            <summary>
            Information about an INotifyDataChanged.DataChanged event.
            </summary>
            <remarks>
            Normally overridden to pass more information about the data that caused the event.
            See the documentation for the service raising the event.
            </remarks>
        </member>
        <member name="T:Demo3D.Net.NotifyDataChangedEventHandler">
            <summary>
            Represents the method that handles <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> events.
            </summary>
            <param name="socket">The protocol socket that raised the event.</param>
            <param name="service">The service that raised the event.</param>
            <param name="e">Information about the event.</param>
            <remarks>
            The actual <paramref name="e"/> object passed is normally a class derived from NotifyDataChangedEventArgs,
            and will normally contain more information about the data.  See the documentation for the service raising the event.
            </remarks>
        </member>
        <member name="T:Demo3D.Net.INotifyDataChanged">
            <summary>
            Notifies listeners that data has arrived or changed.
            </summary>
        </member>
        <member name="E:Demo3D.Net.INotifyDataChanged.DataChanged">
            <summary>
            Occurs when data has arrived or changed.
            </summary>
            <remarks>
            DataChanged is Demo3D thread safe.
            Events are called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="P:Demo3D.Net.INotifyDataChanged.CanSubscribe">
            <summary>
            Returns true if data changes can be subscribed to.
            </summary>
        </member>
        <member name="P:Demo3D.Net.INotifyDataChanged.DataSubscribed">
            <summary>
            Returns true if data changes are currently subscribed to.
            </summary>
        </member>
        <member name="M:Demo3D.Net.INotifyDataChanged.AddDataChanged(Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="handler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.INotifyDataChanged.RemoveDataChanged(Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Remove a handler from the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to remove.</param>
        </member>
        <member name="T:Demo3D.Net.IDataChangedNotifier">
            <summary>
            An object that can notify when data has arrived or changed.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IDataChangedNotifier.NotifyDataChanged(Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Notifies callers of a data change.
            </summary>
            <param name="socket">The protocol socket that raised the event.</param>
            <param name="service">The service that raised the event.</param>
            <param name="e">Information about the event.</param>
        </member>
        <member name="T:Demo3D.Net.PacketChangedEventArgs">
            <summary>
            Arguments to the <see cref="T:Demo3D.Net.IPacketIOService"/> <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> event.
            Contains information about the packet received that caused the event to be raised.
            </summary>
        </member>
        <member name="M:Demo3D.Net.PacketChangedEventArgs.#ctor(System.Func{Demo3D.IO.IPacketReader},System.Func{Demo3D.IO.IPacketReader})">
            <summary>
            Creates PacketChangedEventArgs.
            </summary>
            <param name="peek">A function for peeking at the packet.</param>
            <param name="consume">A method for consuming the packet, ensuring it's returned only once.</param>
            <remarks>
            <para>
            The peek function will be used to inspect a message, or pull (peek) more data from a stream into a message in
            order to inspect it, but it should not consume the message or consume data from the underlying stream (move
            stream pointers forward).
            </para>
            <para>
            The consume function should consume the message from the event and consume any header data from the underlying stream.
            The packet will be Disposed when all the callbacks raised on the DataChanged event return.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.Net.PacketChangedEventArgsExtensions">
            <summary>
            Extensions to <see cref="T:Demo3D.Net.PacketChangedEventArgs"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Net.PacketChangedEventArgsExtensions.TryGetData(Demo3D.Net.PacketChangedEventArgs)">
            <summary>
            Gets the packet received from the network that caused this event to be raised.
            Returns null if the packet has already been read from the socket.
            </summary>
            <param name="args">The packet event args.</param>
            <returns>The data from the packet that raised the event, or null if that packet has already been read from the socket.</returns>
            <remarks>
            For byte stream protocols (eg TCP) this will return the data that has been received, which may not include all
            the data that the peer has sent.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.PacketChangedEventArgsExtensions.GetPacket(Demo3D.Net.PacketChangedEventArgs)">
            <summary>
            Gets the packet received from the network that caused this event to be raised.
            Throws an exception if the packet has already been read from the socket.
            </summary>
            <param name="args">The packet event args.</param>
            <returns>The packet that raised the event.</returns>
            <remarks>
            The caller must Dispose the packet.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.PacketChangedEventArgsExtensions.GetData(Demo3D.Net.PacketChangedEventArgs)">
            <summary>
            Gets the packet received from the network that caused this event to be raised.
            Throws an exception if the packet has already been read from the socket.
            </summary>
            <param name="args">The packet event args.</param>
            <returns>The data from the packet that raised the event.</returns>
            <remarks>
            For byte stream protocols (eg TCP) this will return the data that has been received, which may not include all
            the data that the peer has sent.
            </remarks>
        </member>
        <member name="T:Demo3D.Net.IPacketIOService">
            <summary>
            Protocol packet and stream IO service.
            IPacketIOService <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> events will pass <see cref="T:Demo3D.Net.PacketChangedEventArgs"/>.
            </summary>
            <remarks>
            <para>
            Protocols can implement <see cref="T:Demo3D.Net.IByteStreamService"/> or <see cref="T:Demo3D.Net.IMessageStreamService"/> instead of this service.
            <see cref="T:Demo3D.Net.IByteStreamService"/> and <see cref="T:Demo3D.Net.IMessageStreamService"/> are much simpler to implement, and this service
            will be offered on any protocol that supports either one of them.
            </para>
            <para>
            In contract to the simpler services, <see cref="T:Demo3D.Net.IPacketIOService"/> offers Read and Write methods that return
            <see cref="T:Demo3D.IO.IPacketIO"/>, and is specifically designed to support stacked protocols (eg TCP -> TPKT -> COTP -> S7P,
            or TCP -> EIP -> CPF -> CIP).  It also offers a common interface so that higher level protocols can run regardless
            of the low-level data transport (eg the Modbus protocol can work aginst this common API and then operate over either
            TCP or UDP).  Also it offers a common interface so that protocols such as Windows pipes can present a single API
            that works whether the pipe is operating in byte or message mode.
            </para>
            <para>
            Reading: <see cref="T:Demo3D.IO.IPacketReader"/> provides a deserialization API similar to <see cref="T:System.IO.BinaryReader"/>.
            It also supports multiple threads reading from the low level protocol data stream in parallel.  The PacketReader
            locks the lower level data stream while the caller reads data in (usually a small header eg TPKT) followed by the
            data payload, and then unlocks.
            </para>
            <para>
            Multi-threaded reading is rare but useful, for example where there's a thread pool reading packets and servicing
            them in parallel, or notifying them upwards in parallel.
            </para>
            <para>
            Writing: <see cref="T:Demo3D.IO.IPacketWriter"/> provides a serialization API similar to <see cref="T:System.IO.BinaryWriter"/>.
            It's specifically optimised for stacked protocols where the lower level protocol creates a buffer with a header
            and the layered protocols then write directly into the data payload part of the buffer, minimising data copying.
            </para>
            <para>
            It also provides support for packets divided into sections, such as S7P where there are multiple headers followed
            by multiple corresponding data sections.
            </para>
            <para>
            And, it allows packets to be replayed.  The packet is constructed once and retained.  The caller can modify the
            packet data payload and call Flush again.  Lower level protocols get notified that the packet is being retransmitted
            and can recompute header information (data lengths, checksums, transaction id's, etc).
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.Net.IPacketIOService.PduSize">
            <summary>
            Gets the PDU size (or -1 for byte streams).
            </summary>
            <remarks>
            This value may change since it may be negotiated with the peer (eg COTP).  Negotiation only happens
            on connection so it's guaranteed not to change after the connection has been established.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.IPacketIOService.ReadAsync(System.Boolean)">
            <summary>
            Gets a data buffer for reading.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>A <see cref="T:Demo3D.IO.IPacketReader"/> that contains the data read.</returns>
        </member>
        <member name="M:Demo3D.Net.IPacketIOService.Write">
            <summary>
            Gets a data buffer for writing.
            </summary>
            <returns>A <see cref="T:Demo3D.IO.IPacketWriter"/> that will write the data.</returns>
        </member>
        <member name="T:Demo3D.Net.PacketIOService">
            <summary>
            Extensions for the IPacketIOService.
            </summary>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.ReadAsync(Demo3D.Net.IPacketIOService)">
            <summary>
            Gets a data buffer for reading.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <returns>A <see cref="T:Demo3D.IO.IPacketReader"/> that contains the data read.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Read(Demo3D.Net.IPacketIOService)">
            <summary>
            Gets a data buffer for reading.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <returns>A <see cref="T:Demo3D.IO.IPacketReader"/> that contains the data read.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.ReadAsync(Demo3D.Net.IPacketIOService,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Gets a data buffer for reading.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="endian">The endian format of the data being read (or null if not known).</param>
            <param name="textEncoding">The text encoding format of any strings in the data being read (or null if not known).</param>
            <returns>A PacketReader that contains the data read.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Read(Demo3D.Net.IPacketIOService,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Gets a data buffer for reading.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="endian">The endian format of the data being read (or null if not known).</param>
            <param name="textEncoding">The text encoding format of any strings in the data being read (or null if not known).</param>
            <returns>A PacketReader that contains the data read.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.ReadAsync(Demo3D.Net.IPacketIOService,System.Int32)">
            <summary>
            Reads data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="length">The number of bytes to read, or -1 to read all available data.</param>
            <returns>A buffer of data.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Read(Demo3D.Net.IPacketIOService,System.Int32)">
            <summary>
            Reads data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="length">The number of bytes to read, or -1 to read all available data.</param>
            <returns>A buffer of data.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Write(Demo3D.Net.IPacketIOService,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Gets a data buffer for writing.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="endian">The endian format of the data being written (or null if not known).</param>
            <param name="textEncoding">The text encoding format of any strings in the data being written (or null if not known).</param>
            <returns>A PacketWriter that will write the data.</returns>
            <remarks>
            This method does not write any data to the socket.  It returns a PacketWriter that can be used to compose a packet.
            The packet is only written to the socket when PacketWriter.Flush() is called.  The position of the packet in the
            message stream is determined by when PacketWriter.Flush() is called, and not by when this method is called.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.WriteAsync(Demo3D.Net.IPacketIOService,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="buffer">The data to write.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Write(Demo3D.Net.IPacketIOService,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="buffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.WriteAsync(Demo3D.Net.IPacketIOService,System.Byte[])">
            <summary>
            Writes data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="buffer">The data to write.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Write(Demo3D.Net.IPacketIOService,System.Byte[])">
            <summary>
            Writes data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="buffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.WriteAsync(Demo3D.Net.IPacketIOService,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="buffer">The data to write.</param>
            <param name="offset">The offset into <paramref name="buffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Write(Demo3D.Net.IPacketIOService,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="buffer">The data to write.</param>
            <param name="offset">The offset into <paramref name="buffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Reply(Demo3D.Net.IPacketIOService,Demo3D.IO.IPacketIO)">
            <summary>
            Gets a data buffer for writing, in reply to a given request.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="request">The request for which this is a response.</param>
            <returns>A <see cref="T:Demo3D.IO.IPacketWriter"/> that will write the data.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.ReplyAsync(Demo3D.Net.IPacketIOService,Demo3D.IO.IPacketIO,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes data, in reply to a given request.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="request">The request for which this is a response.</param>
            <param name="buffer">The data to write.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Reply(Demo3D.Net.IPacketIOService,Demo3D.IO.IPacketIO,System.ArraySegment{System.Byte}@)">
            <summary>
            Writes data, in reply to a given request.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="request">The request for which this is a response.</param>
            <param name="buffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.ReplyAsync(Demo3D.Net.IPacketIOService,Demo3D.IO.IPacketIO,System.Byte[])">
            <summary>
            Writes data, in reply to a given request.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="request">The request for which this is a response.</param>
            <param name="buffer">The data to write.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Reply(Demo3D.Net.IPacketIOService,Demo3D.IO.IPacketIO,System.Byte[])">
            <summary>
            Writes data, in reply to a given request.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="request">The request for which this is a response.</param>
            <param name="buffer">The data to write.</param>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.ReplyAsync(Demo3D.Net.IPacketIOService,Demo3D.IO.IPacketIO,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data, in reply to a given request.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="request">The request for which this is a response.</param>
            <param name="buffer">The data to write.</param>
            <param name="offset">The offset into <paramref name="buffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.PacketIOService.Reply(Demo3D.Net.IPacketIOService,Demo3D.IO.IPacketIO,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data, in reply to a given request.
            </summary>
            <param name="service">The IPacketIOService.</param>
            <param name="request">The request for which this is a response.</param>
            <param name="buffer">The data to write.</param>
            <param name="offset">The offset into <paramref name="buffer"/> to write the data.</param>
            <param name="length">The number of bytes to write.</param>
        </member>
        <member name="T:Demo3D.Net.IProtocolTimeoutService">
            <summary>
            Control over the underlying protocol timeouts.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IProtocolTimeoutService.MinReconnectDelay">
            <summary>
            Minimum time (ms) to wait before reconnecting to the same address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IProtocolTimeoutService.ReceiveTimeout">
            <summary>
            How long to wait for data before throwing an error.
            </summary>
        </member>
        <member name="T:Demo3D.Net.IPRoutingInfo">
            <summary>
            IP protocol specific routing information.
            </summary>
        </member>
        <member name="P:Demo3D.Net.IPRoutingInfo.LocalEndPoint">
            <summary>
            The local endpoint (or null).
            </summary>
        </member>
        <member name="P:Demo3D.Net.IPRoutingInfo.RemoteEndPoint">
            <summary>
            The remote endpoint (or null).
            </summary>
        </member>
        <member name="M:Demo3D.Net.IPRoutingInfo.#ctor(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>
            Constructs a new IPRoutingInfo.
            </summary>
            <param name="localEndPoint">The local endpoint.</param>
            <param name="removeEndPoint">The remote endpoint.</param>
        </member>
        <member name="M:Demo3D.Net.IPRoutingInfo.GetIPRoutingInfo(Demo3D.IO.IPacketIO)">
            <summary>
            Get the IPRoutingInfo from a packet.
            </summary>
            <param name="packet">The received packet.</param>
            <returns>The packet IPRoutingInfo.</returns>
        </member>
        <member name="P:Demo3D.Net.IPRoutingInfo.String">
            <summary>
            A printable string description.
            </summary>
        </member>
        <member name="T:Demo3D.Net.MessageEventArgs`1">
            <summary>
            Generic arguments to the <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> event.
            Contains information about the message received that caused the event to be raised.
            </summary>
            <typeparam name="MessageType">The message type.</typeparam>
        </member>
        <member name="M:Demo3D.Net.MessageEventArgs`1.#ctor(System.Func{`0},System.Func{`0})">
            <summary>
            Creates MessageEventArgs.
            </summary>
            <param name="peek">A function for peeking at the message.</param>
            <param name="consume">A function for consuming the message, ensuring it's returned only once.</param>
            <remarks>
            <para>
            The peek function will be used to inspect a message, or pull (peek) more data from a stream into a message in
            order to inspect it, but it should not consume the message or consume data from the underlying stream (move
            stream pointers forward).
            </para>
            <para>
            The consume function should consume the message from the event and consume any header data from the underlying stream.
            The message will be Disposed when all the callbacks raised on the DataChanged event return.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Net.MessageEventArgs`1.TryPeekPacket">
            <summary>
            Gets the message received from the network that caused this event to be raised.
            Returns null if the message has already been read from the socket.
            </summary>
            <returns>The packet that raised the event, or null if that message has already been read from the socket.</returns>
        </member>
        <member name="M:Demo3D.Net.MessageEventArgs`1.TryGetPacket">
            <summary>
            Gets the message received from the network that caused this event to be raised.
            Returns null if the message has already been read from the socket.
            </summary>
            <returns>The message that raised the event, or null if that message has already been read from the socket.</returns>
            <remarks>
            This method should consume the message from the event and consume any header data from the underlying stream.
            The message will be Disposed when all the callbacks raised on the DataChanged event return.
            </remarks>
        </member>
        <member name="T:Demo3D.Net.NotifyDataChanged">
            <summary>
            Provides INotifyDataChanged extensions.
            </summary>
        </member>
        <member name="T:Demo3D.Net.NotifyDataChanged.EventQueue">
            <summary>
            A source of data changed events.  Returned from <see cref="M:Demo3D.Net.NotifyDataChanged.GetEventQueue(Demo3D.Net.INotifyDataChanged)"/>,
            this class will collect any <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> events and return them via a call
            to WhenDataChangedAsync().
            </summary>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.ReadEventsAsync(System.Boolean,System.Int32)">
            <summary>
            Reads all the events accumulated since the last call.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="timeoutMs">Timeout in milliseconds (or -1).</param>
            <returns>A list of <c>NotifyDataChangedEventArgs</c> acculumated since the last call.</returns>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.ReadOneEventAsync(System.Boolean,System.Int32)">
            <summary>
            Reads one event from the queue.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="timeoutMs">Timeout in milliseconds (or -1).</param>
            <returns>A single <c>NotifyDataChangedEventArgs</c> received since the last call.</returns>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.ReadOneEvent(System.Int32)">
            <summary>
            Reads one event from the queue.
            </summary>
            <param name="timeoutMs">Timeout in milliseconds (or -1).</param>
            <returns>A single <c>NotifyDataChangedEventArgs</c> received since the last call.</returns>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.PeekOneEventAsync(System.Boolean,System.Int32)">
            <summary>
            Reads one event without removing it from the queue.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="timeoutMs">Timeout in milliseconds (or -1).</param>
            <returns>A single <c>NotifyDataChangedEventArgs</c> received since the last call.</returns>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.PeekOneEvent(System.Int32)">
            <summary>
            Reads one event without removing it from the queue.
            </summary>
            <param name="timeoutMs">Timeout in milliseconds (or -1).</param>
            <returns>A single <c>NotifyDataChangedEventArgs</c> received since the last call.</returns>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.AddEvent(Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Adds an event to be published.
            </summary>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.ContainsEvent(Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Checks for an event on the publish list.
            </summary>
            <param name="args">The event to find.</param>
            <returns>True if the event remains on the queue.</returns>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.RemoveEvent(Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Removes an event from the publish list.
            </summary>
            <param name="args">The event to remove.</param>
            <returns>True if the event was consumed.</returns>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.EventQueue.Dispose">
            <summary>
            Releases system resources.
            </summary>
            <remarks>
            You must dispose in order to unsubscribe from events.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.GetEventQueue(Demo3D.Net.INotifyDataChanged)">
            <summary>
            Subscribes to data changed events and returns a <see cref="T:Demo3D.Net.NotifyDataChanged.EventQueue"/>.
            </summary>
            <param name="notify">The INotifyDataChanged interface.</param>
            <returns>A <see cref="T:Demo3D.Net.NotifyDataChanged.EventQueue"/> object that will store and forward data changed events.</returns>
            <remarks>
            <para>
            Given an INotifyDataChanged interface, this will return a <see cref="T:Demo3D.Net.NotifyDataChanged.EventQueue"/> that has subscribed to the
            INotifyDataChanged.DataChanged event.  The <see cref="T:Demo3D.Net.NotifyDataChanged.EventQueue"/> collects data changed events and delivers them
            to the caller on request.
            </para>
            <para>
            This method facilitates code that can use a construct, such as a while loop, to wait for and respond
            to data changes.
            </para>
            <para>
            For message streams (such as IPacketIOService), it's more efficient simply to loop calling IPacketIOService.ReadAsync().
            GetEventQueue is mainly aimed at services that implement INotifyDataChanged but have no blocking Read(Async)
            method (or similar).
            </para>
            </remarks>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="GetEventQueue" />
            </example>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.HandleDataChangedEvent(Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.NotifyDataChangedEventArgs,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            A DataChanged event handler that captures exceptions and closes the socket if any occur.
            </summary>
            <param name="socket">The protocol socket that raised the event.</param>
            <param name="service">The service that raised the event.</param>
            <param name="args">Information about the event.</param>
            <param name="dataChangedHandler">The underlying data changed event handler being wrapped by this method.</param>
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.GetNotifyDataChangedEventHandler(Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Wraps a DataChanged event handler into a new handler that re-fires the event in the required synchronization context.
            </summary>
            <param name="dataChangedHandler">The underlying data changed event handler being wrapped by this method.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>A new DataChanged handler.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Net.NotifyDataChanged.Helper">
            <summary>
            A helper for managing CallbackContext for INotifyDataChanged, and for Starting and Stopping services
            depending on whether the event is subscribed.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.Helper.#ctor">
            <summary>
            Construct a new NotifyDataChanged.Helper.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.Helper.#ctor(Demo3D.Net.INotifyDataChanged,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Construct a new NotifyDataChanged.Helper.
            </summary>
            <param name="underlyingNotifier">The underlying object that produces DataChanged events.</param>
            <param name="handler">
            The handler to call when a DataChanged event occurs on the underlying notifier.
            The handler will filter those events and then call our NotifyDataChanged method when events need to be passed forward.
            </param>
            <exclude />
        </member>
        <member name="E:Demo3D.Net.NotifyDataChanged.Helper.FirstSubscribed">
            <summary>
            Occurs when data is subscribed for the first time.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Net.NotifyDataChanged.Helper.LastUnsubscribed">
            <summary>
            Occurs when data is unsubscribed for the last time.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.NotifyDataChanged.Helper.CanSubscribe">
            <summary>
            Returns true if data can be subscribed to.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.NotifyDataChanged.Helper.DataSubscribed">
            <summary>
            True if handlers are subscribed to this event;
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.Helper.NotifyDataChanged(Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.NotifyDataChangedEventArgs)">
            <summary>
            Raises a <see cref="E:Demo3D.Net.NotifyDataChanged.Helper.DataChanged"/> event.
            </summary>
            <param name="socket">The protocol socket that raised the event.</param>
            <param name="service">The service that raised the event.</param>
            <param name="e">Information about the event.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.Helper.AddDataChanged(Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>True if this is the first subscriber.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.Helper.RemoveDataChanged(Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Remove a handler from the DataChanged event.
            </summary>
            <param name="handler">Handler for DataChanged events to remove.</param>
            <returns>True if this is the last subscriber.</returns>
            <exclude />
        </member>
        <member name="E:Demo3D.Net.NotifyDataChanged.Helper.DataChanged">
            <summary>
            Occurs when data has arrived or changed.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.NotifyDataChanged.Helper.Clear">
            <summary>
            Clears all the currently subscribed handlers.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Net.PacketReaderDataStreamManager">
            <summary>
            A helper class used by the IPacketIOService to implement INotifyDataChanged using Read(Async).
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.PacketReaderDataStreamManager.NewNotifierArgs(System.Func{Demo3D.IO.IPacketReader},System.Func{Demo3D.IO.IPacketReader})">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.PacketReaderDataStreamManager.#ctor(Demo3D.Net.ProtocolInstance,Demo3D.Net.IPacketIOService)">
            <summary>
            Constructs a Read(Async) helper class for packet IO.  Raises DataChanged events when packets arrive.
            </summary>
            <param name="instance">The protocol instance to monitor.</param>
            <param name="packetIO">The PacketIO service to monitor (or null if this is the service object).</param>
        </member>
        <member name="T:Demo3D.Net.PacketReaderDataManager">
            <summary>
            A helper class used by the IPacketIOService to implement INotifyDataChanged using Read(Async).
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.PacketReaderDataManager.UnderlyingReadAsync(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.PacketReaderDataManager.#ctor(Demo3D.Net.ProtocolInstance,Demo3D.Net.IPacketIOService,System.Func{System.Boolean,System.Threading.Tasks.Task{Demo3D.IO.IPacketReader}})">
            <summary>
            Constructs a Read(Async) helper class for packet IO.  Raises DataChanged events when packets arrive.
            </summary>
            <param name="instance">The protocol instance to monitor.</param>
            <param name="packetIO">The PacketIO service to monitor.</param>
            <param name="readAsync">The service underlying 'Task ReadAsync(bool sync)' method.</param>
        </member>
        <member name="T:Demo3D.Net.PacketReaderEventsManager">
            <summary>
            A helper class used by IPacketIOService to implement Read(Async) using INotifyDataChanged events.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.PacketReaderEventsManager.NotifyDataChanged(Demo3D.Net.ProtocolSocket,System.Object,Demo3D.IO.IPacketReader)">
            <summary>
            Raise a DataChanged event and queues an event to be read.
            </summary>
            <param name="socket">The protocol socket that raised the event.</param>
            <param name="service">The service that raised the event.</param>
            <param name="packet">The packet received.</param>
        </member>
        <member name="T:Demo3D.Net.ProtocolAddressEditorAttribute">
            <summary>
            An attribute on a Protocol that defines an editor for creating addresses for that protocol.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditorAttribute.Scheme">
            <summary>
            The default protocol address scheme to select for this protocol (or null to use Protocol.Name).
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditorAttribute.DisplayName">
            <summary>
            The protocol name to use (or null to use Protocol.Name).
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditorAttribute.Editor">
            <summary>
            A protocol address editor.  (Eg one that derives from <see cref="T:Demo3D.Net.ProtocolAddressPropertyBagEditor"/>).
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditorAttribute.ShowInAddServer">
            <summary>
            Show this protocol in the AddServer wizard.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditorAttribute.TagServerName">
            <summary>
            The default name given by the AddServer wizard to a TagServer created with this protocol (or null
            to use a default TagServer name).  Only valid if <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.ShowInAddServer"/> is true.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditorAttribute.Server">
            <summary>
            The name of the PLC / Server that this protocol works with.
            Return "*" for it to be marked as a protocol for accessing any kind of server (eg OPC).
            Return null for it to be marked as working with no particular PLC / server.
            Only valid if <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.ShowInAddServer"/> is true.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditorAttribute.Hardware">
            <summary>
            The name of the Hardware or Bus Gateway that this protocol works with (or null).
            Only valid if <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.ShowInAddServer"/> is true.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditorAttribute.Get(System.Type)">
            <summary>
            Returns the protocol address editor attribute for a protocol, or null.
            </summary>
            <param name="protocol">The protocol to inspect.</param>
            <returns>The protocol address selector attribute, or null.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditorAttribute.Get(System.Type,System.String)">
            <summary>
            Returns the protocol address editor attribute for a protocol, or null.
            </summary>
            <param name="protocol">The protocol to inspect.</param>
            <param name="scheme">The protocol scheme.</param>
            <returns>The protocol address selector attribute, or null.</returns>
        </member>
        <member name="T:Demo3D.Net.ProtocolAddressPropertyBagEditor">
            <summary>
            A property bag base class for configuring a ProtocolAddress.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressPropertyBagEditor.GetAddress">
            <summary>
            Returns a ProtocolAddress that represents the configuration defined by this object.
            </summary>
            <returns>The protocol address according to the current setting of the editor properties.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressPropertyBagEditor.SetAddress(Demo3D.Net.ProtocolAddress)">
            <summary>
            Sets this configuration object properties from the ProtocolAddress given.
            </summary>
            <param name="address">The current address.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressPropertyBagEditor.NextProperty">
            <summary>
            Returns the next property that needs to be edited to complete the address.
            </summary>
            <returns>The name of the property, or null.</returns>
        </member>
        <member name="E:Demo3D.Net.ProtocolAddressPropertyBagEditor.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressPropertyBagEditor.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressPropertyBagEditor.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="T:Demo3D.Net.ProtocolServer">
            <summary>
            Protocol server.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync``1(System.Boolean,Demo3D.Net.OpenParams,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling <paramref name="dataChangedHandler"/> with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the client connection.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync``1(System.Boolean,Demo3D.Net.ProtocolAddress,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling <paramref name="dataChangedHandler"/> with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address of server.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.Open``1(Demo3D.Net.OpenParams,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling <paramref name="dataChangedHandler"/> with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="parameters">Parameters to open the client connection.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.Open``1(Demo3D.Net.ProtocolAddress,Demo3D.Net.NotifyDataChangedEventHandler,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling <paramref name="dataChangedHandler"/> with data from each connection as it arrives.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="address">Address of server.</param>
            <param name="dataChangedHandler">Data received handler.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="dataChangedHandler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync``1(System.Boolean,Demo3D.Net.OpenParams,Demo3D.Net.ProtocolProperties,Demo3D.Net.ServiceClientAsync{``0},Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server with defined properties and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the server socket.</param>
            <param name="properties">Server properties.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.AcceptConnectionAsync(System.Boolean,Demo3D.Net.ProtocolHead,Demo3D.Net.IProtocolServerService,Demo3D.Net.ProtocolSocket)">
            <summary>
            Actually recurse down the protocol stack accepting a new connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="head">The protocol head to use for the new connection.</param>
            <param name="service">The IProtocolServerService accepting the connection.</param>
            <param name="socket">The server socket protocol instance.</param>
            <returns>A new protocol instance for the top-level protocol.</returns>
        </member>
        <member name="T:Demo3D.Net.ProtocolServer.NewClientHead">
            <summary>
            How to create a new ClientHead.  May return ClientHead or ServerClient{T} if T is known.
            </summary>
            <param name="address">The user address used to create the server socket.</param>
            <param name="parameters">
            Server parameters used to open the server socket.
            This is a parameter of the delegate so that we know we're being passed the cloned ServerParams and not
            the ones passed in to Open by the user.
            </param>
            <param name="registry">The server socket connection registry.</param>
            <returns>A new ClientHead.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.AcceptAsync(System.Boolean,Demo3D.Net.IProtocolServerService,Demo3D.Net.ServerSocket,Demo3D.Net.ProtocolServer.NewClientHead)">
            <summary>
            Does the job of accepting a connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="service">The IProtocolServerService.</param>
            <param name="server">The server socket.</param>
            <param name="newClientHead">How to create a new ClientHead.</param>
            <returns>A new ClientHead for the new connection.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.AcceptAsync(System.Boolean,Demo3D.Net.IProtocolServerService,Demo3D.Net.ServerSocket)">
            <summary>
            Accepts a connection from a client.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="service">The IProtocolServerService.</param>
            <param name="server">The server socket.</param>
            <returns>A new connection from a client received on the server.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.ServiceAsync(Demo3D.Net.ProtocolSocket,Demo3D.Net.ServiceConnectionAsync)">
            <summary>
            Runs the service routine, and ensures no exceptions escape.
            </summary>
            <param name="socket">The connection to service.</param>
            <param name="serviceConnection">The service delegate.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.GetServiceConnectionTask(Demo3D.Net.ServiceConnectionAsync,Demo3D.Net.CallbackContext)">
            <summary>
            Converts a ServiceConnectionAsync delegate into a new delegate which fires off a new Task that we can forget.
            The task is run either in the callers synchronization context or in the default context (the global thread pool).
            Either way, by virtue of using ServiceAsync (above) we can fire and forget because ServiceAsync ensures no
            exceptions leak out.
            </summary>
            <param name="serviceConnection">The users service delegate.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <returns>A new service delegate.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.AcceptConnectionsBackgroundAsync(Demo3D.Net.ServerSocket,Demo3D.Net.ServiceConnectionAsync,Demo3D.Net.ProtocolServer.NewClientHead)">
            <summary>
            Server main loop accepting connections.
            </summary>
            <param name="server">The server socket.</param>
            <param name="serviceConnection">The callback to call with new connection sockets.</param>
            <param name="newClientHead">How to create a new ClientHead.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync(System.Boolean,Demo3D.Net.OpenParams,Demo3D.Net.ServiceConnectionAsync,Demo3D.Net.ProtocolServer.NewClientHead,Demo3D.Net.CallbackContext,Demo3D.Net.ProtocolProperties)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the server socket.</param>
            <param name="serviceConnection">Connection service delegate already pre-wrapped with the correct caller context (or null).</param>
            <param name="newClientHead">How to create a new ClientHead.</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <param name="properties">Defined properties, or null.</param>
            <returns>The server socket.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync(System.Boolean,Demo3D.Net.OpenParams,Demo3D.Net.ServiceConnectionAsync,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the server socket.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync(System.Boolean,Demo3D.Net.ProtocolAddress,System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.ServiceConnectionAsync,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address of server.</param>
            <param name="services">Required services.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync``1(System.Boolean,Demo3D.Net.OpenParams,Demo3D.Net.ServiceClientAsync{``0},Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the server socket.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.OpenAsync``1(System.Boolean,Demo3D.Net.ProtocolAddress,Demo3D.Net.ServiceClientAsync{``0},Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address of server.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.Open(Demo3D.Net.OpenParams,Demo3D.Net.ServiceConnectionAsync,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="parameters">Parameters to open the server socket.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.Open(Demo3D.Net.ProtocolAddress,System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.ServiceConnectionAsync,Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <param name="address">Address of server.</param>
            <param name="services">Required services.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.Open``1(Demo3D.Net.OpenParams,Demo3D.Net.ServiceClientAsync{``0},Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="parameters">Parameters to open the server socket.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolServer.Open``1(Demo3D.Net.ProtocolAddress,Demo3D.Net.ServiceClientAsync{``0},Demo3D.Net.CallbackContext)">
            <summary>
            Creates a server and starts accepting connections, calling 'serviceConnection' with each connection established.
            This method returns after the server has been established, leaving the accepting and servicing of connections to a background thread.
            </summary>
            <typeparam name="T">Required services.</typeparam>
            <param name="address">Address of server.</param>
            <param name="serviceConnection">Connection service delegate (or null).</param>
            <param name="callbackContext">Defines the context in which <paramref name="serviceConnection"/> should be called.</param>
            <returns>The server socket.</returns>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="serviceConnection"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="T:Demo3D.Net.CallbackContext">
            <summary>
            Defines the context in which a callback should be called.
            </summary>
        </member>
        <member name="F:Demo3D.Net.CallbackContext.CallerContext">
            <summary>
            The callback should be called in the same context as the caller providing/registering the callback.
            </summary>
        </member>
        <member name="F:Demo3D.Net.CallbackContext.Parallel">
            <summary>
            The callback should be called in parallel (if appropriate), usually in a separate thread.
            </summary>
        </member>
        <member name="F:Demo3D.Net.CallbackContext.Inline">
            <summary>
            The callback should be called in the context of the object raising the event.
            </summary>
        </member>
        <member name="T:Demo3D.Net.CallbackContextHelper">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper.Invoke">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper.AddHandler(System.Action,Demo3D.Net.CallbackContext)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper.RemoveHandler(System.Action)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper.Clear">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.CallbackContextHelper`1">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`1.Invoke(`0)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`1.AddHandler(System.Action{`0},Demo3D.Net.CallbackContext)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`1.RemoveHandler(System.Action{`0})">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`1.Clear">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.CallbackContextHelper`2">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`2.Invoke(`0,`1)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`2.AddHandler(System.Action{`0,`1},Demo3D.Net.CallbackContext)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`2.RemoveHandler(System.Action{`0,`1})">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.CallbackContextHelper`2.Clear">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Channel">
            <summary>
            A channel within a <see cref="T:Demo3D.Net.Protocol"/>.
            </summary>
            <remarks>
            A <see cref="T:Demo3D.Net.Protocol"/> can support more than one channel, each supporting a distinct set of services.
            </remarks>
        </member>
        <member name="P:Demo3D.Net.Channel.Name">
            <summary>
            Channel name.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Channel.#ctor(System.String,Demo3D.Net.ServiceProvider)">
            <summary>
            Creates a new Channel.
            </summary>
            <param name="name">The channel name.</param>
            <param name="channelServiceProvider">Services supported directly by this channel.</param>
        </member>
        <member name="M:Demo3D.Net.Channel.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new Channel.
            </summary>
            <param name="name">The channel name.</param>
            <param name="channelSupportedServices">List of services supported directly by this channel.</param>
        </member>
        <member name="M:Demo3D.Net.Channel.#ctor(System.String,System.Type)">
            <summary>
            Creates a new Channel.
            </summary>
            <param name="name">The channel name.</param>
            <param name="channelSupportedService">List of services supported directly by this channel.</param>
        </member>
        <member name="M:Demo3D.Net.Channel.RegisterService(Demo3D.Net.ServiceProvider)">
            <summary>
            Registers a service.
            </summary>
            <param name="service">The service provider to register.</param>
            <returns>False if the service was already registered.</returns>
            <remarks>
            The service will be available to ProtocolSocket.FindService().
            If this service is already supported by an existing implementation, then this takes
            precedence.  It hides the previous implementation until unregistered.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Channel.UnregisterService(Demo3D.Net.ServiceProvider)">
            <summary>
            Unregisters a service.
            </summary>
            <param name="service">The service provider to unregister.</param>
            <returns>False if the service provider was already unregistered.</returns>
        </member>
        <member name="P:Demo3D.Net.Channel.SupportedServices">
            <summary>
            Returns a list of supported service types.  These are the services that ProtocolSocket.FindService can return.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Channel.SupportsService(System.Type)">
            <summary>
            Returns whether a particular service is supported.
            </summary>
            <param name="service">The service to find.</param>
            <returns>True if the service is supported.</returns>
        </member>
        <member name="M:Demo3D.Net.Channel.FindServiceProvider(System.Type,Demo3D.Net.ServiceProvider)">
            <summary>
            Returns the service provider that supports a particular service.
            </summary>
            <param name="service">The service to find.</param>
            <param name="ignore">Ignore specified service provider.</param>
            <returns>The service provider for the given service.</returns>
        </member>
        <member name="P:Demo3D.Net.Channel.SupportedServiceProviders">
            <summary>
            Returns all the service providers used by this protocol.
            </summary>
            <returns>A list of service providers.</returns>
        </member>
        <member name="M:Demo3D.Net.Channel.Dispose">
            <summary>
            Releases all protocol resources.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Channel.ToString">
            <summary>
            Returns the name of the channel.
            </summary>
            <returns>The channel name.</returns>
        </member>
        <member name="T:Demo3D.Net.ChannelInstance">
            <summary>
            An instance of a channel.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ChannelInstance.#ctor(Demo3D.Net.ProtocolInstance,Demo3D.Net.Channel)">
            <summary>
            Creates a new channel.
            </summary>
            <param name="instance">Protocol instance associated with this channel.</param>
            <param name="channel">Channel of which this is an instance.</param>
        </member>
        <member name="P:Demo3D.Net.ChannelInstance.Name">
            <summary>
            Name of the channel.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ChannelInstance.FindService(System.Type,System.Boolean,Demo3D.Net.ServiceProvider)">
            <summary>
            Returns an object that implements a specific API, or null.
            For example, an IO API such as IPacketIOService.
            </summary>
            <param name="serviceType">The service to find.</param>
            <param name="dontCreate">Don't create the service if it doesn't already exist.</param>
            <param name="ignore">Ignoring specified service provider.</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ChannelInstance.FindService``1(System.Boolean)">
            <summary>
            Returns an object that implements a specific API, or null.
            For example, an IO API such as IPacketIOService.
            </summary>
            <typeparam name="T">The service to find.</typeparam>
            <param name="dontCreate">Don't create the service if it doesn't already exist.</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ChannelInstance.GetService``1">
            <summary>
            Returns an object that implements a specific API, or throws an exception.
            For example, an IO API such as IPacketIOService.
            </summary>
            <typeparam name="T">The service to find.</typeparam>
            <returns>The service implementation.</returns>
        </member>
        <member name="T:Demo3D.Net.Connection">
            <summary>
            A client connection to a peer.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Connection.ConstructConnectionAsync(System.Boolean,Demo3D.Net.OpenParams)">
            <summary>
            Constructs a connection.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">The connection parameters to use.</param>
            <returns>Nothing.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Connection.#ctor">
            <summary>
            The default constructor.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Connection.GetHead">
            <summary>
            Returns the protocol head.
            </summary>
            <returns>The protocol head.</returns>
        </member>
        <member name="E:Demo3D.Net.Connection.OnLinked">
            <summary>
            Occurs when a link is made to this socket.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Connection.OnUnlinkRequest">
            <summary>
            Occurs when an object is requested to unlink from this socket.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Connection.OnUnlinked">
            <summary>
            Occurs when a link is removed from this socket.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Connection.GetLinks">
            <summary>
            Return list of references.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Connection.Link(System.Object)">
            <summary>
            Adds a 'link' reference.
            </summary>
            <param name="owner">The owner of the reference.</param>
            <remarks>
            Connections are designed not to require IDispose.  You can Close your connection and let your
            reference float away, and then on the next Reset (which calls
            <see cref="M:Demo3D.Net.ConnectionRegistry.Close(Demo3D.Net.Connection.IRegistry,Demo3D.Net.ConnectionRegistry.CloseFlags,Demo3D.Net.Protocol)"/>)
            any orphaned Connections are cleared out of the cache.
            
            Use Link and Unlink if you want to manage the lifetime of your Connection.  A Connection with
            Links won't be closed on Reset.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Connection.UnlinkRequest">
            <summary>
            Raises the <see cref="E:Demo3D.Net.Connection.OnUnlinkRequest"/> event.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Connection.Unlink(System.Object)">
            <summary>
            Remove a 'link' reference count.
            </summary>
            <param name="owner">The owner of the reference.</param>
            <returns>True if it's the last link.</returns>
        </member>
        <member name="P:Demo3D.Net.Connection.Running">
            <summary>
            Returns whether the socket is still running.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Connection.ShutdownMessage">
            <summary>
            Returns information logged when the socket was last shutdown,
            or null if the socket is open or was closed normally.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Connection.LogShutdownMessages">
            <summary>
            Controls whether shutdown messages should be logged to the message log.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Connection.OpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Opens the socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="flags">Connection flags.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.OpenAsync(System.Boolean,Demo3D.Net.OpenFlags)">
            <summary>
            Opens the socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="openFlags">Additional flags.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.Open(Demo3D.Net.OpenFlags)">
            <summary>
            Opens (or reopens) the socket.
            </summary>
            <param name="openFlags">Additional flags.</param>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolProperties" />
            </example>
        </member>
        <member name="M:Demo3D.Net.Connection.OpenAsync(System.Boolean,Demo3D.Net.OpenParams)">
            <summary>
            Opens a socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="parameters">Parameters to open the socket.</param>
            <returns>The new socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.OpenAsync(System.Boolean,Demo3D.Net.ProtocolAddress,System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.Flags)">
            <summary>
            Opens a socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address to open.</param>
            <param name="services">Required services.</param>
            <param name="flags">Connection flags.</param>
            <returns>The socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.OpenAsync(System.Boolean,Demo3D.Net.ProtocolAddress,System.Type,Demo3D.Net.Flags)">
            <summary>
            Opens a socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address to open.</param>
            <param name="services">Required services.</param>
            <param name="flags">Connection flags.</param>
            <returns>The socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.OpenAsync(System.Boolean,Demo3D.Net.ProtocolAddress,Demo3D.Net.Flags)">
            <summary>
            Opens a socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Address to open.</param>
            <param name="flags">Connection flags.</param>
            <returns>The socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.Open(Demo3D.Net.OpenParams)">
            <summary>
            Opens a socket.
            </summary>
            <param name="parameters">Parameters to open the socket.</param>
            <returns>The socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.Open(Demo3D.Net.ProtocolAddress,System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.Flags)">
            <summary>
            Opens a socket.
            </summary>
            <param name="address">Address to open.</param>
            <param name="services">Required services.</param>
            <param name="flags">Connection flags.</param>
            <returns>The socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.Open(Demo3D.Net.ProtocolAddress,System.Type,Demo3D.Net.Flags)">
            <summary>
            Opens a socket.
            </summary>
            <param name="address">Address to open.</param>
            <param name="services">Required services.</param>
            <param name="flags">Connection flags.</param>
            <returns>The socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.Open(Demo3D.Net.ProtocolAddress,Demo3D.Net.Flags)">
            <summary>
            Opens a socket.
            </summary>
            <param name="address">Address to open.</param>
            <param name="flags">Connection flags.</param>
            <returns>The socket.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Connection.IRegistry">
            <summary>
            A registry of connections.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Connection.IRegistry.OnConnectionAdded">
            <summary>
            Occurs when a connection is added to the registry.
            </summary>
            <remarks>
            A connection is added to the registry when the connection protocol stack is built, which may be
            before it's connected to the peer.
            </remarks>
        </member>
        <member name="E:Demo3D.Net.Connection.IRegistry.OnConnectionRemoved">
            <summary>
            Occurs when a connection is removed from the registry.
            </summary>
            <remarks>
            A connection is removed from the registry when the registry is cleared/pruned.
            </remarks>
        </member>
        <member name="E:Demo3D.Net.Connection.IRegistry.OnConnectionStateChanged">
            <summary>
            Occurs when a connection state changes.
            </summary>
            <remarks>
            State changes occur when the connection opens/closes or is linked/unlinked.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Connection.IRegistry.Add(Demo3D.Net.ProtocolHead,System.Func{System.Collections.Generic.IReadOnlyList{Demo3D.Net.ProtocolHead},Demo3D.Net.ProtocolHead})">
            <summary>
            Adds a ProtocolHead to the repository for the address ProtocolHead.CononicalAddress.
            </summary>
            <param name="head">The ProtocolHead to add.</param>
            <param name="chooseHead">A function to decide whether to use a current head or add the new head.</param>
            <returns>The protocol head.</returns>
        </member>
        <member name="M:Demo3D.Net.Connection.IRegistry.Remove(Demo3D.Net.ProtocolHead)">
            <summary>
            Remove ProtocolHead from the repository.
            </summary>
            <param name="head">The protocol head to remove.</param>
            <returns>True if the protocol head was found and removed.</returns>
        </member>
        <member name="P:Demo3D.Net.Connection.IRegistry.All">
            <summary>
            Return a list of the ProtocolHeads (and the key addresses used) present in the repository.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Connection.ConnectionRegistry">
            <summary>
            Our implementation.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Connection.ConnectionRegistry.OnConnectionAdded">
            <summary>
            Occurs when a connection is added to the registry.
            </summary>
            <remarks>
            A connection is added to the registry when the connection protocol stack is built, which may be
            before it's connected to the peer.
            </remarks>
        </member>
        <member name="E:Demo3D.Net.Connection.ConnectionRegistry.OnConnectionRemoved">
            <summary>
            Occurs when a connection is removed from the registry.
            </summary>
            <remarks>
            A connection is removed from the registry when the registry is cleared/pruned.
            </remarks>
        </member>
        <member name="E:Demo3D.Net.Connection.ConnectionRegistry.OnConnectionStateChanged">
            <summary>
            Occurs when a connection state changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Connection.ConnectionRegistry.Demo3D#Net#Connection#IRegistry#Remove(Demo3D.Net.ProtocolHead)">
            <summary>
            Remove ProtocolHead from the repository.
            </summary>
            <param name="head">The protocol head to remove.</param>
            <returns>True if the protocol head was found and removed.</returns>
        </member>
        <member name="P:Demo3D.Net.Connection.ConnectionRegistry.Demo3D#Net#Connection#IRegistry#All">
            <summary>
            Return a list of the sockets (and the key addresses used) present in the repository.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Connection.Registry">
            <summary>
            A register of all open sockets.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ConnectionRegistry">
            <summary>
            Connection.IRegistry extensions.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Net.ConnectionRegistry.CloseFlags">
            <summary>
            Parameters to <see cref="M:Demo3D.Net.ConnectionRegistry.Close(Demo3D.Net.Connection.IRegistry,Demo3D.Net.ConnectionRegistry.CloseFlags,Demo3D.Net.Protocol)"/>.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Net.ConnectionRegistry.CloseFlags.Default">
            <summary>
            By default only non-persistent connections are closed, but any address that is completely closed is flushed
            from the repository.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ConnectionRegistry.CloseFlags.DontFlush">
            <summary>
            The registry maintains a record of open and closed connections.  It records closed connections because
            some services (such as address translation) work on closed connections, and so these connections need
            to persist.  Use this flag to prevent Close from flushing closed connections from the registry.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ConnectionRegistry.CloseFlags.CloseAll">
            <summary>
            Close all open connections, including persistent connections.
            See <see cref="M:Demo3D.Net.Connection.Link(System.Object)"/>.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ConnectionRegistry.CloseFlags.CloseClients">
            <summary>
            Close server connections (even if <see cref="F:Demo3D.Net.SocketFlags.NoCloseConnections"/> is set).
            </summary>
        </member>
        <member name="M:Demo3D.Net.ConnectionRegistry.Close(Demo3D.Net.Connection.IRegistry,Demo3D.Net.ConnectionRegistry.CloseFlags,Demo3D.Net.Protocol)">
            <summary>
            Close any open connections, and remove them from the registry.
            </summary>
            <param name="registry">The connection registry.</param>
            <param name="closeFlags">How to close/flush the repository.</param>
            <param name="protocol">Just close connections for a specific protocol.</param>
            <exclude />
        </member>
        <member name="T:Demo3D.Net.SocketFlags">
            <summary>
            Client and server socket flags, specific to the <see cref="T:Demo3D.Net.ProtocolHead"/>.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.Default">
            <exclude />
        </member>
        <member name="F:Demo3D.Net.SocketFlags.Persistent">
            <summary>
            Connection is persistent.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.Shared">
            <summary>
            Client or service only. Share connections to the peer.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.Private">
            <summary>
            Client only. This connection is private.  Overrides <see cref="F:Demo3D.Net.SocketFlags.Shared"/>
            and also marks the connection as private from the rest of Demo3D.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.Exclusive">
            <summary>
            Client only. There can be only one <see cref="T:Demo3D.Net.Connection"/> to the peer.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.NoCloseConnections">
            <summary>
            Server only. True to keep client connections open when the server is closed.
            See also <see cref="F:Demo3D.Net.ConnectionRegistry.CloseFlags.CloseClients"/>.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.NoLogConnections">
            <summary>
            Server only. True to supress logging connections.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.NoLogDisconnections">
            <summary>
            Server only. True to supress logging disconnections.
            </summary>
        </member>
        <member name="F:Demo3D.Net.SocketFlags.SocketFlags">
            <summary>
            All SocketFlags.
            </summary>
        </member>
        <member name="T:Demo3D.Net.OpenFlags">
            <summary>
            Flags specific to the <see cref="T:Demo3D.Net.Connection"/>.
            </summary>
        </member>
        <member name="F:Demo3D.Net.OpenFlags.Default">
            <exclude />
        </member>
        <member name="F:Demo3D.Net.OpenFlags.NoOpen">
            <summary>
            Don't establish connection.
            </summary>
        </member>
        <member name="F:Demo3D.Net.OpenFlags.NoLogShutdownMessages">
            <summary>
            Sets <see cref="P:Demo3D.Net.Connection.LogShutdownMessages"/> to false.
            </summary>
        </member>
        <member name="F:Demo3D.Net.OpenFlags.OpenFlags">
            <summary>
            All defined OpenFlags.
            </summary>
        </member>
        <member name="F:Demo3D.Net.OpenFlags.OnlyIfExclusive">
            <summary>
            Flags in this range will be cleared if the socket is not exclusive.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Flags">
            <summary>
            Connection flags.
            </summary>
        </member>
        <member name="F:Demo3D.Net.Flags.Value">
            <summary>
            All flags.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Flags.#ctor(System.Int32)">
            <summary>
            Constructs flags.
            </summary>
            <param name="flags">Flags.</param>
        </member>
        <member name="P:Demo3D.Net.Flags.SocketFlags">
            <summary>
            Client and server socket flags, specific to the <see cref="T:Demo3D.Net.ProtocolHead"/>.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Flags.OpenFlags">
            <summary>
            Flags specific to the <see cref="T:Demo3D.Net.Connection"/>.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Flags.OtherFlags">
            <summary>
            Other flags.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Flags.op_Implicit(Demo3D.Net.SocketFlags)~Demo3D.Net.Flags">
            <summary>
            Implicit cast.
            </summary>
            <param name="socketFlags">Client and server socket flags, used to control the building and caching of the connection.</param>
            <returns>New Flags.</returns>
        </member>
        <member name="M:Demo3D.Net.Flags.op_Implicit(Demo3D.Net.OpenFlags)~Demo3D.Net.Flags">
            <summary>
            Implicit cast.
            </summary>
            <param name="openFlags">Flags to control establishement of the connection.</param>
            <returns>New Flags.</returns>
        </member>
        <member name="M:Demo3D.Net.Flags.op_BitwiseOr(Demo3D.Net.Flags,Demo3D.Net.Flags)">
            <summary>
            Combine flags.
            </summary>
            <param name="a">A</param>
            <param name="b">B</param>
            <returns>Combined flags.</returns>
        </member>
        <member name="M:Demo3D.Net.Flags.op_BitwiseAnd(Demo3D.Net.Flags,Demo3D.Net.SocketFlags)">
            <summary>
            Combine flags.
            </summary>
            <param name="a">A</param>
            <param name="b">B</param>
            <returns>Combined flags.</returns>
        </member>
        <member name="M:Demo3D.Net.Flags.op_BitwiseAnd(Demo3D.Net.Flags,Demo3D.Net.OpenFlags)">
            <summary>
            Combine flags.
            </summary>
            <param name="a">A</param>
            <param name="b">B</param>
            <returns>Combined flags.</returns>
        </member>
        <member name="M:Demo3D.Net.Flags.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.FlagsExtensions">
            <summary>
            Extension methods for <see cref="T:Demo3D.Net.SocketFlags"/> and <see cref="T:Demo3D.Net.OpenFlags"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.Persistent(Demo3D.Net.SocketFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.SocketFlags.Persistent"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.SocketFlags.Persistent"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.Shared(Demo3D.Net.SocketFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.SocketFlags.Shared"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.SocketFlags.Shared"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.Private(Demo3D.Net.SocketFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.SocketFlags.Private"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.SocketFlags.Private"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.Exclusive(Demo3D.Net.SocketFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.SocketFlags.Exclusive"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.SocketFlags.Exclusive"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.SharingFlags(Demo3D.Net.SocketFlags)">
            <summary>
            Returns the set of sharing flags.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>The set of sharing flags.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.NoCloseConnections(Demo3D.Net.SocketFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.SocketFlags.NoCloseConnections"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.SocketFlags.NoCloseConnections"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.NoLogConnections(Demo3D.Net.SocketFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.SocketFlags.NoLogConnections"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.SocketFlags.NoLogConnections"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.NoLogDisconnections(Demo3D.Net.SocketFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.SocketFlags.NoLogDisconnections"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.SocketFlags.NoLogDisconnections"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.NoOpen(Demo3D.Net.OpenFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.OpenFlags.NoOpen"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.OpenFlags.NoOpen"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.Net.FlagsExtensions.NoLogShutdownMessages(Demo3D.Net.OpenFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.Net.OpenFlags.NoLogShutdownMessages"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.Net.OpenFlags.NoLogShutdownMessages"/> flag is set.</returns>
        </member>
        <member name="T:Demo3D.Net.OpenParams">
            <summary>
            Parameters for opening a socket (client or server).
            </summary>
        </member>
        <member name="P:Demo3D.Net.OpenParams.Address">
            <summary>
            Address to open.
            </summary>
        </member>
        <member name="P:Demo3D.Net.OpenParams.Flags">
            <summary>
            Connection flags.
            </summary>
        </member>
        <member name="M:Demo3D.Net.OpenParams.#ctor(Demo3D.Net.ProtocolAddress,System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.Flags)">
            <summary>
            Parameters for opening a socket.
            </summary>
            <param name="address">Address to open.</param>
            <param name="services">Required services (or null if no services are required).</param>
            <param name="flags">Connection flags.</param>
        </member>
        <member name="M:Demo3D.Net.OpenParams.#ctor(Demo3D.Net.ProtocolAddress,System.Type,Demo3D.Net.Flags)">
            <summary>
            Parameters for opening a socket.
            </summary>
            <param name="address">Address to open.</param>
            <param name="service">Required service.</param>
            <param name="flags">Connection flags.</param>
        </member>
        <member name="P:Demo3D.Net.OpenParams.Services">
            <summary>
            Required services.
            </summary>
        </member>
        <member name="M:Demo3D.Net.OpenParams.AddService(System.Type)">
            <summary>
            Ensure service is included in the parameters.
            </summary>
            <param name="service">The service to include.</param>
            <returns>New parameters including the service.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocol">
            <summary>
            Represents one protocol.
            </summary>
            <example>
            <para>
            The following example shows the most basic implementation of a Protocol.
            </para>
            <code lang="C#" source="Examples\Net\ExampleProtocol.cs" region="Example" />
            </example>
            <example>
            <para>
            Example showing a TCP client.
            </para>
            <code lang="C#" source="Examples\Net\TCP_Client.cs" region="Example" />
            </example>
            <example>
            <para>
            Example showing a TCP server.
            </para>
            <code lang="C#" source="Examples\Net\TCP_Server.cs" region="Example" />
            </example>
        </member>
        <member name="P:Demo3D.Net.Protocol.Name">
            <summary>
            The protocol name.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Demo3D.Net.Channel},Demo3D.Net.Protocol.RequiredService)">
            <summary>
            Creates a new protocol.
            </summary>
            <param name="name">Name of the protocol (need not be unique, but will be used in parsing protocol addresses).</param>
            <param name="channels">Channels supported by this protocol.</param>
            <param name="requiredService">Definition of protocols and services required by this class.</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.#ctor(System.String,Demo3D.Net.ServiceProvider,Demo3D.Net.Protocol.RequiredService)">
            <summary>
            Creates a new protocol.
            </summary>
            <param name="name">Name of the protocol (need not be unique, but will be used in parsing protocol addresses).</param>
            <param name="protocolServiceProvider">Services supported directly by this class.</param>
            <param name="requiredService">Definition of protocols and services required by this class.</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.Protocol.RequiredService)">
            <summary>
            Creates a new protocol.
            </summary>
            <param name="name">Name of the protocol (need not be unique, but will be used in parsing protocol addresses).</param>
            <param name="protocolSupportedServices">List of services supported directly by this class.</param>
            <param name="requiredService">Definition of protocols and services required by this class.</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.#ctor(System.String,System.Type,Demo3D.Net.Protocol.RequiredService)">
            <summary>
            Creates a new protocol.
            </summary>
            <param name="name">Name of the protocol (need not be unique, but will be used in parsing protocol addresses).</param>
            <param name="protocolSupportedService">List of services supported directly by this class.</param>
            <param name="requiredService">The required down-stream protocols and services.</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.#ctor(System.String,System.Type[])">
            <summary>
            Creates a new protocol.
            </summary>
            <param name="name">Name of the protocol (need not be unique, but will be used in parsing protocol addresses).</param>
            <param name="protocolSupportedService">List of services supported directly by this class.</param>
        </member>
        <member name="P:Demo3D.Net.Protocol.Channels">
            <summary>
            List of all channels.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocol.DefaultChannel">
            <summary>
            The default channel.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.FindChannel(System.String)">
            <summary>
            Returns the named channel, or null.
            </summary>
            <param name="channelName">The name of the channel to search for.</param>
            <returns>The named channel, or null.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.AddChannel(Demo3D.Net.Channel)">
            <summary>
            Adds a channel.
            </summary>
            <param name="channel">Channel to add.</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.RemoveChannel(Demo3D.Net.Channel)">
            <summary>
            Removes a channel.
            </summary>
            <param name="channel">Channel to remove.</param>
            <returns>True if the channel was removed.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.RegisterService(Demo3D.Net.ServiceProvider)">
            <summary>
            Registers a service.
            </summary>
            <param name="service">The service provider to register.</param>
            <returns>False if the service was already registered.</returns>
            <remarks>
            The service will be available to ProtocolSocket.FindService().
            If this service is already supported by an existing implementation, then this takes
            precedence.  It hides the previous implementation until unregistered.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.Protocol.UnregisterService(Demo3D.Net.ServiceProvider)">
            <summary>
            Unregisters a service.
            </summary>
            <param name="service">The service provider to unregister.</param>
            <returns>False if the service provider was already unregistered.</returns>
        </member>
        <member name="P:Demo3D.Net.Protocol.SupportedServices">
            <summary>
            Returns a list of supported service types.  These are the services that ProtocolSocket.FindService can return.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.SupportsService(System.Type)">
            <summary>
            Returns whether a particular service is supported.
            </summary>
            <param name="service">The service to find.</param>
            <returns>True if the service is supported.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.FindServiceProvider(System.Type)">
            <summary>
            Returns the service provider that supports a particular service.
            </summary>
            <param name="service">The service to find.</param>
            <returns>The service provider for the given service.</returns>
        </member>
        <member name="P:Demo3D.Net.Protocol.SupportedServiceProviders">
            <summary>
            Returns all the service providers used by this protocol.
            </summary>
            <returns>A list of service providers.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocol.RequiredService">
            <summary>
            Describes the protocols and services required down stream.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocol.RequiredService.RequiredProtocol">
            <summary>
            The required protocol.  Null if no specific protocol is required.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocol.RequiredService.PreferredProtocols">
            <summary>
            A list of preferred protocols (if RequiredProtocol is null).
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocol.RequiredService.RequiredServices">
            <summary>
            Required services.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.RequiredService.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new service requirement including a required protocol and an optional set of required services.
            </summary>
            <param name="requiredProtocol">The required protocol, or null.</param>
            <param name="requiredServices">A list of required services (if any).</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.RequiredService.#ctor(System.String,System.Type)">
            <summary>
            Creates a new service requirement including a required protocol and a required service.
            </summary>
            <param name="requiredProtocol">The required protocol, or null.</param>
            <param name="requiredService">The required service.</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.RequiredService.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new service requirement including a set of required services, and an optional list of preferred protocols.
            </summary>
            <param name="requiredServices">The list of required services.</param>
            <param name="preferredProtocols">A list of preferred protocols (if any).</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.RequiredService.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.String[])">
            <summary>
            Creates a new service requirement, including a set of requires services, and an optional list of preferred protocols.
            </summary>
            <param name="requiredServices">The list of required services.</param>
            <param name="preferredProtocols">A list of preferred protocols (if any).</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.RequiredService.#ctor(System.Type,System.String[])">
            <summary>
            Creates a new service requirement, including a required service, and an optional list of preferred protocols.
            </summary>
            <param name="requiredService">The required service.</param>
            <param name="preferredProtocols">A list of preferred protocols (if any).</param>
        </member>
        <member name="M:Demo3D.Net.Protocol.RequiredService.FindProtocols">
            <summary>
            Find available downstream protocols.
            </summary>
            <returns>Available downstream protocols.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.RequiredService.FindPreferred">
            <summary>
            Find preferred downstream protocols.
            </summary>
            <returns>Preferred downstream protocols.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.CreateDownStreamAddress(Demo3D.Net.ProtocolAddress,Demo3D.Net.Protocol@,Demo3D.Net.ProtocolAddress@)">
            <summary>
            Creates the downstream address given an upstream address and a downstream protocol.
            Normally this does not need to be overridden, but there are some cases where it's required.
            For example, the downstream address returned by COTP for "cotp://host/tsap" would be "tpkt://host:102".
            Or you can return null to stop the protocol stack from building downstream protocol instances.  You might
            do this if you want to take control of building the downstream protocol instances, or nor build them at all.
            </summary>
            <param name="address">The address used by this protocol.</param>
            <param name="downStreamProtocol">The downstream protocol for which an address is needed.  Return null to prevent creating downstream protocols.</param>
            <param name="downStreamAddress">The downstream protocol address.  Return null to stop processing downstream protocols.</param>
            <returns></returns>
        </member>
        <member name="P:Demo3D.Net.Protocol.Required">
            <summary>
            Required protocols and services.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.NewInstance(Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Create a new server/client protocol instance.
            </summary>
            <param name="head">The socket head which is a required parameter to the ProtocolInstance constructor.</param>
            <param name="protocolAddress">The protocol address.</param>
            <returns>A new ProtocolInstance.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.CreateCanonicalAddress(Demo3D.Net.ProtocolAddress,Demo3D.Net.ProtocolAddress)">
            <summary>
            <para>
            Returns the full address.  Eg add in a default port number.  Should return an address that uniquely identifies
            the peer.
            </para>
            <para>
            The address should explicitly contain any information required to connect (including any defaults), but exclude any
            connection parameters, routing information, etc, unless required to identify the peer.  Ambiguous parts of the address
            should be standardised - eg where information is case insensitive, it should be converted to lower case.  Any parts of
            the address not required should be removed.
            </para>
            <para>
            (The framework will automatically convert hostnames to an appropriate IP address, and will set the scheme correctly,
            so no need to modify those parts.)
            </para>
            </summary>
            <param name="address">The address being canonized.</param>
            <param name="canonicalAddress">The canonical address as currently converted.</param>
            <returns>The canonical address.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.CanonizeAddressAsync(System.Boolean,Demo3D.Net.ProtocolAddress)">
            <summary>
            Returns the unique full address of the peer.
            Eg hostname replaced with unique IP address.  Default port number added in, etc.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.CanonizeAddress(Demo3D.Net.ProtocolAddress)">
            <summary>
            Returns the unique full address of the peer.
            Eg hostname replaced with unique IP address.  Default port number added in, etc.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocol.GuiServices">
            <summary>
            Gui only view on SupportedServiceProviders.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.Protocol.Properties">
            <summary>
            Returns a property bag to display in a property grid.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocol.Dispose">
            <summary>
            Releases all protocol resources.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.ToString">
            <summary>
            Returns the name of the protocol.
            </summary>
            <returns>The protocol name.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocol.IRegistry">
            <summary>
            Registry of protocols.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocol.IRegistry.Registered">
            <summary>
            Occurs when a protocol is registered.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocol.IRegistry.Unregistered">
            <summary>
            Occurs when a protocol is unregistered.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocol.IRegistry.MissingProtocol">
            <summary>
            Occurs when a protocol or service is requested that cannot be found.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.IRegistry.Register(Demo3D.Net.Protocol)">
            <summary>
            Registers a protocol.  If this implementation of a protocol supports services that are already supported
            by an existing implementation, then this one takes precedence.  It hides the previous implementation.
            If the 'hidden' implementation supports other services, then it will still be used for those services.
            </summary>
            <param name="protocol">The protocol being registered.</param>
            <returns>False if the protocol was already registered.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.IRegistry.Unregister(Demo3D.Net.Protocol)">
            <summary>
            Unregisters a protocol.
            </summary>
            <param name="protocol">The protocol to unregister.</param>
            <returns>False if the protocol was already unregistered.</returns>
        </member>
        <member name="P:Demo3D.Net.Protocol.IRegistry.All">
            <summary>
            Returns all the registered protocols.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.IRegistry.Find(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Finds a protocol by name and services.  Returns null if not found.
            </summary>
            <param name="name">Name of protocol to find.</param>
            <param name="services">Services that protocol must provide.</param>
            <returns>The first matching protocol (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.IRegistry.Find(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds all protocols that provide a specific set of services.
            </summary>
            <param name="services">Services that the protocol must provide.</param>
            <param name="preferredProtocols">List of preferred protocols.</param>
            <returns>All matching protocols.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.IRegistry.Get(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Finds a protocol by name and services.  Throws ArgumentException if not found.
            </summary>
            <param name="name">Name of protocol to find.</param>
            <param name="services">Services that protocol must provide.</param>
            <returns>The first matching protocol.</returns>
        </member>
        <member name="T:Demo3D.Net.Protocol.ProtocolRegistry">
            <summary>
            Our implementation.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocol.ProtocolRegistry.Registered">
            <summary>
            Occurs when a protocol is registered.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocol.ProtocolRegistry.Unregistered">
            <summary>
            Occurs when a protocol is unregistered.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocol.ProtocolRegistry.MissingProtocol">
            <summary>
            Occurs when a protocol or service is requested that cannot be found.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.ProtocolRegistry.Register(Demo3D.Net.Protocol)">
            <summary>
            Registers a protocol.  If this implementation of a protocol supports services that are already supported
            by an existing implementation, then this one takes precedence.  It hides the previous implementation.
            If the 'hidden' implementation supports other services, then it will still be used for those services.
            </summary>
            <param name="protocol">The protocol being registered.</param>
            <returns>False if the protocol was already registered.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.ProtocolRegistry.Unregister(Demo3D.Net.Protocol)">
            <summary>
            Unregisters a protocol.
            </summary>
            <param name="protocol">The protocol to unregister.</param>
            <returns>False if the protocol was already unregistered.</returns>
        </member>
        <member name="P:Demo3D.Net.Protocol.ProtocolRegistry.All">
            <summary>
            Returns all the registered protocols.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocol.ProtocolRegistry.Find(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Finds a protocol by name and services.  Returns null if not found.
            </summary>
            <param name="name">Name of protocol to find.</param>
            <param name="services">Services that protocol must provide.</param>
            <returns>The first matching protocol (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.ProtocolRegistry.Find(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Finds all protocols that provide a specific set of services.
            </summary>
            <param name="services">Services that the protocol must provide.</param>
            <param name="preferredProtocols">List of preferred protocols.</param>
            <returns>All matching protocols.</returns>
        </member>
        <member name="M:Demo3D.Net.Protocol.ProtocolRegistry.Get(System.String,System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Finds a protocol by name and services.  Throws ArgumentException if not found.
            </summary>
            <param name="name">Name of protocol to find.</param>
            <param name="services">Services that protocol must provide.</param>
            <returns>The first matching protocol.</returns>
        </member>
        <member name="P:Demo3D.Net.Protocol.Registry">
            <summary>
            A register of all protocols.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ProtocolAddress">
            <summary>
            An address of a client or server.
            </summary>
            <remarks>
            <para>
            Based on <see cref="T:System.Uri"/>, a ProtocolAddress is a URI that points to a particular client or server.
            It includes all the information need to establish a connection without including any information about how
            the connection will be used.
            </para>
            <para>
            An address should explicitly contain any information required to connect, but exclude any connection parameters,
            routing information, etc, unless required to identify the peer.
            </para>
            <para>
            <list type="table">
            <listheader><term>Address</term><term>Description</term></listheader>
            <item><description>tcp://host:1234</description><description>Where 1234 is the port number.</description></item>
            <item><description>modbus://host:1234</description><description></description></item>
            <item><description>cotp://host/tsap</description><description>Where "tsap" is the ISO TSAP.</description></item>
            </list>
            </para>
            <para>
            A server address would normally exclude the hostname.  You would include a hostname if you wanted the server
            to run only on a specific network interface.  Also (since a URI cannot contain a port number unless it also
            contains a hostname) you would use the special hostname <c>ProtocolAddress.AnyHost</c> ("any").
            </para>
            <para>
            <list type="table">
            <listheader><term>Address</term><term>Description</term></listheader>
            <item><description>tcp://localhost:1234</description><description>A server accepting connections only on localhost.</description></item>
            <item><description>cotp://any:1234/tsap</description><description>A server accepting COTP connections for "tsap" on port 1234 (instead of the default port 102).</description></item>
            </list>
            </para>
            <para>
            Since protocols are stacked on top of other protocols, it can also be useful to include the full protocol path
            in the URI scheme.  For example, Modbus is a protocol that typically uses TCP, but it's also quite common to
            use the Modbus protocol over UDP.  And another example, Fetch/Write can run over TCP or over ISO COTP.
            </para>
            <para>
            <list type="table">
            <listheader><term>Address</term><term>Description</term></listheader>
            <item><description>modbus://host:1234</description><description>Defaults to TCP.</description></item>
            <item><description>modbus.tcp://host:1234</description><description>Explicitly require Modbus over TCP.</description></item>
            <item><description>modbus.udp://host:1234</description><description>Explicitly require Modbus over UDP.</description></item>
            <item><description>fetchwrite://host:1234</description><description>Defaults to TCP.</description></item>
            <item><description>fetchwrite.cotp://host/tsap</description><description>Explicitly require COTP, and provide a TSAP instead of a port number.</description></item>
            </list>
            </para>
            <para>
            Best practice for creating a ProtocolAddress is to use the <see cref="T:Demo3D.Net.ProtocolAddressBuilder"/> class, and to use
            the built-in constants for scheme names (eg <see cref="F:Demo3D.Net.Protocols.TCP.Scheme"/>).
            </para>
            </remarks>
        </member>
        <member name="F:Demo3D.Net.ProtocolAddress.AnyHost">
            <summary>
            Pseudo hostname that's used to indicate a server or service running on this/any machine.
            For example, a server running on this machine and accepting connections from any client.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.SchemeParts">
            <summary>
            The individual parts of the scheme.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddress.#ctor(System.Uri)">
            <summary>
            Constructs a new protocol address using the supplied URI.
            </summary>
            <param name="address">URI address.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddress.#ctor(Demo3D.Net.ProtocolAddress)">
            <summary>
            Constructs a new protocol address using the supplied address.
            </summary>
            <param name="address">URI address.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddress.#ctor(System.String)">
            <summary>
            Constructs a new protocol address by parsing the supplied address string.
            </summary>
            <param name="address">The address.</param>
            <example>
            <code lang="C#" source="Examples\Net\TcpClient2.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddress.op_Implicit(System.String)~Demo3D.Net.ProtocolAddress">
            <summary>
            Implicitly converts from string address to a ProtocolAddress.
            </summary>
            <param name="address">The string address to parse.</param>
            <returns>The new ProtocolAddress.</returns>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.Protocol">
            <summary>
            The protocol indicated by the address (first part of the scheme).
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.NextProtocol">
            <summary>
            The next protocol indicated by the address (second part of the scheme, if present).
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddress.NextAddress(System.String)">
            <summary>
            Returns the next protocol address (first part of the scheme removed).
            </summary>
            <param name="nextProtocol">Default protocol to use if scheme only has one part.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddress.ToBinary(System.String)">
            <summary>
            Converts 8-bit unescaped ASCII string to binary data.
            </summary>
            <param name="segment">The text segment to convert to binary.</param>        
            <returns>The text segment converted to binary.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddress.ToString(System.Byte[])">
            <summary>
            Converts binary data to 8-bit unescaped ASCII string.
            </summary>
            <param name="binarySegment">The binary segment to convert to text.</param>
            <returns>A textual representation of the binary data.</returns>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.LocalSegments">
            <summary>
            Decodes the segments of the address into local segments.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.BinarySegments">
            <summary>
            Decodes the segments of the address into segments, returning them as binary data.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.Parts">
            <summary>
            Decodes the absolute path of the address into parts.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.BinaryParts">
            <summary>
            Decodes the absolute path of the address into segments, returning them as binary data.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddress.HasHost">
            <summary>
            Returns true if the hostname is set.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ProtocolAddressBuilder">
            <summary>
            A class for constructing protocol addresses.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Demo3D.Net.ProtocolAddress"/> is a <see cref="T:System.Uri"/> pointing to a particular client or server.
            It allows the entire address to be represented in a single string.  The string can be entered manually,
            or programmatically using this class.
            </para>
            <para>
            The special hostname "any" is used to indicate any host.  It's only used when a hostname is not needed
            but is required to create a valid URI.  For example a server that accepts connections from any client
            running on a specified port number.
            </para>
            </remarks>
            <example>
            The following examples show how to create a ProtocolAddress for different protocols.
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolBuilder" />
            </example>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressBuilder.#ctor">
            <summary>
            Constructs a new protocol address builder.
            </summary>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolBuilder" />
            </example>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressBuilder.#ctor(Demo3D.Net.ProtocolAddress)">
            <summary>
            Constructs a new protocol address builder with the specified URI.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressBuilder.#ctor(System.String,System.String)">
            <summary>
            Constructs a new protocol address builder with the specified scheme and host.
            </summary>
            <param name="scheme">The protocol scheme (eg "tcp").</param>
            <param name="host">The hostname (or null for a server).</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressBuilder.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructs a new protocol address builder with the specified scheme, host and port.
            </summary>
            <param name="scheme">The protocol scheme (eg "tcp").</param>
            <param name="host">The hostname (or null for a server).</param>
            <param name="port">The port (or -1 for a protocol that doesn't support ports).</param>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolBuilder" />
            <code lang="C#" source="Examples\Net\TcpClientData.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressBuilder.#ctor(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Constructs a new protocol address builder with the specified scheme, host, port, and path.
            </summary>
            <param name="scheme">The protocol scheme (eg "tcp").</param>
            <param name="host">The hostname (or null for a server).</param>
            <param name="port">The port (or -1 for a protocol that doesn't support ports).</param>
            <param name="parts">Additional connection path parts.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressBuilder.#ctor(System.String,System.String,System.Int32,System.Byte[][])">
            <summary>
            Constructs a new protocol address builder with the specified scheme, host, port, and path.
            </summary>
            <param name="scheme">The protocol scheme (eg "tcp").</param>
            <param name="host">The hostname (or null for a server).</param>
            <param name="port">The port (or -1 for a protocol that doesn't support ports).</param>
            <param name="binaryParts">Additional connection binary path parts.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressBuilder.Illegal(System.String,System.String,System.Int32,System.String,System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressBuilder.Scheme">
            <summary>
            Gets or sets the scheme of the address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressBuilder.Host">
            <summary>
            Gets or sets the host name of the address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressBuilder.Port">
            <summary>
            Gets or sets the port number of the address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressBuilder.Parts">
            <summary>
            Gets or sets the parts of the address Path.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressBuilder.BinaryParts">
            <summary>
            Gets of sets the parts of the address path as binary data.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressBuilder.Address">
            <summary>
            Returns the address constructed by this builder.
            </summary>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolBuilder" />
            </example>
        </member>
        <member name="T:Demo3D.Net.ProtocolAddressEditor">
            <summary>
            A property bag for configuring a ProtocolAddress.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ProtocolAddressEditor.ProtocolProperty">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.ProtocolProperty.#ctor(System.String,Demo3D.Net.Protocol,System.String)">
            <summary>
            Constructs a new ProtocolProperty.
            </summary>
            <param name="userScheme">The definitive scheme for this protocol, overriding the protocols own scheme (or null).</param>
            <param name="protocol">The protocol from which to create the property.</param>
            <param name="selectScheme">If a protocol has more than one ProtocolAddressEditorAttribute, then this scheme selects the editor (or null to use userScheme).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.ProtocolProperty.#ctor">
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditor.ProtocolProperty.Scheme">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.ProtocolProperty.ToString">
            <summary>
            Protocol description.
            </summary>
            <returns>The protocol description.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.#ctor">
            <summary>
            Create an instance of ProtocolAddressEditor.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.#ctor(System.String)">
            <summary>
            Create an instance of ProtocolAddressEditor.
            </summary>
            <param name="scheme">The protocol address scheme.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.#ctor(Demo3D.Net.ProtocolAddressEditor)">
            <summary>
            Clone address.
            </summary>
            <param name="clone">Editor to clone.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetValidProtocols(System.Type)">
            <summary>
            Returns all protocols with the <see cref="T:Demo3D.Net.ProtocolAddressEditorAttribute"/>.
            </summary>
            <param name="service">Required service (or null).</param>
            <returns>Returns a list of protocols.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetValidProtocols">
            <summary>
            Returns the selection of valid protocols to show in the Protocol property drop-down in sorted order.
            Defaults to all protocols with the <see cref="T:Demo3D.Net.ProtocolAddressEditorAttribute"/>.
            </summary>
            <returns>Returns a list of valid protocols.</returns>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditor.Address">
            <summary>
            The connection address.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditor.Scheme">
            <summary>
            Just for export/import - so it's not visible in the GUI.
            It exports a version of the address that only includes the scheme.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolAddressEditor.Protocol">
            <summary>
            The connection protocol.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetEditor">
            <summary>
            Returns the currectly detected address editor.
            </summary>
            <returns>The current address editor.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.NextProperty">
            <summary>
            Returns the name of the next property that needs to be set.
            </summary>
            <returns>The next property to be set, or null.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetProtocolEditor(System.Type)">
            <summary>
            Returns an editor the 'protocol' property.
            </summary>
            <param name="editorBaseType">The type of editor requested.</param>
            <returns>An editor for the protocol.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetClassName">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetAttributes">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetComponentName">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetConverter">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetDefaultEvent">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetDefaultProperty">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetEditor(System.Type)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetEvents(System.Attribute[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetEvents">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetProperties(System.Attribute[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Returns the member values. Provides the dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="result">The result of the operation.</param>
            <returns>True if the property is found.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Sets a member value.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="value">The value to set to the member.</param>
            <returns>True if the operation is successful.</returns>
        </member>
        <member name="E:Demo3D.Net.ProtocolAddressEditor.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.Clone">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolAddressEditor.ToString">
            <summary>
            The current address.
            </summary>
            <returns>The address.</returns>
        </member>
        <member name="T:Demo3D.Net.ProtocolHead">
            <summary>
            The head of the protocol stream.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolHead.CanonicalAddress">
            <summary>
            The canonical address (the key into the connection registry).
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ProtocolHead.SocketFlags">
            <summary>
            Socket flags.  (Flags are OR'ed together each time the protocol is built.)
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolHead.Registry">
            <summary>
            The registry this socket is registered with.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ProtocolHead.Address">
            <summary>
            The address used to create this socket.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolHead.Properties">
            <summary>
            Protocol and service properties.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.BuildSocketAsync(System.Boolean,Demo3D.Net.Protocol,Demo3D.Net.OpenParams,Demo3D.Net.ProtocolHead)">
            <summary>
            This is used to build the ProtocolHead for Connections and Servers, but not clients accepted from a server.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.GetHead">
            <summary>
            Returns the protocol head.
            </summary>
            <returns>This socket.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.TakeStream">
            <summary>
            Returns the head of the protocol stream (the first protocol instance), and also
            removes the stream from the ProtocolHead.  The stream can then be re-assigned to a
            different ProtocolHead.
            </summary>
            <returns>The head of the protocol stream.</returns>
        </member>
        <member name="P:Demo3D.Net.ProtocolHead.Log">
            <summary>
            Log messages.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.SetLog(Demo3D.Common.IComponentLogger)">
            <summary>
            Sets the current log.
            </summary>
            <param name="logger">A logger.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.SetRunning">
            <summary>
            Server connections are open and running already when we get them.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.SetPeerAddress">
            <summary>
            Server addresses are taken from the peer.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolHead.OnLinked">
            <summary>
            Occurs when a link is made to this socket.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolHead.OnUnlinkRequest">
            <summary>
            Occurs when an object is requested to unlink from this socket.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolHead.OnUnlinked">
            <summary>
            Occurs when a link is removed from this socket.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.Link(System.Object)">
            <summary>
            Adds a 'link' reference.
            </summary>
            <param name="owner">The owner of the reference.</param>
            <remarks>
            Connections are designed not to require IDispose.  You can Close your connection and let your
            reference float away, and then on the next Reset (which calls
            <see cref="M:Demo3D.Net.ConnectionRegistry.Close(Demo3D.Net.Connection.IRegistry,Demo3D.Net.ConnectionRegistry.CloseFlags,Demo3D.Net.Protocol)"/>)
            any orphaned Connections are cleared out of the cache.
            
            Use Link and Unlink if you want to manage the lifetime of your Connection.  A Connection with
            Links won't be closed on Reset.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.UnlinkRequest">
            <summary>
            Raises the <see cref="E:Demo3D.Net.ProtocolHead.OnUnlinkRequest"/> event.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.Unlink(System.Object)">
            <summary>
            Remove a 'link' reference count.
            </summary>
            <param name="owner">The owner of the reference.</param>
            <returns>True if it's the last link.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.GetLinks">
            <summary>
            Return list of references.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.Net.ProtocolHead.OnUpstreamLinked">
            <summary>
            Occurs when a new upstream socket links to this protocol head.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolHead.OnUpstreamUnlinked">
            <summary>
            Occurs when a new upstream socket unlinks from this protocol head.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.LinkUpstreamSocket(Demo3D.Net.ProtocolSocket)">
            <summary>
            Add an upstream socket to the connection list.
            </summary>
            <param name="socket">Connection to add.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.UnlinkUpstreamSocket(Demo3D.Net.ProtocolSocket)">
            <summary>
            Remove an upstream socket from the connection list.
            </summary>
            <param name="socket">Connection to remove.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.GetUpstreamSockets">
            <summary>
            Returns a copy of the list of upstream sockets using this protocol head.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ProtocolHead.Running">
            <summary>
            Returns whether the instance is still running.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.OpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Opens (or reopen) the socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="flags">Additional flags.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.LogShutdownMessages(System.Boolean)">
            <summary>
            Vote for shutdown messages be logged.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.CloseStream">
            <summary>
            Closes the protocol stream.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolHead.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ProtocolInstance">
            <summary>
            This is one instance of a protocol connection (either a client or a server connection), or a protocol server.
            This class represents one link in the overall protocol stream.  Created by Protocol, it manages the protocol for just this link in the stream.
            Uses the services of, and provides services to, its downstream and upstream instances.
            </summary>
            <example>
            <para>
            The following example shows the most basic implementation of a ProtocolInstance.
            </para>
            <code lang="C#" source="Examples\Net\ExampleProtocol.cs" region="Example" />
            </example>
            <example>
            <para>
            Example showing a TCP client.
            </para>
            <code lang="C#" source="Examples\Net\TCP_Client.cs" region="Example" />
            </example>
            <example>
            <para>
            Example showing a TCP server.
            </para>
            <code lang="C#" source="Examples\Net\TCP_Server.cs" region="Example" />
            </example>
        </member>
        <member name="P:Demo3D.Net.ProtocolInstance.Protocol">
            <summary>
            The protocol.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolInstance.ProtocolProperties">
            <summary>
            Protocol property bag.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,System.Boolean,System.Object)">
            <summary>
            Constructs a new ProtocolInstance.
            </summary>
            <param name="protocol">The protocol constructing the ProtocolInstance.</param>
            <param name="head">The head of the protocol stream.</param>
            <param name="address">The address of this protocol instance.</param>
            <param name="running">True if the connection is already connected and running (ie a server connection).</param>
            <param name="propertyBag">The configuration properties of this protocol instance.</param>
        </member>
        <member name="P:Demo3D.Net.ProtocolInstance.ID">
            <summary>
            A description of this instance.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolInstance.Address">
            <summary>
            The protocol address used by this instance.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.GetHead">
            <summary>
            Returns the protocol head.
            </summary>
            <returns>The protocol head.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.SetDownStream(Demo3D.Net.ProtocolSocket)">
            <summary>
            Sets the downstream socket.
            </summary>
            <param name="socket">The downstream socket.</param>
            <exception cref="T:System.InvalidOperationException">The downstream socket is already set.</exception>
        </member>
        <member name="P:Demo3D.Net.ProtocolInstance.InternalRunning">
            <summary>
            Indicates whether the instance is still running.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.InternalOpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Opens or reopens the instance.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="flags">Additional flags.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.InternalShutdown">
            <summary>
            Forcibly shuts down the underlying protocol, causing all other users to throw an error.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.InternalClose">
            <summary>
            Performs a controlled close.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolInstance.Running">
            <summary>
            Returns whether the instance is still running.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.OpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Opens (or reopens) the socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="flags">Connection flags.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.CloseStream">
            <summary>
            Closes the protocol stream.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.TryCreateService(Demo3D.Net.ChannelInstance,System.Type,System.Object)">
            <summary>
            Returns an object that implements a specific API, or null.
            For example, an IO API such as IPacketIOService.
            </summary>
            <param name="channelInstance">The channel creating the service.</param>
            <param name="serviceType">The service to find/create.</param>
            <param name="propertyBag">The properties of the service.</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.FindService(System.Type,Demo3D.Net.ServiceBindingFlags,System.String)">
            <summary>
            Returns an object that implements a specific API, or null.
            For example, an IO API such as IPacketIOService.
            </summary>
            <param name="serviceType">The service to find.</param>
            <param name="bindingFlags">How to search for the service.</param>
            <param name="channelName">Specific channel to search, or null for the default channel.</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.NotifyEditBegunAsync(System.Boolean)">
            <summary>
            Notify <see cref="E:Demo3D.Common.IBatchEditable.EditBegunAsync"/> raised.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.NotifyEditEndedAsync(System.Boolean)">
            <summary>
            Notify <see cref="E:Demo3D.Common.IBatchEditable.EditEndedAsync"/> raised.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="P:Demo3D.Net.ProtocolInstance.Properties">
            <summary>
            Protocol and service properties.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolInstance.ToString">
            <summary>
            Returns a description of this socket.
            </summary>
            <returns>A description of this socket.</returns>
        </member>
        <member name="T:Demo3D.Net.ProtocolProperties">
            <summary>
            A class to contain all the configuration property bags for each protocol and service being used for a connection.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolProperties.AllPropertyBags">
            <summary>
            All property bags.
            </summary>
            <returns>A list of property bags.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.AddProperties(Demo3D.Net.ProtocolProperties,System.String)">
            <summary>
            Merges in a set of protocol properties.
            </summary>
            <param name="properties">Protocol properties to merge.</param>
            <param name="prefix">Optional prefix to use for property keys.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.SetProperties(Demo3D.Net.Protocol,System.String,System.Type,System.Object)">
            <summary>
            Sets properties for particular protocol service.
            </summary>
            <param name="protocol">The protocol.</param>
            <param name="channelName">The name of the channel hosting the service (or null).</param>
            <param name="serviceType">The service being accessed.</param>
            <param name="propertyBag">The properties.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.SetProperties(Demo3D.Net.Protocol,System.Object)">
            <summary>
            Sets properties for particular protocol.
            </summary>
            <param name="protocol">The protocol.</param>
            <param name="propertyBag">The properties.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.TryGetProperties(System.String,System.String,System.Type,System.Object@)">
            <summary>
            Gets properties for a particular protocol service.
            </summary>
            <param name="protocolName">The protocol name.</param>
            <param name="channelName">The name of the channel hosting the service (or null).</param>
            <param name="serviceType">The service.</param>
            <param name="properties">Returns the properties of the protocol service (or null).</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.TryGetProperties(System.String,System.Object@)">
            <summary>
            Gets properties for a particular protocol.
            </summary>
            <param name="protocolName">The protocol name.</param>
            <param name="properties">Returns the properties of the protocol service (or null).</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.CopyProperties(Demo3D.Net.Protocol,Demo3D.Net.ProtocolProperties)">
            <summary>
            Copies the properties of a particular protocol.
            </summary>
            <param name="protocol">Target protocol.</param>
            <param name="properties">Protocol properties.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.GetDynamicMemberNames">
            <summary>
            Returns the enumeration of all dynamic member names.
            </summary>
            <returns>A sequence that contains dynamic member names</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Returns the member values. Provides the dynamic behavior for operations such as getting a value for a property.
            </summary>
            <param name="binder">Provides information about the object that called the dynamic operation.</param>
            <param name="result">The result of the operation.</param>
            <returns>True if the property is found.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.SetCurrentConfiguration(Demo3D.Net.ProtocolProperties)">
            <summary>
            Allows the deserializer to deserialize data into a newer instance of the ProtocolProperties.
            The Deserializer creates a new instance of ProtocolProperties to deserialize saved property values.
            When deserialization is complete, the properties that are read into that object may need to be applied
            to the current configuration instead.  This provides the reference to the current configuration.
            </summary>
            <param name="currentConfiguration">The newer instance of the ProtocolProperties.</param>
        </member>
        <member name="E:Demo3D.Net.ProtocolProperties.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolProperties.ToString">
            <summary>
            Returns the name of this class.
            </summary>
            <returns>The name of this class.</returns>
        </member>
        <member name="T:Demo3D.Net.ProtocolRegistryExtensions">
            <summary>
            Registry of protocols.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolRegistryExtensions.Find(Demo3D.Net.Protocol.IRegistry,System.String,System.Type)">
            <summary>
            Finds a protocol by name and services.  Returns null if not found.
            </summary>
            <param name="registry">The protocol registry.</param>
            <param name="name">Name of protocol to find.</param>
            <param name="services">Services that protocol must provide.</param>
            <returns>The first matching protocol (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolRegistryExtensions.Find(Demo3D.Net.Protocol.IRegistry,System.Collections.Generic.IEnumerable{System.Type},System.String[])">
            <summary>
            Finds all protocols that provide a specific set of services.
            </summary>
            <param name="registry">The protocol registry.</param>
            <param name="services">Services that the protocol must provide.</param>
            <param name="preferredProtocols">List of preferred protocols.</param>
            <returns>All matching protocols.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolRegistryExtensions.Find(Demo3D.Net.Protocol.IRegistry,System.Type,System.String[])">
            <summary>
            Finds all protocols that provide a specific set of services.
            </summary>
            <param name="registry">The protocol registry.</param>
            <param name="services">Services that the protocol must provide.</param>
            <param name="preferredProtocols">List of preferred protocols.</param>
            <returns>All matching protocols.</returns>
        </member>
        <member name="T:Demo3D.Net.IProtocolServerService">
            <summary>
            Protocol server service.
            </summary>
        </member>
        <member name="M:Demo3D.Net.IProtocolServerService.InternalAcceptAsync(System.Boolean,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolInstance)">
            <summary>
            Accepts a new connection.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="head">The protocol head.</param>
            <param name="downStreamConnection">The downstream connection.</param>
            <returns>The accepted protocol instance.</returns>
        </member>
        <member name="T:Demo3D.Net.ProtocolServerSocket">
            <summary>
            A ProtocolHead that can be returned as a socket to the user.
            Manages itself as its own entry in its own ConnectionList.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ProtocolServerSocket.ServerParams">
            <summary>
            Parameters used to open the server.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolServerSocket.TakeStream">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.ServerSocket">
            <summary>
            A server socket.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ServerSocket.InitializeAsync(System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ServerSocket.OpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Opens (or reopen) the server.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="flags">Additional flags.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ServerSocket.AcceptAsync(System.Boolean)">
            <summary>
            Accepts a connection from a client.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>A new connection from a client received on the server.</returns>
        </member>
        <member name="M:Demo3D.Net.ServerSocket.Close">
            <summary>
            Closes the server.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ClientHead">
            <summary>
            The socket head created for a connection made to our server.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ClientHead.OpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.ServerClient`1">
            <summary>
            A client connection to our server.
            </summary>
            <typeparam name="T">Required IO services.</typeparam>
        </member>
        <member name="M:Demo3D.Net.ServerClient`1.InitializeAsync(System.Boolean)">
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ServerClient`1.IO">
            <summary>
            The IO services provided by the protocol.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ServiceConnectionAsync">
            <summary>
            Delegate for servicing a new connection, passing a new ProtocolSocket for each connection accepted.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ServiceClientAsync`1">
            <summary>
            Delegate for servicing a new connection, passing a new Client{T} for each connection accepted.
            </summary>
            <typeparam name="T">Required IO services.</typeparam>
        </member>
        <member name="T:Demo3D.Net.ProtocolSocket">
            <summary>
            A connection to a peer (either a client or a server connection), or a protocol server.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolSocket.ID">
            <summary>
            A description of this socket.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolSocket.Address">
            <summary>
            The address used to create this socket.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolSocket.Properties">
            <summary>
            Protocol and service properties.
            </summary>
            <example>
            <code lang="C#" source="Examples\Net\Net.cs" region="ProtocolProperties" />
            </example>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.#ctor">
            <summary>
            Constructs a ProtocolSocket.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ProtocolSocket.DownStream">
            <summary>
            The downstream socket.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.SetDownStream(Demo3D.Net.ProtocolSocket)">
            <summary>
            Sets the downstream socket.
            </summary>
            <param name="socket">The downstream socket.</param>
            <exception cref="T:System.InvalidOperationException">The downstream socket is already set.</exception>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.GetDownStream">
            <summary>
            Returns the downstream socket.
            </summary>
            <returns>The downstream socket.</returns>
            <exception cref="T:System.InvalidOperationException">There's no downstream socket or the downstream socket is closed.</exception>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.GetHead">
            <summary>
            Returns the protocol head.
            </summary>
            <returns>The head socket.</returns>
            <exception cref="T:System.InvalidOperationException">There's no downstream socket or the downstream socket is closed.</exception>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.GetStream">
            <summary>
            Returns the head of the protocol stream (the first protocol instance).
            </summary>
            <returns>The socket at the head of the protocol stream.</returns>
            <exception cref="T:System.InvalidOperationException">There's no downstream socket or the downstream socket is closed.</exception>
        </member>
        <member name="P:Demo3D.Net.ProtocolSocket.Log">
            <summary>
            Log messages.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.SetLog(Demo3D.Common.IComponentLogger)">
            <summary>
            Sets the current log.
            </summary>
            <param name="logDirector">A log director.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.RegisterOpen(System.Func{System.Boolean,Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.Flags,System.Threading.Tasks.Task},System.Object)">
            <summary>
            Registers a function to call after the socket is opened, but before the OnOpenedAsync event is fired.
            </summary>
            <param name="openDelegate">The delegate to call.</param>
            <param name="userState">Parameter to pass back to the callback.</param>
            <remarks>
            Delegates that throw an exception will prevent the socket opening.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.UnregisterOpen(System.Func{System.Boolean,Demo3D.Net.ProtocolSocket,System.Object,Demo3D.Net.Flags,System.Threading.Tasks.Task})">
            <summary>
            Unregister a previously registered function.
            </summary>
            <param name="openDelegate">The function to unregister.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.RegisterClosing(System.Action{Demo3D.Net.ProtocolSocket,System.Object},System.Object)">
            <summary>
            Registers a function to call when Close has been called but before the socket has been closed.
            </summary>
            <param name="closingDelegate">The delegate to call.</param>
            <param name="userState">Parameter to pass back to the callback.</param>
            <remarks>
            Exceptions thrown by delegates will be ignored.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.UnregisterClosing(System.Action{Demo3D.Net.ProtocolSocket,System.Object})">
            <summary>
            Unregister a previously registered function.
            </summary>
            <param name="closingDelegate">The function to unregister.</param>
        </member>
        <member name="E:Demo3D.Net.ProtocolSocket.OnOpenedAsync">
            <summary>
            Occurs after the socket is opened.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolSocket.OnClosed">
            <summary>
            Occurs after the socket is closed.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolSocket.OnShutdown">
            <summary>
            Occurs after the socket is shutdown.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolSocket.OnDisposed">
            <summary>
            Occurs when the socket is disposed.
            A socket is disposed when it's closed and uncached from the connection registry.
            User script may retain a reference, and may resurrect the socket by calling <see cref="M:Demo3D.Net.Connection.OpenAsync(System.Boolean,Demo3D.Net.OpenFlags)"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.InitializeAsync(System.Boolean)">
            <summary>
            When overridden in a derived class, initializes the socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
            <remarks>
            Called after the socket is built.  Always called from the bottom up.
            Can block, but should avoid long blocking operations.
            </remarks>
        </member>
        <member name="P:Demo3D.Net.ProtocolSocket.Running">
            <summary>
            Returns whether the socket is still running.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.OpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Opens (or reopens) the socket.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="flags">Connection flags.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.ShutdownStream(Demo3D.Common.LogMessage,System.Boolean)">
            <summary>
            Forcibly shuts down the stream, and then logs an error.
            </summary>
            <param name="message">Error information (or null).</param>
            <param name="logMessage">True to log message.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.StartShutdown(Demo3D.Common.LogMessage,System.Boolean)">
            <summary>
            Start forcibly shutting down the socket, and then logs an error.
            </summary>
            <param name="message">Error information (or null).</param>
            <param name="logMessage">True to log message.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.Shutdown(Demo3D.Common.LogMessage.LogLevel,System.String,System.Object)">
            <summary>
            Forcibly shuts down the socket, and then logs an error.
            </summary>
            <param name="level">The message level.</param>
            <param name="message">The message to log.</param>
            <param name="context">Any contextual information about the message (such as the associated exception).</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.Shutdown(System.String)">
            <summary>
            Forcibly shuts down the socket, and then logs an error.
            </summary>
            <param name="message">The message of the error that's provoking the shutdown.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.Shutdown(System.Exception)">
            <summary>
            Forcibly shuts down the socket, and then logs an error.
            </summary>
            <param name="e">The exception that's provoking the shutdown.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.Shutdown">
            <summary>
            Forcibly shuts down the socket, without logging an error.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.CloseStream">
            <summary>
            Closes the protocol stream.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.Close">
            <summary>
            Closes the socket.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.Close(System.Exception)">
            <summary>
            Logs an error, and then closes the socket.
            </summary>
            <param name="e">The exception that's provoking the close.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.DisposeStream">
            <summary>
            Disposes the protocol stream.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.AddOrUpdateAspect(System.Type,System.Func{System.Type,System.Object},System.Func{System.Type,System.Object,System.Object})">
            <summary>
            Adds or updates an aspect of the socket.
            </summary>
            <param name="typeOfAspect">The type of the aspect to add.</param>
            <param name="addAspect">The function used to generate a new aspect.</param>
            <param name="updateAspect">The function used to update the current aspect with a new value.</param>
            <returns>The aspect.</returns>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.GetOrAddAspect(System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Adds an aspect to a socket by using the specified function, if the key does not already exist.
            </summary>
            <param name="typeOfAspect">The type of the aspect to add.</param>
            <param name="newAspect">The function used to generate a new aspect.</param>
            <returns>
            The apsect. This will be either the existing aspect if it's already set,
            or the new aspect as returned by newAspect if the aspect was not in the dictionary.
            </returns>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.AddAspect(System.Type,System.Object)">
            <summary>
            Adds an aspect to a socket.
            </summary>
            <param name="typeOfAspect">The type of the aspect to add.</param>
            <param name="aspect">The object to add.</param>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.RemoveAspect(System.Type)">
            <summary>
            Removes an aspect from a socket.
            </summary>
            <param name="typeOfAspect">The type of the aspect to remove.</param>
            <returns>True if an aspect was found and removed.</returns>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.FindAspect(System.Type)">
            <summary>
            Returns an aspect of the given type, or return null.
            </summary>
            <param name="typeOfAspect">The type of the aspect.</param>
            <returns>The aspect or null.</returns>
            <remarks>
            Thread safe.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.FindAspect``1">
            <summary>
            Returns an aspect of the given type, or return null.
            </summary>
            <typeparam name="T">The type of the aspect.</typeparam>
            <returns>The aspect or null.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.FindService(System.Type,Demo3D.Net.ServiceBindingFlags,System.String)">
            <summary>
            Returns an object that implements a specific API, or null.
            For example, an IO API such as IPacketIOService.
            </summary>
            <param name="serviceType">The service to find.</param>
            <param name="bindingFlags">Flags to direct the search for the requested service.</param>
            <param name="channelName">Specific channel to search, or null for the default channel.</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.FindService``1(Demo3D.Net.ServiceBindingFlags,System.String)">
            <summary>
            Returns an object that implements a specific API, or null.
            For example, an IO API such as IPacketIOService.
            </summary>
            <typeparam name="T">The service to find.</typeparam>
            <param name="bindingFlags">Flags to direct the search for the requested service.</param>
            <param name="channelName">Specific channel to search, or null for the default channel.</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.GetService``1(Demo3D.Net.ServiceBindingFlags,System.String)">
            <summary>
            Returns an object that implements a specific API, or throws an exception.
            For example, an IO API such as IPacketIOService.
            </summary>
            <typeparam name="T">The service to find.</typeparam>
            <param name="bindingFlags">Flags to direct the search for the requested service.</param>
            <param name="channelName">Specific channel to search, or null for the default channel.</param>
            <returns>The service implementation.</returns>
        </member>
        <member name="E:Demo3D.Net.ProtocolSocket.EditBegunAsync">
            <summary>
            Raised on the first call to BeginEdit.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ProtocolSocket.EditEndedAsync">
            <summary>
            Raised on the last call to EndEdit.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.BeginEditAsync(System.Boolean)">
            <summary>
            Start batch editing.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.EndEditAsync(System.Boolean)">
            <summary>
            End batch editing.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.NotifyEditBegunAsync(System.Boolean)">
            <summary>
            Notify <see cref="E:Demo3D.Common.IBatchEditable.EditBegunAsync"/> raised.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.NotifyEditEndedAsync(System.Boolean)">
            <summary>
            Notify <see cref="E:Demo3D.Common.IBatchEditable.EditEndedAsync"/> raised.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="E:Demo3D.Net.ProtocolSocket.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.Net.ProtocolSocket.ToString">
            <summary>
            Returns a description of this socket.
            </summary>
            <returns>A description of this socket.</returns>
        </member>
        <member name="T:Demo3D.Net.ServiceBindingAttribute">
            <summary>
            Binding attributes for a service interface.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceBindingAttribute.MustSelectExplicitly">
            <summary>
            Declares that the service must be selected explicitly in ProtocolStack.Open for the protocol providing the service to be used.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceBindingAttribute.Public">
            <summary>
            Declares that the service is visible at all levels of the protocol stack.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ServiceBindingAttribute.Get(System.Type)">
            <summary>
            Returns the service binding attribute for a service.
            </summary>
            <param name="service">The service to inspect.</param>
            <returns>The service binding attributes.</returns>
        </member>
        <member name="T:Demo3D.Net.ServiceBindingFlags">
            <summary>
            Directs how to find a service on a protocol.
            By default Public and NonPublic services for the supplied protocol, and Public services of the downstream protocols,
            are searched.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ServiceBindingFlags.Default">
            <summary>
            Specifies no binding flag.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ServiceBindingFlags.DeclaredOnly">
            <summary>
            Specifies that only services declared at the level of the supplied protocol
            should be considered. Protocol services down the protocol stack are not considered.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ServiceBindingFlags.Public">
            <summary>
            Specifies that public services are to be included in the search.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ServiceBindingFlags.NonPublic">
            <summary>
            Specifies that non-public services are to be included in the search.
            </summary>
        </member>
        <member name="F:Demo3D.Net.ServiceBindingFlags.DontCreate">
            <summary>
            Don't create the service if it hasn't already been created.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ServiceNameAttribute">
            <summary>
            Name attributes for a service interface.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceNameAttribute.Name">
            <summary>
            The service name.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ServiceNameAttribute.#ctor(System.String)">
            <summary>
            Constructs a service name attribute.
            </summary>
            <param name="name">The service name.</param>
        </member>
        <member name="M:Demo3D.Net.ServiceNameAttribute.Get(System.Type)">
            <summary>
            Returns the service name attribute for a service.
            </summary>
            <param name="service">The service to inspect.</param>
            <returns>The service name attributes.</returns>
        </member>
        <member name="T:Demo3D.Net.ServiceProvider">
            <summary>
            A service provider.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ServiceProvider.RequiredService">
            <summary>
            Describes the services required by this service.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.RequiredService.RequiredServices">
            <summary>
            Required services.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.RequiredService.IncompatibleServices">
            <summary>
            Services that are incompatible.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.RequiredService.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Creates a new service requirement from an optional set of required services and incompatible services.
            </summary>
            <param name="requiredServices">A list of required services (if any).</param>
            <param name="incompatibleServices">A list of incompatible services (if any).</param>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.RequiredService.#ctor(System.Type[])">
            <summary>
            Creates a new service requirement from a required service.
            </summary>
            <param name="requiredServices">The required services.</param>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.RequiredService.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Boolean)">
            <summary>
            Creates a new service requirement from a required service.
            </summary>
            <param name="requiredServices">The required services.</param>
            <param name="excludeProtocolServer">True to exclude protocol server services.</param>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.SupportedServices">
            <summary>
            Services supported directly by this class.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.RequiredServices">
            <summary>
            Services required by this class.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.Flags">
            <summary>
            Connection sharing control.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.#ctor(System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.ServiceProvider.RequiredService,System.Type,System.Type,Demo3D.Net.SocketFlags)">
            <summary>
            Creates a new service provider which expands one service with an additional expansion service.
            </summary>
            <param name="supportedServices">The list of services supported by this service provider. (Typically just one service.)</param>
            <param name="requiredServices">The list of services required by this service provider.</param>
            <param name="expands">The service being expanded.</param>
            <param name="expansion">The additional service that this service provider offers.</param>
            <param name="flags">Flags to control connection sharing for connections that require this service.</param>
            <remarks>
            This constructor is for service providers whose primary role is to expand one service with additional services.
            For example, the NotifyMemoryServiceProvider looks for service providers that offer the IMemoryService but does
            not offer the INotifyMemoryService.  NotifyMemoryServiceProvider then adds itself as a service provider offering
            both IMemoryService and INotifyMemoryService, replacing the original provider.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.#ctor(System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.ServiceProvider.RequiredService,Demo3D.Net.SocketFlags)">
            <summary>
            Creates a new service provider.
            </summary>
            <param name="supportedServices">The list of services supported by this service provider. (Typically just one service.)</param>
            <param name="requiredServices">The list of services required by this service provider.</param>
            <param name="flags">Flags to control connection sharing for connections that require this service.</param>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Type},Demo3D.Net.SocketFlags)">
            <summary>
            Creates a new service provider.
            </summary>
            <param name="supportedServices">The list of services supported by this service provider. (Typically just one service.)</param>
            <param name="requiredServices">The list of services required by this service provider.</param>
            <param name="flags">Flags to control connection sharing for connections that require this service.</param>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.#ctor(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Type,Demo3D.Net.SocketFlags)">
            <summary>
            Creates a new service provider which expands one service with an additional expansion service.
            </summary>
            <param name="supportedServices">The list of services supported by this service provider. (Typically just one service.)</param>
            <param name="requiredServices">The list of services required by this service provider.</param>
            <param name="expands">The service being expanded.</param>
            <param name="expansion">The additional service that this service provider offers.</param>
            <param name="flags">Flags to control connection sharing for connections that require this service.</param>
            <remarks>
            This constructor is for service providers whose primary role is to expand one service with additional services.
            For example, the NotifyMemoryServiceProvider looks for service providers that offer the IMemoryService but does
            not offer the INotifyMemoryService.  NotifyMemoryServiceProvider then adds itself as a service provider offering
            both IMemoryService and INotifyMemoryService, replacing the original provider.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.#ctor(System.Type[])">
            <summary>
            Creates a new service provider.
            </summary>
            <param name="supportedServices">The list of services supported by this service provider. (Typically just one service.)</param>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.GuiSupported">
            <summary>
            GUI only.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.GuiRequired">
            <summary>
            GUI only.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.GuiIncompatible">
            <summary>
            GUI only.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.Properties">
            <summary>
            Gui only.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.NewProperties(System.Type)">
            <summary>
            Returns properties for this service, or null.
            </summary>
            <param name="serviceType">The type of the service.</param>
            <returns>The properties for this service, or null.</returns>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.TryCreateService(Demo3D.Net.ProtocolInstance,Demo3D.Net.ChannelInstance,System.Type,System.Object)">
            <summary>
            Creates a new service for a protocol instance, or return null.
            </summary>
            <param name="instance">The protocol instance requiring this service.</param>
            <param name="channelInstance">Instance of the channel creating the service.</param>
            <param name="serviceType">The type of the service to create.</param>
            <param name="propertyBag">The property bag containing configuration properties for this service (as returned by NewProperties).</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.Expands(System.Collections.Generic.List{Demo3D.Net.ServiceProvider},System.Type,System.Type)">
            <summary>
            Called from <see cref="M:Demo3D.Net.ServiceProvider.FilterServices(System.Type,System.Collections.Generic.List{Demo3D.Net.ServiceProvider})"/> to declare that this service provider
            expands the <paramref name="expands"/> service with additional services <paramref name="expansion"/>.
            </summary>
            <param name="serviceProviders"></param>
            <param name="expands">The service being expanded.</param>
            <param name="expansion">The additional service that this service provider offers.</param>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.FilterServices(System.Type,System.Collections.Generic.List{Demo3D.Net.ServiceProvider})">
            <summary>
            Filters out services that conflict with our directly supported service.
            </summary>
            <param name="serviceType">The type of the service being filtered.</param>
            <param name="serviceProviders">
            The current list of service providers providing this service.
            Edit this list to remove (or add) service providers appropriately.
            </param>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.ToString">
            <summary>
            Returns a string representing the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Demo3D.Net.ServiceProvider.IRegistry">
            <summary>
            Registry of global service providers.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ServiceProvider.IRegistry.Registered">
            <summary>
            Occurs when a service is registered.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ServiceProvider.IRegistry.Unregistered">
            <summary>
            Occurs when a service is unregistered.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.IRegistry.Register(Demo3D.Net.ServiceProvider)">
            <summary>
            Registers a service.
            </summary>
            <param name="service">The service provider to register.</param>
            <returns>False if the service provider is already registered.</returns>
            <remarks>
            If this provider supports services that are already supported by an existing provider,
            then this one takes precedence.  It hides the previous implementation.  If the 'hidden' implementation
            supports other services, then it will still be used for those services.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.IRegistry.Unregister(Demo3D.Net.ServiceProvider)">
            <summary>
            Unregisters a service.
            </summary>
            <param name="service">The service provider to unregister.</param>
            <returns>False if the service provider is already unregistered.</returns>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.IRegistry.All">
            <summary>
            Returns all the registered services.
            </summary>
        </member>
        <member name="T:Demo3D.Net.ServiceProvider.ServiceProvierRegistry">
            <summary>
            Registry of global service providers.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ServiceProvider.ServiceProvierRegistry.Registered">
            <summary>
            Occurs when a service is registered.
            </summary>
        </member>
        <member name="E:Demo3D.Net.ServiceProvider.ServiceProvierRegistry.Unregistered">
            <summary>
            Occurs when a service is unregistered.
            </summary>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.ServiceProvierRegistry.Register(Demo3D.Net.ServiceProvider)">
            <summary>
            Registers a service.
            </summary>
            <param name="service">The service provider to register.</param>
            <returns>False if the service provider is already registered.</returns>
            <remarks>
            If this provider supports services that are already supported by an existing provider,
            then this one takes precedence.  It hides the previous implementation.  If the 'hidden' implementation
            supports other services, then it will still be used for those services.
            </remarks>
        </member>
        <member name="M:Demo3D.Net.ServiceProvider.ServiceProvierRegistry.Unregister(Demo3D.Net.ServiceProvider)">
            <summary>
            Unregisters a service.
            </summary>
            <param name="service">The service provider to unregister.</param>
            <returns>False if the service provider is already unregistered.</returns>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.ServiceProvierRegistry.All">
            <summary>
            Returns all the registered services.
            </summary>
        </member>
        <member name="P:Demo3D.Net.ServiceProvider.Registry">
            <summary>
            A register of all global service providers.
            </summary>
        </member>
        <member name="T:Demo3D.Net.NamespaceGroupDoc">
            <summary>
            The Demo3D.Net namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.Net.NamespaceDoc">
            <summary>
            The Demo3D.Net namespace provides a framework for accessing the built-in Demo3D communication protocols.
            </summary>
            <remarks>
            <para>
            List of services:
            </para>
            <para>
            <list type="table">
            <listheader>
              <term>Interface</term>
              <term>Description</term>
            </listheader>
            
            <item>
              <description><see cref="T:Demo3D.Net.IByteStreamService"/></description>
              <description>A service for implementing connections that provide a stream of bytes (eg TCP).</description>
            </item>
            <item>
              <description><see cref="T:Demo3D.Net.IMessageStreamService"/></description>
              <description>A service for implementing connections that provide a stream of messages (eg UDP, COTP).</description>
            </item>
            <item>
              <description><see cref="T:Demo3D.Net.IPacketIOService"/></description>
              <description>A service for implementing connections that exchange packets of data.</description>
            </item>
            <item>
              <description><see cref="T:Demo3D.Net.IEmbeddedPacketIOService"/></description>
              <description>A service for implementing embedded virtual connections connections that implement <see cref="T:Demo3D.Net.IPacketIOService"/>.</description>
            </item>
            <item>
              <description><see cref="T:Demo3D.Net.IProtocolTimeoutService"/></description>
              <description>A service for controlling protocol timeouts.</description>
            </item>
            <item>
              <description><see cref="T:Demo3D.Net.IIOStatsService"/></description>
              <description>A service for collecting protocol statistics.</description>
            </item>
            <item>
              <description></description>
              <description><see cref="T:Demo3D.Net.IDetectInstallationService"/></description>
              <description>A service for detecting whether the correct software and hardware is installed for a protocol.</description>
            </item>
            <item>
              <description></description>
              <description><see cref="T:Demo3D.Net.IDetectConnectionService"/></description>
              <description>A service for detecting a connection.</description>
            </item>
            <item>
              <description><see cref="T:Demo3D.Net.IProtocolServerService"/></description>
              <description>A service for implementing protocol servers.</description>
            </item>
            </list>
            </para>
            <para>
            Supporting interfaces:
            <see cref="T:Demo3D.Net.INotifyDataChanged"/>,
            <see cref="T:Demo3D.Net.IDataChangedNotifier"/>,
            </para>
            </remarks>
        </member>
    </members>
</doc>
