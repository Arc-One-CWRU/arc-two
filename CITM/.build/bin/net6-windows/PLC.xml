<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PLC</name>
    </assembly>
    <members>
        <member name="T:Demo3D.Common.BitsArray">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.BitsArray.CountBits(System.UInt64)">
            <summary>
            Return number of bits set in a 64 bit unsigned integer.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.BitArrayToByteArrayLength(System.Int32,System.Int32)">
            <summary>
            Return the length of the byte array that includes the entire bit range, assuming that the bits are aligned
            such that bit 0 would be on a byte boundary.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.BitArrayToByteArrayLength(System.Int64,System.Int64)">
            <summary>
            Return the length of the byte array that includes the entire bit range, assuming that the bits are aligned
            such that bit 0 would be on a byte boundary.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.BitArrayToWordArrayLength(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the length of the word array that includes the entire bit range, assuming that the bits are aligned
            such that bit 0 would be on a word boundary.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.BitArrayToWordArrayLength(System.Int64,System.Int64,System.Int32)">
            <summary>
            Return the length of the word array that includes the entire bit range, assuming that the bits are aligned
            such that bit 0 would be on a word boundary.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.CompareBytes(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Compare ranges of bytes.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.CompareBytes(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Compare ranges of bytes.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.CompareBits(System.Byte[],System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Compare ranges of bits.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.CompareBits(System.Byte[],System.Int64,System.Byte[],System.Int64,System.Int64,System.Int64@,System.Int64@)">
            <summary>
            Compare ranges of bits.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.CopyBits(System.Byte[],System.Int64,System.Byte[],System.Int64,System.Int64)">
            <summary>
            Like Array.Copy, except indices are in units of bits.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.CopyBits(System.Byte[],System.Int64,System.Int64,System.Int64)">
            <summary>
            Like Array.Copy, except indices are in units of bits.  Returns new byte array.
            </summary>
        </member>
        <member name="T:Demo3D.Common.BitsArray.AccessCommand">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessCommand.Nop">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessCommand.AccessBits">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessCommand.AccessWords">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.BitsArray.AccessInstruction">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessInstruction.Command">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessInstruction.WordIndex">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessInstruction.FromIndex">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessInstruction.ToIndex">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessInstruction.Buffer">
            <exclude /> 
        </member>
        <member name="F:Demo3D.Common.BitsArray.AccessInstruction.BufferOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Common.BitsArray.AccessInstruction.NumWords">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.BitsArray.ReadBits(System.Byte[],System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Read bits from external source into bit array.
            </summary>
        </member>
        <member name="T:Demo3D.Common.BitsArray.ReadBit">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.BitsArray.WriteBit">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.BitsArray.ReadWordBits">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.BitsArray.WriteWordBits">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.BitsArray.ReadWords">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.BitsArray.WriteWords">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.BitsArray.ReadBits(System.Int64,System.Byte[],System.Int64,System.Int64,Demo3D.Common.BitsArray.ReadWordBits,Demo3D.Common.BitsArray.ReadWords,System.Int32)">
            <summary>
            Read bits from external source into bit array.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.ReadBits(System.Int64,System.Byte[],System.Int64,System.Int64,Demo3D.Common.BitsArray.ReadBit,Demo3D.Common.BitsArray.ReadWords,System.Int32)">
            <summary>
            Read bits from external source into bit array.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.WriteBits(System.Byte[],System.Int64,System.Int64,System.Int64,System.Int32)">
            <summary>
            Write bits from bit array to external source.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.WriteBits(System.Byte[],System.Int64,System.Int64,System.Int64,Demo3D.Common.BitsArray.WriteWordBits,Demo3D.Common.BitsArray.WriteWords,System.Int32)">
            <summary>
            Write bits from bit array to external source.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BitsArray.WriteBits(System.Byte[],System.Int64,System.Int64,System.Int64,Demo3D.Common.BitsArray.WriteBit,Demo3D.Common.BitsArray.WriteWords,System.Int32)">
            <summary>
            Write bits from bit array to external source.
            </summary>
        </member>
        <member name="T:Demo3D.Common.InstanceCache`1">
            <summary>
            Caches instances of a class.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.InstanceCache`1.Allocate">
            <summary>
            Returns a free instance.  The caller is responsible for (re)constructing the instance.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.InstanceCache`1.Free(`0)">
            <summary>
            Caches an instance.  The caller must Dispose any resources held by the class and drop any references to it before freeing.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.SingleInstanceCache`1">
            <summary>
            Caches a single instance of a class.
            Use this where you expect only one instance to be in use at a time.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SingleInstanceCache`1.Allocate">
            <summary>
            Returns a free instance.  The caller is responsible for (re)constructing the instance.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.SingleInstanceCache`1.Free(`0)">
            <summary>
            Caches an instance.  The caller must Dispose any resources held by the class and drop any references to it before freeing.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MultipleInstanceCache`1">
            <summary>
            Caches multiple instances of a class.
            Use this where you expect multiple instances to be in use at a time.
            </summary>
            <typeparam name="T">The type of the class.</typeparam>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.MultipleInstanceCache`1.#ctor(System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.MultipleInstanceCache`1.Allocate">
            <summary>
            Returns a free instance.  The caller is responsible for (re)constructing the instance.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.MultipleInstanceCache`1.Free(`0)">
            <summary>
            Caches an instance.  The caller must Dispose any resources held by the class and drop any references to it before freeing.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.IReversibleEnumerator`1">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.IReversibleEnumerator`1.MovePrev">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.IReversibleEnumerable`1">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.IReversibleEnumerable`1.GetEnumerator">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.IntervalTree`2">
            <summary>
            Interval Tree class
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TypeValue"></typeparam>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.IntervalTree`2.Interval">
            <summary>
            Interval structure
            </summary>
        </member>
        <member name="P:Demo3D.Common.IntervalTree`2.Interval.Start">
            <summary>
            </summary>
        </member>
        <member name="P:Demo3D.Common.IntervalTree`2.Interval.End">
            <summary>
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Interval.#ctor(`0,`0)">
            <summary>
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Interval.OverlapsWith(Demo3D.Common.IntervalTree{`0,`1}.Interval)">
            <summary>
            Determines if two intervals overlap (i.e. if this interval starts before the other ends and it finishes after the other starts)
            </summary>
            <param name="other">The other.</param>
            <returns>
              <c>true</c> if the specified other is overlapping; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Interval.ToString">
            <summary>
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Demo3D.Common.IntervalTree`2"/> class.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Demo3D.Common.IntervalTree{`0,`1}.Interval,`1}})">
            <summary>
            Initializes a new instance of the <see cref="T:Demo3D.Common.IntervalTree`2"/> class.
            </summary>
            <param name="elems">The elems.</param>
        </member>
        <member name="T:Demo3D.Common.IntervalTree`2.VisitNodeHandler`1">
            <summary>
            visitor delegate
            </summary>
            <typeparam name="TNode">The type of the node.</typeparam>
            <param name="node">The node.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Add(`0,`0,`1)">
            <summary>
            Adds the specified interval.
            If there is more than one interval starting at the same time/value, the intervalnode.Interval stores the start time and the maximum end time of all intervals starting at the same value.
            All end values (except the maximum end time/value which is stored in the interval node itself) are stored in the Range list in decreasing order.
            Note: this is okay for problems where intervals starting at the same time /value is not a frequent occurrence, however you can use other data structure for better performance depending on your problem needs
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Add(Demo3D.Common.IntervalTree{`0,`1}.Interval,`1)">
            <summary>
            Adds the specified interval.
            If there is more than one interval starting at the same time/value, the intervalnode.Interval stores the start time and the maximum end time of all intervals starting at the same value.
            All end values (except the maximum end time/value which is stored in the interval node itself) are stored in the Range list in decreasing order.
            Note: this is okay for problems where intervals starting at the same time /value is not a frequent occurrence, however you can use other data structure for better performance depending on your problem needs
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Delete(`0,`0,`1)">
            <summary>
            Deletes the specified interval.
            If the interval tree is used with unique intervals, this method removes the interval specified as an argument.
            If multiple identical intervals (starting at the same time and also ending at the same time) are allowed, this function will delete one of them( see procedure DeleteIntervalFromNodeWithRange for details)
            In this case, it is easy enough to either specify the (interval, value) pair to be deleted or enforce uniqueness by changing the Add procedure.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Delete(Demo3D.Common.IntervalTree{`0,`1}.Interval,`1)">
            <summary>
            Deletes the specified interval.
            If the interval tree is used with unique intervals, this method removes the interval specified as an argument.
            If multiple identical intervals (starting at the same time and also ending at the same time) are allowed, this function will delete one of them( see procedure DeleteIntervalFromNodeWithRange for details)
            In this case, it is easy enough to either specify the (interval, value) pair to be deleted or enforce uniqueness by changing the Add procedure.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.GetOverlapping(Demo3D.Common.IntervalTree{`0,`1}.Interval,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Demo3D.Common.IntervalTree{`0,`1}.Interval,`1}}@)">
            <summary>
            Searches for all intervals overlapping the one specified.
            If multiple intervals starting at the same time/value are found to overlap the specified interval, they are returned in decreasing order of their End values.
            </summary>
            <param name="toFind">To find.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.GetOverlapping(Demo3D.Common.IntervalTree{`0,`1}.Interval)">
            <summary>
            Searches for all intervals overlapping the one specified.
            If multiple intervals starting at the same time/value are found to overlap the specified interval, they are returned in decreasing order of their End values.
            </summary>
            <param name="toFind">To find.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.GetIntervalValues(Demo3D.Common.IntervalTree{`0,`1}.Interval)">
            <summary>
            Gets an enumerator pointing to the first interval in this subtree that overlaps the argument startingAt.
            Returns all the intervals from startingAt to the end.
            The multiple intervals that start at the same value are sorted based on their descending End value.
            If the first interval returned starts before startingAt, then all intervals that overlap that first interval
            will also be returned, even if they're strictly before startingAt.
            </summary>
            <param name="startingAt">To find.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.GetValues(Demo3D.Common.IntervalTree{`0,`1}.Interval)">
            <summary>
            Gets an enumerator pointing to the first interval in this subtree that overlaps the argument startingAt.
            Returns all the intervals from startingAt to the end.
            The multiple intervals that start at the same value are sorted based on their descending End value.
            If the first interval returned starts before startingAt, then all intervals that overlap that first interval
            will also be returned, even if they're strictly before startingAt.  This is deliberate (so you can iterate
            backwards as well as forwards).  You must filter intervals that you don't want, and exit the iterator when
            you've seen all the intervals you need.
            </summary>
            <param name="startingAt">To find.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.GetStartingAt(`0)">
            <summary>
            Returns all intervals beginning at the specified start value. 
            The multiple intervals start at the specified value, they are sorted based on their End value (i.e. returned in ascending order of their End values)
            </summary>
            <param name="arg">The arg.</param>
            <returns></returns>
        </member>
        <member name="P:Demo3D.Common.IntervalTree`2.Intervals">
            <summary>
            Gets the collection of intervals (in ascending order of their Start values).
            Those intervals starting at the same time/value are sorted further based on their End value (i.e. returned in ascending order of their End values)
            </summary>
        </member>
        <member name="P:Demo3D.Common.IntervalTree`2.Values">
            <summary>
            Gets the collection of values (ascending order)
            Those intervals starting at the same time/value are sorted further based on their End value (i.e. returned in ascending order of their End values)
            </summary>
        </member>
        <member name="P:Demo3D.Common.IntervalTree`2.IntervalValuePairs">
            <summary>
            Gets the interval value pairs.
            Those intervals starting at the same time/value are sorted further based on their End value (i.e. returned in ascending order of their End values)
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.TryGetInterval(Demo3D.Common.IntervalTree{`0,`1}.Interval,`1@)">
            <summary>
            Tries to the get the value associated with the interval.
            </summary>
            <param name="data">The data.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.TryGetInterval(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode,Demo3D.Common.IntervalTree{`0,`1}.Interval,`1@)">
            <summary>
            Searches for interval starting at.
            </summary>
            <param name="subtree">The subtree.</param>
            <param name="data">The data.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="T:Demo3D.Common.IntervalTree`2.IntervalNode">
            <summary>
            IntervalNode class. 
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.Add(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode,Demo3D.Common.IntervalTree{`0,`1}.Interval,`1,System.Boolean@,System.Boolean@)">
            <summary>
            Adds the specified elem.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.ComputeMax(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode)">
            <summary>
            Computes the max.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.FindMin(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode)">
            <summary>
            Finds the min.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.FindMax(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode)">
            <summary>
            Finds the max.
            </summary>
            <param name="node">The node.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.GetRange">
            <summary>
            Gets the range of intervals stored in this.Range (i.e. starting at the same value 'this.Interval.Start' as the interval stored in the node itself)
            The range intervals are sorted in the descending order of their End interval values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.GetRangeReverse">
            <summary>
            Gets the range of intervals stored in this.Range (i.e. starting at the same value 'this.Interval.Start' as the interval stored in the node itself).
            The range intervals are sorted in the ascending order of their End interval values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.Successor">
            <summary>
            Succeeds this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.Predecesor">
            <summary>
            Precedes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.Delete(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode,Demo3D.Common.IntervalTree{`0,`1}.Interval,`1,System.Boolean@,System.Boolean@)">
            <summary>
            Deletes the specified node.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.GetStartingAt(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode,`0)">
            <summary>
            Returns all intervals beginning at the specified start value. The intervals are sorted based on their End value (i.e. returned in ascending order of their End values)
            </summary>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.GetOverlapping(Demo3D.Common.IntervalTree{`0,`1}.Interval,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Demo3D.Common.IntervalTree{`0,`1}.Interval,`1}}@)">
            <summary>
            Searches for all intervals in this subtree that are overlapping the argument interval.
            If multiple intervals starting at the same time/value are found to overlap, they are returned in decreasing order of their End values.
            </summary>
            <param name="toFind">To find.</param>
            <param name="list">The list.</param>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.GetOverlapping(Demo3D.Common.IntervalTree{`0,`1}.Interval)">
            <summary>
            Gets all intervals in this subtree that are overlapping the argument interval. 
            If multiple intervals starting at the same time/value are found to overlap, they are returned in decreasing order of their End values.
            </summary>
            <param name="toFind">To find.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.GetStartingAtOverlapping(Demo3D.Common.IntervalTree{`0,`1}.Interval)">
            <summary>
            Gets a pointer to the first interval in this subtree that overlaps the argument interval. 
            </summary>
            <param name="toFind">To find.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.RotateLeft(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode)">
            <summary>
            Rotates lefts this instance.
            Assumes that this.Right != null
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.RotateRight(Demo3D.Common.IntervalTree{`0,`1}.IntervalNode)">
            <summary>
            Rotates right this instance.
            Assumes that (this.Left != null)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.IntervalNode.DeleteIntervalFromNodeWithRange(Demo3D.Common.IntervalTree{`0,`1}.Interval,`1)">
            <summary>
            Deletes the specified interval from this node. 
            If the interval tree is used with unique intervals, this method removes the interval specified as an argument.
            If multiple identical intervals (starting at the same time and also ending at the same time) are allowed, this function will delete one of them. 
            In this case, it is easy enough to either specify the (interval, value) pair to be deleted or enforce uniqueness by changing the Add procedure.
            </summary>
            <param name="interval">The interval to be deleted.</param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.KeyValueComparer`2.#ctor(System.Collections.Generic.IComparer{`2})">
            <summary>
            Initializes a new instance of the <see cref="T:Demo3D.Common.IntervalTree`2.KeyValueComparer`2"/> class.
            </summary>
            <param name="keyComparer">The key comparer.</param>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.KeyValueComparer`2.Compare(System.Collections.Generic.KeyValuePair{`2,`3},System.Collections.Generic.KeyValuePair{`2,`3})">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero is less than y.Zerox equals y.Greater than zero is greater than y.
            </returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.KeyValueComparer`2.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Demo3D.Common.IntervalTree`2.KeyValueComparer`2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.ClockInformation">
            <summary>
            Clock information.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.ClockId">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.Class">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.Accuracy">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.Variance">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.UTCOffset">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.Priority1">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.Priority2">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.StepsRemoved">
            <exclude /> 
        </member>
        <member name="P:Demo3D.Net.Protocols.ClockInformation.TimeSource">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Net.Protocols.ClockInformation.#ctor(System.UInt64,System.Byte,System.Byte,System.UInt16,System.UInt16,System.Byte,System.Byte,System.UInt16,System.Byte)">
            <exclude />
        </member>
        <member name="T:Demo3D.Net.Protocols.ISystemTime">
            <summary>
            System time interface.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocols.ISystemTime.OnSynchronizedChanged">
            <summary>
            Raised when the clock's synchronization changes.
            </summary>
        </member>
        <member name="E:Demo3D.Net.Protocols.ISystemTime.OnClockChanged">
            <summary>
            Raised when the grandmaster or parent clock changes.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.ISystemTime.IsSynchronized">
            <summary>
            True if the clocks are synchronized.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.ISystemTime.Parent">
            <summary>
            Clock information for the currently synchronized parent clock.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.ISystemTime.GrandMaster">
            <summary>
            Clock information for the currently synchronized grandmaster clock.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.ISystemTime.SystemTimeMicroseconds">
            <summary>
            Device time in microseconds (ticks since 1/1/1970 adjusted for leap seconds).  Time may go backwards.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.ISystemTime.SystemTimeNanoseconds">
            <summary>
            Device time in nanoseconds (ticks since 1/1/1970 adjusted for leap seconds).  Time may go backwards.
            </summary>
        </member>
        <member name="P:Demo3D.Net.Protocols.ISystemTime.OffsetFromMaster">
            <summary>
            The coarse number of nanoseconds offset between our local reference clock and system time.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.ISystemTime.RealTimeQPCToDeviceTimeNanoseconds(Demo3D.Time.RealTime)">
            <summary>
            Returns the device time (in system time nanoseconds) at a specified local real time.
            </summary>
            <param name="atTime">The point in time in local real time.</param>
            <returns>The converted device time in nanoseconds since 1/1/1970 (adjusted for leap seconds).</returns>
        </member>
        <member name="T:Demo3D.Net.Protocols.ISystemClockHandle">
            <summary>
            A handle to a system clock.
            </summary>
        </member>
        <member name="T:Demo3D.Net.Protocols.SystemTimeRegistry">
            <summary>
            System time registry.
            </summary>
        </member>
        <member name="M:Demo3D.Net.Protocols.SystemTimeRegistry.Register(System.Func{System.String,Demo3D.Net.Protocols.ISystemClockHandle})">
            <exclude />
        </member>
        <member name="M:Demo3D.Net.Protocols.SystemTimeRegistry.Find(System.String)">
            <summary>
            Get the running instance of the system clock for a specified network card.
            Returns null if the clock isn't running.
            Returns one reference to the clock.  (Call <see cref="M:System.IDisposable.Dispose"/> to release.)
            </summary>
            <param name="cardAddress">Network card IP address.</param>
            <returns>A system clock handle, or null.</returns>
        </member>
        <member name="T:Demo3D.PLC.PLCGlobal">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.PLCGlobal.Expert">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.PLCGlobal.Load">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.PLCGlobal.Initialize(System.Func{System.String,System.Type},System.Func{System.Type,System.Boolean})">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.PLCGlobal.Reset">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.PLCGlobal.Clear">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AccessParameters">
            <summary>
            Parameters for accessing a PLC tag or memory address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.AccessRights">
            <summary>
            Access rights.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.IOControl">
            <summary>
            IO control.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.DefaultInterval">
            <summary>
            Scan, using the default rate.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.OffInterval">
            <summary>
            Don't scan.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.FastInterval">
            <summary>
            Fast scan interval.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Default">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.WriteThrough">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.ReadOnce">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.DefaultReadScanInterval">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.DefaultWriteBehindInterval">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.ReadScanInterval">
            <summary>
            Time (ms) between reads.
            </summary>
            <remarks>
            Use <see cref="F:Demo3D.PLC.Comms.AccessParameters.DefaultInterval"/> to enable scanning at the default rate.
            Use <see cref="F:Demo3D.PLC.Comms.AccessParameters.OffInterval"/> to disable scanning.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.WriteBehindInterval">
            <summary>
            Time (ms) before flushing data.
            </summary>
            <remarks>
            Use <see cref="F:Demo3D.PLC.Comms.AccessParameters.DefaultInterval"/> to enable scanning at the default rate.
            Use <see cref="F:Demo3D.PLC.Comms.AccessParameters.OffInterval"/> to disable scanning.
            Use <see cref="F:Demo3D.PLC.Comms.AccessParameters.FastInterval"/> for the fastest scan rate.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Endian">
            <summary>
            The endianess of the underlying memory (or null to use the default).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.TextEncoding">
            <summary>
            The default text encoding (or null if to use the default).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.BoolEncoding">
            <summary>
            The bit pattern of a boolean.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.#ctor(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime,Demo3D.PLC.Comms.AccessRights,Demo3D.PLC.Comms.IOControl,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.UInt64)">
            <summary>
            Construct parameters for accessing a PLC tag or memory address.
            </summary>
            <param name="readScanInterval">The read scan interval for this tag.</param>
            <param name="writeScanInterval">The write scan interval from this tag.</param>
            <param name="access">The access rights for this tag/memory.</param>
            <param name="ioControl">The IO control for this tag/memory.</param>
            <param name="endian">The endianess of the tag data / memory.</param>
            <param name="textEncoding">The text formatting of the tag/memory.</param>
            <param name="boolEncoding">The bit pattern of a boolean.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.#ctor(Demo3D.PLC.Comms.AccessRights,Demo3D.PLC.Comms.IOControl,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.UInt64)">
            <summary>
            Construct parameters for accessing a PLC tag or memory address.
            </summary>
            <param name="access">The access rights for this tag/memory.</param>
            <param name="ioControl">The IO control for this tag/memory.</param>
            <param name="endian">The endianess of the tag data / memory.</param>
            <param name="textEncoding">The text formatting of the tag/memory.</param>
            <param name="boolEncoding">The bit pattern of a boolean.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.CanReadFromPLC">
            <summary>
            Have permission to read from the PLC.
            </summary>
            <returns>True if the access rights allow permission to read from the PLC.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.CanWriteToPLC">
            <summary>
            Have permission to write to the PLC.
            </summary>
            <returns>True if the access rights allow permission to write to the PLC.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.ReadScanEnabled">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.WriteBehindEnabled">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.ValidInterval(Demo3D.Time.ModelTime)">
            <summary>
            Returns a valid interval.
            </summary>
            <param name="interval">The interval to check.</param>
            <returns>The valid interval.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.GetReadScanInterval(System.Nullable{Demo3D.Time.ModelTime},System.Nullable{Demo3D.Time.ModelTime},System.Nullable{Demo3D.Time.ModelTime})">
            <summary>
            Returns the read scan interval as a time.
            </summary>
            <param name="minInterval">The minimum interval to return.</param>
            <param name="defaultInterval">The interval to return if Default is configured.</param>
            <param name="offInterval">The interval to return if read is disabled or Off is configured.</param>
            <returns>The read scan interval in milliseconds.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.GetWriteBehindInterval(System.Nullable{Demo3D.Time.ModelTime},System.Nullable{Demo3D.Time.ModelTime},System.Nullable{Demo3D.Time.ModelTime})">
            <summary>
            Returns the write behind interval as a time.
            </summary>
            <param name="minInterval">The minimum interval to return.</param>
            <param name="defaultInterval">The interval to return if Default is configured.</param>
            <param name="offInterval">The interval to return if write is disabled or Off is configured.</param>
            <returns>The read scan interval in milliseconds.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AccessParameters.Builder">
            <summary>
            An object for building <see cref="T:Demo3D.PLC.Comms.AccessParameters"/>.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.Builder.#ctor(Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Constucts a new Builder for constructing AccessParameters.
            </summary>
            <param name="original">The original access parameters.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.AccessRights">
            <summary>
            Access rights.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.IOControl">
            <summary>
            IO control.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.ReadScanInterval">
            <summary>
            Time (ms) between reads.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.WriteBehindInterval">
            <summary>
            Time (ms) before flushing data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.Endian">
            <summary>
            The endianess of the underlying memory (or null to use the default).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.TextEncoding">
            <summary>
            The default text encoding (or null if to use the default).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.BoolEncoding">
            <summary>
            The default boolean encoding.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.Builder.CanReadFromPLC">
            <summary>
            Have permission to read from the PLC.
            </summary>
            <returns>True if the access rights allow permission to read from the PLC.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.Builder.CanWriteToPLC">
            <summary>
            Have permission to write to the PLC.
            </summary>
            <returns>True if the access rights allow permission to write to the PLC.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.AccessParameters.Builder.Parameters">
            <summary>
            Return AccessParameters.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.Builder.ToString">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.MinInterval(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)">
            <summary>
            Returns the minimum of two intervals.  If either is Default then return the other interval.
            </summary>
            <param name="r1">First interval to check.</param>
            <param name="r2">Second interval to check.</param>
            <returns>The mimimum of the two intervals.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.MaxInterval(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)">
            <summary>
            Returns the maximum of two intervals.  If either is Default then return the other interval.
            </summary>
            <param name="r1">First interval to check.</param>
            <param name="r2">Second interval to check.</param>
            <returns>The maximum of the two intervals.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.MergeInterval(Demo3D.PLC.Comms.AccessRights,Demo3D.Time.ModelTime,Demo3D.PLC.Comms.AccessRights,Demo3D.Time.ModelTime,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Merge two intervals.
            </summary>
            <param name="a1">First access rights.</param>
            <param name="r1">First interval to merge.</param>
            <param name="a2">First access rights.</param>
            <param name="r2">Second interval to merge.</param>
            <param name="direction">The access direction.</param>
            <returns>The maximum of the two intervals.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.OR(Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Merge access parameters, OR'ing together the AccessRights.
            Scan interval returned is the minimum of the two scan intervals.
            IOControls are OR'ed together.
            Text and endian are returned only if they both agree.
            </summary>
            <param name="a">A set of access parameters to merge.</param>
            <param name="b">A set of access parameters to merge.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.AND(Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Merge access parameters, AND'ing together the AccessRights.
            Scan interval returned is the minimum of the two scan intervals.
            IOControls are OR'ed together.
            Text and endian are returned only if they both agree.
            </summary>
            <param name="a">A set of access parameters to merge.</param>
            <param name="b">A set of access parameters to merge.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.MergeClientParameters(Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.AccessParameters)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.UpdateCacheControls">
            <summary>
            Sets IOControl.DontAllowMerge and IOControl.WriteThrough, taking into account AccessRights and
            other IOControls.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.UpdateIntervals(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)">
            <summary>
            Sets ReadScanInterval and WriteBehindIntervals to their proper values, taking into account
            AccessRights and IOControl.FastScanRate, and replacing the placeholder value DefaultInterval.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.UpdateIntervals">
            <summary>
            Sets ReadScanInterval and WriteBehindIntervals to their proper values, taking into account
            AccessRights and IOControl.FastScanRate, and replacing the placeholder value DefaultInterval.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.SetIOControl(Demo3D.PLC.Comms.IOControl)">
            <summary>
            Returns <see cref="T:Demo3D.PLC.Comms.AccessParameters"/> with IO control set to <paramref name="ioControl"/>.
            </summary>
            <param name="ioControl">The new IO control.</param>
            <returns>A reference to these parameters if the IO controls are already set correctly, otherwise a new set of parameters.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.SetAccess(Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Returns <see cref="T:Demo3D.PLC.Comms.AccessParameters"/> with access rights set to <paramref name="toRights"/>.
            </summary>
            <param name="toRights">The new access rights.</param>
            <returns>A reference to these parameters if the rights are already set correctly, otherwise a new set of parameters.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.Equals(Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Determines whether the specified access parameters is equal to the current access parameters.
            </summary>
            <param name="other">The object to compare.</param>
            <returns>True if the specified access parameters are equal to the current access parameters</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.Equals(System.Object)">
            <summary>
            Determines whether the specified access parameters is equal to the current access parameters.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the specified access parameters are equal to the current access parameters</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.GetHashCode">
            <summary>
            Serves as a hash code for these access parameters.
            </summary>
            <returns>A hash code for these access parameters.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.ReadScanIntervalToString(Demo3D.Time.ModelTime)">
            <summary>
            Returns a string the represents the read scan interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>A string the represents the read scan interval.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.ReadScanIntervalToString(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)">
            <summary>
            Returns a string the represents the read scan interval range.
            </summary>
            <param name="min">The lower interval in the range.</param>
            <param name="max">The upper interval in the range.</param>
            <returns>A string the represents the interval range.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.WriteBehindIntervalToString(Demo3D.Time.ModelTime)">
            <summary>
            Returns a string the represents the write behind interval.
            </summary>
            <param name="interval">The interval.</param>
            <returns>A string the represents the write behind interval</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.WriteBehindIntervalToString(Demo3D.Time.ModelTime,Demo3D.Time.ModelTime)">
            <summary>
            Returns a string the represents the write behind interval range.
            </summary>
            <param name="min">The lower interval in the range.</param>
            <param name="max">The upper interval in the range.</param>
            <returns>A string the represents the interval range.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.ToString">
            <summary>
            Returns a string that represents these access parameters.
            </summary>
            <returns>A string that represents these access parameters.</returns>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.DefaultIntervalString">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.OffIntervalString">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.FastIntervalString">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.ReadScanIntervalDescription">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessParameters.WriteBehindIntervalDescription">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.TryParseReadInterval(System.String,Demo3D.Time.ModelTime@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.TryParseWriteInterval(System.String,Demo3D.Time.ModelTime@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.FormatReadInterval(Demo3D.Time.ModelTime)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessParameters.FormatWriteInterval(Demo3D.Time.ModelTime)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AccessRights">
            <summary>
            Whether a data item can be read or written.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessRights.Unknown">
            <summary>
            No access or unknown access.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessRights.ReadFromPLC">
            <summary>
            Demo3D can read; PLC writes.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessRights.WriteToPLC">
            <summary>
            Demo3D can write; PLC reads.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AccessRights.Bidirectional">
            <summary>
            Demo3D can read and write to the PLC.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.AccessRightsExtensions">
            <summary>
            Extension methods for <see cref="T:Demo3D.PLC.Comms.AccessRights"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessRightsExtensions.CanReadFromPLC(Demo3D.PLC.Comms.AccessRights)">
            <summary>
            True if <paramref name="accessRights"/> allows ReadFromPLC access.
            </summary>
            <param name="accessRights">The access rights to check.</param>
            <returns>True if ReadFromPLC access is allowed.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessRightsExtensions.CanWriteToPLC(Demo3D.PLC.Comms.AccessRights)">
            <summary>
            True if <paramref name="accessRights"/> allows WriteToPLC access.
            </summary>
            <param name="accessRights">The access rights to check.</param>
            <returns>True if WriteToPLC access is allowed.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessRightsExtensions.Reverse(Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Reverse access rights.
            </summary>
            <param name="accessRights">The rights to reverse.</param>
            <returns>The reversed access rights.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AccessRightsExtensions.GetAccess(Demo3D.PLC.Comms.AccessRights,System.Boolean)">
            <summary>
            Returns the access defined by this address.
            </summary>
            <param name="accessRights">The access rights.</param>
            <param name="isClient">True if the address is a client address used to connect to a server.</param>
            <returns>The access defined by an address.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.ParseAccess">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.ParseAccess.ParseSiemensAccess(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.ParseAccess.Parse(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.ParseAccess.Parse(System.String)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AddressArea">
            <summary>
            Describes an addressable area within an address space.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.Zero">
            <summary>
            The empty address area.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.BitAddress">
            <summary>
            Absolute address in the address space (in bits).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.NumBits">
            <summary>
            Length of this address range (in bits).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.#ctor(System.Int64,System.Int64)">
            <summary>
            Constructs an addressable area within an address space.
            </summary>
            <param name="bitAddress">The absolute address in the address space (in bits).</param>
            <param name="numBits">The length of this address range (in bits).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.#ctor(Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Constructs an addressable area within an address space.
            </summary>
            <param name="area">The addressable area to copy.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.FromBits">
            <summary>
            Absolute address in the addressable area (in bits).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.ToBits">
            <summary>
            Absolute address of the first bit beyond this addressable area.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.ByteAddress">
            <summary>
            Absolute address rounded down to the nearest byte.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.NumBytes">
            <summary>
            Number of bytes required to contain this addressable area.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.GetByteAligned">
            <summary>
            Return the smallest byte-aligned addressable area that contains this addressable area.
            </summary>
            <returns>The smallest byte-aligned addressable area that contains this addressable area.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.GetWordAligned(System.Int32)">
            <summary>
            Return the smallest word-aligned addressable area that contains this addressable area.
            </summary>
            <param name="wordBits">The number of bits in a word.</param>
            <returns>The smallest word-aligned addressable area that contains this addressable area.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Overlaps(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines whether these two addressable areas overlap at any point.
            </summary>
            <param name="fromBitsA">The start bit address of the first address to compare.</param>
            <param name="toBitsA">The number of bits in the first address to compare.</param>
            <param name="fromBitsB">The start bit address of the second address to compare.</param>
            <param name="toBitsB">The number of bits in the second address to compare.</param>
            <returns>True if these two addressable areas overlap at any point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Overlaps(System.Int64,System.Int64)">
            <summary>
            Determines whether the specified addressable area overlap the current addressable area at any point.
            </summary>
            <param name="fromBits">The start bit address of the address to compare.</param>
            <param name="toBits">The number of bits in the address to compare.</param>
            <returns>True if the specified addressable areas overlap the current addressable area at any point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Overlaps(Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Determines whether the specified addressable area overlaps the current addressable area at any point.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>True if the specified addressable areas overlap the current addressable area at any point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.OverlappingOrContiguous(System.Int64,System.Int64)">
            <summary>
            Determines whether the specified addressable area either overlaps at any point or is contiguous with the current addressable area.
            </summary>
            <param name="fromBits">The start bit address of the address to compare.</param>
            <param name="toBits">The number of bits in the address to compare.</param>
            <returns>True if the specified addressable area either overlaps at any point or is contiguous with the current addressable area.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.OverlappingOrContiguous(Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Determines whether the specified addressable area either overlaps at any point or is contiguous with the current addressable area.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>True if the specified addressable area either overlaps at any point or is contiguous with the current addressable area.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.OverlappingArea(Demo3D.PLC.Comms.AddressArea,Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Return the overlapping area between two addressable areas.
            </summary>
            <param name="a">The addressable area to merge.</param>
            <param name="b">The addressable area to merge.</param>
            <returns>The overlapping area.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.OverlappingArea(Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Return the overlapping area between this addressable area and 'other'.
            </summary>
            <param name="other">The addressable area to merge.</param>
            <returns>The overlapping area between this addressable area and 'other'.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Contains(System.Int64)">
            <summary>
            Determines whether the current addressable area contains <paramref name="address"/>.
            </summary>
            <param name="address">The address to compare.</param>
            <returns>True if the current addressable area contains <paramref name="address"/>.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Contains(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            Determines whether the first addressable area contains the second addressable area.
            </summary>
            <param name="fromBitsA">The start bit address of the first address to compare.</param>
            <param name="toBitsA">The number of bits in the first address to compare.</param>
            <param name="fromBitsB">The start bit address of the second address to compare.</param>
            <param name="toBitsB">The number of bits in the second address to compare.</param>
            <returns>True if the first addressable area contains the second addressable area.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Contains(Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Determines whether the current addressable area contains the specified addressable area.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>True if the current addressable area contains the specified addressable area.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Merge(Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Return the smallest addressable area that contains this addressable area and 'other'.
            </summary>
            <param name="other">The addressable area to merge.</param>
            <returns>The smallest addressable area that contains this addressable area and 'other'.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Shift(System.Int64)">
            <summary>
            Return a new addressable area that's shifted by <paramref name="shiftBits"/> bits.
            </summary>
            <param name="shiftBits">Number of bits to shift.</param>
            <returns>A new addressable area that's shifted by <paramref name="shiftBits"/> bits.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.CompareTo(Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Compares two addressable areas.
            </summary>
            <param name="other">The other area to compare.</param>
            <returns>
            A value that indicates the relative order of the areas being compared. The
            return value has the following meanings: Less than zero means this area is lower
            in the address space than other.  Greater than zero means that this area is
            higher in the address space than other.
            </returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.CompareTo(System.Object)">
            <summary>
            Compares two addressable areas.
            </summary>
            <param name="obj">The other area to compare.</param>
            <returns>
            A value that indicates the relative order of the areas being compared. The
            return value has the following meanings: Less than zero means this area is lower
            in the address space than other.  Greater than zero means that this area is
            higher in the address space than other.
            </returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.AddressArea.String">
            <summary>
            A string that represents the current addressable area.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Equals(Demo3D.PLC.Comms.AddressArea)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressArea.ToString">
            <summary>
            Returns a string that represents the current addressable area.
            </summary>
            <returns>A string that represents the current addressable area.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.AddressAreaExtensions">
            <summary>
            A class containing <see cref="T:Demo3D.PLC.Comms.AddressArea"/> extensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressAreaExtensions.IndexOfAddress``1(System.Collections.Generic.IReadOnlyList{``0},Demo3D.PLC.Comms.AddressArea,System.Func{``0,Demo3D.PLC.Comms.AddressArea})">
            <summary>
            Searches an ordered list of memory addressable areas using a binary search algorithm.
            Returns the index of the element that contains the address, or a negative number.
            The bitwise complement operator (~) can be applied to a negative result to produce
            the index of the first element (if any) that is larger than the given address.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="areas">The list of address areas.</param>
            <param name="getArea">Delegate for returning the address area from an element of <paramref name="areas"/>.</param>
            <param name="address">The address to search.</param>
            <returns>
            The index of the element that contains the address or a negative number.
            The bitwise complement operator (~) can be applied to a negative result to produce
            the index of the first element (if any) that is larger than the given address.
            </returns>
            <remarks>
            This method does not work for overlapping addressable areas.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressAreaExtensions.IndexOfAddress``1(System.Collections.Generic.IReadOnlyList{``0},System.Int64,System.Func{``0,Demo3D.PLC.Comms.AddressArea})">
            <summary>
            Searches an ordered list of memory address areas using a binary search algorithm.
            Returns the index of the element that contains the address, or a negative number.
            The bitwise complement operator (~) can be applied to a negative result to produce
            the index of the first element (if any) that is larger than the given address.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="areas">The list of address areas.</param>
            <param name="getArea">Delegate for returning the address area from an element of <paramref name="areas"/>.</param>
            <param name="address">The address to search.</param>
            <returns>
            The index of the element that contains the address or a negative number.
            The bitwise complement operator (~) can be applied to a negative result to produce
            the index of the first element (if any) that is larger than the given address.
            </returns>
            <remarks>
            This method does not work for overlapping addressable areas.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.BrowseItemBase">
            <summary>
            Base implmentation of <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/>.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseItemBase.Null">
            <summary>
            The null browse item.  No name, not accessible, no children.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseItemBase.NoChildren">
            <summary>
            A template to return from <see cref="M:Demo3D.PLC.Comms.BrowseItemBase.GetChildren(Demo3D.PLC.Comms.BrowseFlags)"/> if there are no children.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseItemBase.children">
            <summary>
            Access to the list of child browse items.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBase.Parent">
            <summary>
            The parent of this browse item.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBase.Name">
            <summary>
            The name of this browse item node.
            </summary>
            <remarks>
            This name will (in many cases) end up via <see cref="M:Demo3D.PLC.Comms.BrowseItemExtensions.FullName(Demo3D.PLC.Comms.IBrowseItem,System.Char)"/> as
            part of the <see cref="P:Demo3D.TagServer.ServerItem.ItemID"/>.  If you want a longer more descriptive name to appear in the
            Tag Server Explorer then use <see cref="P:Demo3D.PLC.Comms.IBrowseItemDescription.DescriptiveName"/> as well.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.BrowseItemBase.SearchFlags">
            <summary>
            Search control flags.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseItemBase.SearchFlags.DeepSearchExcludingArrays">
            <summary>
            Searches every symbol for one with a name that matches exactly the symbol name, but
            does not search through arrays.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseItemBase.SearchFlags.DeepSeach">
            <summary>
            Searches every symbol for one with a name that matches exactly the symbol name.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseItemBase.SearchFlags.DirectedSearch">
            <summary>
            The symbol name is a dot separated path traversing the symbol table.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBase.AllowDeepSearch">
            <summary>
            When searching for an item by AccessName, defines whether to deep search the symbol table.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.#ctor">
            <summary>
            Constructs a new root branch.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new browse item.
            </summary>
            <param name="parent">The parent browse item (or null).</param>
            <param name="name">The name of the browse item.</param>
            <param name="accessName">The name used to access the browse item in the server.</param>
            <param name="isItem">True if this item can be loaded.</param>
            <param name="isBranch">True if this item has children and can be expanded.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructs a new browse item.
            </summary>
            <param name="parent">The parent browse item (or null).</param>
            <param name="name">The name of the browse item.</param>
            <param name="isItem">True if this item can be loaded.</param>
            <param name="isBranch">True if this item has children and can be expanded.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBase.DescriptiveName">
            <summary>
            A descriptive name (shown in the Tag Server Explorer), or null to use <see cref="P:Demo3D.PLC.Comms.IBrowseItem.Name"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBase.Description">
            <summary>
            Description / comment for this browse item node.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBase.IsItem">
            <summary>
            Returns true if this item can be loaded.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBase.IsBranch">
            <summary>
            Returns true if this item has children and can be expanded.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.GetChildren(Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Return children of a branch item.
            </summary>
            <param name="flags">Browse control flags.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.FindChildByName(Demo3D.PLC.Comms.IBrowseItem,System.String)">
            <summary>
            Performs a directed search assuming FullName is formatted as "ParentName.ChildName".
            </summary>
            <param name="branch">The branch to search.</param>
            <param name="findName">The name of the item to find.</param>
            <returns>The browse item, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.FindChildByAccessName(Demo3D.PLC.Comms.IBrowseItem,System.String,Demo3D.PLC.Comms.BrowseItemBase.SearchFlags)">
            <summary>
            Performs a directed search assuming that AccessName is formatted as "ParentName.ChildName".
            If that fails, then it performs a deep search for an item with matching AccessName (but only
            down from the point in the tree where the directed search failed).
            </summary>
            <param name="branch">The branch to search.</param>
            <param name="findAccessName">The AccessName of the item to find.</param>
            <param name="searchFlags">Control deep search for the access name.</param>
            <returns>The browse item, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.FindChild(System.String,System.String)">
            <summary>
            Defaults to FindChildByAccessName.
            </summary>
            <param name="itemName">The name of the child to find.</param>
            <param name="accessName">The address/accessName of the child to find.</param>
            <returns>The browse item, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBase.ToString">
            <summary>
            Returns a string that represents the current browse item.
            </summary>
            <returns>A string that represents the current browse item.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.BrowseItemBranch">
            <summary>
            A base class for implementing a symbol table branch.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.#ctor">
            <summary>
            Constructs a new symbol table root.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.#ctor(System.Collections.Generic.IEnumerable{Demo3D.PLC.Comms.IBrowseItem})">
            <summary>
            Constructs a new symbol table root.
            </summary>
            <param name="items">Child items.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String)">
            <summary>
            Constructs a new symbol table branch.
            </summary>
            <param name="parent">Branch parent.</param>
            <param name="name">Branch name.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String,System.Collections.Generic.IEnumerable{Demo3D.PLC.Comms.IBrowseItem})">
            <summary>
            Constructs a new symbol table branch.
            </summary>
            <param name="parent">Branch parent.</param>
            <param name="name">Branch name.</param>
            <param name="items">Child items.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String,System.String,System.Boolean)">
            <summary>
            Constructs a new symbol table entry.
            </summary>
            <param name="parent">Branch parent.</param>
            <param name="name">The name of the symbol.</param>
            <param name="accessName">The name used to access the symbol in the PLC.</param>
            <param name="isItem">True if this symbol can be accessed for IO.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String,System.Boolean)">
            <summary>
            Constructs a new symbol table entry.
            </summary>
            <param name="parent">Branch parent.</param>
            <param name="name">The name of the symbol.</param>
            <param name="isItem">True if this symbol can be accessed for IO.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBranch.Symbols">
            <summary>
            A list of all the children of a branch item.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BrowseItemBranch.IsBranch">
            <summary>
            Returns true if this item has children and can be expanded.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.Add(Demo3D.PLC.Comms.IBrowseItem)">
            <summary>
            Adds a child symbol to a branch item.
            </summary>
            <param name="symbol">Symbol to add.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.AddRange(System.Collections.Generic.IEnumerable{Demo3D.PLC.Comms.IBrowseItem})">
            <summary>
            Adds a child symbols to a branch item.
            </summary>
            <param name="symbols">Symbols to add.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.Remove(Demo3D.PLC.Comms.IBrowseItem)">
            <summary>
            Removes a child symbol from a branch item.
            </summary>
            <param name="symbol">Symbol to remove.</param>
            <returns>True if the symbol was removed.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemBranch.GetChildren(Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Return children of a branch item.
            </summary>
            <param name="flags">Browse control flags.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.IAddress">
            <summary>
            An address of some sort.
            </summary>
            <remarks>
            <para>
            Type inheritance tree for memory addresses is typically
                <see cref="T:Demo3D.PLC.Comms.IAddress"/>,
                <see cref="T:Demo3D.PLC.Comms.StringAddress"/>,
                <see cref="T:Demo3D.PLC.Comms.MemoryAddress"/>,
                <see cref="T:Demo3D.PLC.Comms.TypedMemoryAddress"/>,
                specific PLC memory address types (eg Siemens.SiemensAddress).
            </para>
            <para>
            Type inheritance tree for tag addresses is typically
                <see cref="T:Demo3D.PLC.Comms.IAddress"/>,
                <see cref="T:Demo3D.PLC.Comms.StringAddress"/>,
                <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/>,
                <see cref="T:Demo3D.PLC.Comms.BrowseItemBase"/>,
                <see cref="T:Demo3D.PLC.Comms.BrowseItemBranch"/>,
                specific PLC tag address (eg BRAutomation.PVar).
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.IAddress.AccessName">
            <summary>
            User printable string address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IAddress.AllowedAccess">
            <summary>
            The access rights for this address.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IAddress.GetDataType(Demo3D.PLC.Comms.DataType@,System.Boolean@)">
            <summary>
            Returns the type defined by this address.
            </summary>
            <param name="type">The data type.</param>
            <param name="stronglyTyped">
            A measure of how confident we are about the data type.
            True if this is the definitive type of the address.
            False if this is a best guess.
            </param>
        </member>
        <member name="T:Demo3D.PLC.Comms.AddressExtensions">
            <summary>
            A class containing extension methods for <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressExtensions.Parse(System.Type,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressExtensions.Parse``1(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressExtensions.Convert(Demo3D.PLC.Comms.IAddress,System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressExtensions.Convert``1(Demo3D.PLC.Comms.IAddress)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressExtensions.GetDataType(Demo3D.PLC.Comms.IAddress)">
            <summary>
            Returns the type defined by this address.
            </summary>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressExtensions.ToString(Demo3D.PLC.Comms.IAddress,System.Type)">
            <summary>
            Return string representation using the format for <paramref name="asAddressType"/>.
            </summary>
            <param name="address">The address.</param>
            <param name="asAddressType">The format of the address.</param>
            <returns>String representation of the address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressExtensions.ToString``1(Demo3D.PLC.Comms.IAddress)">
            <summary>
            Return string representation using the format for <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The format of the address.</typeparam>
            <param name="address">The address.</param>
            <returns>String representation of the address.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.IAddressSpace">
            <summary>
            Memory address space identifier.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IAddressSpace.CreateAddress(System.Int64,Demo3D.PLC.Comms.DataType,System.Boolean)">
            <summary>
            Creates a new address with the specified parameters.
            </summary>
            <param name="bitAddress">The address offset.</param>
            <param name="dataType">The data type of the address.</param>
            <param name="stronglyTyped">The <paramref name="dataType"/> is strongly typed.</param>
            <returns>The new address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.IAddressSpace.ToString(Demo3D.PLC.Comms.IAddress)">
            <summary>
            User printable string address.
            </summary>
            <param name="address">The address to format.</param>
            <returns>String representation of the address.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.IAddressTranslatorService">
            <summary>
            Translator service for mapping from one <see cref="T:Demo3D.PLC.Comms.IAddress"/> to another <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IAddressTranslatorService.RegisterMap(System.Type,System.Type,System.Func{Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.IAddress},System.Boolean,System.Object)">
            <summary>
            Register an address mapping function.
            </summary>
            <param name="from">The type of data to map.</param>
            <param name="to">The type of data that this mapping function creates.</param>
            <param name="mappingFunction">The mapping function to register.</param>
            <param name="overwrite">True to unregister any previous mapping function first.</param>
            <param name="description">String or property bag to describe the mapping function (or null).  Appears in the property grid.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.IAddressTranslatorService.UnregisterMap(System.Type,System.Type)">
            <summary>
            Unregister an address mapping function.
            </summary>
            <param name="from">The type of data to map.</param>
            <param name="to">The type of data that this mapping function creates.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.IAddressTranslatorService.UnregisterMap(System.Func{Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.IAddress})">
            <summary>
            Unregister an address mapping function.
            </summary>
            <param name="mappingFunction">The mapping function to unregister.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.IAddressTranslatorService.Translate(System.Type,Demo3D.PLC.Comms.IAddress,System.Collections.Generic.List{Demo3D.PLC.Comms.IAddress})">
            <summary>
            Translate address from one form to another.
            </summary>
            <param name="addressType">The type of the address to return.</param>
            <param name="address">The address to convert.</param>
            <param name="translations">Populated with the address translations.</param>
            <returns>An address of the correct form, or null.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.AddressTranslatorServiceExtensions">
            <summary>
            A class containing extension methods for <see cref="T:Demo3D.PLC.Comms.IAddressTranslatorService"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressTranslatorServiceExtensions.Translate(Demo3D.PLC.Comms.IAddressTranslatorService,System.Type,Demo3D.PLC.Comms.IAddress)">
            <summary>
            Translate address from one form to another.
            </summary>
            <param name="addressTranslator">The address translator.</param>
            <param name="addressType">The type of the address to return.</param>
            <param name="address">The address to convert.</param>
            <returns>An address of the correct form, or null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AddressTranslatorServiceExtensions.Translate(Demo3D.PLC.Comms.IAddressTranslatorService,System.Type,System.String)">
            <summary>
            Translate a string address to an IAddress.
            </summary>
            <param name="addressTranslator">The address translator.</param>
            <param name="addressType">The type of the address to return.</param>
            <param name="address">The address to convert.</param>
            <returns>An address of the correct form, or null.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.BrowseFlags">
            <summary>
            Browse control flags.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseFlags.Default">
            <summary>
            Default flags.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.BrowseFlags.CachedOnly">
            <summary>
            Only return cached browse items.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.BrowseFlagsExtension">
            <summary>
            Extension methods for <see cref="T:Demo3D.PLC.Comms.BrowseFlags"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseFlagsExtension.CachedOnly(Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Only return cached browse items.
            </summary>
            <param name="flags">The current set of flags.</param>
            <returns>True if the flags contain the <see cref="F:Demo3D.PLC.Comms.BrowseFlags.CachedOnly"/> flag.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.IBrowseItemDescription">
            <summary>
            Extensions to the core <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/> to provide more detail.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IBrowseItemDescription.DescriptiveName">
            <summary>
            A descriptive name (shown in the Tag Server Explorer), or null to use <see cref="P:Demo3D.PLC.Comms.IBrowseItem.Name"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IBrowseItemDescription.Description">
            <summary>
            A comment / description associated with a symbol (or null).
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.IBrowseItem">
            <summary>
            A browsable item, usually representing a symbol in the PLC symbol table.
            Can optionally also implement <see cref="T:Demo3D.PLC.Comms.IBrowseItemDescription"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IBrowseItem.Parent">
            <summary>
            The parent browse item.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IBrowseItem.Name">
            <summary>
            The name of this browse item node.
            </summary>
            <remarks>
            This name will (in many cases) end up via <see cref="M:Demo3D.PLC.Comms.BrowseItemExtensions.FullName(Demo3D.PLC.Comms.IBrowseItem,System.Char)"/> as
            part of the <see cref="P:Demo3D.TagServer.ServerItem.ItemID"/>.  If you want a longer more descriptive name to appear in the
            Tag Server Explorer then use <see cref="P:Demo3D.PLC.Comms.IBrowseItemDescription.DescriptiveName"/> as well.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.IBrowseItem.IsItem">
            <summary>
            True if this item can be loaded.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IBrowseItem.IsBranch">
            <summary>
            True if this item has children and can be expanded.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IBrowseItem.GetChildren(Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Return children of a branch item.
            </summary>
            <param name="flags">Browse control flags.</param>
            <returns>A sequence of child nodes, or null if the current node is not populated.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.IBrowseItem.FindChild(System.String,System.String)">
            <summary>
            Find a child item with the given itemName or accessName.
            </summary>
            <param name="itemName">The name of the child to find.</param>
            <param name="accessName">The address/accessName of the child to find.</param>
            <returns>The browse item, or null if not found.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.BrowseItemExtensions">
            <summary>
            Extension methods for <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.FullName(Demo3D.PLC.Comms.IBrowseItem,System.Char)">
            <summary>
            Returns the full (usually dot separated) name.
            </summary>
            <param name="browseItem">The browseItem.</param>
            <param name="separator">Path separator.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.FindChild(Demo3D.PLC.Comms.IBrowseItem,System.String)">
            <summary>
            Finds a child item with the given name.
            </summary>
            <param name="branch">The browseItem to search.</param>
            <param name="name">The name of the child to find.</param>
            <returns>The browse item, or null if not found.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.TreatAsItem(Demo3D.PLC.Comms.IBrowseItem,Demo3D.TagServer.IServer)">
            <summary>
            Gets a value indicating whether this branch should be treated as an item.
            </summary>
            <param name="branch">The branch.</param>
            <param name="server">The server to check.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.AssociatedServerItem(Demo3D.PLC.Comms.IBrowseItem,Demo3D.TagServer.IServer)">
            <summary>
            Gets one ServerItem corresponding to a browseItem.
            </summary>
            <param name="browseItem">The browse item.</param>
            <param name="server">The server to check.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.SiblingServerItems(Demo3D.PLC.Comms.IBrowseItem,Demo3D.TagServer.IServer)">
            <summary>
            Gets all sibling server items belonging to this browseItem.
            </summary>
            <param name="browseItem">The browse item.</param>
            <param name="server">The server to check.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.IsAnyLoaded(Demo3D.PLC.Comms.IBrowseItem,Demo3D.TagServer.IServer,Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Gets a value indicating whether any items from the branch have been loaded.
            </summary>
            <param name="browseItem">The branch.</param>
            <param name="server">The server to check.</param>
            <param name="flags">Browse control flags.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.IsAnyLoaded(Demo3D.PLC.Comms.IBrowseItem,System.Collections.Generic.HashSet{Demo3D.PLC.Comms.IBrowseItem},Demo3D.TagServer.IServer,Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Gets a value indicating whether any items from the branch have been loaded.
            </summary>
            <param name="browseItem">The branch.</param>
            <param name="server">The server to check.</param>
            <param name="flags">Browse control flags.</param>
            <param name="checkedBrowseItems">List of items already checked.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.IsAllLoaded(Demo3D.PLC.Comms.IBrowseItem,Demo3D.TagServer.IServer,Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Gets a value indicating whether all items from the browseItem have been loaded.
            </summary>
            <param name="browseItem">The branch.</param>
            <param name="server">The server to check.</param>
            <param name="flags">Browse control flags.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BrowseItemExtensions.IsAnyLoadable(Demo3D.PLC.Comms.IBrowseItem,Demo3D.PLC.Comms.BrowseFlags)">
            <summary>
            Gets a value indicating whether any item, or sub-items, can be loaded.
            </summary>
            <param name="browseItem">The branch.</param>
            <param name="flags">Browse control flags.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.IConnectionPoint">
            <summary>
            A single connection point.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.IConnectionPoint.ValueChanged">
            <summary>
            Occurs when the value of the item changes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IConnectionPoint.Value">
            <summary>
            Gets or sets the value of the item.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IConnectionPoint.Release">
            <summary>
            Releases the connection point.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.IConnectionPointContainer">
            <summary>
            A custom object that contains connection points.
            Add this as an aspect on a visual to make the visual appear in the loopback tag server.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IConnectionPointContainer.Name">
            <summary>
            The name of the container.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IConnectionPointContainer.GetTagAsync(System.Boolean,Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Subscribe to a symbol.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="symbol">The symbol to access.</param>
            <param name="accessParameters">Requested access parameters.</param>
            <returns>A connection point.</returns>
            <remarks>
            <para>
            <paramref name="symbol"/> would normally be a symbol returned by <see cref="M:Demo3D.PLC.Comms.ISymbolTable.GetSymbolTableAsync(System.Boolean)"/>.
            For connections that cannot provide a symbol table, you can pass in an address provided by some other mechanism
            instead.
            </para>
            <para>
            <paramref name="accessParameters"/> controls how the symbol should be accessed.  Normally you only specify the
            access rights (Read or Write to PLC), in which case you can either use the simpler API
            <see cref="M:Demo3D.PLC.Comms.ConnectionPointContainerExtensions.GetTagAsync(Demo3D.PLC.Comms.IConnectionPointContainer,Demo3D.PLC.Comms.IBrowseItem,Demo3D.PLC.Comms.AccessRights)"/>
            to specify the access rights, or just
            <see cref="M:Demo3D.PLC.Comms.ConnectionPointContainerExtensions.GetTagAsync(Demo3D.PLC.Comms.IConnectionPointContainer,Demo3D.PLC.Comms.IBrowseItem)"/>
            to use the access rights defined by the symbol.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.ConnectionPointContainerExtensions">
            <summary>
            IConnectionPointContainer extensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.ConnectionPointContainerExtensions.GetTagAsync(Demo3D.PLC.Comms.IConnectionPointContainer,Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Subscribe to a symbol.
            </summary>
            <param name="container">The container owning the browseItem.</param>
            <param name="symbol">The symbol to access.</param>
            <param name="accessParameters">Requested access parameters.</param>
            <returns>A connection point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.ConnectionPointContainerExtensions.GetTagAsync(Demo3D.PLC.Comms.IConnectionPointContainer,System.Boolean,Demo3D.PLC.Comms.IBrowseItem)">
            <summary>
            Subscribe to a symbol.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="container">The container owning the browseItem.</param>
            <param name="browseItem">The symbol to access.</param>
            <returns>A connection point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.ConnectionPointContainerExtensions.GetTagAsync(Demo3D.PLC.Comms.IConnectionPointContainer,Demo3D.PLC.Comms.IBrowseItem)">
            <summary>
            Subscribe to a symbol.
            </summary>
            <param name="container">The container owning the browseItem.</param>
            <param name="browseItem">The symbol to access.</param>
            <returns>A connection point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.ConnectionPointContainerExtensions.GetTagAsync(Demo3D.PLC.Comms.IConnectionPointContainer,System.Boolean,Demo3D.PLC.Comms.IBrowseItem,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Subscribe to a symbol.
            </summary>
            <param name="container">The container owning the browseItem.</param>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="browseItem">The symbol to access.</param>
            <param name="accessRights">Requested access.</param>
            <returns>A connection point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.ConnectionPointContainerExtensions.GetTagAsync(Demo3D.PLC.Comms.IConnectionPointContainer,Demo3D.PLC.Comms.IBrowseItem,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Subscribe to a symbol.
            </summary>
            <param name="container">The container owning the browseItem.</param>
            <param name="browseItem">The symbol to access.</param>
            <param name="accessRights">Requested access.</param>
            <returns>A connection point.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CanModifySymbolFlags">
            <summary>
            Flags describing how a symbol can be modified.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanModifySymbolFlags.None">
            <summary>
            The symbol cannot be modified.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanModifySymbolFlags.Create">
            <summary>
            The symbol can create child symbols.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanModifySymbolFlags.Delete">
            <summary>
            The symbol can be deleted from its branch.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanModifySymbolFlags.Rename">
            <summary>
            The symbol can be renamed.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.IModifySymbolTable">
            <summary>
            An interface for modifying a symbol table.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IModifySymbolTable.CanModifySymbolAsync(System.Boolean,Demo3D.PLC.Comms.IBrowseItem)">
            <summary>
            Returns <see cref="T:Demo3D.PLC.Comms.CanModifySymbolFlags"/> if the symbol can be modified.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="symbol">Symbol item.</param>
            <returns>Modify flags.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.IModifySymbolTable.CreateSymbolAsync(System.Boolean,Demo3D.PLC.Comms.IBrowseItem)">
            <summary>
            Creates a new child symbol under the specified symbol.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="symbol">Symbol item.</param>
            <returns>Created symbol, or null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.IModifySymbolTable.DeleteSymbolAsync(System.Boolean,Demo3D.PLC.Comms.IBrowseItem)">
            <summary>
            Deletes a symbol from its branch.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="symbol">Symbol to delete.</param>
            <returns>True if the symbol was deleted.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.IModifySymbolTable.RenameSymbolAsync(System.Boolean,Demo3D.PLC.Comms.IBrowseItem,System.String)">
            <summary>
            Renames a symbol.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="symbol">Symbol to rename.</param>
            <param name="name">New name.</param>
            <returns>True if the symbol was renamed successfully.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CanReadSymbolsFlags">
            <summary>
            Flags describing whether and how to read the symbol table.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanReadSymbolsFlags.Yes">
            <summary>
            Can read symbol table.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanReadSymbolsFlags.No">
            <summary>
            Symbol table is permanently unavailable.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanReadSymbolsFlags.TemporarilyUnavailable">
            <summary>
            Symbol table is temporarily unavailable.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanReadSymbolsFlags.RequiresConnection">
            <summary>
            Reading symbol table requires connection to be running.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CanReadSymbolsFlags.YesWithConnection">
            <summary>
            Yes, but requires a connection to read the symbol table.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.ISymbolTable">
            <summary>
            An interface for providing access to a symbol table.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.ISymbolTable.CanReadSymbols">
            <summary>
            Returns whether <see cref="M:Demo3D.PLC.Comms.ISymbolTable.GetSymbolTableAsync(System.Boolean)"/> is expected to be able to read the PLC symbol table.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.ISymbolTable.GetSymbolTableAsync(System.Boolean)">
            <summary>
            Read the symbol table from the PLC.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <returns>The browse root (or null if the symbol table can't be read).</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.INotifySymbolTable">
            <summary>
            Notifies when the symbol table changes.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.INotifySymbolTable.SymbolTableChanged">
            <summary>
            Occurs when the symbol table has changed.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.MemoryAddress">
            <summary>
            A memory address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.AddressSpace">
            <summary>
            The memory address space.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.Area">
            <summary>
            The memory area.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.#ctor(Demo3D.PLC.Comms.IAddressSpace,Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Constructs a MemoryAddress.
            </summary>
            <param name="addressSpace">The address space of the memory bank.</param>
            <param name="area">The address area (address offset and length).</param>
            <remarks>
            You cannot serialize out a MemoryAddress unless it's an instance of a derived class
            that implements a serializer that includes address space information.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.#ctor(Demo3D.PLC.Comms.IAddressSpace,System.Int64,System.Int64)">
            <summary>
            Constructs a MemoryAddress.
            </summary>
            <param name="addressSpace">The address space of the memory bank.</param>
            <param name="bitAddress">The address offset.</param>
            <param name="numBits">The lenfth of the addressed area.</param>
            <remarks>
            You cannot serialize out a MemoryAddress unless it's an instance of a derived class
            that implements a serializer that includes address space information.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.#ctor(Demo3D.PLC.Comms.IAddressSpace)">
            <summary>
            Constructs the empty TypedMemoryAddress.
            </summary>
            <param name="addressSpace">The address space of the memory bank.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.#ctor">
            <summary>
            Constructs a default MemoryAddress.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.BitAddress">
            <summary>
            Absolute address in the address space (in bits).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.ByteAddress">
            <summary>
            Byte offset.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.Bit">
            <summary>
            Bit within byte.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.NumBits">
            <summary>
            Length of this address range (in bits).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.NumBytes">
            <summary>
            Number of bytes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddress.AccessName">
            <summary>
            A string representation of this address.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.Overlaps(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Determines whether the specified address overlaps the current address at any point.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>True if  the specified address overlaps the current address at any point.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.Contains(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Determines whether the current address contains the specified address.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>True if the current address contains the specified address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.SetAddressSpace(Demo3D.PLC.Comms.IAddressSpace)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.SetArea(Demo3D.PLC.Comms.AddressArea)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.ReadProperty(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.ReadProperties(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.WriteProperties(Demo3D.Common.Serializer)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.CompareTo(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Compares two memory addresses.
            </summary>
            <param name="other">The other memory address to compare.</param>
            <returns>
            A value that indicates the relative order of the addresses being compared. The
            return value has the following meanings: Less than zero means this address is lower
            in its address space than other.  Greater than zero means that this address is
            higher in its address space than other.
            </returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.CompareTo(System.Object)">
            <summary>
            Compares two memory addresses.
            </summary>
            <param name="obj">The other memory address to compare.</param>
            <returns>
            A value that indicates the relative order of the addresses being compared. The
            return value has the following meanings: Less than zero means this address is lower
            in its address space than other.  Greater than zero means that this address is
            higher in its address space than other.
            </returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.Equals(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Determines whether the specified address equals the current address.
            </summary>
            <param name="other">The address to compare.</param>
            <returns>True if the specified address equals the current address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.Equals(Demo3D.PLC.Comms.StringAddress)">
            <summary>
            Determines whether the specified address equals the current address.
            </summary>
            <param name="address">The address to compare.</param>
            <returns>True if the specified address equals the current address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.GetHashCode">
            <summary>
            Returns a hash code for this address.
            </summary>
            <returns>A hash code for this address.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.MemoryAddress.MemoryAddressConverter`1">
            <summary>
            A base data type converter.
            </summary>
            <typeparam name="AddressType">The address type.</typeparam>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.MemoryAddressConverter`1.ParseAddress(System.String)">
            <summary>
            Parses an address string.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>The parsed address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.MemoryAddressConverter`1.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.MemoryAddressConverter`1.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.MemoryAddressConverter`1.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddress.MemoryAddressConverter`1.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.MemoryAddressExtensions">
            <summary>
            A class containing extension methods for <see cref="T:Demo3D.PLC.Comms.MemoryAddress"/>.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddressExtensions.IndexOfAddress``1(System.Collections.Generic.IReadOnlyList{``0},Demo3D.PLC.Comms.MemoryAddress,System.Func{``0,Demo3D.PLC.Comms.MemoryAddress})">
            <summary>
            Searches an ordered list of memory addresses using a binary search algorithm.
            Returns the index of the first element that contains the address, or a negative number.
            The bitwise complement operator (~) can be applied to a negative result to produce
            the index of the first element (if any) that is larger than the given address.
            </summary>
            <typeparam name="T">The type of the source object.</typeparam>
            <param name="addresses">The list of addresses.</param>
            <param name="getAddress">Delegate for returning the address from an element of <paramref name="addresses"/>.</param>
            <param name="address">The address to search.</param>
            <returns>
            The index of the first element that contains the address or a negative number.
            The bitwise complement operator (~) can be applied to a negative result to produce
            the index of the first element (if any) that is larger than the given address.
            </returns>
            <remarks>
            This method does not work for overlapping addresses.  Use <see cref="T:Demo3D.PLC.Comms.MemoryAddressList`1"/> instead.
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.MemoryAddressList`1">
            <summary>
            A dictionary of items keyed by memory address area.
            </summary>
            <typeparam name="ValueType">The type of the value in the dictionary.</typeparam>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddressList`1.Count">
            <summary>
            Returns the number of elements in the dictionary.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddressList`1.Values">
            <summary>
            Returns all the values in the dictionary in ascending order of the start address of the keyed memory area.
            Where more than one entry exists in the list with the same start address, returns the elements in increasing size order (smallest first).
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemoryAddressList`1.ValuesDecreasing">
            <summary>
            Returns all the values in the dictionary in ascending order of the start address of the keyed memory area.
            Where more than one entry exists in the list with the same start address, returns the elements in decreasing size order (largest first).
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddressList`1.Add(Demo3D.PLC.Comms.MemoryAddress,`0)">
            <summary>
            Add an element to the dictionary.
            </summary>
            <param name="address">The address area.</param>
            <param name="value">The dictionary value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddressList`1.Remove(Demo3D.PLC.Comms.MemoryAddress,`0)">
            <summary>
            Removes an element from the dictionary.
            </summary>
            <param name="address">The address area.</param>
            <param name="value">The dictionary value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddressList`1.Find(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Returns all the values in the dictionary that match the given address area, in ascending order of the start address of the keyed memory area.
            Where more than one entry exists in the list with the same start address, returns the elements in decreasing size order (largest first).
            </summary>
            <param name="address">The address area to match.</param>
            <returns>All the values in the dictionary that match the given address area.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddressList`1.GetValues(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Returns an enumerator starting at the first interval that overlaps the given address.
            May return intervals that entirely preceed the given address.
            Will iterate to the end of the list - you must exit the iterator when you've seen all the intervals you need.
            </summary>
            <param name="address">The address area to start the iterator.</param>
            <returns>An iterator of interval/value pairs.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemoryAddressList`1.Clear">
            <summary>
            Clears the dictionary.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.MemorySymbolTable`1">
            <summary>
            A class for constructing symbol tables for servers that are primarily accessed with memory addresses.
            </summary>
            <typeparam name="AddressType">The type of address used by the PLC.  Should inherit from <see cref="T:Demo3D.PLC.Comms.TypedMemoryAddress"/></typeparam>
        </member>
        <member name="T:Demo3D.PLC.Comms.MemorySymbolTable`1.Symbol">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemorySymbolTable`1.Symbol.Address">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemorySymbolTable`1.Symbol.TypeName">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemorySymbolTable`1.Symbol.DescriptiveName">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemorySymbolTable`1.Symbol.Description">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.MemorySymbolTable`1.Symbol.AllowedAccess">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.#ctor(Demo3D.PLC.Comms.Alignment,System.String)">
            <summary>
            Constructs a new MemorySymbolTable.
            </summary>
            <param name="alignment">Optional memory layout / alignment helper (or null).</param>
            <param name="name">Optional name.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.#ctor(Demo3D.PLC.Comms.MemorySymbolTable{`0},System.String)">
            <summary>
            Constructs a new branch and adds the branch to the parent symbol table or branch.
            </summary>
            <param name="parent">The parent symbol table or branch.</param>
            <param name="name">The name of the branch.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.RegisterAddressMap(Demo3D.PLC.Comms.IAddressTranslatorService)">
            <summary>
            Registers a symbol to address translation function with the given address translator.
            </summary>
            <param name="addressTranslator">The address translator to register the symbol table with.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.RegisterAddressMap(Demo3D.Net.ProtocolSocket)">
            <summary>
            Registers a symbol to address translation function with the given address translator.
            </summary>
            <param name="socket">The socket associated with the PLC connection to register the symbol table with.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.SetNextAddress(Demo3D.PLC.Comms.IAddressSpace,System.Int64)">
            <summary>
            Sets the next address that will be used by <see cref="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.IAddressSpace,System.Int64,System.Boolean,System.String)"/>.
            </summary>
            <param name="addressSpace">The address space.</param>
            <param name="bitAddress">The next address to use.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.SetNextAddress(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Sets the next address that will be used by <see cref="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.MemoryAddress,System.Boolean,System.String)"/>.
            </summary>
            <param name="address">The next address to use.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.IAddressSpace,System.Int64,System.Boolean,System.String)">
            <summary>
            Adds a symbol to the current symbol table or branch.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="dataType">The data type of the symbol.</param>
            <param name="addressSpace">The address space of the symbol, or null to automatically select the next address/>.</param>
            <param name="bitAddress">The address of the symbol, or -1 to automatically select the next address/>.</param>
            <param name="stronglyTyped">The symbol is strongly typed.</param>
            <param name="description">The symbol description (or null).</param>
            <returns>The symbol container.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,System.Type,Demo3D.PLC.Comms.IAddressSpace,System.Int64,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.DataDimension},System.Int32,System.String)">
            <summary>
            Adds a symbol to the current symbol table or branch.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="dataType">The data type of the symbol.  For an array, this must be the type of one base element.</param>
            <param name="addressSpace">The address space of the symbol, or null to automatically select the next address/>.</param>
            <param name="bitAddress">The address of the symbol, or -1 to automatically select the next address/>.</param>
            <param name="dimensions">The dimensions of the array (or null).</param>
            <param name="sizeBits">The size in bits, or -1 to use the default size.  For an array this should be the size of one base element.</param>
            <param name="description">The symbol description (or null).</param>
            <returns>The symbol container.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,System.Type,Demo3D.PLC.Comms.IAddressSpace,System.Int64,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a symbol to the current symbol table or branch.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="dataType">The data type of the symbol.  For an array, this must be the type of one base element.</param>
            <param name="addressSpace">The address space of the symbol, or null to automatically select the next address/>.</param>
            <param name="bitAddress">The address of the symbol, or -1 to automatically select the next address/>.</param>
            <param name="dimensions">The dimensions of the array (or 1).</param>
            <param name="sizeBits">The size in bits, or -1 to use the default size.  For an array this should be the size of one base element.</param>
            <param name="description">The symbol description (or null).</param>
            <returns>The symbol container.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.MemoryAddress,System.Boolean,System.String)">
            <summary>
            Adds a symbol to the current symbol table or branch.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="dataType">The data type of the symbol.</param>
            <param name="address">The address of the symbol, or null to automatically select the next address/>.</param>
            <param name="stronglyTyped">The symbol is strongly typed.</param>
            <param name="description">The symbol description (or null).</param>
            <returns>The symbol container.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,System.Type,Demo3D.PLC.Comms.MemoryAddress,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.DataDimension},System.Int32,System.String)">
            <summary>
            Adds a symbol to the current symbol table or branch.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="dataType">The data type of the symbol.  For an array, this must be the type of one base element.</param>
            <param name="address">The address of the symbol, or null to automatically select the next address/>.</param>
            <param name="dimensions">The dimensions of the array (or null).</param>
            <param name="sizeBits">The size in bits, or -1 to use the default size.  For an array this should be the size of one base element.</param>
            <param name="description">The symbol description (or null).</param>
            <returns>The symbol container.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.Add(System.String,System.Type,Demo3D.PLC.Comms.MemoryAddress,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a symbol to the current symbol table or branch.
            </summary>
            <param name="name">The name of the symbol.</param>
            <param name="dataType">The data type of the symbol.  For an array, this must be the type of one base element.</param>
            <param name="address">The address of the symbol, or -1 to automatically select the next address/>.</param>
            <param name="dimensions">The dimensions of the array (or 1).</param>
            <param name="sizeBits">The size in bits, or -1 to use the default size.  For an array this should be the size of one base element.</param>
            <param name="description">The symbol description (or null).</param>
            <returns>The symbol container.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.MemorySymbolTable`1.AddBranch(System.String)">
            <summary>
            Adds a branch to the current symbol table or branch.
            </summary>
            <param name="name">The name of the branch.</param>
            <returns>The symbol container.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.StringAddress">
            <summary>
            An address that supports a string representation.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.StringAddress.accessName">
            <summary>
            A cache of the string representation of the address.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.#ctor(System.String)">
            <summary>
            Constructs a StringAddress.
            </summary>
            <param name="address">The string representation of the address.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.#ctor">
            <summary>
            Constructs the default StringAddress.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.StringAddress.AccessName">
            <summary>
            The address used to access the item from the PLC.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.StringAddress.AllowedAccess">
            <summary>
            The access defined by this address.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.GetDataType(Demo3D.PLC.Comms.DataType@,System.Boolean@)">
            <summary>
            Returns the type defined by this address.
            </summary>
            <param name="type">The data type.</param>
            <param name="stronglyTyped">
            A measure of how confident we are about the data type.
            True if this is the definitive type of the address.
            False if this is a best guess.
            </param>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.Equals(Demo3D.PLC.Comms.StringAddress)">
            <summary>
            Determines whether the <paramref name="address"/> equals the current address.
            </summary>
            <param name="address">The address to compare.</param>
            <returns>True if the <paramref name="address"/> equals the current address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.Equals(Demo3D.PLC.Comms.IAddress)">
            <summary>
            Determines whether the <paramref name="address"/> equals the current address.
            </summary>
            <param name="address">The address to compare.</param>
            <returns>True if the <paramref name="address"/> equals the current address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified address equals the current address.
            </summary>
            <param name="obj">The address to compare.</param>
            <returns>True if the specified address equals the current address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.GetHashCode">
            <summary>
            Computes a hash code for this address.
            </summary>
            <returns>A hash code for this address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.StringAddress.ToString">
            <summary>
            Returns a string representation of the current address.
            </summary>
            <returns>A string representation of the current address.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.TypedMemoryAddress">
            <summary>
            A strongly typed PLC specific memory address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.TypedMemoryAddress.DataType">
            <summary>
            The data type of the address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.TypedMemoryAddress.StronglyTyped">
            <summary>
            The address is strongly typed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.#ctor(Demo3D.PLC.Comms.IAddressSpace,System.Int64,Demo3D.PLC.Comms.DataType,System.Boolean)">
            <summary>
            Constructs a new TypedMemoryAdderss.
            </summary>
            <param name="addressSpace">The address space of the memory bank.</param>
            <param name="bitAddress">The address offset.</param>
            <param name="dataType">The data type of the address.</param>
            <param name="stronglyTyped">The address is strongly typed.</param>
            <remarks>
            You cannot serialize out a TypedMemoryAddress unless it's an instance of a derived class
            that implements a serializer that includes address space information.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.#ctor(Demo3D.PLC.Comms.IAddressSpace,System.Int64,System.Int64,System.Int64,System.Type,System.Boolean)">
            <summary>
            Constructs a new TypedMemoryAddress.
            </summary>
            <param name="addressSpace">The address space of the memory bank.</param>
            <param name="bitAddress">The address offset.</param>
            <param name="numElements">The number of elements of <paramref name="elementSizeBits"/> length.</param>
            <param name="elementSizeBits">The size of each element in bits.</param>
            <param name="elementType">The type of each element.</param>
            <param name="stronglyTyped">The address is strongly typed.</param>
            <remarks>
            You cannot serialize out a TypedMemoryAddress unless it's an instance of a derived class
            that implements a serializer that includes address space information.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.#ctor(Demo3D.PLC.Comms.IAddressSpace,System.Int64,System.Int64)">
            <summary>
            Constructs a new TypedMemoryAddress.
            </summary>
            <param name="addressSpace">The address space of the memory bank.</param>
            <param name="bitAddress">The address offset.</param>
            <param name="numBits">The length of the address in bits.</param>
            <remarks>
            You cannot serialize out a TypedMemoryAddress unless it's an instance of a derived class
            that implements a serializer that includes address space information.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.#ctor(Demo3D.PLC.Comms.IAddressSpace)">
            <summary>
            Constructs the empty TypedMemoryAddress.
            </summary>
            <param name="addressSpace">The address space of the memory bank.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.#ctor">
            <summary>
            Constructs the default TypedMemoryAddress.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.TypedMemoryAddress.ElementType">
            <summary>
            The element .Net type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.TypedMemoryAddress.NumElements">
            <summary>
            Number of elements in array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.TypedMemoryAddress.ElementSizeBits">
            <summary>
            Size of each element in array (in bits).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.TypedMemoryAddress.ElementTypeName">
            <summary>
            A string representation of the element type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.GetDataType(Demo3D.PLC.Comms.DataType@,System.Boolean@)">
            <summary>
            Returns the type defined by this address.
            </summary>
            <param name="type">The data type.</param>
            <param name="stronglyTyped">
            A measure of how confident we are about the data type.
            True if this is the definitive type of the address.
            False if this is a best guess.
            </param>
        </member>
        <member name="P:Demo3D.PLC.Comms.TypedMemoryAddress.DataTypeName">
            <summary>
            A string representation of the data type of the address.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.ReadProperty(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.ReadProperties(Demo3D.Common.SerializerEntryReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.TypedMemoryAddress.WriteProperties(Demo3D.Common.Serializer)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.AttributeBase">
            <summary>
            Represents a strongly typed view on an <see cref="T:Demo3D.PLC.Comms.AttrDb.AttributeValue"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeBase.AttributeValue">
            <summary>
            The attribute value in memory.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeBase.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a new attribute.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="E:Demo3D.PLC.Comms.AttrDb.AttributeBase.OnAttributeValueSet">
            <summary>
            Occurs when the attribute value is set, but only under certain circumstances (see remarks).
            </summary>
            <remarks>
            This event is raised when the attribute is set using a CIP Class 3 protocol request.
            The event will not be raised if the attribute is set programatically (eg the Value property on
            a derived class), or is set cyclically via CIP Class 1.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeBase.Gettable">
            <summary>
            True if protocol attribute-get requests are allowed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeBase.Settable">
            <summary>
            True if protocol attribute-set requests are allowed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeBase.IgnoreSet">
            <summary>
            True if protocol attribute-set requests are allowed, but should be ignored.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeBase.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.AttributeDatabase">
            <summary>
            A database of <see cref="T:Demo3D.PLC.Comms.AttrDb.AttributeValue"/>, with methods to enumerate, find and create attribute values.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeDatabase.MemAllocator">
            <summary>
            The memory allocator.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabase.#ctor(Demo3D.IO.External.IMemoryXAllocator)">
            <summary>
            Constructs an attribute database.
            </summary>
            <param name="memAllocator">Allocator for attributes. (Null to use the default.)</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabase.InitializeAttributeValues(Demo3D.PLC.Comms.AttrDb.IAttributePropertyBag)">
            <summary>
            Add all the attribute values exposed as properties on an attribute value bag into this attribute value database.
            </summary>
            <param name="attrObject">An object that contains attributes as properties.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabase.CreateValue(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions,Demo3D.IO.External.MemoryX)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabase.CreateValue(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabase.SetMemory(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions,Demo3D.IO.External.MemoryX)">
            <summary>
            Redirect an attribute value's memory to a specific memory location.
            </summary>
            <param name="attributeId">Attribute id.</param>
            <param name="dimensions">The attribute size.</param>
            <param name="to">Memory location, or null to revert to non-shared memory.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseBase">
            <summary>
            A database of <see cref="T:Demo3D.PLC.Comms.AttrDb.AttributeValue"/>, with methods to enumerate, find and create attribute values.
            For databases shared across a process boundary, the manager will also keep the databases in sync.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseBase.NumAttributes">
            <summary>
            The number of attributes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseBase.GetAttributeValues">
            <summary>
            Get all the attribute values.
            </summary>
            <returns>All the attribute values</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseBase.CreateValue(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions)">
            <summary>
            Create an attribute value of the specified dimensions.
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="dimensions">The data dimension selection from the request that's accessing the attribute value.</param>
            <returns>The new/existing attribute value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseBase.FindAddOrUpdateAttributeValue(System.UInt32,System.Func{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Action{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Boolean@)">
            <summary>
            Find, add or update an attribute value.
            <para>
            If an attribute value with the specified id does not exist, then the function '<paramref name="create"/>' is called
            to create a new attribute value.  If the '<paramref name="create"/>' function is null then no new attribute value is added.
            </para>
            <para>
            If an attribute value with the specified id already exists, then the function '<paramref name="update"/>' (if not
            null) is called to update the attribute value.
            </para>
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="create">A function to create a new attribute value (or null).</param>
            <param name="update">A function to update the existing attribute value (or null).</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The new/existing attribute (or null).</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.IAttributePropertyBag">
            <summary>
            Type safety: marks an object as a property bag.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions">
            <summary>
            IAttributeDatabase extension methods.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindAttributeValue(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Find an attribute value by id.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute value (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindOrAddAttributeValue(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,Demo3D.PLC.Comms.AttrDb.AttributeValue,System.Boolean@)">
            <summary>
            Find or add an attribute value.
            <para>
            If an attribute value with the specified id does not exist, then the specified attribute is added.
            If an attribute value with the specified id already exists, then the original attribute is returned.
            </para>
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attribute">The addtribute to add.</param>
            <param name="created">True if the value was created.</param>
            <returns>The new/existing attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindOrAddAttributeValue(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions,System.Boolean@)">
            <summary>
            Find or add an attribute value.
            <para>
            If an attribute value with the specified id already exists, then it's returned.
            If an attribute value with the specified id does not exist, then a new attribute value is created.
            </para>
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id to find.</param>
            <param name="dimensions">The data dimension selection from the request that's accessing the attribute value.</param>
            <param name="created">True if the value was created.</param>
            <returns>The new/existing attribute value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindByteAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindDWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindLWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindDIntAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindLIntAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindRealAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindLRealAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindShortStringAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.FindByteArrayAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32)">
            <summary>
            Finds an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <returns>The attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetByteAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetDWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetLWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetDIntAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetLIntAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetRealAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetLRealAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetShortStringAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="maxStringLength">The maximum string length.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetByteArrayAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Int32,System.Boolean@)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="numElements">Number of elements in the array.</param>
            <param name="created">True if the attribute was created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetByteAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Byte)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.UInt16)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetDWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.UInt32)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetLWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.UInt64)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetDIntAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Int32)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetLIntAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Int64)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetRealAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Single)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetLRealAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Double)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetShortStringAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Int32,System.String)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="maxStringLength">The maximum string length.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetByteArrayAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Int32)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="numElements">Number of elements in the array.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetByteArrayAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Int32,Demo3D.IO.BufferSegment)">
            <summary>
            Finds or creates an attribute.
            </summary>
            <param name="attrDb">The attribute database.</param>
            <param name="attributeId">The attribute id.</param>
            <param name="numElements">Number of elements in the array.</param>
            <param name="defaultValue">Default value if the attribute is created.</param>
            <returns>The attribute.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags">
            <summary>
            AttributeValue properties.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.NotSupported">
            <summary>
            The attribute is not supported.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.GetAttributesAll">
            <summary>
            The attribute data is returned in a GetAttributesAll request.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Gettable">
            <summary>
            Set if protocol attribute-get requests are allowed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Settable">
            <summary>
            True if protocol attribute-set requests are allowed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.IgnoreSet">
            <summary>
            True if protocol attribute-set requests are allowed, but should be ignored.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.FixedSize">
            <summary>
            True if the value size is fixed.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.AttributeProperties">
            <summary>
            The properties of an attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.AttributeId">
            <summary>
            Attribute ID.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.Flags">
            <summary>
            Attribute value flags.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.NumBytes">
            <summary>
            The number of bytes of attribute data (or 0 for variable size; -1 for unknown).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeProperties.#ctor(System.UInt32)">
            <summary>
            Constructs an AttributeValue.
            </summary>
            <param name="attributeId">The attribute ID.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.NotSupported">
            <summary>
            The attribute is not supported.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.GetAttributesAll">
            <summary>
            The attribute data is returned in a GetAttributesAll request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.Gettable">
            <summary>
            True if protocol attribute-get requests are allowed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.Settable">
            <summary>
            True if protocol attribute-set requests are allowed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.IgnoreSet">
            <summary>
            True if protocol attribute-set requests are allowed, but should be ignored.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeProperties.FixedSize">
            <summary>
            True if the value size is fixed.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.ByteAttribute">
            <summary>
            A BYTE attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.ByteAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ByteAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing BYTE attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ByteAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new BYTE attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.ByteAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ByteAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.WordAttribute">
            <summary>
            A WORD attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.WordAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.WordAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing WORD attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.WordAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new WORD attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.WordAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.WordAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.DWordAttribute">
            <summary>
            A DWORD attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.DWordAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DWordAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing DWORD attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DWordAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new DWORD attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.DWordAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DWordAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.LWordAttribute">
            <summary>
            A LWORD attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.LWordAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LWordAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing LWORD attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LWordAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new LWORD attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.LWordAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LWordAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.DIntAttribute">
            <summary>
            A DINT attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.DIntAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DIntAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing DINT attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DIntAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new DINT attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.DIntAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DIntAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.LIntAttribute">
            <summary>
            A LINT attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.LIntAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LIntAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing LINT attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LIntAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new LINT attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.LIntAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LIntAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.RealAttribute">
            <summary>
            A REAL attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.RealAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.RealAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing REAL attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.RealAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new REAL attribute.
            </summary>
            <param name="attributeId"></param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.RealAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.RealAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.LRealAttribute">
            <summary>
            A LREAL attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.LRealAttribute.Dimensions">
            <summary>
            The default dimensions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LRealAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing LREAL attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LRealAttribute.#ctor(System.UInt32)">
            <summary>
            Constructs a new LREAL attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.LRealAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.LRealAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.StringAttributeBase">
            <summary>
            A one-byte length-encoded string attribute.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.StringAttributeBase.TextEncoding">
            <summary>
            The string text encoding.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.StringAttributeBase.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Constructs a view on an existing string attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
            <param name="textEncoding">The string text encoding.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.StringAttributeBase.#ctor(System.UInt32,System.Int32,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Constructs a new STRING attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
            <param name="maxStringSize">Maximum string length (or 0 if unknown).</param>
            <param name="textEncoding">The string text encoding.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.StringAttributeBase.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.StringAttributeBase.String">
            <summary>
            Gets or sets the attribute value as a string.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.StringAttributeBase.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.ShortStringAttribute">
            <summary>
            A one-byte length-encoded string attribute.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ShortStringAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing string attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ShortStringAttribute.#ctor(System.UInt32,System.Int32)">
            <summary>
            Constructs a new STRING attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
            <param name="maxStringSize">Maximum string length (or 0 if unknown).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.StringAttribute">
            <summary>
            A two-byte little-endian length-encoded string attribute.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.StringAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing string attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.StringAttribute.#ctor(System.UInt32,System.Int32)">
            <summary>
            Constructs a new STRING attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
            <param name="maxStringSize">Maximum string length (or 0 if unknown).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.ByteArrayAttribute">
            <summary>
            A byte array attribute.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ByteArrayAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing byte array attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ByteArrayAttribute.#ctor(System.UInt32,System.Int32,System.Func{Demo3D.PLC.Comms.AttrDb.AttributeValue,System.String})">
            <summary>
            Constructs a new byte array attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
            <param name="maxBytes">Maximum number of bytes (or 0 if not known).</param>
            <param name="toStringFunc">Function for printing the content of the value (or null).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.ByteArrayAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ByteArrayAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.AttributeValue">
             <summary>
             Represents an attribute value, and acts as a base for classes that store/compute the actual attribute value.
             AttributeValue also stores attribute meta data (dimensions and properties), and provides common abstract methods
             for accessing attribute values.
            
             Typical use of AttributeValue is through an AttributeBase, which provides a strongly typed
             view on the value.
             </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeValue.Dimensions">
            <summary>
            The dimensions of the value (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeValue.ToStringFunc">
            <summary>
            A function for printing the string (or null).
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.#ctor(System.UInt32)">
            <summary>
            Constructs an AttributeValue.
            </summary>
            <param name="attributeId">The attribute ID.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.AttributeValue.NumBytes">
            <summary>
            The number of bytes of attribute data (or -1).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.AddOnAttributeValueSet(System.Action,Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the OnAttributeValueSet event.
            </summary>
            <param name="handler">Handler for OnAttributeValueSet events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="handler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.RemoveOnAttributeValueSet(System.Action)">
            <summary>
            Remove a handler from the OnAttributeValueSet event.
            </summary>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="E:Demo3D.PLC.Comms.AttrDb.AttributeValue.OnAttributeValueSet">
            <summary>
            Occurs when the attribute value is set, but only under certain circumstances (see remarks).
            </summary>
            <remarks>
            This event is raised when the attribute is set using a CIP Class 3 protocol request.
            The event will not be raised if the attribute is set programatically (eg the Value property on
            the <see cref="T:Demo3D.PLC.Comms.AttrDb.AttributeBase"/> class), or is set cyclically via CIP Class 1.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.NotifyAttributeValueSet">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.AttrDb.AttributeValue.OnAttributeValueSet"/> event.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.GetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter,Demo3D.PLC.Comms.AttrDb.DataSelect)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Gettable"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="responseData">The packet to place the value.</param>
            <param name="dataSelect">The selection of data to retrieve (or null for the entire value).</param>
            <remarks>
            <paramref name="dataSelect"/> is only honoured for dynamic attributes.  For static or computed
            attributes, it must either be null or describe the entire attribute.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.GetValue(Demo3D.PLC.Comms.MessageContextBase,System.ArraySegment{System.Byte}@)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Gettable"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="packet">The packet to copy the value into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.SetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter,Demo3D.IO.IPacketReader,Demo3D.PLC.Comms.AttrDb.DataSelect,System.Boolean)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Settable"/> and <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.IgnoreSet"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="responseData">The packet to place the response (if any), or null if no response is allowed.</param>
            <param name="requestData">The packet to get the value from.</param>
            <param name="dataSelect">The selection of data to set (or null for the entire value).</param>
            <param name="notify">True to raise <see cref="E:Demo3D.PLC.Comms.AttrDb.AttributeValue.OnAttributeValueSet"/></param>
            <remarks>
            <paramref name="dataSelect"/> is only honoured for dynamic attributes.  For static or computed
            attributes, it must either be null or describe the entire attribute.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.SetValue(Demo3D.PLC.Comms.MessageContextBase,System.ArraySegment{System.Byte}@,System.Boolean)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Settable"/> and <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.IgnoreSet"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="packet">The packet to get the value from.</param>
            <param name="notify">True to raise <see cref="E:Demo3D.PLC.Comms.AttrDb.AttributeValue.OnAttributeValueSet"/></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadByte">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadInt16LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadUInt16LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadInt32LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadUInt32LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadInt64LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadUInt64LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadSingleLE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadDoubleLE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadBytes(System.ArraySegment{System.Byte}@)">
            <summary>
            Read the attribute value into the specified buffer.
            </summary>
            <param name="to">The buffer to copy the data into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadBytes(System.Int32)">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <param name="length">Number of bytes to read (or -1).</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ReadString(Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <param name="encoding">Text encoding.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteByte(System.Byte)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteInt16LE(System.Int16)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteUInt16LE(System.UInt16)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteInt32LE(System.Int32)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteUInt32LE(System.UInt32)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteInt64LE(System.Int64)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteUInt64LE(System.UInt64)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteSingleLE(System.Single)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteDoubleLE(System.Double)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteBytes(System.ArraySegment{System.Byte}@)">
            <summary>
            Write data into the attribute value.
            </summary>
            <param name="from">The buffer to copy the data from.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.WriteString(Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
            <param name="encoding">The text encoding.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.AttributeValue.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.ComputedValue">
            <summary>
            Represents an attribute value that's computed at runtime.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.#ctor(System.UInt32)">
            <summary>
            Constructs a ComputedValue.
            </summary>
            <param name="attributeId">The attribute id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.ComputedValue.Dimensions">
            <summary>
            The dimensions of the value (or null).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.GetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter)">
            <summary>
            When overriden in a derived class, computes and returns the current value.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="responseData">Packet writer to contain the value.</param>
            <returns>True if the value could be read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.SetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter,Demo3D.IO.IPacketReader)">
            <summary>
            When overriden in a derived class, updates the current value.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="responseData">The packet to place the response (if any), or null if no response is allowed.</param>
            <param name="requestData">The value to set.</param>
            <returns>True if the value could be set.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.GetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter,Demo3D.PLC.Comms.AttrDb.DataSelect)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Gettable"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="responseData">The packet to place the value.</param>
            <param name="dataSelect">The selection of data to retrieve (or null for the entire value).</param>
            <remarks>
            <paramref name="dataSelect"/> is only honoured for dynamic attributes.  For static or computed
            attributes, it must either be null or describe the entire attribute.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.GetValue(Demo3D.PLC.Comms.MessageContextBase,System.ArraySegment{System.Byte}@)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Gettable"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="packet">The packet to copy the value into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.SetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter,Demo3D.IO.IPacketReader,Demo3D.PLC.Comms.AttrDb.DataSelect,System.Boolean)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Settable"/> and <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.IgnoreSet"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="responseData">The packet to place the response (if any), or null if no response is allowed.</param>
            <param name="requestData">The packet to get the value from.</param>
            <param name="dataSelect">The selection of data to set (or null for the entire value).</param>
            <param name="notify">True to raise <see cref="E:Demo3D.PLC.Comms.AttrDb.AttributeValue.OnAttributeValueSet"/></param>
            <remarks>
            <paramref name="dataSelect"/> is only honoured for dynamic attributes.  For static or computed
            attributes, it must either be null or describe the entire attribute.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.SetValue(Demo3D.PLC.Comms.MessageContextBase,System.ArraySegment{System.Byte}@,System.Boolean)">
            <summary>
            Protocol access to the attribute value.
            Honours <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.Settable"/> and <see cref="F:Demo3D.PLC.Comms.AttrDb.AttributeValueFlags.IgnoreSet"/>.
            </summary>
            <param name="context">Optional information about the request.</param>
            <param name="packet">The packet to get the value from.</param>
            <param name="notify">True to raise <see cref="E:Demo3D.PLC.Comms.AttrDb.AttributeValue.OnAttributeValueSet"/></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadByte">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadInt16LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadUInt16LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadInt32LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadUInt32LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadInt64LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadUInt64LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadSingleLE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadDoubleLE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadBytes(System.ArraySegment{System.Byte}@)">
            <summary>
            Read data out of the attribute value into the specified buffer.
            </summary>
            <param name="to">The buffer to copy the data into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadBytes(System.Int32)">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <param name="length">Number of bytes to read (or -1).</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.ReadString(Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads the attribute value from the specified offset and returns the data as a value.
            </summary>
            <param name="encoding">Text encoding.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteByte(System.Byte)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteInt16LE(System.Int16)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteUInt16LE(System.UInt16)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteInt32LE(System.Int32)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteUInt32LE(System.UInt32)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteInt64LE(System.Int64)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteUInt64LE(System.UInt64)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteSingleLE(System.Single)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteDoubleLE(System.Double)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteBytes(System.ArraySegment{System.Byte}@)">
            <summary>
            Write data into the attribute value from the specified buffer.
            </summary>
            <param name="from">The buffer to copy the data from.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.ComputedValue.WriteString(Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
            <param name="encoding">The text encoding.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.DataSelect">
            <summary>
            Describes a request selection.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.DataSelect.ElementSize">
            <summary>
            The size of one element, or 0 for variable size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.DataSelect.DataSize">
            <summary>
            The total size, or 0 for variable size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.DataSelect.Dimensions">
            <summary>
            Array selection, or null for scalar.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DataSelect.#ctor(System.Int32,System.Int32,System.ValueTuple{System.UInt16,System.UInt16}[])">
            <summary>
            Constructs a data selection.
            </summary>
            <param name="elementSize">The size of one element, or 0 for variable size.</param>
            <param name="dataSize">The total size, or 0 for variable size.</param>
            <param name="dimensions">Array selection, or null for scalar.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.DataSelect.DimensionsComparison">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.DataSelect.DimensionsComparison.Same">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.DataSelect.DimensionsComparison.Incompatible">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.DataSelect.DimensionsComparison.Larger">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.AttrDb.DataSelect.DimensionsComparison.Smaller">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DataSelect.Compare(Demo3D.PLC.Comms.AttrDb.DataSelect,Demo3D.PLC.Comms.AttrDb.DataSelect)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DataSelect.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.DataDimensions">
            <summary>
            Describes the dimensions of a value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DataDimensions.#ctor(System.Int32,System.Int32,System.UInt16[])">
            <summary>
            Constructs a description of the dimensions of a value.
            </summary>
            <param name="elementSize">The size of one element, or 0 for variable size.</param>
            <param name="dataSize">The total size, or 0 for variable size.</param>
            <param name="numElements">Array dimensions, or null for scalar.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DataDimensions.#ctor(System.Int32)">
            <summary>
            Constructs a description of the dimensions of a value.
            </summary>
            <param name="dataSize">The total size, or 0 for variable size.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.DataDimensions.FromSelect(Demo3D.PLC.Comms.AttrDb.DataSelect)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.IAttributeDatabase">
            <summary>
            Access to an underlying attribute database.
            </summary>
            <remarks>
            Use methods, such as
            <code>var attribute = attributeDatabase.GetWordAttribute(attributeId: 10);  // get attribute 10</code>
            <code>attribute.Value = 150;   // set its value to 150</code>
            See <see cref="M:Demo3D.PLC.Comms.AttrDb.AttributeDatabaseExtensions.GetWordAttribute(Demo3D.PLC.Comms.AttrDb.IAttributeDatabase,System.UInt32,System.Boolean@)"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.IAttributeDatabase.GetAttributeValues">
            <summary>
            Return the values of all the attributes.
            </summary>
            <returns>List of attribute values.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.IAttributeDatabase.CreateValue(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions)">
            <summary>
            Create an attribute value of the specified dimensions.
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="dimensions">The data dimension selection from the request that's accessing the attribute value.</param>
            <returns>The new/existing attribute value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.IAttributeDatabase.FindAddOrUpdateAttributeValue(System.UInt32,System.Func{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Action{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Boolean@)">
            <summary>
            Find, add or update an attribute value.
            <para>
            If an attribute value with the specified id does not exist, then the function '<paramref name="create"/>' is called
            to create a new attribute value.  If the '<paramref name="create"/>' function is null then no new attribute value is added.
            </para>
            <para>
            If an attribute value with the specified id already exists, then the function '<paramref name="update"/>' (if not
            null) is called to update the attribute value.
            </para>
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="create">A function to create a new attribute value (or null).</param>
            <param name="update">A function to update the existing attribute value (or null).</param>
            <param name="created">True if the value was created.</param>
            <returns>The new/existing attribute (or null).</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.AttrDb.MemoryValue">
            <summary>
            Represents an attribute value in memory.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.#ctor(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions,Demo3D.IO.External.IMemoryXAllocator,Demo3D.IO.External.MemoryX)">
            <summary>
            Constructs an attribute value.
            </summary>
            <param name="attributeId">The attribute id.</param>
            <param name="dimensions">Initial dimensions.</param>
            <param name="memAllocator">Memory allocator (to allow allocating and re-sizing of values).</param>
            <param name="memory">Initial memory location (or null to delay initialization).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.MemoryValue.Address">
            <summary>
            Returns the address of the underlying shared memory segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.MemoryValue.Dimensions">
            <summary>
            The dimensions of the value (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.AttrDb.MemoryValue.MaxDataSize">
            <summary>
            The maximum size of the value (or 0 if not known).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.AddOnAttributeValueRebuilt(System.Action,Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the OnAttributeValueRebuilt event.
            </summary>
            <param name="handler">Handler for OnAttributeValueRebuilt events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="handler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.RemoveOnAttributeValueRebuilt(System.Action)">
            <summary>
            Remove a handler from the OnAttributeValueRebuilt event.
            </summary>
            <param name="handler">Handler to remove.</param>
        </member>
        <member name="E:Demo3D.PLC.Comms.AttrDb.MemoryValue.OnAttributeValueRebuilt">
            <summary>
            Occurs when the attribute value is rebuilt.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.NotifyAttributeRebuilt">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.AttrDb.MemoryValue.OnAttributeValueRebuilt"/> event.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.SetAllocator(Demo3D.IO.External.IMemoryXAllocator)">
            <summary>
            Initialize the value, by setting the memory allocator.
            </summary>
            <param name="memAllocator">Memory allocator.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.SetMemory(Demo3D.IO.External.MemoryX,Demo3D.PLC.Comms.AttrDb.DataDimensions)">
            <summary>
            Initialize or redirect memory allocated to this attribute value.
            </summary>
            <param name="newData">New memory.</param>
            <param name="dimensions">New dimensions (or null to maintain existing dimensions).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.GetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter,Demo3D.PLC.Comms.AttrDb.DataSelect)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.GetValue(Demo3D.PLC.Comms.MessageContextBase,System.ArraySegment{System.Byte}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.CopyOut(Demo3D.IO.IPacketWriter,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadByte">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadInt16LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadUInt16LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadInt32LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read from the memory exchange.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadUInt32LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadInt64LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadUInt64LE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadSingleLE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadDoubleLE">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadBytes(System.ArraySegment{System.Byte}@)">
            <summary>
            Read data out of the attribute value into the specified buffer.
            </summary>
            <param name="to">The buffer to copy the data into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadBytes(System.Int32)">
            <summary>
            Reads the attribute value and returns the data as a value.
            </summary>
            <param name="length">Number of bytes to read (or -1).</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ReadString(Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Reads the attribute value from the specified offset and returns the data as a value.
            </summary>
            <param name="encoding">Text encoding.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.SetValue(Demo3D.PLC.Comms.MessageContextBase,Demo3D.IO.IPacketWriter,Demo3D.IO.IPacketReader,Demo3D.PLC.Comms.AttrDb.DataSelect,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.SetValue(Demo3D.PLC.Comms.MessageContextBase,System.ArraySegment{System.Byte}@,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.CopyIn(Demo3D.IO.IPacketReader,System.Boolean,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.Ignore(Demo3D.IO.IPacketReader,System.Boolean,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteByte(System.Byte)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteInt16LE(System.Int16)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteUInt16LE(System.UInt16)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteInt32LE(System.Int32)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteUInt32LE(System.UInt32)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteInt64LE(System.Int64)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteUInt64LE(System.UInt64)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteSingleLE(System.Single)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteDoubleLE(System.Double)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteBytes(System.ArraySegment{System.Byte}@)">
            <summary>
            Write data into the attribute value from the specified buffer.
            </summary>
            <param name="from">The buffer to copy the data from.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.WriteString(Demo3D.IO.BinaryString,Demo3D.IO.BinaryTextEncoding)">
            <summary>
            Write a value to the attribute value.
            </summary>
            <param name="value">The value to write.</param>
            <param name="encoding">The text encoding.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.AttrDb.MemoryValue.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.PLCProtocols">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.PLCProtocols.InitializeBuiltin">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.AttrDb.EPATHAttribute">
            <summary>
            An <see cref="T:Demo3D.PLC.Comms.CIP.EPATH"/> attribute.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.AttrDb.EPATHAttribute.#ctor(Demo3D.PLC.Comms.AttrDb.AttributeValue)">
            <summary>
            Constructs a view on an existing EPATH attribute value.
            </summary>
            <param name="attributeValue">The attribute value in memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.AttrDb.EPATHAttribute.#ctor(System.UInt32,System.Int32)">
            <summary>
            Constructs a new EPATH attribute.
            </summary>
            <param name="attributeId">Attribute id.</param>
            <param name="maxBytes">Maximum number of elements (or 0 if not known).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.AttrDb.EPATHAttribute.Value">
            <summary>
            Gets or sets the attribute value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.AttrDb.EPATHAttribute.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EmulatorEvents">
            <summary>
            Describes events that are called directly by the low level emulator.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EmulatorEvents.EventActions">
            <summary>
            Event actions.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EmulatorEvents.EventActions.Construct">
            <summary>
            An action to call once when the module emulator has been created and tags bound, to allow final emulator construction.
            </summary>
            <remarks>
            <para>
            Will be called before the PLC connects to the device.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EmulatorEvents.EventActions.ProcessOutputs">
            <summary>
            An action to call to process PLC outputs just before passing then to the low level emulator.
            </summary>
            <remarks>
            <para>
            Typically called at regular short intervals and should run as fast as possible without blocking.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EmulatorEvents.EventActions.ComputeInputs">
            <summary>
            An action to call to compute PLC inputs immediately after new data is received from the low level emulator.
            </summary>
            <remarks>
            <para>
            Called when the lower level emulation changes a tag value in order to compute PLC inputs.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EmulatorEvents.EventActions.#ctor(System.Action{Demo3D.PLC.Comms.CIP.Nodes.MessageRouter,Demo3D.Common.IComponentLogger},System.Action,System.Action)">
            <summary>
            Constructs EventActions.
            </summary>
            <param name="construct">Called once when the module emulator has been created and tags bound, to allow final emulator construction.</param>
            <param name="processOutputs">Called to process PLC outputs just before passing then to the low level emulator.</param>
            <param name="computeInputs">Called to compute PLC inputs immediately after new data is received from the low level emulator.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EmulatorEvents.GetEvents">
            <summary>
            Gets emulator events.
            </summary>
            <returns>Emulator events.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.CommsEvents">
            <summary>
            Describes events that are by the high level PLC comms driver.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.CommsEvents.EventActions">
            <summary>
            Event actions.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CommsEvents.EventActions.ConfigChanged">
            <summary>
            An action to call when a configuration change is detected.
            </summary>
            <remarks>
            <para>
            Will be called in the low level emulator process.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CommsEvents.EventActions.Construct">
            <summary>
            An action to call once when the module emulator has been created in the IO process.
            </summary>
            <remarks>
            <para>
            Will be called before the PLC connects to the device.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CommsEvents.EventActions.AfterOutputs">
            <summary>
            An action to call immediately when PLC outputs are received from the PLC.
            </summary>
            <remarks>
            <para>
            Called at the RPI and should run as fast as possible without blocking.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CommsEvents.EventActions.BeforeInputs">
            <summary>
            An action to call immediately before sending PLC inputs to the PLC.
            </summary>
            <remarks>
            <para>
            Called at the RPI and should run as fast as possible without blocking.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.CommsEvents.EventActions.#ctor(System.Action,System.Action{Demo3D.Common.IComponentLogger},System.Action,System.Action)">
            <summary>
            Constructs EventActions.
            </summary>
            <param name="configChanged">Called when a configuration change is detected.</param>
            <param name="construct">Called once when the module emulator has been created in the IO process.</param>
            <param name="afterOutputs">Called immediately when PLC outputs are received from the PLC.</param>
            <param name="beforeInputs">Called immediately before sending PLC inputs to the PLC.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.CommsEvents.GetEvents">
            <summary>
            Gets comms events.
            </summary>
            <returns>Comms events.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.CommsEvents.UnmarshalDelegate">
            <summary>
            Delegate for unmarshalling comms event methods.
            </summary>
            <param name="reader">Packet to unmarshal.</param>
            <param name="addressSpace">Address space for shared data.</param>
            <param name="logger">A method for logging messages.</param>
            <returns>Comms events.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.CommsEvents.MarshalArgs(Demo3D.IO.IPacketWriter,Demo3D.Common.IComponentLogger)">
            <summary>
            Marshal event method args.
            </summary>
            <param name="packet">Packet to marshal events.</param>
            <param name="logger">A method for logging messages.</param>
            <returns>A static method for unmarshalling events.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.IModuleEmulator">
            <summary>
            Represents an emulator for a module.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.IModuleEmulator.GetEmulatorEvents">
            <summary>
            Description of events that are called by the low level emulator (or null).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.IModuleEmulator.GetCommsEvents">
            <summary>
            Description of events that are called by the high level PLC comms driver.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.IncomingRequestFlags">
            <summary>
            Request meta data.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.IncomingRequestFlags.EchoRequest">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.IncomingRequest">
            <summary>
            A single incoming request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IncomingRequest.ServiceCode">
            <summary>
            The incoming request service code.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IncomingRequest.RequestData">
            <summary>
            The incoming request data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IncomingRequest.RequestFlags">
            <summary>
            Request meta data.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.IncomingRequest.#ctor(Demo3D.PLC.Comms.CIP.ServiceCode,Demo3D.IO.IPacketReader)">
            <summary>
            Constructs an IncomingRequest.
            </summary>
            <param name="serviceCode">The incoming request service code.</param>
            <param name="requestData">The incoming request data.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.RoutableIncomingRequest">
            <summary>
            A single message router request extracted from a packet (which possibly contains many message router requests).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.RoutableIncomingRequest.Route">
            <summary>
            The current EPATH logical path.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.RoutableIncomingRequest.#ctor(Demo3D.PLC.Comms.CIP.EPATH,Demo3D.PLC.Comms.CIP.ServiceCode,Demo3D.IO.IPacketReader)">
            <summary>
            Constructs a RoutableIncomingRequest and unpacks the first logical path from the EPATH into <see cref="P:Demo3D.PLC.Comms.CIP.RoutableIncomingRequest.Route"/>.
            </summary>
            <param name="ePath">The request EPATH.</param>
            <param name="serviceCode">The request service code.</param>
            <param name="requestData"></param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.RoutableIncomingRequest.MoreRoutesAvailable">
            <summary>
            Return true if more routes available in the message EPATH.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.RoutableIncomingRequest.NextRoute">
            <summary>
            Advances to next logical path in the EPATH.
            </summary>
            <returns>False if there are no more logical paths.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.IncomingRequestContainer">
            <summary>
            An incoming packet containing message router requests.  Implements a method (an enumerator) that returns requests to the caller.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.IncomingRequestContainer.GetNextRequest">
            <summary>
            Gets the next message from the packet.
            </summary>
            <returns>The next request.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.OutgoingResponse">
            <summary>
            A single outgoing message router response.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.OutgoingResponse.AddMessageData">
            <summary>
            Add data to the message.
            </summary>
            <returns>A packet writer to fill with the message data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.OutgoingResponse.AddErrorCode(Demo3D.PLC.Comms.CIP.ExtendedStatus)">
            <summary>
            Adds an error code to the message.
            </summary>
            <param name="status">The error status.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.OutgoingResponse.ConvertToAdditionalStatus(System.UInt16[])">
            <summary>
            Returns a buffer from an array of ushorts.
            </summary>
            <param name="extendedStatus">Extended status codes.</param>
            <returns>Additional status buffer.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.OutgoingResponse.ConvertToAdditionalStatus(System.UInt32[])">
            <summary>
            Returns a buffer from an array of ushorts.
            </summary>
            <param name="extendedStatus">Extended status codes.</param>
            <returns>Additional status buffer.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.OutgoingResponseContainer">
            <summary>
            An encapsulation packet that can contain message router format responses.
            Essentially implements a method AddMessage for adding message router format messages to a packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.OutgoingResponseContainer.AddMessage(Demo3D.PLC.Comms.CIP.ServiceCode)">
            <summary>
            Adds a new response to the message container.
            </summary>
            <param name="serviceCode">The response service code.</param>
            <returns>A new response to fill with data.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.ClassID">
            <summary>
            Type safe enumeration for Class IDs.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.Identity">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.MessageRouter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.DeviceNet">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.Assembly">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.Connection">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.ConnectionManager">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.AnalogInputPoint">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.Parameter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.File">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.CIPMotion">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.TimeSync">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.QOS">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.ControlNetScheduling">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.Connections">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.Port">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.TCPIP">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ClassID.EthernetLink">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.ConnectionTriad">
            <summary>
            Connection Triad (uniquely identifies a connection - Vol 3 3-5.5.1.7).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.ConnectionTriad.ConnectionSerial">
            <summary>
            The connection serial number.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.ConnectionTriad.Vendor">
            <summary>
            The device vendor.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.ConnectionTriad.DeviceSerial">
            <summary>
            The device serial number.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.#ctor(System.UInt16,Demo3D.PLC.Comms.CPF.DeviceVendor,System.UInt32)">
            <summary>
            Constructs a ConnectionKey.
            </summary>
            <param name="connectionSerial">The connection serial number.</param>
            <param name="vendor">The device vendor.</param>
            <param name="deviceSerial">The deviceserial number.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.E3DConnectionID(System.UInt16)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.MarshalForwardOpen(Demo3D.IO.IDataWriter)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.UnmarshalForwardOpen(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.MarshalSafety(Demo3D.IO.IDataWriter)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.UnmarshalSafety(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.Equals(Demo3D.PLC.Comms.CIP.ConnectionTriad)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ConnectionTriad.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH">
            <summary>
            EPATH aka IOI (Internal Object Identifier).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.Buffer">
            <summary>
            The raw data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.#ctor(System.Boolean)">
            <summary>
            Construct an empty (padded) EPATH.
            </summary>
            <param name="padded">True if the path is padded.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.#ctor(System.Boolean,Demo3D.IO.BufferSegment@)">
            <summary>
            Construct a new (padded) EPATH from a buffer.
            </summary>
            <param name="padded">True if the path is padded.</param>
            <param name="buffer">Data buffer containing EPATH data.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LengthBytes">
            <summary>
            Length of EPATH data in bytes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LengthWords">
            <summary>
            Length of EPATH data in words.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.Segment">
            <summary>
            A segment of the EPATH.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.PortSegment">
            <summary>
            A Port segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.Port">
            <summary>
            The port number (or uint.MaxValue for wildcard port).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.Address">
            <summary>
            The port address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.Value">
            <summary>
            The address as a value for numerical addresses (or uint.MaxValue).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.#ctor(Demo3D.PLC.Comms.CIP.PortNo,Demo3D.IO.BufferSegment@)">
            <summary>
            Construct a new Port segment.
            </summary>
            <param name="port">The port number.</param>
            <param name="address">The port address.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.#ctor">
            <summary>
            Construct a new Port segment wildcard.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.WildCard">
            <summary>
            True if this is the wildcard port segment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.PortSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.PortSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.LogicalType">
            <summary>
            The logical segment type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Class">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Instance">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Member">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Connection">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Attribute">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Special">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Service">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalType.Extended">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment">
            <summary>
            A logical segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment.Type">
            <summary>
            The logical segment type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.LogicalType)">
            <summary>
            Construct a new Logical segment.
            </summary>
            <param name="type">The logical segment type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment.GetHashCode">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment">
            <summary>
            A logical value segment.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.LogicalFormat">
            <summary>
            The segment format.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.LogicalFormat.Byte">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.LogicalFormat.Word">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.LogicalFormat.Int">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.Format">
            <summary>
            The segment format.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.LogicalType,Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.LogicalFormat,System.UInt32)">
            <summary>
            Constructs a new logical segment.
            </summary>
            <param name="type">The logical segment type.</param>
            <param name="format">The segment format.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.LogicalType,System.UInt32)">
            <summary>
            Construct a new logical segment.
            </summary>
            <param name="type">The logical segment type.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.LogicalType)">
            <summary>
            Constructs a wildcard segment.
            </summary>
            <param name="type">The logical segment type.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.IsWildcard">
            <summary>
            True if this is a wildcard segment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment">
            <summary>
            A logical EDS segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment.EDSInfo">
            <summary>
            The EDS information.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment.Compat">
            <summary>
            The compatibility bit.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment.#ctor(Demo3D.PLC.Comms.CPF.EDSInfo,System.Boolean)">
            <summary>
            Constructs a new EDS logical segment.
            </summary>
            <param name="edsInfo">The EDS information.</param>
            <param name="compat">Compatibility bit.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.LogicalSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalEDSInfoSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment">
            <summary>
            A simple data segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment.Data">
            <summary>
            The segment data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment.#ctor(Demo3D.IO.BufferSegment@)">
            <summary>
            Constructs a simple data segment.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment.#ctor(System.Byte[])">
            <summary>
            Constructs a simple data segment.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SimpleDataSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment">
            <summary>
            An ANSI symbol segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment.Symbol">
            <summary>
            The symbol name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment.#ctor(System.String)">
            <summary>
            Constructs an ANSI symbol segment.
            </summary>
            <param name="symbol">The symbol name.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AnsiSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.NetworkType">
            <summary>
            Network segment network type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkType.Schedule">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkType.FixedTag">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkType.ProductionInhibitTimeShort">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkType.Safety">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkType.ProductionInhibitTimeLong">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkType.Extended">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.NetworkSubType">
            <summary>
            Network segment sub type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkSubType.Port">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkSubType.AggregationParticipantId">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.NetworkSubType.BankMaster">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment">
            <summary>
            A network segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment.Type">
            <summary>
            The network segment type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.NetworkType)">
            <summary>
            Constructs a network segment.
            </summary>
            <param name="type">Network type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment">
            <summary>
            A network segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment.Data">
            <summary>
            Network segment data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.NetworkType,System.Byte)">
            <summary>
            Constructs a network segment.
            </summary>
            <param name="type">Network type.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.StandardNetworkSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment">
            <summary>
            An extended network segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment.SubType">
            <summary>
            The network segment sub type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.NetworkType,Demo3D.PLC.Comms.CIP.EPATH.NetworkSubType)">
            <summary>
            Constructs a network segment.
            </summary>
            <param name="type">Network type.</param>
            <param name="subType">Network sub type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment">
            <summary>
            An extended network segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment.Data">
            <summary>
            Network segment data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.NetworkType,Demo3D.PLC.Comms.CIP.EPATH.NetworkSubType,Demo3D.IO.BufferSegment@)">
            <summary>
            Constructs a network segment.
            </summary>
            <param name="type">Network type.</param>
            <param name="subType">Network sub type.</param>
            <param name="data">Data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.OtherExtendedNetworkSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment">
            <summary>
            An aggregation participant id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment.Id">
            <summary>
            Participant id.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment.#ctor(System.Byte)">
            <summary>
            Constructs a participant id segment.
            </summary>
            <param name="id">Participant id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.ExtendedNetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.AggregationParticipantIdSegment.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.SafetyFormatType">
            <summary>
            Safety segment format.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.SafetyFormatType.Target">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.SafetyFormatType.Router">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.EPATH.SafetyFormatType.Extended">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment">
            <summary>
            A safety segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.Format">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.SCCRC">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.SCTS">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.TimeCorrectionEPI">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.TimeCorrectionNetworkParams">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.TUNID">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.OUNID">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.PingIntervalEPIMul">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.TimeCoordMsgMinMul">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.NetworkTimeExpectationMul">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.TimeoutMul">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.MaxConsumerNumber">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.CPCRC">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.TimeCorrectionConnectionId">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.#ctor(Demo3D.PLC.Comms.CIP.EPATH.SafetyFormatType,System.UInt32,Demo3D.PLC.Comms.CIP.DateAndTime,System.UInt32,Demo3D.PLC.Comms.CIP.NetworkParams,Demo3D.PLC.Comms.CIP.UNID,Demo3D.PLC.Comms.CIP.UNID,System.UInt16,System.UInt16,System.UInt16,System.Byte,System.Byte,System.UInt32,System.UInt32)">
            <summary>
            Constructs a Safety segment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.Marshal(Demo3D.IO.IDataWriter)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.Unmarshal(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.SafetySegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.NetworkSegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.SafetySegment.GetHashCode">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.TargetSafetySegment">
            <summary>
            The target safety segment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.TargetSafetySegment.#ctor(System.UInt32,Demo3D.PLC.Comms.CIP.DateAndTime,System.UInt32,Demo3D.PLC.Comms.CIP.NetworkParams,Demo3D.PLC.Comms.CIP.UNID,Demo3D.PLC.Comms.CIP.UNID,System.UInt16,System.UInt16,System.UInt16,System.Byte,System.Byte,System.UInt32,System.UInt32)">
            <summary>
            Constructs a target safety segment.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment">
            <summary>
            The extended safety segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment.MaxFaultNumber">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment.InitialTimestamp">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment.InitialRollover">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment.#ctor(System.UInt32,Demo3D.PLC.Comms.CIP.DateAndTime,System.UInt32,Demo3D.PLC.Comms.CIP.NetworkParams,Demo3D.PLC.Comms.CIP.UNID,Demo3D.PLC.Comms.CIP.UNID,System.UInt16,System.UInt16,System.UInt16,System.Byte,System.Byte,System.UInt16,System.UInt32,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Constructs an extended safety segment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment.Equals(Demo3D.PLC.Comms.CIP.EPATH.SafetySegment)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ExtendedSafetySegment.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Port(Demo3D.PLC.Comms.CIP.PortNo,System.Byte[])">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Port(Demo3D.PLC.Comms.CIP.PortNo,System.UInt32)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Class(Demo3D.PLC.Comms.CIP.ClassID)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Class(System.UInt32)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Instance(System.UInt32)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Attribute(System.UInt32)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ConnectionPoint(System.Byte)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.PortWildcard">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.InstanceWildcard">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.ConnectionPointWildcard">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.AttributeWildcard">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.MemberWildcard">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.Writer">
            <summary>
            Creates/builds an EPATH.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.#ctor(System.Boolean)">
            <summary>
            Constructs an EPATH writer.
            </summary>
            <param name="padded">True if EPATH is to be padded.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.#ctor(Demo3D.PLC.Comms.CIP.EPATH)">
            <summary>
            Constructs an EPATH writer starting with a copy of another EPATH.
            </summary>
            <param name="epath">EPATH to copy.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.Writer.EPATH">
            <summary>
            The constructed EPATH.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Port(Demo3D.PLC.Comms.CIP.PortNo,System.Byte[])">
            <summary>
            Adds a port segment.
            </summary>
            <param name="port">The port number.</param>
            <param name="address">The address.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Port(Demo3D.PLC.Comms.CIP.PortNo,System.UInt32)">
            <summary>
            Adds a single byte numerical port segment.
            </summary>
            <param name="port">The port number.</param>
            <param name="address">The address as a number.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Logical(Demo3D.PLC.Comms.CIP.EPATH.LogicalType,Demo3D.PLC.Comms.CIP.EPATH.LogicalValueSegment.LogicalFormat,System.Byte[])">
            <summary>
            Adds a logical segment.
            </summary>
            <param name="type">Logical segment type.</param>
            <param name="format">Segment format.</param>
            <param name="value">Segment data.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Logical(Demo3D.PLC.Comms.CIP.EPATH.LogicalType,System.UInt32)">
            <summary>
            Adds a logical segment.
            </summary>
            <param name="type">Logical segment type.</param>
            <param name="value">Segment value.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Class(Demo3D.PLC.Comms.CIP.ClassID)">
            <summary>
            Adds a class logical segment.
            </summary>
            <param name="classId">The class ID.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Instance(System.UInt32)">
            <summary>
            Adds an instance logical segment.
            </summary>
            <param name="instance">The instance ID.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Member(System.UInt32)">
            <summary>
            Adds a member logical segment.
            </summary>
            <param name="member">The member index.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.Attribute(System.UInt32)">
            <summary>
            Adds an attribute logical segment.
            </summary>
            <param name="attribute">The attribute ID.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.EDSInfo(Demo3D.PLC.Comms.CPF.EDSInfo,System.Boolean)">
            <summary>
            Adds an EDS segment.
            </summary>
            <param name="edsInfo">The EDS information.</param>
            <param name="compat">The compatibility bit.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.SimpleData(Demo3D.IO.Buffer)">
            <summary>
            Adds a simple data segment.
            </summary>
            <param name="data">The data.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.SimpleData(System.Byte[])">
            <summary>
            Adds a simple data segment.
            </summary>
            <param name="data">The data.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.AnsiSymbol(System.String)">
            <summary>
            Adds an ANSI symbol segment.
            </summary>
            <param name="value">The symbol name.</param>
            <returns>This.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Writer.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath">
            <summary>
            A logical path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.Segments">
            <summary>
            The list of segments in the path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.Index">
            <summary>
            The number of segments at the start of the path to ignore (ie consumed).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.#ctor(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.CIP.EPATH.Segment})">
            <summary>
            Constructs a logical path from a list of segment.
            </summary>
            <param name="segments"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.#ctor(Demo3D.PLC.Comms.CIP.EPATH.Segment[])">
            <summary>
            Constructs a logical path from a list of segment.
            </summary>
            <param name="segments"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.#ctor(System.Collections.Generic.IEnumerable{Demo3D.PLC.Comms.CIP.EPATH.Segment})">
            <summary>
            Constructs a logical path from a list of segment.
            </summary>
            <param name="segments"></param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.Remaining">
            <summary>
            The number of remaining segments to consume.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.Matches(Demo3D.PLC.Comms.CIP.EPATH.LogicalPath,System.Int32@,System.Int32)">
            <summary>
            Matches two paths, ignoring any segments in either path before the current 'index', and 
            only matching at most 'maxCompare' segments.
            </summary>
            <param name="other">Other path to compare.</param>
            <param name="matchCount">Number of segments matched.</param>
            <param name="maxCompare">Maximum number of segments to compare (or -1 to compare them all).</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.Matches(Demo3D.PLC.Comms.CIP.EPATH.LogicalPath,System.Int32)">
            <summary>
            Match two paths, ignoring any segments in either path before the current 'index', and 
            only matching at most 'maxCompare' segments.
            </summary>
            <param name="other">Other path to compare.</param>
            <param name="maxCompare">Maximum number of segments to match (or -1 to compare them all).</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.Consume(Demo3D.PLC.Comms.CIP.EPATH.Segment[])">
            <summary>
            Return (and consume) all segments that match a set of segments.
            </summary>
            <param name="match">The list of segments to match.</param>
            <returns>A list of matching segments (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.LogicalPath.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.Reader">
            <summary>
            Reads/decodes an EPATH into a raw list of segments.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.Reader.RawSegments">
            <summary>
            List of EPATH buffer pointers, and the corresponding decoded EPATH segment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Reader.#ctor(Demo3D.PLC.Comms.CIP.EPATH)">
            <summary>
            Constructs a raw EPATH reader.
            </summary>
            <param name="ePath">The EPATH to read.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.Reader.Segments">
            <summary>
            List of decoded EPATH segments.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Reader.All">
            <summary>
            Return the entire remaining EPATH without applying multi-path or shortcut rules.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Reader.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.EPATH.EPathIterator">
            <summary>
            Reads/interprets a raw EPATH into a set of logical paths.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.EPathIterator.#ctor(Demo3D.PLC.Comms.CIP.EPATH)">
            <summary>
            Constructs an EPATH reader.
            </summary>
            <param name="ePath">The EPATH to read.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.EPATH.EPathIterator.MorePathsAvailable">
            <summary>
            Return true if there are more logical paths in the ePath.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.EPathIterator.Next">
            <summary>
            Step through a multi-path EPATH returning the current logical path, or null if there are no more.
            </summary>
            <returns>The next logical path.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.EPathIterator.ToString">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.Clone">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.EPATH.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.ExtendedStatus">
            <summary>
            CIP message router status.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.ExtendedStatus.Status">
            <summary>
            General status.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.ExtendedStatus.AdditionalStatus">
            <summary>
            Additional status data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ExtendedStatus.#ctor(Demo3D.PLC.Comms.CIP.Status)">
            <summary>
            Constructs an ExtendedStatus.
            </summary>
            <param name="status">General status.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ExtendedStatus.#ctor(Demo3D.PLC.Comms.CIP.Status,Demo3D.IO.BufferSegment)">
            <summary>
            Constructs an ExtendedStatus.
            </summary>
            <param name="status">General status.</param>
            <param name="additionalStatus">Additional status data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ExtendedStatus.#ctor(Demo3D.PLC.Comms.CIP.Status,System.UInt16[])">
            <summary>
            Constructs an ExtendedStatus.
            </summary>
            <param name="status">General status.</param>
            <param name="additionalStatus">Additional status data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ExtendedStatus.op_Implicit(Demo3D.PLC.Comms.CIP.Status)~Demo3D.PLC.Comms.CIP.ExtendedStatus">
            <summary>
            Implicit conversion from Status to ExtendedStatus.
            </summary>
            <param name="status">General status.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.ExtendedStatus.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest">
            <summary>
            Forward close request information.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest.RequestTiming">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest.OriginatorId">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest.ConnectionPath">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest.Route">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest.#ctor(Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming,Demo3D.PLC.Comms.CIP.ConnectionTriad,Demo3D.PLC.Comms.CIP.EPATH)">
            <summary>
            Constructs a ForwardClose request.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest.Marshal(Demo3D.IO.IDataWriter)">
            <summary>
            Marshal a ForwardClose request.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest.Unmarshal(Demo3D.IO.IDataReader)">
            <summary>
            Unmarshal a ForwardClose request.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardCloseResponse">
            <summary>
            ForwardClose response.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardCloseResponse.OriginatorId">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardCloseResponse.ApplicationReply">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardCloseResponse.#ctor(Demo3D.PLC.Comms.CIP.ConnectionTriad,Demo3D.IO.Buffer)">
            <summary>
            Constructs a ForwardClose response.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardCloseResponse.Marshal(Demo3D.IO.IDataWriter)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardCloseResponse.Unmarshal(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose">
            <summary>
            Forward open/close definitions.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming.ThirtySeconds">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming.FlagsTickMul">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming.Ticks">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming.#ctor(System.Byte,System.Byte)">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming.Flags">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming.TickMul">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming.TimeoutMs">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenConnectionPathParser">
            <summary>
            ForwardOpen connection path parser.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenConnectionPathParser.AssemblyInstances">
            <summary>
            Assembly instances.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenConnectionPathParser.DataSegment">
            <summary>
            Optional data segment.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenConnectionPathParser.SafetySegment">
            <summary>
            Optional safety segment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenConnectionPathParser.#ctor(Demo3D.PLC.Comms.CIP.EPATH.LogicalPath)">
            <summary>
            Parse a ForwardOpen connection path.
            </summary>
            <param name="path">The logical path.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest">
            <summary>
            Forward open request information.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.ConnectionTimeoutMultiplier">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.ConnectionTimeoutMultiplier.Value">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.ConnectionTimeoutMultiplier.#ctor(System.Byte)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.ConnectionTimeoutMultiplier.Multiplier">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Direction">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Direction.Client">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Direction.Server">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Trigger">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Trigger.Cyclic">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Trigger.ApplicationObject">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Class">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Class.Class0">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Class.Class1">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Class.Class3">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Transport">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Transport.Value">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Transport.Direction">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Transport.Trigger">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Transport.Class">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Transport.#ctor(System.Byte)">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.RequestTiming">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.OTConnectionID">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.TOConnectionID">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.OriginatorId">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.ConnTimeoutMul">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.OTRpiUs">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.OTParams">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.TORpiUs">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.TOParams">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.TransportFlags">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.ConnectionPath">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Route">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.#ctor(Demo3D.PLC.Comms.CIP.Format.ForwardOpenClose.UnconnectedRequestTiming,System.UInt32,System.UInt32,Demo3D.PLC.Comms.CIP.ConnectionTriad,Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.ConnectionTimeoutMultiplier,System.UInt32,Demo3D.PLC.Comms.CIP.NetworkParams,System.UInt32,Demo3D.PLC.Comms.CIP.NetworkParams,Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Transport,Demo3D.PLC.Comms.CIP.EPATH)">
            <summary>
            Constructs a ForwardOpen request.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Marshal(Demo3D.IO.IDataWriter,Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags)">
            <summary>
            Marshal a ForwardOpen request.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest.Unmarshal(Demo3D.IO.IDataReader,Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags)">
            <summary>
            Unmarshal a ForwardOpen request.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse">
            <summary>
            ForwardOpen response.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.OTConnectionID">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.TOConnectionID">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.OriginatorId">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.OTApiUs">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.TOApiUs">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.ApplicationReply">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.#ctor(System.UInt32,System.UInt32,Demo3D.PLC.Comms.CIP.ConnectionTriad,System.UInt32,System.UInt32,Demo3D.IO.BufferSegment@)">
            <summary>
            Constructs a ForwardOpen response.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.Marshal(Demo3D.IO.IDataWriter)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Format.ForwardOpenResponse.Unmarshal(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.BusNode">
            <summary>
            For our owning module, this represents one reachable node on one of the buses to which the owner is connected.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.BusNode.Router">
            <summary>
            The Message Router of the reachable module.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.BusNode.PortNo">
            <summary>
            The port number on the bus of the module.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.BusNode.PortAddress">
            <summary>
            The port address of the module.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.BusNode.#ctor(Demo3D.PLC.Comms.CIP.Nodes.MessageRouter,Demo3D.PLC.Comms.CIP.PortNo,Demo3D.PLC.Comms.CIP.Nodes.PortAddress)">
            <summary>
            Constructs a BusNode.
            </summary>
            <param name="router">The Message Router of the reachable module.</param>
            <param name="portNo">The port number on the bus of the reachable module.</param>
            <param name="portAddress">The port address of the reachable module.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.BusNode.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration">
             <summary>
             For a particular module (<see cref="P:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.IODevice"/>), this lists all the reachable modules through all the buses
             that this module is attached.
            
             This isn't the configuration for a single bus.
             </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.IODevice">
            <summary>
            The Message Router of the IO device.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.MaxNodes">
            <summary>
            The maximum number of nodes on the backplane (or -1 if unknown).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.Nodes">
            <summary>
            A list of reachable modules.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.#ctor(Demo3D.PLC.Comms.CIP.Nodes.MessageRouter,System.Int32,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.CIP.Nodes.BusNode})">
            <summary>
            Constructs a BusConfiguration.
            </summary>
            <param name="ioDevice">The Message Router of the IO device.</param>
            <param name="maxNodes">The maximum number of nodes on the backplane (or -1 if unknown).</param>
            <param name="nodes">A list of reachable modules.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.GetAllReachableModules">
            <summary>
            Gets a list of all reachable modules.
            </summary>
            <returns>A list of all reachable nodes.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.SetupBus">
            <summary>
            Configure the bus.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPError">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPError.Breakpoint">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPObject">
            <summary>
            Represents one CIP object.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.Node">
            <summary>
            The associated node in the CIP node hierarchy.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ClassId">
            <summary>
            The class id of an object.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.InstanceId">
            <summary>
            The instance id of an object.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.Router">
            <summary>
            The message router instance.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.AllocateNodeFunction">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ConstructNode">
            <summary>
            Initialize object properties.
            </summary>
            <remarks>
            <para>
            Initialization part 1. The object's constructor performs basic object initialization (eg property default values)
            and this method ConstructNode is called.
            </para>
            <para>
            Initialization part 2. When a node is added to the hierarchy, <see cref="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyAddedHierarchy"/> is called on the
            child object (for object specific initialization) first, and then <see cref="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyChildAdded(Demo3D.PLC.Comms.CIP.Nodes.CIPObject)"/> is called
            on the parent object (for class level initialization).
            </para>
            <para>
            Initialization part 3. After the basic node hierarchy has been established, the Message Router calls
            <see cref="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.SetupBus(Demo3D.PLC.Comms.CIP.Nodes.BusNode,Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration)"/> on all nodes in the hierarchy.
            </para>
            <para>
            Initialization part 4. Also after the basic node hierarchy has been established, the Message Router calls
            <see cref="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.Initialize"/> on all nodes in the hierarchy.  If a node is added after initialization, then the method
            gets called immediately after <see cref="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyChildAdded(Demo3D.PLC.Comms.CIP.Nodes.CIPObject)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.SetInstance(Demo3D.PLC.Comms.CIP.ClassID,System.UInt32)">
            <summary>
            Set the node id.
            </summary>
            <param name="classId">Class id.</param>
            <param name="instanceId">Instance id (0 for a class).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyAddedHierarchy">
            <summary>
            Initialize object after its has been added to the hierarchy.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.OnChildAdded">
            <summary>
            Occurs when a child object has been added.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyChildAdded(Demo3D.PLC.Comms.CIP.Nodes.CIPObject)">
            <summary>
            Called to notify when a child object is added.
            </summary>
            <param name="child">The new child object.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.SetupBus(Demo3D.PLC.Comms.CIP.Nodes.BusNode,Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration)">
            <summary>
            Setup the bus configuration.
            </summary>
            <param name="thisNode">The bus node of this module.</param>
            <param name="busConfiguration">The full bus configuration.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.Initialize">
            <summary>
            Initialize the object.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.RequestRemoveChild(Demo3D.PLC.Comms.CIP.Nodes.CIPObject)">
            <summary>
            Called to request permission to remove a child.
            </summary>
            <param name="child">Child to remove.</param>
            <returns>True to remove ths child, or false to keep the child.</returns>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.OnChildRemoved">
            <summary>
            Occurs when a child object has been removed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyChildRemoved(Demo3D.PLC.Comms.CIP.Nodes.CIPObject)">
            <summary>
            Called to notify when a child object has been removed.
            </summary>
            <param name="child">The removed child object.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyRemovedHierarchy">
            <summary>
            Called to notify when this object has been removed from the hierarchy.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyAllChildrenRemoved">
            <summary>
            Called to notify when all removable children have been removed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.Descendants">
            <summary>
            Return all descendants of this node.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NumLinks">
            <summary>
            Returns the number of links.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.AllObjects">
            <summary>
            Returns all linked nodes.
            </summary>
            <returns>All linked nodes.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotImplementedPaths">
            <summary>
            A list of paths that we know we'll get asked for but are deliberately not implemented.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.Attributes">
            <summary>
            Extended attributes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.MissingAttributeFirstChance(System.UInt32)">
            <summary>
            First chance to intercept a missing attribute.
            Return true to indicate that we added an attribute.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAttributeProperties">
            <summary>
            Returns all attribute properties (in GetAttributeAll order, ie not necessarily numerical order).
            </summary>
            <returns>All the attribute properties (in GetAttributeAll order, ie not necessarily numerical order).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAttributeProperties(System.UInt32)">
            <summary>
            Return the attribute properties for one attribute.
            </summary>
            <param name="attributeId">The attribute ID.</param>
            <returns>Attribute properties.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAttributeValue(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.IO.IPacketWriter,System.UInt32)">
            <summary>
            Read the value of one attribute and write it into the responseData.
            </summary>
            <param name="context">Information about the message.</param>
            <param name="responseData">The data packet to place the attribute value.</param>
            <param name="attributeId">The attribute ID.</param>
            <returns>False if the attribute value could not be retrieved.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.SetAttributeValue(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.IO.IPacketWriter,Demo3D.IO.IPacketReader,System.UInt32)">
            <summary>
            Set one attribute to the value read from requestData.
            </summary>
            <param name="context">Information about the message.</param>
            <param name="responseData">The packet to place the response (if any), or null if no response is allowed.</param>
            <param name="requestData">The data packet to get the attribute value.</param>
            <param name="attributeId">The attribute ID.</param>
            <returns>False if the attribute value could not be set.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NotifyAttributesSet(System.Collections.Generic.List{System.UInt32},Demo3D.Common.IDataLocationProvider)">
            <summary>
            Callback to indicate that an attribute value has been set.  Only called at the end of the protocol request after all attributes
            in the packet have been set.
            </summary>
            <param name="attributesSet">List of attribute IDs set.</param>
            <param name="location">Information about the source of the attribute message.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAttributeValues">
            <summary>
            Return the values of all the attributes.
            </summary>
            <returns>List of attribute values.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAttributeSingle(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,System.UInt32)">
            <summary>
            Service GetAttributeSingle CIP request.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">Packet to put requested data.</param>
            <param name="attributeId">Attribute ID.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.SetAttributeSingle(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader,System.UInt32)">
            <summary>
            Service SetAttributeSingle CIP request.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">Packet to place the response.</param>
            <param name="requestData">The attribute value data.</param>
            <param name="attributeId">The attribute ID.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAttributesAll(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse)">
            <summary>
            Service GetAttributesAll CIP request.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">Packet to put requested data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.SetAttributesAll(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader)">
            <summary>
            Service SetAttributesAll CIP request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAttributeList(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader)">
            <summary>
            Service GetAttributeList CIP request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.SetAttributeList(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader)">
            <summary>
            Service SetAttributeList CIP request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.CreateValue(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions)">
            <summary>
            Create an attribute value of the specified dimensions.
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="dimensions">The data dimension selection from the request that's accessing the attribute value.</param>
            <returns>The new/existing attribute value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.FindAddOrUpdateAttributeValue(System.UInt32,System.Func{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Action{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Boolean@)">
            <summary>
            Add or update an attribute value.
            <para>
            If an attribute value with the specified id does not exist, then the function '<paramref name="create"/>' is called
            to create a new attribute value.  If the '<paramref name="create"/>' function is null then no new attribute value is added.
            </para>
            <para>
            If an attribute value with the specified id already exists, then the function '<paramref name="update"/>' (if not
            null) is called to update the attribute value.
            </para>
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="create">A function to create a new attribute value (or null).</param>
            <param name="update">A function to update the existing attribute value (or null).</param>
            <param name="created">True if the value was created.</param>
            <returns>The new/existing attribute (or null).</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodeTreeProperties">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodeTreeProperties.FullHierarchy">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodeTreeProperties.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodesProperty">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodesProperty.#ctor(Demo3D.PLC.Comms.CIP.Nodes.CIPObject,Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodeTreeProperties)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodesProperty.GetProperties">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodesProperty.ToString">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.PropertyDescriptorOverrides">
            <summary>
            Override the property descriptor for a property displaying a particular attribute.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.OverrideNodePropertyBag">
            <summary>
            Return the property bag for this node.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetNodePropertyBag">
            <summary>
            Return the property bag for this node.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.GetAllNodePropertyBag(Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodeTreeProperties)">
            <summary>
            Return the properties for this node, plus properties for navigating the node hierarchy.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.NodeName">
            <summary>
            Override to provide a name for the node.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass">
            <summary>
            Object class base class.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.DefaultVersion">
            <summary>
            The default version for this class.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.ParentInstance">
            <summary>
            The parent instance of a class (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.ClassNode">
            <summary>
            The class node of this class object.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.Hidden">
            <summary>
            Class is not reported by the message router. (Default false.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.Version">
            <summary>
            Version. (Default 1.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.VersionSupported">
            <summary>
            Version attribute supported. (Default true.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.LargeInstIds">
            <summary>
            Instance id's are UDINT's. (Default false.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.NumInstancesSupported">
            <summary>
            NumInstances attribute supported. (Default true.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.MaxInstanceSupported">
            <summary>
            MaxInstance attribute supported. (Default true.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.NumInstances">
            <summary>
            Number of instances. (Default -1 to report actual number of instances.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.MaxInstanceId">
            <summary>
            The maximum instance id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.MaxClassAttrId">
            <summary>
            The maximum class attribute id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.MaxInstanceAttrId">
            <summary>
            The maximum instance attribute id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.GetAttributesAllSupported">
            <summary>
            GetAttributesAll service request status code. (Default Success.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.GetAttributeListSupported">
            <summary>
            GetAttributeList service request status code. (Default Success.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.GetAttributeSingleSupported">
            <summary>
            GetAttributeSingle service request status code. (Default Success.)
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.#ctor(Demo3D.PLC.Comms.CIP.ClassID)">
            <summary>
            Constructs an ObjectClass.
            </summary>
            <param name="classId">Optional class id (or 0)</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.AddChild(Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance)">
            <summary>
            Add an instance to a class.
            </summary>
            <param name="instance">Instance to add.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.MissingInstanceFirstChance(System.UInt32)">
            <summary>
            First chance to intercept a missing node.
            Return true to indicate that we added a node.
            </summary>
            <param name="instanceId">The id of the missing node.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.FindInstance(System.UInt32,System.Boolean)">
            <summary>
            Find object with a specified id.
            </summary>
            <param name="instanceId">Instance id.</param>
            <param name="allowAutoCreate">Allow automatically creating instances where possible.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.AllInstances">
            <summary>
            All instances.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.AllInstances``1">
            <summary>
            All instances of a specified type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.GetAttributeProperties">
            <summary>
            Return all attribute properties (in GetAttributeAll order, ie not necessarily numerical order).
            </summary>
            <returns>All the attribute properties (in GetAttributeAll order, ie not necessarily numerical order).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.GetAttributeValue(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.IO.IPacketWriter,System.UInt32)">
            <summary>
            Read the value of one attribute and write it into the responseData.
            </summary>
            <param name="context">Information about the message.</param>
            <param name="responseData">The data packet to place the attribute value.</param>
            <param name="attributeId">The attribute ID.</param>
            <returns>False if the attribute value could not be retrieved.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.ServiceErrorStatus(Demo3D.PLC.Comms.CIP.ServiceCode)">
            <summary>
            Return error code for a service that's not supported by class nodes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.CreateInstance(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.PLC.Comms.CIP.IncomingRequest,System.UInt32)">
            <summary>
            Create a new instance of the class.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass.ServiceRequest(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponseContainer,Demo3D.PLC.Comms.CIP.IncomingRequest,Demo3D.PLC.Comms.CIP.EPATH.LogicalPath,Demo3D.PLC.Comms.CIP.Nodes.ServiceRequestHandler)">
            <summary>
            Try to service a request where we couldn't traverse the entire logical EPATH.
            Route will contain the remaining elements of the path that need to be resolved.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance">
            <summary>
            Object instance base class.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.ParentClass">
            <summary>
            The parent class of an instance (or null).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.#ctor(Demo3D.PLC.Comms.CIP.ClassID)">
            <summary>
            Constructs an ObjectInstance with an optional class id (or 0).
            </summary>
            <param name="classId">Class id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.#ctor(Demo3D.PLC.Comms.CIP.ClassID,System.UInt32)">
            <summary>
            Constructs an ObjectInstance with class and instance ids.
            </summary>
            <param name="classId">Class id.</param>
            <param name="instanceId">Instance id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.#ctor(Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass)">
            <summary>
            Constructs an ObjectInstance as an instance of the specified class.
            </summary>
            <param name="cls">Class.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.#ctor(Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass,System.UInt32)">
            <summary>
            Constructs an ObjectInstance as an instance of the specified class, and with an instance id.
            </summary>
            <param name="cls">Class.</param>
            <param name="instanceId">Instance id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.SetInstance(Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass,System.UInt32)">
            <summary>
            Set the node id.
            </summary>
            <param name="cls">The parent class.</param>
            <param name="instanceId">Instance id (0 for a class).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.EPATH">
            <summary>
            EPATH containing class and instance id.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.AddChild(Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectClass)">
            <summary>
            Add a class to an instance.
            </summary>
            <param name="cls">Class to add.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.FindClass(Demo3D.PLC.Comms.CIP.ClassID)">
            <summary>
            Find class with a specified id.
            </summary>
            <param name="classId">Class id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.FindClass``1(Demo3D.PLC.Comms.CIP.ClassID)">
            <summary>
            Find class with a spcified type and id.
            </summary>
            <param name="classId">Class id to find.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.AllInstances``1(Demo3D.PLC.Comms.CIP.ClassID)">
            <summary>
            Find all instances of a specified sub class.
            </summary>
            <param name="classId">Class id to find.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.FindInstance``1(Demo3D.PLC.Comms.CIP.ClassID,System.UInt32,System.Boolean)">
            <summary>
            Find class instance by id.
            </summary>
            <param name="classId">Class id to find.</param>
            <param name="instanceId">Instance id to find.</param>
            <param name="allowAutoCreate">Allow automatically creating instances where possible.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.FindInstance(Demo3D.PLC.Comms.CIP.ClassID,System.UInt32,System.Boolean)">
            <summary>
            Find class instance by id.
            </summary>
            <param name="classId">Class id to find.</param>
            <param name="instanceId">Instance id to find.</param>
            <param name="allowAutoCreate">Allow automatically creating instances where possible.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPObject.ObjectInstance.CreateAttributeList(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.PLC.Comms.CIP.IncomingRequest)">
            <summary>
            Common interpretation of the data part of a Create service request.
            The service data is the same format as the SetAttributeList, but doesn't return the same SetAttributeList response.
            </summary>
            <param name="context">Message information.</param>
            <param name="response">The packet to write the response into.</param>
            <param name="message">The received request.</param>
            <returns>False if an attribute could not be set.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPServices">
            <summary>
            A class for processing CIP service requests.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.NotImplementedAttribute(System.UInt32)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.GetAttributeSingle(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,System.UInt32)">
            <summary>
            Service GetAttributeSingle CIP request.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">Packet to put requested data.</param>
            <param name="attributeId">Attribute ID.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.SetAttributeSingle(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader,System.UInt32)">
            <summary>
            Service SetAttributeSingle CIP request.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">Packet to place the response.</param>
            <param name="requestData">The attribute value data.</param>
            <param name="attributeId">The attribute ID.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.GetAttributesAll(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse)">
            <summary>
            Service GetAttributesAll CIP request.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">Packet to put requested data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.SetAttributesAll(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader)">
            <summary>
            Service SetAttributesAll CIP request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.GetAttributeList(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader)">
            <summary>
            Service GetAttributeList CIP request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.SetAttributeList(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.IO.IPacketReader)">
            <summary>
            Service SetAttributeList CIP request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.ServiceErrorStatus(Demo3D.PLC.Comms.CIP.ServiceCode)">
            <summary>
            Return error code for a service that's not supported by this node.
            </summary>
            <param name="serviceCode">The requested service code.</param>
            <returns>The status to return to the client.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.ServiceRequest(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponseContainer,Demo3D.PLC.Comms.CIP.IncomingRequest)">
            <summary>
            Service a request.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">The packet to place the response.</param>
            <param name="message">The packet containing the request.</param>
            <returns>False if the request could not be serviced.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPServices.ServiceRequest(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponseContainer,Demo3D.PLC.Comms.CIP.IncomingRequest,Demo3D.PLC.Comms.CIP.EPATH.LogicalPath,Demo3D.PLC.Comms.CIP.Nodes.ServiceRequestHandler)">
            <summary>
            Try to service a request where we couldn't traverse the entire logical EPATH.
            Route will contain the remaining elements of the path that need to be resolved.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">The packet to place the response.</param>
            <param name="message">The packet containing the request.</param>
            <param name="route">The remaining request route.</param>
            <param name="handler">Request data.</param>
            <returns>False if the request could not be serviced.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.File">
            <summary>
            The File object.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.File.FileChanged">
            <summary>
            Occurs when the file data changes.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.File.FileState">
            <summary>
            File state.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.NonExistance">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.FileEmpty">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.FileLoaded">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.UploadInitiated">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.DownloadInitiated">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.UploadInProgress">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.DownloadInProgress">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.File.FileState.Storing">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.State">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.InstanceName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FormatVersion">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileName">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileMajor">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileMinor">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileSize">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileChecksum">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.InvocationMethod">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileSaveParams">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileAccess">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.File.FileData">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.File.#ctor(System.UInt32)">
            <summary>
            Constructs a File.
            </summary>
            <param name="instanceId">File instance id.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.IConnection">
            <summary>
            Represents a connection.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.IConnection.OTConnectionID">
            <summary>
            The originator to target connection id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.IConnection.TOConnectionID">
            <summary>
            The target to originator connection id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.IConnection.TOMaxPacketSize">
            <summary>
            The target to originator maxiumum packet size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.IConnection.Aspects">
            <summary>
            Dictionary of connection aspects.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler">
            <summary>
            A handler for a forward open request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.Request">
            <summary>
            The forward open request parameters.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.#ctor(Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest)">
            <summary>
            Constructs a ForwardOpenHandler.
            </summary>
            <param name="request">The forward open request parameters.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.RouteRequest(Demo3D.PLC.Comms.CIP.EPATH.LogicalPath)">
            <summary>
            Routes the request through to final target class/instance.
            </summary>
            <param name="route">The remaining route.</param>
            <returns>The target node.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.FindConnection(Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest)">
            <summary>
            Searches for an existing connection.
            </summary>
            <param name="request">The forward open request.</param>
            <returns>The connection if found, else null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.OpenConnection(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest,Demo3D.PLC.Comms.CIP.Nodes.ICIPNode)">
            <summary>
            Opens the connection and creates an IConnection object.
            </summary>
            <param name="context">The forward open message context.</param>
            <param name="request">The forward open request.</param>
            <param name="target">The target class/instance of the forward open request.</param>
            <returns>The new Connection object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.Success(Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest,Demo3D.PLC.Comms.CIP.Nodes.IConnection,Demo3D.IO.BufferSegment@)">
            <summary>
            Generates a success response to the caller.
            </summary>
            <param name="request">The forward open request.</param>
            <param name="connection">The connection object from <see cref="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.OpenConnection(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.Format.ForwardOpenRequest,Demo3D.PLC.Comms.CIP.Nodes.ICIPNode)"/>.</param>
            <param name="applicationData">Optional additional data to include in the success response.</param>
            <returns>The new Connection object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler.Error(Demo3D.PLC.Comms.CIP.ExtendedStatus)">
            <summary>
            Generates an error response to the caller.
            </summary>
            <param name="status">The error status.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler">
            <summary>
            A handler for a forward close request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler.Request">
            <summary>
            The forward close request parameters.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler.#ctor(Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest)">
            <summary>
            Constructs a ForwardCloseHandler.
            </summary>
            <param name="request">The forward close request.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler.RouteRequest(Demo3D.PLC.Comms.CIP.EPATH.LogicalPath)">
            <summary>
            Routes the request through to final target class/instance.
            </summary>
            <param name="route">The remaining route.</param>
            <returns>The target node.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler.FindConnection(Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest)">
            <summary>
            Searches for an existing connection.
            </summary>
            <param name="request">The forward close request.</param>
            <returns>The connection if found, else null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler.CloseConnection(Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest)">
            <summary>
            Closes the connection.
            </summary>
            <param name="request">The forward close request.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler.Success(Demo3D.PLC.Comms.CIP.Format.ForwardCloseRequest,Demo3D.IO.Buffer)">
            <summary>
            Generates a success response to the caller.
            </summary>
            <param name="request">The forward close request.</param>
            <param name="applicationData">Optional additional data to include in the success response.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler.Error(Demo3D.PLC.Comms.CIP.ExtendedStatus)">
            <summary>
            Generates an error response to the caller.
            </summary>
            <param name="status">The error status.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode">
            <summary>
            Represents a position in the node network for a class.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.Hidden">
            <summary>
            Class is not reported by the message router. (Default false.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.Version">
            <summary>
            Version. (Default 1.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.VersionSupported">
            <summary>
            Version attribute supported. (Default true.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.LargeInstIds">
            <summary>
            Instance id's are UDINT's. (Default false.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.NumInstancesSupported">
            <summary>
            NumInstances attribute supported. (Default true.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.MaxInstanceSupported">
            <summary>
            MaxInstance attribute supported. (Default true.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.NumInstances">
            <summary>
            Fixed number of instances. (Default -1 to report actual number of instances.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.MaxInstanceId">
            <summary>
            Fixed maximum instance id. (Default 0 to report actual max instance id.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.MaxClassAttrId">
            <summary>
            The maximum class attribute id. (Default -1 to report actual max class attribute id.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.MaxInstanceAttrId">
            <summary>
            The maximum instant attribute id. (Default -1 to report actual max instance attribute id.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.GetAttributesAllSupported">
            <summary>
            GetAttributesAll service request status code. (Default Success.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.GetAttributeListSupported">
            <summary>
            GetAttributeList service request status code. (Default Success.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPClassNode.GetAttributeSingleSupported">
            <summary>
            GetAttributeSingle service request status code. (Default Success.)
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode">
            <summary>
            Represents a position in the node network.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.Object">
            <summary>
            The node implementation.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.ClassId">
            <summary>
            Class id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.InstanceId">
            <summary>
            Instance id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.Router">
            <summary>
            The message router instance.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.Parent">
            <summary>
            Parent node (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.NumNodes">
            <summary>
            Returns the number of linked nodes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.LastNode">
            <summary>
            Returns the linked node with with maximum class/instance id.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.AllNodes">
            <summary>
            Returns all linked nodes (sorted by class/instance id).
            </summary>
            <returns>All linked nodes.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.SetInstance(Demo3D.PLC.Comms.CIP.ClassID,System.UInt32)">
            <summary>
            Set the node id.
            </summary>
            <param name="classId">Class id.</param>
            <param name="instanceId">Instance id (0 for a class).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.AddLink(Demo3D.PLC.Comms.CIP.Nodes.ICIPNode)">
            <summary>
            Add linked object.
            </summary>
            <param name="node">Linked node.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.RemoveLink(Demo3D.PLC.Comms.CIP.Nodes.ICIPNode,System.Boolean)">
            <summary>
            Remove linked node.
            </summary>
            <param name="node">Linked node to remove.</param>
            <param name="force">Override the rules that normally prevent a node being removed.</param>
            <returns>True if the node was removed.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.RemoveAllLinks">
            <summary>
            Remove all removable links.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.SetupBus(Demo3D.PLC.Comms.CIP.Nodes.BusNode,Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration)">
            <summary>
            Set up bus.
            </summary>
            <param name="thisNode">The bus node of this module.</param>
            <param name="busConfiguration">The full bus configuration.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.Initialize">
            <summary>
            Start initialization, initializing this node and all descendant nodes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.GetOrAddServices(System.Type,System.Func{System.Type,Demo3D.PLC.Comms.CIP.Nodes.CIPServices})">
            <summary>
            Get or add a CIP services provider.
            </summary>
            <param name="servicesType">The services provider type. Only one of any specific type can be registered at a time.</param>
            <param name="servicesFactory">A function for creating the services provider.</param>
            <returns>The existing services provider or the newly created services provider.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.NotImplementedPaths">
            <summary>
            A list of paths that we know we'll get asked for but are deliberately not implemented.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.ServiceNotSupported(Demo3D.PLC.Comms.CIP.OutgoingResponse,Demo3D.PLC.Comms.CIP.ServiceCode,Demo3D.PLC.Comms.CIP.Status)">
            <summary>
            Report a request for a service that's not supported.
            </summary>
            <param name="response">The response to add the error to.</param>
            <param name="serviceCode">The service not supported.</param>
            <param name="errorCode">Status error code.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ICIPNode.ServiceRequest(Demo3D.PLC.Comms.CIP.Nodes.MessageContext,Demo3D.PLC.Comms.CIP.OutgoingResponseContainer,Demo3D.PLC.Comms.CIP.IncomingRequest,Demo3D.PLC.Comms.CIP.EPATH.LogicalPath,Demo3D.PLC.Comms.CIP.Nodes.ServiceRequestHandler)">
            <summary>
            Try to service a request where we couldn't traverse the entire logical EPATH.
            Route will contain the remaining elements of the path that need to be resolved.
            </summary>
            <param name="context">Information about the request.</param>
            <param name="response">The packet to place the response.</param>
            <param name="message">The packet containing the request.</param>
            <param name="route">The remaining request route.</param>
            <param name="handler">Request data.</param>
            <returns>False if the request could not be serviced.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.CIPNodeExtensions">
            <summary>
            CIP node extension methods.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPNodeExtensions.Descendants(Demo3D.PLC.Comms.CIP.Nodes.ICIPNode)">
            <summary>
            Return all descendants of this node.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPNodeExtensions.GetOrAddServices``1(Demo3D.PLC.Comms.CIP.Nodes.ICIPNode,System.Func{System.Type,``0})">
            <summary>
            Get or add a CIP services provider.
            </summary>
            <typeparam name="ServicesType">The services provider type. Only one of any specific type can be registered at a time.</typeparam>
            <param name="node">The node to add the services provider.</param>
            <param name="servicesFactory">A function for creating the services provider.</param>
            <returns>The existing services provider or the newly created services provider.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.CIPNodeExtensions.GetOrAddServices``1(Demo3D.PLC.Comms.CIP.Nodes.ICIPNode,``0)">
            <summary>
            Get or add a CIP services provider.
            </summary>
            <typeparam name="ServicesType">The services provider type. Only one of any specific type can be registered at a time.</typeparam>
            <param name="node">The node to add the services provider.</param>
            <param name="services">The services provider to add.</param>
            <returns>The existing services provider or the newly created services provider.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Identity">
            <summary>
            The Identity object, returning the basic <see cref="P:Demo3D.PLC.Comms.CIP.Nodes.Identity.DeviceIdentity"/> of an object.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Identity.DeviceIdentity">
            <summary>
            The device identity.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.MessageContext">
            <summary>
            Optional information about the CIP request received.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.MessageContext.CPFReply">
            <summary>
            The CPF reply, if the reply is encapsulated in a CPF packet (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.MessageContext.ReservedSpace">
            <summary>
            Reserved space required for packet header information.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.MessageContext.CIPConnectionClosed">
            <summary>
            A class that will raise an event when the CIP connection closes (or null).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.MessageContext.#ctor(Demo3D.PLC.Comms.CPF.CPFServerReply,System.Func{System.Int32},System.Func{Demo3D.Net.IPRoutingInfo},Demo3D.PLC.Comms.IConnectionClosed,Demo3D.PLC.Comms.IConnectionClosed,Demo3D.Common.IComponentLogger)">
            <summary>
            Constructs a MessageContext.
            </summary>
            <param name="cpfReply">An object for creating CPF replies (or null).</param>
            <param name="spaceAvailable">A function for returning the current space available in the CIP reply packet (or null).</param>
            <param name="routingInformation">A function to return the request packet routing information (or null).</param>
            <param name="cipConnectionClosed">A class that will raise an event when the CIP connection closes (or null).</param>
            <param name="serverConnectionClosed">A class that will raise an event when the TCP/IP server connection closes (or null).</param>
            <param name="logger">An object for logging messages.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.MessageContext.GetSpaceAvailable">
            <summary>
            Remaining space available in the CIP reply (or int.MaxValue).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.MessageContext.GetRoutingInformation">
            <summary>
            Returns the routing information of the packet received (or null).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.MessageContext.Convert(Demo3D.PLC.Comms.MessageContextBase)">
            <summary>
            Create a MessageContext from a MessageContextBase.
            </summary>
            <param name="context">Information about the request.</param>
            <returns>A new MessageContext.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.MessageRouter">
            <summary>
            The message router.
            </summary>
            <remarks>
            The Message Router is the root of the CIP node tree.  From this node, you can navigate to any
            other node in the tree.  For example, various objects can be reached:
            <code>
            using Demo3D.PLC.Comms.CIP.Nodes;<br/>
            using Demo3D.PLC.Comms.CIP.Nodes.Motion;<br/>
            using Demo3D.PLC.Rockwell.Comms.CIP.Nodes;<br/>
            <br/>
            var identity   = mr.FindInstance{Identity}(ClassID.Identity, 1);                       // Get the Identity object.<br/>
            var timeSync   = mr.FindInstance{TimeSync}(ClassID.TimeSync, 1);                       // Get the TimeSync object.<br/>
            var mda        = mr.FindInstance{MotionDeviceAccess}(ClassID.CIPMotion, driveNumber);  // Get the MDA instance for a specified drive.<br/>
            var parameters = mr.FindClass{ParameterClass}(ClassID.Parameter).Parameters;           // Get the parameters for the device.
            </code>
            See <see cref="T:Demo3D.PLC.Comms.CIP.Nodes.Identity"/>, <see cref="T:Demo3D.PLC.Comms.CIP.Nodes.TimeSync"/>, <see cref="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess"/>, and <see cref="T:Demo3D.PLC.Comms.CIP.Nodes.ParameterClass"/>.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.MessageRouter.IOEntry">
            <summary>
            The IO configuration tree entry for this device/module.
            </summary>
            <remarks>
            Cast to <see cref="T:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry"/> for additional Rockwell specific information.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.MessageRouter.#ctor(Demo3D.PLC.Comms.CIP.IOModule)">
            <summary>
            Constructs a MessageRouter.
            </summary>
            <param name="ioEntry">The IO entry for this device/module.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.MessageRouter.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.FixedControllerPtoP">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.FixedDevicePtoP">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.FixedCtoD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.FixedDtoC">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.VariableControllerPtoP">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.VariableDevicePtoP">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.VariableCtoD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ConnectionFormat.VariableDtoC">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.NodeControl">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.NodeControl.None">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.NodeControl.RemoteControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.NodeControl.SyncControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.NodeControl.DataValid">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.NodeControl.FaultReset">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.TimeDataSet">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.TimeDataSet.None">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.TimeDataSet.TimeStamp">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.TimeDataSet.TimeOffset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.TimeDataSet.UpdateDiagnostics">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.TimeDataSet.TimeDiagnostics">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.SyncStatus">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.SyncStatus.DeviceSynchronized">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.SyncStatus.DeviceNotSynchronized">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.SyncStatus.DifferentGrandmaster">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.SyncStatus.ClockSkewDetected">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.Empty">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.Enable">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.Disable">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.Shutdown">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.ShutdownReset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.Abort">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.FaultReset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.StopProcess">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.ChangeActualPositionReference">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.ChangeCommandPositionReference">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse.Cancel">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet.None">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet.Position">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet.Velocity">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet.Acceleration">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet.Torque">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet.UnwindCycleCount">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandActualDataSet.PositionDisplacement">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet.None">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet.AxisFault">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet.AxisAlarm">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet.AxisStatus">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet.AxisIOStatus">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet.AxisSafetyStatus">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StatusDataSet.RockwellDriveSafetyStatus">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl.TargetUpdate">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl.TargetUpdateImmediate">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl.TargetUpdateExtrapolate">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl.TargetUpdateInterpolate">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl.PositionDataType">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl.PositionDataTypeLReal">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.CommandControl.PositionDataTypeDInt">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.FeedbackMode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.NoFeedback">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.MasterFeedback">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.MotorFeedback">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.LoadFeedback">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.DualFeedback">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.DualIntFeedback">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.FeedbackDataType">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.FeedbackDataTypeDInt">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FeedbackMode.FeedbackDataTypeLInt">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMode">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMode.NoControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMode.PositionControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMode.VelocityControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMode.AccelerationControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMode.TorqueControl">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMethod">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMethod.NoControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMethod.FrequencyControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlMethod.PIVectorControl">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlStatus">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlStatus.None">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlStatus.ConfigurationComplete">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlStatus.ConverterBusUp">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlStatus.ConverterBusUnload">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ControlStatus.ConverterACPowerLoss">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Initializing">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.PreCharge">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Stopped">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Starting">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Running">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Testing">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Stopping">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Aborting">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.MajorFaulted">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.StartInhibited">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState.Shutdown">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.None">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.LocalControl">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.Alarm">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.DCBusUp">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.PowerStructureEnabled">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.MotorFluxUp">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.TrackingCommand">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.PositionLock">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.VelocityLock">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.VelocityStandstill">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.VelocityThreshold">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.VelocityLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.AccelerationLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.DecelerationLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.TorqueThreshold">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.TorqueLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.CurrentLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.ThermalLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.FeedbackIntegrity">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.Shutdown">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.InProcess">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.DCBusUnload">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.ACPowerLoss">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.PositionControlMode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.VelocityControlMode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus.TorqueControlMode">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.EnableInput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.HomeInput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.Registration1Input">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.Registration2Input">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.PositiveOvertravelOkInput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.NegativeOvertravelOkInput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.Feedback1ThermostatOkInput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.ResistiveBrakeReleaseOutput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.MechanicalBrakeReleaseOutput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisIOStatus.MotorThermostatOkInput">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.NoFaults">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.ExcessivePositionError">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.ExcessiveVelocityError">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.OverTorqueLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.UnderTorqueLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.IllegalControlMode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.ControllerInitiatedException">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode.ExternalExceptionInput">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions.ExcessivePositionError">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions.ExcessiveVelocityError">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions.OverTorqueLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions.UnderTorqueLimit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions.IllegalControlMode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions.ControllerInitiatedException">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptions.ExternalExceptionInput">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibitCode">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibitCode.AxisEnableInput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibitCode.MotorNotConfigured">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibitCode.FeedbackNotConfigured">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibitCode.CommutationNotConfigured">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibitCode.SafeTorqueOff">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibitCode.ConverterBusUnload">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibits">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibits.AxisEnableInput">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibits.MotorNotConfigured">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibits.FeedbackNotConfigured">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibits.CommutationNotConfigured">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibits.SafeTorqueOff">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.StartInhibits.ConverterBusUnload">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.Cleared">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.Initialization">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.InitializationMfg">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.Axis">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.AxisMfg">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.APR">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.APRMfg">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.Safety">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.SafetyMfg">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType.DriveSafety">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultResetCode">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultResetCode.NoFaults">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultResetCode.DeviceReset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultResetCode.FaultReset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultResetCode.ShutdownReset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultResetCode.ConnectionReset">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction.NoAction">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction.RampedStop">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction.TorqueLimitedStop">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction.Coast">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction.Hold">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction.Disable">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction.Shutdown">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType.Cleared">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType.StartInhibit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType.StartInhibitMfg">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType.Axis">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType.AxisMfg">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType.Safety">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmType.SafetyMfg">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmState">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmState.Off">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AlarmState.On">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.ExceptionAction">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ExceptionAction.Ignore">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ExceptionAction.Alarm">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ExceptionAction.MinorFault">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.ExceptionAction.MajorFault">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent">
            <summary>
            Enumerates the possible axis state events.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.None">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.SelfTestComplete">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.InitializationFault">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.InitializationComplete">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.Shutdown">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.ShutdownReset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.BusUp">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.NotBusUp">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.Enable">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.Disable">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.Test">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.StartComplete">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.StopComplete">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.TestComplete">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.StartInhibit">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.InhibitsCleared">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.MajorFault">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.FaultReset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.ConnectionClosed">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.ConnectionLoss">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent.Reconnection">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess">
            <summary>
            Motion Device Access instance.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.#ctor(System.UInt32)">
            <summary>
            Constructs a new Motion Device Access instance.
            </summary>
            <param name="instanceId">Instance id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AddControlCommanded(System.Action{Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse},Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the ControlCommanded event.
            </summary>
            <param name="handler">Handler for ControlCommanded events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="handler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.RemoveControlCommanded(System.Action{Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse})">
            <summary>
            Remove a handler from the ControlCommanded event.
            </summary>
            <param name="handler">Handler for ControlCommanded event to remove.</param>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControlCommanded">
            <summary>
            Occurs on receipt of a control command. 
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AddStateTransitioned(System.Action{Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState,Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState},Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the StateTransitioned event.
            </summary>
            <param name="handler">Handler for StateTransitioned events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="handler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.RemoveStateTransitioned(System.Action{Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState,Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState})">
            <summary>
            Remove a handler from the StateTransitioned event.
            </summary>
            <param name="handler">Handler for StateTransitioned events to remove.</param>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.StateTransitioned">
            <summary>
            Occurs on state transition.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AddControlUpdated(System.Action{Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags},Demo3D.Net.CallbackContext)">
            <summary>
            Add a handler for the ControlUpdated event.
            </summary>
            <param name="handler">Handler for ControlUpdated events to add.</param>
            <param name="callbackContext">Defines the context in which the callback should be called.</param>
            <remarks>
            If <paramref name="callbackContext"/> is CallerContext then <paramref name="handler"/> is Demo3D thread safe.
            It's called in the same thread (synchronization context) as the caller to this method.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.RemoveControlUpdated(System.Action{Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags})">
            <summary>
            Remove a handler from the ControlUpdated event.
            </summary>
            <param name="handler">Handler for ControlUpdated events to remove.</param>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControlUpdated">
            <summary>
            Occurs to indicate control updates.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.NotifyControlCommanded(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse)">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControlCommanded"/> event.
            </summary>
            <param name="axisControl">The axis control.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.NotifyStateTransitioned(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState,Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState)">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.StateTransitioned"/> event.
            </summary>
            <param name="fromState">Old state.</param>
            <param name="toState">New state.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.NotifyControlUpdated(Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags)">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControlUpdated"/> event.
            </summary>
            <param name="updateFlags">The set of notifiable controls.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControlMode">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControlMethod">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.FeedbackMode">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.EventCheckingControl">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControlStatus">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ActualDataSet">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.CommandDataSet">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.CommandControl">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.StatusDataSet">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControllerPositionCommandDInt">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControllerPositionCommandFloat">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControllerVelocityCommand">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControllerAccelerationCommand">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ControllerTorqueCommand">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.PositionFeedbackDInt">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.PositionFeedbackLInt">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.PositionError">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.VelocityFeedback">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AccelerationFeedback">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisState">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisStatus">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisStatusMfg">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisIOStatus">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisIOStatusMfg">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisFaults">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisAlarms">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.StartInhibits">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.Item(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.AxisEvent(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStateEvent)">
            <summary>
            Issue an axis event to change the state of the internal state machine.
            </summary>
            <param name="axisEvent">Axis event to raise.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ChangeStatus(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus,Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus)">
            <summary>
            Set or reset status bits.
            </summary>
            <param name="set">Bits to set.</param>
            <param name="reset">Bits to clear.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.EnqueueFault(Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType,System.Byte,System.Byte,Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction,System.Boolean@)">
            <summary>
            Enqueue a fault.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.RaiseAxisException(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode,System.Byte,System.Boolean@)">
            <summary>
            Raise an exception.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.SetStatus(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus)">
            <summary>
            Set status bits.
            </summary>
            <param name="bits">Bit to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ResetStatus(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisStatus)">
            <summary>
            Reset status bits.
            </summary>
            <param name="bits">Bits to clear.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ClearStatus">
            <summary>
            Clear status bits (except LocalControl).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.SetFault(Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultType,Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisExceptionCode,System.Byte,Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultAction,System.Boolean@)">
            <summary>
            Enqueue a fault.
            </summary>
            <param name="type"></param>
            <param name="code"></param>
            <param name="subCode"></param>
            <param name="stopAction"></param>
            <param name="eventRaised"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess.ClearFaults(Demo3D.PLC.Comms.CIP.Nodes.Motion.FaultResetCode,System.Boolean@)">
            <summary>
            Clear faults.
            </summary>
            <param name="resetCode"></param>
            <param name="eventRaised"></param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic">
            <summary>
            Example motion device logic.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.Attach(Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionDeviceAccess)">
            <summary>
            Attaches this motion device logic to the motion device access.
            </summary>
            <param name="mda">Motion device access to attach.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateInitializing">
            <summary>
            Called on MDA state transition to Initializing.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StatePreCharge">
            <summary>
            Called on MDA state transition to PreCharge.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateStopped">
            <summary>
            Called on MDA state transition to Stopped.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateStarting">
            <summary>
            Called on MDA state transition to Starting.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateRunning">
            <summary>
            Called on MDA state transition to Running.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateTesting">
            <summary>
            Called on MDA state transition to Testing.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateStopping">
            <summary>
            Called on MDA state transition to Stopping.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateAborting">
            <summary>
            Called on MDA state transition to Aborting.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateMajorFaulted">
            <summary>
            Called on MDA state transition to MajorFaulted.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateStartInhibited">
            <summary>
            Called on MDA state transition to StartInhibited.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.CommandShutdown">
            <summary>
            Called when an AxisControl Shutdown request is received.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateShutdown">
            <summary>
            Called on MDA state transition to Shutdown.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.CommandShutdownReset">
            <summary>
            Called when an AxisControl Shutdown request is received.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.ControlCommanded(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisControlResponse)">
            <summary>
            Called when any control command is received.
            </summary>
            <param name="axisControl">Axis control command.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.StateTransitioned(Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState,Demo3D.PLC.Comms.CIP.Nodes.Motion.AxisState)">
            <summary>
            Called when any state transition occurs.
            </summary>
            <param name="fromState">Previous state.</param>
            <param name="toState">New state.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.Motion.MotionLogic.ControlUpdated(Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags)">
            <summary>
            Called when the controller changed something.
            </summary>
            <param name="updateFlags">Bit mask describing the changes made.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags">
            <summary>
            A bit set of updates from the controller.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.None">
            <summary>
            No updates.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.Service">
            <summary>
            A CIP class 3 service was called.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.ControlMode">
            <summary>
            The ControlMode changed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.FeedbackMode">
            <summary>
            The FeedbackMode changed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.PositionDInt">
            <summary>
            The position was updated.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.PositionFloat">
            <summary>
            The position was updated.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.Velocity">
            <summary>
            The velocity updated.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.Acceleration">
            <summary>
            The acceleration was updated.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Nodes.Motion.UpdateFlags.Torque">
            <summary>
            The torque was updated.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.NotImplementedPath">
            <summary>
            A path describing a known not-implemented object.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.NotImplementedPath.Path">
            <summary>
            The path that's not implemented.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.NotImplementedPath.ErrorStatus">
            <summary>
            The error status to return to the called.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.NotImplementedPath.#ctor(Demo3D.PLC.Comms.CIP.EPATH.LogicalPath,Demo3D.PLC.Comms.CIP.ExtendedStatus)">
            <summary>
            Constructs a NotImplementedPath.
            </summary>
            <param name="path">The path that's not implemented.</param>
            <param name="errorStatus">The error status to return to the called.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.NotImplementedPath.#ctor(Demo3D.PLC.Comms.CIP.EPATH.LogicalPath,Demo3D.PLC.Comms.CIP.Status)">
            <summary>
            Constructs a NotImplementedPath.
            </summary>
            <param name="path">The path that's not implemented.</param>
            <param name="errorStatus">The error status to return to the called.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.ParameterClass">
            <summary>
            The Parameter class.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.ParameterClass.#ctor">
            <summary>
            Constructs a Parameter class.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.ParameterClass.Parameters">
            <summary>
            The parameters.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.PortAddress">
            <summary>
            A port address.  Usually a slot number, IP address, or hostname.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.Empty">
            <summary>
            The empty address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.Address">
            <summary>
            The address in bytes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.#ctor(System.Byte[])">
            <summary>
            Construct an address from an array of bytes.
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.#ctor(System.Byte)">
            <summary>
            Construct an address from a single byte number.
            </summary>
            <param name="slotNo"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.#ctor(System.String)">
            <summary>
            Construct an address from a string.
            </summary>
            <param name="str"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.TryGetSlotNo(System.Byte@)">
            <summary>
            Try to get the address as a single byte number.
            </summary>
            <param name="slotNo">The address as a number.</param>
            <returns>False if the address was not a single byte.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.TryGetString(System.String@)">
            <summary>
            Try to get the address as an ASCII string.
            </summary>
            <param name="str">The string address.</param>
            <returns>False if the address was not a string.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.PortAddress.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.ServiceRequestHandler">
            <summary>
            A base class for additional service request data, such as
            <see cref="T:Demo3D.PLC.Comms.CIP.Nodes.ForwardOpenHandler"/> and <see cref="T:Demo3D.PLC.Comms.CIP.Nodes.ForwardCloseHandler"/>.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Nodes.TimeSync">
            <summary>
            The TimeSync class.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.#ctor">
            <summary>
            Constructs a TimeSync class.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.FindTimeSync(Demo3D.PLC.Comms.CIP.Nodes.MessageRouter)">
            <summary>
            Find TimeSync class.
            </summary>
            <param name="router">Message router.</param>
            <returns>TimeSync class (or null).</returns>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.OnSynchronizedChanged">
            <summary>
            Raised when the clock's synchronization changes.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.OnClockChanged">
            <summary>
            Raised when the grandmaster or parent clock changes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.PTPEnable">
            <summary>
            True to enable PTP.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.IsSynchronized">
            <summary>
            True if the clocks are synchronized.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.CardAddress">
            <summary>
            The NIC address of the parent clock.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.Parent">
            <summary>
            Clock information for the currently synchronized parent clock.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.GrandMaster">
            <summary>
            Clock information for the currently synchronized grandmaster clock.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.SystemTimeMicroseconds">
            <summary>
            Device time in microseconds (ticks since 1/1/1970 adjusted for leap seconds).  Time may go backwards.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.SystemTimeNanoseconds">
            <summary>
            Device time in nanoseconds (ticks since 1/1/1970 adjusted for leap seconds).  Time may go backwards.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.OffsetFromMaster">
            <summary>
            The coarse number of nanoseconds offset between our local reference clock and system time.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Nodes.TimeSync.RealTimeQPCToDeviceTimeNanoseconds(Demo3D.Time.RealTime)">
            <summary>
            Returns the device time (in system time nanoseconds) at a specified local real time.
            </summary>
            <param name="atTime">The point in time in local real time.</param>
            <returns>The converted device time in nanoseconds since 1/1/1970 (adjusted for leap seconds).</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PortNo">
            <summary>
            Port numbers (type safety).
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PortNo.Backplane">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PortNo.EtherNetIP">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PortNo.USB">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.ServiceCode">
            <summary>
            Type safe enumeration for Service Codes.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.GetAttributesAll">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.SetAttributesAll">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.GetAttributeList">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.SetAttributeList">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Reset">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Start">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Stop">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Create">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Delete">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.MultipleServiceRequest">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.ApplyAttributes">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.GetAttributeSingle">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.SetAttributeSingle">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.FindNextObjectInstance">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.ErrorResponse">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Restore">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Save">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.Nop">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.GetMember">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.SetMember">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.InsertMember">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.RemoveMember">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.ServiceCode.GroupSync">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Status">
            <summary>
            CIP message router status.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.Success">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ConnectionFailure">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ResourceUnavailable">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.InvalidParameterValue">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.PathSegmentError">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.BadDestination">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.PartialTransfer">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ConnectionLost">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ServiceNotSupported">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.InvalidAttributeValue">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.AttributeListError">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.AlreadyInSelectedMode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ObjectStateConflict">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ObjectAlreadyExists">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.AttributeNotSettable">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.AccessDenied">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.DeviceStateConflict">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.TooMuchDataInReply">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.FragmentedPrimitive">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.NotEnoughData">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.AttributeNotSupported">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.TooMuchData">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ObjectDoesNotExist">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.StoreOperationFailed">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.RequestPacketTooLarge">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.ResponsePacketTooLarge">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.MissingAttributeList">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.InvalidAttributeList">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.EmbeddedServiceError">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.InvalidParameter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Status.InvalidPathSize">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.StatusExtensions">
            <summary>
            Extensions for Status enum type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StatusExtensions.ToStatusString(Demo3D.PLC.Comms.CIP.Status)">
            <summary>
            Status to string.
            </summary>
            <param name="status">The status.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.ICIPSymbolItem">
            <summary>
            A <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/> node in a symbol table that exposes a CIP symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.ICIPSymbolItem.Symbol">
            <summary>
            Access to the CIP symbol for this browse item.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.ICIPSymbolTable">
            <summary>
            A <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/> node in a symbol table that exposes a CIP symbol table for a PLC program.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.ICIPSymbolTable.Program">
            <summary>
            Access to the CIP symbol container for this program.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.IOModule">
            <summary>
            An entry in the IO configuration tree.
            </summary>
            <remarks>
            Cast to <see cref="T:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry"/> for additional Rockwell specific information.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IOModule.Name">
            <summary>
            The module name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IOModule.CatalogNumber">
            <summary>
            The catalog number (if known).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IOModule.TypeId">
            <summary>
            Type ID (or 0 if not known).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IOModule.EDSInfo">
            <summary>
            EDS info for this entry.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IOModule.CompatibleModule">
            <summary>
            Compatible module bit set.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IOModule.KeyMask">
            <summary>
            Key mask.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.IOModule.UpdateRate">
            <summary>
            The expected update rate (microseconds), or 0.
            </summary>
            <remarks>
            For modules that expect multiple connection from the PLC, the UpdateRate returned will be defined by the module.
            Usually the main IO connection.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.IOModule.ToString">
            <summary>
            Returns a string that represents the current entry.
            </summary>
            <returns>A string that represents the current entry.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.SymbolBase">
            <summary>
            Base class for a symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.Name">
            <summary>
            The symbol name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.IsHidden">
            <summary>
            True if the symbol is hidden.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.ClassId">
            <summary>
            The class id of the symbol (or 0).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.InstanceId">
            <summary>
            The instance id of the symbol.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolBase.#ctor(System.String,System.Boolean,Demo3D.PLC.Comms.CIP.ClassID,System.UInt32)">
            <summary>
            Constructs a symbol base.
            </summary>
            <param name="name">The symbol name.</param>
            <param name="isHidden">True is the symbol is hidden.</param>
            <param name="classId">Symbol class id.</param>
            <param name="instanceId">Symbol instance id.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.Container">
            <summary>
            The controller/program/router that owns this symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.IsSubSymbol">
            <summary>
            True if this is a program or routine level symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.FullName">
            <summary>
            The full symbol path name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolBase.InstanceIdValid">
            <summary>
            True if the instance id is valid.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolBase.Equals(Demo3D.PLC.Comms.CIP.SymbolBase)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolBase.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolBase.GetHashCode">
            <summary>
            Returns the hash code for this symbol.
            </summary>
            <returns>The hash code for this symbol.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolBase.ToString">
            <summary>
            Returns a string that represents the symbol.
            </summary>
            <returns>A string that represents the symbol.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.SymbolContainer">
            <summary>
            A class that contains a symbol table.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolContainer.IsArray">
            <summary>
            Container is an array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolContainer.IsArrayElement">
            <summary>
            Container is an element in an array.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolContainer.#ctor">
            <summary>
            Constructs a symbol container for a Controller.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolContainer.#ctor(System.String,Demo3D.PLC.Comms.CIP.ClassID,System.UInt32)">
            <summary>
            Constructs a symbol container for a program/routine.
            </summary>
            <param name="name">The symbol name.</param>
            <param name="classId">Class id.</param>
            <param name="instanceId">Instance id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolContainer.AddSymbol(Demo3D.PLC.Comms.CIP.SymbolBase,System.UInt32)">
            <summary>
            Adds a symbol to the container.
            </summary>
            <param name="symbol">The symbol to add.</param>
            <param name="instanceId">The symbol instance id (or 0).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolContainer.RemoveSymbol(Demo3D.PLC.Comms.CIP.SymbolBase,System.UInt32,System.Boolean)">
            <summary>
            Removes a symbol from the container.
            </summary>
            <param name="symbol">The symbol to remove.</param>
            <param name="instanceId">The symbol instance id (or 0).</param>
            <param name="removeIfEmpty">True to remove this container from our parent if <paramref name="symbol"/> is the last symbol.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolContainer.TryGetSymbol(System.String,Demo3D.PLC.Comms.CIP.SymbolBase@,System.Boolean)">
            <summary>
            Find a symbol by name.
            </summary>
            <param name="symbolName">The symbol name to search for.</param>
            <param name="symbol">The symbol if found (or null).</param>
            <param name="caseInsensitive">True for a case insensitive search (defaults to false).</param>
            <returns>True if the symbol was found.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.SymbolContainer.TryGetSymbol(System.UInt32,Demo3D.PLC.Comms.CIP.SymbolBase@)">
            <summary>
            Find a symbol by instance id.
            </summary>
            <param name="instanceId">The instance id to search for.</param>
            <param name="symbol">The symbol if found (or null).</param>
            <returns>True if the symbol was found.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.SymbolContainer.All">
            <summary>
            Returns an object to enumerate all the symbols.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Symbol">
            <summary>
            A symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Symbol.Type">
            <summary>
            The PLC type of the symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Symbol.AliasFor">
            <summary>
            The tag for which this is an alias.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Symbol.Base">
            <summary>
            The ultimate base tag for which this is an alias.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Symbol.AllowedAccess">
            <summary>
            The allowed access rights defined by the symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Symbol.IsSafety">
            <summary>
            Symbol is a Safety symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.Symbol.Description">
            <summary>
            Symbol description.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Symbol.#ctor(System.String,System.Boolean,System.Boolean,Demo3D.PLC.Comms.CIP.ClassID,System.UInt32,Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Constructs a symbol.
            </summary>
            <param name="name">Symbol name.</param>
            <param name="isHidden">True if the symbol is hidden.</param>
            <param name="isSafety">True if the symbol is a Safety symbol.</param>
            <param name="classId">Symbol class id.</param>
            <param name="instanceId">Symbol instance id.</param>
            <param name="plcType">The PLC type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Symbol.Equals(Demo3D.PLC.Comms.CIP.Symbol)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Symbol.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Symbol.GetHashCode">
            <summary>
            Returns the hash code for this symbol.
            </summary>
            <returns>The hash code for this symbol.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.Symbol.ToString">
            <summary>
            Returns a string that represents the symbol.
            </summary>
            <returns>A string that represents the symbol.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PathParserUtils">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PathParserUtils.SplitRight(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PathParserUtils.SplitLeft(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PathParserUtils.Split(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PathParserUtils.ParseBitNo(System.String,System.Int32@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PathParserUtils.ParseElementNum(System.String,System.Collections.Generic.List{System.Int32}@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PathParserUtils.ParseAsElementNum(System.String,System.Collections.Generic.List{System.Int32}@)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath">
            <summary>
            A pointer describing a part of tag.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.PathElement">
            <summary>
            One element in the path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.PathElement.Name">
            <summary>
            Element name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.#ctor(System.String)">
            <summary>
            Constructs an element.
            </summary>
            <param name="name">Element name.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.PathElement.Type">
            <summary>
            The element PLC type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.PathElement.AllowedAccess">
            <summary>
            The element allowed access.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.PathElement.NumElements">
            <summary>
            The number of elements to access.
            </summary>
            <remarks>
            Always 1, except for arrays.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.PathElement.SizeBytes">
            <summary>
            The size of the tag data in bytes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.CreateDefaultValue">
            <summary>
            Creates an instance of the PLC type of this element.
            </summary>
            <returns>The object instance.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.GetValue(System.Object,System.Boolean)">
            <summary>
            Extracts a value of the current element type from a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="create">True to create a default value.</param>
            <returns>The element value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value of the current element type into a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="elementValue">The element value.</param>
            <returns>The updated parent value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.Equals(Demo3D.PLC.Comms.CIP.TagPath.PathElement)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.PathElement.ToString">
            <summary>
            Returns a string that represents the current path.
            </summary>
            <returns>A string that represents the current path.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.ANSIElement">
            <summary>
            An ANSI element.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ANSIElement.#ctor(System.String)">
            <summary>
            Constructs an ANSI segment.
            </summary>
            <param name="name">Tag name.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ANSIElement.SetDataType(Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Sets the element PLC type.
            </summary>
            <param name="plcType">The PLC type.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ANSIElement.Type">
            <summary>
            The element PLC type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ANSIElement.GetValue(System.Object,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ANSIElement.SetValue(System.Object,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.SymbolContainerElement">
            <summary>
            A SymbolContainer element.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolContainerElement.SymbolContainer">
            <summary>
            The branch.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.SymbolContainerElement.#ctor(Demo3D.PLC.Comms.CIP.SymbolContainer)">
            <summary>
            Constructs an ANSI segment.
            </summary>
            <param name="symbolContainer">The branch..</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement">
            <summary>
            A symbol element.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.Symbol">
            <summary>
            The symbol.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.#ctor(Demo3D.PLC.Comms.CIP.Symbol)">
            <summary>
            Constructs a symbol element.
            </summary>
            <param name="symbol">The symbol.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.ClassId">
            <summary>
            Class id of this symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.InstanceId">
            <summary>
            Instance id of this symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.InstanceIdValid">
            <summary>
            True if the symbol class/instance is valid.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.Type">
            <summary>
            The symbol PLC type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.AllowedAccess">
            <summary>
            The element allowed access.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.GetValue(System.Object,System.Boolean)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.SetValue(System.Object,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.SymbolElement.ToString">
            <summary>
            Returns a string that represents the current path.
            </summary>
            <returns>A string that represents the current path.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.Bit">
            <summary>
            A bit element.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Bit.BitNo">
            <summary>
            The bit number.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a bit element.
            </summary>
            <param name="name">The bit name.</param>
            <param name="bitNo">The bit number.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.#ctor(System.Int32)">
            <summary>
            COnstructs a bit element.
            </summary>
            <param name="bitNo">The bit number.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Bit.Type">
            <summary>
            The element PLC type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.GetValue(System.Object,System.Boolean)">
            <summary>
            Extracts a bit from a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="create">True to create a default value.</param>
            <returns>True if the bit was set.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value of the current element type into a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="elementValue">The element value.</param>
            <returns>The updated parent value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.Equals(Demo3D.PLC.Comms.CIP.TagPath.Bit)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.Equals(Demo3D.PLC.Comms.CIP.TagPath.PathElement)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Bit.ToString">
            <summary>
            Returns a string that represents the current path.
            </summary>
            <returns>A string that represents the current path.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.NamedBit">
            <summary>
            A named bit.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.#ctor(Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit)">
            <summary>
            Constructs a named bit.
            </summary>
            <param name="namedBit">The named bit.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.ElementIndex">
            <summary>
            The index of this element in the structure.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.GetValue(System.Object,System.Boolean)">
            <summary>
            Extracts a value of the current element type from a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="create">True to create a default value.</param>
            <returns>The element value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value of the current element type into a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="elementValue">The element value.</param>
            <returns>The updated parent value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.Equals(Demo3D.PLC.Comms.CIP.TagPath.NamedBit)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.Equals(Demo3D.PLC.Comms.CIP.TagPath.Bit)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.NamedBit.ToString">
            <summary>
            Returns a string that represents the current path.
            </summary>
            <returns>A string that represents the current path.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex">
            <summary>
            An array index.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.ArrayType">
            <summary>
            The parent element array type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.Index">
            <summary>
            The parent element is an array and the user selected one element of it.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.IsBitString">
            <summary>
            The parent element is an array of bits.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.IsBitIndex">
            <summary>
            The parent element is an array of bits, and so arrayIndex is a bit index rather than element index.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.#ctor(System.String,Demo3D.PLC.Comms.CIP.PlcType.Array,System.Int32)">
            <summary>
            Constructs an array index.
            </summary>
            <param name="name">Element name.</param>
            <param name="arrayType">Array type.</param>
            <param name="arrayIndex">Index into the array.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.#ctor(Demo3D.PLC.Comms.CIP.PlcType.Array,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs an array index.
            </summary>
            <param name="arrayType">Array type.</param>
            <param name="arrayIndex">Index into the array.</param>
            <param name="isBitIndex">True if this is a bit index.</param>
            <param name="isBitString">True if this element is a bit string.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.SetArrayType(Demo3D.PLC.Comms.CIP.PlcType.Array)">
            <summary>
            Sets the array PLC type.
            </summary>
            <param name="arrayType">The array PLC type.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.Type">
            <summary>
            The element PLC type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.GetValue(System.Object,System.Boolean)">
            <summary>
            Extracts a bit from a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="create">True to create a default value.</param>
            <returns>True if the bit was set.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value of the current element type into a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="elementValue">The element value.</param>
            <returns>The updated parent value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.Equals(Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.Equals(Demo3D.PLC.Comms.CIP.TagPath.PathElement)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex.GetHashCode">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange">
            <summary>
            An array sub-range.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.#ctor(Demo3D.PLC.Comms.CIP.PlcType.Array,System.Int32,System.Int32)">
            <summary>
            Constructs an array sub-range.
            </summary>
            <param name="arrayType">Array type.</param>
            <param name="arrayIndex">Array start index.</param>
            <param name="rangeLength">Range length.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.NumElements">
            <summary>
            The number of elements to access.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.SizeBytes">
            <summary>
            The size of the tag data in bytes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.CreateDefaultValue">
            <summary>
            Creates an instance of the PLC type of this element.
            </summary>
            <returns>The object instance.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.GetValue(System.Object,System.Boolean)">
            <summary>
            Extracts a value of the current element type from a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="create">True to create a default value.</param>
            <returns>The element value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value of the current element type into a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="elementValue">The element value.</param>
            <returns>The updated parent value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.Equals(Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.Equals(Demo3D.PLC.Comms.CIP.TagPath.ArrayIndex)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ArraySubRange.GetHashCode">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.StructElement">
            <summary>
            A struct element.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.StructElement.#ctor(Demo3D.PLC.Comms.CIP.PlcType.Struct.Element)">
            <summary>
            Constructs a struct element.
            </summary>
            <param name="element">Struct element.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.StructElement.IsHost">
            <summary>
            True id the element is a host for a set of named bits.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.StructElement.ElementIndex">
            <summary>
            Index of this element in the structure.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.StructElement.ElementOffset">
            <summary>
            Offset of this element within the structure.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.StructElement.Type">
            <summary>
            The element PLC type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.StructElement.AllowedAccess">
            <summary>
            The allowed access for this element.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.StructElement.GetValue(System.Object,System.Boolean)">
            <summary>
            Extracts a value of the current element type from a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="create">True to create a default value.</param>
            <returns>The element value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.StructElement.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value of the current element type into a parent value.
            </summary>
            <param name="tagValue">The parent value.</param>
            <param name="elementValue">The element value.</param>
            <returns>The updated parent value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.StructElement.ToString">
            <summary>
            Returns a string that represents the current path.
            </summary>
            <returns>A string that represents the current path.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.#ctor">
            <summary>
            Constructs a tag path.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.#ctor(Demo3D.PLC.Comms.CIP.TagPath.PathElement)">
            <summary>
            Constructs a tag path with an specified first element.
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.#ctor(Demo3D.PLC.Comms.CIP.TagPath)">
            <summary>
            Constructs a tag path as a clone of an existing tag path.
            </summary>
            <param name="path">The path to clone.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.#ctor(Demo3D.PLC.Comms.CIP.Symbol)">
            <summary>
            Constructs a tag path from a symbol.
            </summary>
            <param name="symbol">Root symbol.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.#ctor(Demo3D.PLC.Comms.CIP.SymbolContainer)">
            <summary>
            Constructs a tag path from a symbol container
            </summary>
            <param name="container">Root symbol.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Clone">
            <summary>
            Clones this path.
            </summary>
            <returns>A copy of the path.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Tag">
            <summary>
            The path as a string.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Item(System.Int32)">
            <summary>
            Returns an element of the path.
            </summary>
            <param name="i">Path index.</param>
            <returns>An element of the path.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Length">
            <summary>
            The length of the path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Offset">
            <summary>
            The byte offset into the symbol data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.LastElement">
            <summary>
            The last element in the path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.PathElements">
            <summary>
            All the elements of the path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Symbol">
            <summary>
            The first symbol element (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.SymbolContainer">
            <summary>
            The last element as a symbol container (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.UnnamedBit">
            <summary>
            True is the last element is an un-named bit.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.AliasForPath">
            <summary>
            The path for which this is an alias, or null if this is a base path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.BasePath">
            <summary>
            The base path for this tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.Aliases">
            <summary>
            A list of all possible aliased for this tag path.
            </summary>
            <remarks>
            Returns a list of all the possible aliases for this tag path - in order of decreasing expanded-ness of alias.
            So the first tagPath in the list is the base tag, and the last is this tag.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Prepend(Demo3D.PLC.Comms.CIP.TagPath.PathElement)">
            <summary>
            Prepend an element to the path.
            </summary>
            <param name="element">Element to prepend.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Prepend(Demo3D.PLC.Comms.CIP.TagPath)">
            <summary>
            Prepend a specified path to this path.
            </summary>
            <param name="prependPath">Path to prepend.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Append(Demo3D.PLC.Comms.CIP.TagPath.PathElement)">
            <summary>
            Append an element to the path.
            </summary>
            <param name="element">Element to append.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Append(Demo3D.PLC.Comms.CIP.Symbol)">
            <summary>
            Append a symbol element to the path.
            </summary>
            <param name="symbol">Symbol to append.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Append(Demo3D.PLC.Comms.CIP.SymbolContainer)">
            <summary>
            Append a symbol container element to the path.
            </summary>
            <param name="container">Symbol container to append.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Truncate">
            <summary>
            Remove the last element.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.RemoveAt(System.Int32)">
            <summary>
            Remove element at index.
            </summary>
            <param name="index">Index of element to remove.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Parse(Demo3D.PLC.Comms.CIP.TagPath,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Interpret and parse a string path passed in by the user, and return the tag path.
            </summary>
            <param name="tagPath">The path to append the result into.</param>
            <param name="remainingPath">The tag string to parse.</param>
            <param name="throwOnNotFound">Throw an exception if <paramref name="remainingPath"/> could not be fully resolved.</param>
            <param name="caseInsensitive">True if symbols are to be matched case insensitive.</param>
            <returns>The parsed tag path, and the remaining path that could not be resolved.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Parse(Demo3D.PLC.Comms.CIP.SymbolBase,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Interpret and parse a string path passed in by the user, and return the tag path.
            </summary>
            <param name="symbolBase">Root symbol.</param>
            <param name="remainingPath">The tag string to parse.</param>
            <param name="throwOnNotFound">Throw an exception if <paramref name="remainingPath"/> could not be fully resolved.</param>
            <param name="caseInsensitive">True if symbols are to be matched case insensitive.</param>
            <returns>The parsed tag path.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Parse(System.String,Demo3D.PLC.Comms.CIP.SymbolContainer,System.Boolean,Demo3D.PLC.Comms.CIP.SymbolContainer,System.Boolean,Demo3D.PLC.Comms.CIP.PlcType,System.Boolean@,Demo3D.Common.IComponentLogger)">
            <summary>
            Interpret and parse a string path passed in by the user, and return the tag path.
            </summary>
            <param name="tag">The tag string to parse.</param>
            <param name="plcSymbols">Symbols from the PLC.</param>
            <param name="plcSymbolsCaseInsensitive">True if symbols are to be matched case insensitive.</param>
            <param name="importedSymbols">Symbols from an import file.</param>
            <param name="importedSymbolsCaseInsensitive">True if symbols are to be matched case insensitive.</param>
            <param name="serverItemUDT">The expected PLC type.</param>
            <param name="configuredPlc">The configured PLC type.</param>
            <param name="logger">A mechanism for logging errors.</param>
            <returns>The parsed tag path.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Parse(Demo3D.PLC.Comms.CIP.Symbol,Demo3D.PLC.Comms.CIP.PlcType,System.UInt32)">
            <summary>
            Find a path to the element of type 'targetType' at byte 'offset' into 'symbol'.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="targetType">The PLC type.</param>
            <param name="offset">Offset within the symbol.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.TypedEPath">
            <summary>
            An EPATH with its PlcType.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.TypedEPath.EPATH">
            <summary>
            The EPATH.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagPath.TypedEPath.Type">
            <summary>
            The PLC type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.TypedEPath.#ctor(Demo3D.PLC.Comms.CIP.EPATH,Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Constructs a typed EPATH.
            </summary>
            <param name="epath">The EPATH.</param>
            <param name="plcType">The PLC type.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagPath.EPathFactory">
            <summary>
            Compile a TagPath down to an EPATH.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.EPathFactory.CreateEPath(Demo3D.PLC.Comms.CIP.TagPath)">
            <summary>
            Creates an EPATH and PLC type from a specified TagPath.
            </summary>
            <param name="tagPath">The tag path.</param>
            <returns>An EPATH and PLC type.</returns>
            <remarks>
            Defaults to creating ANSI Extended Symbol paths.  Only array indices use Logical segments.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.EPathFactory.Create(Demo3D.PLC.Comms.CIP.TagPath)">
            <summary>
            Creates an EPATH and PLC type from a specified TagPath.
            </summary>
            <param name="tagPath">The tag path.</param>
            <returns>An EPATH and PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.GetEnumerator">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Equals(Demo3D.PLC.Comms.CIP.TagPath)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="tagPath">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.GetHashCode">
            <summary>
            Returns the hash code for this symbol.
            </summary>
            <returns>The hash code for this symbol.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagPath.ToString">
            <summary>
            Returns a string that represents the current path.
            </summary>
            <returns>A string that represents the current path.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.CIPProtocol">
            <summary>
            CIP protocol selection.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.CIPProtocol.Auto">
            <summary>
            Automatically choose protocol based on enabled IO devices.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.CIPProtocol.Class1">
            <summary>
            Use Class 1.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.CIPProtocol.Class3">
            <summary>
            Use Class 3.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Class3Protocol">
            <summary>
            CIP Class 3 protocol selection.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class3Protocol.Auto">
            <summary>
            Automatically choose a Class 3 protocol based on detected PLC firmware.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class3Protocol.Basic">
            <summary>
            Use basic CIP driver (implies ANSI symbol protocol, but no tag merging, no fragmented IO, nor masked writes, etc).
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class3Protocol.ANSIName">
            <summary>
            Use ANSI symbol names with extensions where possible.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class3Protocol.Protocol1">
            <summary>
            Use PLC driver specific protocol.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class3Protocol.Protocol2">
            <summary>
            Use PLC driver specific protocol.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Class1Protocol">
            <summary>
            CIP Class 1 protocol selection.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class1Protocol.Auto">
            <summary>
            Automatically choose a Class 1 protocol based on detected PLC firmware.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class1Protocol.Protocol1">
            <summary>
            Use PLC driver specific protocol.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class1Protocol.Protocol2">
            <summary>
            Use PLC driver specific protocol.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.Class1Timing">
            <summary>
            CIP Class 1 IO timing clock source.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class1Timing.Auto">
            <summary>
            Automatically choose a timing method.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class1Timing.Internal">
            <summary>
            Use the internal PC clock.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.Class1Timing.External">
            <summary>
            Use an external (PLC) clock.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.CIP1Properties">
            <summary>
            CIP Class 1 properties.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CIP1Properties.CreateIpAddresses">
            <summary>
            Automatically create IP addresses for CIP Class 1 devices.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CIP1Properties.RestoreIpAddresses">
            <summary>
            Automatically restore IP address configuration on disconnection.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CIP1Properties.NumExternalProcess">
            <summary>
            Use an external process for CIP Class 1 devices.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CIP1Properties.AutoStartProcess">
            <summary>
            Automatically start external CIP Class 1 devices IO process.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CIP1Properties.ProbeForDevices">
            <summary>
            Probe for conflicting devices.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.CIP1Properties.AutoConfigureDevices">
            <summary>
            Automatically execute device configuration scripts (if present).
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.CIP1Properties.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.CIP1Properties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.CIP1Properties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.CIP1Properties.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.TagDriverProperties">
            <summary>
            CIP tag driver properties.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagDriverProperties.#ctor">
            <summary>
            CIP tag driver properties.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagDriverProperties.CIPProtocol">
            <summary>
            Override automatic protocol selection.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagDriverProperties.Class3Protocol">
            <summary>
            Override automatic protocol selection.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagDriverProperties.Class1Protocol">
            <summary>
            Override automatic protocol selection.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagDriverProperties.MergeTags">
            <summary>
            Allow tag merging.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagDriverProperties.CacheSymbols">
            <summary>
            Allow symbol table caching.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.TagDriverProperties.CIP1">
            <summary>
            CIP Class 1 properties.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.CIP.TagDriverProperties.PropertyChanged">
            <summary>
            Occurs when a property changes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagDriverProperties.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagDriverProperties.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.TagDriverProperties.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.DateAndTime">
            <summary>
            DATE_AND_TIME.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.DateAndTime.Date">
            <summary>
            2-byte date.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.DateAndTime.Time">
            <summary>
            4-byte time.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTime.#ctor(System.UInt16,System.UInt32)">
            <summary>
            Constructs a DATE_AND_TIME.
            </summary>
            <param name="date">2-byte date.</param>
            <param name="time">4-byte time.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.DateAndTime.Value">
            <summary>
            6-byte value.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.DateAndTime.DateTimeUTC">
            <summary>
            DateTime.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTime.Marshal(Demo3D.IO.IDataWriter)">
            <summary>
            Marshal the DATE_AND_TIME.
            </summary>
            <param name="writer">Buffer to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTime.Unmarshal(Demo3D.IO.IDataReader)">
            <summary>
            Unmarshal the specified buffer.
            </summary>
            <param name="reader">The buffer</param>
            <returns>The unmarshalled DATE_AND_TIME.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTime.Equals(Demo3D.PLC.Comms.CIP.DateAndTime)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTime.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTime.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTime.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.DateAndTimeExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTimeExtensions.WriteDateAndTime(Demo3D.IO.IDataWriter,Demo3D.PLC.Comms.CIP.DateAndTime)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.DateAndTimeExtensions.ReadDateAndTime(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.NetworkParams">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.NetworkParams.OwnerType">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.OwnerType.Exclusive">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.OwnerType.Shared">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.NetworkParams.ConnectionType">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.ConnectionType.Null">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.ConnectionType.Multicast">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.ConnectionType.PointToPoint">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.NetworkParams.PriorityType">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.PriorityType.Low">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.PriorityType.High">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.PriorityType.Scheduled">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.PriorityType.Urgent">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.NetworkParams.SizeType">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.SizeType.Fixed">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.SizeType.Variable">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.IsLarge">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.SmallValue">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.ConnectionSize">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.LargeValue">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.Owner">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.Connection">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.Priority">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.NetworkParams.Size">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.NetworkParams.#ctor(Demo3D.PLC.Comms.CIP.NetworkParams.OwnerType,Demo3D.PLC.Comms.CIP.NetworkParams.ConnectionType,Demo3D.PLC.Comms.CIP.NetworkParams.PriorityType,Demo3D.PLC.Comms.CIP.NetworkParams.SizeType,System.UInt16)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags.Default">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags.WithHeader">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags.Large">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags.Small">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.NetworkParams.Marshal(Demo3D.IO.IDataWriter,Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.NetworkParams.Unmarshal(Demo3D.IO.IDataReader,Demo3D.PLC.Comms.CIP.NetworkParams.MarshalFlags)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.NetworkParams.Equals(Demo3D.PLC.Comms.CIP.NetworkParams)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.NetworkParams.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.NetworkParams.GetHashCode">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType">
            <summary>
            A type tree containing a full type definition from the user defined template object.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.TypeType">
            <summary>
            Plc type code.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.TypeType.Base">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.TypeType.BitSet">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.TypeType.Array">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.TypeType.Struct">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.CIPType">
            <summary>
            CIP type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.UNKNOWN">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.DT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.BOOL">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.SINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.INT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.DINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.LINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.USINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.UINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.UDINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.ULINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.REAL">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.LREAL">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.STRING">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.BYTE">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.WORD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.DWORD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.LWORD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.STRING2">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.STRINGN">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.SHORT_STRING">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.STRINGI">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.ABBREV_STRUCT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.ABBREV_ARRAY">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.STRUCT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.CIPType.ARRAY">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.Atomic">
            <summary>
            A CIP defined data type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.DT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.BOOL">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.SINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.INT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.DINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.LINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.USINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.UINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.UDINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.ULINT">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.REAL">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.LREAL">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.BYTE">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.WORD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.DWORD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.LWORD">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.STRING">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.STRING2">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.STRINGN">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.SHORT_STRING">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.STRINGI">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.PlcType.Atomic.UNKNOWN">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetPlcType(Demo3D.PLC.Comms.CIP.PlcType.CIPType)">
            <summary>
            Get the PLC type by CIP type.
            </summary>
            <param name="cipType">The CIP type.</param>
            <returns>The corresponding PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetBool(System.Int32,System.Int32)">
            <summary>
            Get the PLC type of a bool.
            </summary>
            <param name="bitNo">The bit number.</param>
            <param name="size">The size of the bool PLC type.</param>
            <returns>The bool PLC type.</returns>
            <remarks>
            CIP defines a bool (c1) as 1 octet, but Omron uses 2.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetStringEncoding(Demo3D.PLC.Comms.CIP.PlcType.CIPType)">
            <summary>
            Encoding from CIP type.
            </summary>
            <param name="cipType">CIP type.</param>
            <returns>Text encoding.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetString(System.Int32)">
            <summary>
            Get the PLC type of a string of specified length.
            </summary>
            <param name="length">The length of the string.</param>
            <returns>The string PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetString2(System.Int32)">
            <summary>
            Get the PLC type of a string of specified length.
            </summary>
            <param name="length">The length of the string.</param>
            <returns>The string PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetShortString(System.Int32)">
            <summary>
            Get the PLC type of a string of specified length.
            </summary>
            <param name="length">The length of the string.</param>
            <returns>The string PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetPlcType(System.String)">
            <summary>
            Get the PLC type by name.
            </summary>
            <param name="cipType">The CIP type name.</param>
            <returns>The corresponding PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetPlcType(Demo3D.PLC.Comms.DataType)">
            <summary>
            Get the PLC type by data type.
            </summary>
            <param name="dataType">The data type.</param>
            <returns>The corresponding PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetDataType(Demo3D.PLC.Comms.CIP.PlcType.CIPType)">
            <summary>
            Get the data type by CIP type.
            </summary>
            <param name="cipType">The CIP type.</param>
            <returns>The corresponding data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Atomic.GetSystemType(Demo3D.PLC.Comms.CIP.PlcType.CIPType)">
            <summary>
            Get the .Net type by CIP type.
            </summary>
            <param name="cipType">The CIP type.</param>
            <returns>The corresponding .Net type.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.BitSet">
            <summary>
            A set of named bits in a host element (usually a SINT or DINT).
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit">
            <summary>
            A named bit in bit-set.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.BitName">
            <summary>
            Bit name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.AllowedAccess">
            <summary>
            Allowed access.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.Index">
            <summary>
            Index of the bit in the element in the type template.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.BitNo">
            <summary>
            Bit number.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.IsHidden">
            <summary>
            True if the bit is hidden.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.Field">
            <summary>
            The data type field descriptor.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.#ctor(System.String,Demo3D.PLC.Comms.AccessRights,System.Boolean,System.UInt32)">
            <summary>
            Constructs a named bit.
            </summary>
            <param name="bitName">Bit name.</param>
            <param name="allowedAccess">Allowed access.</param>
            <param name="isHidden">True if hidden.</param>
            <param name="index">Index of the element in the type template.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.Equals(Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.GetHashCode">
            <summary>
            Returns the hash code for this type.
            </summary>
            <returns>The hash code for this type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBit.ToString">
            <summary>
            Returns a string that represents the current type.
            </summary>
            <returns>A string that represents the current type.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.BaseType">
            <summary>
            The base type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.NamedBits">
            <summary>
            The named bits.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.#ctor(Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            To turn an atomic type into a bit-set, you'll need a copy of the atomic type.
            </summary>
            <param name="atomicType">The bit set type.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitSet.IsComplete">
            <summary>
            True if the data type is fully known.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.FindBitByName(System.String,System.Boolean)">
            <summary>
            Find bit by name.
            </summary>
            <param name="elementName">Bit name.</param>
            <param name="caseInsensitive">True for a case insensitive search.</param>
            <returns>The bit (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.FindBitByName(System.String)">
            <summary>
            Find bit by name.
            </summary>
            <param name="elementName">Bit name to search for (case sensitive).</param>
            <returns>The bit (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.FindBitByIndex(System.UInt32)">
            <summary>
            Find bit by index.
            </summary>
            <param name="index">The index.</param>
            <returns>The bit (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.FindBitByBitNo(System.Int32)">
            <summary>
            Find bit by bitNo.
            </summary>
            <param name="bitNo">BitNo of the bit.</param>
            <returns>The bit (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.GetBit(System.String,Demo3D.PLC.Comms.AccessRights,System.Boolean,System.UInt32)">
            <summary>
            Find or create bit.
            </summary>
            <param name="elementName">The bit name.</param>
            <param name="allowedAccess">Allowed access.</param>
            <param name="bitIsHidden">Bit is hidden.</param>
            <param name="elementIndex">Element index.</param>
            <returns>The bit.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.Equals(Demo3D.PLC.Comms.CIP.PlcType.BitSet)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.Equals(Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="type">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.BitSet.GetHashCode">
            <summary>
            Returns the hash code for this type.
            </summary>
            <returns>The hash code for this type.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.Array">
            <summary>
            An array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.ElementType">
            <summary>
            Type of the array elements.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.NumBaseElements">
            <summary>
            Number of elements of base ElementType in array.
            </summary>
            <remarks>
            If this array is a multi-dimensional array, and therefore <see cref="P:Demo3D.PLC.Comms.CIP.PlcType.Array.ElementType"/> is itself an array,
            then this is the total number of base elements.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.NumTypeElements">
            <summary>
            Number of elements of ElementType, the underlying type (byte, word, etc).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.NumUserElements">
            <summary>
            Number of elements in array.
            </summary>
            <remarks>
            Number of elements that the user expects to see, so if it's a BitString, this will be the number of bits, not the number of ElementType.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.NumElements">
            <summary>
            The index of first element in the array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.FirstIndex">
            <summary>
            The index of first element in the array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.FirstOffset">
            <summary>
            The offset of the first element inside the first ElementType in the array.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Array.#ctor(Demo3D.PLC.Comms.CIP.PlcType,System.Int32,System.Int32)">
            <summary>
            Constructs an Array.
            </summary>
            <param name="elementType">Type of the array elements.</param>
            <param name="numElements">Number of elements.</param>
            <param name="firstIndex">First index.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.ElementSizeBytes">
            <summary>
            Size of one element of the array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.IsBitString">
            <summary>
            Element is an array of bools.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.IsComplete">
            <summary>
            Element data type is fully known.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Array.ExpandArray(System.Int32)">
            <summary>
            Expand the array at least to contain an element at the specified position.
            </summary>
            <param name="position">The position of the element in the array.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Array.ConvertToBitArray(System.Collections.IList)">
            <summary>
            Converts an array to instance of this array.
            </summary>
            <param name="array">Array to convert.</param>
            <returns>Converted array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Array.ConvertFromBitArray(System.Object)">
            <summary>
            Converts an array to an array of objects.
            </summary>
            <param name="value">Array to convert.</param>
            <returns>Converted array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Array.Equals(Demo3D.PLC.Comms.CIP.PlcType.Array)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Array.Equals(Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="type">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Array.GetHashCode">
            <summary>
            Returns the hash code for this type.
            </summary>
            <returns>The hash code for this type.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Array.String">
            <summary>
            Description of the PLC type.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.PseudoStruct">
            <summary>
            A pseudo (internal) struct.  Represents a data type that does not exist in the PLC.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.PseudoStruct.#ctor(System.String,Demo3D.PLC.Comms.DataType)">
            <summary>
            Constructs a pseudo struct.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="dataType">The struct data type.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.Struct">
            <summary>
            A struct.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element">
            <summary>
            Element types for a struct, or bits in bit-set (sorted on offset).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.Name">
            <summary>
            Element name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.Type">
            <summary>
            Element data type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.AllowedAccess">
            <summary>
            Element allowed access.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.IsHidden">
            <summary>
            True if hidden.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.Index">
            <summary>
            The index of the element in the type template.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.Offset">
            <summary>
            The byte offset of element in parent type (or uint.MaxValue if not known).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.Field">
            <summary>
            Data type field descriptor.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.#ctor(System.String,Demo3D.PLC.Comms.CIP.PlcType,Demo3D.PLC.Comms.AccessRights,System.Boolean,System.UInt32,System.UInt32)">
            <summary>
            Constructs an element.
            </summary>
            <param name="name">Element name.</param>
            <param name="type">Element data type.</param>
            <param name="allowedAccess">Element allowed access.</param>
            <param name="isHidden">True if the element is hidden.</param>
            <param name="index">The index of the element in the type template.</param>
            <param name="offset">The byte offset of element in parent type (or uint.MaxValue if not known).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.#ctor(System.String,Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Constructs an element.
            </summary>
            <param name="name">Element name.</param>
            <param name="type">Element data type.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.IsHost">
            <summary>
            Element is a host for a set of named bits.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.IsComplete">
            <summary>
            Element is fully known.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.Equals(Demo3D.PLC.Comms.CIP.PlcType.Struct.Element)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.GetHashCode">
            <summary>
            Returns the hash code for this type.
            </summary>
            <returns>The hash code for this type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Element.ToString">
            <summary>
            Returns a string that represents the current type.
            </summary>
            <returns>A string that represents the current type.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.Elements">
            <summary>
            Sub-elements of this type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.#ctor(System.String,Demo3D.PLC.Comms.CIP.PlcType.CIPType,System.Int32,Demo3D.PLC.Comms.CIP.PlcType.Struct.Element[])">
            <summary>
            Constructs a PLC struct type.
            </summary>
            <param name="typeName">The type name.</param>
            <param name="cipType">The CIP type.</param>
            <param name="structureSize">Size of structure in bytes.</param>
            <param name="elements">The structure elements.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.EncodingSizeBytes">
            <summary>
            CIP Type encoding size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.Struct.IsComplete">
            <summary>
            Element data type is fully known.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.FindElement(System.String,System.Boolean)">
            <summary>
            Find element by name.
            </summary>
            <param name="elementName">The element name to search for.</param>
            <param name="caseInsensitive">True for a case insensitive search.</param>
            <returns>The element if found, or null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.FindElement(System.String)">
            <summary>
            Find element by name.
            </summary>
            <param name="elementName">The element name to search for (case sensitive).</param>
            <returns>The element if found, or null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.GetElement(System.String,Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Find or create element by name.
            </summary>
            <param name="elementName">The element name to search for (case sensitive).</param>
            <param name="expectedType">The element type to create.</param>
            <returns>The element.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.ConvertFromStruct(Demo3D.PLC.Comms.DataStruct)">
            <summary>
            In a derived class, converts the data struct to an instance of a native type.
            </summary>
            <param name="ds"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.ConvertToStruct(System.Object)">
            <summary>
            In a derived class converts an instance of a native type to a data struct.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Equals(Demo3D.PLC.Comms.CIP.PlcType.Struct)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.Equals(Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="type">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Struct.GetHashCode">
            <summary>
            Returns the hash code for this type.
            </summary>
            <returns>The hash code for this type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.#ctor(System.String,Demo3D.PLC.Comms.CIP.PlcType.TypeType,Demo3D.PLC.Comms.CIP.PlcType.CIPType,Demo3D.PLC.Comms.DataType,System.Int32,System.Boolean)">
            <summary>
            Constructs a PLC type.
            </summary>
            <param name="typeName">The PLC type name.</param>
            <param name="type">The type code.</param>
            <param name="cipType">The CIP type.</param>
            <param name="udtType">The equivalent data type.</param>
            <param name="size">Size in bytes.</param>
            <param name="isComplete">True to indicate that the type is fully formed.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.TypeName">
            <summary>
            The type name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.TypeCode">
            <summary>
            The type code.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.CipType">
            <summary>
            The CIP type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.PLCType">
            <summary>
            The equivalent data type.
            </summary>
            <remarks>
            This will differ from <see cref="P:Demo3D.PLC.Comms.CIP.PlcType.TagType"/> for example when the PLC type is a 64-bit array of booleans, handled as a bit string.
            <see cref="P:Demo3D.PLC.Comms.CIP.PlcType.TagType"/> will be a bool[64], but <see cref="P:Demo3D.PLC.Comms.CIP.PlcType.PLCType"/> will be a uint[2].
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.TagType">
            <summary>
            The equivalent data type for the tag.
            </summary>
            <remarks>
            This will differ from <see cref="P:Demo3D.PLC.Comms.CIP.PlcType.TagType"/> for example when the PLC type is a 64-bit array of booleans, handled as a bit string.
            <see cref="P:Demo3D.PLC.Comms.CIP.PlcType.TagType"/> will be a bool[64], but <see cref="P:Demo3D.PLC.Comms.CIP.PlcType.PLCType"/> will be a uint[2].
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.BitNo">
            <summary>
            The bit number for BOOL CIP type (or 0).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.SizeBytes">
            <summary>
            The size in bytes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.ElementSizeBytes">
            <summary>
            The size of one element of data in bytes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.EncodingSizeBytes">
            <summary>
            CIP Type encoding size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.IsComplete">
            <summary>
            True if the element data type is fully known.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.IsAtomicType">
            <summary>
            Type is atomic.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.IsBaseType">
            <summary>
            Type is a base type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.IsBitSet">
            <summary>
            Type is a bitset.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.IsArray">
            <summary>
            Type is an array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.IsStruct">
            <summary>
            Type is a struct.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.CreateDefaultValue">
            <summary>
            Create an object of this PLC type.
            </summary>
            <returns>An object of this PLC type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.ReadType(Demo3D.IO.IDataReader)">
            <summary>
            Read an object of this type from a packet.
            </summary>
            <param name="data">The packet.</param>
            <returns>The object read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.WriteArray(Demo3D.IO.IDataWriter,System.Int32,System.Object)">
            <summary>
            Write an array to the packet.
            </summary>
            <param name="data">The packet to write.</param>
            <param name="numElements">Number of elements to write.</param>
            <param name="value">The array to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.WriteType(Demo3D.IO.IDataWriter,Demo3D.Common.ValueStruct)">
            <summary>
            Write an object of this type to a packet.
            </summary>
            <param name="data">The packet to write.</param>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.ReadTagType(Demo3D.IO.IDataReader)">
            <summary>
            Reads the CIP data type from a packet.
            </summary>
            <param name="packet">The packet to read.</param>
            <returns>The CIP type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.WriteTagType(Demo3D.IO.IDataWriter)">
            <summary>
            Write the CIP data type of this PLC type into a packet.
            </summary>
            <param name="packet">The packet to write into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Equals(Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="e">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>True if the specified object is equal to the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.GetHashCode">
            <summary>
            Returns the hash code for this type.
            </summary>
            <returns>The hash code for this type.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.PlcType.String">
            <summary>
            Description of the PLC type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.PlcType.ToString">
            <summary>
            Returns a string that represents the current type.
            </summary>
            <returns>A string that represents the current type.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.RealTimeFormat">
            <summary>
            Real time message format.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.RealTimeFormat.Unknown">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.RealTimeFormat.Modeless">
            <summary>
            Pure data. No idle indication.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.RealTimeFormat.ZeroLengthData">
            <summary>
            Zero length data indicated idle.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.RealTimeFormat.Heartbeat">
            <summary>
            Heartbeat only. No data. No idle indication.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.RealTimeFormat.RunIdleHeader">
            <summary>
            32 bit header.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.RealTimeFormat.Safety">
            <summary>
            Safety format.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.StringI">
            <summary>
            International strings.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.Empty">
            <summary>
            The empty string.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.StringI.CharacterSet">
            <summary>
            Character sets.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_1_1987">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_2_1987">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_3_1988">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_4_1988">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_5_1988">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_6_1987">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_7_1987">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_8_1989">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_8859_9_1989">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_10646_UCS_2">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.StringI.CharacterSet.ISO_10646_UCS_4">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.StringI.StringData">
            <summary>
            String data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.Language1">
            <summary>
            First character from ISO 639-2/T.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.Language2">
            <summary>
            Second character from ISO 639-2/T.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.Language3">
            <summary>
            Third character from ISO 639-2/T.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.DataType">
            <summary>
            EPATH data type.  Limited to values 0xd0, 0xd5, 0xd9 and 0xda.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.CharSet">
            <summary>
            From IANA MIB Printer Codes (RFC 1759).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.String">
            <summary>
            String.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.StringData.#ctor(System.Byte,System.Byte,System.Byte,Demo3D.PLC.Comms.CIP.PlcType.CIPType,Demo3D.PLC.Comms.CIP.StringI.CharacterSet,System.String)">
            <summary>
            Constructs string data.
            </summary>
            <param name="language1">Language char 1.</param>
            <param name="language2">Language char 2.</param>
            <param name="language3">Language char 3.</param>
            <param name="dataType">EPATH.</param>
            <param name="charSet">Character set.</param>
            <param name="str">String value.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.Language">
            <summary>
            Language.  First three characters from ISO 639-2/T.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.StringData.Encoding">
            <summary>
            Encoding for this string.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.StringData.Marshal(Demo3D.IO.IDataWriter)">
            <summary>
            Marshal string data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.StringData.Unmarshal(Demo3D.IO.IDataReader)">
            <summary>
            Unmarshal string data.
            </summary>
            <param name="reader">Packet to read.</param>
            <returns>Decoded string data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.StringData.ToString">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.Strings">
            <summary>
            Strings.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.#ctor">
            <summary>
            Constructs the empty string.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.#ctor(Demo3D.PLC.Comms.CIP.StringI.StringData[])">
            <summary>
            Constructs a StringI.
            </summary>
            <param name="strings">The strings.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.#ctor(System.Collections.Generic.List{Demo3D.PLC.Comms.CIP.StringI.StringData})">
            <summary>
            Constructs a StringI.
            </summary>
            <param name="strings">The strings.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.#ctor(System.Collections.Generic.IEnumerable{Demo3D.PLC.Comms.CIP.StringI.StringData})">
            <summary>
            Constructs a StringI.
            </summary>
            <param name="strings">The strings.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.StringI.NumStrings">
            <summary>
            Number of strings.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.Marshal(Demo3D.IO.IDataWriter)">
            <summary>
            Marshal the string.
            </summary>
            <param name="writer">Packet to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.Unmarshal(Demo3D.IO.IDataReader)">
            <summary>
            Unmarshal the specified string.
            </summary>
            <param name="reader">Packet to read.</param>
            <returns>Decoded string data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringI.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.StringIExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringIExtensions.WriteStringI(Demo3D.IO.IDataWriter,Demo3D.PLC.Comms.CIP.StringI)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.StringIExtensions.ReadStringI(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.UNID">
            <summary>
            UNID.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.UNID.SNN">
            <summary>
            SNN.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CIP.UNID.NodeId">
            <summary>
            Node id.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNID.#ctor(Demo3D.PLC.Comms.CIP.DateAndTime,System.UInt32)">
            <summary>
            Constructs a DATE_AND_TIME.
            </summary>
            <param name="snn">SNN.</param>
            <param name="nodeId">Node id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNID.Marshal(Demo3D.IO.IDataWriter)">
            <summary>
            Marshal the DATE_AND_TIME.
            </summary>
            <param name="writer">Buffer to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNID.Unmarshal(Demo3D.IO.IDataReader)">
            <summary>
            Unmarshal the specified buffer.
            </summary>
            <param name="reader">The buffer</param>
            <returns>The unmarshalled DATE_AND_TIME.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNID.Equals(Demo3D.PLC.Comms.CIP.UNID@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNID.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNID.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNID.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.UNIDExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNIDExtensions.WriteUNID(Demo3D.IO.IDataWriter,Demo3D.PLC.Comms.CIP.UNID)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CIP.UNIDExtensions.ReadUNID(Demo3D.IO.IDataReader)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CIP.DirectMemoryAccess`1">
            <summary>
            How to read/write a CIP value of type T directly in memory.
            </summary>
            <typeparam name="T">Data type.</typeparam>
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.DirectMemoryAccess`1.GetValue">
            <summary>
            How to read a value of type T.
            Parameters are the byte and bit offsets.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.CIP.DirectMemoryAccess`1.SetValue">
            <summary>
            How to write a value of type T.
            Parameters are the byte and bit offsets.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.CPFItemType">
            <summary>
            CPF item types.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.NullAddress">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.BasicIdentity">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.Interface">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.Identity">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.LocalLinkAddress">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.OfflinkAddress">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.ProcessorName">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.PCCCPacket">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.ConnectedAddress">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.ConnectedPacket">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.UnconnectedPacket">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.ListServices">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.OTSockaddrInfo">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.TOSockaddrInfo">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.CPFItemType.SequencedAddress">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.Identity">
            <summary>
            Detected identity
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.Basic">
            <summary>
            True if this Identity contains only basic information.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.EncapProtocol">
            <summary>
            The encapsulation protocol number.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.AddressFamily">
            <summary>
            IP address family.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.Port">
            <summary>
            IP port.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.Address">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.IPAddress">
            <summary>
            IP address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.DeviceIdentity">
            <summary>
            The device identity.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Identity.State">
            <summary>
            Device status byte.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.Identity.#ctor(System.Boolean)">
            <summary>
            Constructs a new Identity.
            </summary>
            <param name="basic">True if this identity only contains basic information.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.Interface">
            <summary>
            Detected interfaces.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Interface.Name">
            <summary>
            Interface name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Interface.InterfaceId">
            <summary>
            Interface id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Interface.CommsFlags">
            <summary>
            Communications flags.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Interface.Type">
            <summary>
            Interface type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.Interface.Protocol">
            <summary>
            Interface protocol.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.Interface.#ctor(System.String,System.UInt32)">
            <summary>
            Constructs a new Interface.
            </summary>
            <param name="name">Interface name.</param>
            <param name="interfaceId">Interface id.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.SequencedAddress">
            <summary>
            Sequenced address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.SequencedAddress.ConnectionId">
            <summary>
            Connection id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.SequencedAddress.Sequence">
            <summary>
            Packet sequence number.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.SequencedAddress.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructs a new SequencedAddress.
            </summary>
            <param name="connectionId">Connection id.</param>
            <param name="sequence">Sequence number.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.CPFItem">
            <summary>
            A CPF item reader.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.CPFItem.ItemType">
            <summary>
            The item type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.#ctor(Demo3D.PLC.Comms.CPF.CPFItemType,System.Object,Demo3D.IO.IPacketReader)">
            <summary>
            Constructs a new CPFItem from <paramref name="data"/> and <paramref name="itemType"/>.
            </summary>
            <param name="itemType">The item type.</param>
            <param name="data">The item data.</param>
            <param name="location">Describes where the CPF item was read from (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetItem(Demo3D.PLC.Comms.CPF.CPFItemType)">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <param name="expectedItem">The expected item type.</param>
            <returns>The raw CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetData(Demo3D.PLC.Comms.CPF.CPFItemType)">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <param name="expectedItem">The expected item type.</param>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetData(Demo3D.PLC.Comms.CPF.CPFItemType)">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <param name="expectedItem">The expected item type.</param>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetBasicIdentity">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetBasicIdentity">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetIdentity">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetIdentity">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetInterface">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetInterface">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetNullAddress">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetNullAddress">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetLocalAddress(System.UInt16@)">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <param name="address">The address.</param>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetLocalAddress">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetProcessorName">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetProcessorName">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.TryGetConnectedAddress(System.UInt32@)">
            <summary>
            Returns the CPF data If the CPF item is the expected type.
            </summary>
            <param name="address">The address.</param>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetConnectedAddress">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFItem.GetSequencedAddress">
            <summary>
            Asserts the expected type, and returns the CPF data.
            </summary>
            <returns>The CPF data.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.CPFPacketReader">
            <summary>
            A CPF packet reader.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.CPFPacketReader.Items">
            <summary>
            The CPF items.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketReader.#ctor(Demo3D.IO.IPacketReader)">
            <summary>
            Constructs a CPFPacketReader and reads the CPF items into <see cref="P:Demo3D.PLC.Comms.CPF.CPFPacketReader.Items"/>.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.CPFPacketWriter">
            <summary>
            A CPF packet writer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.#ctor(Demo3D.IO.IPacketWriter)">
            <summary>
            Constructs a CPFPacketWriter.
            </summary>
            <param name="packet"></param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddCPFItem(Demo3D.PLC.Comms.CPF.CPFItemType)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
            <param name="itemId">The CPF item type.</param>
            <returns>A writer to insert CPF packet data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddIdentity(Demo3D.PLC.Comms.CPF.Identity)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddService(System.Boolean,System.Boolean)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddInterface(System.UInt32,System.String)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.NullAddressHeaderSize">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddNullAddress">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.ProcessorNameHeaderSize(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddProcessorName(System.String)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.LocalAddressHeaderSize">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddLocalAddress(System.UInt16)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.ConnectedAddressHeaderSize">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddConnectedAddress(System.UInt32)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddOTSocketAddress(System.UInt16,System.Net.IPAddress)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddTOSocketAddress(System.UInt16,System.Net.IPAddress)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddSequencedAddress(System.UInt32,System.Func{System.UInt32})">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddSequencedAddress(System.UInt32,System.UInt32)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddSequencedAddress(Demo3D.PLC.Comms.CPF.SequencedAddress)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.CPFDataItemHeaderSize">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.AddCPFItem(Demo3D.PLC.Comms.CPF.CPFItem)">
            <summary>
            Adds a CPF item to the packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFPacketWriter.UnconnectedCPFHeaderSize">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.CPFServerReply">
            <summary>
            An object for creating CPF replies.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFServerReply.SendErrorAsync(System.Boolean,Demo3D.PLC.Comms.CPF.Status)">
            <summary>
            Creates an error response.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="status">Error status.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFServerReply.OverrideAddressItem(Demo3D.PLC.Comms.CPF.CPFItem)">
            <summary>
            Overrides the address in the reply.  The default is to reply to the address received in the request.
            </summary>
            <param name="item">The new address item.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFServerReply.AddDataItem">
            <summary>
            Creates a data item in the reply.
            </summary>
            <returns>The packet writer for the reply data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.CPFServerReply.AddAdditionalItem">
            <summary>
            Access to the underlying CPFPacketWriter for appending additional items.
            </summary>
            <returns>The CPFPacketWriter.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.DeviceIdentity">
            <summary>
            Device identity.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.DeviceIdentity.Invalid">
            <summary>
            The invalid identity.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.DeviceIdentity.EDSInfo">
            <summary>
            The device EDS information.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.DeviceIdentity.Serial">
            <summary>
            The device serial number.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.DeviceIdentity.Name">
            <summary>
            Device name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.DeviceIdentity.Status">
            <summary>
            Device status.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.DeviceIdentity.#ctor(Demo3D.PLC.Comms.CPF.EDSInfo,System.UInt32,System.String)">
            <summary>
            Constructs a device identity.
            </summary>
            <param name="edsInfo">Device EDS information.</param>
            <param name="serial">Device serial number.</param>
            <param name="name">Device name.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.DeviceIdentity.#ctor(Demo3D.PLC.Comms.CPF.EDSInfo,System.UInt32,System.String,System.UInt16)">
            <summary>
            Constructs a device identity.
            </summary>
            <param name="edsInfo">Device EDS information.</param>
            <param name="serial">Device serial number.</param>
            <param name="name">Device name.</param>
            <param name="status">Device status.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.DeviceIdentity.#ctor(System.String)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.DeviceVendor">
            <summary>
            See ODVA website.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceVendor.Rockwell">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceVendor.Omron">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.DeviceType">
            <summary>
            See ODVA website.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.GeneralPurposeDiscreteIO">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.DT_10">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.CommsAdapter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.PLC">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.MotorStarter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.SafetyDiscreteIO">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.CIPMotionSafetyDrive">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.CommsPhysicalLayer">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.RAMisc">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.PowerFlex750">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.PowerFlex750EENET">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.HS_DSI">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.DeviceType.IOLinkMaster">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.EDSMask">
            <summary>
            EDSInfo mask.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.EDSMask.Vendor">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.EDSMask.DeviceType">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.EDSMask.ProductCode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.EDSMask.RevisionMajor">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.EDSMask.RevisionMinor">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.EDSMask.ProductMatch">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.EDSMask.ExactMatch">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.EDSInfo">
            <summary>
            Device EDS description.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.EDSInfo.Vendor">
            <summary>
            Device vendor.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.EDSInfo.DeviceType">
            <summary>
            Device type (aka product type).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.EDSInfo.ProductCode">
            <summary>
            Product code.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.EDSInfo.RevisionMajor">
            <summary>
            Major revision number.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.CPF.EDSInfo.RevisionMinor">
            <summary>
            Minor revision number.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.EDSInfo.#ctor(Demo3D.PLC.Comms.CPF.DeviceVendor,Demo3D.PLC.Comms.CPF.DeviceType,System.UInt16,System.Byte,System.Byte)">
            <summary>
            Construct a new EDSInfo.
            </summary>
            <param name="vendor">Device vendor.</param>
            <param name="deviceType">Device type.</param>
            <param name="productCode">Product code.</param>
            <param name="revisionMajor">Major revision number.</param>
            <param name="revisionMinor">Minor revision number.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.EDSInfo.Matches(Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask)">
            <summary>
            Matches the current EDSInfo with a specified EDSInfo and EDSMask.
            </summary>
            <param name="other">Other EDSInfo to match.</param>
            <param name="mask">Mask of elemnts to match.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.EDSInfo.Equals(Demo3D.PLC.Comms.CPF.EDSInfo)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.EDSInfo.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.EDSInfo.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.EDSInfo.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.Status">
            <summary>
            Device status.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.Status.Success">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.Status.UnsupportedCommand">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.Status.OutOfMemory">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.Status.BadData">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.Status.InvalidSession">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.Status.InvalidLength">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Comms.CPF.Status.UnsupportedProtocol">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.CPF.StatusExtensions">
            <summary>
            Device status extension methods.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.CPF.StatusExtensions.ToStatusString(Demo3D.PLC.Comms.CPF.Status)">
            <summary>
            Status to string.
            </summary>
            <param name="status">Status.</param>
            <returns>String representation.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Alignment">
            <summary>
            Directs field memory layout / alignment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Add(System.Int64,System.Int64)">
            <summary>
            Returns the offset of a new field of a specified size.
            </summary>
            <param name="fieldOffsetBits">The offset of the field being added (or -1 to automatically align).</param>
            <param name="fieldSizeBits">The size of the field being added (0 to align the next element to the largest boundary, or -1 if unknown).</param>
            <returns>The offset of the added field (or -1 if it can't be determined).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Add(System.Int32,System.Int32)">
            <summary>
            Returns the offset of a new field of a specified size.
            </summary>
            <param name="fieldOffsetBits">The offset of the field being added (or -1 to automatically align).</param>
            <param name="fieldSizeBits">The size of the field being added (0 to align the next element to the largest boundary, or -1 if unknown).</param>
            <returns>The offset of the added field (or -1 if it can't be determined).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.GetSubAlignment">
            <summary>
            Return a new Alignment object for aligning sub-elements.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Alignment.Sequential">
            <summary>
            A class to help with sequential field memory layout / alignment.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Sequential.#ctor(System.Boolean,System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}})">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Sequential.#ctor(System.Collections.Generic.IReadOnlyList{System.ValueTuple{System.Int32,System.Int32}})">
            <summary>
            Constructs a new sequential field memory alignment helper.
            </summary>
            <param name="alignmentRules">A list of rules on how to align fields in memory.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.Alignment.Sequential.AlignmentRules">
            <summary>
            A list of rules on how to align fields in memory.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Sequential.Add(System.Int64,System.Int64)">
            <summary>
            Returns the offset of a new field of a specified size.
            </summary>
            <param name="fieldOffsetBits">The offset of the field being added (or -1 to automatically align).</param>
            <param name="fieldSizeBits">The size of the field being added (0 to align the next element to the largest boundary, or -1 if unknown).</param>
            <returns>The offset of the added field (or -1 if it can't be determined).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Sequential.GetSubAlignment">
            <summary>
            Return a new Alignment object for aligning sub-elements.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Alignment.Packed">
            <summary>
            A class to help with sequential field memory layout / alignment.
            Aligns bits on bit boundaries, and all else on byte boundaries.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Packed.#ctor">
            <summary>
            Aligns bits on bit boundaries, and all else on byte boundaries.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Alignment.Sequential16">
            <summary>
            A class to help with sequential field memory layout / alignment.
            Aligns bits and bytes on their respective boundaries, and larger types on 16-bit boundaries.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Sequential16.#ctor">
            <summary>
            Aligns bits and bytes on their respective boundaries, and larger types on 16-bit boundaries.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Alignment.Sequential32">
            <summary>
            A class to help with sequential field memory layout / alignment.
            Aligns bits, bytes, and Int16 on their respective boundaries, and larger types on 32-bit boundaries.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Sequential32.#ctor">
            <summary>
            Aligns bits, bytes, and Int16 on their respective boundaries, and larger types on 32-bit boundaries.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Alignment.Sequential64">
            <summary>
            A class to help with sequential field memory layout / alignment.
            Aligns bits, bytes, Int16 and Int32 on their respective boundaries, and larger types on 64-bit boundaries.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Alignment.Sequential64.#ctor">
            <summary>
            Aligns bits, bytes, Int16 and Int32 on their respective boundaries, and larger types on 64-bit boundaries.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.BufferDataConverterContext">
            <summary>
            Used by <see cref="T:Demo3D.PLC.Comms.BufferDataConverter"/>, this class provides the context of a conversion.
            </summary>
            <remarks>
            Consider using <see cref="T:Demo3D.PLC.Comms.BufferMarshaller`1"/> instead.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.BufferDataConverterContext.AddressArea">
            <summary>
            The area of memory being addressed by this buffer.
            Specifically, this is used to marshal booleans into the correct bit in the buffer.
            Supercedes the area of <see cref="P:Demo3D.PLC.Comms.BufferDataConverterContext.Address"/> (normally a subrange of the address).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BufferDataConverterContext.Endian">
            <summary>
            The endianess of the data.  This is used to marshal data types larger than one byte.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BufferDataConverterContext.TextEncoding">
            <summary>
            The string encoding.  This is used to marshal strings.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BufferDataConverterContext.BoolEncoding">
            <summary>
            The bit pattern of a boolean.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BufferDataConverterContext.String">
            <summary>
            A string representation of this context.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.BufferDataConverterContext.Address">
            <summary>
            Optionally, the address of the tag in PLC memory (or null).
            <see cref="P:Demo3D.PLC.Comms.BufferDataConverterContext.AddressArea"/> provides the specific subrange within the address.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverterContext.#ctor(Demo3D.PLC.Comms.AddressArea,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.UInt64,System.String,Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Constructs a context for marshalling/unmarshalling data to/from an array of bytes.
            </summary>
            <param name="addressArea">The area of memory being addressed by the buffer.</param>
            <param name="endian">The endianess of the data.</param>
            <param name="textEncoding">The string encoding.</param>
            <param name="boolEncoding">The bit pattern of a boolean.</param>
            <param name="contextDescription">A user printable description of this context.</param>
            <param name="address">Optionally the address of the tag in PLC memory (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverterContext.ToString">
            <summary>
            Returns a string representation of this context.
            </summary>
            <returns>A string representation of this context.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.BufferDataConverterContextProvider">
            <summary>
            Used by <see cref="T:Demo3D.PLC.Comms.BufferDataConverter"/>, this class provides the context of a conversion, and is its own context provider.
            </summary>
            <remarks>
            Consider using <see cref="T:Demo3D.PLC.Comms.BufferMarshaller`1"/> instead.
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverterContextProvider.#ctor(Demo3D.PLC.Comms.AddressArea,Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.UInt64,System.String,Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Constructs a context for marshalling/unmarshalling data to/from an array of bytes.
            </summary>
            <param name="addressArea">The area of memory being addressed by the buffer.</param>
            <param name="endian">The endianess of the data.</param>
            <param name="textEncoding">The string encoding.</param>
            <param name="boolEncoding">The bit pattern of a boolean.</param>
            <param name="contextDescription">A user printable description of this context.</param>
            <param name="address">Optionally the address of the tag in PLC memory (or null).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.BufferDataConverter">
            <summary>
            A <see cref="T:Demo3D.PLC.Comms.DataConverter"/> for converting .Net objects to/from an array of bytes.
            </summary>
            <remarks>
            Consider using <see cref="T:Demo3D.PLC.Comms.BufferMarshaller`1"/> instead.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.DataType">
            <summary>
            The corresponding data type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.Create(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType)">
            <summary>
            Create an marshaller for a .Net type.
            </summary>
            <param name="contextProvider">The context of the conversion.</param>
            <param name="dataType">The data type.</param>
            <returns>Marshaller for the data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.SizeBits(System.Object,System.Int32)">
            <summary>
            Returns the size of type.
            </summary>
            <param name="value">The value being sized.</param>
            <param name="maxBits">The maximum number of bits it's expected to fit into. (May be -1.)</param>
            <remarks>
            Can return -1 if the size really can't be determined (such as a marshaller for a variable length string).
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.MarshalPacket(Demo3D.IO.IPacketWriter,Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Marshal data into a buffer to be written to the peer.
            </summary>
            <param name="packet">The packet to hold the marshalled data.</param>
            <param name="dataValue">The value to marshall.</param>
            <param name="area">The memory area being written to.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.UnmarshalPacket(Demo3D.IO.IPacketReader,Demo3D.PLC.Comms.AddressArea,Demo3D.PLC.Comms.AddressArea,Demo3D.PLC.Comms.DataValue.Factory)">
            <summary>
            Unmarshal data read from a memory address and return its value as the DataType.
            </summary>
            <param name="packet">Data to unmarshal.</param>
            <param name="area">Memory area that was read.</param>
            <param name="affectedArea">The memory area that changed.</param>
            <param name="dataValueFactory">Data value factory for creating data values.</param>
            <returns>Value as DataType.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.MarshalDefault(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Marshal data into a buffer to be written to the peer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.MarshalPacketDefault(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.IO.IPacketWriter,Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Marshal data into a buffer to be written to the peer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.GetMarshaller">
            <summary>
            Returns a function to marshal data into a buffer to be written to the peer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.UnmarshalDefault(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Unmarshal data read from a memory address and return its value as the DataType.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.UnmarshalPacketDefault(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.IO.IPacketReader)">
            <summary>
            Unmarshal data read from a memory address and return its value as the DataType.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.Marshaller.GetUnmarshaller">
            <summary>
            Returns a function to unmarshal data read from a memory address into DataType value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.CanConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns whether this converter can convert an object of the given type to an array of bytes, using the specified
            context.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="sourceType">The data type to be converted from.</param>
            <param name="destinationType">The data type to be converted to.</param>
            <returns>True is this converter can perform the conversion.</returns>
            <remarks>
            <para>
            The <paramref name="contextProvider"/> must provide an object of type <see cref="T:Demo3D.PLC.Comms.BufferDataConverterContext"/>.
            This context tells the marashaller the endianess of the data, string format, and the area of memory being
            addressed.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.GetConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a function that converts the given object to an array of bytes, using the specified context.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="sourceType">The data type to convert from.</param>
            <param name="destinationType">The data type to be converted to.</param>
            <returns>The conversion function, or null.</returns>
            <remarks>
            <para>
            The <paramref name="contextProvider"/> must provide an object of type <see cref="T:Demo3D.PLC.Comms.BufferDataConverterContext"/>.
            This context tells the marashaller the endianess of the data, string format, and the area of memory being
            addressed.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.CanConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns whether this converter can convert an object to the specified type.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="destinationType">The data type to be converted to.</param>
            <param name="sourceType">The data type to convert from.</param>
            <returns>True is this converter can perform the conversion.</returns>
            <remarks>
            <para>
            The <paramref name="contextProvider"/> must provide an object of type <see cref="T:Demo3D.PLC.Comms.BufferDataConverterContext"/>.
            This context tells the marashaller the endianess of the data, string format, and the area of memory being
            addressed.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.GetConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a function that converts the given value to the specified type, using the specified context.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="destinationType">The data type to convert to.</param>
            <param name="sourceType">The data type to convert from.</param>
            <returns>The conversion function, or null.</returns>
            <remarks>
            <para>
            The <paramref name="contextProvider"/> must provide an object of type <see cref="T:Demo3D.PLC.Comms.BufferDataConverterContext"/>.
            This context tells the marashaller the endianess of the data, string format, and the area of memory being
            addressed.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.BufferDataConverter.PacketMarshallerDelegate">
            <summary>
            A delegate for marshalling packets.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="packetWriter">Packet writer.</param>
            <param name="value">Data value.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.BufferDataConverter.PacketUnmarshallerDelegate">
            <summary>
            A delegate for unmarshalling packets.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="packetReader">Packet reader.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.GetPacketMarshaller(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a function that converts the given object to an array of bytes, using the specified context, writing it into the packet provided.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="sourceType">The data type to convert from.</param>
            <returns>The marshalling function, or null.</returns>
            <remarks>
            <para>
            The <paramref name="contextProvider"/> must provide an object of type <see cref="T:Demo3D.PLC.Comms.BufferDataConverterContext"/>.
            This context tells the marashaller the endianess of the data, string format, and the area of memory being
            addressed.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferDataConverter.GetPacketUnmarshaller(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a function that unmarshals the given value to the specified type, using the specified context, reading the data from the packet provided.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="destinationType">The data type to convert to.</param>
            <returns>The unmarshalling function, or null.</returns>
            <remarks>
            <para>
            The <paramref name="contextProvider"/> must provide an object of type <see cref="T:Demo3D.PLC.Comms.BufferDataConverterContext"/>.
            This context tells the marashaller the endianess of the data, string format, and the area of memory being
            addressed.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.BufferMarshaller`1">
            <summary>
            A class for marshalling/unmarashalling objects into memory.
            </summary>
            <typeparam name="T">The type of the class/struct to be marshalled.</typeparam>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferMarshaller`1.#ctor(Demo3D.IO.Endian,Demo3D.IO.BinaryTextEncoding,System.UInt64,System.String)">
            <summary>
            Constructs a marshaller.
            </summary>
            <param name="endian">The endianess of the data. (Defaults to little endian.)</param>
            <param name="textEncoding">Text encoding of string data. (Defaults to <see cref="P:Demo3D.IO.BinaryTextEncoding.Default"/>.)</param>
            <param name="boolEncoding">The bit pattern of a boolean.</param>
            <param name="contextDescription">An optional text description of the marshaller.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferMarshaller`1.Marshal(`0)">
            <summary>
            Marshal class/struct to memory.
            </summary>
            <param name="data">Object to marshal.</param>
            <returns>Memory buffer.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.BufferMarshaller`1.Unmarshal(Demo3D.IO.BufferSegment@)">
            <summary>
            Unmarshal memory into a class/struct.
            </summary>
            <param name="data">Memory to unmarshal.</param>
            <returns>Unmarshalled object.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.IListExt">
            <summary>
            Extensions to IList.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.IListExt.Set(System.Int32,System.Collections.IList)">
            <summary>
            Sets elements in the list, expanding the list if necessary.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="items">Items to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.IListExt.Set(System.Int32,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Sets elements in the list, expanding the list if necessary.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="items">Items to set.</param>
            <param name="itemsIndex">Index into <paramref name="items"/> of first item to set.</param>
            <param name="count">Number of items to set.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataArray`1">
            <summary>
            A data array.
            </summary>
            <typeparam name="T">The array element type.</typeparam>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataArray`1.IndexRange">
            <summary>
            Index range of elements that changed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataArray`1.IndexRange.FromIndex">
            <summary>
            Index of the first element that changed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataArray`1.IndexRange.NumIndex">
            <summary>
            Number of elements that have changed.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.DataArray`1.ItemsChanged">
            <summary>
            Occurs when item values change.
            Only raised for SetItem or Set operations for elements added or replaced.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataArray`1.ValueChange">
            <summary>
            Previous value of an element that changed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataArray`1.ValueChange.Index">
            <summary>
            Index of element that changed.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataArray`1.ValueChange.OldValue">
            <summary>
            Previous value of element.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.DataArray`1.ItemValuesChanged">
            <summary>
            Occurs when intel values change.
            Only raised for SetItem or Set operations for elements added or replaced.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.#ctor">
            <summary>
            Contructs an empty array.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.#ctor(System.Int64)">
            <summary>
            Constructs an array of specified length.
            </summary>
            <param name="length">Length of the array.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.CreateInstance(System.Int32[])">
            <summary>
            Creates an array of the specified lengths.
            </summary>
            <param name="lengths">Array lengths.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.CreateInstance(System.Int32)">
            <summary>
            Creates an array of the specified lengths.
            </summary>
            <param name="length">Array length.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.CreateInstance(System.Int32,System.Int32)">
            <summary>
            Creates an array of the specified lengths.
            </summary>
            <param name="length1">Array length.</param>
            <param name="length2">Array length.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.CreateInstance(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an array of the specified lengths.
            </summary>
            <param name="length1">Array length.</param>
            <param name="length2">Array length.</param>
            <param name="length3">Array length.</param>
            <returns>The new array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Set(System.Int32,System.Collections.IList,System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Sets elements in the array, expanding the array if necessary.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="objItems">Items to set.</param>
            <param name="tItems">Items to set.</param>
            <param name="itemsIndex">Index into items of first item to set.</param>
            <param name="count">Number of items to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Set(System.Int32,System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Sets elements in the array, expanding the array if necessary.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="items">Items to set.</param>
            <param name="itemsIndex">Index into <paramref name="items"/> of first item to set.</param>
            <param name="count">Number of items to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Set(System.Int32,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Sets elements in the array, expanding the array if necessary.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="items">Items to set.</param>
            <param name="itemsIndex">Index into <paramref name="items"/> of first item to set.</param>
            <param name="count">Number of items to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Set(System.Int32,System.Collections.Generic.IList{`0})">
            <summary>
            Sets elements in the array, expanding the array if necessary.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="items">Items to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Set(System.Int32,System.Collections.IList)">
            <summary>
            Sets elements in the array, expanding the array if necessary.
            </summary>
            <param name="index">Index to start at.</param>
            <param name="items">Items to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index.
            </summary>
            <param name="index">Index of the element to replace.</param>
            <param name="item">Item to set.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted list for the specified value using the specified comparer.
            </summary>
            <param name="value">The value to search for.</param>
            <param name="comparer">The element comparer.</param>
            <returns>The zero-based index of item in the sorted list, if item is found; otherwise, a negative number
            that is the bitwise complement of the index of the next element that is larger than item or, if there is no
            larger element, the bitwise complement of Count.
            </returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Sort">
            <summary>
            Sort the elements in the list using the default comparer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sort the elements in the list using the specified comparer.
            </summary>
            <param name="comparer">The sort comparer (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Sort(System.Comparison{`0})">
            <summary>
            Sort the elements in the list using the specified comparison.
            </summary>
            <param name="comparison">The sort comparison.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.Reverse">
            <summary>
            Reverse the order of the elements in the list.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.ToArray">
            <summary>
            Copies the elements to a new array.
            </summary>
            <returns>A new array containing all the elements.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.ClearItems">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataArray`1.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.DataArraySerializer">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.IDataContextProvider">
            <summary>
            Provides contextual information for a data conversion using <see cref="T:Demo3D.PLC.Comms.DataConverter"/>.
            </summary>
            <remarks>
            <para>
            One instance of <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/> should be created and used per conversion per
            data stream.
            </para>
            <para>
            <see cref="T:Demo3D.PLC.Comms.DataConverter"/> is used to convert data types.  The IDataContextProvider should provide
            information about the conversion.  For example, assigning a boolean into a memory buffer requires
            knowing which bit in the buffer should be read/written.  That information is a property of the
            variable (the memory buffer) and not the data value (the boolean).  A context provider should be
            able to supply that information.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.IDataContextProvider.GetContext(System.Type)">
            <summary>
            Returns data context of a given type.
            </summary>
            <param name="contextType">The type of contextual information required.</param>
            <returns>Data context of a given type, or null.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataContextProvider">
            <summary>
            Provides extensions to <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataContextProvider.GetContext``1(Demo3D.PLC.Comms.IDataContextProvider,``0)">
            <summary>
            Returns data context of a given type.
            </summary>
            <typeparam name="T">The type of contextual information required.</typeparam>
            <param name="contextProvider">The context provider.</param>
            <param name="defaultContext">Value to return if the context provider cannot provide the required context.</param>
            <returns>Data context of a given type, or the default value of T</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.ConversionDelegate">
            <summary>
            Conversion function.
            </summary>
            <param name="contextProvider">A context provider for the conversion.</param>
            <param name="dataValue">The value to convert.</param>
            <remarks>
            <para>
            You can assume that value will not be null and will be the correct type for the conversion.
            </para>
            <para>
            If a context provider was passed to <see cref="M:Demo3D.PLC.Comms.DataConverter.CanConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/>
            or <see cref="M:Demo3D.PLC.Comms.DataConverter.CanConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/> then the same one will
            be passed here too.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.ConversionFunction">
            <summary>
            A conversion function returned from <see cref="M:Demo3D.PLC.Comms.DataConverter.GetConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/>
            or <see cref="M:Demo3D.PLC.Comms.DataConverter.GetConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.ConversionFunction.Name">
            <summary>
            The string name for this conversion function.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.ConversionFunction.Function">
            <summary>
            The conversion function.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.ConversionFunction.#ctor(System.String,Demo3D.PLC.Comms.ConversionDelegate)">
            <summary>
            Constructs a new ConversionFunction.
            </summary>
            <param name="name">A string name for the conversion function. (For debugging and logging.)</param>
            <param name="function">The conversion function.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.ConversionFunction.ToString">
            <summary>
            Returns a string representation of this conversion function.
            </summary>
            <returns>A string representation of this conversion function.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataConverter">
            <summary>
            Provides a unified way of converting types of values to other types.
            </summary>
            <summary>
            Provides a unified way of converting types of values to other types.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.CanConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type
            of this converter, using the specified context.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="sourceType">The data type to be converted from.</param>
            <param name="destinationType">The data type to convert to.</param>
            <returns>True is this converter can perform the conversion.</returns>
            <remarks>
            <para>
            When setting up a conversion, the <paramref name="contextProvider"/> passed to this function and to
            <see cref="M:Demo3D.PLC.Comms.DataConverter.GetConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/> and to the <see cref="T:Demo3D.PLC.Comms.ConversionDelegate"/>
            returned, must all be the same.
            </para>
            <para>
            Each instance of the <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/> is supposed to provide the context for one
            particular conversion for one particular data stream.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.CanConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns whether this converter can convert an object to the specified type.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="destinationType">The data type to be converted to.</param>
            <param name="sourceType">The data type to convert from.</param>
            <returns>True is this converter can perform the conversion.</returns>
            <remarks>
            <para>
            When setting up a conversion, the <paramref name="contextProvider"/> passed to this function and to
            <see cref="M:Demo3D.PLC.Comms.DataConverter.GetConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/> and to the <see cref="T:Demo3D.PLC.Comms.ConversionDelegate"/>
            returned, must all be the same.
            </para>
            <para>
            Each instance of the <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/> is supposed to provide the context for one
            particular conversion for one particular data stream.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.GetConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a function that converts the given object to the type of this converter, using the specified context.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="sourceType">The data type to convert from.</param>
            <param name="destinationType">The data type to convert to.</param>
            <returns>The conversion function, or null.</returns>
            <remarks>
            <para>
            You can assume that the value passed to the conversion function is non-null and is of type <paramref name="sourceType"/>.
            </para>
            <para>
            When setting up a conversion, the <paramref name="contextProvider"/> passed to this function must be the same
            provider that was passed to <see cref="M:Demo3D.PLC.Comms.DataConverter.CanConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/>, and the same provider
            must aslso be passed to the <see cref="T:Demo3D.PLC.Comms.ConversionDelegate"/> returned.
            </para>
            <para>
            Each instance of the <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/> is supposed to provide the context for one
            particular conversion for one particular data stream.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.GetConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a function that converts the given value to the specified type, using the specified context.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="destinationType">The data type to convert to.</param>
            <param name="sourceType">The data type to convert from.</param>
            <returns>The conversion function, or null.</returns>
            <remarks>
            <para>
            You can assume that the value passed to the conversion function is non-null and is an instance of the type
            that this data converter is registered/associated with.
            </para>
            <para>
            When setting up a conversion, the <paramref name="contextProvider"/> passed to this function must be the same
            provider that was passed to <see cref="M:Demo3D.PLC.Comms.DataConverter.CanConvertTo(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/>, and the same provider
            must aslso be passed to the <see cref="T:Demo3D.PLC.Comms.ConversionDelegate"/> returned.
            </para>
            <para>
            Each instance of the <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/> is supposed to provide the context for one
            particular conversion for one particular data stream.
            </para>
            </remarks>
        </member>
        <member name="E:Demo3D.PLC.Comms.DataConverter.OnConverterAdded">
            <summary>
            Occurs when a converter is added to the registry.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.DataConverter.OnConverterRemoved">
            <summary>
            Occurs when a converter is removed from the registry.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.Add(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataConverter)">
            <summary>
            Adds a data converter for the specified type to the registry.
            </summary>
            <param name="type">The data type to be converted.</param>
            <param name="converter">A converter for converting to or from this data type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.Remove(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataConverter)">
            <summary>
            Removes a data converter for the specified type from the registry.
            </summary>
            <param name="type">The assciated data type.</param>
            <param name="converter">The converter to be removed.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.FindConverters(Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a list of registered data converters registered with the specified type.
            </summary>
            <param name="type">The associated type to be converted.</param>
            <returns>The registered data converters registered with the specified type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.Clear">
            <summary>
            Clears the registry.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.GetConverter(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns a function that will convert a value from one type to another.
            </summary>
            <param name="contextProvider">The context of conversions.</param>
            <param name="expectedSourceType">The expected source data type of the value.</param>
            <param name="destinationType">The data type of the value to return.</param>
            <returns>A function that will convert a value from one type to another.</returns>
            <remarks>
            The value passed to the conversion function is expected to be <paramref name="expectedSourceType"/>,
            but the conversion will still be attempted if it's a different type.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverter.CanConvert(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type
            of this converter, using the specified context.
            </summary>
            <param name="contextProvider">Conversion context provider (or null).</param>
            <param name="sourceType">The data type to be converted from.</param>
            <param name="destinationType">The data type to convert to.</param>
            <returns>True is this converter can perform the conversion.</returns>
            <remarks>
            <para>
            When setting up a conversion, the <paramref name="contextProvider"/> passed to this function and to
            <see cref="M:Demo3D.PLC.Comms.DataConverter.GetConvertFrom(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)"/> and to the <see cref="T:Demo3D.PLC.Comms.ConversionDelegate"/>
            returned, must all be the same.
            </para>
            <para>
            Each instance of the <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/> is supposed to provide the context for one
            particular conversion for one particular data stream.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataConverterAttribute">
            <summary>
            Specifies what type to use as a converter for the object this attribute is bound to.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataConverterAttribute.ConverterType">
            <summary>
            The type that represents the converter class to use for data conversion.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the DataConverterAttribute class, using the specified type as the
            data converter for the object this attribute is bound to.
            </summary>
            <param name="converterType">A type that represents the converter class to use for data conversion.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataConverterAttribute.Get(System.Type)">
            <summary>
            Returns the data converter attribute for a data type.
            </summary>
            <param name="dataType">The data type to inspect.</param>
            <returns>The data converter attribute.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.DataStruct">
            <summary>
            A dynamic data structure.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataStruct.NumFields">
            <summary>
            Number of fields in structure definition.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataStruct.IsEmpty">
            <summary>
            The empty/undefined structure definition.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.GetDataType">
            <summary>
            Returns the data type of this structure.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.GetField(System.String)">
            <summary>
            Returns the field by name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.GetField(System.Int32)">
            <summary>
            Returns the field at the specified position.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.BuildDataType(System.String,System.Int64)">
            <summary>
            Builds and returns the data type of this structure.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.AppendField(System.String,Demo3D.PLC.Comms.DataType,System.Int64,System.Object)">
            <summary>
            Appends a field to the structure.  The layout of the structure is implied by the order in which
            this method is called - regardless of the value of <paramref name="fieldOffsetBits"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.Assign(System.Object,Demo3D.PLC.Comms.DataType,System.Object,Demo3D.PLC.Comms.DataType)">
            <summary>
            Copy data from one structure into another.
            </summary>
            <param name="from">The object to copy data from.</param>
            <param name="fromType">The data type of <paramref name="from"/>.</param>
            <param name="to">The object to copy data into.</param>
            <param name="toType">The data type of <paramref name="to"/>.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.Assign(System.Object,System.Object)">
            <summary>
            Copy data from one structure into another.
            </summary>
            <param name="from">The object to copy data from.</param>
            <param name="to">The object to copy data into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.OrderFields(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.FieldDescriptor})">
            <summary>
            Returns FieldDescriptors ordered on Position.
            DataType primarily orders on offset in memory (if known), but we need the order of declaration.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.DeepCopy(System.Object)">
            <summary>
            If the value is a DataStruct, then returns a deep copy of the structure.
            If the value is not, then it just returns the value.
            We don't copy IO.Buffer or IO.BinaryString (considering them to be effectively immutable).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.SetFieldValue(Demo3D.PLC.Comms.Field,System.Object)">
            <summary>
            Sets the value of a field.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.AssignFrom(System.Object,System.Boolean)">
            <summary>
            Copy data from <paramref name="structure"/> into this dynamic structure.
            </summary>
            <param name="structure">The object to copy data from.</param>
            <param name="createFields">True to create the fields in this structure.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.AssignFrom(System.Object)">
            <summary>
            Copy data from <paramref name="structure"/> into this dynamic structure.
            </summary>
            <param name="structure">The object to copy data from.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.AssignTo(System.Object)">
            <summary>
            Copy data from this dynamic structure into <paramref name="structure"/>.
            </summary>
            <param name="structure">The object to copy data into.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.CopyFrom(System.Object)">
            <summary>
            Creates a new DataStruct and copies data from <paramref name="structure"/> into it.
            </summary>
            <param name="structure">The object to copy data from.</param>
            <returns>The new DataStruct.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.CopyTo(System.Type)">
            <summary>
            Creates a new object of type <paramref name="systemType"/> and copies data from this DataStruct into it.
            </summary>
            <param name="systemType">The data type of the object to create.</param>
            <returns>A new object of type <paramref name="systemType"/>.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.CreateInstance(Demo3D.PLC.Comms.DataType)">
            <summary>
            Creates a DataStruct from the specified dataType BaseType.
            Ie, if dataType is an array, will return just one element.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.GetDynamicMemberNames">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.DataStruct.Item(System.String)">
            <exclude />
        </member>
        <member name="E:Demo3D.PLC.Comms.DataStruct.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.NotifyPropertiesChanged">
            <summary>
            Raises the PropertyChanged event manually.
            Since the event isn't raised due to an actual property change, the property name is set as empty.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.Equals(Demo3D.PLC.Comms.DataStruct)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataStruct.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.DataDimension">
            <summary>
            One array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimension.Type">
            <summary>
            The array type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimension.Lengths">
            <summary>
            The array length (or -1 for variable/unknown length).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimension.Length">
            <summary>
            The number of elements in this array (or -1 for variable/unknown length).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataDimension.#ctor(System.Type,System.Int64[])">
            <summary>
            Constructs a new DataDimension.
            </summary>
            <param name="type">The array type.</param>
            <param name="lengths">The array length.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimension.Rank">
            <summary>
            The array rank.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimension.VariableLength">
            <summary>
            The array length is variable/unknown.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataDimension.Equals(Demo3D.PLC.Comms.DataDimension)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataDimension.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataDimension.GetHashCode">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.DataDimensionSerializer">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimensionSerializer.Type">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimensionSerializer.Lengths">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.DataDimensionSerializer.Length">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Comms.DataType">
            <summary>
            Describes a data type, either a .Net System.Type or dynamic type that may have no .Net Type equivalent.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.ElementType">
            <summary>
            The .Net System.Type.
            If the type is an array, this is the System.Type of the base element of the array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.ElementSizeBits">
            <summary>
            The size of the type (in bits, or -1 for variable sized types).
            If the type is an array, returns the size of the base element of the array.
            </summary>
            <remarks>
            <para>
            This is the total size of a type, and overrides the size that we might otherwise compute using
            <see cref="T:System.Runtime.InteropServices.Marshal"/>.
            </para>
            <para>
            Normally we get this value either from <see cref="P:System.Type.StructLayoutAttribute"/> for a .Net struct or
            class, or from <see cref="P:Demo3D.PLC.Comms.DataType.Builder.SizeBits"/> for a dynamic structure (<see cref="T:Demo3D.PLC.Comms.DataStruct"/>),
            or from <see cref="M:Demo3D.PLC.Comms.DataType.Typeof(System.Type,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.DataDimension},System.Int64)"/> for a .Net type with specific
            size (eg a bit or a string).
            </para>
            <para>
            For string or array types where the size if not specified, the address of the tag defines the maximum
            number of bytes of the string/array.  And when demarshalling we read all the data in the address
            area to create the string or array.
            </para>
            <para>
            For strings or arrays embedded within a struct where the size is not specified, the
            <see cref="P:Demo3D.PLC.Comms.FieldDescriptor.FieldOffsetBits"/> of the next element in the structure defines the maximum
            number of bytes to read.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.UserElementName">
            <summary>
            The name of the element type set by the user.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.ElementName">
            <summary>
            The name of the base element type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.ElementFullName">
            <summary>
            The full name of the base element type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.ElementIsStruct">
            <summary>
            The base element has a structure definition.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.ElementIsDynamicStruct">
            <summary>
            The base element is a <see cref="T:Demo3D.PLC.Comms.DataStruct"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.Dimensions">
            <summary>
            For an array, returns the dimensions of the array.
            </summary>
            <remarks>
            A length of 0 means it's not an array.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.IsArray">
            <summary>
            The type is an array type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.IsStruct">
            <summary>
            The type is a structure with a structure definition.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.IsDynamicStruct">
            <summary>
            The type is a <see cref="T:Demo3D.PLC.Comms.DataStruct"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.IsDataArray">
            <summary>
            The type is a <see cref="T:Demo3D.PLC.Comms.DataArray`1"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.SystemType">
            <summary>
            The system type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.SizeBits">
            <summary>
            The total size (in bits, or -1).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.Name">
            <summary>
            Printable string describing the type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.FullName">
            <summary>
            Printable string describing the type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.ReorderFields(System.Collections.Generic.List{Demo3D.PLC.Comms.FieldDescriptor})">
            <summary>
            Reorders the list of FieldDescriptors first on FieldOffsetBits and then on Position.
            This is the order we lay fields out in memory, and not the positional order of fields in the structure definition.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.GetFields">
            <summary>
            The fields of the structure (ordered, or null).
            Fields are ordered on <see cref="P:Demo3D.PLC.Comms.FieldDescriptor.FieldOffsetBits"/> first and then on <see cref="P:Demo3D.PLC.Comms.FieldDescriptor.Position"/>.
            </summary>
            <returns>The fields of the structure (or null).</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataType.MemoryLayout">
            <summary>
            Returns the field offset and size for fields of a structure.
            (Describes just one element for an array type.)
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MemoryLayout.#ctor(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.Alignment)">
            <summary>
            Constucts a new MemoryLayout.
            </summary>
            <param name="dataType">The data type to analyse.</param>
            <param name="alignment">Alignment rules (or null).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.MemoryLayout.Field">
            <summary>
            The current field (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.MemoryLayout.OffsetBits">
            <summary>
            The offset of the current field (or -1 if unknown).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.MemoryLayout.SizeBits">
            <summary>
            The size of the current field (or -1 if unknown).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.MemoryLayout.EndOffsetBits">
            <summary>
            The offset of the next bit after the current field (or -1 if unknown).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.MemoryLayout.OffsetOfNextFieldBits">
            <summary>
            The offset of the next field (or -1 if unknown or there is no next field).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MemoryLayout.MoveNext">
            <summary>
            Move to the next field and compute the field offsets and size.
            </summary>
            <returns>False if we reached the end.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MemoryLayout.Reset">
            <summary>
            Reset.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.GetMemoryLayout(Demo3D.PLC.Comms.Alignment)">
            <summary>
            Returns the memory layout of the fields in a structure.
            </summary>
            <param name="alignment">Optional alignment rules.</param>
            <returns>The memory layout of the fields in a structure</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.GetArrayElementType(System.Type)">
            <summary>
            We consider IList{} and Array both to be array types.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.GetBaseElementType">
            <summary>
            Gets the base element type of an array.
            </summary>
            <returns>The base element type of an array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.GetElementType">
            <summary>
            Returns the type of the array.
            </summary>
            <returns>The type of the array.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MakeArray(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.DataDimension})">
            <summary>
            Makes an array type with the specified dimensions.
            </summary>
            <param name="dimensions">The dimensions of the array.</param>
            <returns>New array data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MakeArray(System.Collections.Generic.IReadOnlyList{System.Int64[]},System.Boolean)">
            <summary>
            Makes a multi-dimensional array type with the specified dimensions.
            </summary>
            <param name="dimensions">The dimensions of the array.</param>
            <param name="useSystemArray">True to use <see cref="T:System.Array"/>, otherwise uses <see cref="T:Demo3D.PLC.Comms.DataArray`1"/>.</param>
            <returns>New array data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MakeArray(System.Collections.Generic.IReadOnlyList{System.Int64},System.Boolean)">
            <summary>
            Makes a multi-dimensional array type with the specified dimensions.
            </summary>
            <param name="dimensions">The dimensions of the array.</param>
            <param name="useSystemArray">True to use <see cref="T:System.Array"/>, otherwise uses <see cref="T:Demo3D.PLC.Comms.DataArray`1"/>.</param>
            <returns>New array data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MakeArray(System.Collections.Generic.IReadOnlyList{System.Int32},System.Boolean)">
            <summary>
            Makes a multi-dimensional array type with the specified dimensions.
            </summary>
            <param name="dimensions">The dimensions of the array.</param>
            <param name="useSystemArray">True to use <see cref="T:System.Array"/>, otherwise uses <see cref="T:Demo3D.PLC.Comms.DataArray`1"/>.</param>
            <returns>New array data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.MakeArray(System.Int64,System.Boolean)">
            <summary>
            Makes a (single dimension) array type with the specified length.
            </summary>
            <param name="length">The length of the array.</param>
            <param name="useSystemArray">True to use <see cref="T:System.Array"/>, otherwise uses <see cref="T:Demo3D.PLC.Comms.DataArray`1"/>.</param>
            <returns>New array data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.SetDimensions(System.Collections.Generic.IReadOnlyList{System.Int64[]})">
            <summary>
            Sets the dimensions using the specified dimensions.
            </summary>
            <param name="dimensions">The dimensions of the array.</param>
            <returns>New array data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.SetDimensions(System.Int32)">
            <summary>
            Sets the dimensions of a (single dimension) array type with the specified length.
            </summary>
            <param name="length">The length of the array.</param>
            <returns>New array data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.#ctor(System.String,System.Type,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.FieldDescriptor},System.Int64,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.DataDimension})">
            <summary>
            Constructs a new DataType from a set of fields.
            fields must be ordered.
            elementSizeBits could legitimately be -1.  Eg the type of a string field in a .Net class.
            For an array elementSizeBits is the size of one base element.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsOpaque(System.Type)">
            <summary>
            Returns flags for types that are structs or classes but that should not be marshalled via DataStruct.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.BaseTypeofWithSize(System.Type,System.Int64)">
            <summary>
            Returns the DataType for a specified .Net System.Type, with a specified size.
            </summary>
            <param name="elementType">A base .Net System.Type.  (Not an array.)</param>
            <param name="elementSizeBits">The size of the type in bits (or -1 for variable sized).</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.BaseTypeofWithSize(System.Object,System.Int64)">
            <summary>
            Returns the DataType for the specified object, with a specified size.
            </summary>
            <param name="instance">The object to get the type of.  (Not an array.)</param>
            <param name="sizeBits">The size of the type in bits (or -1 for variable sized).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Typeof(System.Type,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.DataDimension},System.Int64)">
            <summary>
            Returns the DataType for a .Net System.Type.
            </summary>
            <param name="systemType">The System.Type (or null).</param>
            <param name="dimensions">The dimensions of an array (or null).</param>
            <param name="sizeBits">The size of the type (in bits, or -1 to use the default).</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Typeof(System.Type,System.Int64,System.Int64)">
            <summary>
            Returns the DataType for a .Net System.Type.
            </summary>
            <param name="systemType">The System.Type.</param>
            <param name="length">The length of a (single dimension) array (or 1 for scalar).</param>
            <param name="sizeBits">The size of the type (in bits, or -1 to use the default).</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.TryTypeof(System.Type)">
            <summary>
            Returns the DataType for a .Net System.Type.
            </summary>
            <param name="systemType">The System.Type.</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Typeof(System.Type)">
            <summary>
            Returns the DataType for a .Net System.Type.
            </summary>
            <param name="systemType">The System.Type.</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Typeof(Demo3D.PLC.Comms.DataType)">
            <summary>
            A no-op.
            </summary>
            <param name="dataType">A DataType.</param>
            <returns>The data type.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Typeof(System.TypeCode)">
            <summary>
            Returns the DataType for the specified type code (or null for object types).
            </summary>
            <param name="typeCode">The specified type code.</param>
            <returns>The data type (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Typeof(System.Object)">
            <summary>
            Returns the DataType for the specified object.
            </summary>
            <param name="instance">The object to get the type.</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.TypeFromSize(System.Int64)">
            <summary>
            Returns a best guess DataType given a buffer of a given size.
            </summary>
            <param name="sizeBits">The size of the type (in bits).</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.op_Explicit(Demo3D.PLC.Comms.DataType)~System.Type">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.ConstructStruct(System.String,System.Collections.Generic.List{Demo3D.PLC.Comms.FieldDescriptor},System.Int64)">
            <summary>
            Returns a data type for the specified data type description.
            The fields list passed in belongs to us and is reordered.
            The order of the fields specified must be provided in positional order, but fields are reordered on their FieldOffsetBits and Position.
            sizeBits could legitimately be -1 (for a variable sized type).
            For an array sizeBits is the size of one base element.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.ClearCache">
            <summary>
            Clears the DataType cache.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Object">
            <summary>
            System.Object.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Bit">
            <summary>
            One bit.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Boolean">
            <summary>
            One bit.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Byte">
            <summary>
            System.Byte.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.SByte">
            <summary>
            System.SByte.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Char">
            <summary>
            System.Char.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Int16">
            <summary>
            System.Int16.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.UInt16">
            <summary>
            System.UInt16.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Int32">
            <summary>
            System.Int32.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.UInt32">
            <summary>
            System.UInt32.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Int64">
            <summary>
            System.Int64.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.UInt64">
            <summary>
            System.UInt64.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Single">
            <summary>
            System.Single.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Double">
            <summary>
            System.Double.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.DateTime">
            <summary>
            System.DateTime.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.String">
            <summary>
            System.String.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.BinaryString">
            <summary>
            Demo3D.IO.BinaryString.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.Buffer">
            <summary>
            Demo3D.IO.Buffer.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.BufferSegment">
            <summary>
            Demo3D.IO.BufferSegment.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataType.FieldItem">
            <summary>
            A field definition for the dynamic structure builder (see <see cref="T:Demo3D.PLC.Comms.DataType.Builder"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.FieldItem.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.FieldItem.Type">
            <summary>
            The field data type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.FieldItem.FieldOffsetBits">
            <summary>
            The offset of the field in the data structure (in bits, or -1).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.FieldItem.#ctor(System.String,Demo3D.PLC.Comms.DataType,System.Int64)">
            <summary>
            Constructs a new field item.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="type">The field data type.</param>
            <param name="fieldOffsetBits">The offset of the field in the data structure (in bits, or -1).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataType.Builder">
            <summary>
            Dynamic structure builder.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Builder.#ctor(System.String,Demo3D.PLC.Comms.Alignment)">
            <summary>
            Constructs a new dynamic structure builder.
            </summary>
            <param name="name">The type name (or null).</param>
            <param name="alignment">Optional memory alignment rules.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.Builder.Name">
            <summary>
            Sets the type name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataType.Builder.SizeBits">
            <summary>
            Sets the total data structure size (in bits).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Builder.Add(System.String,Demo3D.PLC.Comms.DataType,System.Int64)">
            <summary>
            Appends a field to the structure.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="type">The field data type.</param>
            <param name="fieldOffsetBits">The offset of the field in the data structure (in bits, or -1).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Builder.Add(System.String,System.Type,System.Int32,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.DataDimension},System.Int64)">
            <summary>
            Appends a field to the structure.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="systemType">The field data type.</param>
            <param name="fieldOffsetBits">The offset of the field in the data structure (in bits, or -1).</param>
            <param name="dimensions">The dimensions of an array (or null).</param>
            <param name="sizeBits">The size of the type (in bits, or -1 to use the default).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Builder.Add(System.String,System.Type,System.Int32,System.Int32,System.Int64)">
            <summary>
            Appends a field to the structure.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="systemType">The field data type.</param>
            <param name="fieldOffsetBits">The offset of the field in the data structure (in bits, or -1).</param>
            <param name="length">The length of an array (or -1).</param>
            <param name="sizeBits">The size of the type (in bits, or -1 to use the default).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Builder.ComputeSize(Demo3D.PLC.Comms.DataStruct)">
            <summary>
            Computes the size of the struct (in bits).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.Builder.Build">
            <summary>
            Builds the data type.
            </summary>
            <returns>The new data type.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataType.ConvertibleFlags">
            <summary>
            Flags for specifying acceptable conversions.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.ConvertibleTypes">
            <summary>
            Different (but equivalent) .Net types are allowed.
            With this flag, the source and destination .Net types do not have to be the same.
            Without this flag, the source and destination .Net types must be exactly the same type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.NonAssignableTypes">
            <summary>
            Non-assignable .Net types are allowed.
            With this flag, the source .Net type does not need to be assignable to the destination .Net type.
            Without this flag, the source .Net type must be assignable to the destination .Net type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.EquivalentTypes">
            <summary>
            Allow equivalent types.
            Equivalent types include string/IO.BinaryString.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.PromoteTypes">
            <summary>
            Types can be promoted.
            With this flag, the source field must be convertible to the destination field without loss of data.
            Without this flag, the source and destination fields must be exact.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.CastTypes">
            <summary>
            Types can be cast.
            With this flag the conversion is acceptible if any conversion is possible, even if it involves loss of data.
            Eg Int32 to Int16, or Int32 to UInt32, or even String to Int.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.ConvertibleDimensions">
            <summary>
            Allow different (but equavalent) dimensions.
            With this flag, array lengths do not need to be the same.
            Without this flag, dimensions must be exact.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.PromoteDimensions">
            <summary>
            Dimensions can be promoted.
            With this flag, dimensions of the destination type must either be variable, or larger than the source type.
            Without this flag, dimensions must be variable length or exact.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.AnyFieldOrder">
            <summary>
            Don't require fields to be in order.
            With this flag, fields are matched first by FieldOffset, then by Name, and then by Position.
            Furthermore, unmatched fields in the destination type are allowed.
            Without this flag, fields are matched strictly in order (ordered by FieldOffset and then by Position),
            and all fields in source and destination types must match.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.IgnoreName">
            <summary>
            Ignore the data type name.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataType.ConvertibleFlags.IgnoreSize">
            <summary>
            Ignore the data type size.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsConvertible(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType.ConvertibleFlags,System.Func{System.Type,System.Type,System.Boolean,System.Boolean})">
            <summary>
            Determines whether an instance of a specified type (the source) can be converted to an instance of
            a different type (the destination).
            </summary>
            <param name="source">The source type to compare.</param>
            <param name="destination">The destination type.</param>
            <param name="flags">Flags to specify acceptable conversions.</param>
            <param name="canConvert">
            A function that determines whether a conversion exists between one .Net type and another.
            Called with parameters 'sourceType', 'destinationType', 'castTypes'.
            Uses <see cref="M:Demo3D.IO.BinaryConvert.CanConvert(System.Type,System.Type,System.Boolean)"/> by default.
            </param>
            <returns>True if an instance of the specified type can be converted to an instance of the current type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsConvertibleFrom(Demo3D.PLC.Comms.DataType,System.Func{System.Type,System.Type,System.Boolean,System.Boolean})">
            <summary>
            Determines whether an instance of a specified type can be converted to an instance of the current type.
            </summary>
            <param name="from">The type to compare with the current type.</param>
            <param name="canConvert">
            A function that determines whether a conversion exists between one .Net type and another.
            Called with parameters 'sourceType', 'destinationType', 'castTypes'.
            Uses <see cref="M:Demo3D.IO.BinaryConvert.CanConvert(System.Type,System.Type,System.Boolean)"/> by default.
            </param>
            <returns>True if data of the specified type can be converted to an instance of the current type.</returns>
            <remarks>
            A source type is convertible to this type if an instance of the source type can be converted to this type,
            including conversions that may result in loss of data.
            Acceptable conversions are determined by <see cref="M:Demo3D.IO.BinaryConvert.CanConvert(System.Type,System.Type,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsEquivalent(Demo3D.PLC.Comms.DataType)">
            <summary>
            Determines whether an instance of a specified type is equivalent to an instance of the current type.
            </summary>
            <param name="other">The type to compare with the current type.</param>
            <returns>True if data of the specified type is equivalent to an instance of the current type.</returns>
            <remarks>
            Two types are equivalent if they carry the same data and an instance of one can be converted to the other
            and back again, without loss of data.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsAssignableFrom(Demo3D.PLC.Comms.DataType)">
            <summary>
            Determines whether an instance of a specified type can be assigned to an instance of the current type.
            </summary>
            <param name="from">The type to compare with the current type.</param>
            <returns>True if data of the specified type can be directly assigned to an instance of the current type.</returns>
            <remarks>
            A source type is assignable if an instance of that type can be assigned to this type.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsAssignableFrom(System.Type)">
            <summary>
            Determines whether an instance of a specified type can be assigned to an instance of the current type.
            </summary>
            <param name="from">The type to compare with the current type.</param>
            <returns>True if data of the specified type can be directly assigned to an instance of the current type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsAssignableFrom(System.Object)">
            <summary>
            Determines whether a specified value can be assigned to an instance of the current type.
            </summary>
            <param name="value">The specified value.</param>
            <returns>True if the specified value can be directly assigned to an instance of the current type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.CreateAndPopulateArray(System.Collections.IList,System.Collections.IList,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Convert and populate array.
            </summary>
            <param name="from">Source array to assign from.</param>
            <param name="to">Destination array to assign to.</param>
            <param name="sourceType">The source data type (if known).</param>
            <param name="destinationType">The destination data type (if known).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.CreateArray(System.Collections.IList,Demo3D.PLC.Comms.DataType)">
            <summary>
            Create an instance of an array data type.
            </summary>
            <param name="from">Source array to assign from.</param>
            <param name="sourceType">The source data type (if known).</param>
            <returns>An instance of this data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.CreateArray">
            <summary>
            Create an instance of an array data type.
            </summary>
            <returns>An instance of this data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.TryCreateInstance">
            <summary>
            Create an instance of this data type.
            </summary>
            <returns>An instance of this data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.CreateInstance">
            <summary>
            Create an instance of this data type.
            </summary>
            <returns>An instance of this data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.FindType(System.String)">
            <summary>
            Parse data type.
            </summary>
            <param name="type">The string type to parse.</param>
            <returns>The data type (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.GetType(System.String)">
            <summary>
            Parse data type.
            </summary>
            <param name="type">The string type to parse.</param>
            <returns>The data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.FindSystemType(System.String)">
            <summary>
            Parse .Net data type.
            </summary>
            <param name="type">The string type to parse.</param>
            <returns>The detected data type (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.GetSystemType(System.String)">
            <summary>
            Parse .Net data type.
            </summary>
            <param name="type">The string type to parse.</param>
            <returns>The detected data type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.IsNullOrObject(Demo3D.PLC.Comms.DataType)">
            <summary>
            Returns true if the dataType is null or the Object type.
            </summary>
            <param name="dataType">Data type to test.</param>
            <returns>True if the dataType is null or the Object type.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataType.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue">
            <summary>
            A data value.
            </summary>
            <remarks>
            <para>
            This class wraps up a data value that we pass upstream/downstream.  In the simplest case it's just a wrapper around an
            int or a bool.
            </para>
            <para>
            The real use of this class is to wrap up deltas, where the information passed is not just the value of the tag but also a
            description of which parts of the data have changed.  A simple example is <see cref="T:Demo3D.PLC.Comms.DataValue.Memory"/> which passes the memory
            buffer for a byte[] tag, but also includes information about which part of the tag memory area actually changed.
            </para>
            <para>
            Data deltas for structures (which property or properties within the structure) or for arrays (which elements in the array)
            are handled with special classes that derive from DataValue.  These classes need to be aware of the threading model and to
            ensure that events (such as <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> or
            <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> don't get raised in the server thread, but get delayed and raised
            at the appropriate time in the user/model thread.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue.DataValueObject">
            <summary>
            For non-basic value types, wraps the object in an appropriate way.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DataValue.Null">
            <summary>
            The null value.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataValue.TypeCode">
            <summary>
            Type code.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.PeekValue">
            <summary>
            Returns the actual .Net value if it's immediately available, otherwise the base .Net value for a delta.
            </summary>
            <returns>The .Net value.</returns>
            <remarks>
            <para>
            If the DataValue represents a base object with an associated delta, this method cannot return the value.  In this case, the
            true value is only available if the delta is applied to the base object, and PeekValue will return base value instead.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.GetValueStruct">
            <summary>
            Returns the the actual .Net value.
            </summary>
            <returns>The actual .Net value.</returns>
            <remarks>
            <para>
            Calling this method may cause a delta to be applied to a base object, which may raise events (such as
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> or <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/>).
            It's essential that events only get raised in the 'correct' thread, and specifically that user event handlers only get called
            in the user/model thread.
            </para>
            <para>
            For data values passing downstream, the base object in the DataValue already has the delta applied, and so no events will be
            raised.  It's safe to call GetValue at any point in the downstream data path.
            </para>
            <para>
            For data values passing upstream, the base object is the previous value that was passed to the user and the delta contains the
            changes that have yet to be applied.  GetValue applies the changes and raises any events.  This normally happens when the
            actual value is retrieved by the model thread.  This applies the deltas and fires the events in the model thread.
            </para>
            <para>
            The only other place that GetValue can be called is in a <see cref="T:Demo3D.PLC.Comms.DataConverter"/>.  It uses GetValue to get the value of
            the data which it then converts to another value.  This works because the converter is a permanent fixture of the upstream
            data pathway, always converts values as they pass upstream, and no event handlers will be subscribed to the base value object.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.GetValue">
            <summary>
            Returns the the actual .Net value.
            </summary>
            <returns>The actual .Net value.</returns>
            <remarks>
            <para>
            Calling this method may cause a delta to be applied to a base object, which may raise events (such as
            <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> or <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/>).
            It's essential that events only get raised in the 'correct' thread, and specifically that user event handlers only get called
            in the user/model thread.
            </para>
            <para>
            For data values passing downstream, the base object in the DataValue already has the delta applied, and so no events will be
            raised.  It's safe to call GetValue at any point in the downstream data path.
            </para>
            <para>
            For data values passing upstream, the base object is the previous value that was passed to the user and the delta contains the
            changes that have yet to be applied.  GetValue applies the changes and raises any events.  This normally happens when GetValue is
            called to retrieve the actual value in the model thread.  This applies the deltas and fires the events in the model thread.
            </para>
            <para>
            The only other place that GetValue can be called is in a <see cref="T:Demo3D.PLC.Comms.DataConverter"/>.  It uses GetValue to get the value of
            the data which it then converts to another value.  This works because the converter is a permanent fixture of the upstream
            data pathway, always converts values as they pass upstream, and no event handlers will be subscribed to the base value object.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataValue.IsNull">
            <summary>
            True if the value is null.
            </summary>
            <returns>True if the value is null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.GetDataType">
            <summary>
            Returns the type of the value (or null if the value is null).
            </summary>
            <returns>The type of the value (or null if the value is null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.GetTime">
            <summary>
            Returns the time of the event that produced the value.
            </summary>
            <returns>Returns the time of the event that produced the value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.SetTime(Demo3D.Time.CommonTime)">
            <summary>
            Returns a new DataValue with the specified time set.
            </summary>
            <param name="time">The time to set.</param>
            <returns>A new DataValue with the specified time set.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue.Instance">
            <summary>
            An instance of an object.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Instance.#ctor(System.Object,Demo3D.PLC.Comms.DataType)">
            <summary>
            Construct a DataValue.Instance from an instance of an object.
            </summary>
            <param name="value">The data.</param>
            <param name="dataType">The data type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Instance.#ctor(System.Object)">
            <summary>
            Construct a DataValue.Instance from an instance of an object.
            </summary>
            <param name="value">The data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Instance.PeekValue">
            <summary>
            Returns the actual .Net value.
            </summary>
            <returns>The .Net value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Instance.GetDataType">
            <summary>
            Returns the type of the value (or null).
            </summary>
            <returns>The type of the value (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Instance.ToString">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.Common.ValueStruct@,Demo3D.PLC.Comms.DataType,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <param name="dataType">The data type of the <paramref name="value"/>.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.Common.ValueStruct@,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.Common.ValueStruct@,Demo3D.PLC.Comms.DataType)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <param name="dataType">The data type of the <paramref name="value"/>.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.Common.ValueStruct@)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(System.Object,Demo3D.PLC.Comms.DataType,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <param name="dataType">The data type of the <paramref name="value"/>.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(System.Object,Demo3D.PLC.Comms.DataType)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <param name="dataType">The data type of the <paramref name="value"/>.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(System.Object,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(System.Object)">
            <summary>
            Constructs a DataValue for passing a value downstream, or for passing a basic object upstream.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue.Memory">
            <summary>
            A DataValue.Memory representing a PLC memory buffer.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataValue.Memory.Buffer">
            <summary>
            The buffer.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataValue.Memory.Address">
            <summary>
            The address of the buffer in PLC memory.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataValue.Memory.AffectedArea">
            <summary>
            The affected area (the area of memory that actually changed).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Memory.#ctor(Demo3D.IO.BufferSegment@,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Constructs a DataValue.Memory from a memory buffer.
            </summary>
            <param name="buffer">The memory buffer.</param>
            <param name="address">The address of the buffer in PLC memory (or null).</param>
            <param name="affectedArea">The affected area (the area of memory that actually changed, or AddressArea.Zero).</param>
            <returns>A DataValue that encapsulates the data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Memory.PeekValue">
            <summary>
            Returns the the actual .Net value.
            </summary>
            <returns>The actual .Net value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Memory.GetDataType">
            <summary>
            Returns the type of the value.
            </summary>
            <returns>The type of the value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.IO.BufferSegment@,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AddressArea)">
            <summary>
            Constructs a DataValue from a memory buffer.
            </summary>
            <param name="buffer">The memory buffer.</param>
            <param name="address">The address of the buffer in PLC memory (or null).</param>
            <param name="affectedArea">The affected area (the area of memory that actually changed, or AddressArea.Zero).</param>
            <returns>A DataValue that encapsulates the data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.AffectedArea(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Returns the affected area from a DataValue created using <see cref="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.IO.BufferSegment@,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AddressArea)"/>.
            </summary>
            <param name="value">The memory DataValue.</param>
            <returns>The affected area.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue.DataStructCopy">
            <summary>
            Uses <see cref="M:Demo3D.PLC.Comms.DataStruct.Assign(System.Object,System.Object)"/> to copy the content of the new value
            into the base value.  If the structure implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or
            <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> then the property setters on the base value will raise the
            appropriate events.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue.ListCopy">
            <summary>
            Uses <see cref="M:Demo3D.PLC.Comms.IListExt.Set(System.Int32,System.Collections.IList)"/> to copy the content of the new value
            into the base value.  If the array is a <see cref="T:Demo3D.PLC.Comms.DataArray`1"/> then it'll raise the
            appropriate events.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue.Factory">
            <summary>
            Supports creation of DataValues from recently unmarshalled data for passing upstream.
            See <see cref="T:Demo3D.PLC.Comms.DataValue.ContextProvider"/> and <see cref="T:Demo3D.PLC.Comms.DataValue"/> for notes.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Factory.Create(System.Object,Demo3D.PLC.Comms.DataType,Demo3D.Time.CommonTime)">
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.DataValue.Factory,Demo3D.Common.ValueStruct@,Demo3D.PLC.Comms.DataType,Demo3D.Time.CommonTime)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="factory">The data value factory.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.DataValue.Factory,System.Object,Demo3D.PLC.Comms.DataType,Demo3D.Time.CommonTime)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="factory">The data value factory.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.DataValue.Factory,Demo3D.Common.ValueStruct@,Demo3D.PLC.Comms.DataType)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="factory">The data value factory.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.DataValue.Factory,System.Object,Demo3D.PLC.Comms.DataType)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="factory">The data value factory.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.Common.ValueStruct@,Demo3D.PLC.Comms.DataType,Demo3D.Time.CommonTime)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="contextProvider">The data context provider.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.IDataContextProvider,System.Object,Demo3D.PLC.Comms.DataType,Demo3D.Time.CommonTime)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="contextProvider">The data context provider.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.IDataContextProvider,Demo3D.Common.ValueStruct@,Demo3D.PLC.Comms.DataType)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="contextProvider">The data context provider.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Create(Demo3D.PLC.Comms.IDataContextProvider,System.Object,Demo3D.PLC.Comms.DataType)">
            <summary>
            Create a new recently demarshalled DataValue to pass upstream.
            </summary>
            <param name="contextProvider">The data context provider.</param>
            <param name="value">The recently demarshalled object.</param>
            <param name="dataType">The data type of the value.</param>
            <returns>A new DataValue.</returns>
            <remarks>
            The value passed in should be of type <paramref name="dataType"/>.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue.ContextProvider">
             <summary>
             This is used as the IDataContextProvider for upstream conversions at each point in the data pathway.
             </summary>
             <remarks>
             <para>
             Some notes on data types...
            
             The data types in the data pathway include:
                 CustomProperty.Type               - CustomProperty's understanding of what the value type should be
                                                     this type should be reflected in ServerItem.BoundType
                 ServerItem.ConfiguredType         - the type configured from the tag import file
                 ExtendedType                      - the type of the extended function
                                                     the extended function takes a ServerItem value and selects just one element, eg an element of an array, or bit from an int
                 value.GetType()                   - the actual type of the value
                 Memory Server
                     IAddress.GetDataType          - the type implied (or enforced) by the memory/tag address
                     Address.BitAddress            - for booleans we need the BitAddress to determine which bit in the byte
                     Address.NumBytes              - deduce the type from the data size when the address doesn't explicitly define the type
                 TagServer
                     tag server defined type       - a tag server normally defines tag types explicitly (but not always)
                     tag server IO type            - the tag server API may require a different data type than the tag type (eg IO using byte[])
             </para>
             <para>
             We use our own <see cref="T:Demo3D.PLC.Comms.DataType"/> to describe types.  Some problems with System.Type:
               + bool                              - which bit in the byte
               + string                            - System.String can't store random character data - prefer BinaryString instead
               + string - encoding                 - for memory encoding, System.String doesn't say how it's to be encoded, and a PLC may support more than one encoding
               + fixed sized arrays                - System.Array doesn't define the length or dimensions of an array - only stored on Array instances
                                                     and arrays don't notify when an item is changed (see <see cref="T:Demo3D.PLC.Comms.DataArray`1"/>.
               + structures                        - user defined structs/classes, or tag server defined UDTs (see <see cref="T:Demo3D.PLC.Comms.DataStruct"/>.
             </para>
             <para>
             Type negotiation:
               + ServerItem chooses the ServerItem.DataType from CustomProperty.Type and/or ServerItem.ConfiguredType.  This is the bound type.
               + NetServerItem negotiates the AccessType from the bound type and the address type (if the address is strongly typed).
               + The TagAccess TagType is the type of the tag (if defined).  It's usually defined by the symbol table or by the low level dll API.
               + The TagAccess IOType is the data type that the TagAccess needs to actually perform IO.
             </para>
             <para>
             The data pathway consists of a number of explicit data conversions points.  Eg ReadFromPLC:
               + We create a DataValue when we read in data.  Memory servers always use IO.Buffer.
               + TagAccess converts the tag value read from the IOType to the TagType.
               + TagAccess converts the value from TagType to AccessType.
               + NetServerItem converts the access value from AccessType to the bound type.
               + CustomProperty internally converts the value to the CustomProperty.Type.
               
             Not all these conversions happen.  In most cases there's no conversion to perform, and it's all a no-op.
             </para>
             <para>
             <see cref="T:Demo3D.PLC.Comms.DataConverter"/> is used to convert data types.  The <see cref="T:Demo3D.PLC.Comms.IDataContextProvider"/> provides information about the
             conversion.  For example, assigning a boolean into a memory buffer requires knowing which bit in the buffer should be read/written.
             That information is a property of the variable (the memory buffer) and not the data value (the boolean).  A context provider should
             be able to supply that information.
             </para>
             <para>
             When a value is sent downstream, we only ever wrap it in an <see cref="T:Demo3D.PLC.Comms.DataValue.Instance"/> created using <see cref="M:Demo3D.PLC.Comms.DataValue.Create(System.Object)"/>.  Even
             if the value implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/>, we don't bother passing the
             delta downstream - we simply send the new value straight through.  API's such as OPC won't deal with deltas, and memory-based
             interfaces automatically detect the modified areas of memory.
             </para>
             <para>
             But when we pass a value upstream that implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> or <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> then
             we try to manage deltas more carefully.  For these we use a <see cref="T:Demo3D.PLC.Comms.DataValue.Factory"/> in order to support deltas in the upstream data
             pathway.  This means that the creation of a <see cref="T:Demo3D.PLC.Comms.DataValue"/> and every conversion of a DataValue in the upstream data pathway
             requires access to a <see cref="T:Demo3D.PLC.Comms.DataValue.Factory"/>.  (The factory knows the previous value we sent upstream so that it can create and send upstream
             a base value and a delta.  See <see cref="T:Demo3D.PLC.Comms.DataValue"/> for more notes on deltas.)
             </para>
             <para>
             This class is used to expose a <see cref="T:Demo3D.PLC.Comms.DataValue.Factory"/> to the <see cref="T:Demo3D.PLC.Comms.DataConverter"/>.  We instantiate one of these structures to be the
             upstream context provider at each of the conversion points.  If the user has provided a context provider, then we daisy-chain it.
             </para>
             </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.ContextProvider.#ctor(Demo3D.PLC.Comms.IDataContextProvider)">
            <summary>
            Constructs a ContextProvider.
            </summary>
            <param name="contextProvider">The context provider to daisy-chain (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.ContextProvider.Demo3D#PLC#Comms#IDataContextProvider#GetContext(System.Type)">
            <summary>
            Returns data context of a given type for converting the data.
            </summary>
            <param name="contextType">The type of contextual information required.</param>
            <returns>Data context of a given type, or null.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.CreateContextProvider(Demo3D.PLC.Comms.IDataContextProvider)">
            <summary>
            Creates a new IDataContextProvider for demarshalling DataValues.
            </summary>
            <param name="contextProvider">An existing context provider to daisy-chain (or null).</param>
            <returns>A new IDataContextProvider.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.PropagateUpdate(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Determines whether an update from this value to the specified value should be allowed to propagate.
            </summary>
            <param name="other">The value to compare.</param>
            <returns>True if the value should be allowed to propagate.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.Equals(System.Object)">
            <summary>
            Determines whether the specified value equals the current value.
            </summary>
            <param name="obj">The value to compare.</param>
            <returns>True if the specified value equals the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.GetHashCode">
            <summary>
            Returns a hash code for the current value.
            </summary>
            <returns>A hash code for the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.DataValue`1">
            <summary>
            A strongly-typed timestamped data value.
            </summary>
            <remarks>
            The timestamp is considered meta-data and is ignored in equality, comparison and hashcode operators/functions.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.#ctor(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.#ctor(Demo3D.Common.ValueStruct@)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.#ctor(Demo3D.Common.ValueStruct@,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.#ctor(`0)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.#ctor(`0,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.DataValue`1.TypeCode">
            <summary>
            Type code.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.GetValueStruct">
            <summary>
            Returns the the actual .Net value.
            </summary>
            <returns>The actual .Net value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.GetValue">
            <summary>
            Returns the the actual .Net value.
            </summary>
            <returns>The actual .Net value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.GetDataType">
            <summary>
            Returns the type of the value.
            </summary>
            <returns>The type of the value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.GetTime">
            <summary>
            Returns the time of the event that produced the value.
            </summary>
            <returns>Returns the time of the event that produced the value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Create(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Create(Demo3D.Common.ValueStruct@)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Create(Demo3D.Common.ValueStruct@,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Create(`0)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Create(`0,Demo3D.Time.CommonTime)">
            <summary>
            Constructs a DataValue{T}.
            </summary>
            <param name="value">The data value.</param>
            <param name="time">Timestamp.</param>
            <returns>A new DataValue{T}.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Implicit(Demo3D.PLC.Comms.DataValue)~Demo3D.PLC.Comms.DataValue{`0}">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Implicit(Demo3D.PLC.Comms.DataValue{`0})~Demo3D.PLC.Comms.DataValue">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Implicit(Demo3D.Common.ValueStruct)~Demo3D.PLC.Comms.DataValue{`0}">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Implicit(Demo3D.PLC.Comms.DataValue{`0}@)~Demo3D.Common.ValueStruct">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Implicit(`0)~Demo3D.PLC.Comms.DataValue{`0}">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Implicit(Demo3D.PLC.Comms.DataValue{`0}@)~`0">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Equality(Demo3D.PLC.Comms.DataValue{`0},Demo3D.PLC.Comms.DataValue{`0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Inequality(Demo3D.PLC.Comms.DataValue{`0},Demo3D.PLC.Comms.DataValue{`0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Equality(Demo3D.PLC.Comms.DataValue{`0},`0)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Inequality(Demo3D.PLC.Comms.DataValue{`0},`0)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Equality(`0,Demo3D.PLC.Comms.DataValue{`0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.op_Inequality(`0,Demo3D.PLC.Comms.DataValue{`0})">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Equals(Demo3D.PLC.Comms.DataValue{`0})">
            <summary>
            Determines whether the specified value equals the current value (ignoring time).
            </summary>
            <param name="other">The value to compare.</param>
            <returns>True if the specified value equals the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Equals(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Determines whether the specified value equals the current value (ignoring time).
            </summary>
            <param name="other">The value to compare.</param>
            <returns>True if the specified value equals the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Equals(Demo3D.Common.ValueStruct@)">
            <summary>
            Determines whether the specified value equals the current value (ignoring time).
            </summary>
            <param name="other">The value to compare.</param>
            <returns>True if the specified value equals the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Equals(`0)">
            <summary>
            Determines whether the specified value equals the current value (ignoring time).
            </summary>
            <param name="other">The value to compare.</param>
            <returns>True if the specified value equals the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.Equals(System.Object)">
            <summary>
            Determines whether the specified value equals the current value (ignoring time).
            </summary>
            <param name="obj">The value to compare.</param>
            <returns>True if the specified value equals the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.GetHashCode">
            <summary>
            Returns a hash code for the current value (excluding time).
            </summary>
            <returns>A hash code for the current value.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.DataValue`1.ToString">
            <summary>
            Value as a string.
            </summary>
            <returns>Value as a string.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Field">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Field.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Field.ValueEquals(Demo3D.PLC.Comms.Field)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Field.Equals(Demo3D.PLC.Comms.Field)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Field.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Field.GetValueHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Field.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Field.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.FieldDescriptor">
            <summary>
            One field of a structure.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldDescriptor.Name">
            <summary>
            The name of the field.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldDescriptor.FieldType">
            <summary>
            The data type of the field.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldDescriptor.GetValue">
            <summary>
            A delegate for retrieving the value of a field from an instance of a structure (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldDescriptor.SetValue">
            <summary>
            A delegate for setting the value of a field in an instance of a structure (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldDescriptor.Position">
            <summary>
            The position of the field in the structure.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldDescriptor.FieldOffsetBits">
            <summary>
            The offset of the field in the structure in bits (or -1).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldDescriptor.#ctor(System.String,Demo3D.PLC.Comms.DataType,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Int32,System.Int64)">
            <summary>
            Constructs a new FieldDescriptor.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldDescriptor.Equals(Demo3D.PLC.Comms.FieldDescriptor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldDescriptor.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldDescriptor.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldDescriptor.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.FieldOffsetBitsAttribute">
            <summary>
            Specifies the offset into a structure of a field (in bits).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldOffsetBitsAttribute.OffsetBits">
            <summary>
            The offset into the structure of the field (in bits).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldOffsetBitsAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the FieldOffsetBitsAttribute class.
            </summary>
            <param name="offsetBits">The offset into the structure of the field (in bits).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldOffsetBitsAttribute.Get(System.Reflection.MemberInfo)">
            <summary>
            Returns the field offset attribute for a data type.
            </summary>
            <param name="dataType">The data type to inspect.</param>
            <returns>The field offset attribute.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.FieldSizeBitsAttribute">
            <summary>
            Specifies the size of a field (in bits).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.FieldSizeBitsAttribute.SizeBits">
            <summary>
            The size of the field (in bits).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldSizeBitsAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the FieldSizeBitsAttribute class.
            </summary>
            <param name="sizeBits">The size of the field (in bits).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.FieldSizeBitsAttribute.Get(System.Reflection.MemberInfo)">
            <summary>
            Returns the field size attribute for a data type.
            </summary>
            <param name="dataType">The data type to inspect.</param>
            <returns>The field size attribute.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.IDataRefreshService">
            <summary>
            <para>
            Connections created through the IO browser will always try to refresh cached data on model
            connection or reset. This is essential for PLC protocol implementations, as it ensures that there
            are no data discrepancies between the PLC and the model.
            </para>
            <para>
            This causes issues for protocols that don't always need this functionality, such as
            stateless protocols where data exchanges are processed in isolation. This service allows
            protocol implementations to have control over this functionality.
            </para>
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IDataRefreshService.RefreshOnConnection">
            <summary>
            True if the protocol should refresh data on model connection.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.IDataRefreshService.RefreshOnReset">
            <summary>
            True if the protocol should refresh data on model reset.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.PropagateValue">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.PropagateValue.PropagateAssignment(System.Object,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.PropagateValue.PropagateAssignment(Demo3D.Common.ValueStruct@,Demo3D.Common.ValueStruct@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.PropagateValue.PropagateAssignment(Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.PropagateValue.PropagateUpdate(Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.PropagateValue.PropagateUpdate(System.Object,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.PropagateValue.PropagateUpdate(Demo3D.Common.ValueStruct@,Demo3D.Common.ValueStruct@)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.DeviceAreaType">
            <summary>
            Device area type.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DeviceAreaType.Config">
            <summary>
            Configuration.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DeviceAreaType.Input">
            <summary>
            PLC Input.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.DeviceAreaType.Output">
            <summary>
            PLC Output.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.IConnectionClosed">
            <summary>
            An event raised when the server connection closes.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.IConnectionClosed.OnConnectionClosed">
            <summary>
            Raised when the server connection closes.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.IOControl">
            <summary>
            Cache and IO control flags.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.None">
            <summary>
            No IO control.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.WriteThrough">
            <summary>
            When the model changes the state of a tag (eg sets a custom property), then the model is suspended until the new tag
            data has been written to the server (and depending on the tag server, a response has been received).
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.DontWriteThrough">
            <summary>
            Explicity turns off <see cref="F:Demo3D.PLC.Comms.IOControl.WriteThrough"/>.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.WriteThroughControls">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.DontPreserveUpdates">
            <summary>
            Allow writes to be discarded, only writing snapshots of the data to the PLC.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.PreserveValueUpdates">
            <summary>
            Always ensure that every change in tag value is written to the PLC.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.PreserveAllUpdates">
            <summary>
            Always ensure that every write (even the same value) is written to the PLC. Also ensures that no update apart from explicit writes from the model are written.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.PreserveUpdates">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.PreserveUpdatesControls">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.AllowMerge">
            <summary>
            Allow data from this item to merge with data from other items in IO to/from the server.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.DontAllowMerge">
            <summary>
            Force data from this tag to be read/written to the PLC as a distinct IO request.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.MergeControls">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.FastScanRate">
            <summary>
            Assume this tag requires a fast scan rate, even if a fast scan rate hasn't been explicitly configured.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.DontAllowMergeNCReads">
            <summary>
            Don't allow merging read requests with neighbouring unassigned memory.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.IOControl.DontAllowMergeNCWrites">
            <summary>
            Don't allow merging write requests with neighbouring unassigned memory.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.ParseIOControl">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.ParseIOControl.Parse(System.String,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.ParseIOControl.Parse(System.String)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.IOControlExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.WriteThrough(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.DontWriteThrough(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.DontPreserveUpdates(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.PreserveValueUpdates(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.PreserveAllUpdates(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.PreserveUpdates(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.AllowMerge(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.DontAllowMerge(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.FastScanRate(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.DontAllowMergeNCReads(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.IOControlExtensions.DontAllowMergeNCWrites(Demo3D.PLC.Comms.IOControl)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.IOBeforeHandler">
            <summary>
            Delegate to execute before an IO event.
            </summary>
            <param name="userState">The user state.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.IOSuccessHandler">
            <summary>
            Delegate for indicating IO success.
            </summary>
            <param name="free">True if the request resources can be freed.</param>
            <param name="userState">The user state.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.IOErrorHandler">
            <summary>
            Delegate for notifying an error.
            </summary>
            <param name="ex">The exception that caused the error.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.IOAsyncDelegate`1">
            <summary>
            Delegate for IO with the peer.
            </summary>
            <typeparam name="T">Type of VectoredRequest.</typeparam>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="request">The IO request.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.IOffloadingService">
            <summary>
            A protocol that implements this service agrees to offload write requests.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.ISynchronizedIOService">
            <summary>
            A service for controlling when IO occurs.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.ISynchronizedIOService.OnConfigurationChanged">
            <summary>
            Occurs when <see cref="P:Demo3D.PLC.Comms.ISynchronizedIOService.IOMode"/> or <see cref="P:Demo3D.PLC.Comms.ISynchronizedIOService.ScheduledSpeed"/> is changed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.ISynchronizedIOService.IOMode">
            <summary>
            How IO is performed with respect to the model.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.ISynchronizedIOService.ScheduledSpeed">
            <summary>
            Dictates the speed factor for <see cref="F:Demo3D.Time.CoSimulation.OperatingMode.Scheduled"/> IO.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.ISynchronizedIOService.ProcessIO">
            <summary>
            Occurs when the PLC is ready to send or receive data.
            So as to remain synchronized, IO should be performed in the thread raising the event.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace">
            <summary>
            The address space for <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress"/> addresses.
            </summary>
            <remarks>
            Some servers support more than one memory bank.  The address space should identify which memory bank an
            address belongs to.  For example, a Siemens PLC has separate memory banks for I, Q, M, etc.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.AddressBank">
            <summary>
            In this example, we assume that the PLC has multiple address banks identified by an integer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.#ctor(System.Int32)">
            <summary>
            Creates a new Built-in address space.
            </summary>
            <param name="addressBank">The address bank of this address space.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.CreateAddress(System.Int64,Demo3D.PLC.Comms.DataType,System.Boolean)">
            <summary>
            Creates a new address with the specified parameters.
            </summary>
            <param name="bitAddress">The address offset.</param>
            <param name="dataType">The data type of the address.</param>
            <param name="stronglyTyped">The <paramref name="dataType"/> is strongly typed.</param>
            <returns>The new address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.Equals(Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace)">
            <summary>
            Returns true if the specified address space equals the current address space.
            </summary>
            <param name="other">The address space to compare.</param>
            <returns>True if the specified address space equals the current address space.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.Equals(System.Object)">
            <summary>
            Returns true if the specified address space equals the current address space.
            </summary>
            <param name="obj">The address space to compare.</param>
            <returns>True if the specified address space equals the current address space.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.Equals(Demo3D.PLC.Comms.IAddressSpace)">
            <summary>
            Returns true if the specified address space equals the current address space.
            </summary>
            <param name="obj">The address space to compare.</param>
            <returns>True if the specified address space equals the current address space.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.GetHashCode">
            <summary>
            Returns a hash code that represents this address space.
            </summary>
            <returns>A hash code that represents this address space.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.ToString(Demo3D.PLC.Comms.IAddress)">
            <summary>
            Returns a string representation of the specified address.
            </summary>
            <param name="address">The address to convert to a string.</param>
            <returns>A string representation of the specified address.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress">
            <summary>
            A Built-in Memory Server address.
            </summary>
            <remarks>
            <para>
            A memory server is primarily accessed by address, and so you must provide a class that knows about
            the memory addresses for the server.
            </para>
            <para>
            Addresses must inherit from <see cref="T:Demo3D.PLC.Comms.MemoryAddress"/> and include both a pointer into memory and
            the length of the memory area being addressed.  Optionally an address can also define the data type
            of the data being addressed, in which case it inherits from <see cref="T:Demo3D.PLC.Comms.TypedMemoryAddress"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.#ctor(Demo3D.PLC.Comms.Builtin.BuiltinAddressSpace,System.Int64,Demo3D.PLC.Comms.DataType,System.Boolean)">
            <summary>
            Constructs a new address for the Built-in Memory Server.
            </summary>
            <param name="addressSpace">The address bank.</param>
            <param name="bitAddress">The offset (in bits) of the address into the address space.</param>
            <param name="dataType">The type of the address.</param>
            <param name="stronglyTyped">The address is strongly typed.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.#ctor(System.Int32,System.Int64,System.Int64)">
            <summary>
            Constructs a new address for the Built-in Memory Server.
            </summary>
            <param name="addressBank">The address bank.</param>
            <param name="bitAddress">The offset (in bits) of the address into the address space.</param>
            <param name="numBits">The size of the address (in bits).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.#ctor">
            <summary>
            The default constructor for deserializing addresses.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.ParseAddress(System.String)">
            <summary>
            Parse a string address.
            </summary>
            <param name="s">Address in the format "bank:address:length".</param>
            <returns>An address.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.AccessName">
            <summary>
            Printable string representation of the address.
            </summary>
            <remarks>
            Must be parseable by <see cref="M:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.ParseAddress(System.String)"/>.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.BuiltinAddressConverter">
            <summary>
            A TypeConverter for converting addresses of different types into/from a <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress"/>.
            </summary>
            <remarks>
            Must inherit from <see cref="T:System.ComponentModel.TypeConverter"/>, but inheriting from <see cref="T:Demo3D.PLC.Comms.MemoryAddress.MemoryAddressConverter`1"/>
            instead is simpler.  MemoryAddressConverter itself inherits from ExpandableObjectConverter which makes
            addresses expandable in the GUI property grid.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemAddress.BuiltinAddressConverter.ParseAddress(System.String)">
            <summary>
            Parses a string address.
            </summary>
            <param name="str">The string to parse.</param>
            <returns>The parsed address.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer">
            <summary>
            The Built-in Memory Server.
            </summary>
            <remarks>
            Normally, you'd replace this class entirely with whatever code is required to access your server.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer.Connect">
            <summary>
            Connects to the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer.ReadSymbolTable(Demo3D.Net.ProtocolSocket)">
            <summary>
            Read the symbol table from the PLC.
            </summary>
            <param name="socket">The socket to register the symbol table with.</param>
            <returns>The browse root (or null if the symbol table can't be read).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer.GetMemoryBank(System.Int32)">
            <summary>
            Some memory from the server.
            </summary>
            <param name="addressBank">The address bank id.</param>
            <returns>Array of data representing memory in the server.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer.Read(Demo3D.IO.BufferSegment@,System.Int32,System.Int64,System.Int64)">
            <summary>
            Read data from server memory.
            </summary>
            <param name="buffer">The buffer to place the data in.</param>
            <param name="addressBank">The address bank to access.</param>
            <param name="startBit">The start memory address (in bits).</param>
            <param name="lengthBits">The amount of data to read (in bits).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer.Write(Demo3D.IO.BufferSegment@,System.Int32,System.Int64,System.Int64)">
            <summary>
            Write data into server memory.
            </summary>
            <param name="buffer">The buffer containing the data to write.</param>
            <param name="addressBank">The address bank to access.</param>
            <param name="startBit">The start memory address (in bits).</param>
            <param name="lengthBits">The amount of data to write (in bits).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol">
            <summary>
            The Built-in Memory Server Protocol.
            </summary>
            <remarks>
            <para>
            Must be marked with the <see cref="T:Demo3D.Net.ProtocolAddressEditorAttribute"/> in order for NetServer to show
            this protocol in its drop-down.  NetServer only looks for protocols with this attribute.
            </para>
            <para>
            If you need additional information in the protocol address in order to identify a server, then you
            should also set <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.Editor"/> to an instance of a public class.
            Your editor class must inherit from <see cref="T:Demo3D.Net.ProtocolAddressPropertyBagEditor"/>.  Public properties
            on your editor class will be displayed in the Add Server Wizard and in the Address properties of your
            Tag Server.  See <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol"/> and <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagAddress"/> for an example.
            </para>
            <para>
            This example is based on NetServer and the <see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/>.
            See <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol"/> for an equivalent example <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection">
            <summary>
            An instance of one connection to the Built-in Memory Server.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.server">
            <summary>
            The example server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Constructs a new <see cref="T:Demo3D.Net.ProtocolInstance"/> for the Built-in Memory Server Protocol.
            </summary>
            <param name="protocol">The protocol; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="head">The protocol head; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="peerAddress">The address of the server being connected to.</param>
            <remarks>
            If your connection would benefit from user configurable properties (such as IO timeout configuration)
            then you should create a public class and pass an instance of it to the 'propertyBag' parameter of
            <see cref="M:Demo3D.Net.ProtocolInstance.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,System.Boolean,System.Object)"/>.  Public properties
            on your class will be displayed in the Connection properties of your Tag Server.
            See <see cref="T:Demo3D.PLC.Comms.Builtin.ServerConfiguration"/> and <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection"/> for an example.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.InternalRunning">
            <summary>
            Returns true if the connection has been established.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.InternalOpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Connects to the server.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="flags">Flags used when opening the connection.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.InternalClose">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#ISymbolTable#CanReadSymbols">
            <summary>
            Returns whether GetSymbolTableAsync is expected to be able to read the PLC symbol table.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#ISymbolTable#GetSymbolTableAsync(System.Boolean)">
            <summary>
            Read the symbol table from the PLC.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <returns>The browse root (or null if the symbol table can't be read).</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#AddressType">
            <summary>
            The type of address expected by this service.  The type must implement <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
            <remarks>
            <para>
            Addresses passed to our IO methods may not be exactly this type, but their
            <see cref="P:Demo3D.PLC.Comms.MemoryAddress.AddressSpace"/> will match.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#GetPreferredParameters(Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Access parameters (or null to use the defaults).
            </summary>
            <remarks>
            The endianess of the underlying memory (defaults to big endian) is used to convert memory data into useful data types, such as integers.
            The default text encoding (or null if not known or not standard), is used in order to convert memory data into text.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#PduSize">
            <summary>
            The maximum amount of data this server can access through its IO methods (or -1 to mean any amount).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#RequestOverhead">
            <summary>
            A measure in bytes of the overhead of creating a new "read" request (or -1).
            </summary>
            <remarks>
            This value is used to determine the best way of merging "read" requests.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#GetPreferredAddress(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Preferred access to the address space.
            </summary>
            <remarks>
            The server may prefer the user to access more data than addressed.  For this example, we widen
            bit-level memory accesses to the nearest byte array.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#GetRequiredAddress(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Required access to the address space.
            </summary>
            <remarks>
            Like <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.GetPreferredAddress(Demo3D.PLC.Comms.MemoryAddress)"/> except that
            it mandates how accesses to <paramref name="address"/> should be performed.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.ReadAsync(System.Boolean,Demo3D.PLC.Comms.Memory.VectoredMemoryRequest)">
            <summary>
            Reads data from the server asynchronously.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="request">The reqd request.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Returns an efficient method for reading multiple areas of memory.
            </summary>
            <param name="requests">The areas of memory to read.</param>
            <returns>
            Methods for reading the data efficiently.
            </returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.WriteAsync(System.Boolean,Demo3D.PLC.Comms.Memory.VectoredMemoryRequest)">
            <summary>
            Writes data to the server.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="request">Write request.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#IDirectMemoryAccessService#InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Returns an efficient method for writing to multiple areas of memory.
            </summary>
            <param name="requests">The areas of memory to write to.</param>
            <returns>
            Methods for writing the data efficiently.
            </returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.#ctor">
            <summary>
            Constructs the Built-in Memory Server Protocol.
            </summary>
            <remarks>
            <para>
            The name passed in to the <see cref="T:Demo3D.Net.Protocol"/> constructor will become the 'scheme' part of the
            protocol address URL.
            </para>
            <para>
            This example protocol supports one service, the <see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/>.  This service
            is used to implement a simple memory server.
            </para>
            <para>
            A memory server differs from a Tag Server (see <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol"/>) primarily in the
            way data is addressed.  A Tag Server addresses data by tag name, and tag names are explicitly defined by
            the tag server in the symbol table.  A Memory Server addresses data by memory address.  Often there's no
            symbol table, and the user can use any valid memory address to access any part of the server memory.
            </para>
            <para>
            However, some Memory servers also expose a symbol table, where each symbol is an alias for a particular
            address.  You can support this for your server (if need be) by including <see cref="T:Demo3D.PLC.Comms.ISymbolTable"/>
            in the service list and making <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection"/> implement it.
            </para>
            <para>
            Rarely a Memory server may notify when data in memory changes.  In this case you can opt to use the
            <see cref="T:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService"/> instead of <see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/>.
            Beckhoff's TwinCAT is an example, where you can subscribe to memory locations and be informed when data
            in memory at those locations changes.  See <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol"/> for an example.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.Register">
            <summary>
            Registers the protocol.  You should call this method once from your code at start-up.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.NewInstance(Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Creates a new instance of the protocol.
            </summary>
            <param name="head">A required parameter of the <see cref="T:Demo3D.Net.ProtocolInstance"/> constructor.</param>
            <param name="protocolAddress">The address of the new connection.</param>
            <returns>A new instance of the protocol.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryServer">
            <summary>
            The Built-in Memory Server.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryServer.RegisterSymbolTable(System.Action{Demo3D.Net.ProtocolSocket,Demo3D.PLC.Comms.MemorySymbolTable{Demo3D.PLC.Comms.Builtin.BuiltinMemAddress}})">
            <summary>
            Register a symbol table function.
            </summary>
            <param name="updateSymbolTable">Function to generate a symbol table.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryServer.UnregisterSymbolTable(System.Action{Demo3D.Net.ProtocolSocket,Demo3D.PLC.Comms.MemorySymbolTable{Demo3D.PLC.Comms.Builtin.BuiltinMemAddress}})">
            <summary>
            Unregister a symbol table function.
            </summary>
            <param name="updateSymbolTable">Function to generate a symbol table.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryServer.ReadSymbolTable(Demo3D.Net.ProtocolSocket)">
            <summary>
            Read the symbol table from the PLC.
            </summary>
            <param name="socket">The socket to register the symbol table with.</param>
            <returns>The browse root (or null if the symbol table can't be read).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryServer.RegisterMemoryBank(System.Int32,System.Func{System.Byte[]})">
            <summary>
            Register a function to get the memory bank.
            </summary>
            <param name="addressBank">Address bank.</param>
            <param name="getMemory">Action to return the memory.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryServer.UnregisterMemoryBank(System.Int32)">
            <summary>
            Unregister a function to get the memory bank.
            </summary>
            <param name="addressBank">Address bank.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMemoryServer.GetMemoryBank(System.Int32)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer">
            <summary>
            An example server expecting some data to be accessed by tag name, and some to be accessed by memory address.
            </summary>
            <remarks>
            Normally, you'd replace this class entirely with whatever code is required to access your server.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer.Connect">
            <summary>
            Connects to the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer.Read(Demo3D.IO.BufferSegment@,System.Int32,System.Int64,System.Int64)">
            <summary>
            Read data from server memory.
            </summary>
            <param name="buffer">The buffer to place the data in.</param>
            <param name="addressBank">The address bank to access.</param>
            <param name="startBit">The start memory address (in bits).</param>
            <param name="lengthBits">The amount of data to read (in bits).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer.Write(Demo3D.IO.BufferSegment@,System.Int32,System.Int64,System.Int64)">
            <summary>
            Write data into server memory.
            </summary>
            <param name="buffer">The buffer containing the data to write.</param>
            <param name="addressBank">The address bank to access.</param>
            <param name="startBit">The start memory address (in bits).</param>
            <param name="lengthBits">The amount of data to write (in bits).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer.ReadSymbols">
            <summary>
            Reads the symbol table from the server.
            </summary>
            <returns>The symbol table.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer.GetTag(Demo3D.PLC.Comms.Builtin.Symbol)">
            <summary>
            Returns a <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> for accessing <see cref="T:Demo3D.PLC.Comms.Builtin.Symbol"/> data.
            </summary>
            <param name="symbol">The <see cref="T:Demo3D.PLC.Comms.Builtin.Symbol"/> to access.</param>
            <returns>A <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> for accessing the <see cref="T:Demo3D.PLC.Comms.Builtin.Symbol"/>.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleCombinedServer.ReleaseTag(Demo3D.PLC.Comms.Builtin.BuiltinTag)">
            <summary>
            Called by <see cref="M:Demo3D.PLC.Comms.Builtin.BuiltinTag.Dispose"/> when the tag is no longer needed.
            </summary>
            <param name="tag">The <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> being released.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol">
            <summary>
            The Built-in Mixed Server Protocol.
            </summary>
            <remarks>
            <para>
            Must be marked with the <see cref="T:Demo3D.Net.ProtocolAddressEditorAttribute"/> in order for NetServer to show
            this protocol in its drop-down.  NetServer only looks for protocols with this attribute.
            </para>
            <para>
            This is an extension to the <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol"/> and <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol"/>
            demonstrating a protocol that requires some data to be accessed with tag names and some with memory
            addresses.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection">
            <summary>
            An instance of one connection to the Built-in Mixed Server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Constructs a new <see cref="T:Demo3D.Net.ProtocolInstance"/> for the Built-in Mixed Server Protocol.
            </summary>
            <param name="protocol">The protocol; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="head">The protocol head; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="peerAddress">The address of the server being connected to.</param>
            <remarks>
            See <see cref="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,Demo3D.PLC.Comms.Builtin.ServerConfiguration)"/>
            for an example on server configuration.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.InternalRunning">
            <summary>
            Returns true if the connection has been established.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.InternalOpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Connects to the server.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="flags">The flags used to open the connection.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.InternalClose">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.Demo3D#PLC#Comms#ISymbolTable#CanReadSymbols">
            <summary>
            Defines how to read the symbol table.  Normally we require a connection to the server
            to read the symbol table, but sometimes that's not necessary.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.Demo3D#PLC#Comms#ISymbolTable#GetSymbolTableAsync(System.Boolean)">
            <summary>
            Gets the servers symbol table.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <returns>The root symbol.</returns>
            <remarks>
            A Tag server must return a symbol table to facilitate IO.  The server should at least return symbols
            for the tags that it supports.  It may also optionally return symbols for some memory locations too.
            </remarks>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.preferredParameters">
            <summary>
            Support for access to memory in the server.
            <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection"/> for details.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.Demo3D#PLC#Comms#Tag#IDirectTagAccessService#GetSymbolTableAsync(System.Boolean)">
            <summary>
            Support for access to tags in the server.
            <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection"/> for details.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.BuiltinMixedConnection.TryCreateService(Demo3D.Net.ChannelInstance,System.Type,System.Object)">
            <summary>
            Called to return an object that supports a particular service.
            </summary>
            <param name="channelInstance">The channel on which the service is being requested.</param>
            <param name="serviceType">The type of the service being requested.</param>
            <param name="propertyBag">Configuration properties.</param>
            <returns>An object that implements <paramref name="serviceType"/>.</returns>
            <remarks>
            The default implementation of TryCreateService normally returns 'this' for services requested, but it
            doesn't have to.  You can override TryCreateService to return any object that implements a service.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.#ctor">
            <summary>
            Constructs the Built-in Mixed Server Protocol.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.Register">
            <summary>
            Registers the protocol.  You should call this method once from your code at start-up.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinMixedProtocol.NewInstance(Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Creates a new instance of the protocol.
            </summary>
            <param name="head">A required parameter of the <see cref="T:Demo3D.Net.ProtocolInstance"/> constructor.</param>
            <param name="protocolAddress">The address of the new connection.</param>
            <returns>A new instance of the protocol.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.ExampleNotifyMemoryServer">
            <summary>
            An extended Built-in Memory Server based on <see cref="T:Demo3D.PLC.Comms.Builtin.ExampleMemoryServer"/>.
            </summary>
            <remarks>
            <para>
            Normally, you'd replace this class entirely with whatever code is required to access your server.
            </para>
            <para>
            This version of the example shows how to publish when memory changes.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleNotifyMemoryServer.GetMemoryBank(System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleNotifyMemoryServer.Subscribe(Demo3D.PLC.Comms.MemoryAddress,System.Action{Demo3D.PLC.Comms.Memory.MemoryAddressChangedEventArgs})">
            <summary>
            Put in here whatever is required to subscribe to memory changes.
            </summary>
            <param name="address">The address describing the area of memory being watched.</param>
            <param name="handler">The handler to call when memory changes.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleNotifyMemoryServer.Unsubscribe(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Put in here whatever is required to unsubscribe from memory changes.
            </summary>
            <param name="address">The address describing the area of memory being watched.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleNotifyMemoryServer.PublishChanges(Demo3D.PLC.Comms.MemoryAddress,System.Byte[])">
            <summary>
            Example of raising publication events.
            </summary>
            <param name="address">The address that changed.</param>
            <param name="data">The data from the address that changed.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol">
            <summary>
            The Built-in Notify Memory Server Protocol - a memory server with memory change notification.
            </summary>
            <remarks>
            <para>
            This is an extension to <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol"/> to integrate with a server that will notify when
            subscribed areas of memory change.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.BuitinConnection">
            <summary>
            An instance of one connection to the Built-in Notify Memory Server.
            This extends the <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol.BuitinConnection"/> example to include the
            <see cref="T:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.BuitinConnection.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Constructs a new <see cref="T:Demo3D.Net.ProtocolInstance"/> for the Built-in Notify Memory Server Protocol.
            </summary>
            <param name="protocol">The protocol; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="head">The protocol head; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="peerAddress">The address of the server being connected to.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.BuitinConnection.InternalOpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.BuitinConnection.InternalClose">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#INotifyDirectMemoryAccessService#CanSubscribe">
            <summary>
            Returns true if data changes can be subscribed to.
            Return false to revert to <see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/> behaviour.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#INotifyDirectMemoryAccessService#AddDataChanged(Demo3D.PLC.Comms.MemoryAddress,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Called to subscribe to memory changed publications.
            </summary>
            <param name="address">The address describing the area of memory being watched.</param>
            <param name="handler">The handler to call when memory changes.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.BuitinConnection.Demo3D#PLC#Comms#Memory#INotifyDirectMemoryAccessService#RemoveDataChanged(Demo3D.PLC.Comms.MemoryAddress,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Called to unsubscribe from memory changed publications.
            </summary>
            <param name="address">The address describing the area of memory being watched.</param>
            <param name="handler">The handler to call when memory changes.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.#ctor">
            <summary>
            Constructs the Built-in Notify Memory Server Protocol.
            </summary>
            <remarks>
            <para>
            The name passed in to the <see cref="T:Demo3D.Net.Protocol"/> constructor will become the 'scheme' part of the
            protocol address URL.
            </para>
            <para>
            This example protocol supports one service, the <see cref="T:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService"/>.  This service
            is used to implement a memory server that can publish when sections of memory have changed.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.Register">
            <summary>
            Registers the protocol.  You should call this method once from your code at start-up.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinNotifyMemoryProtocol.NewInstance(Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Creates a new instance of the protocol.
            </summary>
            <param name="head">A required parameter of the <see cref="T:Demo3D.Net.ProtocolInstance"/> constructor.</param>
            <param name="protocolAddress">The address of the new connection.</param>
            <returns>A new instance of the protocol.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.NamespaceGroupDoc">
            <summary>
            The Demo3D.PLC.Comms.Builtin namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.NamespaceDoc">
            <summary>
            The Demo3D.PLC.Comms.Builtin namespace provides default and example protocol implementations.
            </summary>
            <example>
            <para>
            This example is based on NetServer and the <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/>.
            </para>
            <code lang="C#" source="..\PLC\PLC\Comms\Tag\Builtin\BuiltinTagProtocol.cs" region="Example" />
            </example>
            <example>
            <para>
            This example is based on NetServer and the <see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/>.
            </para>
            <code lang="C#" source="..\PLC\PLC\Comms\Memory\Builtin\BuiltinMemProtocol.cs" region="Example" />
            </example>
            <example>
            <para>
            The example is extended to implement the <see cref="T:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService"/>, which supports servers
            that can subscribe / publish memory change events.
            </para>
            <code lang="C#" source="..\PLC\PLC\Comms\Memory\Builtin\BuiltinNotifyMemProtocol.cs" region="Example" />
            </example>
            <example>
            <para>
            This example shows how to implement a protocol that accesses some data with tag names and some with memory
            accesses.
            </para>
            <code lang="C#" source="..\PLC\PLC\Comms\Memory\Builtin\BuiltinMixedProtocol.cs" region="Example" />
            </example>
            <example>
            <para>
            This example is a simple implementation of a server that behaves in an OPC style.  Unlike the previous
            examples, this is a server to which clients connect.  Demo3D allows you to bind tags with any name, and
            those tags are then exposed by the server to its clients.  Clients connect, read the tag list, and subscribe
            to data changes.
            </para>
            <code lang="C#" source="..\PLC\PLC\Comms\Tag\Builtin\BuiltinTagService.cs" region="Example" />
            </example>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.NullMemory">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.NullMemory.Name">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.Symbol">
            <summary>
            A symbol in the Built-in Tag Server symbol table.
            </summary>
            <remarks>
            <para>
            A symbol in the symbol table must implement <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/>.
            <see cref="T:Demo3D.PLC.Comms.BrowseItemBase"/> is a generic implementation of <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.Symbol.DataType">
            <summary>
            The data type of the symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.Symbol.AllowedAccess">
            <summary>
            The access allowed for this symbol.
            </summary>
            <remarks>
            Overriding this is optional (the default implementation returns Bidirectional), but
            if the address implies the access, then returning it can help the user.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.Symbol.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String,Demo3D.PLC.Comms.AccessRights,Demo3D.PLC.Comms.DataType)">
            <summary>
            Constructs a new symbol for the Built-in Tag Server.
            </summary>
            <param name="symbolTable">The symbol table.</param>
            <param name="name">The name of the symbol.</param>
            <param name="access">The access rights for the symbol.</param>
            <param name="dataType">The symbol data type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.Symbol.#ctor(Demo3D.PLC.Comms.IBrowseItem,System.String,Demo3D.PLC.Comms.AccessRights,System.Type)">
            <summary>
            Constructs a new symbol for the Built-in Tag Server.
            </summary>
            <param name="symbolTable">The symbol table.</param>
            <param name="name">The name of the symbol.</param>
            <param name="access">The access rights for the symbol.</param>
            <param name="dataType">The symbol data type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.Symbol.GetDataType(Demo3D.PLC.Comms.DataType@,System.Boolean@)">
            <summary>
            Returns the data type for this symbol.
            </summary>
            <param name="type">Returns the symbol type (or null if not known).</param>
            <param name="stronglyTyped">Return true if this type is definitive.</param>
            <remarks>
            Overriding this is optional, but it allows the symbol to dictate the tag data type.
            If the data type of a particular symbol cannot be determined, then you can return null.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTag">
            <summary>
            A tag for accessing a Built-in Tag Server symbol.
            </summary>
            <remarks>
            <para>
            Although a symbol table may expose many symbols, the user is likely to want to access only a subset.
            A Tag represents a symbol that the user actually wants to access.
            </para>
            <para>
            Some servers (eg OPC) access data through their 'symbol' object, and distinguish between 'connected'
            and 'disconnected' symbols.  Symbol and Tag are equivalent concepts in Demo3D: a Demo3D Symbol being
            the same as an OPC Symbol, and a Demo3D Tag being the same as an OPC 'connected' Symbol.
            </para>
            <para>
            The <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/> and <see cref="T:Demo3D.PLC.Comms.Tag.IDirectTagAccessService"/> use
            <see cref="T:Demo3D.PLC.Comms.Tag.DirectTag"/> to represent a tag.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTag.Value">
            <summary>
            The current value of the tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTag.#ctor(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.DataType,System.Action{Demo3D.PLC.Comms.Builtin.BuiltinTag})">
            <summary>
            Constructs a new Tag.
            </summary>
            <param name="address">The tag address.</param>
            <param name="tagType">The tag data type.</param>
            <param name="releaseTag">Action to release the tag.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTag.UpdateValue(Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify,System.Object)">
            <summary>
            Called by Server.RunSimulator to update the value of the tag.
            </summary>
            <param name="batchNotify">An object used to batch tag value updates together.</param>
            <param name="value">The new value of the tag.</param>
            <remarks>
            If your server cannot detect when tag values change, then simply don't include this method, and
            make <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection"/> implement <see cref="T:Demo3D.PLC.Comms.Tag.IDirectTagAccessService"/>
            instead of <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTag.Dispose">
            <summary>
            Called when the tag is no longer being used.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagAddress">
            <summary>
            An example class for configuring the protocol address.
            Must inherit from <see cref="T:Demo3D.Net.ProtocolAddressPropertyBagEditor"/> to use it with 
            <see cref="T:Demo3D.Net.ProtocolAddressEditorAttribute"/> as below.
            </summary>
            <remarks>
            Skip this class entirely if your protocol does not require an address.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagAddress.Host">
            <summary>
            The hostname of the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagAddress.GetAddress">
            <summary>
            Returns a ProtocolAddress that represents the address defined by this object.
            </summary>
            <returns>The protocol address according to the current setting of the editor properties.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagAddress.SetAddress(Demo3D.Net.ProtocolAddress)">
            <summary>
            Extracts protocol address properties from the ProtocolAddress given.
            </summary>
            <param name="address">The current address.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagAddress.NextProperty">
            <summary>
            Returns the next property that needs to be edited to complete the address.
            </summary>
            <returns>The name of the property, or null.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.ServerConfiguration">
            <summary>
            An example class for configuring the protocol properties.
            </summary>
            <remarks>
            Skip this class entirely if your protocol does not require configuration.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.ServerConfiguration.UpdateRate">
            <summary>
            Update rate in milliseconds.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.ServerConfiguration.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ServerConfiguration.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ServerConfiguration.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ServerConfiguration.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.ExampleTagServer">
            <summary>
            The Built-in Tag Server.
            </summary>
            <remarks>
            Normally, you'd replace this class entirely with the code required to access your server.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleTagServer.#ctor(Demo3D.PLC.Comms.Builtin.ServerConfiguration)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleTagServer.Connect">
            <summary>
            Connects to the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleTagServer.Disconnect">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleTagServer.ReadSymbols">
            <summary>
            Reads the symbol table from the server.
            </summary>
            <returns>The symbol table.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleTagServer.GetTag(Demo3D.PLC.Comms.Builtin.Symbol)">
            <summary>
            Returns a <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> for accessing <see cref="T:Demo3D.PLC.Comms.Builtin.Symbol"/> data.
            </summary>
            <param name="symbol">The <see cref="T:Demo3D.PLC.Comms.Builtin.Symbol"/> to access.</param>
            <returns>A <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> for accessing the <see cref="T:Demo3D.PLC.Comms.Builtin.Symbol"/>.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.ExampleTagServer.ReleaseTag(Demo3D.PLC.Comms.Builtin.BuiltinTag)">
            <summary>
            Called by <see cref="M:Demo3D.PLC.Comms.Builtin.BuiltinTag.Dispose"/> when the tag is no longer needed.
            </summary>
            <param name="tag">The <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> being released.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol">
            <summary>
            The Built-in Tag Server Protocol.
            </summary>
            <remarks>
            <para>
            Must be marked with the <see cref="T:Demo3D.Net.ProtocolAddressEditorAttribute"/> in order for NetServer to show
            this protocol in its drop-down.  NetServer only looks for protocols with this attribute.
            </para>
            <para>
            If you need additional information in the protocol address in order to identify a server, then you
            should also set <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.Editor"/> to an instance of a public class.
            Your editor class must inherit from <see cref="T:Demo3D.Net.ProtocolAddressPropertyBagEditor"/>.  Public properties
            on your editor class will be displayed in the Add Server Wizard and in the Address properties of your
            Tag Server.
            </para>
            <para>
            To have your protocol appear in the AddServer wizard, set the <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.ShowInAddServer"/>
            property.
            </para>
            <para>
            This example is based on NetServer and the <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/>.
            See <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol"/> for an equivalent example <see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection">
            <summary>
            An instance of one connection to the Built-in Tag Server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,Demo3D.PLC.Comms.Builtin.ServerConfiguration)">
            <summary>
            Constructs a new <see cref="T:Demo3D.Net.ProtocolInstance"/> for the Built-in Tag Server Protocol.
            </summary>
            <param name="protocol">The protocol; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="head">The protocol head; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="peerAddress">The address of the server being connected to.</param>
            <param name="configuration">Server configuration properties.</param>
            <remarks>
            <para>
            If your connection would benefit from user configurable properties (such as IO timeout configuration)
            then you should create a public class and pass an instance of it to the 'propertyBag' parameter of
            <see cref="M:Demo3D.Net.ProtocolInstance.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,System.Boolean,System.Object)"/>.  Public properties
            on your class will be displayed in the Connection properties of your Tag Server.
            </para>
            <para>
            <see cref="T:Demo3D.PLC.Comms.Builtin.ServerConfiguration"/> is an example - it's entirely optional.  You can pass null into
            <see cref="M:Demo3D.Net.ProtocolInstance.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,System.Boolean,System.Object)"/> instead.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.InternalRunning">
            <summary>
            Returns true if the connection has been established.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.InternalOpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Connects to the server.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="flags">The flags used to open the connection.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.InternalClose">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IDirectTagAccessService#GetSymbolTableAsync(System.Boolean)">
            <summary>
            Gets the servers symbol table.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <returns>The root symbol.</returns>
            <remarks>
            A Tag server must return a symbol table to facilitate IO.  By default NetServer will connect to
            the server (calls <see cref="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.InternalOpenAsync(System.Boolean,Demo3D.Net.Flags)"/>) before reading the symbols.  If you want
            more control over how the symbol table is accessed, then make <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection"/>
            implement <see cref="T:Demo3D.PLC.Comms.ISymbolTable"/>.  For example, it may be possible (and more efficient) to
            read the symbols from the server without first establishing a full connection.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IDirectTagAccessService#AddressType">
            <summary>
            Returns the .Net type of the addresses expected by this protocol.
            The type must implement <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IDirectTagAccessService#GetTagAsync(System.Boolean,Demo3D.PLC.Comms.IAddress)">
            <summary>
            Returns an object for accessing a tag in the server.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="address">The address of the tag (the symbol).</param>
            <returns>A <see cref="T:Demo3D.PLC.Comms.Tag.DirectTag"/> object for accessing the tag.</returns>
            <remarks>
            The type of <paramref name="address"/> will be the type returned by
            <see cref="P:Demo3D.PLC.Comms.Tag.IDirectTagAccessService.AddressType"/> above.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IVectoredTagService{Demo3D#PLC#Comms#Tag#DirectTag}#InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{Demo3D.PLC.Comms.Tag.DirectTag}})">
            <summary>
            Vectored read request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>Object for performing IO.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IVectoredTagService{Demo3D#PLC#Comms#Tag#DirectTag}#InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{Demo3D.PLC.Comms.Tag.DirectTag}})">
            <summary>
            Vectored write request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>An object to perform IO.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#INotifyDirectTagAccessService#CanSubscribe">
            <summary>
            Returns true if data changes can be subscribed to.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.#ctor">
            <summary>
            Constructs the Built-in Tag Server Protocol.
            </summary>
            <remarks>
            <para>
            The name passed in to the <see cref="T:Demo3D.Net.Protocol"/> constructor will become the 'scheme' part of the
            protocol address URL.
            </para>
            <para>
            This example protocol supports one service, the <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/>.  This service
            is used to implement a simple tag server, and specifically one that will notify when tag data changes.
            If your tag server does not notify when data changes, then use <see cref="T:Demo3D.PLC.Comms.Tag.IDirectTagAccessService"/>
            instead.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.Register">
            <summary>
            Registers the protocol.  You should call this method once from your code at start-up.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol.NewInstance(Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Creates a new instance of the protocol.
            </summary>
            <param name="head">A required parameter of the <see cref="T:Demo3D.Net.ProtocolInstance"/> constructor.</param>
            <param name="protocolAddress">The address of the new connection.</param>
            <returns>A new instance of the protocol.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer">
            <summary>
            Provides message passing and other utility functions for the BuiltinTagService protocol.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType">
            <summary>
            List of protocol request types.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType.Nop">
            <summary>
            No operation.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType.ListTags">
            <summary>
            List all the tags.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType.ReadValues">
            <summary>
            Read tag values.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType.WriteValues">
            <summary>
            Write tag values.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType.Subscribe">
            <summary>
            Subscribe to tag changes.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType.Publish">
            <summary>
            Publish tag value updates to the client.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType.TagListChanged">
            <summary>
            Advise the client that the tag list changed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.#ctor(System.Net.Sockets.TcpClient)">
            <summary>
            Constructs a new BuiltinTagServicePeer.
            </summary>
            <param name="client">The connected tcp client.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.#ctor">
            <summary>
            Constructs a new BuiltinTagServicePeer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.Connect(System.Net.Sockets.TcpClient)">
            <summary>
            Set up connection to the client.
            </summary>
            <param name="client">The connected tcp client.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.MarshalValue(System.IO.BinaryWriter,System.Type,System.Object)">
            <summary>
            Marshals a value into the data stream.
            </summary>
            <param name="writer">A BinaryWriter constructed on the data stream.</param>
            <param name="type">The data type of the value to write.</param>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.UnmarshalValue(System.IO.BinaryReader,System.Type)">
            <summary>
            Unmarshals a value from the data stream.
            </summary>
            <param name="reader">A BinaryReader constructed on the data stream.</param>
            <param name="type">The data type of the value to read.</param>
            <returns>The value unmarshalled.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.ReadMessageAsync">
            <summary>
            Reads a message from the stream.
            </summary>
            <returns>The message ID, protocol request type, and any message data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.WriteMessageAsync(System.UInt64,Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType,System.Byte[])">
            <summary>
            Writes a message to the stream.
            </summary>
            <param name="id">The message id.</param>
            <param name="requestType">The protocol request type.</param>
            <param name="message">The message data (or null).</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.Shutdown">
            <summary>
            Force the tcp client to shut down.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.Close">
            <summary>
            Close the data stream and tcp client.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.Dispose">
            <summary>
            Disposes the client, releasing all resources and shutting down the client connection.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.ToString">
            <summary>
            Returns a string representation of the client.
            </summary>
            <returns>A string representation of the client.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient">
            <summary>
            Exposes a tag list from the server.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData">
            <summary>
            TagData from the Demo3D server.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.AccessChanged">
            <summary>
            Occurs when the tag access is changed by the server.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.ValueUpdatedInternally">
            <summary>
            Occurs when the tag value is changed and the origin of the update was internal (from inside this application).
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.ValueUpdatedExternally">
            <summary>
            Occurs when the tag value is changed and the origin of the update was external (from the Demo3D server).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.Active">
            <summary>
            True if the tag is currently active on the server.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.Name">
            <summary>
            The tag name in the server.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.Type">
            <summary>
            The data type of the tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.#ctor(System.Int32,System.String,System.Type,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Constructs a new tag.
            </summary>
            <param name="tagId">Unique tag id.</param>
            <param name="name">The tag name.</param>
            <param name="type">The data type of the tag.</param>
            <param name="access">The tag access rights.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.GetTagID">
            <summary>
            Gets the tag ID assigned to this tag.
            </summary>
            <returns>The tag ID assigned to this tag.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.Access">
            <summary>
            The tag access rights.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.SetValue(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Called to set the tag value.
            </summary>
            <param name="value">The new tag value.</param>
            <param name="notifyExternal">True to notify an external update.</param>
            <param name="notifyInternal">True to notify an internal update.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.Value">
            <summary>
            The current tag value.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.Boolean">
            <summary>
            The current tag value as a boolean.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="e">A PropertyChangedEventArgs that contains the event data.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that has changed.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData.ToString">
            <summary>
            Returns a string representation of this tag.
            </summary>
            <returns>A string representation of this tag.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagListChangedDelegate">
            <summary>
            Represents a method that handles the <see cref="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagListChanged"/> event.
            </summary>
            <param name="client">The client that raised the event.</param>
            <param name="current">The current list of tags.</param>
            <param name="added">The tags that were added to the current list.</param>
            <param name="removed">The tags that were removed from the current list.</param>
            <param name="changed">Tags whose access has changed.</param>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagListChanged">
            <summary>
            Occurs when the tag list changes.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.ValuesUpdatedExternally">
            <summary>
            Occurs when tag values are changed and the origin of the update was external (from the Demo3D server).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.Shutdown(System.Exception)">
            <summary>
            Force a shutdown in response to an error.
            </summary>
            <param name="e">The error prompting the shutdown.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.RunClientAsync">
            <summary>
            The main loop receiving and processing messages received from the Demo3D server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.RPCAsync(Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType,System.Byte[])">
            <summary>
            Sends a message and returns the response.
            </summary>
            <param name="requestType">The message protocol request type.</param>
            <param name="requestMessage">The message data (or null).</param>
            <returns>The response data.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.WriteMessageAsync(Demo3D.PLC.Comms.Builtin.BuiltinTagServicePeer.RequestType,System.Byte[])">
            <summary>
            Sends a message for which no response is expected.
            </summary>
            <param name="requestType">The message protocol request type.</param>
            <param name="requestMessage">The message data (or null).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.Tags">
            <summary>
            The current set of tags.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.Connect(System.Net.Sockets.TcpClient)">
            <summary>
            Connect to the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.WriteTagsAsync(System.Collections.Generic.IEnumerable{System.ValueTuple{Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData,System.Object}})">
            <summary>
            Batch write tag values.
            </summary>
            <param name="tagUpdates">A list of tag updates.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.WriteTagsAsync(System.ValueTuple{Demo3D.PLC.Comms.Builtin.BuiltinTagServiceClient.TagData,System.Object}[])">
            <summary>
            Batch write tag values.
            </summary>
            <param name="tagUpdates">A list of tag updates.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol">
            <summary>
            The Built-in Tag Service Protocol.
            </summary>
            <remarks>
            <para>
            Must be marked with the <see cref="T:Demo3D.Net.ProtocolAddressEditorAttribute"/> in order for NetServer to show
            this protocol in its drop-down.  NetServer only looks for protocols with this attribute.
            </para>
            <para>
            If you need additional information in the protocol address in order to identify a server, then you
            should also set <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.Editor"/> to an instance of a public class.
            Your editor class must inherit from <see cref="T:Demo3D.Net.ProtocolAddressPropertyBagEditor"/>.  Public properties
            on your editor class will be displayed in the Add Server Wizard and in the Address properties of your
            Tag Server.
            </para>
            <para>
            To have your protocol appear in the AddServer wizard, set the <see cref="P:Demo3D.Net.ProtocolAddressEditorAttribute.ShowInAddServer"/>
            property.
            </para>
            <para>
            This example is based on NetServer and the <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/>.
            See <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol"/> for an equivalent example and definitions of the supporting classes.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService">
            <summary>
            The Built-in Tag Service.
            </summary>
            <remarks>
            This is a singleton, just one exists serving port 6735.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.Config">
            <summary>
            Singleton configuration property bag.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceTag.ValueUpdated">
            <summary>
            Occurs when the tag value is written by the model.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceTag.#ctor(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.DataType,System.Action{Demo3D.PLC.Comms.Builtin.BuiltinTag})">
            <summary>
            Constructs a new Tag.
            </summary>
            <param name="address">The tag address.</param>
            <param name="tagType">The tag data type.</param>
            <param name="releaseTag">Action to release the tag.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.GetTag(Demo3D.PLC.Comms.IAddress)">
            <summary>
            Returns a <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> for accessing an address.
            </summary>
            <param name="address">The address to access.</param>
            <returns>A <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> for accessing the address.</returns>
            <remarks>
            This server does not have a symbol table.  Instead it 'learns' the names of the tags from
            calls to this method.  The IAddress passed in will have the name of the tag and the expected
            data type.  We use this to construct our list of activeTags.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ReleaseTag(Demo3D.PLC.Comms.Builtin.BuiltinTag)">
            <summary>
            Called by <see cref="M:Demo3D.PLC.Comms.Builtin.BuiltinTag.Dispose"/> when the tag is no longer needed.
            </summary>
            <param name="tag">The <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTag"/> being released.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient">
            <summary>
            Services one client connection.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.Shutdown(System.Exception)">
            <summary>
            Forces the client socket to shutdown in response to an error.
            </summary>
            <param name="e">The error prompting the shutdown.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.NopAsync(System.UInt64)">
            <summary>
            Nop does nothing except return a response.
            Its use allows a client to turn an asynchronous protocol request into a synchronous protocol request.
            </summary>
            <param name="requestId">The clients request id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.ListTagsAsync(System.UInt64)">
            <summary>
            Lists all the tags and their meta data.
            </summary>
            <param name="requestId">The clients request id.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.ReadValuesAsync(System.UInt64,System.Byte[])">
            <summary>
            Returns the current values of a list of tags.
            </summary>
            <param name="requestId">The clients request id.</param>
            <param name="message">The list of tag id's.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.WriteValuesAsync(System.Byte[])">
            <summary>
            Updates tags with new values.
            </summary>
            <param name="message">The tag id's and values.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.SubscribeAsync(System.Byte[])">
            <summary>
            Subscribes to a list of tags.
            </summary>
            <param name="message">The id's of the tags to subscribe to.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.ServiceClientAsync">
            <summary>
            Services a single client request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.Service_OnTagListChanged">
            <summary>
            Called when a tag is added or removed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.Service_OnTagsWritten(System.Collections.Generic.IEnumerable{Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceTag})">
            <summary>
            Called when a tag value is updated.
            </summary>
            <param name="tags">Tags whose value has been updated.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.ServiceClient.RunClientAsync">
            <summary>
            The main loop receiving and processing messages received from the client.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.StopServer">
            <summary>
            Force the tcp listener to stop, and raise the OnStopServer event to shut down the clients.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.RunServerAsync">
            <summary>
            The main loop accepting new connections from new clients.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.Start">
            <summary>
            Starts the service.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService.Stop">
            <summary>
            Stops the service.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection">
            <summary>
            An instance of one connection to the Built-in Tag Service.
            </summary>
            <remarks>
            There's only one <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinTagService"/>, but
            there may be many connections from within Demo3D to the same service.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,Demo3D.PLC.Comms.Builtin.ServerConfiguration)">
            <summary>
            Constructs a new <see cref="T:Demo3D.Net.ProtocolInstance"/> for the Built-in Tag Service Protocol.
            </summary>
            <param name="protocol">The protocol; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="head">The protocol head; a required parameter of <see cref="T:Demo3D.Net.ProtocolInstance"/>.</param>
            <param name="peerAddress">The address of the server being connected to.</param>
            <param name="configuration">Server configuration properties.</param>
            <remarks>
            <para>
            If your connection would benefit from user configurable properties (such as IO timeout configuration)
            then you should create a public class and pass an instance of it to the 'propertyBag' parameter of
            <see cref="M:Demo3D.Net.ProtocolInstance.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,System.Boolean,System.Object)"/>.  Public properties
            on your class will be displayed in the Connection properties of your Tag Server.
            </para>
            <para>
            <see cref="T:Demo3D.PLC.Comms.Builtin.ServerConfiguration"/> is an example - it's entirely optional.  You can pass null into
            <see cref="M:Demo3D.Net.ProtocolInstance.#ctor(Demo3D.Net.Protocol,Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress,System.Boolean,System.Object)"/> instead.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.InternalRunning">
            <summary>
            Returns true if the connection has been established.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.InternalOpenAsync(System.Boolean,Demo3D.Net.Flags)">
            <summary>
            Connects to the server.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="flags">The flags used to open the connection.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.InternalClose">
            <summary>
            Disconnects from the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IDirectTagAccessService#GetSymbolTableAsync(System.Boolean)">
            <summary>
            Gets the servers symbol table.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <returns>The root symbol.</returns>
            <remarks>
            This server does not provide a symbol table.  Instead it 'learns' the names of the tags that
            it exposes to its clients based on the addresses passed into calls to
            <see cref="M:Demo3D.PLC.Comms.Tag.IDirectTagAccessService.GetTagAsync(System.Boolean,Demo3D.PLC.Comms.IAddress)"/>.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IDirectTagAccessService#AddressType">
            <summary>
            Returns the .Net type of the addresses expected by this protocol.
            The type must implement <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
            <remarks>
            We don't care about the address type, since we learn the symbols from calls to GetTagAsync.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IDirectTagAccessService#GetTagAsync(System.Boolean,Demo3D.PLC.Comms.IAddress)">
            <summary>
            Returns an object for accessing a tag in the server.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <param name="address">The address of the tag (the symbol).</param>
            <returns>A <see cref="T:Demo3D.PLC.Comms.Tag.DirectTag"/> object for accessing the tag.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IVectoredTagService{Demo3D#PLC#Comms#Tag#DirectTag}#InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{Demo3D.PLC.Comms.Tag.DirectTag}})">
            <summary>
            Vectored read request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>Object to implement IO.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#IVectoredTagService{Demo3D#PLC#Comms#Tag#DirectTag}#InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{Demo3D.PLC.Comms.Tag.DirectTag}})">
            <summary>
            Vectored write request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>Object to implement IO.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.BuiltinConnection.Demo3D#PLC#Comms#Tag#INotifyDirectTagAccessService#CanSubscribe">
            <summary>
            Returns true if data changes can be subscribed to.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.#ctor">
            <summary>
            Constructs the Built-in Tag Service Protocol.
            </summary>
            <remarks>
            <para>
            The name passed in to the <see cref="T:Demo3D.Net.Protocol"/> constructor will become the 'scheme' part of the
            protocol address URL.
            </para>
            <para>
            This example protocol supports one service, the <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/>.  This service
            is used to implement a simple tag service.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.Register">
            <summary>
            Registers the protocol.  You should call this method once from your code at start-up.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Builtin.BuiltinTagServiceProtocol.NewInstance(Demo3D.Net.ProtocolHead,Demo3D.Net.ProtocolAddress)">
            <summary>
            Creates a new instance of the protocol.
            </summary>
            <param name="head">A required parameter of the <see cref="T:Demo3D.Net.ProtocolInstance"/> constructor.</param>
            <param name="protocolAddress">The address of the new connection.</param>
            <returns>A new instance of the protocol.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService">
            <summary>
            PLC memory client service.
            </summary>
            <remarks>
            <para>
            This interface is intended to simplify the implementation of new memory-based protocols/connections, and not as
            a primary method of accessing the PLC.  Consider using <see cref="T:Demo3D.PLC.Comms.Memory.IMemoryService"/> instead to access memory in
            a PLC.
            </para>
            <para>
            <see cref="T:Demo3D.PLC.Comms.Memory.IMemoryService"/> has several advantages when accessing PLC memory.  By accessing memory through
            <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/> it forces the caller to be explicit
            about the addresses that are being accessed.  This allows algorithms to build in-core memory caches, and to
            implement automatic notification when memory in the PLC changes.  It also silently widens and batches memory
            read accesses to improve protocol performance.
            </para>
            <para>
            Addresses passed to this services methods need not be exactly <see cref="P:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.AddressType"/>, but their
            <see cref="P:Demo3D.PLC.Comms.MemoryAddress.AddressSpace"/> must match.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.AddressType">
            <summary>
            The type of address expected by this service.  The type must implement <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
            <remarks>
            <para>
            Addresses passed to this services IO methods need not be exactly this type, but their
            <see cref="P:Demo3D.PLC.Comms.MemoryAddress.AddressSpace"/> must match.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.PduSize">
            <summary>
            Get the PDU size (or -1).
            </summary>
            <remarks>
            This value may change since it's negotiated with the peer.  Negotiation only happens on connection
            so it won't change after the connection has been established.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.RequestOverhead">
            <summary>
            A measure in bytes of the overhead of creating a new "read" request (or -1).
            </summary>
            <remarks>
            This value is used to determine the best way of merging "read" requests.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.GetPreferredParameters(Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Parameters to be applied to accesses.
            </summary>
            <param name="address">The address being accessed.</param>
            <param name="requestedParameters">The requested access parameters.</param>
            <returns>The preferred access parameters.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.GetPreferredAddress(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Returns the preferred access to the address space.
            The underlying protocol may prefer the user to access more data than addressed.
            </summary>
            <param name="address">The address being accessed.</param>
            <returns>The preferred address to access.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.GetRequiredAddress(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Returns the required access to the address space.
            The underlying protocol may require the user to access more data than addressed.
            </summary>
            <param name="address">The address being accessed.</param>
            <returns>The required address to access.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Vectored block read to the peer.
            </summary>
            <param name="requests">List of individual read requests.</param>
            <returns>A class for executing the defined requests, or null to use Read instead.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Vectored block write to the peer.
            </summary>
            <param name="requests">List of individual write requests.</param>
            <returns>A class for executing the defined requests, or null to use Write instead.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.DirectMemoryAccessService">
            <summary>
            Extension methods for <see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.DirectMemoryAccessService.ReadV(Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Vectored read request.
            </summary>
            <param name="service">The memory service.</param>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.DirectMemoryAccessService.WriteV(Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Vectored write request.
            </summary>
            <param name="service">The memory service.</param>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.MemoryAddressChangedEventArgs">
            <summary>
            An event reporting a change in data for a particular address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAddressChangedEventArgs.MemoryAddress">
            <summary>
            Memory access originally returned when the address was added to the memory service.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAddressChangedEventArgs.AffectedArea">
            <summary>
            The memory address of the area that's changed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAddressChangedEventArgs.Buffer">
            <summary>
            The memory buffer containing the new data (for the entire access, not just the affected area).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAddressChangedEventArgs.Timestamp">
            <summary>
            Update timestamp.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAddressChangedEventArgs.#ctor(Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AddressArea,Demo3D.IO.BufferSegment@,System.DateTime)">
            <summary>
            Constructs a MemoryAccessChangedEventArgs.
            </summary>
            <param name="memoryAddress">The MemoryAccess that's raising the event.</param>
            <param name="affectedArea">The memory address of the affected area.</param>
            <param name="buffer">A buffer containing the new data (for the entire access, not just the affected area).</param>
            <param name="timestamp">Update timestamp (or default).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService">
            <summary>
            PLC memory client service for servers that can notify when memory changes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService.CanSubscribe">
            <summary>
            Returns true if data changes can be subscribed to.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService.AddDataChanged(Demo3D.PLC.Comms.MemoryAddress,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Add a handler to respond to data changed events.
            </summary>
            <param name="address">The address to subscribe to.</param>
            <param name="handler">Handler for data changed events.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService.RemoveDataChanged(Demo3D.PLC.Comms.MemoryAddress,Demo3D.Net.NotifyDataChangedEventHandler)">
            <summary>
            Remove a handler passed to AddDataChanged.
            </summary>
            <param name="address">The address to unsubscribe from.</param>
            <param name="handler">Handler for DataChanged events to remove.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.MemoryPartitioning">
            <summary>
            A description of the partitioning of PLC memory.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryPartitioning.SamePartition(Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AddressArea)">
            <summary>
            True if these areas occupy the same partition.
            False if merging these areas of memory would cross a memory boundary.
            </summary>
            <param name="addr">The first memory area.</param>
            <param name="other">The second memory area.</param>
            <returns>True if these areas occupy the same partition.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryPartitioning.CanMerge(Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AddressArea)">
            <summary>
            True if merging these two areas is not strictly prohibited (ie allowing for compatible memory parameters).
            </summary>
            <param name="addr">The first memory area.</param>
            <param name="widerArea">The second memory area.</param>
            <returns>True if merging these two areas is not strictly prohibited (ie allowing for compatible memory parameters).</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.IMemoryPartitioningService">
            <summary>
            A centralised service for recording how PLC memory should be accessed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IMemoryPartitioningService.AddArea(Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Define parameters for an area of memory.
            </summary>
            <param name="address">The area of memory affected.</param>
            <param name="parameters">The access parameters.</param>
            <returns>A handle representing this definition.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IMemoryPartitioningService.GetPartitioning">
            <summary>
            Returns the current partitioning.
            Must return the same object if nothing has changed.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.IMemoryService">
            <summary>
            Protocol service for providing access to the memory in a peer.
            </summary>
            <remarks>
            <para>
            Addresses passed to this services methods need not be exactly <see cref="P:Demo3D.PLC.Comms.Memory.IMemoryService.AddressType"/>, but their
            <see cref="P:Demo3D.PLC.Comms.MemoryAddress.AddressSpace"/> must match.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.IMemoryService.PduSize">
            <summary>
            Get the underlying PDU size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.IMemoryService.AddressType">
            <summary>
            The type of address expected by this service.  The type must implement <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
            <remarks>
            <para>
            Addresses passed to this services IO methods need not be exactly this type, but their
            <see cref="P:Demo3D.PLC.Comms.MemoryAddress.AddressSpace"/> must match.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)">
            <summary>
            Get access to an address in the memory of a peer.
            </summary>
            <param name="address">Address to access.</param>
            <param name="accessParams">Requested access.</param>
            <param name="userState">Private user data.</param>
            <returns>An object for accessing the memory in the peer.</returns>
            <remarks>Protocol need not be running.</remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IMemoryService.InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryAccess})">
            <summary>
            Vectored read request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.IMemoryService.InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryAccess})">
            <summary>
            Vectored write request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.IDirectMemoryService">
            <summary>
            Protocol service for providing direct access to the memory in a peer (bypassing any caches).
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs">
            <summary>
            An event reporting a change in data for a particular address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs.MemoryAccess">
            <summary>
            Memory access originally returned when the address was added to the memory service.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs.AffectedArea">
            <summary>
            The memory address of the area that's changed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs.Buffer">
            <summary>
            The memory buffer containing the new data (for the entire access, not just the affected area).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs.Timestamp">
            <summary>
            Update timestamp.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs.#ctor(Demo3D.PLC.Comms.Memory.MemoryAccess,Demo3D.PLC.Comms.AddressArea,Demo3D.IO.BufferSegment@,System.DateTime)">
            <summary>
            Constructs a MemoryAccessChangedEventArgs.
            </summary>
            <param name="memoryAccess">The MemoryAccess that's raising the event.</param>
            <param name="affectedArea">The memory address of the affected area.</param>
            <param name="buffer">A buffer containing the new data (for the entire access, not just the affected area).</param>
            <param name="timestamp">Update timestamp (or default).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.MemoryAccessesChangedEventArgs">
            <summary>
            An event reporting a change in data across a list of addresses.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccessesChangedEventArgs.Addresses">
            <summary>
            The list of addresses that have changed, and their new values.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccessesChangedEventArgs.#ctor(System.Collections.Generic.List{Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs})">
            <summary>
            Constructs a MemoryAccessesChangedEventArgs.
            </summary>
            <param name="addresses">MemoryAccessChangedEventArgs for each area of memory that's changed.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.INotifyMemoryService">
            <summary>
            Protocol service for providing access to the memory in a peer that will notify when the data at the address changes.
            <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> callbacks will pass <see cref="T:Demo3D.PLC.Comms.Memory.MemoryAccessesChangedEventArgs"/>.
            The <see cref="T:Demo3D.PLC.Comms.Memory.MemoryAccess"/> returned from <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/>
            implements <see cref="T:Demo3D.Net.INotifyDataChanged"/> which will pass <see cref="T:Demo3D.PLC.Comms.Memory.MemoryAccessChangedEventArgs"/>.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.MemoryService">
            <summary>
            A class containing extension methods for <see cref="T:Demo3D.PLC.Comms.Memory.IMemoryService"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryService.GetAddress(Demo3D.PLC.Comms.Memory.IMemoryService,Demo3D.Net.ProtocolSocket,System.String,Demo3D.PLC.Comms.AccessRights,System.Object)">
            <summary>
            Get access to an address in the memory of a peer.
            </summary>
            <param name="service">The memory service.</param>
            <param name="socket">The protocol socket.</param>
            <param name="address">Address to access.</param>
            <param name="access">Requested access.</param>
            <param name="userState">Private user data.</param>
            <returns>An object for accessing the memory in the peer.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryService.ReadV(Demo3D.PLC.Comms.Memory.IMemoryService,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryAccess})">
            <summary>
            Vectored read request.
            </summary>
            <param name="service">The memory service.</param>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryService.WriteV(Demo3D.PLC.Comms.Memory.IMemoryService,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryAccess})">
            <summary>
            Vectored write request.
            </summary>
            <param name="service">The memory service.</param>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.MemoryAccess">
            <summary>
            Access to PLC memory.  May implement <see cref="T:Demo3D.Net.INotifyDataChanged"/>, depending on the service.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.Address">
            <summary>
            The address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.RequestedParameters">
            <summary>
            User requested access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.PreferredParameters">
            <summary>
            Preferred access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.UserState">
            <summary>
            Private user data passed in to GetAddress.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.#ctor(Demo3D.PLC.Comms.Memory.IMemoryService,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.AccessParameters,System.Object)">
            <summary>
            Constructs a new MemoryAccess.
            </summary>
            <param name="service">The owning service.</param>
            <param name="address">The memory address being accessed.</param>
            <param name="preferredAddress">The preferred address for accessing this memory address.</param>
            <param name="requiredAddress">The required address for accessing this memory address.</param>
            <param name="requestedParameters">The access parameters the user passed when creating this access.</param>
            <param name="preferredParameters">The preferred access parameters for accessing this address.</param>
            <param name="userState">The state object passed in by the user.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.#ctor(Demo3D.PLC.Comms.Memory.IMemoryService,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.AccessParameters,System.Object)">
            <summary>
            Constructs a new MemoryAccess.
            </summary>
            <param name="service"></param>
            <param name="address">The memory address being accessed.</param>
            <param name="requestedParameters">The access parameters the user passed when creating this access.</param>
            <param name="preferredParameters">The preferred access parameters for accessing this address.</param>
            <param name="userState">The state object passed in by the user.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.AddressSpace">
            <summary>
            The memory address space.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.PreferredAddress">
            <summary>
            Preferred access to the address space.
            The underlying protocol may prefer the user to access more data than addressed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.RequiredAddress">
            <summary>
            Required access to the address space for this address.
            The underlying protocol may require the user to access more data than addressed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.MemoryAccess.AccessRights">
            <summary>
            The requested access rights.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.GetPreferredAddress(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Returns the preferred access to the address space.
            The underlying protocol may prefer the user to access more data than addressed.
            </summary>
            <param name="address">The address being accessed.</param>
            <returns>The preferred address to access.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.GetRequiredAddress(Demo3D.PLC.Comms.MemoryAddress)">
            <summary>
            Returns the required access to the address space.
            The underlying protocol may require the user to access more data than addressed.
            </summary>
            <param name="address">The address being accessed.</param>
            <returns>The required address to access.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.ReadAsync(System.Boolean,Demo3D.IO.BufferSegment,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Block read data from the peer.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="buffer">The buffer to read data into.</param>
            <param name="address">The address to read (or null).</param>
            <param name="accessParams">Access parameters for this read request (or null to use the access parameters provided to <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/>).</param>
            <param name="errorHandler">An error handler to call if an IO error is detected (or null).</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.ReadAsync(System.Boolean,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Block read data from the peer.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="accessParams">Access parameters for this read request (or null to use the access parameters provided to <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/>).</param>
            <param name="errorHandler">An error handler to call if an IO error is detected (or null).</param>
            <returns>The data read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.Read(Demo3D.IO.BufferSegment@,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Block read data from the peer.
            </summary>
            <param name="buffer">The buffer to read data into.</param>
            <param name="address">The address to read (or null).</param>
            <param name="accessParams">Access parameters for this read request (or null to use the access parameters provided to <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/>).</param>
            <param name="errorHandler">An error handler to call if an IO error is detected (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.Read(Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Block read data from the peer.
            </summary>
            <param name="accessParams">Access parameters for this read request (or null to use the access parameters provided to <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/>).</param>
            <param name="errorHandler">An error handler to call if an IO error is detected (or null).</param>
            <returns>The data read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.WriteAsync(System.Boolean,Demo3D.IO.BufferSegment,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Block write data to the peer.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="buffer">The buffer of data to write to the peer.</param>
            <param name="address">The address to write to (or null).</param>
            <param name="accessParams">Access parameters for this read request (or null to use the access parameters provided to <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/>).</param>
            <param name="errorHandler">An error handler to call if an IO error is detected (or null).</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.Write(Demo3D.IO.BufferSegment@,Demo3D.PLC.Comms.MemoryAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Block write data to the peer.
            </summary>
            <param name="buffer">The buffer of data to write to the peer.</param>
            <param name="address">The address to write to (or null).</param>
            <param name="accessParams">Access parameters for this read request (or null to use the access parameters provided to <see cref="M:Demo3D.PLC.Comms.Memory.IMemoryService.GetAddress(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,System.Object)"/>).</param>
            <param name="errorHandler">An error handler to call if an IO error is detected (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.Dispose">
            <summary>
            Called to indicate that memory access is no longer required.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.MemoryAccess.ToString">
            <summary>
            Returns a string representation of the memory access.
            </summary>
            <returns>A string representation of the memory access.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.NamespaceGroupDoc">
            <summary>
            The Demo3D.PLC.Comms.Memory namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.NamespaceDoc">
            <summary>
            The Demo3D.PLC.Comms.Memory namespace provides features to access PLCs which expose a memory-based protocol or API.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.SequentialVectoredRead">
            <summary>
            A helper class for implementing <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.SequentialVectoredRead.#ctor(Demo3D.PLC.Comms.IOAsyncDelegate{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest},System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Constructs a new SequentialVectoredRead.
            </summary>
            <param name="readAsync">Read delegate.</param>
            <param name="requests">The requests to read.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.SequentialVectoredWrite">
            <summary>
            A helper class for implementing <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.SequentialVectoredWrite.#ctor(Demo3D.PLC.Comms.IOAsyncDelegate{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest},System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Constructs a new VectoredWrite.
            </summary>
            <param name="writeAsync">Write delegate.</param>
            <param name="requests">The requests to write.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.VectoredBitIO">
            <summary>
            A helper class for implementing <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>
            and <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>.
            Specifically for helping to organize multiple bit and word accesses into vectored requests.
            </summary>
            <remarks>
            <para>
            This class will call <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.NewPacketSender"/> first, and then a sequence of <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.AccessBit(System.Object,Demo3D.PLC.Comms.IAddressSpace,System.Int32,System.Int32,System.Boolean@)"/>
            and <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.AccessWords(System.Object,Demo3D.PLC.Comms.IAddressSpace,System.Int32,System.Byte[],System.Int32,System.Int32)"/> adding bit and word access requests to the packet until
            the packet contains <see cref="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.MaxBytes"/> of data, or until it contains <see cref="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.MaxRequests"/> requests.  Then it calls
            <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.FlushPacketAsync(System.Boolean,System.Object,System.Int32,System.Int32)"/> to send the packet.  It repeats this sequence until all the requests have been executed.
            </para>
            <para>
            Each call to <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.AccessBit(System.Object,Demo3D.PLC.Comms.IAddressSpace,System.Int32,System.Int32,System.Boolean@)"/> and <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.AccessWords(System.Object,Demo3D.PLC.Comms.IAddressSpace,System.Int32,System.Byte[],System.Int32,System.Int32)"/>
            is preceded by a call to <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.BitToBufferLength"/> and <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.WordsToBufferLength(System.Int32)"/> to determine how much space in
            the packet the next access will require.  Either call can return 0 to indicate that the access can't be accomodated in the packet.
            </para>
            <para>
            The underlying service may not be able to accomodate some requests.  Eg a single request that exceeds <see cref="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.MaxBytes"/>, or a bit
            request that's not supported by the underlying protocol (<see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.BitToBufferLength"/> returns 0).  In these cases this class will call
            the underlying IODelegate instead.
            </para>
            <para>
            This class automatically distinguishes between bit and word accesses.  Using <see cref="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.WordBits"/> (which determines the size of a word
            in bits), any request that accesses bits that do not align exactly on a word boundary are considered bit accesses.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.IsRead">
            <summary>
            True if performing read requests.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.MaxBytes">
            <summary>
            Sets the maximum number of bytes to send in each packet (headers and data).
            Defaults to the underlying <see cref="P:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.PduSize"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.MaxRequests">
            <summary>
            Sets the maximum number of requests to send in each packet.  Defaults to unlimited.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.WordBits">
            <summary>
            Sets the number of bits in a word.  Defaults to 8.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.IOAsync">
            <summary>
            The IO delegate.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.#ctor(System.Int32,System.Boolean,Demo3D.PLC.Comms.IOAsyncDelegate{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Contructs a new VectoredIO.
            </summary>
            <param name="pduSize">Maximum IO bytes.</param>
            <param name="isRead">True if performing read requests.</param>
            <param name="ioAsync">IO function.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.NewPacketSender">
            <summary>
            Constructs a new packet for sending vectored requests.
            </summary>
            <returns>An object for sending vectored requests.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.WordsToBufferLength(System.Int32)">
            <summary>
            The number of bytes in the packet consumed by an access to a given number of words.
            Defaults to the size in bytes of the number of words given.
            </summary>
            <param name="numWords">Number of words to access.</param>
            <returns>Number of bytes in the packet consumed by the given number of words.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.BitToBufferLength">
            <summary>
            The number of bytes in the packet consumed by one bit access.  Default 1 byte.
            </summary>
            <returns>Number of bytes in the packet consumed by one bit.</returns>
            <remarks>
            Return 0 for protocols that cannot include bit data in vectored IO.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.AccessWords(System.Object,Demo3D.PLC.Comms.IAddressSpace,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds a request to the packet to access a given number of words.
            </summary>
            <param name="packetSender">A packet sender object returned from <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.NewPacketSender"/>.</param>
            <param name="addressSpace">The request address space.</param>
            <param name="wordIndex">Index of the words to access.</param>
            <param name="buffer">The buffer containing the words to access.</param>
            <param name="bufferOffsetBytes">Offset int <paramref name="buffer"/> of the words to access.</param>
            <param name="numWords">The number of words to access.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.AccessBit(System.Object,Demo3D.PLC.Comms.IAddressSpace,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Adds a request to the packet to access a single bit.
            Called if <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.BitToBufferLength"/> returns a positive number.
            </summary>
            <param name="packetSender">A packet sender object returned from <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.NewPacketSender"/>.</param>
            <param name="addressSpace">The request address space.</param>
            <param name="wordIndex">Word index of the bit to access.</param>
            <param name="bitIndex">Bit index into the word of the bit to access.</param>
            <param name="value">The value of the bit to access.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.FlushPacketAsync(System.Boolean,System.Object,System.Int32,System.Int32)">
            <summary>
            Completes and sends a vectored request.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="packetSender">A packet sender object returned from <see cref="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.NewPacketSender"/>.</param>
            <param name="numRequests">The number of requests in the packet.</param>
            <param name="numBytes">The number of bytes in the packet.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.Start">
            <summary>
            Notifies that IO is starting.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.Complete">
            <summary>
            Notifies that IO is finished.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.FlushAsync(System.Boolean)">
            <summary>
            Flush final packet.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.ExecuteRequestAsync(System.Boolean,Demo3D.PLC.Comms.Memory.VectoredMemoryRequest)">
            <summary>
            Execute a single vectored request.
            </summary>
            <param name="sync">If true, guarantees that the Task return is complete.</param>
            <param name="request">The request.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.VectoredBitIO.VectoredIO">
            <summary>
            A helper class for implementing <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>
            and <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>.
            Specifically for helping to organize multiple bit and word accesses into vectored requests.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredBitIO.VectoredIO.Requests">
            <summary>
            The IO requests.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.VectoredIO.#ctor(Demo3D.PLC.Comms.Memory.VectoredBitIO,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Contructs a new VectoredIO.
            </summary>
            <param name="vectoredBitIO">Vectored bit IO.</param>
            <param name="requests">The requests to be sent.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.VectoredIO.ExecuteAsync(System.Boolean)">
            <summary>
            Executes a vectored request.
            </summary>    
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredBitIO.ExecuteRequests(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})">
            <summary>
            Implements <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>
            and <see cref="M:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService.InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Memory.VectoredMemoryRequest})"/>.
            </summary>
            <param name="requests">The requests.</param>
            <returns>A vector of requests which can be executed multiple times.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.VectoredMemoryAccess">
            <summary>
            A vectored memory access.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredMemoryAccess.MemoryAccess">
            <summary>
            The subject of the data request.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredMemoryAccess.#ctor(Demo3D.PLC.Comms.Memory.MemoryAccess,Demo3D.PLC.Comms.MemoryAddress,Demo3D.IO.BufferSegment@,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Creates a new vectored IO request.
            </summary>
            <param name="memoryAccess">The subject of the IO request.</param>
            <param name="ioAddress">The address being accessed.</param>
            <param name="ioBuffer">The associated buffer to use.</param>
            <param name="accessParams">Access parameters (or null).</param>
            <param name="errorHandler">Callback for transient IO error (or null).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Memory.VectoredMemoryRequest">
            <summary>
            A vectored memory request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredMemoryRequest.MemAddress">
            <summary>
            The memory address being accessed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Memory.VectoredMemoryRequest.Buffer">
            <summary>
            The associated data buffer to use.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredMemoryRequest.#ctor(Demo3D.PLC.Comms.MemoryAddress,Demo3D.IO.BufferSegment@,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Creates a new vectored IO request.
            </summary>
            <param name="address">The memory address being accessed.</param>
            <param name="buffer">The associated buffer to use.</param>
            <param name="accessParams">Access parameters (or null).</param>
            <param name="errorHandler">Callback for transient IO error (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Memory.VectoredMemoryRequest.ToString">
            <summary>
            Returns a string representation of the current vectored memory request.
            </summary>
            <returns>A string representation of the current vectored memory request.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.MessageContextBase">
            <summary>
            Optional information about a request received.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MessageContextBase.ServerConnectionClosed">
            <summary>
            A class that will raise an event when the TCP/IP server connection closes (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MessageContextBase.Logger">
            <summary>
            An object for logging messages.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.MessageContextBase.#ctor(Demo3D.PLC.Comms.IConnectionClosed,Demo3D.Common.IComponentLogger)">
            <summary>
            Constructs a MessageContext.
            </summary>
            <param name="serverConnectionClosed">A class that will raise an event when the TCP/IP server connection closes (or null).</param>
            <param name="logger">An object for logging messages.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.MetaPropertyDescriptor">
            <summary>
            Description of a non-standard property.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MetaPropertyDescriptor.PropertyName">
            <summary>
            The name of the property.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MetaPropertyDescriptor.Private">
            <summary>
            Property is private.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.MetaPropertyDescriptor.#ctor(System.String)">
            <summary>
            Constructs a new property.
            </summary>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.MetaPropertyDescriptor.Equals(Demo3D.PLC.Comms.MetaPropertyDescriptor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MetaPropertyDescriptor.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MetaPropertyDescriptor.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.MetaPropertyDescriptor.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.MetaPropertyDatabase">
            <summary>
            Database of non-standard properties.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.MetaPropertyDatabase.NewProperty">
            <summary>
            Raised when a new non-standard property is created;
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MetaPropertyDatabase.AllProperties">
            <summary>
            A list of property descriptors for all the non-standard properties.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.MetaPropertyDatabase.CreateProperty(Demo3D.PLC.Comms.MetaPropertyDescriptor)">
            <summary>
            Creates and returns the property descriptor for a non-standard property.
            </summary>
            <param name="property">The property to create.</param>
            <returns>The property.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.MetaProperties">
            <summary>
            Non-standard properties.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MetaProperties.Database">
            <summary>
            Database of supported properties.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.MetaProperties.#ctor(Demo3D.PLC.Comms.MetaPropertyDatabase)">
            <summary>
            Construct meta properties container.
            </summary>
            <param name="database">Property database (or null).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.MetaProperties.Properties">
            <summary>
            All properties.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.MetaProperties.Item(Demo3D.PLC.Comms.MetaPropertyDescriptor)">
            <summary>
            Access property by property descriptor.
            </summary>
            <param name="property">The property to access.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.NamespaceGroupDoc">
            <summary>
            The Demo3D.PLC.Comms namespaces provides PLC (and other server) connectivity.
            </summary>
            <remarks>
            <para>
            PLC connectivity is broadly split into two types.
            </para>
            <para>
            <list type="definition">
            <item>
              <term>Tag</term>
              <description>
              Tag-based servers expose PLC data points as explicit tags.  They tend first to expose their symbol table
              detailing all the tags that the client can access, and then offer some API or protocol for the client to
              access tags.  Examples include EtherNet/IP CIP Class 3, OPC (UA and DA), and BR Automation PVI.
              </description>
            </item>
            <item>
              <term>Memory</term>
              <description>
              Memory-based servers expose raw PLC memory, allowing the client (Demo3D) to read and write bytes of data
              direct to/from the memory in the PLC.  Examples include Modbus, Siemens S7 Functions, and Beckhoff TwinCAT ADS.
              These servers may also expose a symbol table, the the symbols in the table are just a mapping from symbol
              name to memory address, and the underlying access is still direct to memory in the PLC.
              </description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.NamespaceDoc">
             <summary>
             The Demo3D.PLC.Comms namespace provides a set of built-in Demo3D communication protocols.
             </summary>
             <remarks>
             <para>
             Support for server connectivity is broadly split between Tag and Memory servers; reflecting the primary
             concepts that the server exposes for accessing its data.
             </para>
             <para>
             <list type="definition">
             <item>
               <term>Tag</term>
               <description>
               <para>
               Tag-based servers expose PLC data-points as explicit tags.  They tend first to expose their symbol table
               detailing all the tags that the client can access, and then offer some API or protocol for the client to
               access tags.  Examples include EtherNet/IP CIP Class 3, OPC (UA and DA), and BR Automation PVI.
               </para>
               <para>
               See <see cref="N:Demo3D.PLC.Comms.Builtin"/> for an example implementation of a tag server.
               </para>
               </description>
             </item>
             <item>
               <term>Memory</term>
               <description>
               <para>
               Memory-based servers expose raw PLC memory, allowing the client (Demo3D) to read and write bytes of data
               direct to/from the memory in the PLC.  Examples include Modbus, Siemens S7 Functions, and Beckhoff TwinCAT ADS.
               These servers may also expose a symbol table, where the symbols in the table are just a mapping from symbol
               name to memory address, and the underlying access is still directly to memory in the PLC.
               </para>
               <para>
               See <see cref="N:Demo3D.PLC.Comms.Builtin"/> for an example implementation of a memory server.
               </para>
               </description>
             </item>
             </list>
             </para>
             <para>
             List of services:
             </para>
             <para>
             <list type="table">
             <listheader>
               <term>Access</term>
               <term>Interface</term>
               <term>Description</term>
             </listheader>
             
             <item>
               <description>Common</description>
               <description><see cref="T:Demo3D.PLC.Comms.IAddressTranslatorService"/></description>
               <description>A service for translating one address to another.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.ISymbolTable"/></description>
               <description>Provides access to a symbol table.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.INotifySymbolTable"/></description>
               <description>Provides access to a symbol table, and notifies when the symbol table changes.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.ISynchronizedIOService"/></description>
               <description>Controls when IO occurs.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.IOffloadingService"/></description>
               <description>A protocol that agrees to offload write requests..</description>
             </item>
            
             <item>
               <description>Direct Tag</description>
               <description><see cref="T:Demo3D.PLC.Comms.Tag.IDirectTagAccessService"/></description>
               <description>Simplified tag client interface.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/></description>
               <description>Simplified tag client interface for a peer that will notify when tag values change.</description>
             </item>
            
             <item>
               <description>Tag</description>
               <description><see cref="T:Demo3D.PLC.Comms.Tag.ITagService"/></description>
               <description>Provides tag access to the peer.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.Tag.IDirectTagService"/></description>
               <description>Provides direct tag access to the peer, bypassing any caches.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.Tag.INotifyTagService"/></description>
               <description>Provided cached access to tags in a peer that will notify when tag values change.</description>
             </item>
             
             <item>
               <description>Direct Memory</description>
               <description><see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryAccessService"/></description>
               <description>Simplified memory client interface.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.Memory.INotifyDirectMemoryAccessService"/></description>
               <description>Simplified memory client interface to a peer that will notify when memory changes.</description>
             </item>
             
             <item>
               <description>Memory</description>
               <description><see cref="T:Demo3D.PLC.Comms.Memory.IMemoryService"/></description>
               <description>Provides access to memory in the peer.</description>
             </item>
             <item>
               <description>Memory</description>
               <description><see cref="T:Demo3D.PLC.Comms.Memory.IMemoryPartitioningService"/></description>
               <description>Controls access to memory in the peer.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.Memory.IDirectMemoryService"/></description>
               <description>Provides direct access to memory in the peer, bypassing any caches.</description>
             </item>
             <item>
               <description></description>
               <description><see cref="T:Demo3D.PLC.Comms.Memory.INotifyMemoryService"/></description>
               <description>Provides access to the memory in a peer that will notify when the data at the address changes.</description>
             </item>
             </list>
             </para>
             </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.PlcFlags">
            <summary>
            Flags specific to PLC connections.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.PlcFlags.Detect">
            <summary>
            Advises that this connection will be used just to detect a peer.  Requires <see cref="F:Demo3D.Net.SocketFlags.Exclusive"/>.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Comms.PlcFlags.GetSymbolTable">
            <summary>
            Advises that this connection will be used just to read the symbol table.  Requires <see cref="F:Demo3D.Net.SocketFlags.Exclusive"/>.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.PlcFlagsExtensions">
            <summary>
            Extension methods for <see cref="T:Demo3D.PLC.Comms.PlcFlags"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.PlcFlagsExtensions.Detect(Demo3D.PLC.Comms.PlcFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.PLC.Comms.PlcFlags.Detect"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.PLC.Comms.PlcFlags.Detect"/> flag is set.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.PlcFlagsExtensions.GetSymbolTable(Demo3D.PLC.Comms.PlcFlags)">
            <summary>
            Returns true if the <see cref="F:Demo3D.PLC.Comms.PlcFlags.GetSymbolTable"/> flag is set.
            </summary>
            <param name="flags">Flags to test.</param>
            <returns>True if the <see cref="F:Demo3D.PLC.Comms.PlcFlags.GetSymbolTable"/> flag is set.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.RTTTracker">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.SequentialVectoredRead`1">
            <summary>
            A helper class for implementing ReadV.
            </summary>
            <typeparam name="T">Type of VectoredRequest.</typeparam>
        </member>
        <member name="M:Demo3D.PLC.Comms.SequentialVectoredRead`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Constructs a new SequentialVectoredRead.
            </summary>
            <param name="requests">The requests to read.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.SequentialVectoredRead`1.#ctor(Demo3D.PLC.Comms.IOAsyncDelegate{`0},System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Constructs a new SequentialVectoredRead.
            </summary>
            <param name="readAsync">Read delegate.</param>
            <param name="requests">The requests to read.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.SequentialVectoredRead`1.ExecuteAsync(System.Boolean)">
            <summary>
            Executes a vectored request.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.SequentialVectoredWrite`1">
            <summary>
            A helper class for implementing WriteV.
            </summary>
            <typeparam name="T">Type of VectoredRequest.</typeparam>
        </member>
        <member name="M:Demo3D.PLC.Comms.SequentialVectoredWrite`1.#ctor(System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Constructs a new VectoredWrite.
            </summary>
            <param name="requests">The requests to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.SequentialVectoredWrite`1.#ctor(Demo3D.PLC.Comms.IOAsyncDelegate{`0},System.Collections.Generic.IReadOnlyList{`0})">
            <summary>
            Constructs a new VectoredWrite.
            </summary>
            <param name="writeAsync">Write delegate.</param>
            <param name="requests">The requests to write.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.SequentialVectoredWrite`1.ExecuteAsync(System.Boolean)">
            <summary>
            Executes a vectored request.
            </summary>    
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.DirectTag">
            <summary>
            Access to a PLC tag.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.DirectTag.BatchNotifyDelegate">
            <summary>
            Action to call when a tg changes.
            </summary>
            <param name="batchNotify">Batch notify.</param>
            <param name="dataValue">The data value.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.DirectTag.AccessHandle">
            <summary>
            Handle for identifying access to a tag.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.#ctor(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.Tag.TagConversion)">
            <summary>
            Constructs a new tag.
            </summary>
            <param name="address">The tag address.</param>
            <param name="dataConversion">The tag and IO data types and conversion contexts.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.#ctor(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.DataType)">
            <summary>
            Constructs a new tag.
            </summary>
            <param name="address">The tag address.</param>
            <param name="tagType">The tag data type.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.#ctor(Demo3D.PLC.Comms.IAddress,System.Type)">
            <summary>
            Constructs a new tag.
            </summary>
            <param name="address">The tag address.</param>
            <param name="tagType">The tag data type.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.DirectTag.RequestedParameters">
            <summary>
            User requested access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.DirectTag.PreferredParameters">
            <summary>
            Preferred access parameters.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify">
            <summary>
            An object for batching data changed notifications.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify.UserState">
            <summary>
            User state.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify.#ctor">
            <summary>
            Constructs a new BatchNotify object.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify.Add(System.Action)">
            <summary>
            An action to perform when disposed.
            </summary>
            <param name="action">Action to perform when disposed.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify.Dispose">
            <summary>
            Executes the queued notification events.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyDataChanged(Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify,Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Notify that the tag value has changed.
            </summary>
            <param name="batchNotify">An object for batching tag data change notifications together.</param>
            <param name="value">The new tag value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyDataChanged(Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify,System.Object)">
            <summary>
            Notify that the tag value has changed.
            </summary>
            <param name="batchNotify">An object for batching tag data change notifications together.</param>
            <param name="value">The new tag value.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyDataChanged(System.Object)">
            <summary>
            Notify that the tag value has changed.
            </summary>
            <param name="value">The new tag value.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.ConvertTypeUpstream(Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.ConvertTypeDownstream(Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="E:Demo3D.PLC.Comms.Tag.DirectTag.RequestedParametersChangedAsync">
            <summary>
            Occurs when the requested parameters have changed.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Tag.DirectTag.PreferredParametersChangedAsync">
            <summary>
            Occurs when the preferred parameters have changed.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Tag.DirectTag.FirstSubscribed">
            <summary>
            Occurs when a tag access <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> event is subscribed.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Tag.DirectTag.LastUnsubscribed">
            <summary>
            Occurs when a tag access <see cref="E:Demo3D.Net.INotifyDataChanged.DataChanged"/> event is unsubscribed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyRequestedParametersChangedAsync(System.Boolean,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.Tag.DirectTag.RequestedParametersChangedAsync"/> event.
            </summary>
            <param name="sync">If true the Task retured is guaranteed to be complete.</param>
            <param name="accessParameters">The updated access parameters.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyPreferredParametersChangedAsync(System.Boolean,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.Tag.DirectTag.PreferredParametersChangedAsync"/> event.
            </summary>
            <param name="sync">If true the Task retured is guaranteed to be complete.</param>
            <param name="accessParameters">The updated access parameters.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyFirstSubscribed">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.Tag.DirectTag.FirstSubscribed"/> event.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyLastUnsubscribed">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.Tag.DirectTag.LastUnsubscribed"/> event.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.GetPreferredParameters(Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Parameters to be applied to accesses.
            </summary>
            <param name="requestedParameters">The requested parameters.</param>
            <returns>The preferred access parameters.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.AddAccessAsync(System.Boolean,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.Tag.DirectTag.BatchNotifyDelegate)">
            <summary>
            Links an access to this tag.
            </summary>
            <param name="sync">If true the Task retured is guaranteed to be complete.</param>
            <param name="requestedParameters">Access parameters for the access being added.</param>
            <param name="notify">Action to call to notify when the tag value changes, or null. (Called with locks held.)</param>
            <returns>A handle that can be passed to <see cref="M:Demo3D.PLC.Comms.Tag.DirectTag.RemoveAccess(Demo3D.PLC.Comms.Tag.DirectTag.AccessHandle)"/>.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.RemoveAccess(Demo3D.PLC.Comms.Tag.DirectTag.AccessHandle)">
            <summary>
            Unlinks an access from this tag.
            </summary>
            <param name="accessHandle">The <see cref="T:Demo3D.PLC.Comms.Tag.DirectTag.AccessHandle"/> returned from AddAccess."/>.</param>
            <returns>True if access was removed.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.DirectTag.Dispose">
            <summary>
            Disposes the tag.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.IDirectTagAccessService">
            <summary>
            PLC tag client service for clients that do not notify when tag data changes.
            </summary>
            <remarks>
            <para>
            This interface is intended to simplify the implementation of new tag-based protocols/connections, and not as
            a primary method of accessing the PLC.  Consider using <see cref="T:Demo3D.PLC.Comms.Tag.ITagService"/> instead to access tags in
            a PLC.
            </para>
            <para>
            This service is for clients that do not notify when tag data changes.  If your client does notify you when
            data changes, then use <see cref="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService"/> instead.
            </para>
            <para>
            You can optionally implement <see cref="T:Demo3D.PLC.Comms.ISymbolTable"/> and/or <see cref="T:Demo3D.PLC.Comms.INotifySymbolTable"/> if
            you want more control over the symbol table.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.IDirectTagAccessService.GetSymbolTableAsync(System.Boolean)">
            <summary>
            Read the symbol table from the PLC.
            </summary>
            <param name="sync">If true, the Task returned must be guaranteed to be complete.</param>
            <returns>The browse root (or null if the symbol table can't be read).</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.IDirectTagAccessService.AddressType">
            <summary>
            The type of address expected by this service.  The type returned must implement <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.IDirectTagAccessService.GetTagAsync(System.Boolean,Demo3D.PLC.Comms.IAddress)">
            <summary>
            Get access to a tag from a peer.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Tag address.  (Will be of type <see cref="P:Demo3D.PLC.Comms.Tag.IDirectTagAccessService.AddressType"/>.)</param>
            <returns>An object for accessing the tag in the PLC.</returns>
            <remarks>Protocol must be running.</remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService">
            <summary>
            PLC tag client service for clients that do notify when tag data changes.
            </summary>
            <remarks>
            <para>
            This interface is intended to simplify the implementation of new tag-based protocols/connections, and not as a primary
            method of accessing the PLC.  Consider using <see cref="T:Demo3D.PLC.Comms.Tag.INotifyTagService"/> instead to access tags in a PLC.
            </para>
            -<para>
            This service is for clients that do notify when tag data changes using the <see cref="M:Demo3D.PLC.Comms.Tag.DirectTag.NotifyDataChanged(System.Object)"/>
            methods.  If your client does not notify you when data changes, then use <see cref="T:Demo3D.PLC.Comms.Tag.IDirectTagAccessService"/> instead.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.INotifyDirectTagAccessService.CanSubscribe">
            <summary>
            Returns true if data changes can be subscribed to.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.ITagService">
            <summary>
            Protocol service for providing access to the tag data in the peer.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.ITagService.AddressType">
            <summary>
            The type of address expected by this service.  The type must implement <see cref="T:Demo3D.PLC.Comms.IAddress"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.ITagService.GetTagAsync(System.Boolean,Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.DataType,System.Object)">
            <summary>
            Get access to a tag from a peer.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Tag address.</param>
            <param name="accessParams">Requested access.</param>
            <param name="accessType">The data type of the tag.</param>
            <param name="userState">Private user data (or null).</param>
            <returns>An object for accessing the tag in the PLC.</returns>
            <remarks>Protocol must be running.</remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.IDirectTagService">
            <summary>
            Protocol service for providing access to the tag data in the peer (bypassing any caches).
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.INotifyTagService">
            <summary>
            Protocol service for providing cached access to tags in a peer that will notify when a tag value changes.
            INotifyTagService.DataChanged callbacks will pass <see cref="T:Demo3D.PLC.Comms.Tag.TagValuesChangedEventArgs"/>.
            The TagAccess returned from INotifyTagService.GetTag implements INotifyDataChanged which will pass <see cref="T:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs"/>.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.TagServiceExtensions">
            <summary>
            A class containing extension methods for <see cref="T:Demo3D.PLC.Comms.Tag.ITagService"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagServiceExtensions.GetTagAsync(Demo3D.PLC.Comms.Tag.ITagService,System.Boolean,Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessRights,Demo3D.PLC.Comms.DataType,System.Object)">
            <summary>
            Get access to a tag from a peer.
            </summary>
            <param name="service">The tag service.</param>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">Tag to access.</param>
            <param name="access">Requested access.</param>
            <param name="accessType">The data type of the tag.</param>
            <param name="userState">Private user data.</param>
            <returns>An object for accessing the tag.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagServiceExtensions.GetTagAsync(Demo3D.PLC.Comms.Tag.ITagService,System.Boolean,Demo3D.Net.ProtocolSocket,System.String,Demo3D.PLC.Comms.AccessRights,Demo3D.PLC.Comms.DataType,System.Object)">
            <summary>
            Get access to a tag from a peer.
            </summary>
            <param name="service">The tag service.</param>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="socket">The protocol socket.</param>
            <param name="address">Tag to access.</param>
            <param name="access">Requested access.</param>
            <param name="accessType">The data type of the tag.</param>
            <param name="userState">Private user data (or null).</param>
            <returns>An object for accessing the tag.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.IVectoredTagService`1">
            <summary>
            Protocol service for providing vectored access to the tag data in the peer.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.IVectoredTagService`1.InternalReadV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{`0}})">
            <summary>
            Vectored read request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests, or null to use Read/ReadAsync instead.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.IVectoredTagService`1.InternalWriteV(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{`0}})">
            <summary>
            Vectored write request.
            </summary>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests, or null to use Write instead.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.BeforeHandler">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.SuccessHandler">
            <exclude /> 
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.BeforeRequest(Demo3D.PLC.Comms.Tag.VectoredTagRequest{`0},Demo3D.PLC.Comms.Tag.VectoredTagRequest{`1})">
            <summary>
            Derived class should copy data downstream.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.SuccessRequest(Demo3D.PLC.Comms.Tag.VectoredTagRequest{`0},Demo3D.PLC.Comms.Tag.VectoredTagRequest{`1})">
            <summary>
            Derived class should copy data upstream.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.ConvertRequest(Demo3D.PLC.Comms.Tag.VectoredTagRequest{`0},Demo3D.PLC.Comms.Tag.VectoredTagRequest{`1})">
            <summary>
            Derived class should construct downstream requests from the upstream request.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.ConvertRequests(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{`0}})">
            <summary>
            Use this if your derived class overrides <see cref="M:Demo3D.PLC.Comms.Tag.VectoredTagHelper`2.BeforeRequest(Demo3D.PLC.Comms.Tag.VectoredTagRequest{`0},Demo3D.PLC.Comms.Tag.VectoredTagRequest{`1})"/>.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.VectoredTagServiceExtensions">
            <summary>
            A class containing extension methods for <see cref="T:Demo3D.PLC.Comms.Tag.IVectoredTagService`1"/>.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagServiceExtensions.ReadV``1(Demo3D.PLC.Comms.Tag.IVectoredTagService{``0},System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{``0}})">
            <summary>
            Vectored read request.
            </summary>
            <param name="service">The tag service.</param>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagServiceExtensions.WriteV``1(Demo3D.PLC.Comms.Tag.IVectoredTagService{``0},System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{``0}})">
            <summary>
            Vectored write request.
            </summary>
            <param name="service">The tag service.</param>
            <param name="requests">List of requests.</param>
            <returns>A class for executing the defined requests.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.MultipleChannelTagService">
            <summary>
            Creates one INotifyTagService from multiple INotifyTagService channels of data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.MultipleChannelTagService.#ctor(Demo3D.Net.ProtocolInstance,System.Func{System.Type},System.Func{Demo3D.PLC.Comms.IAddress,System.Object})">
            <summary>
            Constructs a MultipleChannelTagService.
            </summary>
            <param name="socket">The protocol socket.</param>
            <param name="addressType">A function to return the address type for accessing tags.</param>
            <param name="addressToKey">A function for determining the channel service key for a particular address.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.MultipleChannelTagService.#ctor(Demo3D.Net.ProtocolInstance,System.Type,System.Func{Demo3D.PLC.Comms.IAddress,System.Object})">
            <summary>
            Constructs a MultipleChannelTagService.
            </summary>
            <param name="socket">The protocol socket.</param>
            <param name="addressType">The address type for accessing tags.</param>
            <param name="addressToKey">A function for determining the channel service key for a particular address.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.MultipleChannelTagService.#ctor(Demo3D.Net.ProtocolInstance,System.Type,System.Collections.Generic.IEnumerable{System.ValueTuple{System.Type,System.String}})">
            <summary>
            Constructs a MultipleChannelTagService.
            </summary>
            <param name="socket">The protocol socket.</param>
            <param name="addressType">The address type for accessing tags.</param>
            <param name="definitions">
            A list of address-type to channel-name pairs.
            Requests for an address of a specific type are routed to the named channel.
            </param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.MultipleChannelTagService.#ctor(Demo3D.Net.ProtocolInstance,System.Type,System.ValueTuple{System.Type,System.String}[])">
            <summary>
            Constructs a MultipleChannelTagService.
            </summary>
            <param name="socket">The protocol socket.</param>
            <param name="addressType">The address type for accessing tags.</param>
            <param name="definitions">
            A list of address-type to channel-name pairs.
            Requests for an address of a specific type are routed to the named channel.
            </param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.MultipleChannelTagService.AddService(System.Object,Demo3D.PLC.Comms.Tag.INotifyTagService)">
            <summary>
            Register a new channel service.
            </summary>
            <param name="serviceKey">The channel service key.</param>
            <param name="service">The channel service.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NamespaceGroupDoc">
            <summary>
            The Demo3D.PLC.Comms.Tag namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NamespaceDoc">
            <summary>
            The Demo3D.PLC.Comms.Tag namespace provides features to access PLCs which expose a tag-based protocol or API.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess">
            <summary>
            Base class for <see cref="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3"/>.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters">
            <summary>
            The pertinent parameters of a subscription.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters.AccessRights">
            <summary>
            The subscription IO access.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters.PublishingInterval">
            <summary>
            The scheduled data publishing interval.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters.#ctor(Demo3D.PLC.Comms.AccessRights,Demo3D.Time.ModelTime)">
            <summary>
            Constructs new subscription parameters.
            </summary>
            <param name="accessRights">The subscription IO access.</param>
            <param name="publishingIntervalMs">The polling/publishing rate.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters.Equals(Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters)">
            <summary>
            Determines whether the specified object equals these parameters.
            </summary>
            <param name="other">The parameters to compare.</param>
            <returns>True if the specified object equals these parameters.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters.Equals(System.Object)">
            <summary>
            Determines whether the specified object equals these parameters.
            </summary>
            <param name="obj">The parameters to compare.</param>
            <returns>True if the specified object equals these parameters.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters.GetHashCode">
            <summary>
            Returns a hash code for these parameters.
            </summary>
            <returns>A hash code for these parameters</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.IServerTag">
            <summary>
            Server tag interface.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.IServerTag.AllowedAccess">
            <summary>
            The access rights allowed by the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.IServerTag.Delete">
            <summary>
            Delete this tag.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.ServerSubscription">
            <summary>
            Represents one schedule or subscription object that we've created in the server. 
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.ServerSubscription.Delete">
            <summary>
            Delete this subscription.  Called when the last tag is removed from the schedule/subscription.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.TagNotifier">
            <summary>
            An object for notifying tag data changes.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.TagNotifier.Properties">
            <summary>
            Tag properties.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.TagNotifier.NotifyDataChanged(Demo3D.PLC.Comms.Tag.DirectTag.BatchNotify,System.Object)">
            <summary>
            Notify that the tag value has changed.
            </summary>
            <param name="batchNotify">An object for batching tag data change notifications together.</param>
            <param name="value">The new tag value.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.TagNotifier.NotifyDataChanged(System.Object)">
            <summary>
            Notify that the tag value has changed.
            </summary>
            <param name="value">The new tag value.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3">
            <summary>
            Manages server subscriptions.
            </summary>
            <typeparam name="SymbolType">The type of symbols used by the tags.  Must implement <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/>.</typeparam>
            <typeparam name="ServerSubscriptionType">The type of the subscription object.  Must inherit from <see cref="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.ServerSubscription"/>.</typeparam>
            <typeparam name="ServerTagType">The type of the server tag.  Must implement <see cref="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.IServerTag"/>.</typeparam>
            <remarks>
            <para>
            For servers such as OPC which create a subscription object in the server.  Subscriptions are objects in the server
            that poll tag values locally and generate updates to publish back to the client.  Subscription objects poll each
            tag at an update/publication rate requested by the client.
            </para>
            <para>
            When you create a subscription object in the server, you request a particular update/publication rate.  But the
            server can revise the publication rate and instead create you a subscription object running at a different rate.
            </para>
            <para>
            This class manages subscriptions such that if we request subscriptions at one rate but an object is created with
            a different rate, we maintain only the smallest number of subscriptions, each with a unique publication rate.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag">
            <summary>
            An association between a <see cref="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ClientTag"/> on the one part and a <see cref="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ServerObjects"/> on the other
            part (consisting of a <see cref="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.ServerSubscription"/> and a ServerTag).
            </summary>
            <remarks>
            <para>
            There's a one-to-one relationship between the ManagedTag and ClientTag.  But we have to create the Subscription
            and then the ServerTag first (because we may need one of them to determine the tag data type to pass into DirectTag).
            Thereafter, the ClientTag is immutable.
            </para>
            <para>
            As we respond to changes in <see cref="E:Demo3D.PLC.Comms.Tag.DirectTag.PreferredParametersChangedAsync"/> we delete and recreate ServerTags and
            Subscriptions with new parameters.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ServerObjects">
            <summary>
            Represents two associated objects created in the server - specifically a subscription object and a server tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ServerObjects.Subscription">
            <summary>
            The subscription object in the server that's publishing data for the tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ServerObjects.ServerTag">
            <summary>
            The tag object in the server.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ServerObjects.Equals(Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess{`0,`1,`2}.ManagedTag.ServerObjects)">
            <summary>
            Determines whether the specified object equals the current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the specified object equals the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ServerObjects.Equals(System.Object)">
            <summary>
            Determines whether the specified object equals the current object.
            </summary>
            <param name="obj">The object to compare.</param>
            <returns>True if the specified object equals the current object.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ServerObjects.GetHashCode">
            <summary>
            Returns a hash code for the server objects.
            </summary>
            <returns>A hash code for the server objects.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.ManagedTag.ClientTag">
            <summary>
            The client tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.DataConversion(`0,`2)">
            <summary>
            Data types and conversion contexts for the underlying tag and IO.
            </summary>
            <param name="symbol">The symbol address.</param>
            <param name="serverTag">The server tag.</param>
            <returns>The tag conversion parameters.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.CreateSubscription(Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters@)">
            <summary>
            Creates a new schedule/subscription object in the server.
            </summary>
            <param name="parameters">The requested subscription parameters.</param>
            <returns>A subscription object handle containing the revised subscription parameters.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.CreateServerTag(`0,`1,Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.TagNotifier,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Create a tag in the server.
            </summary>
            <param name="symbol">The symbol address.</param>
            <param name="subscription">Server subscription object.</param>
            <param name="notifier">Tag data changed notifier.</param>
            <param name="accessParameters">The access parameters that were requested (or null for write-only).</param>
            <returns>An action to delete/remove the tag from the server.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.TagAccessParametersChanged(`0,Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess{`0,`1,`2}.ManagedTag,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Called in response to a change in tag access parameters.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.GetTagAsync(System.Boolean,Demo3D.PLC.Comms.IAddress)">
            <summary>
            Creates a client tag.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="address">The symbol to create a tag for.</param>
            <returns>A client tag.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.GetServerTag(Demo3D.PLC.Comms.Tag.DirectTag)">
            <summary>
            Get the server tag associated with this tag.
            </summary>
            <param name="directTag">The tag.</param>
            <returns>The associated server tag.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`3.Shutdown">
            <summary>
            Closes/removes all subscription objects in the server.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`2">
            <summary>
            Manages tag access.
            </summary>
            <typeparam name="SymbolType">The type of symbols used by the tags.  Must implement <see cref="T:Demo3D.PLC.Comms.IBrowseItem"/>.</typeparam>
            <typeparam name="ServerTagType">The type of the server tag.</typeparam>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`2.CreateServerTag(`0,Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.TagNotifier,Demo3D.PLC.Comms.AccessParameters)">
            <summary>
            Create a tag in the server.
            </summary>
            <param name="symbol">The symbol address.</param>
            <param name="notifier">Tag data changed notifier.</param>
            <param name="accessParameters">The access parameters that were requested (or null for write-only).</param>
            <returns>An action to delete/remove the tag from the server.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`2.CreateServerTag(`0,Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess{`0,`1}.NullSubscription,Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.TagNotifier,Demo3D.PLC.Comms.AccessParameters)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`2.NullSubscription">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`2.NullSubscription.Delete">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess`2.CreateSubscription(Demo3D.PLC.Comms.Tag.NotifyDirectTagAccess.Parameters@)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.SequentialVectoredIO">
            <summary>
            Extensions to VectoredTagRequest lists for tags.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.SequentialVectoredIO.ReadSequentially``1(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{Demo3D.PLC.Comms.Tag.DirectTag}},System.Func{System.Boolean,``0,System.Threading.Tasks.Task{System.Object}})">
            <summary>
            Read tags sequentially.
            </summary>
            <typeparam name="T">Tag type.</typeparam>
            <param name="requests">Tag requests.</param>
            <param name="readTagAsync">Tag read function.</param>
            <returns>Vectored requests to execute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.SequentialVectoredIO.ReadSequentially``1(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{Demo3D.PLC.Comms.Tag.DirectTag}},System.Func{``0,System.Object})">
            <summary>
            Read tags sequentially.
            </summary>
            <typeparam name="T">Tag type.</typeparam>
            <param name="requests">Tag requests.</param>
            <param name="readTag">Tag read function.</param>
            <returns>Vectored requests to execute.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.SequentialVectoredIO.WriteSequentially``1(System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Comms.Tag.VectoredTagRequest{Demo3D.PLC.Comms.Tag.DirectTag}},System.Action{``0,System.Object})">
            <summary>
            Write tags sequentially.
            </summary>
            <typeparam name="T">Tag type.</typeparam>
            <param name="requests">Tag requests.</param>
            <param name="writeTag">Tag write action.</param>
            <returns>VectoredRequests to execute.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.Tag">
            <summary>
            Access to a PLC tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.Address">
            <summary>
            The tag address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.Conversion">
            <summary>
            Data types and conversion contexts for the underlying tag and IO data type conversions.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.Error">
            <summary>
            Tag IO error.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.ErrorHandler">
            <summary>
            Tag error handler.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.#ctor(Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.Tag.TagConversion)">
            <summary>
            Constructs a new tag.
            </summary>
            <param name="address">The tag address.</param>
            <param name="conversion">The tag and IO data types and conversion contexts.</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.TagType">
            <summary>
            The data type of the underlying tag (or null if not known; <see cref="P:Demo3D.PLC.Comms.Tag.Tag.IOType"/> must not be null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.IOType">
            <summary>
            The underlying IO type for accessing the PLC API (or null to use <see cref="P:Demo3D.PLC.Comms.Tag.Tag.TagType"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.Properties">
            <summary>
            Non-standard properties.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.FindService(System.Type)">
            <summary>
            Returns an object that implements a specific API, or null.
            </summary>
            <param name="serviceType">The service to find.</param>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.FindService``1">
            <summary>
            Returns an object that implements a specific API, or null.
            </summary>
            <typeparam name="T">The service to find.</typeparam>
            <returns>The service implementation (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.GetService``1">
            <summary>
            Returns an object that implements a specific API, or throws an exception.
            </summary>
            <typeparam name="T">The service to find.</typeparam>
            <returns>The service implementation.</returns>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.RequestedParameters">
            <summary>
            User requested access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.PreferredParameters">
            <summary>
            Preferred access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.AccessRights">
            <summary>
            The access rights that were granted.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Tag.Tag.OnIOError">
            <summary>
            Occurs when an IO error occurs.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Comms.Tag.Tag.OnClosed">
            <summary>
            Occurs when the tag is disposed, or dereferenced for the last time.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.NotifyIOError(System.Exception)">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.Tag.Tag.OnIOError"/> event.
            </summary>
            <param name="e">The exception that describes the IO error.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.SetIOError(System.Exception)">
            <summary>
            Sets the tag error flag and raises the <see cref="E:Demo3D.PLC.Comms.Tag.Tag.OnIOError"/> event.
            </summary>
            <param name="e">The exception that describes the IO error.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.NotifyClosed">
            <summary>
            Raises the <see cref="E:Demo3D.PLC.Comms.Tag.Tag.OnClosed"/> event.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.ConvertTypeUpstream(Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.ConvertTypeDownstream(Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.Dispose">
            <summary>
            Disposes the tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.Tag.AccessName">
            <summary>
            User printable tag name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.Tag.ToString">
            <summary>
            Returns a string representation of the tag.
            </summary>
            <returns>A string representation of the tag.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.TagAccess">
            <summary>
            Access to a PLC tag.  May implement <see cref="T:Demo3D.Net.INotifyDataChanged"/> and/or <see cref="T:Demo3D.Net.IDataChangedNotifier"/>, depending on the service.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagAccess.RequestedParameters">
            <summary>
            User requested access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagAccess.PreferredParameters">
            <summary>
            Preferred access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagAccess.AccessType">
            <summary>
            The data type for accessing the tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagAccess.UserState">
            <summary>
            Private user data passed in to GetTag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagAccess.#ctor(Demo3D.PLC.Comms.Tag.ITagService,Demo3D.PLC.Comms.IAddress,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.Tag.TagConversion,System.Object)">
            <summary>
            Constructs a new TagAccess.
            </summary>
            <param name="service">The owning tag service.</param>
            <param name="address">The tag address being accessed.</param>
            <param name="requestedParameters">The access parameters requested.</param>
            <param name="preferredParameters">The access parameters requested.</param>
            <param name="accessType">The data type for accessing the tag (or null).</param>
            <param name="dataConversion">The tag and IO data types and conversion contexts.</param>
            <param name="userState">The state object passed in by the user.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagAccess.ConvertTypeDownstream(Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagAccess.ConvertTypeUpstream(Demo3D.PLC.Comms.DataValue@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagAccess.ReadAsync(System.Boolean,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Read the tag value.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="accessParams">Access parameters for this operation (or null).</param>
            <param name="errorHandler">Error handler (or null).</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagAccess.Read(Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Read the tag value.
            </summary>
            <param name="accessParams">Access parameters for this operation (or null).</param>
            <param name="errorHandler">Error handler (or null).</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagAccess.WriteAsync(System.Boolean,Demo3D.PLC.Comms.DataValue,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Write the tag value.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <param name="value">The tag value to write.</param>
            <param name="accessParams">Access parameters for this operation (or null).</param>
            <param name="errorHandler">Error handler (or null).</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagAccess.Write(Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Write the tag value.
            </summary>
            <param name="value">The tag value to write.</param>
            <param name="accessParams">Access parameters for this operation (or null).</param>
            <param name="errorHandler">Error handler (or null).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.TagConversion">
            <summary>
            The tag and IO data types and their data conversion context providers.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagConversion.TagType">
            <summary>
            The data type of the underlying tag (or null if not known; <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.IOType"/> must not be null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagConversion.TagDemarshallingContext">
            <summary>
            The data context provider for demarshalling the tag data (converting from <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.TagType"/> to <see cref="P:Demo3D.PLC.Comms.Tag.TagAccess.AccessType"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagConversion.TagMarshallingContext">
            <summary>
            The data context provider for marshalling the tag data (converting from <see cref="P:Demo3D.PLC.Comms.Tag.TagAccess.AccessType"/> to <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.TagType"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagConversion.IOType">
            <summary>
            The underlying IO type for accessing the PLC API (or null to use <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.TagType"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagConversion.IODemarshallingContext">
            <summary>
            The data context provider for demarshalling the tag data (converting from <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.IOType"/> to <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.TagType"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagConversion.IOMarshallingContext">
            <summary>
            The data context provider for marshalling the tag data (converting from <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.TagType"/> to <see cref="P:Demo3D.PLC.Comms.Tag.TagConversion.IOType"/>).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.IDataContextProvider)">
            <summary>
            Declares the tag data types and context information for the upstream and downstream data pathways.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.Deconstruct(Demo3D.PLC.Comms.DataType@,Demo3D.PLC.Comms.IDataContextProvider@,Demo3D.PLC.Comms.IDataContextProvider@,Demo3D.PLC.Comms.DataType@,Demo3D.PLC.Comms.IDataContextProvider@,Demo3D.PLC.Comms.IDataContextProvider@)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.IDataContextProvider,Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.IDataContextProvider)">
            <summary>
            Declares the type of the tag, the data type that's required for IO, and information about how to convert the tag/IO data.
            TagType can be null if the tag type is not known.
            </summary>
            <param name="tagType">The data type of the underlying tag (or null if not known; <paramref name="ioType"/> must not be null).</param>
            <param name="tagContextProvider">Context for converting this tag from <paramref name="tagType"/> to/from the higher level <see cref="P:Demo3D.PLC.Comms.Tag.TagAccess.AccessType"/>.</param>
            <param name="ioType">The underlying IO type for accessing the PLC API (or null to use <paramref name="tagType"/>).</param>
            <param name="ioContextProvider">Context for converting this tag from <paramref name="ioType"/> to/from <paramref name="tagType"/>.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(System.Type,Demo3D.PLC.Comms.IDataContextProvider,System.Type,Demo3D.PLC.Comms.IDataContextProvider)">
            <summary>
            Declares the type of the tag, the data type that's required for IO, and information about how to convert the tag/IO data.
            TagType can be null if the tag type is not known.
            </summary>
            <param name="tagType">The data type of the underlying tag (or null if not known; <paramref name="ioType"/> must not be null).</param>
            <param name="tagContextProvider">Context for converting this tag from <paramref name="tagType"/> to/from the higher level <see cref="P:Demo3D.PLC.Comms.Tag.TagAccess.AccessType"/>.</param>
            <param name="ioType">The underlying IO type for accessing the PLC API (or null to use <paramref name="tagType"/>).</param>
            <param name="ioContextProvider">Context for converting this tag from <paramref name="ioType"/> to/from <paramref name="tagType"/>.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.DataType)">
            <summary>
            Declares the type of the tag and the data type that's required for IO.
            TagType can be null if the tag type is not known.
            </summary>
            <param name="tagType">The data type of the underlying tag (or null if not known; <paramref name="ioType"/> must not be null).</param>
            <param name="ioType">The underlying IO type for accessing the PLC API (or null to use <paramref name="tagType"/>).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(System.Type,System.Type)">
            <summary>
            Declares the type of the tag and the data type that's required for IO.
            TagType can be null if the tag type is not known.
            </summary>
            <param name="tagType">The data type of the underlying tag (or null if not known; <paramref name="ioType"/> must not be null).</param>
            <param name="ioType">The underlying IO type for accessing the PLC API (or null to use <paramref name="tagType"/>).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(Demo3D.PLC.Comms.DataType,Demo3D.PLC.Comms.IDataContextProvider)">
            <summary>
            Declares the type of a tag and information about how to convert the tag data.
            </summary>
            <param name="tagType">The tag type</param>
            <param name="contextProvider">Context for converting this tag.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(System.Type,Demo3D.PLC.Comms.IDataContextProvider)">
            <summary>
            Declares the type of a tag and information about how to convert the tag data.
            </summary>
            <param name="tagType">The tag type</param>
            <param name="contextProvider">Context for converting this tag.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(Demo3D.PLC.Comms.DataType)">
            <summary>
            Declares the type of a tag.
            </summary>
            <param name="tagType">The tag type</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagConversion.#ctor(System.Type)">
            <summary>
            Declares the type of a tag.
            </summary>
            <param name="tagType">The tag type</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs">
            <summary>
            An event reporting the change in value of a tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs.TagAccess">
            <summary>
            Tag access originally returned when the tag was added to the tag value service.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs.Value">
            <summary>
            The new value of the tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs.Reconstruct(Demo3D.PLC.Comms.Tag.TagAccess,Demo3D.PLC.Comms.DataValue@)">
            <summary>
            (Re)Construct for reuse.
            </summary>
            <param name="tagAccess">The TagAccess raising the event.</param>
            <param name="value">The new data value.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs.#ctor(Demo3D.PLC.Comms.Tag.TagAccess,Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Constructs a new TagValueChangedEventArgs.
            </summary>
            <param name="tagAccess">The TagAccess raising the event.</param>
            <param name="value">The new data value.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.TagValuesChangedEventArgs">
            <summary>
            An event reporting a change in data across a list of addresses.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.TagValuesChangedEventArgs.Tags">
            <summary>
            The list of tags that have changed, and their new values.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.TagValuesChangedEventArgs.#ctor(System.Collections.Generic.List{Demo3D.PLC.Comms.Tag.TagValueChangedEventArgs})">
            <summary>
            Constructs a new TagValuesChangedEventArgs.
            </summary>
            <param name="tags">A list of TagValueChangedEventArgs for each tag whose data has changed.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.VectoredTagAccess">
            <summary>
            A vectored tag access.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagAccess.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagAccess.#ctor(Demo3D.PLC.Comms.Tag.TagAccess,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Creates a new vectored IO request.
            </summary>
            <param name="tagAccess">The subject of the IO request.</param>
            <param name="accessParams">Access parameters (or null).</param>
            <param name="errorHandler">Callback for transient IO error (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagAccess.#ctor(Demo3D.PLC.Comms.Tag.TagAccess,Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Creates a new vectored IO request.
            </summary>
            <param name="tagAccess">The subject of the IO request.</param>
            <param name="value">The request value.</param>
            <param name="accessParams">Access parameters (or null).</param>
            <param name="errorHandler">Callback for transient IO error (or null).</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1">
            <summary>
            A vectored tag request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.TagAccess">
            <summary>
            The subject of the data request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.DataValue">
            <summary>
            The IO value.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.Reconstruct(`0,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            (Re)Construct for reuse.
            </summary>
            <param name="tagAccess">The subject of the IO request.</param>
            <param name="accessParams">Access parameters.</param>
            <param name="errorHandler">Callback for transient IO error (or null).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.#ctor(`0,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Creates a new vectored IO request.
            </summary>
            <param name="tagAccess">The subject of the IO request.</param>
            <param name="accessParams">Access parameters.</param>
            <param name="errorHandler">Callback for transient IO error (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.#ctor(`0,Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Creates a new vectored IO request.
            </summary>
            <param name="tagAccess">The subject of the IO request.</param>
            <param name="value">The request value.</param>
            <param name="accessParams">Access parameters.</param>
            <param name="errorHandler">Callback for transient IO error (or null).</param>
        </member>
        <member name="P:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.Value">
            <summary>
            The IO value unpacked.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.Tag.VectoredTagRequest`1.ToString">
            <summary>
            Returns a string representation of the current vectored tag request.
            </summary>
            <returns>A string representation of the current vectored tag request.</returns>
        </member>
        <member name="T:Demo3D.PLC.Comms.VectoredRequest">
            <summary>
            A vectored request.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.VectoredRequest.AccessParams">
            <summary>
            The requested access parameters.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.VectoredRequest.ErrorHandler">
            <summary>
            Request error handler.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequest.Reconstruct(Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            (Re)Construct for reuse.
            </summary>
            <param name="accessParams">Access parameters.</param>
            <param name="errorHandler">Callback for transient IO error.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequest.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequest.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequest.#ctor(Demo3D.PLC.Comms.AccessParameters,Demo3D.PLC.Comms.IOErrorHandler)">
            <summary>
            Creates a new vectored IO request.
            </summary>
            <param name="accessParams">Access parameters.</param>
            <param name="errorHandler">Callback for transient IO error.</param>
        </member>
        <member name="T:Demo3D.PLC.Comms.VectoredRequests">
            <summary>
            A vector of requests which can be executed multiple times.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.VectoredRequests.Count">
            <summary>
            Number of requests in the vector.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.VectoredRequests.FreeOnSuccess">
            <summary>
            True if the request resources can be freed.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Comms.VectoredRequests.UserState">
            <summary>
            Private user data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.Reconstruct(System.Int32)">
            <summary>
            (Re)Construct for reuse.
            </summary>
            <param name="count">Number of requests.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.#ctor">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.#ctor(System.Int32)">
            <summary>
            Constructs a VectoredRequests.
            </summary>
            <param name="count">Number of requests.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.AddBeforeHandler(Demo3D.PLC.Comms.IOBeforeHandler)">
            <summary>
            Add a before handler, called immediately before actual IO.
            </summary>
            <param name="beforeHandler">Callback called immediately before actual IO.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.AddSuccessHandler(Demo3D.PLC.Comms.IOSuccessHandler)">
            <summary>
            Add a success handler, called on successful IO.
            </summary>
            <param name="successHandler">Callback for successful IO.</param>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.Before">
            <summary>
            Call Before handlers.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.Success">
            <summary>
            Call Success handlers.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.ExecuteAsync``1(System.Boolean,Demo3D.PLC.Comms.IOAsyncDelegate{``0},System.Collections.Generic.IReadOnlyList{``0})">
            <summary>
            Execute IO requests.
            </summary>
            <typeparam name="T">Type of VectoredRequest.</typeparam>
            <param name="requests">The requests.</param>
            <param name="sync">If true, guarantees that the Task return is complete.</param>
            <param name="ioAsync">IO delegate.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.ExecuteAsync(System.Boolean)">
            <summary>
            Executes a vectored request.
            </summary>
            <param name="sync">If true, the Task returned is guaranteed to be complete.</param>
            <returns>Nothing.</returns>
        </member>
        <member name="M:Demo3D.PLC.Comms.VectoredRequests.Execute">
            <summary>
            Executes a vectored request.
            </summary>    
        </member>
        <member name="T:Demo3D.PLC.Cursor">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Cursor.FileCursor">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Cursor.FileCursor.Position">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Cursor.FileCursor.WithinRange(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Cursor.FileCursor.ToString">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Cursor.BOF">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Cursor.EOF">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Cursor.Position">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Cursor.WithinRange(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Cursor.op_GreaterThanOrEqual(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Cursor.op_LessThanOrEqual(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Cursor.op_GreaterThan(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Cursor.op_LessThan(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.IDCursor">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.IDCursor.ID">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.IDCursor.#ctor(System.String)">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.IDCursor.Position">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.IDCursor.WithinRange(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.IDCursor.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.IDCursor.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.IDCursor.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.LineColumnCursor">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.LineColumnCursor.BOL">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.LineColumnCursor.EOL">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.LineColumnCursor.Line">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.LineColumnCursor.Column">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.LineColumnCursor.#ctor(System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.LineColumnCursor.Position">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.LineColumnCursor.WithinRange(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.LineColumnCursor.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.LineColumnCursor.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.LineColumnCursor.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Emulator.IExecutable">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.IExecutable.Scan(Demo3D.PLC.Cursor,Demo3D.PLC.Cursor)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Emulator.IMappedAddress">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.IMappedAddress.NotifyValueChanged(Demo3D.PLC.ValueChangedSource)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Emulator.DeviceType">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.Unknown">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.File">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.S7Timer">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.MicroLogixTimer">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.Logix5000Timer">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.Timer">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.S7Counter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.MicroLogixCounter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.Logix5000Counter">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Emulator.DeviceType.Counter">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Emulator.IMappedDevice">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Emulator.IMappedDevice.DeviceType">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.IMappedDevice.MapDevice(System.Byte[],System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.IMappedDevice.UnmapDevice">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.IMappedDevice.MakeAddress(System.Int32,System.Int32,System.Int32,System.Int32)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Emulator.NetworkConfiguration">
            <exclude />
        </member>
        <member name="E:Demo3D.PLC.Emulator.NetworkConfiguration.PropertyChanged">
            <exclude />
        </member>
        <member name="E:Demo3D.PLC.Emulator.NetworkConfiguration.RunningChanged">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Emulator.NetworkConfiguration.Supported">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Emulator.NetworkConfiguration.Running">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.NetworkConfiguration.SetPlcName(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.NetworkConfiguration.NotifyPropertyChanged(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.NetworkConfiguration.NotifyRunningChanged">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Emulator.NetworkConfiguration.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.NamespaceGroupDoc">
            <summary>
            The Demo3D.PLC namespaces provides functionality for emulating and connecting to PLCs.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.NamespaceDoc">
            <summary>
            The Demo3D.PLC namespace provides PLC related features.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.NotifyUnlocked">
            <summary>
            A set of actions to call once we release all our internal locks.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlocked.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlocked.Add(System.Action{System.Object},System.Object)">
            <summary>
            Add an action to call when <see cref="M:Demo3D.PLC.NotifyUnlocked.Execute"/> or <see cref="M:System.IDisposable.Dispose"/> is called.
            </summary>
            <param name="action">Action to call.</param>
            <param name="state">State object to pass to action.</param>
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlocked.Add(System.Action)">
            <summary>
            Add an action to call when <see cref="M:Demo3D.PLC.NotifyUnlocked.Execute"/> or <see cref="M:System.IDisposable.Dispose"/> is called.
            </summary>
            <param name="action">Action to call.</param>
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlocked.Execute">
            <summary>
            Executes all registered actions.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlocked.Dispose">
            <summary>
            Executes all registered actions.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.NotifyUnlockedAsync">
            <summary>
            A set of actions to call once we release all our internal locks.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlockedAsync.Add(System.Func{System.Boolean,System.Object,System.Threading.Tasks.Task},System.Object)">
            <summary>
            Add an action to call when <see cref="M:Demo3D.PLC.NotifyUnlockedAsync.ExecuteAsync(System.Boolean)"/> or <see cref="M:System.IDisposable.Dispose"/> is called.
            </summary>
            <param name="action">Action to call.</param>
            <param name="state">State object to pass to action.</param>
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlockedAsync.Add(System.Func{System.Boolean,System.Threading.Tasks.Task})">
            <summary>
            Add an action to call when <see cref="M:Demo3D.PLC.NotifyUnlockedAsync.ExecuteAsync(System.Boolean)"/> or <see cref="M:System.IDisposable.Dispose"/> is called.
            </summary>
            <param name="action">Action to call.</param>
        </member>
        <member name="M:Demo3D.PLC.NotifyUnlockedAsync.ExecuteAsync(System.Boolean)">
            <summary>
            Executes all registered actions.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript">
            <summary>
            IOMap config script.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.TriggerFlags">
            <summary>
            Trigger flags.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.TriggerFlags.Interactive">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.TriggerFlags.Programmatic">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.TriggerFlags.ConnectionOpenDataSegment">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.TriggerFlags.ConnectionOpenServices">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Section">
            <summary>
            Config section.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Section.Trigger">
            <summary>
            Trigger.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Section4">
            <summary>
            Section 4.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Section4.LinkAddress">
            <summary>
            Link address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Section4.EDSInfo">
            <summary>
            EDS info.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Section4.EDSMask">
            <summary>
            EDS mask.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Section4.ToString">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.OTConnectionSize">
            <summary>
            OT connection size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.TOConnectionSize">
            <summary>
            TO connection size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Sections">
            <summary>
            Configuration sections.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.#ctor(Demo3D.IO.Buffer)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.Execute(Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.TriggerFlags,System.Action{Demo3D.IO.BufferSegment})">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConfigScript.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection">
            <summary>
            The IOConnection instance.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.Type">
            <summary>
            Connection type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.UpdateRate">
            <summary>
            Update rate.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.InConnectionPoint">
            <summary>
            In connection point (or 0 if not supported).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.InDataPtr">
            <summary>
            In data address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.InDataSize">
            <summary>
            In data size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.OutConnectionPoint">
            <summary>
            Out connection point (or 0 if not supported).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.OutDataPtr">
            <summary>
            Out data address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.OutDataSize">
            <summary>
            Out data size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.InFormat">
            <summary>
            In real time format.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.OutFormat">
            <summary>
            Out real time format.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.ConnectionPath">
            <summary>
            The connection path (if supported).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.#ctor">
            <summary>
            Constructs an IOConnection.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.GetAttributeValues">
            <summary>
            Get all the attribute values.
            </summary>
            <returns>All the attribute values</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.CreateValue(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.FindAddOrUpdateAttributeValue(System.UInt32,System.Func{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Action{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Boolean@)">
            <summary>
            Find, add or update an attribute value.
            <para>
            If an attribute value with the specified id does not exist, then the function '<paramref name="create"/>' is called
            to create a new attribute value.  If the '<paramref name="create"/>' function is null then no new attribute value is added.
            </para>
            <para>
            If an attribute value with the specified id already exists, then the function '<paramref name="update"/>' (if not
            null) is called to update the attribute value.
            </para>
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="create">A function to create a new attribute value (or null).</param>
            <param name="update">A function to update the existing attribute value (or null).</param>
            <param name="created">True if the value was created.</param>
            <returns>The new/existing attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap">
            <summary>
            IO Map.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.#ctor">
            <summary>
            Constructs an IOMap.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.Type">
            <summary>
            The IO Map entry type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.Key">
            <summary>
            The EDS info (with the compatibility bit encoded in the revision major).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.EDSInfo">
            <summary>
            EDS info for this entry.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.CompatibleModule">
            <summary>
            Compatible module bit set.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.KeyMask">
            <summary>
            Key mask.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.Mode">
            <summary>
            Mode.
            </summary>
            <remarks>
            bit0=fault, bit2=inhibit
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.ParentInst">
            <summary>
            Parent instance id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.LinkPort">
            <summary>
            Link port.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.LinkAddr">
            <summary>
            Link address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.ConfigAddress">
            <summary>
            Configuration data address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.ConfigurationData">
            <summary>
            Configuration data (normally passed in the Forward Open request).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.Configuration">
            <summary>
            Parsed configuration (normally passed in the Forward Open request).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.StorageId">
            <summary>
            Storage instance id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.Storage">
            <summary>
            Storage data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.MapAddress">
            <summary>
            Address of map entry.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.InstanceId">
            <summary>
            Instance id of map entry.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.Address">
            <summary>
            Map address.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.ConfigScriptPath">
            <summary>
            Configuration script EPATH.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.ConfigScript">
            <summary>
            Configuration script.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.GetAttributeValues">
            <summary>
            Get all the attribute values.
            </summary>
            <returns>All the attribute values</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.CreateValue(System.UInt32,Demo3D.PLC.Comms.AttrDb.DataDimensions)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.FindAddOrUpdateAttributeValue(System.UInt32,System.Func{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Action{Demo3D.PLC.Comms.AttrDb.AttributeValue},System.Boolean@)">
            <summary>
            Find, add or update an attribute value.
            <para>
            If an attribute value with the specified id does not exist, then the function '<paramref name="create"/>' is called
            to create a new attribute value.  If the '<paramref name="create"/>' function is null then no new attribute value is added.
            </para>
            <para>
            If an attribute value with the specified id already exists, then the function '<paramref name="update"/>' (if not
            null) is called to update the attribute value.
            </para>
            </summary>
            <param name="attributeId">The attribute id to find.</param>
            <param name="create">A function to create a new attribute value (or null).</param>
            <param name="update">A function to update the existing attribute value (or null).</param>
            <param name="created">True if the value was created.</param>
            <returns>The new/existing attribute (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.PeripheralParameterClass">
            <summary>
            The Parameter 'class' for peripherals with instance id 0x4000, 0x4400, etc.
            This is for devices with multiple peripherals, where each peripheral has its own ParameterClass, but it's
            modelled as a CIP instance object with a special instance id.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.PeripheralParameterClass.#ctor(System.UInt32)">
            <summary>
            Constructs a Parameter class.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.PeripheralParameterClass.Parameters">
            <summary>
            The parameters.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.PeripheralParameterClass.ClassInstanceId(System.UInt16)">
            <summary>
            Returns the instance id of the parameter class for a specified port.
            </summary>
            <param name="port">The peripheral port (or 0 for the drive host).</param>
            <returns>The parameter class instance id.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Nodes.PeripheralParameterClass.FindParameters(Demo3D.PLC.Comms.CIP.Nodes.CIPObject,System.UInt16)">
            <summary>
            Returns the parameter database for a specified port.
            </summary>
            <param name="cipObject">The message router.</param>
            <param name="port">The peripheral port (or 0 for the drive host).</param>
            <returns>The parameter database, or null if not found.</returns>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.Storage">
            <summary>
            Logix Designer stored data.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode">
            <summary>
            Interface.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.PortNode">
            <summary>
            Port.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.PortNode.Id">
            <summary>
            Port/link id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.PortNode.Type">
            <summary>
            Type (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.PortNode.Addr">
            <summary>
            Address (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.PortNode.ChassisSize">
            <summary>
            Chassis size (or -1).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.PortNode.ToString">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.AIId">
            <summary>
            Input symbol id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.AOId">
            <summary>
            Output symbol id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.Ports">
            <summary>
            Defined ports.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Storage.InNode.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.Storage.PublicNode">
            <summary>
            Public data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.PublicNode.Vendor">
            <summary>
            Vendor.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.PublicNode.CatNum">
            <summary>
            Catalog number (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.PublicNode.CatalogNumber">
            <summary>
            Catalog number (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.PublicNode.ConfigId">
            <summary>
            Configuration ID (or -1).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.PublicNode.Parameters">
            <summary>
            Configuration parameters.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Storage.PublicNode.ToString">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.Xml">
            <summary>
            Orignal xml.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.In">
            <summary>
            Interface definition.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.Storage.Public">
            <summary>
            Public data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Storage.Parse(Demo3D.IO.Buffer)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Storage.FindPort(System.UInt16)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.Storage.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag">
            <summary>
            A CIP Class 1 emulated tag.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.OnAssociated">
            <summary>
            Occurs when the tag is associated with a module.
            </summary>
            <remarks>
            <para>
            The event parameter is the message router of the module for which this is a tag.
            </para>
            <para>
            This event may be raised in any thread.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.DeviceArea">
            <summary>
            The device area.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.UsesSharedMemory">
            <summary>
            True if this tag is expected to use shared memory.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.SharedMemory">
            <summary>
            The shared memory of the device or module (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.MemoryArea">
            <summary>
            Area of <see cref="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.SharedMemory"/> occupied by this tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.PlcType">
            <summary>
            The PLC type of the tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.TagType">
            <summary>
            Data type of the tag.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.String">
            <summary>
            Tag string name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.Read">
            <summary>
            Read tag value from the device tag.
            </summary>
            <returns>Tag value.</returns>
            <remarks>
            Polled at regular short intervals and should run as fast as possible without blocking,
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag.Write(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Write tag value to the device tag.
            </summary>
            <param name="value">The new value.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.IOMapType">
            <summary>
            The IO Map entry type.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo">
            <summary>
            Information about the IO device/module.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo.IOEntry">
            <summary>
            IOEntry for the top level EIP module.  This may be the same module as <see cref="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo.ModuleEntry"/> or an antecedent entry.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo.DeviceEntry">
            <summary>
            IOEntry for the device.  This may be the same module as <see cref="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo.ModuleEntry"/> or the parent entry.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo.ModuleEntry">
            <summary>
            The IOEntry for module module.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo.#ctor(Demo3D.PLC.Rockwell.Comms.CIP.IOEntry,Demo3D.PLC.Rockwell.Comms.CIP.IOEntry,Demo3D.PLC.Rockwell.Comms.CIP.IOEntry)">
            <summary>
            Constructs an IOEntryInfo.
            </summary>
            <param name="ioEntry">The IOEntry for the top level EIP module.</param>
            <param name="deviceEntry">The IOEntry for the device.</param>
            <param name="moduleEntry">The IOEntry for the module.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo">
            <summary>
            Information about the IO device/module that a symbol refers to.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.MEConfig">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.MEConfig.EDSInfo">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.MEConfig.ConfigId">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.MEConfig.Connections">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.MEConfig.ToString">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.Area">
            <summary>
            Device area.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.SymbolModuleOffset">
            <summary>
            The offset of the associated symbol data in the module data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.ModuleIOOffset">
            <summary>
            The offset of the module data in the IO data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.ModuleSize">
            <summary>
            The size of the module data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.AssociatedSymbol">
            <summary>
            The associated symbol.
            </summary>
            <remarks>
            SymbolIOInfo contains attributes of a symbol.  This is that symbol.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.ModuleEmulatorConfig">
            <summary>
            Module Emulator configuration data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.#ctor(Demo3D.PLC.Rockwell.Comms.DeviceAreaProperties,Demo3D.PLC.Rockwell.Comms.CIP.IOEntry,Demo3D.PLC.Rockwell.Comms.CIP.IOEntry,Demo3D.PLC.Rockwell.Comms.CIP.IOEntry,System.Int32,System.Int32,System.Int32,Demo3D.PLC.Comms.CIP.Symbol)">
            <summary>
            Constructs a SymbolIOInfo.
            </summary>
            <param name="area">The device area.</param>
            <param name="ioEntry">The IOEntry for the top level EIP module.</param>
            <param name="deviceEntry">The IOEntry for the device.</param>
            <param name="moduleEntry">The IOEntry for the module.</param>
            <param name="symbolModuleOffset">The offset of the associated symbol data in the module data.</param>
            <param name="moduleIOOffset">The offset of the module data in the IO data.</param>
            <param name="moduleSize">The size of the module data.</param>
            <param name="associatedSymbol">The associated symbol.</param>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.SymbolName">
            <summary>
            Symbol name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.Name">
            <summary>
            Name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo.ToString">
            <summary>
            Returns a string that represents the current type.
            </summary>
            <returns>A string that represents the current type.</returns>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.IOSymbol">
            <summary>
            A symbol that can perform IO.
            </summary>
            <remarks>
            May be a real symbol from the PLC (see <see cref="T:Demo3D.PLC.Rockwell.Comms.CIP.PLCSymbol"/>) or a pseudo symbol.
            </remarks>
        </member>
        <member name="E:Demo3D.PLC.Rockwell.Comms.CIP.IOSymbol.TagCreated">
            <summary>
            Occurs when a tag is created for this symbol.
            </summary>
            <remarks>
            Parameters are:
            <para>
            tag: The new tag.
            getTagAccess: A method for accessing other tags.
            moduleEmulators: The set of emulators associated with the symbol.
            </para>
            <para>
            This function may be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOSymbol.NotifyTagCreated(Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag,System.Func{Demo3D.PLC.Comms.CIP.TagPath,Demo3D.PLC.Rockwell.Comms.CIP.IDeviceTag},System.Collections.Generic.HashSet{Demo3D.PLC.Comms.CIP.IModuleEmulator},Demo3D.Common.IComponentLogger)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOSymbol.#ctor(System.String,System.Boolean,System.Boolean,Demo3D.PLC.Comms.CIP.ClassID,System.UInt32,Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Constructs an IO symbol.
            </summary>
            <param name="name">Symbol name.</param>
            <param name="isHidden">True if the symbol is hidden.</param>
            <param name="isSafety">True if the symbol is a Safety symbol.</param>
            <param name="classId">Symbol class id.</param>
            <param name="instanceId">Symbol instance id.</param>
            <param name="plcType">The PLC type.</param>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOSymbol.IOInfo">
            <summary>
            IO tree information for a symbol that refers to a device/module data (or null).
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.IOSymbolExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOSymbolExtensions.DeviceArea(Demo3D.PLC.Rockwell.Comms.CIP.IOSymbol)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.PLCSymbol">
            <summary>
            PLC Symbol.
            </summary>
            <remarks>
            A real symbol from the PLC that we can perform IO on.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.PLCSymbol.#ctor(System.String,System.Boolean,System.Boolean,Demo3D.PLC.Comms.CIP.ClassID,System.UInt32,Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Constructs an IO symbol.
            </summary>
            <param name="name">Symbol name.</param>
            <param name="isHidden">True if the symbol is hidden.</param>
            <param name="isSafety">True if the symbol is a Safety symbol.</param>
            <param name="classId">Symbol class id.</param>
            <param name="instanceId">Symbol instance id.</param>
            <param name="dataType">The PLC type.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo">
            <summary>
            A connection and related symbols.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.IOConnection">
            <summary>
            IOConnection data from the PLC.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.OutSymbol">
            <summary>
            The connection output symbol (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.InSymbol">
            <summary>
            The connection input symbol (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.ConfigAssemblyId">
            <summary>
            The config connection point (or 0 if not known).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.OutputAssemblyId">
            <summary>
            The consumer connection point (or 0 if not known).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.InputAssemblyId">
            <summary>
            The producer connection point (or 0 if not known).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.#ctor(Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOConnection,Demo3D.PLC.Rockwell.Comms.CIP.PLCSymbol,Demo3D.PLC.Rockwell.Comms.CIP.PLCSymbol)">
            <summary>
            Constructs a new ConnectionInfo.
            </summary>
            <param name="ioConnection">The IO Connection raw data.</param>
            <param name="outSymbol">Connection output symbol.</param>
            <param name="inSymbol">Connection input symbol.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.GetSize(Demo3D.PLC.Rockwell.Comms.DeviceArea)">
            <summary>
            Returns the connection size for the specified direction (or uint.MaxValue).
            </summary>
            <param name="area">The area.</param>
            <returns>The connection size for the specified direction (or uint.MaxValue).</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfoExtensions">
            <summary>
            ConnectionInfo extension methods.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfoExtensions.FindAny(System.Collections.Generic.IEnumerable{Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo},Demo3D.PLC.Rockwell.Comms.DeviceArea[])">
            <summary>
            Find a connection that includes any of the requested areas.
            </summary>
            <param name="connections">List of connections.</param>
            <param name="areas">The areas requested.</param>
            <returns>The connection that includes any of the areas requested.</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry">
            <summary>
            An entry in the IO configuration tree.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.IOMap">
            <summary>
            IOMap data from the PLC.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.CatalogNumber">
            <summary>
            The catalog number (if known).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.MapSymbol">
            <summary>
            The module IO Map symbol (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.ConfigSymbol">
            <summary>
            The module config symbol (or null).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.Connections">
            <summary>
            The connections and their associated symbols.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.TagPaths">
            <summary>
            The module tag paths.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.ModulePSize">
            <summary>
            Module P,PI,PO data segment size.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.Parent">
            <summary>
            The parent in the IO configutation tree.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.#ctor(Demo3D.PLC.Rockwell.Comms.CIP.Nodes.IOMap,System.String,Demo3D.PLC.Rockwell.Comms.CIP.PLCSymbol,Demo3D.PLC.Rockwell.Comms.CIP.PLCSymbol,System.Collections.Generic.IReadOnlyList{Demo3D.PLC.Rockwell.Comms.CIP.ConnectionInfo},System.Collections.Generic.Dictionary{Demo3D.PLC.Rockwell.Comms.DeviceArea,Demo3D.PLC.Comms.CIP.TagPath})">
            <summary>
            Constructs an IOEntry.
            </summary>
            <param name="ioMap">The IOMap.</param>
            <param name="catalogNumber">The catalog number (or null).</param>
            <param name="mapSymbol">The IO Map symbol.</param>
            <param name="configSymbol">The config symbol.</param>
            <param name="connections">A list of connections and their associated symbols.</param>
            <param name="tagPaths">Tag paths to area symbols.</param>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.Children">
            <summary>
            Children in the IO configuration tree.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.SetParent(Demo3D.PLC.Rockwell.Comms.CIP.IOEntry)">
            <summary>
            Sets the parent IOEntry.
            </summary>
            <param name="parent">The parent IOEntry.</param>
            <exlucde/>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.Name">
            <summary>
            The module name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.DescriptiveName">
            <summary>
            The module long name.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.Type">
            <summary>
            The IO Map entry type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.TypeId">
            <summary>
            The IO Map entry type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.EDSInfo">
            <summary>
            EDS info for this entry.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.CompatibleModule">
            <summary>
            Compatible module bit set.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.KeyMask">
            <summary>
            Key mask.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.UpdateRate">
            <summary>
            Update rate of the main IO connection (or 0).
            </summary>
            <remarks>
            For modules that expect multiple connection from the PLC, we always return the IOConnection UpdateRate
            for the main I and O device areas.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.IsSafety">
            <summary>
            An indication that this is a safety module.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.DeviceSymbols">
            <summary>
            The device symbols.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.DeviceAreas">
            <summary>
            The device areas.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.FindDeviceSymbol(Demo3D.PLC.Rockwell.Comms.DeviceArea)">
            <summary>
            Finds the device symbol for the specified area.
            </summary>
            <param name="area">The area.</param>
            <returns>The device symbol for the area.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.FindModuleTagPath(Demo3D.PLC.Rockwell.Comms.DeviceArea)">
            <summary>
            Finds the module tag path for the specified area.
            </summary>
            <param name="area">The area.</param>
            <returns>The module tag path for the area.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.AllIOConnections">
            <summary>
            Return all IO connections for this entry and sub-entries.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.SymbolName">
            <summary>
            The module symbol name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.CIP.IOEntry.ToString">
            <summary>
            Returns a string that represents the current entry.
            </summary>
            <returns>A string that represents the current entry.</returns>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.DeviceArea">
            <summary>
            Device IO area.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceArea.Unset">
            <summary>
            Unknown/unset.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceArea.I">
            <summary>
            Input.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceArea.O">
            <summary>
            Output.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceArea.C">
            <summary>
            Config.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceArea.PI">
            <summary>
            Pseudo input.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceArea.PO">
            <summary>
            Pseudo output.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceArea.P">
            <summary>
            Pseudo symbols.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.DeviceArea.Name">
            <summary>
            Device area name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceArea.#ctor(System.String)">
            <summary>
            Constructs a device area.
            </summary>
            <param name="name">Device area name.</param>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.DeviceArea.IsValid">
            <summary>
            Device area is valid.
            </summary>
            <returns>True if the area is valid.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceArea.op_Equality(Demo3D.PLC.Rockwell.Comms.DeviceArea,Demo3D.PLC.Rockwell.Comms.DeviceArea)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceArea.op_Inequality(Demo3D.PLC.Rockwell.Comms.DeviceArea,Demo3D.PLC.Rockwell.Comms.DeviceArea)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceArea.Equals(Demo3D.PLC.Rockwell.Comms.DeviceArea)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceArea.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceArea.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceArea.ToString">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.DeviceAreaFlags">
            <summary>
            Device area flags.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceAreaFlags.IsDevice">
            <summary>
            Area is a device area.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceAreaFlags.IsConfig">
            <summary>
            Area is a config area.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.DeviceAreaFlagsExtensions">
            <summary>
            Extension methods.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceAreaFlagsExtensions.IsDevice(Demo3D.PLC.Rockwell.Comms.DeviceAreaFlags)">
            <summary>
            Area is a device area.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceAreaFlagsExtensions.IsConfig(Demo3D.PLC.Rockwell.Comms.DeviceAreaFlags)">
            <summary>
            Area is a config area.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Comms.DeviceAreaProperties">
            <summary>
            Device IO area.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Comms.DeviceAreaProperties.Unset">
            <summary>
            Unknown/unset.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.DeviceAreaProperties.Flags">
            <summary>
            Meta properties.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.DeviceAreaProperties.PlcDirection">
            <summary>
            Data flow direction, emulator to/from PLC.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Comms.DeviceAreaProperties.ModuleDirection">
            <summary>
            Data flow direction, framework to/from module.
            </summary>
            <remarks>
            ReadFromPLC should be interpretted as ReadFromModule, and
            WriteToPLC should be interpretted as WriteToModule.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Comms.DeviceAreaProperties.#ctor(Demo3D.PLC.Rockwell.Comms.DeviceArea,Demo3D.PLC.Rockwell.Comms.DeviceAreaFlags,Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Constructs a new device area description.
            </summary>
            <param name="name">Device area name.</param>
            <param name="flags">Meta properties.</param>
            <param name="plcDirection">Data flow direction, emulator to/from PLC.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DriverProfile">
            <summary>
            Represents a driver for a CIP Class 1 device or module.
            </summary>
            <exclude />   // use ModuleEmulator's instead
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.#ctor">
            <summary>
            DriverProfile constructor.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.GetProcessAllocation(Demo3D.PLC.Rockwell.Comms.CIP.IOEntry)">
            <summary>
            How to allocate the specified device to a process.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.FindModuleProfile(Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Rockwell.Comms.CIP.IOMapType)">
            <summary>
            Find the driver profile for a module in a backplane device.
            </summary>
            <param name="edsInfo">The EDS info of the module.</param>
            <param name="mapType">IO Map type.</param>
            <returns>The module driver profile (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.ConfigureModule(Demo3D.PLC.Comms.CIP.Nodes.MessageRouter,Demo3D.PLC.Comms.CIP.CIP1Properties,Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics,Demo3D.IO.External.IPC,Demo3D.Common.IComponentLogger)">
            <summary>
            Configure the CIP node tree for one module.
            </summary>
            <param name="module">The module message router.</param>
            <param name="properties">Configuration properties.</param>
            <param name="edsInfo">The EDS Info of the module.</param>
            <param name="characteristics">Module characteristics.</param>
            <param name="ipc">IPC for external IO.</param>
            <param name="logger">Component logger.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.ConfigureDevice(System.Collections.Generic.List{Demo3D.PLC.Comms.CIP.Nodes.MessageRouter},System.Collections.Generic.List{Demo3D.PLC.Comms.CIP.Nodes.BusConfiguration},Demo3D.PLC.Rockwell.Comms.CIP.IOEntry,System.Func{Demo3D.PLC.Rockwell.Comms.CIP.IOEntry,System.Collections.Generic.IEnumerable{Demo3D.PLC.Comms.CIP.CommsEvents}},Demo3D.PLC.Comms.CIP.CIP1Properties,Demo3D.IO.External.IPC,Demo3D.IO.External.IMemoryXAllocator,Demo3D.Common.IComponentLogger)">
            <summary>
            Configure the device tree, and all devices bridged through this device.
            </summary>
            <param name="modules">A list of every module in the tree.</param>
            <param name="nodes">The bus configuration for every device in the tree (including device that have no bus).</param>
            <param name="deviceEntry">The IO entry for the device directly connected to the PLC.</param>
            <param name="getCommsEvents">A method to get the CommsEvents for a module.</param>
            <param name="properties">Property bag.</param>
            <param name="ipc">IPC for a process that can start CIP 1 IO services.</param>
            <param name="memoryAllocator">Memory allocator.</param>
            <param name="logger">An object that can log messages.</param>
            <returns>The MessageRouter of the device.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.CreateTagImageMapping(Demo3D.PLC.Comms.CIP.TagPath)">
            <summary>
            Creates a description of the mapping from a specified tag to the device image.
            </summary>
            <param name="tagPath">The path of the tag to perform IO.</param>
        </member>
        <member name="E:Demo3D.PLC.Rockwell.Emulator.DriverProfile.OnRegistrationChanged">
            <summary>
            Occurs when the driver profile registration changes.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DriverProfile.Registration">
            <summary>
            CIP defines a Device Profile (indexed by <see cref="T:Demo3D.PLC.Comms.CPF.DeviceType"/>) for each kind of device.  And that profile defines the required
            classes/objects and the CIP Class 1 packet data format (usually the Assembly Data attribute format).  The device profile will also
            describe the Assembly instance IDs and their meaning.  DeviceType is a key component of the EDSInfo.
            
            But for Rockwell PLCs, the PLC uses the <see cref="T:Demo3D.PLC.Rockwell.Comms.CIP.IOMapType"/> to select a module driver (routines necessary to perform module
            operations), rather than the DeviceType.  It does so because the module drivers apply to many DeviceTypes, and to maximise our
            reach we want to do the same.
            
            So to begin with, in the startup code, we use <see cref="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.Install(Demo3D.PLC.Rockwell.Comms.CIP.IOMapType,Demo3D.PLC.Rockwell.Emulator.DriverProfile)"/> to register our profiles
            based purely on IOMapType.  Later when we read the symbol table, we associate EDSInfo with IOMapType.  The symbol table calls
            <see cref="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.AddSymbols(Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo,Demo3D.PLC.Rockwell.Emulator.DriverProfile.AddSymbolDelegate,Demo3D.Common.IComponentLogger)"/> which uses
            <see cref="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.FindDeviceProfile(Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,Demo3D.PLC.Rockwell.Comms.CIP.IOMapType)"/> passing in all the information.  This version of 'find' does a
            lookup (usually just matching the IOMapType) and then updates the registration with any additional information.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.Install(Demo3D.PLC.Rockwell.Comms.CIP.IOMapType,Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,Demo3D.PLC.Rockwell.Emulator.DriverProfile)">
            <summary>
            Registers a driver profile for a device given the specified EDS info and IOMapType.
            </summary>
            <param name="ioMapType">The IO Map type.</param>
            <param name="edsInfo">The EDS info for the device (or null to match all).</param>
            <param name="edsMask">EDS mask to match.</param>
            <param name="profile">The driver profile.</param>
            <returns>A driver profile for a device (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.Install(Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,Demo3D.PLC.Rockwell.Emulator.DriverProfile)">
            <summary>
            Registers a driver profile for a device given the specified EDS info.
            </summary>
            <param name="edsInfo">The EDS info for the device.</param>
            <param name="edsMask">EDS mask to match.</param>
            <param name="profile">The driver profile.</param>
            <returns>A driver profile for a device (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.Install(Demo3D.PLC.Rockwell.Comms.CIP.IOMapType,Demo3D.PLC.Rockwell.Emulator.DriverProfile)">
            <summary>
            Registers a driver profile for a device given the specified IOMapType.
            </summary>
            <param name="ioMapType">The IO Map type.</param>
            <param name="profile">The driver profile.</param>
            <returns>A driver profile for a device (or null).</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.UnregisterProfile(Demo3D.PLC.Rockwell.Emulator.DriverProfile)">
            <summary>
            Unregisters a profile.
            </summary>
            <param name="profile">Profile to unregister.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.ClearCache">
            <summary>
            Clear temporary drivers out of the cache.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.FindDeviceProfile(Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,Demo3D.PLC.Rockwell.Comms.CIP.IOMapType)">
            <summary>
            Finds a driver profile for a device given the specified EDS info and IOMapType.
            </summary>
            <param name="edsInfo">The EDS info for the device (or null).</param>
            <param name="edsMask">The EDS mask to compare.</param>
            <param name="ioMapType">The IO Map type (or zero).</param>
            <returns>A driver profile for a device (or null).</returns>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DriverProfile.AddSymbolDelegate">
            <summary>
            A delegate for adding a symbol to the symbol table.
            </summary>
            <param name="symbolToAdd">Description of the symbol to add.</param>
            <returns>The new symbol (or null if it can't be found or created).</returns>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddContext">
            <summary>
            Information about symbols added.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddContext.AddSymbol">
            <summary>
            A function for adding a symbol to the symbol table.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddContext.Logger">
            <summary>
            An object for logging messages.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddContext.ModuleEmulatorFound">
            <summary>
            Module emulator found and symbols were added.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddContext.#ctor(Demo3D.PLC.Rockwell.Emulator.DriverProfile.AddSymbolDelegate,Demo3D.Common.IComponentLogger)">
            <summary>
            Constructs a SymbolsAddContext.
            </summary>
            <param name="addSymbol">A method for adding a symbol to the symbol table.</param>
            <param name="logger">An object for logging messages.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters">
            <summary>
            Details of the symbol to add.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.IOEntryInfo">
            <summary>
            The IOEntry info.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.AreaPath">
            <summary>
            The area symbol path (or null to use the default).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.DeviceArea">
            <summary>
            The device area.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.SymbolPath">
            <summary>
            Symbol path (or empty to use the area symbol).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.PlcType">
            <summary>
            Symbol data type.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.AllowedAccess">
            <summary>
            Allowed access.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.Shared">
            <summary>
            True to place the tag in shared memory.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.Hidden">
            <summary>
            True to hide the symbol.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.Description">
            <summary>
            The symbol description.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.SymbolsAddParameters.#ctor(Demo3D.PLC.Rockwell.Comms.CIP.IOEntryInfo,Demo3D.PLC.Rockwell.Comms.DeviceArea,System.String,Demo3D.PLC.Comms.CIP.PlcType,Demo3D.PLC.Comms.AccessRights,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a SymbolParameters.
            </summary>
            <param name="ioEntryInfo">IOEntryInfo.</param>
            <param name="deviceArea">The device area.</param>
            <param name="symbolPath">Symbol path (empty to use the area symbol).</param>
            <param name="plcType">Symbol PLC type.</param>
            <param name="allowedAccess">Allowed access.</param>
            <param name="areaPath">The area path (or null to use the default).</param>
            <param name="shared">True to place tag in shared memory.</param>
            <param name="hidden">True to hide symbol.</param>
            <param name="description">The symbol description.</param>
        </member>
        <member name="E:Demo3D.PLC.Rockwell.Emulator.DriverProfile.OnAddSymbols">
            <summary>
            Occurs when the PLC symbol table is read.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Rockwell.Emulator.DriverProfile.OnAddProfileSymbols">
            <summary>
            Occurs when the PLC symbol table is read.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DriverProfile.AddSymbols(Demo3D.PLC.Rockwell.Comms.CIP.SymbolIOInfo,Demo3D.PLC.Rockwell.Emulator.DriverProfile.AddSymbolDelegate,Demo3D.Common.IComponentLogger)">
            <summary>
            Add symbols to the symbol table.
            </summary>
            <param name="symbolIoInfo">The symbol prompting this event.</param>
            <param name="addSymbol">A method for adding a symbol to the symbol table.</param>
            <param name="logger">An object for logging messages.</param>
            <remarks>
            Called by the PLC symbol table reader to add driver specific symbols to the symbol table.
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics">
            <summary>
            The characteristics of a standard module.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.EthernetPortFlags">
            <summary>
            Ethernet comms to add.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.EthernetPortFlags.EthernetPort">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.EthernetPortFlags.TcpIpInterface">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.EthernetPortFlags.EIPPort">
            <exclude /> 
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.EthernetPortFlags.IsEntryPort">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.Name">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.Serial">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.Status">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.HwRevision">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.SubMinor">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.HasUsbPort">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.SuppressPortDescriptions">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.AssemblyVersion">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.AssemblyConfigUseCfgSize">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.FileVersion">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.TimeSyncVersion">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.ExtendedDeviceVersion">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.PortVersion">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.EthernetPorts">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.EthernetLinkVersion">
            <exclude /> 
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleCharacteristics.TcpIpIfaceVersion">
            <exclude /> 
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.AutoAttribute">
             <summary>
             Specifies the Auto attribute for a tag (primitive value type), or a struct or class instance.
             </summary>
             <remarks>
             <para>
             Properties or fields with this attribute are candidates for automatic binding.
             </para>
             <para>
             If the type of the field is <see cref="T:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator"/> then the field is assigned a reference
             to the ModuleEmulator.<br/>
             If the type is the user script module emulator type (that was passed in to the ModuleEmulator.Install
             method) then a reference to the user module emulator object is assigned to the field.
             <code>
             class MyDigitalModule {
                 class Channel {
                     [Auto] MyDigitalModule myModule;           // assigned the instance of this MyDigitalModule
                 }
                 
                 [Auto] ModuleEmulator moduleEmulator;          // assigned the associated ModuleEmulator instance
                 [Auto] Channel        Ch00;                    // automatically instantiated
             }
             </code>
             </para>
             <para>
             Other fields (other than module emulator references) marked with [Auto] will be auto-instatiated if they
             contain a null reference after their class constructor has returned.  In the example above Ch00 is not
             assigned a value by the MyDigitalModule constructor, and therefore [Auto] will automatically instantiate
             a Channel and assign the reference to Ch00.
             </para>
             <para>
             When a field is auto-instantiated, a suitable constructor is searched for.  Constructor parameters can include
             <code>
                 public Channel(ModuleEmulator moduleEmulator,  // the associated ModuleEmulator instance
                                MyDigitalModule myModule,       // the instance of this MyDigitalModule
                                int channelId) {                // the index of this channel in a channel array
                 }
             </code>
             The constructor can have any (or none) of these parameters, and in any order.  The 'int' parameter is only
             valid if the outer class is being [Auto] instantiated as an array.  Eg:
             <code>
                 [Auto, TagName(ArrayWidth = 16, Name = "Ch{i:00}")]
                 protected readonly Channel[] channels = new Channel[16];
             </code>
             If there's more than one constructor, then the first acceptable constructor is used.
             </para>
             <para>
             Order of instantiation of fields in the module emulator is well defined.  Instantiation is performed strictly
             in the order in which [Auto] fields are encountered.  If a field is itself an [Auto] class field, then its
             sub-properties are traversed before continuing to the next field.  (Ie depth-first.)  Instances of SomeLogic
             (in the example below) are auto-instantiated.  Their order of instantiation is indicated in the example.
             <code>
             class MyDigitalModule {
                 class SomeLogic { }
            
                 class ChannelBaseClass {
                     [Auto] SomeLogic logic1;                   // instantiated in the order they appear in the script
                     [Auto] SomeLogic logic2;
                 }
                 
                 class Channel : ChannelBaseClass {             // ChannelBaseClass fields instantiated first
                     [Auto] SomeLogic logic3;
                     [Auto] SomeLogic logic4;
                 }
                 
                 [Auto] Channel Ch00;
             }
             </code>
             </para>
             <para>
             By default, the order of execution of events (ComputeInputs, ProcessOutputs, etc) follows the same order as
             the order of instantiation.  This can be overridden using the <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/>.
             </para>
             </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.AutoClassAttribute">
            <summary>
            Specifies the AutoClass attribute for a field or property.
            </summary>
            <remarks>
            Properties or fields with this attribute will be automatic bound to the specified CIP class.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.AutoClassAttribute.Class">
            <summary>
            The class id.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.AutoClassAttribute.#ctor(Demo3D.PLC.Comms.CIP.ClassID)">
            <summary>
            Construct an AutoClassAttribute.
            </summary>
            <param name="classId">Class id to bind.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.AutoInstanceAttribute">
            <summary>
            Specifies the AutoClassInstance attribute for a field or property.
            </summary>
            <remarks>
            Properties or fields with this attribute will be automatic bound to the specified CIP class instance.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.AutoInstanceAttribute.Class">
            <summary>
            The class id.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.AutoInstanceAttribute.Instance">
            <summary>
            The class instance id.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.AutoInstanceAttribute.#ctor(Demo3D.PLC.Comms.CIP.ClassID,System.UInt32)">
            <summary>
            Construct an AutoClassAttribute.
            </summary>
            <param name="classId">Class id to bind.</param>
            <param name="instanceId">Class instance id to bind.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute">
             <summary>
             Specifies the ExecutionOrder attribute for event methods.
             </summary>
             <remarks>
             <para>
             Where a module emulator script has more than one event function (ComputeInputs, ProcessOutputs, ConfigChanged, etc),
             the default order of execution of the events is well defined.
             </para>
             <para>
             In this example, IConfigChanged.ConfigChanged() appears in several places in the script.
             <code>
             class MyDigitalModule : IConfigChanged {
                 class SomeLogic : IConfigChanged {
                     public virtual void ConfigChanged() { }
                 }
            
                 class ChannelBaseClass : IConfigChanged {
                     [Auto] SomeLogic logic1;
                     
                     public virtual void ConfigChanged() { }
                 }
                 
                 class Channel : ChannelBaseClass {
                     [Auto] SomeLogic logic2;
                     [Auto] SomeLogic logic3;
                 }
                 
                 [Auto] Channel Ch00;
                 
                 public virtual void ConfigChanged() { }
             }
             </code>
             The order of execution follows the order in which fields are encountered.  If a field is itself an [Auto] class
             field, then its sub-properties are traversed before continuing to the next field.  (Ie depth-first.)
             </para>
             <para>
             Therefore in the example above, the default order of execution is
             <code>
                module.Ch00.logic1.ConfigChanged();
                module.Ch00.logic2.ConfigChanged();
                module.Ch00.logic3.ConfigChanged();
                module.Ch00.ConfigChanged();
                module.ConfigChanged();
             </code>
             </para>
             <para>
             The ExecutionOrder attribute can be used to explicitly define the order of execution.  The default execution
             position of a method is defined by <see cref="F:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute.Default"/>.  You can force a method to execute earlier or later
             than its default order by specifying an number correspondingly less than or greater than Default.
             </para>
             <para>
             For example, if the ConfigChanged method on the module class was rewritten:
             <code>
                 [ExecutionOrder(ExecutionOrderAttribute.Default -1)]
                 public virtual void ConfigChanged() { }
             </code>
             then it would execute earlier than normal, before the other methods:
             <code>
                module.ConfigChanged();                 // execution order Default-1
                module.Ch00.logic1.ConfigChanged();
                module.Ch00.logic2.ConfigChanged();
                module.Ch00.logic3.ConfigChanged();
                module.Ch00.ConfigChanged();
             </code>
             </para>
             </remarks>
        </member>
        <member name="F:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute.Default">
            <summary>
            The default execution order.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute.ExecutionOrder">
            <summary>
            The execution order.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute.#ctor(System.Int32)">
            <summary>
            Construct an ExecutionOrderAttribute.
            </summary>
            <param name="executionOrder">The execution order.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute">
            <summary>
            Specifies the TagName attribute for a tag.
            </summary>
            <remarks>
            <para>
            When used with a tag, specifies the tag name.  Use '.' to separate elements
            of the path (eg <c>[TagName("Ch00.Data")]</c>).
            </para>
            <para>
            When used on other properties/fields, sets the tag name prefix for sub-tags.
            </para>
            <para>
            Paths are subject to substitutions as follows:
            <code>
               {deviceName} with the device name (eg "device");
               {symbolName} with the module symbol name (eg "device:1");
               {area}       with the device IO area (eg PI or PO);
               {slot}       with the IOMap LinkAddress;
               {i}          with the current index of the enclosing array (if any);
               {tagName}    with the current tag name; and
               any other substitutions from <see cref="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.Substitutions"/>.
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.Name">
            <summary>
            The tag name.
            </summary>
            <remarks>
            <para>
            By default, the tag name is taken from the name of the field.  Use this property to override that and to
            explicitly specify a different name.
            </para>
            <para>
            For example
            <code>
            class ExampleModule {
                [Auto]                       int i_Data;      // would be the tag 'Device:Slot:I.Data'
                [Auto, TagName(Name="Test")] int i_Data;      // would be the tag 'Device:Slot:I.Test'
            }
            </code>
            Most useful inconjuction with arrays by specifying a pattern for flattening the array tag names and creating a list of symbols:
            <code>
            class ExampleModule {
                class Channel {
                    [Auto] bool i_Data;
                }
                
                [Auto, TagName(ArrayWidth = 4, Name = "Ch{i:00}")]
                Channel[] channels = new Channel[4];
            }
            </code>
            would generate the tags
            <code>
                Device:Slot:I.Ch00.Data
                Device:Slot:I.Ch01.Data
                Device:Slot:I.Ch02.Data
                Device:Slot:I.Ch03.Data
            </code>
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.ArrayDimensions">
            <summary>
            Array dimensions (or null) as pairs of integers [startIndex, numberOfElements].
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.#ctor(System.String)">
            <summary>
            Constructs a TagName attribute.
            </summary>
            <param name="name">Tag name.</param>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.FullName">
            <summary>
            This is the full name of the tag, ignoring any prefix TagName.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.Prefix">
            <summary>
            This is a tag name prefix, rather than an element in the tag path.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.Element">
            <summary>
            This tag is an element in the tag path. (Overrides parent Prefix attribute.)
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.ArrayWidth">
            <summary>
            Sets the width of a single-dimensional array.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.Ignore">
            <summary>
            This C# field is not used in the tag names.
            </summary>
            <remarks>
            Equivalent to setting <see cref="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.FullName"/> to false, <see cref="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.Name"/> to "", and <see cref="P:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute.Prefix"/> to true.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DeviceAreaAttribute">
            <summary>
            Specifies the DeviceArea attribute for a tag.
            </summary>
            <remarks>
            <para>
            When used with a tag, specifies the device area of the tag.
            </para>
            <para>
            When used on other properties/fields, sets the default device area for sub-tags.
            </para>
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DeviceAreaAttribute.DeviceArea">
            <summary>
            The device area name.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DeviceAreaAttribute.#ctor(System.String)">
            <summary>
            Constructs a DeviceArea attribute.
            </summary>
            <param name="deviceArea">Device area name.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.PlcTypeAttribute">
            <summary>
            Specifies the PlcType attribute for a tag.
            </summary>
            <remarks>
            The PLC type is normally deduced from the type parameter of the tag property/field.  This attribute
            can be used to override that.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.PlcTypeAttribute.PlcType">
            <summary>
            The PLC type.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.PlcTypeAttribute.#ctor(Demo3D.PLC.Comms.CIP.PlcType)">
            <summary>
            Constructs a PlcType attribute.
            </summary>
            <param name="plcType">The PLC type.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.PlcTypeAttribute.#ctor(Demo3D.PLC.Comms.CIP.PlcType.CIPType)">
            <summary>
            Constructs a PlcType attribute.
            </summary>
            <param name="cipType">The CIP type.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.BOOLAttribute">
            <summary>
            Specifies the BOOL PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.BOOLAttribute.#ctor">
            <summary>
            Constructs a BOOL attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.SINTAttribute">
            <summary>
            Specifies the SINT PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.SINTAttribute.#ctor">
            <summary>
            Constructs a SINT attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.INTAttribute">
            <summary>
            Specifies the INT PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.INTAttribute.#ctor">
            <summary>
            Constructs a INT attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DINTAttribute">
            <summary>
            Specifies the DINT PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DINTAttribute.#ctor">
            <summary>
            Constructs a DINT attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.USINTAttribute">
            <summary>
            Specifies the USINT PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.USINTAttribute.#ctor">
            <summary>
            Constructs a USINT attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.UINTAttribute">
            <summary>
            Specifies the UINT PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.UINTAttribute.#ctor">
            <summary>
            Constructs a UINT attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.UDINTAttribute">
            <summary>
            Specifies the UDINT PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.UDINTAttribute.#ctor">
            <summary>
            Constructs a UDINT attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.BYTEAttribute">
            <summary>
            Specifies the BYTE PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.BYTEAttribute.#ctor">
            <summary>
            Constructs a BYTE attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.WORDAttribute">
            <summary>
            Specifies the WORD PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.WORDAttribute.#ctor">
            <summary>
            Constructs a WORD attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DWORDAttribute">
            <summary>
            Specifies the DWORD PLC type attribute for a tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DWORDAttribute.#ctor">
            <summary>
            Constructs a DWORD attribute.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.HiddenAttribute">
            <summary>
            Specifies the Hidden attribute for a tag.
            </summary>
            <remarks>
            Properties or fields with this attribute exist in the device image but are are hidden in the symbol table.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ReadOnlyAttribute">
            <summary>
            Specifies the ReadOnly attribute for a tag.
            </summary>
            <remarks>
            Properties or fields with this attribute are never copied back to the device image.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.RPIAttribute">
            <summary>
            Specifies the RPI attribute for a tag.
            </summary>
            <remarks>
            Properties or fields with this attribute are copied into the device image only after RPI events.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.EmulatorAttribute">
            <summary>
            Specifies the Emulator attribute for a tag.
            </summary>
            <remarks>
            Properties or fields with this attribute are copied into the device image only after Emulator events.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.DescriptionAttribute">
            <summary>
            Specifies the Description attribute for a tag.
            </summary>
            <remarks>
            Provides a desciption of the tag in the symbol table.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.DescriptionAttribute.Description">
            <summary>
            The symbol description.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.DescriptionAttribute.#ctor(System.String)">
            <summary>
            Constructs a Description attribute.
            </summary>
            <param name="description">The symbol description.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator">
            <summary>
            Represents a module emulator.
            </summary>
            <example>
            <para>
            The following example shows a simple 5094 IF8 Module Emulator
            </para>
            <code lang="C#" source="Examples\DeviceEmulation\DE_5094_IF8.cs" region="Example" />
            <para>
            The following example shows a simple 5094 OB16 Module Emulator
            </para>
            <code lang="C#" source="Examples\DeviceEmulation\DE_5094_OB16.cs" region="Example" />
            </example>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.CopyImageToFields">
            <summary>
            Copies data from the module image into the Module Emulator fields and properties.
            </summary>
            <remarks>
            Copies data into all the Module Emulator fields.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.CopyImageToFields(Demo3D.PLC.Rockwell.Comms.DeviceArea[])">
            <summary>
            Copies data from specified areas of the module image into the Module Emulator fields and properties.
            </summary>
            <param name="areas">The areas to copy.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.CopyFieldsToImage">
            <summary>
            Copies data from the Module Emulator fields into the module image.
            </summary>
            <remarks>
            <para>
            When running in the low level emulator process, this copies emulator output tags only.
            Emulator tags are tags marked with the <see cref="T:Demo3D.PLC.Rockwell.Emulator.EmulatorAttribute"/> or, for tags that have neither the
            <see cref="T:Demo3D.PLC.Rockwell.Emulator.EmulatorAttribute"/> nor the <see cref="T:Demo3D.PLC.Rockwell.Emulator.RPIAttribute"/>, they are any tags that are not in the
            C, O, P or PI areas and are not marked ReadOnly.
            </para>
            <para>
            When running in the IO process, this copies RPI output tags only.
            RPI tags are tags marked with the <see cref="T:Demo3D.PLC.Rockwell.Emulator.RPIAttribute"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.CopyFieldsToImage(Demo3D.PLC.Rockwell.Comms.DeviceArea[])">
            <summary>
            Copies data from the Module Emulator fields into the specified areas of the module image.
            </summary>
            <param name="areas">The areas to copy.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ScheduleAt(Demo3D.Time.ModelTime,System.Action,System.Action@)">
            <summary>
            Schedule an event in model/virtual time.
            </summary>
            <param name="at">Time of the event.</param>
            <param name="action">Event action.</param>
            <param name="cancel">An action for cancelling the event.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ScheduleAfter(Demo3D.Time.ModelTime,System.Action,System.Action@)">
            <summary>
            Schedule an event in model/virtual time.
            </summary>
            <param name="after">Duration from now of the event.</param>
            <param name="action">Event action.</param>
            <param name="cancel">An action for cancelling the event.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ScheduleAt(Demo3D.Time.RealTime,System.Action,System.Action@)">
            <summary>
            Schedule an event in real time.
            </summary>
            <param name="at">Time of the event.</param>
            <param name="action">Event action.</param>
            <param name="cancel">An action for cancelling the event.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ScheduleAfter(Demo3D.Time.RealTime,System.Action,System.Action@)">
            <summary>
            Schedule an event in real time.
            </summary>
            <param name="after">Duration from now of the event.</param>
            <param name="action">Event action.</param>
            <param name="cancel">An action for cancelling the event.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ScheduleAfter(System.Double,System.Action,System.Action@)">
            <summary>
            Schedule an event in model/virtual time.
            </summary>
            <param name="after">Duration from now of the event.</param>
            <param name="action">Event action.</param>
            <param name="cancel">An action for cancelling the event.</param>
            <returns>True on success.</returns>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.EventLock">
            <summary>
            An object that you can lock to serialize access to the module emulator script functions.
            </summary>
            <remarks>
            It only acts within the current process, so accesses to the module image from the emulator process
            and the IO process may still occur in parallel.
            </remarks>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Configured">
            <summary>
            True if at least one Assembly ForwardOpen has been received and processed.
            </summary>
            <remarks>
            <see cref="M:Demo3D.PLC.Rockwell.Emulator.IComputeInputs.ComputeInputs"/> and <see cref="M:Demo3D.PLC.Rockwell.Emulator.IProcessOutputs.ProcessOutputs"/> won't be called
            unless this it set.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ProcessOutputs">
            <summary>
            Calls all <see cref="M:Demo3D.PLC.Rockwell.Emulator.IProcessOutputs.ProcessOutputs"/> events.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ComputeInputs">
            <summary>
            Calls all <see cref="M:Demo3D.PLC.Rockwell.Emulator.IComputeInputs.ComputeInputs"/> events.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ConfigChanged">
            <summary>
            Calls all <see cref="M:Demo3D.PLC.Rockwell.Emulator.IConfigChanged.ConfigChanged"/> events.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.AfterOutputs">
            <summary>
            Calls all <see cref="T:Demo3D.PLC.Rockwell.Emulator.IAfterOutputs"/> events.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.BeforeInputs">
            <summary>
            Calls all <see cref="T:Demo3D.PLC.Rockwell.Emulator.IBeforeInputs"/> events.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters">
            <summary>
            Optional parameters for controlling symbol names.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.AreaPath">
            <summary>
            Optional area symbol path, subject to path substitutions (see <see cref="T:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.SymbolPath">
            <summary>
            Optional symbol path, subject to path substitutions (see <see cref="T:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute"/>).
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.Properties">
            <summary>
            Optional additional properties that'll be assigned to <see cref="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Properties"/>.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.Substitutions">
            <summary>
            Optional additional substitutions (see <see cref="T:Demo3D.PLC.Rockwell.Emulator.TagNameAttribute"/>).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.#ctor">
            <exclude/>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters.GetHashCode">
            <exclude />
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Properties">
            <summary>
            Properties set by the module emulator factory.
            Always null for RPI events.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator">
            <summary>
            A class for associating a module emulator with PLC symbols.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator.SymbolIOInfo">
            <summary>
            Information about the module.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator.AddAutoSymbols(Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters,Demo3D.Common.IComponentLogger)">
            <summary>
            Associates the module emulator with a module, and adds any additional symbols from the module emulator into the symbol table.
            </summary>
            <param name="parameters">Optional additional parameters.</param>
            <param name="logger">Message logger.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory">
            <summary>
            A factory for creating new module emulators.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.Key">
            <summary>
            Key for the module emulator factory database.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.Key.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.Key.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.#ctor(Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.Key,Demo3D.PLC.Rockwell.Emulator.DriverProfile)">
            <summary>
            Constructs a module emulator factory.
            </summary>
            <param name="key">The factory database key.</param>
            <param name="driverProfile">Specific driver profiler (or null).</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.ProfileOnAddSymbols(Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator,Demo3D.Common.IComponentLogger)">
            <summary>
            Called to check and add additional symbols to the symbol table.
            </summary>
            <param name="associator">Associate module emulators and add-symbols.</param>
            <param name="logger">Message logger.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.Uninstall">
            <summary>
            Module emulator is being uninstalled.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.Dispose">
            <summary>
            Disposes and uninstalls module emulator factory.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.OnModuleEmulatorInstalled">
            <summary>
            Occurs when a new ModuleEmulator is installed.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.OnModuleEmulatorUninstalled">
            <summary>
            Occurs when a ModuleEmulator is uninstalled.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.FindOrInstall(System.Type,System.Object,System.Func{Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory.Key,Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Factory})">
            <summary>
            Finds or installs a ModuleEmulator.
            </summary>
            <param name="moduleEmulatorType">The user module emualtor type.</param>
            <param name="additionalKey">Optional additional factory database key.</param>
            <param name="createEmulator">A function to create an emulator.</param>
            <returns>The module emulator factory.</returns>
            <remarks>
            Dispose to uninstall.
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.DriverProfileKey">
            <summary>
            Parameters for identifying a specified EDSInfo and connection point(s).
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.DriverProfileKey.#ctor(Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,System.Int64,System.ValueTuple{Demo3D.PLC.Rockwell.Comms.DeviceArea,System.UInt32}[][])">
            <summary>
            Constructs a DriverProfileKey for indentifying a module.
            </summary>
            <param name="edsInfo">The EDSInfo of the module.</param>
            <param name="edsMask">The EDSInfo mask.</param>
            <param name="configId">The configuration id.</param>
            <param name="connections">A list of connections, each of which is a set of DeviceArea and corresponding assembly ids.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.DriverProfileKey.#ctor(Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,System.Int64,System.ValueTuple{Demo3D.PLC.Rockwell.Comms.DeviceArea,System.UInt32}[])">
            <summary>
            Constructs a DriverProfileKey for indentifying a module.
            </summary>
            <param name="edsInfo">The EDSInfo of the module.</param>
            <param name="edsMask">The EDSInfo mask.</param>
            <param name="configId">The configuration id.</param>
            <param name="connection">Device area and assembly id of the connection.</param>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.DriverProfileKey.Equals(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.DriverProfileKey.GetHashCode">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Install(System.Type,Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.DriverProfileKey,Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters,System.Action{Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator,Demo3D.Common.IComponentLogger})">
            <summary>
            Installs a ModuleEmulator for a specified EDSInfo and connection point(s).
            </summary>
            <param name="moduleEmulatorType">The type of the module emulator.</param>
            <param name="driverKey">Driver profile key.</param>
            <param name="parameters">Optional additional parameters.</param>
            <param name="onAssociate">If not null, overrides the default behaviour, which is to call <see cref="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator.AddAutoSymbols(Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters,Demo3D.Common.IComponentLogger)"/>.</param>
            <returns>The module emulator uninstaller.</returns>
            <remarks>
            Dispose to uninstall.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Install(System.Type,Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,System.Int64,System.ValueTuple{Demo3D.PLC.Rockwell.Comms.DeviceArea,System.UInt32}[][],Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters,System.Action{Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator,Demo3D.Common.IComponentLogger})">
            <summary>
            Installs a ModuleEmulator for a specified EDSInfo and connection point(s).
            </summary>
            <param name="moduleEmulatorType">The type of the module emulator.</param>
            <param name="edsInfo">The EDSInfo of the module.</param>
            <param name="edsMask">The EDSInfo mask.</param>
            <param name="configId">The configuration id.</param>
            <param name="connection">Connection device area and assembly ids.</param>
            <param name="parameters">Optional additional parameters.</param>
            <param name="onAssociate">If not null, overrides the default behaviour, which is to call <see cref="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Associator.AddAutoSymbols(Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.SymbolParameters,Demo3D.Common.IComponentLogger)"/>.</param>
            <returns>The module emulator uninstaller.</returns>
            <remarks>
            Dispose to uninstall.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Install(System.Type,Demo3D.PLC.Comms.CPF.EDSInfo,Demo3D.PLC.Comms.CPF.EDSMask,System.Int64,System.ValueTuple{Demo3D.PLC.Rockwell.Comms.DeviceArea,System.UInt32}[])">
            <summary>
            Installs a ModuleEmulator for a specified EDSInfo and connection point(s).
            </summary>
            <param name="moduleEmulatorType">The type of the module emulator.</param>
            <param name="edsInfo">The EDSInfo of the module.</param>
            <param name="edsMask">The EDSInfo mask.</param>
            <param name="configId">The configuration id.</param>
            <param name="connection">Connection device area and assembly ids.</param>
            <returns>The module emulator uninstaller.</returns>
            <remarks>
            Dispose to uninstall.
            </remarks>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.ClearCache">
            <summary>
            Clear temporary emulators out of the cache.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.FindAutoMembers(System.Type)">
            <summary>
            Find members with the <see cref="T:Demo3D.PLC.Rockwell.Emulator.AutoAttribute"/> in the specified type.
            </summary>
            <param name="inType">The type to search.</param>
            <returns>A list of members and their types.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.FindAutoMembers(System.Object)">
            <summary>
            Find members with the <see cref="T:Demo3D.PLC.Rockwell.Emulator.AutoAttribute"/> in the type of the specified object.
            </summary>
            <param name="obj">The object to search.</param>
            <returns>A list of members and their types.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.FindAuto(System.Object)">
            <summary>
            Find members with the <see cref="T:Demo3D.PLC.Rockwell.Emulator.AutoAttribute"/>.
            </summary>
            <param name="obj">The object to search.</param>
            <returns>A list of members.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.FindAuto``1(System.Object)">
            <summary>
            Find members with the <see cref="T:Demo3D.PLC.Rockwell.Emulator.AutoAttribute"/>.
            </summary>
            <param name="obj">The object to search.</param>
            <returns>A list of members.</returns>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.IPAddress">
            <summary>
            IP address of the device.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.GetSystemTime">
            <summary>
            Returns the device system time.
            </summary>
            <returns>The device system time (or null).</returns>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.IConstructEmulator">
            <summary>
            Represents an emulator class that needs to be constructed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.IConstructEmulator.Construct(Demo3D.PLC.Comms.CIP.Nodes.MessageRouter,Demo3D.Common.IComponentLogger)">
            <summary>
            Called once when the module emulator has been created and tags bound, to allow final emulator construction.
            </summary>
            <param name="module">The module CIP message router associated with this emulator.</param>
            <param name="logger">An object for logging messages.</param>
            <remarks>
            <para>
            Will be called before the PLC connects to the device.  Where there are multiple instances of this interface,
            the order of execution of events is strictly defined.  See <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/> for details.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.IProcessOutputs">
            <summary>
            Represents a class that processes PLC outputs before passing them to the lower level emulation.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.IProcessOutputs.ProcessOutputs">
            <summary>
            Called to process PLC outputs just before passing then to the low level emulator.
            </summary>
            <remarks>
            <para>
            Called at regular short intervals and should run as fast as possible without blocking.
            Will only be called after at least one Assembly ForwardOpen is received (see <see cref="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Configured"/>).
            Where there are multiple instances of this interface, the order of execution of events is strictly defined.
            See <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/> for details.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.IComputeInputs">
            <summary>
            Represents a class that computes PLC inputs in response to updates from the lower level emulation.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.IComputeInputs.ComputeInputs">
            <summary>
            Called to compute PLC inputs immediately after new data is received from the low level emulator.
            </summary>
            <remarks>
            <para>
            Called when the lower level emulation changes a tag value in order to compute PLC inputs.
            Will only be called after at least one Assembly ForwardOpen is received (see <see cref="P:Demo3D.PLC.Rockwell.Emulator.ModuleEmulator.Configured"/>).
            Where there are multiple instances of this interface, the order of execution of events is strictly defined.
            See <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/> for details.
            </para>
            <para>
            May be called in any thread, but guaranteed to be called in the 'model thread' when called due to an
            update from the model.  Occasions where this method may not be called from the 'model thread' include
            the first call triggered by an Assembly ForwardOpen, or a direct call by the user script.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.IConfigChanged">
            <summary>
            Represents a class that responds to a detected configuration change.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.IConfigChanged.ConfigChanged">
            <summary>
            Called by the low level emulator to indicate a configuration change.
            </summary>
            <remarks>
            <para>
            Where there are multiple instances of this interface, the order of execution of events is strictly defined.
            See <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/> for details.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.IConstructRPI">
            <summary>
            Represents an emulator class that needs to be constructed.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.IConstructRPI.Construct(Demo3D.Common.IComponentLogger)">
            <summary>
            Called once when the module emulator has been created in the IO process.
            </summary>
            <param name="logger">An object for logging messages.</param>
            <remarks>
            <para>
            Will be called before the PLC connects to the device.
            Where there are multiple instances of this interface, the order of execution of events is strictly defined.
            See <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/> for details.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.IAfterOutputs">
            <summary>
            Represents a class that processes PLC outputs as soon as they're received from the PLC.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.IAfterOutputs.AfterOutputs">
            <summary>
            Called immediately when PLC outputs are received from the PLC.
            </summary>
            <remarks>
            <para>
            Called at the RPI and should run as fast as possible without blocking.
            Where there are multiple instances of this interface, the order of execution of events is strictly defined.
            See <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/> for details.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.IBeforeInputs">
            <summary>
            Represents a class that computes PLC inputs immediately before sending to the PLC.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.IBeforeInputs.BeforeInputs">
            <summary>
            Called immediately before sending PLC inputs to the PLC.
            </summary>
            <remarks>
            <para>
            Called at the RPI and should run as fast as possible without blocking.
            Where there are multiple instances of this interface, the order of execution of events is strictly defined.
            See <see cref="T:Demo3D.PLC.Rockwell.Emulator.ExecutionOrderAttribute"/> for details.
            </para>
            <para>
            May be called in any thread.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.TagImageIO">
            <summary>
            An object that can read/write a tag in the device/module image.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagImageIO.SharedMemory">
            <summary>
            The shared memory image for this tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.TagImageIO.Read">
            <summary>
            Read from the device image.
            </summary>
            <returns>Value read.</returns>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.TagImageIO.Write(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Write to the device image.
            </summary>
            <param name="value">Value to write.</param>
        </member>
        <member name="T:Demo3D.PLC.Rockwell.Emulator.TagImageMapping">
            <summary>
            Represents all the information needed to read/write a tag in the device/module image.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagImageMapping.MemoryArea">
            <summary>
            The memory offset and size into the device image of the tag.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Rockwell.Emulator.TagImageMapping.CreateIO(Demo3D.PLC.Comms.CIP.Nodes.MessageRouter,Demo3D.Common.IComponentLogger)">
            <summary>
            Given the message router of the module, returns an object that can read/write this tag.
            </summary>
            <param name="module">Module message router.</param>
            <param name="logger">An object that can log messages.</param>
            <returns>Tag image IO.</returns>
        </member>
        <member name="P:Demo3D.PLC.Rockwell.Emulator.TagImageMapping.String">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord">
            <summary>
            Container for acyclic record data travelling through Demo3D.Net
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.DateTime">
            <summary>
            The virtual system time of the controller when an acyclic event was raised.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.Hardware">
            <summary>
            Hardware identifier or index.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.Slave">
            <summary>
            Slave index.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.Slot">
            <summary>
            Slot index.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.Subslot">
            <summary>
            Subslot index.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.Index">
            <summary>
            Record index.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.DataSize">
            <summary>
            Designated record data size, which may not reflect the current record data.
            </summary>
        </member>
        <member name="P:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.Data">
            <summary>
            Record data.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.#ctor">
            <summary>
            For serialization
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.#ctor(Demo3D.IO.Buffer)">
            <summary>
            Constructs a new AcyclicRecord from existing data.
            </summary>
            <param name="data">Existing data.</param>
        </member>
        <member name="M:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.#ctor(System.DateTime,System.UInt32,System.UInt32,System.UInt32,Demo3D.IO.Buffer)">
            <summary>
            Constructs a new AcyclicRecord.
            </summary>
            <param name="dateTime">DateTime when the acyclic event was raised.</param> 
            <param name="hardware">Hardware index.</param>
            <param name="index">Record index.</param>
            <param name="dataSize">Designated record data size.</param>
            <param name="data">Record data.</param>
        </member>
        <member name="M:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,Demo3D.IO.Buffer)">
            <summary>
            Constructs a new AcyclicRecord.
            </summary>
            <param name="hardware">Hardware index.</param>
            <param name="slave">Slave device index.</param>
            <param name="slot">Slot index.</param>
            <param name="subslot">Subslot index.</param>
            <param name="index">Record index.</param>
            <param name="data">Record data.</param> 
        </member>
        <member name="M:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.AcknowledgeRecord">
            <summary>
            Acknowledge that the AcyclicRecord has been received and processed.
            Calling this method will signal the acyclic event done.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.WaitRecordAsync">
            <summary>
            Wait for acknowledgement.
            </summary>
        </member>
        <member name="M:Demo3D.PLC.Siemens.Acyclic.AcyclicRecord.AdoptCachedData(Demo3D.IO.Buffer)">
            <summary>
            Adopts cached data, converting into an empty buffer with the expected data size.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.Siemens.Acyclic.IAcyclicService">
            <summary> 
            A service for responding to acyclic events. 
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Siemens.Acyclic.IAcyclicService.OnRecordRead">
            <summary> 
            Raised when the PLC wants to read from an acyclic record. For RPC use.
            </summary>
        </member>
        <member name="E:Demo3D.PLC.Siemens.Acyclic.IAcyclicService.OnRecordWrite">
            <summary> 
            Raised when the PLC wants to write to an acyclic record. For RPC use.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.StringConversion">
            <summary>
            Methods for standard string conversion.
            </summary>
        </member>
        <member name="T:Demo3D.PLC.StringConversion.GetString">
            <summary>
            A delegate for converting an array of bytes into a string.
            </summary>
            <param name="bytes">The bytes to convert.</param>
            <param name="index">The index of the first byte to convert.</param>
            <param name="numBytes">The number of bytes to convert.</param>
            <returns>The string represenation.</returns>
        </member>
        <member name="T:Demo3D.PLC.StringConversion.GetBytes">
            <summary>
            A delegate for encoding a string into an array of bytes.
            </summary>
            <param name="s">The string to convert.</param>
            <param name="charIndex">The index of the first character in the string to convert.</param>
            <param name="charCount">The number of characters in the string to convert.</param>
            <param name="bytes">The byte array to populate with string data.</param>
            <param name="byteIndex">The index into the byte array.</param>
            <returns>The number of bytes written to the array.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.SafeASCIIGetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Replacement for System.Text.Encoding.ASCII.GetString that terminates the string if it finds nul or control characters.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="numBytes">The number of bytes to decode.</param>
            <returns>A string that contains the results of decoding the specified sequence of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(System.Byte[],System.Int32,System.Int32,Demo3D.PLC.StringConversion.GetString)">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index into bytes of first encoded byte.</param>
            <param name="numBytes">Maximum number of bytes to decode from 'bytes'.</param>
            <param name="encoding">String converter.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32,Demo3D.PLC.StringConversion.GetString)">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index into bytes of first encoded byte.</param>
            <param name="numBytes">Maximum number of bytes to decode from 'bytes'.</param>
            <param name="encoding">String converter.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index into bytes of first encoded byte.</param>
            <param name="numBytes">Maximum number of bytes to decode from 'bytes'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32)">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index into bytes of first encoded byte.</param>
            <param name="numBytes">Maximum number of bytes to decode from 'bytes'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(System.Byte[],System.Int32)">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="numBytes">Maximum number of bytes to decode from 'bytes'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32)">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="numBytes">Maximum number of bytes to decode from 'bytes'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(System.Byte[])">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromFixedLength(Demo3D.PLC.Comms.DataArray{System.Byte})">
            <summary>
            Convert an array of bytes to a fixed length string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToFixedLength(System.String,System.Int32,System.Byte[],System.Int32,System.Int32,Demo3D.PLC.StringConversion.GetBytes)">
            <summary>
            Convert a fixed length string to an array of bytes.
            </summary>
            <param name="str">String to encode.</param>
            <param name="charCount">Max characters in string to convert.</param>
            <param name="bytes">Bytes to encode string into.</param>
            <param name="index">Index of first byte in 'bytes' to encode string.</param>
            <param name="numBytes">Maximum number of bytes in 'bytes' to encode string.</param>
            <param name="encoding">String converter.</param>
            <returns>Number of bytes encoded.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToFixedLength(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a fixed length string to an array of bytes.
            </summary>
            <param name="str">String to encode.</param>
            <param name="charCount">Max characters in string to convert.</param>
            <param name="bytes">Bytes to encode string into.</param>
            <param name="index">Index of first byte in 'bytes' to encode string.</param>
            <param name="numBytes">Maximum number of bytes in 'bytes' to encode string.</param>
            <returns>Number of bytes encoded.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToFixedLength(System.String,System.Int32,Demo3D.PLC.StringConversion.GetBytes)">
            <summary>
            Convert a fixed length string to an array of bytes.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to encode.</param>
            <param name="charCount">Max characters in string to convert.</param>
            <param name="encoding">String converter.</param>
            <returns>Encoded array of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToFixedLength(System.String,System.Int32)">
            <summary>
            Convert a fixed length string to an array of bytes.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to encode.</param>
            <param name="charCount">Max characters in string to convert.</param>
            <returns>Encoded array of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToFixedLength(System.String,Demo3D.PLC.StringConversion.GetBytes)">
            <summary>
            Convert a fixed length string to an array of bytes.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to encode.</param>
            <param name="encoding">String converter.</param>
            <returns>Encoded array of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToFixedLength(System.String)">
            <summary>
            Convert a fixed length string to an array of bytes.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to encode.</param>
            <returns>Encoded array of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(System.Byte[],System.Int32,System.Int32,Demo3D.PLC.StringConversion.GetString)">
            <summary>
            Convert an array of bytes encoding a nul terminated string, starting at byte 'offset'.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="offset">Offset of first character in byte array.</param>
            <param name="maxOffset">Offset of next byte after last possible character in byte array.</param>
            <param name="encoding">String converter.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32,Demo3D.PLC.StringConversion.GetString)">
            <summary>
            Convert an array of bytes encoding a nul terminated string, starting at byte 'offset'.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="offset">Offset of first character in byte array.</param>
            <param name="maxOffset">Offset of next byte after last possible character in byte array.</param>
            <param name="encoding">String converter.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert an array of bytes encoding a nul terminated string, starting at byte 'offset'.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="offset">Offset of first character in byte array.</param>
            <param name="maxOffset">Offset of next byte after last possible character in byte array.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32)">
            <summary>
            Convert an array of bytes encoding a nul terminated string, starting at byte 'offset'.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="offset">Offset of first character in byte array.</param>
            <param name="maxOffset">Offset of next byte after last possible character in byte array.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(System.Byte[],System.Int32)">
            <summary>
            Convert an array of bytes encoding a nul terminated string, starting at byte 'offset'.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="offset">Offset of first character in byte array.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32)">
            <summary>
            Convert an array of bytes encoding a nul terminated string, starting at byte 'offset'.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="offset">Offset of first character in byte array.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(System.Byte[])">
            <summary>
            Convert an array of bytes encoding a nul terminated string.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromNullTerminated(Demo3D.PLC.Comms.DataArray{System.Byte})">
            <summary>
            Convert an array of bytes encoding a nul terminated string.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToNullTerminated(System.String,Demo3D.PLC.StringConversion.GetBytes)">
            <summary>
            Convert a string to a nul terminated array of bytes.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to encode.</param>
            <param name="encoding">String converter.</param>
            <returns>Encoded array of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToNullTerminated(System.String)">
            <summary>
            Convert a string to a nul terminated array of bytes.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to encode.</param>
            <returns>Encoded array of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromSTXEncoded(System.Byte[])">
            <summary>
            Convert an array of bytes encoded using STX/DLE serial protocol.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromSTXEncoded(Demo3D.PLC.Comms.DataArray{System.Byte})">
            <summary>
            Convert an array of bytes encoded using STX/DLE serial protocol.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToSTXEncoded(System.String)">
            <summary>
            Convert string to STX/DLE serial protocol encoded array of bytes.
            </summary>
            <param name="str">String to encode.</param>
            <returns>Encoded array of bytes.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32@,Demo3D.PLC.StringConversion.GetString)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode (or -1).</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <param name="length">Length of string buffer decoded.</param>
            <param name="encoding">String converter.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32@,Demo3D.PLC.StringConversion.GetString)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode (or -1).</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <param name="length">Length of string buffer decoded.</param>
            <param name="encoding">String converter.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode (or -1).</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <param name="length">Length of string buffer decoded.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32@)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode (or -1).</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <param name="length">Length of string buffer decoded.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode (or -1).</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode (or -1).</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contains the string length (in bytes).
            </summary>
            <param name="bytes">Array of bytes to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(System.Byte[])">
            <summary>
            Convert an array of bytes, where the first byte contains the length of the string (in bytes).
            </summary>
            <param name="bytes">Array of bytes to convert.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte})">
            <summary>
            Convert an array of bytes, where the first byte contains the length of the string (in bytes).
            </summary>
            <param name="bytes">Array of bytes to convert.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToLengthEncoded(System.String,System.Int32,System.Boolean,System.Byte[],System.Int32,System.Int32,Demo3D.PLC.StringConversion.GetBytes)">
            <summary>
            Convert a string to an array of bytes where the first 'lengthSize' bytes contain the string length.
            </summary>
            <param name="str">String to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <param name="bytes">Byte array to encode string into.</param>
            <param name="index">Index into byte array of first encoded byte (first byte of 'length').</param>
            <param name="numBytes">Maximum number of bytes in 'bytes' to encode string into.</param>
            <param name="encoding">String converter.</param>
            <returns>Number of bytes encoded.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToLengthEncoded(System.String,System.Int32,System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a string to an array of bytes where the first 'lengthSize' bytes contain the string length.
            </summary>
            <param name="str">String to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <param name="bytes">Byte array to encode string into.</param>
            <param name="index">Index into byte array of fist encoded byte (first byte of 'length').</param>
            <param name="numBytes">Maximum number of bytes in 'bytes' to encode string into.</param>
            <returns>Number of bytes encoded.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToLengthEncoded(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert a string to an array of bytes where the first 'lengthSize' bytes contain the string length.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="maxLength">Maximum length of the string to write.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>Encoded byte array.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToLengthEncoded(System.String,System.Int32,System.Boolean)">
            <summary>
            Convert a string to an array of bytes where the first 'lengthSize' bytes contain the string length.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>Encoded byte array.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToLengthEncoded(System.String,System.Int32)">
            <summary>
            Convert a string to an array of bytes where the first byte contains the string length.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to convert.</param>
            <param name="maxLength">Maximum length of the string to write.</param>
            <returns>Encoded byte array.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToLengthEncoded(System.String)">
            <summary>
            Convert a string to an array of bytes where the first byte contains the string length.
            Only works with 1 byte character encoded strings (eg ASCII).
            </summary>
            <param name="str">String to convert.</param>
            <returns>Encoded byte array.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromMaxLengthEncoded(System.Byte[],System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contain the maximum length of the string,
            and the next 'lengthSize' bytes contain the actual string length.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode.</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromMaxLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contain the maximum length of the string,
            and the next 'lengthSize' bytes contain the actual string length.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="index">Index of first encoded byte in array (first 'length' byte).</param>
            <param name="numBytes">Maximum number of bytes to decode.</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromMaxLengthEncoded(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contain the maximum length of the string,
            and the next 'lengthSize' bytes contain the actual string length.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromMaxLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte},System.Int32,System.Boolean)">
            <summary>
            Convert an array of bytes, where the first 'lengthSize' bytes contain the maximum length of the string,
            and the next 'lengthSize' bytes contain the actual string length.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <param name="lengthSize">Number of bytes at the start that denote the length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromMaxLengthEncoded(System.Byte[])">
            <summary>
            Convert an array of bytes, where the first byte contains the maximum length of the string,
            and the next byte contains the actual string length.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromMaxLengthEncoded(Demo3D.PLC.Comms.DataArray{System.Byte})">
            <summary>
            Convert an array of bytes, where the first byte contains the maximum length of the string,
            and the next byte contains the actual string length.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromS7String(System.Byte[])">
            <summary>
            Convert a Step 7 STRING[n] to a string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertFromS7String(Demo3D.PLC.Comms.DataArray{System.Byte})">
            <summary>
            Convert a Step 7 STRING[n] to a string.
            </summary>
            <param name="bytes">Array of bytes to decode.</param>
            <returns>String representation.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToMaxLengthEncoded(System.String,System.Int32,System.Int32,System.Boolean,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert a string to an array of bytes, where the first 'lengthSize' bytes contain the maximum length of the string,
            and the next 'lengthSize' bytes contain the actual string length.
            </summary>
            <param name="str">String to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="maxLength">Maximum length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <param name="bytes">Byte array to encode string into.</param>
            <param name="index">Index into byte array of fist encoded byte (first byte of 'length').</param>
            <param name="numBytes">Maximum number of bytes in 'bytes' to encode string into.</param>
            <returns>Number of bytes encoded.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToMaxLengthEncoded(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Convert a string to an array of bytes, where the first 'lengthSize' bytes contain the maximum length of the string,
            and the next 'lengthSize' bytes contain the actual string length.
            </summary>
            <param name="str">String to convert.</param>
            <param name="lengthSize">Number of bytes at the start of the byte array that encode the length of the string.</param>
            <param name="maxLength">Maximum length of the string.</param>
            <param name="bigEndian">Encoding for 'length'.</param>
            <returns>Encoded array.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToMaxLengthEncoded(System.String,System.Int32)">
            <summary>
            Convert a string to an array of bytes, where the first byte contains the maximum length of the string,
            and the next bytes contains the actual string length.
            </summary>
            <param name="str">String to convert.</param>
            <param name="maxLength">Maximum length of the string.</param>
            <returns>Encoded array.</returns>
        </member>
        <member name="M:Demo3D.PLC.StringConversion.ConvertToS7String(System.String,System.Int32)">
            <summary>
            Convert a string to a Step 7 STRING[n], where the first byte contains the maximum length of the string,
            and the next bytes contains the actual string length.
            </summary>
            <param name="str">String to convert.</param>
            <param name="maxLength">Maximum length of the string.</param>
            <returns>Encoded array.</returns>
        </member>
        <member name="T:Demo3D.PLC.TriStateTF">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.TriStateTF.Default">
            <exclude/> 
        </member>
        <member name="F:Demo3D.PLC.TriStateTF.True">
            <exclude/> 
        </member>
        <member name="F:Demo3D.PLC.TriStateTF.False">
            <exclude/> 
        </member>
        <member name="T:Demo3D.PLC.TriStateYN">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.TriStateYN.Default">
            <exclude/> 
        </member>
        <member name="F:Demo3D.PLC.TriStateYN.Yes">
            <exclude/> 
        </member>
        <member name="F:Demo3D.PLC.TriStateYN.No">
            <exclude/> 
        </member>
        <member name="T:Demo3D.PLC.TriStateYNM">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.TriStateYNM.No">
            <exclude/> 
        </member>
        <member name="F:Demo3D.PLC.TriStateYNM.Maybe">
            <exclude/> 
        </member>
        <member name="F:Demo3D.PLC.TriStateYNM.Yes">
            <exclude/> 
        </member>
        <member name="T:Demo3D.PLC.ParseTriState">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.ParseTriState.Parse(Demo3D.PLC.TriStateTF,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.PLC.ParseTriState.Parse(Demo3D.PLC.TriStateYN,System.Boolean)">
            <exclude />
        </member>
        <member name="T:Demo3D.PLC.ValueChangedSource">
            <exclude />
        </member>
        <member name="F:Demo3D.PLC.ValueChangedSource.Internal">
            <summary>
            Value changed during execution of program.
            </summary>
        </member>
        <member name="F:Demo3D.PLC.ValueChangedSource.External">
            <summary>
            Value changed due to external 'write' event.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.Active">
            <summary>
            Defines the active state of a server item.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.Active.Active">
            <summary>
            The server item is active.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.Active.NoAccess">
            <summary>
            The server item is inactive: No access.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.Active.NoBindings">
            <summary>
            The server item is inactive: There are no bindings to this item.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.Active.ConfigurationError">
            <summary>
            The server item is inactive due to a configuration error.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.Active.NotConnected">
            <summary>
            The service item is inactive because it is not connected.
            </summary>
            <remarks>
            Only used by some servers.
            </remarks>
        </member>
        <member name="T:Demo3D.TagServer.ConnectedState">
            <summary>
            Connection state.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.ConnectedState.Disconnected">
            <summary>
            Server is disconnecting or disconnected.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.ConnectedState.Connecting">
            <summary>
            Server is connecting.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.ConnectedState.Connected">
            <summary>
            Server is connected.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.IServer">
            <summary>
            Defines a tag server.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.IServer.StateChanged">
            <summary>
            Raised when a connection state changes.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.IServer.Connected">
            <summary>
            Raised when a connection is established.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.IServer.Disconnected">
            <summary>
            Raised when disconnected.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.IServer.Reconfigured">
            <summary>
            Raised when the server is reconfigured.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.IServer.BrowseRootChanged">
            <summary>
            Raised when the browse root is changed.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.IServer.ItemsUpdated">
            <summary>
            Raised when a server item is loaded or unloaded.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.IServer.ServerName">
            <summary>
            The server name.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.IServer.Configuration">
            <summary>
            The server configuration.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.IServer.Log">
            <summary>
            Log messages.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.IServer.State">
            <summary>
            Server connection state.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.IServer.ConnectAsync(System.Boolean,System.IProgress{Demo3D.Common.LogMessage})">
            <summary>
            Initiates a connection.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.IServer.Disconnect">
            <summary>
            Disconnects the server.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.IServer.Refresh">
            <summary>
            Requests the Tag Server to refresh the server connection, and resynchronise the tag values between the Tag Server ServerItems and the PLC.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.IServer.Write(System.Collections.Generic.IReadOnlyList{Demo3D.TagServer.ServerItem.Update})">
            <summary>
            Requests values be written to the server.
            </summary>
            <param name="updates">List of server item updates to write.</param>
        </member>
        <member name="M:Demo3D.TagServer.IServer.GetBrowseRootAsync(System.Boolean,System.IProgress{Demo3D.Common.LogMessage})">
            <summary>
            The browsable items available from the server.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.IServer.Item(System.String)">
            <summary>
            Retrieves a loaded ServerItem indexed by item id.
            </summary>
            <param name="itemID">The id of the item to retrieve.</param>
            <returns>The server item (or null).</returns>
        </member>
        <member name="M:Demo3D.TagServer.IServer.LoadItem(System.String)">
            <summary>
            Requests the Tag Server load and connect to a server item in the server.
            </summary>
            <param name="itemId">The server item name.</param>
            <returns>The server item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.IServer.LoadBranch(System.String)">
            <summary>
            Requests the Tag Server load and connect to all the items in the specified branch.
            </summary>
            <param name="branch">The name of the branch to load.</param>
        </member>
        <member name="M:Demo3D.TagServer.IServer.UnloadItem(Demo3D.TagServer.ServerItem)">
            <summary>
            Requests the Tag Server disconnect and unload a server item.
            </summary>
            <param name="item">The name of the server item to disconnect and unload.</param>
        </member>
        <member name="P:Demo3D.TagServer.IServer.PropertyDatabase">
            <summary>
            Database of non-standard properties used by this server.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.ServerExtensions">
            <summary>
            IServer extensions.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerExtensions.IsConnected(Demo3D.TagServer.IServer)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerExtensions.IsConnecting(Demo3D.TagServer.IServer)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerExtensions.IsDisconnected(Demo3D.TagServer.IServer)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerExtensions.Connect(Demo3D.TagServer.IServer)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerExtensions.GetBrowseRoot(Demo3D.TagServer.IServer)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            The browsable items available from the server.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerExtensions.FindItemWithPath(Demo3D.TagServer.IServer,System.String)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Find a server item with the specified path.
            </summary>
            <param name="server">The server.</param>
            <param name="path">The path of the desired server item.</param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerExtensions.Remove(Demo3D.TagServer.IServer,Demo3D.TagServer.ServerItem)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            <para>BACKWARD COMPATIBILITY - use <see cref="M:Demo3D.TagServer.IServer.UnloadItem(Demo3D.TagServer.ServerItem)"/> instead.</para>
            Requests the Tag Server disconnect and unload a server item.
            </summary>
            <param name="server">The server.</param>
            <param name="item">The name of the server item to disconnect and unload.</param>
            <returns>true</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.NamespaceGroupDoc">
            <summary>
            The Demo3D.TagServer namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.NamespaceDoc">
            <summary>
            The Demo3D.TagServer namespace supports the high level Tag Server.
            </summary>
            <remarks>
            <para>
            See <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinTagProtocol"/> and <see cref="T:Demo3D.PLC.Comms.Builtin.BuiltinMemoryProtocol"/>
            for examples of integrating protocols into the TagServer.
            </para>
            </remarks>
        </member>
        <member name="T:Demo3D.TagServer.PropertyId">
            <summary>
            Standard and recommended property ids.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.DataType">
            <summary>
            Data type.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.Quality">
            <summary>
            Quality.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.Timestamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.AccessRights">
            <summary>
            Access rights.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.ScanRate">
            <summary>
            Scan rate.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.EUUnits">
            <summary>
            The engineering units for this item.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyId.ItemDescription">
            <summary>
            A description of the item.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.PropertyNames">
            <summary>
            Property names for properties in <see cref="T:Demo3D.TagServer.PropertyId"/>.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.DataType">
            <summary>
            Data type.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.Value">
            <summary>
            Value.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.Quality">
            <summary>
            Quality.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.Timestamp">
            <summary>
            Timestamp.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.AccessRights">
            <summary>
            Access rights.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.ScanRate">
            <summary>
            Scan rate.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.DisplayName">
            <summary>
            Display name.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.EUUnits">
            <summary>
            The engineering units for this item.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.PropertyNames.ItemDescription">
            <summary>
            A description of the item.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.PropertyNames.GetPropertyName(Demo3D.TagServer.PropertyId)">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.ServerItem">
            <summary>
            ServerItem is a cache of properties for a Tag Server Data Item on a specific server.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.#ctor(Demo3D.TagServer.IServer,System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.#ctor(Demo3D.TagServer.IServer,System.String)">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.AutoTagName">
            <summary>
            Automatically generated tag name.
            </summary>
        </member>
        <member name="T:Demo3D.TagServer.ServerItem.TriState">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.TriState.Default">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.TriState.Yes">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.TriState.No">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.ServerItem.PreserveState">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.PreserveState.Default">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.PreserveState.DontPreserveUpdates">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.PreserveState.PreserveValueUpdates">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.PreserveState.PreserveAllUpdates">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Server">
            <summary>
            The server that this server item belongs to.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.ServerName">
            <summary>
            The name of the server that this server item belongs to.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.ItemID">
            <summary>
            The server item ID; the key in the servers item database.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Active">
            <summary>
            True if the server item is active.
            </summary>
            <remarks>
            When a server item is active it's ready to exchange data.
            Active is updated programmatically (eg not fully configured, server disconnected, no bindings using this item).
            </remarks>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.ActiveState">
            <summary>
            Gets the active state.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetActiveNoNotify(Demo3D.TagServer.Active,Demo3D.TagServer.Active)">
            <summary>
            Sets the active state without notification.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetActiveNoNotify(Demo3D.TagServer.Active,System.Boolean)">
            <summary>
            Sets the active state without notification.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetActive(Demo3D.TagServer.Active,System.Boolean)">
            <summary>
            Sets the active state.
            </summary>
            <param name="flag">The active state flag to set or clear.</param>
            <param name="set">True to set the flag.</param>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Path">
            <summary>
            The path in the PLC.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetPathNoNotify(System.String)">
            <summary>
            Sets the path without notification.
            </summary>
            <param name="path">The new PLC path.</param>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.TagAddress">
            <summary>
            The underlying PLC address (if known).
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.AllowedAccess">
            <summary>
            Gets the allowed access for the server item.
            </summary>
            <remarks>
            Allowed access is deduced programmatically.
            </remarks>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.AccessRights">
            <summary>
            The access rights for the server item.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetAccessRightsNoNotify(Demo3D.PLC.Comms.AccessRights)">
            <summary>
            Sets the access rights without notification.
            </summary>
            <param name="accessRights">The new access rights.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetIOControlNoNotify(Demo3D.PLC.Comms.IOControl,Demo3D.PLC.Comms.IOControl)">
            <summary>
            Sets the effective IO control flags without notification.
            </summary>
            <param name="requestedIOControl">The requestes IO control parameters.</param>
            <param name="configuredIOControl">The configured IO control parameters.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetIOControl">
            <summary>
            Combine user flags with requested flags, to create new io control flags.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetIOControl(Demo3D.PLC.Comms.IOControl)">
            <summary>
            Internal request to set a flag. Will only result in a change to the effective flags if they're not overriden by the user.
            </summary>
            <param name="setIOControl">Control flags to set.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.ClearIOControl(Demo3D.PLC.Comms.IOControl)">
            <summary>
            Internal request to reset a flag. Will only result in a change to the effective flags if they're not overriden by the user.
            </summary>
            <param name="clearIOControl">Control flags to clear.</param>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.IOControl">
            <summary>
            IO control flags.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.ConfiguredIOControl">
            <summary>
            Configured IO control flags.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.WriteThrough">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.PreserveWrites">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.AllowMerge">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.FastScan">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Endian">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.TextEncoding">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.BoundType">
            <summary>
            The type of the bindable item that this server item is bound to.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.ConfiguredType">
            <summary>
            The configured data type.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.ConfiguredTypeGUI">
            <summary>
            The configured data type.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.TagType">
            <summary>
            The PLC tag type.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.DataType">
            <summary>
            The data type of the server item.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.ScanRate">
            <summary>
            The required scan rate for the server item.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.UserData">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.ServerItem.Update">
            <summary>
            A value update to be applied to the server item.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.Update.ServerItem">
            <summary>
            The server item for this update.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.Update.DataValue">
            <summary>
            The new data value.
            </summary>
        </member>
        <member name="F:Demo3D.TagServer.ServerItem.Update.IOControl">
            <summary>
            IO control.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.Update.#ctor(Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.IOControl)">
            <summary>
            Constructs an Update.
            </summary>
            <param name="serverItem">The server item for this update.</param>
            <param name="dataValue">The new data value.</param>
            <param name="ioControl">Specific IO control for this update (or None).</param>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.Update.GetValue">
            <summary>
            Gets the value.
            </summary>
            <returns>The value.</returns>
        </member>
        <member name="E:Demo3D.TagServer.ServerItem.SetUpdatesFromServer">
            <summary>
            Called in the server thread when value on server changes.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.TagServer.ServerItem.UpdatesFromServer">
            <summary>
            Called whenever the data changes on the server.
            </summary>
            <exclude />
        </member>
        <member name="E:Demo3D.TagServer.ServerItem.UpdatesFromModel">
            <summary>
            Called when the data changes in the model.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetValueFromModel(Demo3D.PLC.Comms.DataValue@)">
            <summary>
            Called when value in model changes, propagate to server.
            Use the class SetValuesFromModel if you want to preserve transaction boundaries.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.NotifyUpdatesFromServer(System.Collections.Generic.IReadOnlyList{Demo3D.TagServer.ServerItem.Update})">
            <summary>
            Notify that the value may have changed due to an update from the server.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.ApplyUpdatesFromServer(System.Collections.Generic.IReadOnlyList{Demo3D.TagServer.ServerItem.Update})">
            <summary>
            Apply updates in the model thread when values on the server changes.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.NotifySetUpdatesFromServer(Demo3D.TagServer.SetValuesFromServer)">
            <summary>
            Notify in the server thread when values on the server changes.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.SetValueFromServer(System.Object)">
            <summary>
            Called when value on server changes, propagate to Custom Property.
            Use the class SetValuesFromServer if you want to preserve transaction boundaries.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.DataValue">
            <summary>
            Reads and writes the value to the server.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Value">
            <summary>
            The current server value.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.Export(System.Data.DataRow,System.Collections.Generic.Dictionary{System.String,System.Boolean},System.Boolean@)">
            <exclude />
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.MetaProperties">
            <summary>
            Access non-standard properties.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Properties">
            <summary>
            Non-standard properties.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Item(Demo3D.PLC.Comms.MetaPropertyDescriptor)">
            <summary>
            Access property by property descriptor.
            </summary>
            <param name="property">The property to access.</param>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Item(System.String)">
            <summary>
            Access property by property name.
            </summary>
            <param name="propertyName">The property to access.</param>
        </member>
        <member name="P:Demo3D.TagServer.ServerItem.Item(Demo3D.TagServer.PropertyId)">
            <summary>
            Access property by id.
            </summary>
            <param name="id">The property to access.</param>
        </member>
        <member name="E:Demo3D.TagServer.ServerItem.PropertyChanged">
            <summary>
            Raised when a server item property changes.
            </summary>
        </member>
        <member name="E:Demo3D.TagServer.ServerItem.PropertiesChanged">
            <summary>
            Raised when any server item property changes.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.NotifyPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the <see cref="E:Demo3D.TagServer.ServerItem.PropertyChanged"/> and <see cref="E:Demo3D.TagServer.ServerItem.PropertiesChanged"/> events.
            </summary>
            <param name="args">The property changed event args.</param>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.NotifyPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Demo3D.TagServer.ServerItem.PropertyChanged"/> and <see cref="E:Demo3D.TagServer.ServerItem.PropertiesChanged"/> events.
            </summary>
            <param name="name">The name of the property that changed.</param>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current server item.
            Compares the server and itemid.
            </summary>
            <param name="obj">The service item to compare.</param>
            <returns>True if the specified object is equal to the current server item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.GetHashCode">
            <summary>
            Returns a hash code for the current server item.
            Based on itemid alone.
            </summary>
            <returns>A hash code for the current server item.</returns>
        </member>
        <member name="M:Demo3D.TagServer.ServerItem.ToString">
            <summary>
            Displays the value of the item.
            </summary>
            <returns>A string representation of the value of the item.</returns>
        </member>
        <member name="T:Demo3D.TagServer.EndianType">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.EndianType.Default">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.EndianType.Big">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.EndianType.Little">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.TextEncodingType">
            <exclude />
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.Default">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.FixedLengthASCII">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.FixedLengthUnicode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.NullTerminatedASCII">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.NullTerminatedUnicode">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.LengthEncodedASCII1">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.LengthEncodedASCII2BE">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.LengthEncodedASCII2LE">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.LengthEncodedASCII4LE">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.LengthEncodedUnicode2LE">
            <exclude /> 
        </member>
        <member name="F:Demo3D.TagServer.TextEncodingType.StxEtx">
            <exclude /> 
        </member>
        <member name="T:Demo3D.TagServer.ServerItemEncoding">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItemEncoding.Parse(System.String,Demo3D.TagServer.EndianType@,Demo3D.TagServer.TextEncodingType@,System.Boolean)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItemEncoding.Parse(System.String,Demo3D.TagServer.EndianType@,Demo3D.TagServer.TextEncodingType@)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItemEncoding.Format(Demo3D.TagServer.EndianType,Demo3D.TagServer.TextEncodingType)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItemEncoding.GetEndian(Demo3D.TagServer.EndianType)">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.ServerItemEncoding.GetTextEncoding(Demo3D.TagServer.TextEncodingType)">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.SetValuesList">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.SetValuesList.SetValue(Demo3D.TagServer.ServerItem,Demo3D.PLC.Comms.DataValue@,Demo3D.PLC.Comms.IOControl)">
            <summary>
            Adds a new data update.
            </summary>
            <param name="item">The server item whose value needs updating.</param>
            <param name="value">The new data value.</param>
            <param name="ioControl">Specific IO control for this update (or None).</param>
        </member>
        <member name="M:Demo3D.TagServer.SetValuesList.IndexOf(Demo3D.TagServer.ServerItem)">
            <summary>
            The index of a given ServerItem in the update list, or -1.
            </summary>
            <param name="item">ServerItem to check.</param>
            <returns>The index of a given ServerItem in the update list, or -1.</returns>
        </member>
        <member name="M:Demo3D.TagServer.SetValuesList.Contains(Demo3D.TagServer.ServerItem)">
            <summary>
            True if the given ServerItem is already present in the update list.
            </summary>
            <param name="item">ServerItem to check.</param>
            <returns>True if the given ServerItem is already present in the update list.</returns>
        </member>
        <member name="M:Demo3D.TagServer.SetValuesList.Cancel(System.Int32)">
            <summary>
            Cancel an update, removing it from the list.
            </summary>
            <param name="index">Index of update to cancel.</param>
        </member>
        <member name="M:Demo3D.TagServer.SetValuesList.Free">
            <summary>
            Deconstruct and free all resources, ready for caching and object reuse.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.SetValuesFromServer">
            <summary>
            A class for batching updates from the server.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.SetValuesFromServer.#ctor(Demo3D.Common.InstanceCache{Demo3D.TagServer.SetValuesFromServer})">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.SetValuesFromServer.Notify">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.SetValuesFromServer.Free">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.SetValuesFromModel">
            <summary>
            A class for batching updates from the model.
            </summary>
        </member>
        <member name="M:Demo3D.TagServer.SetValuesFromModel.#ctor(Demo3D.Common.InstanceCache{Demo3D.TagServer.SetValuesFromModel})">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.SetValuesFromModel.Apply">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.SetValuesFromModel.Free">
            <exclude />
        </member>
        <member name="T:Demo3D.TagServer.TagImporterConfiguration">
            <summary>
            Configures a tag server import.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.HeaderLine">
            <summary>
            The line number in the import file to find the headings.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.FirstDataLine">
            <summary>
            The first line in the import file to find tag bindings.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.MaxErrors">
            <summary>
            Abort import after this many errors. (Set to 0 to continune import regardless of the number of errors.)
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.LoadSilently">
            <summary>
            Do not report individual binding errors.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.IgnoreMissingContent">
            <summary>
            Silently ignore missing tag bindings/definitions in file.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.IgnoreMissingBindings">
            <summary>
            Ignore missing bindings.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.IgnoreEmptyExpressions">
            <summary>
            Silently ignore bindings that have no expression set.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.IgnoreMissingVisuals">
            <summary>
            Silently ignore bindings where the visual could not be found.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.IgnoreMissingProperties">
            <summary>
            Silently ignore bindings where the visual property could not be found.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.IgnoreMissingTags">
            <summary>
            Silently ignore bindings where the tag could not be found.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.IgnoreInvalidTypes">
            <summary>
            Silently ignore errors caused by the data type in the 'Type' column bnot being recognised.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.WarnOnMultipleExprBindings">
            <summary>
            Warn if the same expression is bound more than once.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.WarnOnMultiplePathBindings">
            <summary>
            Warn if the same path/address is bound more than once.
            </summary>
        </member>
        <member name="P:Demo3D.TagServer.TagImporterConfiguration.TypeColumnBelongsToTag">
            <exclude />
        </member>
        <member name="M:Demo3D.TagServer.TagImporterConfiguration.Clone">
            <summary>
            Creates a copy of this configuration.
            </summary>
            <returns>A copy of this configuration.</returns>
        </member>
        <member name="M:Demo3D.TagServer.TagImporterConfiguration.ToString">
            <exclude />
        </member>
    </members>
</doc>
