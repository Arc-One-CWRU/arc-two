<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Demo3D.Common</name>
    </assembly>
    <members>
        <member name="T:Demo3D.Common.ApplicationInfo">
            <summary>
            Class containing Emulate3D special folder locations.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.ApplicationInfo.SiteConfigurationFolderAllEditions">
            <summary>
            Gets the shared Emulate3D Application Data path.
            </summary>
        </member>
        <member name="F:Demo3D.Common.ApplicationInfo.companyOverride">
            <summary>
            An override value for the company name.
            </summary>
        </member>
        <member name="P:Demo3D.Common.ApplicationInfo.Company">
            <summary>
            Gets or sets the name of the company.
            </summary>
        </member>
        <member name="T:Demo3D.Common.AssemblyPackage">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.AssemblyPackageExt">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.AtomicValue`1">
            <summary>
            A value that can be retrieved or updated atomically.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <remarks>
            <para>
            CLI guarantees atomicity for 32-bit (or smaller, specifically 1, 2 or 4 byte) value types, and
            for reference types.  It does not guarantee atomicity for structs (even if they are 1, 2, or 4
            bytes and suitably aligned).
            </para>
            <para>
            Although it doesn't guarantee atomicity for 64-bit value types, on a 64-bit system 64-bit value
            types are expected to be atomic (so long as they're suitably aligned).
            </para>
            <para>
            Only use this for types that aren't already guaranteed to be atomic (as above), and only when you
            really care that the value is atomic and it isn't locked by some other mechanism.  In most cases
            you won't need this class.
            </para>
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.AttributeConstraint">
            This is a sample class showing how to use te Attribute Constraints Min and Range:
            
            public class MyProps {
            	int intVal=5;
            	double doubleVal=6;
            
            	[Min(3), TypeConverter(typeof(Int32Constraint))]
            	public int IntVal { get { return intVal; } set { intVal = value; } }
            
            	[Range(3.0,10.0), TypeConverter(typeof(DoubleConstraint))]
            	public double DoubleVal { get { return doubleVal; } set { doubleVal = value; } }
            }
            
            NOTE: If MyProps were derived from Globalized Properties then the
                  TypeConverter(typeof([Type]Constraint)) is done for you
            <summary>
            Implemented by Min and Range attributes.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MinAttribute">
            <summary>
            Constrain a property to be within certain values.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MaxAttribute">
            <summary>
            Constrain a property to be within certain values.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.RangeAttribute">
            <summary>
            Constrain a property to be within certain values.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.GreaterThanAttribute">
            <summary>
            Constrain a property to be within certain values.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.GreaterThanOrEqualAttribute">
            <summary>
            Constrain a property to be within certain values.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Int32Constraint">
            <summary>
            Convert a string to an int value applying constraints.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.DoubleConstraint">
            <summary>
            Convert a string to a double applying constraints and formatting to 3 decimal places.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.DoubleFormatter">
            <summary>
            Only display 3 digits after the decimal place for doubles.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.DoubleFormatter4">
            <summary>
            Only display 4 digits after the decimal place for doubles.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.FloatFormatter">
            <summary>
            Only display 4 digits after the decimal place for floats.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ScientificFormatter">
            <summary>
            No rounding.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ArrayFormatter">
            <summary>
            Only display 3 digits after the decimal place for doubles.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.EditableArrayFormatter">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ArrayCountFormatter">
            <summary>
            Display the length of the array with a description of the array elements.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Axis">
            <summary>
            Enumeration representing the X-Axis, Y-Axis or Z-Axis.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Axis.X">
            <summary>
            X Axis.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Axis.Y">
            <summary>
            Y Axis.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Axis.Z">
            <summary>
            Z Axis.
            </summary>
        </member>
        <member name="T:Demo3D.Common.BatchRegexReplaceTask">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.BezierCurve1D">
            <summary>
            Bezier curve in one dimension.
            </summary>
        </member>
        <member name="F:Demo3D.Common.BezierCurve1D.points">
            <summary>
            The list of control points.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve1D.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve1D.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructor.
            </summary>
            <param name="points">The list of control points.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve1D.Add(System.Double)">
            <summary>
            Adds a control point.
            </summary>
            <param name="point">The control point.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve1D.AddRange(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adds a list of control points.
            </summary>
            <param name="points">The list of control points.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve1D.Clear">
            <summary>
            Clears the list of control points.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve1D.Interpolate(System.Double)">
            <summary>
            Interpolates the bezier curve at the specified fractional distance along the curve.
            </summary>
            <param name="t">The fractional distance along the curve, in the range [0, 1].</param>
            <returns>The interpolated point on the curve.</returns>
        </member>
        <member name="T:Demo3D.Common.BezierCurve2D">
            <summary>
            Bezier curve in two dimensions.
            </summary>
        </member>
        <member name="F:Demo3D.Common.BezierCurve2D.points">
            <summary>
            The list of control points.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.#ctor(System.Collections.Generic.IEnumerable{Microsoft.DirectX.Vector2})">
            <summary>
            Constructor.
            </summary>
            <param name="points">The list of control points.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.Add(Microsoft.DirectX.Vector2)">
            <summary>
            Adds a control point.
            </summary>
            <param name="point">The control point.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.AddRange(System.Collections.Generic.IEnumerable{Microsoft.DirectX.Vector2})">
            <summary>
            Adds a list of control points.
            </summary>
            <param name="points">The list of control points.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.Clear">
            <summary>
            Clears the list of control points.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.Interpolate(System.Double)">
            <summary>
            Interpolates the bezier curve at the specified fractional distance along the curve.
            </summary>
            <param name="t">The fractional distance along the curve, in the range [0, 1].</param>
            <returns>The interpolated point on the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.ApproximateLength(System.Int32)">
            <summary>
            Approximates the length of the bezier curve by subdividing the curve into the specified
            number of linear segments and summing the Euclidean distances.
            </summary>
            <param name="segments">The number of segments over which to approximate the length of the curve.</param>
            <returns>The approximate length of the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.BezierCurve2D.ApproximateLength(System.Double,System.Double,System.Int32)">
            <summary>
            Approximates the length of the bezier curve between <paramref name="from"/> and
            <paramref name="to"/> by subdividing the curve interval into the specified number of
            linear segments and summing the Euclidean distances.
            </summary>
            <param name="from">The starting fractional distance along the curve.</param>
            <param name="to">The ending fractional distance along the curve.</param>
            <param name="segments">The number of segments over which to approximate the length of the curve interval.</param>
            <returns>The approximate length of the curve interval.</returns>
        </member>
        <member name="T:Demo3D.Common.BezierCurve3D">
            <summary>
            Bezier curve in three dimensions.
            </summary>
        </member>
        <member name="F:Demo3D.Common.BezierCurve3D.points">
            <summary>
            The list of control points.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.#ctor(System.Collections.Generic.IEnumerable{Microsoft.DirectX.Vector3})">
            <summary>
            Constructor.
            </summary>
            <param name="points">The list of control points.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.Add(Microsoft.DirectX.Vector3)">
            <summary>
            Adds a control point.
            </summary>
            <param name="point">The control point.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.AddRange(System.Collections.Generic.IEnumerable{Microsoft.DirectX.Vector3})">
            <summary>
            Adds a list of control points.
            </summary>
            <param name="points">The list of control points.</param>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.Clear">
            <summary>
            Clears the list of control points.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.Interpolate(System.Double)">
            <summary>
            Interpolates the bezier curve at the specified fractional distance along the curve.
            </summary>
            <param name="t">The fractional distance along the curve, in the range [0, 1].</param>
            <returns>The interpolated point on the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.ApproximateLength(System.Int32)">
            <summary>
            Approximates the length of the bezier curve by subdividing the curve into the specified
            number of linear segments and summing the Euclidean distances.
            </summary>
            <param name="segments">The number of segments over which to approximate the length of the curve.</param>
            <returns>The approximate length of the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.BezierCurve3D.ApproximateLength(System.Double,System.Double,System.Int32)">
            <summary>
            Approximates the length of the bezier curve between <paramref name="from"/> and
            <paramref name="to"/> by subdividing the curve interval into the specified number of
            linear segments and summing the Euclidean distances.
            </summary>
            <param name="from">The starting fractional distance along the curve.</param>
            <param name="to">The ending fractional distance along the curve.</param>
            <param name="segments">The number of segments over which to approximate the length of the curve interval.</param>
            <returns>The approximate length of the curve interval.</returns>
        </member>
        <member name="T:Demo3D.Common.BindableBase">
            <summary>
            Implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>INotifyPropertyChanged and includes useful methods to reduce boilerplate code.
            </summary>
        </member>
        <member name="M:Demo3D.Common.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks to see if the property is the same as the specified value. It they're different then set the value and raise an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="storage">Reference to the value that will be updated.</param>
            <param name="value">The new value to use</param>
            <param name="propertyName">The name of the property.</param>
            <returns>True if the value is changed, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Common.BindableBase.SetProperty``1(``0@,``0,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Checks to see if the property is the same as the specified value. It they're different then set the value and raise an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="storage">Reference to the value that will be updated.</param>
            <param name="value">The new value to use.</param>
            <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> for the property.</param>
            <returns>True if the value is changed, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Common.BindableBase.SetINotifyPropertyChangedProperty``1(``0@,``0,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            Checks to see if the property is the same as the specified value. It they're different then set the value and raise an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event.
            Property changes on the new value are also listened to and, if one occurs, the propertyChangedCallback handler will be invoked.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="storage">Reference to the value that will be updated.</param>
            <param name="value">The new value to use.</param>
            <param name="propertyChangedCallback">The callback to invoke when a property in the new value changes.</param>
            <param name="propName">The name of the property.</param>
            <returns>True if the value is changed, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Common.BindableBase.RaisePropertiesChanged(System.String[])">
            <summary>
            Raise an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for each value.
            </summary>
            <param name="propNames">The values to raise property changed events for.</param>
        </member>
        <member name="M:Demo3D.Common.BindableBase.RaisePropertyChanged(System.String)">
            <summary>
            Raise an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for the specified value.
            </summary>
            <param name="propName">The value to raise the property changed event for.</param>
        </member>
        <member name="M:Demo3D.Common.BindableBase.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raise an <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> event for the specified value.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> for the property.</param>
        </member>
        <member name="T:Demo3D.Common.Blob">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Blob.ReadFully(System.IO.Stream,System.Int32)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="initialLength">The initial buffer length</param>
        </member>
        <member name="T:Demo3D.Common.Catenary">
            <summary>
            Class which solves the catenary equation for a hanging wire between two points and a specified length.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Catenary.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Create a catenary.
            </summary>
            <param name="from">3D coordinate of first end.</param>
            <param name="to">3D coordinate of second end.</param>
            <param name="len">Required length of the wire between the start and end points.</param>
        </member>
        <member name="P:Demo3D.Common.Catenary.Valid">
            <summary>
            Have we successfully generated the catenary?
            <para>This may fail, for example if the supplied length is too small for the two supplied points.</para>
            </summary>
        </member>
        <member name="M:Demo3D.Common.Catenary.LengthConstraint(System.Double)">
            <summary>
            Difference in length of catenary from required length
            </summary>
            <param name="c">Catenary constant</param>
            <returns>Difference in length of catenary from required length</returns>
        </member>
        <member name="M:Demo3D.Common.Catenary.LengthConstraintDifferential(System.Double)">
            <summary>
            Differential of catenary length difference equation with respect to "c"
            </summary>
            <param name="c">Catenary constant</param>
            <returns>Differential of catenary length difference</returns>
        </member>
        <member name="M:Demo3D.Common.Catenary.CatenaryEnd">
            <summary>
            The x coordinate of the end point of the catenary
            </summary>
            <returns>x coordinate of the end point of the catenary</returns>
        </member>
        <member name="M:Demo3D.Common.Catenary.EvaluateAt(System.Double)">
            <summary>
            Evaluate catenary equation at point x
            </summary>
            <param name="x">x coordinate to evaluate at</param>
            <returns>y coordinate for supplied x coordinate</returns>
        </member>
        <member name="M:Demo3D.Common.Catenary.PointAt(System.Double)">
            <summary>
            3D coordinate along catenary, 0.0 being the start and 1.0 being the end
            </summary>
            <param name="x">distance along catenary from 0.0 to 1.0</param>
            <returns>3D coordinate of point on catenary</returns>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.SourceDirectory">
            <summary>
            >The directory where the original source files are stored for debugging.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.Assemblies">
            <summary>
            The referenced assemblies.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.OriginalAssemblyName">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.WriteSourcesToDisk">
            <summary>
            Whether to write the source files to disk or not. Only applies if <see cref="F:Demo3D.Common.CompileCSharpCodeOptions.UseProject"/> is false.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.DeleteSourcesAfterCompile">
            <summary>
            Whether to delete the source files after compilation. Only applies if <see cref="F:Demo3D.Common.CompileCSharpCodeOptions.UseProject"/> or <see cref="F:Demo3D.Common.CompileCSharpCodeOptions.WriteSourcesToDisk"/> is true.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.IncludeDebugInformation">
            <summary>
            Whether to compile debug or not.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.UseProject">
            <summary>
            Should a .csproj be used.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.OnlyCompile">
            <summary>
            Only compile up the code to a dll, do not load and cache the resulting <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.AdditionalSourceItems">
            <summary>
            Add these items temporarily to an ItemGroup/Compile
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.Errors">
            <summary>
            Any errors returns from the compilation. 
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.NamedSources">
            <summary>
            The set of sources to build the assembly from.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.PostProcessCommand">
            <summary>
            Post-processing of DLL
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.ContainerName">
            <summary>
            Name of script container. 
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.IsDLLProject">
            <summary>
            Is the script a DLL already.
            </summary>
        </member>
        <member name="F:Demo3D.Common.CompileCSharpCodeOptions.GenerateDocumentation">
            <summary>
            Should an xml documentation file be generated alongside the DLL (applies to source projects only)
            </summary>
        </member>
        <member name="M:Demo3D.Common.Compiler.Initialize">
            <summary>
            Empty method, ensures the static constructor has been called.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Compiler.RunNuGet(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Note: https://docs.nuget.org/Consume/Command-Line-Reference#Install-command
            
            Install NuGet packages from packagesConfigPath to packagesDir, with the working directory being workingDir
            </summary>
            <param name="packagesConfigPath">Full path to NuGet configuration file</param>
            <param name="packagesDir">Full path to directory to populate with packages</param>
            <param name="workingDir">Working directory for NuGet process</param>
            <param name="projectPath">Path to the csproj file</param>
            <param name="isSDK">Is the project in the SDK format</param>
        </member>
        <member name="M:Demo3D.Common.Compiler.DeleteUnreferencedProjectFiles(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Byte[]})">
            <summary>
            Deletes any files in the project directory that aren't contained within <paramref name="namedSources"/>.
            </summary>
            <param name="originalAssemblyName">The name of the assembly.</param>
            <param name="projectDir">The folder on disk containing the project file.</param>
            <param name="namedSources">The project sources.</param>
        </member>
        <member name="M:Demo3D.Common.Compiler.EnumerateFilesWithoutExcluded(System.String)">
            <summary>
            Enumerates the files that can be considered for deletion within the project directory recursively, excluding the
            directories at the root level that match <see cref="F:Demo3D.Common.Compiler.ExcludedDirectories"/>.
            </summary>
            <param name="projectDir">The directory to enumerate the files within.</param>
            <returns>
            The files within the directory and its subdirectories, filtered at the root level using <see cref="F:Demo3D.Common.Compiler.ExcludedDirectories"/>.
            </returns>
        </member>
        <member name="M:Demo3D.Common.Compiler.RemoveProperty(Microsoft.Build.Evaluation.Project,System.String)">
            <summary>
            Removes the property with the given name from the project, if it exists and does not originate from an imported file.
            </summary>
            <param name="project">The project to remove the property from.</param>
            <param name="propertyName">The name of the property to remove.</param>
            <returns>Whether the property was removed.</returns>
        </member>
        <member name="M:Demo3D.Common.Compiler.RemoveItem(Microsoft.Build.Evaluation.Project,Microsoft.Build.Evaluation.ProjectItem)">
            <summary>
            Removes the given <see cref="T:Microsoft.Build.Evaluation.ProjectItem"/> from the project, if it does not originate from an imported file.
            </summary>
            <param name="project">The project to remove the <see cref="T:Microsoft.Build.Evaluation.ProjectItem"/> from.</param>
            <param name="projectItem">The <see cref="T:Microsoft.Build.Evaluation.ProjectItem"/> to remove.</param>
            <returns>Whether the <see cref="T:Microsoft.Build.Evaluation.ProjectItem"/> was removed.</returns>
        </member>
        <member name="M:Demo3D.Common.Compiler.LoadProjectFromBytes(Microsoft.Build.Evaluation.ProjectCollection,System.Byte[])">
            <summary>
            <para>Loads the project using the given project file data, ignoring missing imports.</para>
            <para>Useful for evaluating project properties without requiring the project to exist on disk.</para>
            </summary>
            <param name="projectCollection">The <see cref="T:Microsoft.Build.Evaluation.ProjectCollection"/> to load the <see cref="T:Microsoft.Build.Evaluation.Project"/> into.</param>
            <param name="projectBytes">The bytes of the .csproj file.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.Compiler.UpgradeToDefaultItems(Microsoft.Build.Evaluation.Project)">
            <summary>
            <para>Upgrades an sdk project to use the default items behaviour (for upgrading projects created before support for this was added).</para>
            <para>Note: Must be done after an upgrade to an sdk project (specifically the packages.config upgrade, as it is a none item).</para>
            </summary>
            <param name="project">The project to upgrade to the default item sdk project behaviour.</param>
        </member>
        <member name="P:Demo3D.Common.Compiler.AssemblyCacheName.AssemblyName">
            <summary>
            The name of the cached DLL as it appears on disk, without the extension
            </summary>
        </member>
        <member name="P:Demo3D.Common.Compiler.AssemblyCacheName.AssemblyContainerName">
            <summary>
            The script container name that produced the DLL. This may be empty if we're parsing an older format cache name that
            was captured in a script that was converted to DLL.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Compiler.AssemblyCacheName.AssemblyFolderName">
            <summary>
            The folder name used in the cache to hold the DLL and related files. We don't add the container name into this
            name in order to minimise path lengths.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Compiler.AssemblyCacheName.HashCode">
            <summary>
            The hash code of the assembly requested, only present in a dynamically generated URI.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Compiler.BuildResult">
            <summary>
            Return result from compilation.
            If the assembly can be cached (it's not in memory only) then the Path is set.
            Otherwise the path is null and the Assembly is set.
            Any additional files to cache are also returned.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Compiler.Demo3DTargetsFileName">
            <summary>
            Tell MSBuild where the Demo3D libraries are without significantly changing the main Project.
            http://www.beefycode.com/post/resolving-binary-references-in-msbuild.aspx
            </summary>
        </member>
        <member name="T:Demo3D.Common.CompressedString">
            <summary>
            Compressed string class that stores long strings in compressed form in memory.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ConfigIni">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.CSharpHelper">
            <summary>
            Utility class to support generation of c# code.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.CSharpHelper.Identifier">
            <summary>
            Utility class to check and generate valid c# identifiers.
            <para>
            Modified from http://stackoverflow.com/questions/1904252/is-there-a-method-in-c-sharp-to-check-if-a-string-is-a-valid-identifier.
            </para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.CSharpHelper.Identifier.MakeValidInternal(System.String,System.Func{System.Int32,System.String},System.Boolean)">
            <summary>
            Convert given string into a usable C# identifier.
            <param name="name">Text to alter.</param>
            <param name="mapper">Function to map invalid character to a valid string.</param>
            <param name="allowQualified">Allow qualified identifers like "Demo3D.Visuals"</param>
            <returns>Usable C# identifier.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.Common.CSharpHelper.Identifier.MakeValid(System.String,System.Boolean)">
            <summary>
            Convert given string into a usable C# identifier.
            <para>
            NOTE: this is a one way conversion and could cause collisions.
            </para>
            <param name="name">Input string.</param>
            <param name="allowQualified">Allow names like "Demo3D.Visuals"</param>
            <returns>Usable C# identifier.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.Common.CSharpHelper.Identifier.MakeValidEscaped(System.String)">
            <summary>
            Convert given string into a usable C# identifier.
            <para>
            Anything invalid is converted to something that <see cref="M:Demo3D.Common.CSharpHelper.Identifier.Unescape(System.String)"/> should be able to revert.
            </para>
            <param name="name">Input string.</param>
            <returns>Usable C# identifier.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.Common.CSharpHelper.Identifier.Unescape(System.String)">
            <summary>
            Convert string created by <see cref="M:Demo3D.Common.CSharpHelper.Identifier.MakeValidEscaped(System.String)"/> back to original string.
            <param name="name">Usable C# identifier</param>
            <returns>Original string</returns>
            </summary>
        </member>
        <member name="M:Demo3D.Common.CSharpHelper.Identifier.IsValid(System.String)">
            <summary>
            Is string a valid C# identifier?
            </summary>
            <param name="name">String to check.</param>
            <returns>true if a valid C# identifier.</returns>
        </member>
        <member name="T:Demo3D.Common.Operation">
            -
            The data structure representing a diff is a List of Diff objects:
            {Diff(Operation.DELETE, "Hello"), Diff(Operation.INSERT, "Goodbye"),
             Diff(Operation.EQUAL, " world.")}
            which means: delete "Hello", add "Goodbye" and keep " world."
        </member>
        <member name="T:Demo3D.Common.Diff">
            Class representing one diff operation.
        </member>
        <member name="M:Demo3D.Common.Diff.#ctor(Demo3D.Common.Operation,System.String)">
            Constructor.  Initializes the diff with the provided values.
            @param operation One of INSERT, DELETE or EQUAL.
            @param text The text being applied.
        </member>
        <member name="M:Demo3D.Common.Diff.ToString">
            Display a human-readable version of this Diff.
            @return text version.
        </member>
        <member name="M:Demo3D.Common.Diff.Equals(System.Object)">
            Is this Diff equivalent to another Diff?
            @param d Another Diff to compare against.
            @return true or false.
        </member>
        <member name="T:Demo3D.Common.Patch">
            Class representing one patch operation.
        </member>
        <member name="M:Demo3D.Common.Patch.ToString">
            Emmulate GNU diff's format.
            Header: @@ -382,8 +481,9 @@
            Indicies are printed as 1-based, not 0-based.
            @return The GNU diff string.
        </member>
        <member name="T:Demo3D.Common.diff_match_patch">
            Class containing the diff, match and patch methods.
            Also Contains the behaviour settings.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_main(System.String,System.String)">
            Find the differences between two texts.
            Run a faster, slightly less optimal diff.
            This method allows the 'checklines' of diff_main() to be optional.
            Most of the time checklines is wanted, so default to true.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @return List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_main(System.String,System.String,System.Boolean)">
            Find the differences between two texts.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @return List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_main(System.String,System.String,System.Boolean,System.DateTime)">
            Find the differences between two texts.  Simplifies the problem by
            stripping any common prefix or suffix off the texts before diffing.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @param deadline Time when the diff should be complete by.  Used
                internally for recursive calls.  Users should set DiffTimeout
                instead.
            @return List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_compute(System.String,System.String,System.Boolean,System.DateTime)">
            Find the differences between two texts.  Assumes that the texts do not
            have any common prefix or suffix.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param checklines Speedup flag.  If false, then don't run a
                line-level diff first to identify the changed areas.
                If true, then run a faster slightly less optimal diff.
            @param deadline Time when the diff should be complete by.
            @return List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_lines(System.String,System.String)">
            Do a quick line-level diff on both strings, then rediff the parts for
            greater accuracy.
            This speedup can produce non-minimal diffs.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param deadline Time when the diff should be complete by.
            @return List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_lineMode(System.String,System.String,System.DateTime)">
            Do a quick line-level diff on both strings, then rediff the parts for
            greater accuracy.
            This speedup can produce non-minimal diffs.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param deadline Time when the diff should be complete by.
            @return List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_bisect(System.String,System.String,System.DateTime)">
            Find the 'middle snake' of a diff, split the problem in two
            and return the recursively constructed diff.
            See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param deadline Time at which to bail if not yet complete.
            @return List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_bisectSplit(System.String,System.String,System.Int32,System.Int32,System.DateTime)">
            Given the location of the 'middle snake', split the diff in two parts
            and recurse.
            @param text1 Old string to be diffed.
            @param text2 New string to be diffed.
            @param x Index of split point in text1.
            @param y Index of split point in text2.
            @param deadline Time at which to bail if not yet complete.
            @return LinkedList of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_linesToChars(System.String,System.String)">
            Split two texts into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text1 First string.
            @param text2 Second string.
            @return Three element Object array, containing the encoded text1, the
                encoded text2 and the List of unique strings.  The zeroth element
                of the List of unique strings is intentionally blank.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_linesToCharsMunge(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            Split a text into a list of strings.  Reduce the texts to a string of
            hashes where each Unicode character represents one line.
            @param text String to encode.
            @param lineArray List of unique strings.
            @param lineHash Map of strings to indices.
            @return Encoded string.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_charsToLines(System.Collections.Generic.ICollection{Demo3D.Common.Diff},System.Collections.Generic.List{System.String})">
            Rehydrate the text in a diff from a string of line hashes to real lines
            of text.
            @param diffs List of Diff objects.
            @param lineArray List of unique strings.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_commonPrefix(System.String,System.String)">
            Determine the common prefix of two strings.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the start of each string.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_commonSuffix(System.String,System.String)">
            Determine the common suffix of two strings.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the end of each string.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_commonOverlap(System.String,System.String)">
            Determine if the suffix of one string is the prefix of another.
            @param text1 First string.
            @param text2 Second string.
            @return The number of characters common to the end of the first
                string and the start of the second string.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_halfMatch(System.String,System.String)">
            Do the two texts share a Substring which is at least half the length of
            the longer text?
            This speedup can produce non-minimal diffs.
            @param text1 First string.
            @param text2 Second string.
            @return Five element String array, containing the prefix of text1, the
                suffix of text1, the prefix of text2, the suffix of text2 and the
                common middle.  Or null if there was no match.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_halfMatchI(System.String,System.String,System.Int32)">
            Does a Substring of shorttext exist within longtext such that the
            Substring is at least half the length of longtext?
            @param longtext Longer string.
            @param shorttext Shorter string.
            @param i Start index of quarter length Substring within longtext.
            @return Five element string array, containing the prefix of longtext, the
                suffix of longtext, the prefix of shorttext, the suffix of shorttext
                and the common middle.  Or null if there was no match.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_cleanupSemantic(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Reduce the number of edits by eliminating semantically trivial
            equalities.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_cleanupSemanticLossless(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Look for single edits surrounded on both sides by equalities
            which can be shifted sideways to align the edit to a word boundary.
            e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_cleanupSemanticScore(System.String,System.String)">
            Given two strings, comAdde a score representing whether the internal
            boundary falls on logical boundaries.
            Scores range from 6 (best) to 0 (worst).
            @param one First string.
            @param two Second string.
            @return The score.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_cleanupEfficiency(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Reduce the number of edits by eliminating operationally trivial
            equalities.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_cleanupMerge(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Reorder and merge like edit sections.  Merge equalities.
            Any edit section can move as long as it doesn't cross an equality.
            @param diffs List of Diff objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_xIndex(System.Collections.Generic.List{Demo3D.Common.Diff},System.Int32)">
            loc is a location in text1, comAdde and return the equivalent location in
            text2.
            e.g. "The cat" vs "The big cat", 1->1, 5->8
            @param diffs List of Diff objects.
            @param loc Location within text1.
            @return Location within text2.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_prettyHtml(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Convert a Diff list into a pretty HTML report.
            @param diffs List of Diff objects.
            @return HTML representation.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_text1(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Compute and return the source text (all equalities and deletions).
            @param diffs List of Diff objects.
            @return Source text.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_text2(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Compute and return the destination text (all equalities and insertions).
            @param diffs List of Diff objects.
            @return Destination text.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_levenshtein(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Compute the Levenshtein distance; the number of inserted, deleted or
            substituted characters.
            @param diffs List of Diff objects.
            @return Number of changes.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_toDelta(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Crush the diff into an encoded string which describes the operations
            required to transform text1 into text2.
            E.g. =3\t-2\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.
            Operations are tab-separated.  Inserted text is escaped using %xx
            notation.
            @param diffs Array of Diff objects.
            @return Delta text.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.diff_fromDelta(System.String,System.String)">
            Given the original text1, and an encoded string which describes the
            operations required to transform text1 into text2, comAdde the full diff.
            @param text1 Source string for the diff.
            @param delta Delta text.
            @return Array of Diff objects or null if invalid.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.match_main(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc'.
            Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.match_bitap(System.String,System.String,System.Int32)">
            Locate the best instance of 'pattern' in 'text' near 'loc' using the
            Bitap algorithm.  Returns -1 if no match found.
            @param text The text to search.
            @param pattern The pattern to search for.
            @param loc The location to search around.
            @return Best match index or -1.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.match_bitapScore(System.Int32,System.Int32,System.Int32,System.String)">
            Compute and return the score for a match with e errors and x location.
            @param e Number of errors in match.
            @param x Location of match.
            @param loc Expected location of match.
            @param pattern Pattern being sought.
            @return Overall score for match (0.0 = good, 1.0 = bad).
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.match_alphabet(System.String)">
            Initialise the alphabet for the Bitap algorithm.
            @param pattern The text to encode.
            @return Hash of character locations.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_addContext(Demo3D.Common.Patch,System.String)">
            Increase the context until it is unique,
            but don't let the pattern expand beyond Match_MaxBits.
            @param patch The patch to grow.
            @param text Source text.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_make(System.String,System.String)">
            Compute a list of patches to turn text1 into text2.
            A set of diffs will be computed.
            @param text1 Old text.
            @param text2 New text.
            @return List of Patch objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_make(System.Collections.Generic.List{Demo3D.Common.Diff})">
            Compute a list of patches to turn text1 into text2.
            text1 will be derived from the provided diffs.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_make(System.String,System.String,System.Collections.Generic.List{Demo3D.Common.Diff})">
            Compute a list of patches to turn text1 into text2.
            text2 is ignored, diffs are the delta between text1 and text2.
            @param text1 Old text
            @param text2 Ignored.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
            @deprecated Prefer patch_make(string text1, List&lt;Diff> diffs).
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_make(System.String,System.Collections.Generic.List{Demo3D.Common.Diff})">
            Compute a list of patches to turn text1 into text2.
            text2 is not provided, diffs are the delta between text1 and text2.
            @param text1 Old text.
            @param diffs Array of Diff objects for text1 to text2.
            @return List of Patch objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_deepCopy(System.Collections.Generic.List{Demo3D.Common.Patch})">
            Given an array of patches, return another array that is identical.
            @param patches Array of Patch objects.
            @return Array of Patch objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_apply(System.Collections.Generic.List{Demo3D.Common.Patch},System.String)">
            Merge a set of patches onto the text.  Return a patched text, as well
            as an array of true/false values indicating which patches were applied.
            @param patches Array of Patch objects
            @param text Old text.
            @return Two element Object array, containing the new text and an array of
                 bool values.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_addPadding(System.Collections.Generic.List{Demo3D.Common.Patch})">
            Add some padding on text start and end so that edges can match something.
            Intended to be called only from within patch_apply.
            @param patches Array of Patch objects.
            @return The padding string added to each side.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_splitMax(System.Collections.Generic.List{Demo3D.Common.Patch})">
            Look through the patches and break up any which are longer than the
            maximum limit of the match algorithm.
            Intended to be called only from within patch_apply.
            @param patches List of Patch objects.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_toText(System.Collections.Generic.List{Demo3D.Common.Patch})">
            Take a list of patches and return a textual representation.
            @param patches List of Patch objects.
            @return Text representation of patches.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.patch_fromText(System.String)">
            Parse a textual representation of patches and return a List of Patch
            objects.
            @param textline Text representation of patches.
            @return List of Patch objects.
            @throws ArgumentException If invalid input.
        </member>
        <member name="M:Demo3D.Common.diff_match_patch.unescapeForEncodeUriCompatability(System.String)">
             Unescape selected chars for compatability with JavaScript's encodeURI.
             In speed critical applications this could be dropped since the
             receiving application will certainly decode these fine.
             Note that this function is case-sensitive.  Thus "%3F" would not be
             unescaped.  But this is ok because it is only called with the output of
             HttpUtility.UrlEncode which returns lowercase hex.
            
             Example: "%3f" -> "?", "%24" -> "$", etc.
            
             @param str The string to escape.
             @return The escaped string.
        </member>
        <member name="T:Demo3D.Common.ExternalProcess">
            <summary>
            Class to start an external process.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ExternalProcess.Start(System.String)">
            <summary>
            Start the process registered to handle the file type indicated by the 'path'.
            </summary>
            <param name="path">The file to start a handling process for.</param>
        </member>
        <member name="M:Demo3D.Common.ExternalProcess.StartExplorer(System.String)">
            <summary>
            Open a new Windows Explorer Window with the file indicated by 'path' selected.
            </summary>
            <param name="path">The file to select in Windows Explorer.</param>
        </member>
        <member name="M:Demo3D.Common.ExternalProcess.StartExplorer(System.String,System.Boolean)">
            <summary>
            Open a new Windows Explorer Window with the file indicated by 'path' selected.
            </summary>
            <param name="path">The path to go to in Windows Explorer.</param>
            <param name="openDirectory">When given a folder path, settings this to true will open the folder, otherwise it will select it</param>
        </member>
        <member name="T:Demo3D.Common.FileExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.FileExtensions.WriteAllTextIfDifferent(System.String,System.String,System.Boolean)">
            <summary>
            Write all the text to a file.
            If the file exists and the contents are the same don't write it.
            If the directory doesn't exist create it then write the file.
            </summary>
            <returns>True if the file was written, otherwise false.</returns>
        </member>
        <member name="M:Demo3D.Common.FileExtensions.WriteAllBytesIfDifferent(System.String,System.Byte[],System.Boolean)">
            <summary>
            Write all the text to a file.
            If the file exists and the contents are the same don't write it.
            If the directory doesn't exist create it then write the file.
            </summary>
            <returns>True if the file was written, otherwise false.</returns>
        </member>
        <member name="T:Demo3D.Common.GenericHelper`1">
            <summary>
            A class to provide fast implementations of methods needed for other Generic classes.
            </summary>
            <typeparam name="T">Type.</typeparam>
        </member>
        <member name="F:Demo3D.Common.GenericHelper`1.New">
            <summary>
            Assign a new delegate to create objects using new
            instead of System.Activator.CreateInstance() which is very slow.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Geometry.AABB2D">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.AABB3D">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.Algorithms">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Circumcenter(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Determines the circumcenter of a triangle formed from three distinct points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="p3">The third point.</param>
            <returns>The circumcenter of the triangle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Circumcenter(Demo3D.Common.Geometry.Vector3D,Demo3D.Common.Geometry.Vector3D,Demo3D.Common.Geometry.Vector3D)">
            <summary>
            Determines the circumcenter of a triangle formed from three distinct points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="p3">The third point.</param>
            <returns>The circumcenter of the triangle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.MinimumEnclosingCircle(Demo3D.Common.Geometry.Vector2D[],System.Random)">
            <summary>
            Determines the minimum circle that encloses all the points provided.
            </summary>
            <remarks>
            This algorithm has time complexity O(n).
            </remarks>
            <param name="points">The array of points that the circle should enclose.</param>
            <param name="rand">The random number generator used for generating random numbers as part of the algorithm.</param>
            <returns>The minimum enclosing circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.ConvexHullXY(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Computes the 2D convex-hull of the set of points.
            </summary>
            <remarks>
            The set of points returned define the convex-hull.
            </remarks>
            <param name="points">The array of points.</param>
            <returns>The 2D convex-hull for the set of points.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.PolygonAreaXY(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Computes the (unsigned) area of the polygon.
            </summary>
            <param name="polygon">The ordered array of points defining the polygon.</param>
            <returns>The (unsigned) area.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.PolygonClockwiseXY(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Determines whether a polygon is clockwise ordered.
            </summary>
            <param name="polygon">The ordered array of points defining the polygon.</param>
            <returns>True if the polygon is clockwise ordered, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.PolygonCounterClockwiseXY(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Determines whether a polygon is counter-clockwise ordered.
            </summary>
            <param name="polygon">The ordered array of points defining the polygon.</param>
            <returns>True if the polygon is counter-clockwise ordered, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Polygon(Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Forms a polygon from a list of points, where each consecutive pair of points represents
            the end points for a line.
            </summary>
            <remarks>
            This function will return null if zero or multiple polygons are found.
            </remarks>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The formed polygon.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Polygon(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Forms a polygon from a list of points, where each consecutive pair of points represents
            the end points for a line.
            </summary>
            <remarks>
            This function will return null if zero or multiple polygons are found.
            </remarks>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The formed polygon.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Polygons(Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Forms zero or more polygons from a list of points, where each consecutive pair of points
            represents the end points for a line.
            </summary>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The array of formed polygons.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Polygons(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Forms zero or more polygons from a list of points, where each consecutive pair of points
            represents the end points for a line.
            </summary>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The array of formed polygons.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.OrderPolygons(Demo3D.Common.Geometry.Vector2D[][])">
            <summary>
            Sorts the array of polygons from inner to outer.
            </summary>
            <param name="polygons">The array of polygons.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Convex(Demo3D.Common.Geometry.Vector3D[],System.Double)">
            <summary>
            Determines whether the provided polygon is convex.
            </summary>
            <param name="polygon">The polygon.</param>
            <param name="eps">The tolerance used for allowing small non-convexity.</param>
            <returns>True if the polygon is convex, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Convex(Demo3D.Common.Geometry.Vector2D[],System.Double)">
            <summary>
            Determines whether the provided polygon is convex.
            </summary>
            <param name="polygon">The polygon.</param>
            <param name="eps">The tolerance used for allowing small non-convexity.</param>
            <returns>True if the polygon is convex, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Triangulate(Demo3D.Common.Geometry.Vector2D[],System.Int32@)">
            <summary>
            Triangulates the clockwise-winded polygon.
            </summary>
            <remarks>
            This method, as implemented, does not work with polygons containing holes.
            This algorithm has time complexity O(n^2).
            </remarks>
            <param name="polygon">The points that form the polygon, which are assumed to be supplied in clockwise order.</param>
            <param name="count">The number of valid indicies in the array returned.</param>
            <returns>The indices for the triangles.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Triangulate(Demo3D.Common.Geometry.Vector2D[],Demo3D.Common.Geometry.Vector2D[][],Demo3D.Common.Geometry.Vector2D[]@,System.Int32[]@)">
            <summary>
            Triangulates the clockwise-winded polygon with the specified (inner polygon) holes.
            </summary>
            <remarks>
            This method incorporates all holes into the outer polygon by bridging.
            </remarks>
            <param name="polygon">The outer clockwise-winded polygon.</param>
            <param name="holes">The array of inner polygons (holes).</param>
            <param name="result">The bridged polygon.</param>
            <param name="indices">The indices into the bridged polygon for the triangles.</param>
            <returns>The number of valid indices in the array of indices.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Algorithms.Extrude(Demo3D.Common.Geometry.Vector3D[],Demo3D.Common.Geometry.ICurve3D,System.Boolean,System.Double,System.Int32@)">
            <summary>
            Extrudes the specified polygon along the provided path.
            </summary>
            <remarks>
            If <paramref name="determineStart"/> is false then the extrusion starts at the beginning
            of the path.
            </remarks>
            <param name="polygon">The extrusion profile.</param>
            <param name="path">The extrusion path.</param>
            <param name="determineStart">Whether to determine the starting distance along the extrusion path.</param>
            <param name="maxStepLength">The maximum step length.</param>
            <param name="steps">The number of steps performed.</param>
            <returns>The extruded vertices for the steps, one step after another.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonAreaXYAlgorithm.ComputeSigned(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Computes the (signed) area of the polygon.
            </summary>
            <remarks>
            Assumes that the polygon has no self-crossings or internal holes.
            </remarks>
            <param name="polygon">The ordered array of points defining the polygon.</param>
            <returns>The (signed) area.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonAreaXYAlgorithm.ComputeUnsigned(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Computes the (unsigned) area of the polygon.
            </summary>
            <remarks>
            Assumes that the polygon has no self-crossings or internal holes.
            </remarks>
            <param name="polygon">The ordered array of points defining the polygon.</param>
            <returns>The (unsigned) area.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonOrderDeterminationAlgorithm.Clockwise(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Determines whether a polygon is clockwise ordered.
            </summary>
            <param name="polygon">The ordered array of points defining the polygon.</param>
            <returns>True if the polygon is clockwise ordered, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonOrderDeterminationAlgorithm.CounterClockwise(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Determines whether a polygon is counter-clockwise ordered.
            </summary>
            <param name="polygon">The ordered array of points defining the polygon.</param>
            <returns>True if the polygon is counter-clockwise ordered, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonFormer.Compute(Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Forms a polygon from a list of points, where each consecutive pair of points represents
            the end points for a line.
            </summary>
            <remarks>
            This function will return null if zero or multiple polygons are found.
            </remarks>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The formed polygon.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonFormer.Compute(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Forms a polygon from a list of points, where each consecutive pair of points represents
            the end points for a line.
            </summary>
            <remarks>
            This function will return null if zero or multiple polygons are found.
            </remarks>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The formed polygon.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonFormer.ComputeMultiple(Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Forms zero or more polygons from a list of points, where each consecutive pair of points
            represents the end points for a line.
            </summary>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The array of formed polygons.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonFormer.ComputeMultiple(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Forms zero or more polygons from a list of points, where each consecutive pair of points
            represents the end points for a line.
            </summary>
            <param name="points">The pairs of points forming lines.</param>
            <returns>The array of formed polygons.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonFormer.Polgons``1(``0[],System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Forms zero or more polygons from a list of points, where each consecutive pair of points
            represents the end points for a line.
            </summary>
            <param name="points">The pairs of points forming lines.</param>
            <param name="coincident">The comparer used to check for coincident points.</param>
            <returns>The array of formed polygons.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EarCuttingAlgorithm.Compute(Demo3D.Common.Geometry.Vector2D[],System.Int32@)">
            <summary>
            Triangulates the clockwise polygon.
            </summary>
            <remarks>
            The array of indices for the triangles which index into the points of the polygon is
            returned. There are three indicies for each triangle, corresponding to three points in
            the polygon. The points for the polygon should be supplied in a clockwise ordering.
            This algorithm is an implementation of trangulation by ear cutting. This method, as
            implemented, does not work with polygons containing holes.
            
            The time-complexity for this method is O(n^2).
            </remarks>
            <param name="polygon">The points that form the polygon, which are assumed to be in clockwise order.</param>
            <param name="count">The number of valid indicies in the array returned.</param>
            <returns>The indices for the triangles.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.HoleBridgingAlgorithm">
            <summary>
            Hole bridging algorithm, as described in the paper "Triangulation by Ear Clipping" by David
            Eberly. This is used as a preprocessing stage for ear clipping, which doesn't support holes.
            </summary>
            <remarks>
            There are many cases in which this algrorithm can fail. Pay close attention to the
            documentation for each function.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Geometry.HoleBridgingAlgorithm.Compute(Demo3D.Common.Geometry.Vector2D[],Demo3D.Common.Geometry.Vector2D[][])">
            <summary>
            Removes all the specified holes (inner polygons) from the outer polygon by bridging.
            </summary>
            <remarks>
            This function can return null if:
            
            1) The outer polygon is not closed.
            2) Any inner polygon (hole) is not closed.
            3) The outer polygon is not simple.
            4) Any inner polygon is not simple.
            5) The outer polygon intersects any inner polygon.
            6) The outer polygon touches any inner polygon.
            7) Any inner polygon encloses the outer polygon.
            
            The polygon should ideally be supplied clockwise winded, whilst the holes should be
            supplied counter-clockwise winded. If you don't do this then the function may modify
            your arrays in order to achieve the required winding!
            </remarks>
            <param name="polygon">The outer polygon.</param>
            <param name="holes">The array of inner polygons (holes).</param>
            <returns>The bridged polygon.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.HoleBridgingAlgorithm.Compute(Demo3D.Common.Geometry.Vector2D[],Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Removes the specified hole (inner polygon) from the outer polygon by bridging.
            </summary>
            <remarks>
            This function can return null if:
            
            1) The outer polygon is not closed.
            2) The inner polygon (hole) is not closed.
            3) The outer polygon is not simple.
            4) The inner polygon is not simple.
            5) The outer polygon intersects the inner polygon.
            6) The outer polygon touches the inner polygon.
            7) The inner polygon encloses the outer polygon.
            
            In the case that you have multiple holes, you must bridge each hole separately. The
            order in which you do this is very important. Perform the bridging with the inner
            polygon (hole) containing the maximum x-coordinate. The process is then repeated with
            the new outer polygon and the inner polygon (hole) that contains the next largest
            x-coordinate.
            </remarks>
            <param name="polygon">The outer polygon.</param>
            <param name="hole">The inner polygon.</param>
            <returns>The bridged polygon.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.HoleBridgingAlgorithm.FindBridge(Demo3D.Common.Geometry.Vector2D[],Demo3D.Common.Geometry.Vector2D[],System.Int32@,System.Int32@)">
            <summary>
            Finds the indices for the bridge.
            </summary>
            <remarks>
            This function can return false if:
            
            1) The outer polygon is not closed.
            2) The inner polygon (hole) is not closed.
            3) The outer polygon is not simple.
            4) The inner polygon is not simple.
            5) The outer polygon intersects the inner polygon.
            6) The outer polygon touches the inner polygon.
            7) The inner polygon encloses the outer polygon.
            
            In the case that you have multiple holes, you must bridge each hole separately. The
            order in which you do this is very important. Perform the bridging with the inner
            polygon (hole) containing the maximum x-coordinate. The process is then repeated with
            the new outer polygon and the inner polygon (hole) that contains the next largest
            x-coordinate.
            
            The first bridge index <paramref name="bidx1"/> is the index for the vertex on the outer
            polygon. The second index <paramref name="bidx2"/> is the index for the vertex on the
            inner polygon (hole).
            </remarks>
            <param name="polygon">The clockwise-winded outer polygon.</param>
            <param name="hole">The inner polygon (the hole).</param>
            <param name="bidx1">The index for the vertex on the outer polygon.</param>
            <param name="bidx2">The index for the vertex on the inner polygon (the hole).</param>
            <returns>True if a bridge was found, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ConvexHullXYAlgorithm.Compute(Demo3D.Common.Geometry.Vector2D[])">
            <summary>
            Computes the 2D convex-hull of the set of points.
            </summary>
            <remarks>
            The set of points returned define the convex-hull.
            </remarks>
            <param name="points">The array of points.</param>
            <returns>The 2D convex-hull for the set of points.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.MinimumEnclosingCircleAlgorithm.Compute(Demo3D.Common.Geometry.Vector2D[],System.Random)">
            <summary>
            Determines the minimum circle that encloses all the points provided.
            </summary>
            <param name="points">The array of points that the circle should enclose.</param>
            <param name="rand">The random number generator used for generating random numbers as part of the algorithm.</param>
            <returns>The minimum enclosing circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.MinimumEnclosingCircleAlgorithm.Expand(System.Collections.Generic.List{Demo3D.Common.Geometry.Vector2D},Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Expands the circle defined by the support set so as to enclose the provided point.
            </summary>
            <remarks>
            It is assumed that the support set is not enclosed by the circle defined by the support
            set.
            </remarks>
            <param name="supportSet">The support set.</param>
            <param name="point">The point to be enclosed.</param>
            <returns>The new circle defined by the support set.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.MinimumEnclosingCircleAlgorithm.ExpandOne(System.Collections.Generic.List{Demo3D.Common.Geometry.Vector2D},Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Expands the circle defined by the support set so as to enclose the provided point.
            </summary>
            <remarks>
            It is assumed that the support set currently contains 1 point and that the point
            provided is not enclosed by the circle defined by the support set.
            </remarks>
            <param name="supportSet">The support set.</param>
            <param name="point">The point to be enclosed.</param>
            <returns>The new circle defined by the support set.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.MinimumEnclosingCircleAlgorithm.ExpandTwo(System.Collections.Generic.List{Demo3D.Common.Geometry.Vector2D},Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Expands the circle defined by the support set so as to enclose the provided point.
            </summary>
            <remarks>
            It is assumed that the support set currently contains 2 points and that the point
            provided is not enclosed by the circle defined by the support set.
            </remarks>
            <param name="supportSet">The support set.</param>
            <param name="point">The point to be enclosed.</param>
            <returns>The new circle defined by the support set.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.MinimumEnclosingCircleAlgorithm.ExpandThree(System.Collections.Generic.List{Demo3D.Common.Geometry.Vector2D},Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Expands the circle defined by the support set so as to enclose the provided point.
            </summary>
            <remarks>
            It is assumed that the support set currently contains 3 points and that the point
            provided is not enclosed by the circle defined by the support set.
            </remarks>
            <param name="supportSet">The support set.</param>
            <param name="point">The point to be enclosed.</param>
            <returns>The new circle defined by the support set.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.MinimumEnclosingCircleAlgorithm.CircleFromTwoPoints(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Generates a minimum circle that encloses the two specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The minimum enclosing circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.MinimumEnclosingCircleAlgorithm.CircleFromThreePoints(Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D,Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Generates a minimum circle that encloses the three specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="p3">The third point.</param>
            <returns>The minimum enclosing circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.PolygonExtrusionAlgorithm.Compute(Demo3D.Common.Geometry.Vector3D[],Demo3D.Common.Geometry.ICurve3D,System.Boolean,System.Double,System.Int32@)">
            <summary>
            Extrudes the specified polygon along the provided path.
            </summary>
            <remarks>
            If <paramref name="determineStart"/> is false then the extrusion starts at the beginning
            of the path.
            </remarks>
            <param name="polygon">The extrusion profile.</param>
            <param name="path">The extrusion path.</param>
            <param name="determineStart">Whether to determine the starting distance along the extrusion path.</param>
            <param name="maxStepLength">The maximum step length.</param>
            <param name="steps">The number of steps performed.</param>
            <returns>The extruded vertices for the steps, one step after another.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Arc2D">
            <summary>
            A 2D arc of constant fininte radius.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc2D.Origin">
            <summary>
            The origin of the arc.
            </summary>
            <remarks>
            The origin of the arc is the point about which the arc is swept.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc2D.Radius">
            <summary>
            The (constant) radius swept by the arc.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc2D.Angle">
            <summary>
            The angle swept by the arc.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc2D.StartAngle">
            <summary>
            The angle at which the arc starts.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc2D.Length">
            <summary>
            The circumference of the arc.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.#ctor(Demo3D.Common.Geometry.Vector2D@,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="origin">The origin for the arc.</param>
            <param name="radius">The radius for the arc.</param>
            <param name="angle">The swept angle for the arc.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.#ctor(Demo3D.Common.Geometry.Vector2D@,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="origin">The origin for the arc.</param>
            <param name="radius">The radius for the arc.</param>
            <param name="angle">The swept angle for the arc.</param>
            <param name="start">The starting angle for the arc.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.SignedAngle(System.Double)">
            <summary>
            The signed angle corresponding to the specified length along the arc.
            </summary>
            <remarks>
            This angle is measured from the start of the arc.
            </remarks>
            <param name="s">The length along the arc.</param>
            <returns>The signed angle corresponding to the arc length.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.Point(System.Double)">
            <summary>
            The point on the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The point on the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.Tangent(System.Double)">
            <summary>
            The unit tangent to the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The tangent to the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.Normal(System.Double)">
            <summary>
            The unit normal to the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The normal to the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The (unsigned) curvature of the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.ProjectedLength(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the length along the arc closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the arc closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the arc.
            </remarks>
            <param name="closed">Whether the arc should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the arc.
            </remarks>
            <param name="closed">Whether the arc should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc2D.FromPoints(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Constructs the arc that passes through three non-collinear points.
            </summary>
            <remarks>
            The center for the constructed arc is taken as the circumcenter of the triangle defined
            by the three points. The arc starts at the specified <paramref name="startPoint"/> and
            ends at the specified <paramref name="endPoint"/>.
            
            This method assumes that the angle of the arc is in the interval [-2PI, 2PI] and that
            the point on the interior is not coincident with either the start or end points.
            </remarks>
            <param name="startPoint">The start point for the arc.</param>
            <param name="pointOnInterior">A point on the interior of the arc.</param>
            <param name="endPoint">The end point for the arc.</param>
            <returns>The constructed arc.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Arc3D">
            <summary>
            A 3D arc of constant fininte radius.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc3D.Plane">
            <summary>
            The plane in which the arc is swept.
            </summary>
            <remarks>
            The arc is centered at the origin of the plane.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc3D.Radius">
            <summary>
            The (constant) radius swept by the arc.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc3D.Angle">
            <summary>
            The angle swept by the arc.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Arc3D.Length">
            <summary>
            The circumference of the arc.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.#ctor(Demo3D.Common.Geometry.Plane3D@,System.Double,System.Double)">
            <summary>
            Constructs an arc centered in the specified plane with the specified radius and swept
            angle.
            </summary>
            <param name="plane">The plane in which the arc is swept.</param>
            <param name="radius">The radius for the arc.</param>
            <param name="angle">The swept angle for the arc.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.Point(System.Double)">
            <summary>
            The point on the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The point on the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The tangent to the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.Normal(System.Double)">
            <summary>
            The unit normal to the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The normal to the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The (unsigned) curvature of the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the arc closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the arc closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the arc.
            </remarks>
            <param name="closed">Whether the arc should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the arc.
            </remarks>
            <param name="closed">Whether the arc should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Arc3D.FromPoints(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs the arc that passes through three non-collinear points.
            </summary>
            <remarks>
            The center for the constructed arc is taken as the circumcenter of the triangle defined
            by the three points. The arc starts at the specified <paramref name="startPoint"/> and
            ends at the specified <paramref name="endPoint"/>.
            
            This method assumes that the angle of the arc is in the interval [-2PI, 2PI] and that
            the point on the interior is not coincident with either the start or end points.
            </remarks>
            <param name="startPoint">The start point for the arc.</param>
            <param name="pointOnInterior">A point on the interior of the arc.</param>
            <param name="endPoint">The end point for the arc.</param>
            <returns>The constructed arc.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Circle2D">
            <summary>
            A 2D circle of constant fininte radius.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Circle2D.Origin">
            <summary>
            The origin of the circle.
            </summary>
            <remarks>
            The origin of the circle is the center of the circle.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.Circle2D.Radius">
            <summary>
            The (constant) radius of the circle.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Circle2D.Length">
            <summary>
            The circumference of the circle.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.#ctor(Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Constructs a circle centered at the specified origin and with the specified radius.
            </summary>
            <param name="origin">The origin for the circle.</param>
            <param name="radius">The radius for the circle.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.Point(System.Double)">
            <summary>
            The point on the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The point on the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.Tangent(System.Double)">
            <summary>
            The unit tangent to the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The tangent to the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.Normal(System.Double)">
            <summary>
            The unit normal to the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The normal to the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The (unsigned) curvature of the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.ProjectedLength(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the length along the circle closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the circle closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the circle.
            </remarks>
            <param name="closed">Whether the circle should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.Contains(Demo3D.Common.Geometry.Circle2D,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines whether the specified point lies inside of the specified circle.
            </summary>
            <param name="circle">The circle.</param>
            <param name="point">The point to test.</param>
            <returns>True if the point is contained by the circle, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.Distance(Demo3D.Common.Geometry.Circle2D,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the signed Euclidean (shortest) distance from the provided point to the edge
            of the specified circle.
            </summary>
            <remarks>
            The distance will be negative if the provided point is contained by the circle and
            positive if outside of the circle.
            </remarks>
            <param name="circle">The circle.</param>
            <param name="point">The point.</param>
            <returns>The (signed) Euclidean distance from the point to the edge of the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle2D.FromPoints(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Constructs the circle that passes through three non-collinear points.
            </summary>
            <remarks>
            The center for the constructed circle is taken as the circumcenter of the triangle
            defined by the three points. The circle starts at <paramref name="p1"/>.
            
            This method assumes that the three points provided are distinct and that the points are
            not colinear.
            </remarks>
            <param name="p1">The first point on the circle.</param>
            <param name="p2">The second point on the circle.</param>
            <param name="p3">The third point on the circle.</param>
            <returns>The constructed circle.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Circle3D">
            <summary>
            A 3D circle of constant fininte radius.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Circle3D.Plane">
            <summary>
            The plane in which the circle lies.
            </summary>
            <remarks>
            The circle is centered at the origin of the plane.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.Circle3D.Radius">
            <summary>
            The (constant) radius swept by the arc.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Circle3D.Length">
            <summary>
            The circumference of the circle.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.#ctor(Demo3D.Common.Geometry.Plane3D@,System.Double)">
            <summary>
            Constructs a circle centered in the specified plane with the specified radius.
            </summary>
            <param name="plane">The plane in which the circle is swept.</param>
            <param name="radius">The radius for the circle.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.Point(System.Double)">
            <summary>
            The point on the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The point on the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The tangent to the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.Normal(System.Double)">
            <summary>
            The unit normal to the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The normal to the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the circle at the specified length along the circle.
            </summary>
            <param name="s">The length along the circle.</param>
            <returns>The (unsigned) curvature of the circle at the specified length along the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the circle closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the circle closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the circle.
            </remarks>
            <param name="closed">Whether the circle should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the circle.
            </remarks>
            <param name="closed">Whether the circle should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.Contains(Demo3D.Common.Geometry.Circle3D,Demo3D.Common.Geometry.Vector3D@,System.Double@)">
            <summary>
            Determines whether the specified point lies inside of the specified circle.
            </summary>
            <remarks>
            The provided point is projected onto the plane in which the circle lies. This projected
            point is then tested to lie inside of the circle. The distance from the provided point
            to the specifed point is set as an out parameter.
            
            This function therefore returns true if the point lies inside of the infinite cylinder
            swept by the circle in the direction of the normal of the plane. If you wish to
            determine whether the point also lies in the plane of the circle then you must also
            ensure that the <paramref name="projectionDistance"/> is less than some small value.
            </remarks>
            <param name="circle">The circle.</param>
            <param name="point">The point to test.</param>
            <param name="projectionDistance">The projection distance from the provided point to the plane in which the circle lies.</param>
            <returns>True if the point is contained by the infinite cylinder swept by the circle, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.Distance(Demo3D.Common.Geometry.Circle3D,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines (signed) the Euclidean (shortest) distance from the provided point to the
            edge of the specified circle.
            </summary>
            <remarks>
            The distance will be negative if the provided point is contained by the infinite
            cylinder swept by the circle in the direction of the normal of the plane and positive
            otherwise.
            </remarks>
            <param name="circle">The circle.</param>
            <param name="point">The point.</param>
            <returns>The (signed) Euclidean distance from the point to the edge of the circle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Circle3D.FromPoints(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs the circle that passes through three non-collinear points.
            </summary>
            <remarks>
            The center for the constructed circle is taken as the circumcenter of the triangle
            defined by the three points. The circle starts at <paramref name="p1"/>.
            
            This method assumes that the three points provided are distinct and that the points are
            not colinear.
            </remarks>
            <param name="p1">The first point on the circle.</param>
            <param name="p2">The second point on the circle.</param>
            <param name="p3">The third point on the circle.</param>
            <returns>The constructed circle.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.CompositeCurve2D">
            <summary>
            A 2D composite of one or more 2D curves.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.CompositeCurve2D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.#ctor(System.Collections.Generic.IEnumerable{Demo3D.Common.Geometry.ICurve2D})">
            <summary>
            Constructs a composite curve from the ordered enumeration of curves.
            </summary>
            <param name="curves">The curves that form the composite curve.</param>
        </member>
        <member name="P:Demo3D.Common.Geometry.CompositeCurve2D.Curves">
            <summary>
            The ordered set of curves that compose the composite curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.IndexAt(System.Double@)">
            <summary>
            The index for the component curve corresponding to the specified length along the
            composite curve.
            </summary>
            <param name="s">The length along the composite curve.</param>
            <returns>The index for the specific curve on which the length along the composite curve occurs.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.S(System.Double,Demo3D.Common.Geometry.ICurve2D@)">
            <summary>
            The component curve and the length along the compoent curve corresponding to the
            specified length along the composite curve.
            </summary>
            <param name="s">The length along the composite curve.</param>
            <param name="curve">The component curve corresponding to the length along the composite curve.</param>
            <returns>The length along the component curve at which the specified length along the composite curve occurs.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.Point(System.Double)">
            <summary>
            The point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.Tangent(System.Double)">
            <summary>
            The unit tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.Normal(System.Double)">
            <summary>
            The unit normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.ProjectedLength(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve2D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.CompositeCurve3D">
            <summary>
            A 3D composite of one or more 3D curves.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.CompositeCurve3D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.#ctor(System.Collections.Generic.IEnumerable{Demo3D.Common.Geometry.ICurve3D})">
            <summary>
            Constructs a composite curve from the ordered enumeration of curves.
            </summary>
            <param name="curves">The curves that form the composite curve.</param>
        </member>
        <member name="P:Demo3D.Common.Geometry.CompositeCurve3D.Curves">
            <summary>
            The ordered set of curves that compose the composite curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.IndexAt(System.Double@)">
            <summary>
            The index for the component curve corresponding to the specified length along the
            composite curve.
            </summary>
            <param name="s">The length along the composite curve.</param>
            <returns>The index for the specific curve on which the length along the composite curve occurs.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.S(System.Double,Demo3D.Common.Geometry.ICurve3D@)">
            <summary>
            The component curve and the length along the compoent curve corresponding to the
            specified length along the composite curve.
            </summary>
            <param name="s">The length along the composite curve.</param>
            <param name="curve">The component curve corresponding to the length along the composite curve.</param>
            <returns>The length along the component curve at which the specified length along the composite curve occurs.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.Point(System.Double)">
            <summary>
            The point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.Normal(System.Double)">
            <summary>
            The unit normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CompositeCurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Computers">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.Computers.BarycentricCoordinatesComputer2D">
            <summary>
            Efficiently computes Barycentric coordinates of a large set of point in the coordinate
            system of a single triangle.
            </summary>
            <remarks>
            Prefer <see cref="M:Demo3D.Common.Geometry.Triangle2D.BarycentricCoordinates(Demo3D.Common.Geometry.Triangle2D@,Demo3D.Common.Geometry.Vector2D@)"/> for
            cases where you want to compute the Barycentric coordinates of a single point in a
            particular triangle.
            </remarks>
        </member>
        <member name="T:Demo3D.Common.Geometry.Computers.BarycentricCoordinatesComputer3D">
            <summary>
            Efficiently computes Barycentric coordinates of a large set of point in the coordinate
            system of a single triangle.
            </summary>
            <remarks>
            Prefer <see cref="M:Demo3D.Common.Geometry.Triangle3D.BarycentricCoordinates(Demo3D.Common.Geometry.Triangle3D@,Demo3D.Common.Geometry.Vector3D@)"/> for
            cases where you want to compute the Barycentric coordinates of a single point in a
            particular triangle.
            </remarks>
        </member>
        <member name="T:Demo3D.Common.Geometry.Computers.TriangleContainsPointComputer2D">
            <summary>
            Efficiently tests a large set of points for whether a triangle encloses each.
            </summary>
            <remarks>
            You should prefer <see cref="M:Demo3D.Common.Geometry.Triangle3D.Contains(Demo3D.Common.Geometry.Triangle3D,Demo3D.Common.Geometry.Vector3D)"/> for cases
            where you want to test a single point against a particular triangle.
            triangle.
            </remarks>
        </member>
        <member name="T:Demo3D.Common.Geometry.Computers.TriangleContainsPointComputer3D">
            <summary>
            Efficiently tests a large set of points for whether a triangle encloses each.
            </summary>
            <remarks>
            You should prefer <see cref="M:Demo3D.Common.Geometry.Triangle3D.Contains(Demo3D.Common.Geometry.Triangle3D,Demo3D.Common.Geometry.Vector3D)"/> for cases
            where you want to test a single point against a particular triangle.
            triangle.
            </remarks>
        </member>
        <member name="T:Demo3D.Common.Geometry.Constants">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.Conversion">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.Continuity">
            <summary>
            Curve continuity.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Geometry.Continuity.G0">
            <summary>
            Positional continuity.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Continuity.G1">
            <summary>
            Tangency continuity.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Continuity.G2">
            <summary>
            Curvature continuity.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Geometry.CurveExtensionMethods2D">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Geometry.CurveExtensionMethods2D.DistanceStartEndPoint(Demo3D.Common.Geometry.ICurve2D)">
            <summary>
            Determines the distance between the start and end points of the curve.
            </summary>
            <param name="curve">The curve.</param>
            <returns>The distance between the start and end points.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CurveExtensionMethods2D.Closed(Demo3D.Common.Geometry.ICurve2D,System.Double)">
            <summary>
            Determines whether the curve is closed to the specified tolerance.
            </summary>
            <param name="curve">The curve.</param>
            <param name="eps">The distance tolerance.</param>
            <returns>True if the curve is closed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CurveExtensionMethods2D.RadiusOfCurvature(Demo3D.Common.Geometry.ICurve2D,System.Double)">
            <summary>
            Determines the radius of curvature at the specified distance along the curve.
            </summary>
            <param name="curve">The curve.</param>
            <param name="s">The distance along the curve.</param>
            <returns>The radius of curvature at the specified distance along the curve.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.CurveExtensionMethods3D">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Geometry.CurveExtensionMethods3D.DistanceStartEndPoint(Demo3D.Common.Geometry.ICurve3D)">
            <summary>
            Determines the distance between the start and end points of the curve.
            </summary>
            <param name="curve">The curve.</param>
            <returns>The distance between the start and end points.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CurveExtensionMethods3D.Closed(Demo3D.Common.Geometry.ICurve3D,System.Double)">
            <summary>
            Determines whether the curve is closed to the specified tolerance.
            </summary>
            <param name="curve">The curve.</param>
            <param name="eps">The distance tolerance.</param>
            <returns>True if the curve is closed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.CurveExtensionMethods3D.RadiusOfCurvature(Demo3D.Common.Geometry.ICurve3D,System.Double)">
            <summary>
            Determines the radius of curvature at the specified distance along the curve.
            </summary>
            <param name="curve">The curve.</param>
            <param name="s">The distance along the curve.</param>
            <returns>The radius of curvature at the specified distance along the curve.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.EquidistantFramedCurve3D">
            <summary>
            An equidistant framing of a 3D curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <remarks>
            The frames must be equidistant. Where a non-equidistant framing is required you should
            use <see cref="T:Demo3D.Common.Geometry.FramedCurve3D"/> instead.
            performance.
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Generator">
            <summary>
            Equidistant framing generator.
            </summary>
            <param name="frames">The list of frames, which is to be initialized.</param>
        </member>
        <member name="P:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Steps">
            <summary>
            The number of steps that frame the curve.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Count">
            <summary>
            The number of frames that compose the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.#ctor(Demo3D.Common.Geometry.ICurve3D,System.Int32)">
            <summary>
            Constructs a framed curve by sampling the provided curve at equidistant intervals.
            </summary>
            <remarks>
            Generates a Frenet-Serret framing of the provided curve.
            </remarks>
            <param name="curve">The curve to sample.</param>
            <param name="steps">The number of discrete steps in the framing (must be at least 1).</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.#ctor(Demo3D.Common.Geometry.EquidistantFramedCurve3D.Generator,System.Int32)">
            <summary>
            Constructs an equidistant framed curve using the provided generator.
            </summary>
            <remarks>
            The generator is assumed to populate the array of frames such that all sequential
            pairs of frames are equidistant.
            </remarks>
            <param name="generator">The generator, which must initialize the array of frames.</param>
            <param name="steps">The number of discrete steps in the framing (must be at least 1).</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Frame(System.Int32)">
            <summary>
            Retrieves the frame at the specified index.
            </summary>
            <param name="index">The index for the frame, in the closed-open interval [0, count).</param>
            <returns>The frame at the specified index.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.FramedLength(Demo3D.Common.Geometry.Frame3D[])">
            <summary>
            Calculates the length of the set of frames.
            </summary>
            <param name="frames">The set of frames.</param>
            <returns>The length.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.T(System.Double,System.Int32@,System.Int32@)">
            <summary>
            Determines the interpolation parameter along with the two frames between which to
            interpolate for the specified length along the curve.
            </summary>
            <remarks>
            This function does not assume equidistant frames. Therefore, to find the two frames
            that straddle the specified length along the curve, we must perform a binary search.
            </remarks>
            <param name="s">The length along the curve.</param>
            <param name="previous">The index for the previous frame.</param>
            <param name="next">The index for the next frame.</param>
            <returns>The interpolation parameter (in the interval [0, 1] for the fractional distance between previous and next).</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Point(System.Double)">
            <summary>
            The point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Normal(System.Double)">
            <summary>
            The unit normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <remarks>
            Computes the Menger curvature at the specified length along the curve.
            </remarks>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.ParallelTransport(Demo3D.Common.Geometry.ICurve3D,System.Int32)">
            <summary>
            Constructs an equidistant Parallel Transport framing of the specified curve.
            </summary>
            <param name="curve">The curve to sample.</param>
            <param name="steps">The number of discrete steps in the framing (must be at least 1).</param>
            <returns>The parallel transport curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.EquidistantFramedCurve3D.ParallelTransportGenerator(Demo3D.Common.Geometry.ICurve3D,Demo3D.Common.Geometry.Frame3D[])">
            <summary>
            Populates the array of frames by generating Parallel Transport frames from the
            provided curve.
            </summary>
            <param name="curve">The curve to sample.</param>
            <param name="frames">The array of frames to be populated.</param>
        </member>
        <member name="T:Demo3D.Common.Geometry.Frame3D">
            <summary>
            A 3D coordinate frame.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Frame3D.Origin">
            <summary>
            The origin of the frame.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Frame3D.XAxis">
            <summary>
            The x-axis direction of the frame.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Frame3D.YAxis">
            <summary>
            The y-axis direction of the frame.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Frame3D.ZAxis">
            <summary>
            The z-axis direction of the frame.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.#ctor(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a frame from the specified origin and two orthonormal axes.
            </summary>
            <remarks>
            The two specified axes must be orthonormal.
            </remarks>
            <param name="origin">The origin for the frame.</param>
            <param name="xAxis">The x-axis direction for the frame.</param>
            <param name="yAxis">The y-axis direction for the frame.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.#ctor(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a frame from the specified origin and three orthonormal axes.
            </summary>
            <remarks>
            All three axes must be orthonormal.
            </remarks>
            <param name="origin">The origin for the frame.</param>
            <param name="xAxis">The x-axis direction for the frame.</param>
            <param name="yAxis">The y-axis direction for the frame.</param>
            <param name="zAxis">The z-axis direction for the frame.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.Inverse(Demo3D.Common.Geometry.Frame3D@)">
            <summary>
            Constructs the inverse of the specified frame.
            </summary>
            <param name="frame">The frame.</param>
            <returns>The inverse of the specified frame.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.TransformNormal(Demo3D.Common.Geometry.Frame3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Transforms the specified (unit) normal vector by the specified frame.
            </summary>
            <param name="frame">The frame by which the normal is to be transformed.</param>
            <param name="normal">The (unit) normal to be transformed.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.InverseTransformNormal(Demo3D.Common.Geometry.Frame3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Transforms the specified (unit) normal by the inverse of the specified frame.
            </summary>
            <param name="frame">The frame by which the (unit) normal is to be inverse transformed.</param>
            <param name="normal">The (unit) normal to be transformed.</param>
            <returns>The transformed normal.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.TransformPoint(Demo3D.Common.Geometry.Frame3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Transforms the specified point by the specified frame.
            </summary>
            <param name="frame">The frame by which the point is to be transformed.</param>
            <param name="point">The point to be transformed.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.InverseTransformPoint(Demo3D.Common.Geometry.Frame3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Transforms the specified point by the inverse of the specified frame.
            </summary>
            <param name="frame">The frame by which the point is to be inverse transformed.</param>
            <param name="point">The point to be transformed.</param>
            <returns>The transformed point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.op_Multiply(Demo3D.Common.Geometry.Frame3D@,Demo3D.Common.Geometry.Frame3D@)">
            <summary>
            Applies the right-hand frame as a transformation to the left-hand frame.
            </summary>
            <param name="l">The left-hand frame.</param>
            <param name="r">The right-hand frame.</param>
            <returns>The transformed frame.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.FromPlane(Demo3D.Common.Geometry.Plane3D@)">
            <summary>
            Constructs a frame aligned with the specified plane.
            </summary>
            <remarks>
            The constructed frame's origin is coincident with the plane's origin.
            The constructed frame's x-axis is collinear to the plane's first axis.
            The constructed frame's y-axis is collinear to the plane's second axis.
            The constructed frame's z-axis is collinear to the plane's third axis.
            </remarks>
            <param name="plane">The plane.</param>
            <returns>The constructed frame.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.Translation(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a frame from the specified translation vector in the global axes.
            </summary>
            <param name="origin">The translation vector.</param>
            <returns>The constructed frame.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.FromAxisAngle(Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Constructs a frame where the axes are obtained by rotating the global axes about the
            specified axis by the specified angle.
            </summary>
            <param name="axis">The (unit) axis about which to rotate the frame.</param>
            <param name="angle">The angle of rotation about the axis.</param>
            <returns>The constructed frame.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Frame3D.FromAxisAngle(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Constructs a frame with the specified origin, where the axes are obtained by rotating
            the global axes about the specified axis by the specified angle.
            </summary>
            <param name="origin">The origin for the frame.</param>
            <param name="axis">The (unit) axis about which to rotate the frame.</param>
            <param name="angle">The angle of rotation about the axis.</param>
            <returns>The constructed frame.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.FramedCurve3D">
            <summary>
            A framing of a 3D curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <remarks>
            The frames do not need to be equidistant. Where an equidistant framing is required it is
            recommended to use <see cref="T:Demo3D.Common.Geometry.EquidistantFramedCurve3D"/> instead, which should yield better
            performance.
            </remarks>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.FramedCurve3D.Generator">
            <summary>
            Framing generator.
            </summary>
            <param name="frames">The list of frames, which is to be initialized.</param>
        </member>
        <member name="P:Demo3D.Common.Geometry.FramedCurve3D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.FramedCurve3D.Steps">
            <summary>
            The number of steps that frame the curve.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.FramedCurve3D.Count">
            <summary>
            The number of frames that compose the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.#ctor(Demo3D.Common.Geometry.FramedCurve3D.Generator,System.Int32)">
            <summary>
            Constructs a framed curve using the provided generator.
            </summary>
            <param name="generator">The generator, which must initialize the array of frames.</param>
            <param name="steps">The number of discrete steps in the framing (must be at least 1).</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.Frame(System.Int32)">
            <summary>
            Retrieves the frame at the specified index.
            </summary>
            <param name="index">The index for the frame, in the closed-open interval [0, count).</param>
            <returns>The frame at the specified index.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.FramedLength(Demo3D.Common.Geometry.Frame3D[])">
            <summary>
            Calculates the length of the set of frames.
            </summary>
            <param name="frames">The set of frames.</param>
            <returns>The length.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.T(System.Double,System.Int32@,System.Int32@)">
            <summary>
            Determines the interpolation parameter along with the two frames between which to
            interpolate for the specified length along the curve.
            </summary>
            <remarks>
            This function does not assume equidistant frames. Therefore, to find the two frames
            that straddle the specified length along the curve, we must perform a binary search.
            </remarks>
            <param name="s">The length along the curve.</param>
            <param name="previous">The index for the previous frame.</param>
            <param name="next">The index for the next frame.</param>
            <returns>The interpolation parameter (in the interval [0, 1] for the fractional distance between previous and next).</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.Point(System.Double)">
            <summary>
            The point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.Normal(System.Double)">
            <summary>
            The unit normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.FramedCurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Helix3D">
            <summary>
            A 3D helix of constant fininte radius.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Helix3D.Plane">
            <summary>
            The plane that forms the base of the helix.
            </summary>
            <remarks>
            The helix revolves around the origin of the plane.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.Helix3D.Radius">
            <summary>
            The (constant) radius swept by the helix.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Helix3D.Angle">
            <summary>
            The angle of revolution swept by the helix.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Helix3D.Height">
            <summary>
            The height of the helix in the direction of the plane's normal.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Helix3D.Length">
            <summary>
            The length of the helix.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.#ctor(Demo3D.Common.Geometry.Plane3D@,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a helix centered in the specified plane with the specified radius, swept
            angle and height.
            </summary>
            <param name="plane">The plane from which the helix is swept.</param>
            <param name="radius">The radius for the helix.</param>
            <param name="angle">The swept angle for the helix.</param>
            <param name="height">The height for the helix.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Pitch">
            <summary>
            The pitch of the helix.
            </summary>
            <remarks>
            This is the height swept by one complete revolution.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Slope">
            <summary>
            The slope of the helix in the direction of the plane's normal.
            </summary>
            <remarks>
            This is the height travelled per radian of revolution.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Curvature">
            <summary>
            The (unsigned) curvature of the helix.
            </summary>
            <remarks>
            The (unsigned) curvature is constant along the length of the helix.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Torsion">
            <summary>
            The torsion of the helix.
            </summary>
            <remarks>
            The torsion is constant along the length of the helix.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Point(System.Double)">
            <summary>
            The point on the helix at the specified length along the helix.
            </summary>
            <param name="s">The length along the helix.</param>
            <returns>The point on the helix at the specified length along the helix.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the helix at the specified length along the helix.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The tangent to the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Normal(System.Double)">
            <summary>
            The unit normal to the arc at the specified length along the arc.
            </summary>
            <param name="s">The length along the arc.</param>
            <returns>The normal to the arc at the specified length along the arc.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the helix at the specified length along the helix.
            </summary>
            <param name="s">The length along the helix.</param>
            <returns>The (unsigned) curvature of the helix at the specified length along the helix.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the arc closest to the specified point.
            </summary>
            <remarks>
            This method determines the length along the curve to a high degree of precision and
            accuracy at a relatively high performance cost. The method used depends on the
            eccentricity of the helix. Markley's method is used for cases where the eccentricity
            is less than or equal to one. This achieves a very high degree of accuracy and
            precision at a modest computational expense. Halley's method is used for
            eccentricities greater than one. This is still able to achieve a high degree of
            accuracy and precision, though at a greater computational expense.
            </remarks>
            <param name="point">The point.</param>
            <returns>The length along the arc closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.SolveKeplerNewton(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Solves Kepler's equation using the Newton-Raphson method.
            </summary>
            <remarks>
            Repeatedly performs Newton-Raphson steps until either the maximum number of iterations
            has been performed or the change in the eccentricity anomaly, E, is less than the
            convergence tolerance, eps.
            </remarks>
            <param name="M">The mean anomaly, M.</param>
            <param name="e">The eccentricity, e.</param>
            <param name="E0">The initial guess for the eccentricity anomaly, E.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <param name="eps">The convergence tolerance.</param>
            <returns>The solved eccentricity anomaly, E.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.SolveKeplerHalley(System.Double,System.Double,System.Double,System.Int32,System.Double)">
            <summary>
            Solves Kepler's equation using Halley's method.
            </summary>
            <remarks>
            Repeatedly performs Halley steps until either the maximum number of iterations has been
            performed or the change in the eccentricity anomaly, E, is less than the convergence
            tolerance, eps.
            </remarks>
            <param name="M">The mean anomaly, M.</param>
            <param name="e">The eccentricity, e.</param>
            <param name="E0">The initial guess for the eccentricity anomaly, E.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <param name="eps">The convergence tolerance.</param>
            <returns>The solved eccentricity anomaly, E.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.SolveKeplerMarkey(System.Double,System.Double)">
            <summary>
            Solves Kepler's equation to double floating point precision using Markley's method.
            </summary>
            <remarks>
            Markley's method is a constant-time method that initially approximates the eccentricity
            anomaly, E, by a cubic equation. Three successive Halley iterations are then used to
            further refine the solution.
            
            This method may only be used with eccentricity, e, in the interval [0, 1].
            </remarks>
            <param name="M">The mean anomaly, M.</param>
            <param name="e">The eccentricity, e.</param>
            <returns>The solved eccentricity anomaly, E.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the helix.
            </remarks>
            <param name="closed">Whether the helix should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Helix3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.ICurve2D">
            <summary>
            A 2D parametric curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.ICurve2D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve2D.Point(System.Double)">
            <summary>
            Computes the point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve2D.Tangent(System.Double)">
            <summary>
            Computes the tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve2D.Normal(System.Double)">
            <summary>
            Computes the normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve2D.Curvature(System.Double)">
            <summary>
            Computes the (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve2D.ProjectedLength(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve2D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve2D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.ICurve3D">
            <summary>
            A 3D parametric curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.ICurve3D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.Point(System.Double)">
            <summary>
            Computes the point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.Tangent(System.Double)">
            <summary>
            Computes the tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.Normal(System.Double)">
            <summary>
            Computes the normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.Curvature(System.Double)">
            <summary>
            Computes the (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ICurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.IFramedCurve3D">
            <summary>
            A framed 3D curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <remarks>
            A framed curve is a piecewise linear approximation of a curve.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.IFramedCurve3D.Count">
            <summary>
            The number of frames that compose the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.IFramedCurve3D.Frame(System.Int32)">
            <summary>
            Retrieves the frame at the specified index.
            </summary>
            <param name="index">The index for the frame, in the closed-open interval [0, count).</param>
            <returns>The frame.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Intersection">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Geometry.Intersection.Exists">
            <summary>
            Whether the intersection exists.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Intersection.S1">
            <summary>
            The distance along the first curve at which the intersection occurs.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Intersection.S2">
            <summary>
            The distance along the second curve at which the intersection occurs.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersection.#ctor(System.Boolean,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="exists">Whether the intersection exists.</param>
            <param name="s1">The distance along the first curve at which the intersection occurs.</param>
            <param name="s2">The distance along the second curve at which the intersection occurs.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersection.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="s1">The distance along the first curve at which the intersection occurs.</param>
            <param name="s2">The distance along the second curve at which the intersection occurs.</param>
        </member>
        <member name="F:Demo3D.Common.Geometry.Intersection.None">
            <summary>
            Intersection doesn't exist.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Geometry.Intersect">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Swap(Demo3D.Common.Geometry.Intersection@)">
            <summary>
            Swaps the distances along the curves for the specified intersection.
            </summary>
            <param name="intersection">The intersection.</param>
            <returns>The intersection with swapped distances.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.ICurve2D,Demo3D.Common.Geometry.ICurve2D)">
            <summary>
            Performs an intersection test between two curves.
            </summary>
            <remarks>
            Use of this method should be avoided if you know the types of the curves.
            </remarks>
            <param name="curve1">The first curve.</param>
            <param name="curve2">The second curve.</param>
            <returns>The intersections.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.TwiceSignedTriangleArea(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Calculates twice the signed area for the triangle given by the three points.
            </summary>
            <remarks>
            The area is positive if the triangle ABC is clockwise, otherwise the area is negative.
            </remarks>
            <param name="a">The first point for the triangle.</param>
            <param name="b">The second point for the triangle.</param>
            <param name="c">The third point for the triangle.</param>
            <returns>Twice the signed area of the triangle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.LineSegment2D@,Demo3D.Common.Geometry.LineSegment2D@)">
            <summary>
            Performs an intersection test between the two line segments.
            </summary>
            <param name="line1">The first line segment.</param>
            <param name="line2">The second line segment.</param>
            <returns>The result of the intersection test.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.LineSegment2D@,Demo3D.Common.Geometry.Circle2D@,Demo3D.Common.Geometry.Intersection@,Demo3D.Common.Geometry.Intersection@)">
            <summary>
            Performs an intersection test between a line segment and a circle.
            </summary>
            <param name="line">The line segment.</param>
            <param name="circle">The circle.</param>
            <param name="near">The near intersection.</param>
            <param name="far">The far intersection.</param>
            <returns>The number of intersections found.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.AngleInRange(System.Double@,Demo3D.Common.Geometry.Arc2D@)">
            <summary>
            Checks whether the provided angle (measured from the arc's start angle) is in the valid
            range of the arc's sweep. The provided angle is normalized to the valid range where
            possible.
            </summary>
            <param name="angle">The angle to be checked (and normalized).</param>
            <param name="arc">The arc.</param>
            <returns>True if the provided angle is in the valid range, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.LineSegment2D@,Demo3D.Common.Geometry.Arc2D@,Demo3D.Common.Geometry.Intersection@,Demo3D.Common.Geometry.Intersection@)">
            <summary>
            Performs an intersection test between a line segment and an arc.
            </summary>
            <param name="line">The line segment.</param>
            <param name="arc">The arc.</param>
            <param name="near">The near intersection.</param>
            <param name="far">The far intersection.</param>
            <returns>The number of intersections found.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.Circle2D@,Demo3D.Common.Geometry.Circle2D@,Demo3D.Common.Geometry.Intersection@,Demo3D.Common.Geometry.Intersection@)">
            <summary>
            Performs an intersection test between two circles.
            </summary>
            <param name="circle1">The first circle.</param>
            <param name="circle2">The second circle.</param>
            <param name="result1">The first intersection.</param>
            <param name="result2">The second intersection.</param>
            <returns>The number of intersections found.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.Circle2D@,Demo3D.Common.Geometry.Arc2D@,Demo3D.Common.Geometry.Intersection@,Demo3D.Common.Geometry.Intersection@)">
            <summary>
            Performs an intersection test between a line segment and an arc.
            </summary>
            <param name="circle">The circle.</param>
            <param name="arc">The arc.</param>
            <param name="result1">The first intersection.</param>
            <param name="result2">The second intersection.</param>
            <returns>The number of intersections found.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.Arc2D@,Demo3D.Common.Geometry.Arc2D@,Demo3D.Common.Geometry.Intersection@,Demo3D.Common.Geometry.Intersection@)">
            <summary>
            Performs an intersection test between two arcs.
            </summary>
            <param name="arc1">The first arc.</param>
            <param name="arc2">The second arc.</param>
            <param name="result1">The first intersection.</param>
            <param name="result2">The second intersection.</param>
            <returns>The number of intersections found.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.IntersectSlab(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Performs an intersection test in one dimension between a line and an infinite slab.
            </summary>
            <param name="start">The start coordinate for the line.</param>
            <param name="direction">The direction coordinate for the line.</param>
            <param name="min">The minimum coordinate for the slab.</param>
            <param name="max">The maximum coordinate for the slab.</param>
            <param name="near">The near intersection distance.</param>
            <param name="far">The far intersection distance.</param>
            <returns>The number of intersections.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.AABB2D@,Demo3D.Common.Geometry.Ray2D@,System.Double@,System.Double@)">
            <summary>
            Performs an intersection test between an AABB and a ray.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="ray">The ray.</param>
            <param name="smin">The first intersection distance.</param>
            <param name="smax">The second intersection distance.</param>
            <returns>Whether the ray intersects the AABB.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.AABB2D@,Demo3D.Common.Geometry.LineSegment2D@,System.Double@,System.Double@)">
            <summary>
            Performs an intersection test between an AABB and a line segment.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="line">The line segment.</param>
            <param name="smin">The first intersection distance.</param>
            <param name="smax">The second intersection distance.</param>
            <returns>The number of intersections.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.AABB2D@,Demo3D.Common.Geometry.Arc2D@,System.Double[])">
            <summary>
            Performs an intersection test between an AABB and an arc.
            </summary>
            <remarks>
            The array of intersection distances <paramref name="s"/> is populated. Up to 8 values
            may be inserted. Note that the distances are not ordered. You should sort the array if
            necessary.
            </remarks>
            <param name="aabb">The AABB.</param>
            <param name="arc">The arc.</param>
            <param name="s">The array of intersection distances.</param>
            <returns>The number of intersections.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.AABB3D@,Demo3D.Common.Geometry.Plane3D@)">
            <summary>
            Performs an intersection test between an AABB and a plane.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="plane">The plane.</param>
            <returns>True if the AABB intersects the plane, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.AABB3D@,Demo3D.Common.Geometry.Triangle3D@)">
            <summary>
            Performs an intersection test between an AABB and a triangle.
            </summary>
            <param name="aabb">The AABB.</param>
            <param name="triangle">The triangle.</param>
            <returns>True if the AABB intersects the triangle, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.Triangle3D@,Demo3D.Common.Geometry.Ray3D@,System.Double@)">
            <summary>
            Performs an intersection test between a ray and a triangle.
            </summary>
            <remarks>
            Note that this intersection test in directed. If the ray direction and triangle normal
            are not opposed then this function will return false. This function may report a negative
            intersection distance.
            </remarks>
            <param name="triangle">The triangle.</param>
            <param name="ray">The ray.</param>
            <param name="s">The distance along the ray at which the intersection occurs.</param>
            <returns>True if the ray intersects the triangle, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Ray3D@,System.Double@)">
            <summary>
            Performs an intersection test between a ray and a plane.
            </summary>
            <remarks>
            If the ray intersects the plane at a negative distance along the ray then this function
            will return false. However, the intersection distance <paramref name="s"/> will be
            correctly set.
            </remarks>
            <param name="plane">The plane,</param>
            <param name="ray">The ray.</param>
            <param name="s">The distance along the ray at which the intersection occurs.</param>
            <returns>True if the ray intersects the plane, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.LineSegment2D@,Demo3D.Common.Geometry.Ray2D@,System.Double@,System.Double@)">
            <summary>
            Performs an intersection test between a ray and a line segment.
            </summary>
            <remarks>
            If the ray doesn't intersect the line segment then this function will return false.
            However, if the ray does intersect the infinite line coincident to the line segment then
            the intersection distances <paramref name="s1"/> and <paramref name="s2"/> will be
            correctly set.
            
            Note that if the ray is parallel to the line segment then this function will return
            false, regardless of whether the two are coincident or not.
            </remarks>
            <param name="segment">The line segment.</param>
            <param name="ray">The ray.</param>
            <param name="s1">The distance along the line segment at which the intersection occurs.</param>
            <param name="s2">The distance along the ray at which the intersection occurs.</param>
            <returns>True if the ray intersects the line segment, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Intersect.Test(Demo3D.Common.Geometry.LineSegment3D@,Demo3D.Common.Geometry.Ray3D@,System.Double@,System.Double@)">
            <summary>
            Determines the closest distance between a ray and a line segment.
            </summary>
            <param name="segment">The line segment.</param>
            <param name="ray">The ray.</param>
            <param name="s1">The distance along the line segment at which the intersection occurs.</param>
            <param name="s2">The distance along the ray at which the intersection occurs.</param>
            <returns>The closest distance between the line segment and the ray.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.KDTree">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.KDTree.Node">
            <summary>
            A K-D Node.
            </summary>
            <remarks>
            A K-D node may be an internal node or a leaf node. An internal node stores the axis that
            the split/partition is along along with the coordinate value of the splitting point
            along that axis. A leaf node stores an index that references an array of the data
            contained in the leaf. For efficient storage, we can represent both using just 4 bytes.
            For an internal node, we use the last two bits to store the axis (00=x, 01=y, 10=z).
            This leaves 32 bits for the coordinate value, which only slightly reduces precision.
            If the last two bits are 11 then the node is a leaf node and the first 30 bits are used
            to store an index that references the array of data contained by the node.
            </remarks>
        </member>
        <member name="T:Demo3D.Common.Geometry.LineSegment2D">
            <summary>
            A 2D line segment of finite length.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.LineSegment2D.Start">
            <summary>
            The start point of the line segment.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.LineSegment2D.Direction">
            <summary>
            The direction of the line segment.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.LineSegment2D.Length">
            <summary>
            The length of the line segment.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.#ctor(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Constructor for a line segment starting at the specified point and having the specified
            direction and length.
            </summary>
            <param name="start">The start point for the line.</param>
            <param name="direction">The (unit) direction for the line.</param>
            <param name="length">The length for the line.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.End">
            <summary>
            Determines the end-point of the line segment.
            </summary>
            <returns>The end-point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.Mid">
            <summary>
            Determines the mid-point of the line segment.
            </summary>
            <returns>The mid-point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.Point(System.Double)">
            <summary>
            The point on the line at the specified length along the line.
            </summary>
            <param name="s">The length along the line.</param>
            <returns>The point on the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.Tangent(System.Double)">
            <summary>
            The unit tangent to the line at the specified length along the line.
            </summary>
            <remarks>
            The tangent will be constant along the full length of the line.
            </remarks>
            <param name="s">The length along the line.</param>
            <returns>The tangent to the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.Normal(System.Double)">
            <summary>
            The unit normal to the line at the specified length along the line.
            </summary>
            <remarks>
            The normal for a straight line is not well defined. The only guarantees is that this
            method will return a unit vector orthogonal to the tangent at the specified length along
            the line. The normal will be constant along the full length of the line.
            </remarks>
            <param name="s">The length along the line.</param>
            <returns>The normal to the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the line at the specified length along the line.
            </summary>
            <param name="s">The length along the line.</param>
            <returns>The (unsigned) curvature of the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.ProjectedLength(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the length along the line closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the line closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the line.
            </remarks>
            <param name="closed">Whether the line should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.DistanceSq(Demo3D.Common.Geometry.Vector2D@,System.Double@)">
            <summary>
            Determines the square of the shortest distance of the specified point from the line
            segment.
            </summary>
            <param name="point">The point.</param>
            <param name="s">The length along the line which is closest to the specified point.</param>
            <returns>The square of the shortest distance from the point to the line segement.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.Distance(Demo3D.Common.Geometry.Vector2D@,System.Double@)">
            <summary>
            Determines the shortest distance of the specified point from the line segment.
            </summary>
            <param name="point">The point.</param>
            <param name="s">The length along the line which is closest to the specified point.</param>
            <returns>The shortest distance from the point to the line segement.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.FromOriginToPoint(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Constructor for a line segment starting at (0, 0) and ending at the specified point.
            </summary>
            <param name="end">The end point for the line.</param>
            <returns>The constructed line segment.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.FromPointToPoint(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Constructor for a line segment starting and ending at the specified points.
            </summary>
            <param name="start">The start point for the line.</param>
            <param name="end">The end point for the line.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment2D.Reversed(Demo3D.Common.Geometry.LineSegment2D)">
            <summary>
            Constructs a line that is the reversal of the provided source line.
            </summary>
            <param name="line">The source line.</param>
            <returns>The reversal of the source line.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.LineSegment3D">
            <summary>
            A 3D line segment of finite length.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.LineSegment3D.Start">
            <summary>
            The start point of the line segment.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.LineSegment3D.Direction">
            <summary>
            The direction of the line segment.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.LineSegment3D.Length">
            <summary>
            The length of the line segment.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.#ctor(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Constructor for a line segment starting at the specified point and having the specified
            direction and length.
            </summary>
            <param name="start">The start point for the line.</param>
            <param name="direction">The (unit) direction for the line.</param>
            <param name="length">The length for the line.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.End">
            <summary>
            Determines the end-point of the line segment.
            </summary>
            <returns>The end-point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.Mid">
            <summary>
            Determines the mid-point of the line segment.
            </summary>
            <returns>The mid-point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.Point(System.Double)">
            <summary>
            The point on the line at the specified length along the line.
            </summary>
            <param name="s">The length along the line.</param>
            <returns>The point on the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the line at the specified length along the line.
            </summary>
            <remarks>
            The tangent will be constant along the full length of the line.
            </remarks>
            <param name="s">The length along the line.</param>
            <returns>The tangent to the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.Normal(System.Double)">
            <summary>
            The unit normal to the line at the specified length along the line.
            </summary>
            <remarks>
            The normal for a straight line is not well defined. The only guarantees is that this
            method will return a unit vector orthogonal to the tangent at the specified length along
            the line. The normal will be constant along the full length of the line.
            </remarks>
            <param name="s">The length along the line.</param>
            <returns>The normal to the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the line at the specified length along the line.
            </summary>
            <param name="s">The length along the line.</param>
            <returns>The (unsigned) curvature of the line at the specified length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the line closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the line closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the line.
            </remarks>
            <param name="closed">Whether the line should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the line.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.FromOriginToPoint(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructor for a line segment starting at (0, 0, 0) and ending at the specified point.
            </summary>
            <param name="end">The end point for the line.</param>
            <returns>The constructed line segment.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.FromPointToPoint(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructor for a line segment starting and ending at the specified points.
            </summary>
            <param name="start">The start point for the line.</param>
            <param name="end">The end point for the line.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.LineSegment3D.Reversed(Demo3D.Common.Geometry.LineSegment3D)">
            <summary>
            Constructs a line that is the reversal of the provided source line.
            </summary>
            <param name="line">The source line.</param>
            <returns>The reversal of the source line.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.NURBSCurve3D">
            <summary>
            A 3D Non-Uniform Rational B-Spline curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <remarks>
            The NURBS curve may be any degree greater than or equal to 1. Line and composite line curves
            have degree 1. Circles and ellipses have degree 2. Free-form curves are typically degree 3
            or 5.
            
            The NURBS curve may be open or closed. Open curves have distinct (non-coincident) start and
            end points. Closed curves wrap around to form a continuous curve. Open curves may be
            clamped, ensuring that the curve passes through the start and end control points. Closed
            curves may be periodic curves, which have an overlapping seam helping to maintain continuity
            along the seam. 
            
            Non-Uniform: The knots don't need to be equally spaced. Uniform B-Splines are supported
                         without limitation by setting all knots to be equally spaced.
            Rational:    Invariant under rotation, scale, translation and perspective transformations.
                         Non-rational B-Splines are supported without limitation by setting all control
                         point weights to unity.
            </remarks>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Geometry.NURBSCurve3D.order">
            <summary>
            The order of the NURBS curve (order = degree + 1).
            </summary>
            <remarks>
            The order must be at least 2, so that the degree is at least 1.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.Geometry.NURBSCurve3D.count">
            <summary>
            The number of control points.
            </summary>
            <remarks>
            The number of control points must be greater than or equal to the order of the curve.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.Geometry.NURBSCurve3D.knots">
            <summary>
            The knot vector.
            </summary>
            <remarks>
            The knot vector has length equal to <see cref="F:Demo3D.Common.Geometry.NURBSCurve3D.order"/> + <see cref="F:Demo3D.Common.Geometry.NURBSCurve3D.count"/>.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.Geometry.NURBSCurve3D.cp">
            <summary>
            The ordered array of control point coordinates and weights.
            </summary>
            <remarks>
            The number of control points must be at least equal to the order.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.Geometry.NURBSCurve3D.lengths">
            <summary>
            The approximate arc-lengths of the curve at uniform parameter value intervals.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.NURBSCurve3D.Order">
            <summary>
            The order of the curve.
            </summary>
            <remarks>
            This is one greater than the <see cref="P:Demo3D.Common.Geometry.NURBSCurve3D.Degree"/> of the curve. The number of control
            points must be at least equal to the order.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.NURBSCurve3D.Degree">
            <summary>
            The degree of the curve.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.NURBSCurve3D.Count">
            <summary>
            The number of control points that form the curve.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.NURBSCurve3D.Knots">
            <summary>
            The knot vector.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.NURBSCurve3D.ControlPoints">
            <summary>
            The ordered array of control points that form the curve.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.NURBSCurve3D.Length">
            <summary>
            The (approximate) length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.#ctor(System.Int32,System.Double[],Demo3D.Common.Geometry.Vector4D[])">
            <summary>
            Constructor.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="knots">The knot vector.</param>
            <param name="cp">The control points.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Periodic">
            <summary>
            Determines whether the curve is periodic.
            </summary>
            <returns>True if the curve is periodic, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Knot(System.Int32)">
            <summary>
            Retrieves the value of the knot at the specified index.
            </summary>
            <param name="index">The index for the knot.</param>
            <returns>The value of the knot.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.KnotMultiplicity(System.Int32)">
            <summary>
            Determines the multiplicity for the knot at the specified index.
            </summary>
            <param name="index">The index for the knot.</param>
            <returns>The multiplicity of the knot.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Domain(System.Double@,System.Double@)">
            <summary>
            Determines the domain for the curve.
            </summary>
            <param name="min">The minimum value in the domain.</param>
            <param name="max">The maximum value in the domain.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.SpanT(System.Double)">
            <summary>
            Determines the knot span for the specified parameter value.
            </summary>
            <param name="t">The parameter value.</param>
            <returns>The knot span.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.ApproximateLengthsPiecewiseLinear(System.Int32,System.Int32,System.Int32,System.Double[],Demo3D.Common.Geometry.Vector4D[])">
            <summary>
            Approximates the arc-lengths of the curve using a specified number of piecewise linear
            segments of uniform parameter value length.
            </summary>
            <remarks>
            This method will never overestimate the length of the curve but will always
            underestimate the length of the curve unless the curve is a straight line.
            </remarks>
            <param name="steps">The number of piecewise linear segments.</param>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector.</param>
            <param name="cp">The control points.</param>
            <returns>The approximate arc-lengths along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.ApproximateLengthsPiecewiseLinear(System.Int32,System.Int32,System.Double[],Demo3D.Common.Geometry.Vector4D[],System.Double,System.Int32)">
            <summary>
            Approximates the arc-lengths of the curve using a number of piecewise linear segments
            of uniform parameter value length.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector.</param>
            <param name="cp">The control points.</param>
            <param name="eps">The tolerance for the change in the squared length of the curve.</param>
            <param name="max">The maximum number of piecewise linear segments.</param>
            <returns>The number of piecewise linear segments.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.PiecewiseLinearSteps(System.Double,System.Int32,System.Int32,System.Int32,System.Double[],Demo3D.Common.Geometry.Vector4D[])">
            <summary>
            Determines the number of piecewise linear segments to use for approximating the curve.
            </summary>
            <param name="eps">The tolerance for the change in the squared length of the curve.</param>
            <param name="max">The maximum number of piecewise linear segments.</param>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector.</param>
            <param name="cp">The control points.</param>
            <returns>The number of piecewise linear segments.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreateClampedUniformNonRational(System.Int32,Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Creates a Clamped Uniform Non-Rational B-Spline.
            </summary>
            <remarks>
            The constructed NURBS curve has knots that are normalized (0..1), equally spaced
            (uniform) and control point weights set to unity (non-rational). The curve passes
            through the start and end control points (clamped).
            </remarks>
            <param name="order">The order of the curve (must be at least 2).</param>
            <param name="points">The ordered array of control points.</param>
            <returns>The constructed curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreateClampedUniformNonRational(System.Int32,Demo3D.Common.Geometry.Vector3D[],System.Double)">
            <summary>
            Creates a Clamped Uniform Non-Rational B-Spline.
            </summary>
            <remarks>
            The constructed NURBS curve has knots that are equally spaced (uniform) and control
            point weights set to unity (non-rational). The curve passes through the start and end
            control points (clamped).
            </remarks>
            <param name="order">The order of the curve (must be at least 2).</param>
            <param name="points">The ordered array of control points.</param>
            <param name="spacing">The uniform knot spacing.</param>
            <returns>The constructed curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreateClampedUniformRational(System.Int32,Demo3D.Common.Geometry.Vector4D[],System.Double)">
            <summary>
            Creates a Clamped Uniform Rational B-Spline.
            </summary>
            <remarks>
            The constructed NURBS curve has knots that are equally spaced (uniform). The curve
            passes through the start and end control points (clamped).
            </remarks>
            <param name="order">The order of the curve (must be at least 2).</param>
            <param name="points">The ordered array of control points.</param>
            <param name="spacing">The uniform knot spacing.</param>
            <returns>The constructed curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreateClampedUniformRational(System.Int32,Demo3D.Common.Geometry.Vector4D[])">
            <summary>
            Creates a Clamped Uniform Rational B-Spline.
            </summary>
            <remarks>
            The constructed NURBS curve has knots that are normalized (0..1), equally spaced
            (uniform). The curve passes through the start and end control points (clamped).
            </remarks>
            <param name="order">The order of the curve (must be at least 2).</param>
            <param name="points">The ordered array of control points.</param>
            <returns>The constructed curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreateClosedPeriodicUniformNonRational(System.Int32,Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Creates a Closed Periodic Uniform Non-Rational B-Spline.
            </summary>
            <remarks>
            The constructed NURBS curve has knots that are normalized (0..1), equally spaced
            (uniform) and control point weights set to unity (non-rational).
            </remarks>
            <param name="order">The order of the curve (must be at least 2).</param>
            <param name="points">The ordered array of control points.</param>
            <returns>The constructed curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.InitializeClampedUniformKnots(System.Int32,System.Int32,System.Double[])">
            <summary>
            Initializes a supplied knot vector for a clamped curve with normalized uniform knot spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector, which is to be initialized.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.InitializeClampedUniformKnots(System.Int32,System.Int32,System.Double,System.Double[])">
            <summary>
            Initializes a supplied knot vector for a clamped curve with uniform knot spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="spacing">The (uniform) spacing between knots.</param>
            <param name="knots">The knot vector, which is to be initialized.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreateClampedUniformKnots(System.Int32,System.Int32)">
            <summary>
            Creates a knot vector for a clamped curve with normalized uniform knot spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <returns>The created knot vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreateClampedUniformKnots(System.Int32,System.Int32,System.Double)">
            <summary>
            Creates a knot vector for a clamped curve with uniform knot spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="spacing">The (uniform) spacing between knots.</param>
            <returns>The created knot vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.InitializeUnclampedUniformKnots(System.Int32,System.Int32,System.Double,System.Double,System.Double[])">
            <summary>
            Initializes the supplied knot vector with unclamped knots of uniform spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="start">The value for the first knot.</param>
            <param name="spacing">The (uniform) spacing between knots.</param>
            <param name="knots">The knot vector, which is to be initialized.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.InitializePeriodicUniformKnots(System.Int32,System.Int32,System.Double,System.Double,System.Double[])">
            <summary>
            Initializes the supplied knot vector for a periodic curve with uniform knot spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="start">The value for the start of the domain.</param>
            <param name="end">The value for the end of the domain.</param>
            <param name="knots">The knot vector, which is to be initialized.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.InitializePeriodicUniformKnots(System.Int32,System.Int32,System.Double[])">
            <summary>
            Initializes the supplied knot vector for a periodic curve with normalized uniform knot
            spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector, which is to be initialized.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CreatePeriodicUniformKnots(System.Int32,System.Int32)">
            <summary>
            Creates a knot vector for a periodic curve with normalized uniform knot spacing.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <returns>The created knot vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.KnotSpanBinary(System.Int32,System.Int32,System.Double[],System.Double)">
            <summary>
            Determines the index of the knot-span for the specified parameter value.
            </summary>
            <remarks>
            Implements ALGORITHM A2.1 from The NURBS Book (2nd edition). The index returned is such
            that t is in the closed-open interval [knots[index], knots[index + 1]). A binary search
            is used to find the index.
            </remarks>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector.</param>
            <param name="t">The parameter value.</param>
            <returns>The index of the knot-span.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.KnotSpanLinear(System.Int32,System.Int32,System.Double[],System.Double)">
            <summary>
            Determines the index of the knot-span for the specified parameter value.
            </summary>
            <remarks>
            A linear search is used to find the index.
            </remarks>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector.</param>
            <param name="t">The parameter value.</param>
            <returns>The index of the knot-span.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.KnotSpan(System.Int32,System.Int32,System.Double[],System.Double)">
            <summary>
            Determines the index of the knot-span for the specified parameter value.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="count">The number of control points.</param>
            <param name="knots">The knot vector.</param>
            <param name="t">The parameter value.</param>
            <returns>The index of the knot-span.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.BasisFunctions(System.Int32,System.Int32,System.Double[],System.Double)">
            <summary>
            Determines the non-vanishing basis functions at the specified parameter value.
            </summary>
            <remarks>
            Implements ALGORITHM A2.2 from The NURBS Book (2nd edition). This implementation is
            efficient since it doesn't compute the vanishing (zero) basis functions. It also
            guarantees that there will not be division by zero.
            </remarks>
            <param name="span">The knot-span for the parameter value.</param>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="knots">The knot vector.</param>
            <param name="t">The parameter value.</param>
            <returns>The non-vanishing basis functions.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.BasisFunctionsDerivatives(System.Int32,System.Int32,System.Double[],System.Int32,System.Double)">
            <summary>
            Determines the non-vanishing basis functions and their derivatives at the specified
            parameter value.
            </summary>
            <remarks>
            Implements ALGORITHM A2.3 from The NURBS Book (2nd edition).
            </remarks>
            <param name="span">The knot-span for the parameter value.</param>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="knots">The knot vector.</param>
            <param name="n">The order of derivation (i.e. up to the nth-order derivative).</param>
            <param name="t">The parameter value.</param>
            <returns>The matrix of derivatives up to (and including) order n.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.BinomialCoefficients(System.Int32)">
            <summary>
            Create a matrix of binomial coefficients, where the element in row r and column c is
            equal to "r choose c".
            </summary>
            <param name="dim">The square dimension for the matrix.</param>
            <returns>The matrix of binomial coefficients.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.NonRationalDerivatives(System.Int32,System.Int32,System.Double[],Demo3D.Common.Geometry.Vector4D[],System.Int32,System.Double)">
            <summary>
            Determines the derivatives up to and including order <paramref name="n"/> of the
            non-rational curve at the specified parameter value.
            </summary>
            <remarks>
            Implements ALGORITHM A3.2 from The NURBS Book (2nd edition).
            </remarks>
            <param name="span">The knot-span for the parameter value.</param>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="knots">The knot vector.</param>
            <param name="cp">The control points.</param>
            <param name="n">The order of derivation (i.e. up to the nth-order derivative).</param>
            <param name="t">The parameter value.</param>
            <returns>The derivatives of the non-rational curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Derivatives(System.Int32,System.Int32,System.Double[],Demo3D.Common.Geometry.Vector4D[],System.Int32,System.Double)">
            <summary>
            Determines the derivatives of the rational curve at the specified parameter value.
            </summary>
            <remarks>
            Implements ALGORITHM A4.2 from The NURBS Book (2nd edition).
            </remarks>
            <param name="span">The knot-span for the parameter value.</param>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="knots">The knot vector.</param>
            <param name="cp">The control points.</param>
            <param name="n">The order of derivation (i.e. up to the nth-order derivative).</param>
            <param name="t">The parameter value.</param>
            <returns>The derivatives of rational curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Evaluate(System.Int32,System.Int32,System.Double[],Demo3D.Common.Geometry.Vector4D[],System.Double)">
            <summary>
            Determines the point on the rational curve at the specified parameter value.
            </summary>
            <remarks>
            Implements ALGORITHM A4.1 from The NURBS Book (2nd edition).
            </remarks>
            <param name="span">The knot-span for the parameter value.</param>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="knots">The knot vector.</param>
            <param name="cp">The control points.</param>
            <param name="t">The parameter value.</param>
            <returns>The point on the curve at the specified parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.PointT(System.Double)">
            <summary>
            Determines the point on the curve at the specified parameter value.
            </summary>
            <param name="t">The parameter value.</param>
            <returns>The point on the curve at the specified parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.TangentT(System.Double)">
            <summary>
            Determines the tangent on the curve at the specified parameter value.
            </summary>
            <param name="t">The parameter value.</param>
            <returns>The tangent on the curve at the specified parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.NormalT(System.Double)">
            <summary>
            Determines the normal on the curve at the specified parameter value.
            </summary>
            <param name="t">The parameter value.</param>
            <returns>The normal on the curve at the specified parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.CurvatureT(System.Double)">
            <summary>
            Determines the curvature of the curve at the specified parameter value.
            </summary>
            <param name="t">The parameter value.</param>
            <returns>The curvature of the curve at the specified parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.T(System.Double)">
            <summary>
            Approximates the natural parameter for the specified arc-length.
            </summary>
            <param name="s">The arc-length parameter value.</param>
            <returns>The corresponding natural parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.S(System.Double)">
            <summary>
            Approximates the arc-length along the curve for the specified natural parameter.
            </summary>
            <param name="t">The natural parameter value.</param>
            <returns>The corresponding arc-length parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Point(System.Double)">
            <summary>
            Determines the point on the curve at the specified arc-length.
            </summary>
            <param name="s">The distance along the curve.</param>
            <returns>The point on the curve at the specified distance along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Tangent(System.Double)">
            <summary>
            Determines the tangent on the curve at the specified arc-length.
            </summary>
            <param name="s">The distance along the curve.</param>
            <returns>The tangent on the curve at the specified distance along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Normal(System.Double)">
            <summary>
            Determines the normal on the curve at the specified arc-length.
            </summary>
            <param name="s">The distance along the curve.</param>
            <returns>The normal on the curve at the specified distance along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the curve at the specified arc-length.
            </summary>
            <param name="s">The distance along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified distance along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.ProjectedLengthT(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the parameter value along the curve closest to the specified point.
            </summary>
            <remarks>
            This function will explore all spans of the curve. This can be computationally
            expensive, especially for curves with long knot vectors. If you know the span that the
            nearest point on the curve lies on, or you know the parameter value for a point very
            near to the closest point on the curve, then you can use the alternate functions.
            
            The outline for this method is described in section 6.1 of The NURBS Book (2nd edition).
            However, unlike the method described in the book, we perform a full Newton search over
            each span in order to hopefully guarantee finding the true minimum.
            
            It is recommended to build an acceleration structure, such as a signed distance field,
            and use one of the alternate functions if you intend to call this function many times.
            </remarks>
            <param name="point">The point.</param>
            <returns>The parameter value along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.ProjectedLengthT(Demo3D.Common.Geometry.Vector3D@,System.Int32,System.Int32,Demo3D.Common.Geometry.Frame3D@)">
            <summary>
            Determines the parameter value along the curve closest to the specified point.
            </summary>
            <remarks>
            This function will not explore the curve beyond the specified span. A number of points
            are sampled in order to determine the best initial parameter value. This method is
            described in section 6.1 of The NURBS Book (2nd edition).
            </remarks>
            <param name="point">The point.</param>
            <param name="span">The span to explore.</param>
            <param name="n">The number of samples.</param>
            <param name="frame">The Frenet-Serret frame for closest point on the curve.</param>
            <returns>The parameter value along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.ProjectedLengthT(Demo3D.Common.Geometry.Vector3D@,System.Double,System.Int32,Demo3D.Common.Geometry.Frame3D@)">
            <summary>
            Determines the parameter value along the curve closest to the specified point.
            </summary>
            <remarks>
            This function will not explore the curve beyond the specifed span. You should only use
            this function if you know that the parameter value for the point on the curve closest to
            the specified point lies in the specified span. The parameter value must also fall
            within this span.
            
            Implements the method described in section 6.1 of The NURBS Book (2nd edition).
            </remarks>
            <param name="point">The point.</param>
            <param name="t0">The initial parameter value to start searching from.</param>
            <param name="span">The span to explore.</param>
            <param name="frame">The Frenet-Serret frame for closest point on the curve.</param>
            <returns>The parameter value along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Reverse(Demo3D.Common.Geometry.NURBSCurve3D)">
            <summary>
            Creates a NURBS curve that is the reversal of the specified curve.
            </summary>
            <param name="curve">The source curve.</param>
            <returns>The reversed curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Interpolate(System.Int32,Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Fits a NURBS curve of the specified order to the provided list of points.
            </summary>
            <remarks>
            Implements ALGORITHM A9.1 from The NURBS Book (2nd edition). Note that this solves a
            linear system of equations via LU Decomposition. The solution process is accelerated
            using an Intel Math Kernel Library (MKL) routine.
            </remarks>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="points">The points to be interpolated.</param>
            <returns>The NURBS curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Scale(Demo3D.Common.Geometry.NURBSCurve3D,System.Double)">
            <summary>
            Creates a NURBS curve that is a scaled copy of the provided source curve.
            </summary>
            <param name="curve">The source curve.</param>
            <param name="scale">The scaling multiplier.</param>
            <returns>The scaled copy.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Translate(Demo3D.Common.Geometry.NURBSCurve3D,Demo3D.Common.Geometry.Vector3D)">
            <summary>
            Creates a NURBS curve that is a translated copy of the provided source curve.
            </summary>
            <param name="curve">The source curve.</param>
            <param name="translation">The translation vector.</param>
            <returns>The translated copy.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.Approximate(System.Int32,System.Double,Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Fits a NURBS curve of the specified order to the provided list of points.
            </summary>
            <param name="order">The order of the curve (degree + 1).</param>
            <param name="tol">The error bound for the curve approximation.</param>
            <param name="points">The points to be interpolated.</param>
            <returns>The NURBS curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.FromLineSegment(Demo3D.Common.Geometry.LineSegment3D@)">
            <summary>
            Creates a NURBS curve from a straight line segment.
            </summary>
            <param name="line">The source line segment.</param>
            <returns>The generated NURBS curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.FromCircle(Demo3D.Common.Geometry.Circle3D@)">
            <summary>
            Creates a NURBS curve from a circle.
            </summary>
            <param name="circle">The source circle.</param>
            <returns>The generated NURBS curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.FromArc(Demo3D.Common.Geometry.Arc3D@)">
            <summary>
            Creates a NURBS curve from an arc.
            </summary>
            <remarks>
            Implements ALGORITHM A7.1 from The NURBS Book (2nd edition).
            </remarks>
            <param name="arc">The source arc.</param>
            <returns>The generated NURBS curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.NURBSCurve3D.FromBezier(Demo3D.Common.Geometry.Vector3D[])">
            <summary>
            Creates a NURBS curve from a single-segment Bezier curve.
            </summary>
            <param name="points">The Bezier control points.</param>
            <returns>The generated NURBS curve.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Plane3D">
            <summary>
            A 3D plane, where the third axis is defined to be orthonormal to the first and second axes.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Plane3D.Origin">
            <summary>
            The origin of the plane.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Plane3D.FirstAxis">
            <summary>
            The first axis of the plane.
            </summary>
            <remarks>
            Orthonormal to the <see cref="P:Demo3D.Common.Geometry.Plane3D.SecondAxis"/>.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.Plane3D.SecondAxis">
            <summary>
            The second axis of the plane.
            </summary>
            <remarks>
            Orthonormal to the <see cref="P:Demo3D.Common.Geometry.Plane3D.FirstAxis"/>.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.Plane3D.Normal">
            <summary>
            The thrid axis (normal) of the plane.
            </summary>
            <remarks>
            Orthonormal to the <see cref="P:Demo3D.Common.Geometry.Plane3D.FirstAxis"/> and <see cref="P:Demo3D.Common.Geometry.Plane3D.SecondAxis"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.#ctor(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a plane from two orthonormal axes.
            </summary>
            <param name="origin">The origin for the plane.</param>
            <param name="firstAxis">The first axis for the plane.</param>
            <param name="secondAxis">The second axis for the plane.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.FromPoints(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a plane from three points.
            </summary>
            <param name="origin">The first point on the plane (which will become the origin for the plane).</param>
            <param name="p1">The second point on the plane.</param>
            <param name="p2">The third point on the plane.</param>
            <returns>The constructed plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.FromVectors(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a plane from two vectors (in the plane).
            </summary>
            <remarks>
            The two vectors need not be orthonormal, but they must not be (anti-)parallel.
            </remarks>
            <param name="origin">The origin for the plane.</param>
            <param name="v1">The first vector in the plane.</param>
            <param name="v2">The second vector in the plane.</param>
            <returns>The constructed plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.FromAxisNormal(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a plane from the orthonormal first axis and normal vectors.
            </summary>
            <remarks>
            The second axis is defined to be orthogonal to the normal and first axis. The first axis
            and normal specified must be orthonormal.
            </remarks>
            <param name="origin">The origin for the plane.</param>
            <param name="firstAxis">The first axis for the plane.</param>
            <param name="normal">The normal for the plane.</param>
            <returns>The constructed plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.FromPointNormal(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D)">
            <summary>
            Constructs a plane with the specified normal vector.
            </summary>
            <remarks>
            The first and second axes will be chosen so that they are orthogonal to the normal.
            </remarks>
            <param name="origin">The origin for the plane.</param>
            <param name="normal">The normal for the plane.</param>
            <returns>The constructed plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.Translate(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a plane that is offset from the specified plane by the specified vector.
            </summary>
            <param name="plane">The plane.</param>
            <param name="offset">The offset vector.</param>
            <returns>The constructed plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.CartesianCoordinates(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Converts the point provided in the planar coordinates of the plane's local coordinate
            system to cartesian coordinates.
            </summary>
            <param name="plane">The plane.</param>
            <param name="point">The point in the planar coordinates of the plane.</param>
            <returns>The cartesian coordinates for the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.CartesianCoordinates(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Converts the point provided in the planar coordinates of the plane's local coordinate
            system to cartesian coordinates.
            </summary>
            <param name="plane">The plane.</param>
            <param name="point">The point in the planar coordinates of the plane.</param>
            <returns>The cartesian coordinates for the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.CartesianDirection(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Converts the direction provided in the coordinates of the plane's local coordinate
            system to cartesian coordinates.
            </summary>
            <param name="plane">The plane.</param>
            <param name="direction">The direction in planar coordinates of the plane.</param>
            <returns>The cartesian coordinates for the direction.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.PlanarCoordinates(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Converts the coordinates for the specified point to the local coordinate system of the
            plane.
            </summary>
            <remarks>
            The returned vector contains the three coordinates. The first coordinate is the
            coordinate in the first axis of the plane. The second coordinate is the coordinate in
            the second axis of the plane. The third coordinate is the coordinate in the third axis
            of the plane.
            </remarks>
            <param name="plane">The plane.</param>
            <param name="point">The point.</param>
            <returns>The coordinates for the point in the local coordinate system of the plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.PlanarCoordinates2D(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Converts the coordinates for the specified point to the local coordinate system of the
            plane.
            </summary>
            <remarks>
            The returned vector contains the two coordinates. The first coordinate is the coordinate
            in the first axis of the plane. The second coordinate is the coordinate in the second
            axis of the plane.
            </remarks>
            <param name="plane">The plane.</param>
            <param name="point">The point.</param>
            <returns>The coordinates for the point in the local coordinate system of the plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.Project(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Projects the point onto the plane.
            </summary>
            <param name="plane">The plane into which the point is to be projected.</param>
            <param name="point">The point to be projected into the plane.</param>
            <returns>The projection of the point onto the plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Plane3D.SignedDistance(Demo3D.Common.Geometry.Plane3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the signed (minimum) distance between the provided point and plane.
            </summary>
            <remarks>
            The sign of the distance will be positive if the point is "above" the plane, where above
            is taken to mean in the direction of the plane's normal. Conversely, the distance will
            be negative if the point is below the plane.
            </remarks>
            <param name="plane">The plane.</param>
            <param name="point">The point.</param>
            <returns>The signed (minimum) distance between the point and the plane.</returns>
        </member>
        <member name="F:Demo3D.Common.Geometry.Plane3D.YZ">
            <summary>
            The plane with FirstAxis=Y, SecondAxis=Z, Normal=X.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Plane3D.ZX">
            <summary>
            The plane with FirstAxis=Z, SecondAxis=X, Normal=Y.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Plane3D.XY">
            <summary>
            The plane with FirstAxis=X, SecondAxis=Y, Normal=Z.
            </summary>
            <remarks>
            This is also the identity plane.
            </remarks>
        </member>
        <member name="T:Demo3D.Common.Geometry.Ray2D">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.Ray3D">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.ReferenceVectorCurve3D">
            <summary>
            A "reference-vector" continuous framing of a curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <remarks>
            The common Frenet-Serret frame formulation uses the first and second derivatives of the
            parametric equation of the curve as the tangent and normal respectively. This is problematic
            for curves at points where the second derivative is zero (stationary points). Furthermore,
            the normal is permitted to twist around the tangent. The normal can also instantaneously
            twist at the boundaries between the component curves forming a composite curve.
            
            The reference-vector method determines the normal by taking the cross product of the tangent
            with a reference vector. The only requirement is that the reference vector must not be
            (anti-)parallel to the tangent.
            </remarks>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.ReferenceVectorCurve3D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.#ctor(Demo3D.Common.Geometry.ICurve3D,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Constructs a "reference-vector" continuous framing of the specified curve.
            </summary>
            <remarks>
            The reference unit vector should not be (anti-)parallel with the tangent to the curve
            at any point, otherwise twisting/flipping may occur.
            </remarks>
            <param name="curve">The curve.</param>
            <param name="reference">The reference unit vector.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.#ctor(Demo3D.Common.Geometry.ICurve3D,System.Int32)">
            <summary>
            Constructs a "reference-vector" continuous framing of the specified curve.
            </summary>
            <remarks>
            The reference vector is selected to be one of the X, Y or Z axes according to which
            is least (anti-)parallel with the tangents to the curve at each step.
            </remarks>
            <param name="curve">The curve.</param>
            <param name="steps">The number of steps at which the evaluate the tangent.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.TryFindSuitableReferenceVector(Demo3D.Common.Geometry.ICurve3D,System.Int32,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Tries to find a suitable reference vector.
            </summary>
            <remarks>
            The reference vector is selected to be one of the X, Y or Z axes according to which
            is least (anti-)parallel with the tangents to the curve at each step.
            </remarks>
            <param name="curve">The curve.</param>
            <param name="steps">The number of steps at which the evaluate the tangent.</param>
            <param name="reference">The reference vector.</param>
            <returns>True if a suitable reference vector was found, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.Point(System.Double)">
            <summary>
            The point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.Normal(System.Double)">
            <summary>
            The unit normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.ReferenceVectorCurve3D.ProjectionVector(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the projection vector.
            </summary>
            <remarks>
            The projection vector is guaranteed to not be parallel with the specified tangent.
            </remarks>
            <param name="tangent">The tangent vector.</param>
            <returns>The projection vector.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.TessellatedCurve3D">
            <summary>
            A tessellation of a 3D curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.TessellatedCurve3D.SampleInterval">
            <summary>
            Lightweight struct used for sampling NURBS curves in order to determine the sagitta.
            </summary>
            <remarks>
            Note that whilst it is not strictly necessary to store the end points corresponding to
            the interval, we do so in order to avoid redundant point evaluations on the NURBS curve.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.Geometry.TessellatedCurve3D.lines">
            <summary>
            The tessellation.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.TessellatedCurve3D.distances">
            <summary>
            The starting distances for each line.
            </summary>
            <remarks>
            Note that the last entry is the ending distance for the last line. Hence, there are n+1
            entries, where n is the number of lines.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.Geometry.TessellatedCurve3D.closureViolation">
            <summary>
            The closure violation.
            </summary>
            <remarks>
            Saved to avoid costly computations.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.Geometry.TessellatedCurve3D.randoms">
            <summary>
            A number of randomly generated samples.
            </summary>
            <remarks>
            Used for approximating the sagitta of NURBS curves. Avoids costly random number
            generation for most cases.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.Geometry.TessellatedCurve3D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.#ctor(Demo3D.Common.Geometry.ICurve3D,System.Double,System.Double,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <remarks>
            When approximating the sagitta of NURBS curves, we randomly sample the specified
            number of points in the interval using a Gaussian/Normal distribution. The minimum
            number of samples is 1. When using a single sample, the mid-point is always used.
            </remarks>
            <param name="curve">The curve to tessellate.</param>
            <param name="maxSagitta">The maximum sagitta for the tessellation.</param>
            <param name="minLineLength">The minimum length for each tessellated line.</param>
            <param name="samples">The number of random samples to use for approximating the sagitta of NURBS curves.</param>
        </member>
        <member name="P:Demo3D.Common.Geometry.TessellatedCurve3D.Lines">
            <summary>
            The lines that compose the tessellated curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.ArcLength(System.Double,System.Double)">
            <summary>
            Determines the arc-length for an arc of constant radius with the specified sagitta.
            </summary>
            <param name="radius">The radius.</param>
            <param name="sagitta">The sagitta.</param>
            <returns>The corresponding arc-length.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.T(System.Double,System.Int32@)">
            <summary>
            Determines the length along the line specified by <paramref name="idx"/> corresponding
            to the provided length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <param name="idx">The index for the line corresponding to the length along the curve.</param>
            <returns>The length along the line.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.Point(System.Double)">
            <summary>
            The point on the tessellated curve at the specified length along the tessellated curve.
            </summary>
            <param name="s">The length along the tessellated curve.</param>
            <returns>The point on the tessellated curve at the specified length along the tessellated curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the tessellated curve at the specified length along the tessellated
            curve.
            </summary>
            <param name="s">The length along the tessellated curve.</param>
            <returns>The tangent to the tessellated curve at the specified length along the tessellated curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.Normal(System.Double)">
            <summary>
            The unit normal to the line segment at the specified length along the tessellated curve.
            </summary>
            <remarks>
            The normal for a line segment is not well defined. The only guarantees is that this
            method will return a unit vector orthogonal to the tangent at the specified length along
            the curve. The normal will be constant along the full length of the segment, but not
            necessarily along the full length of the curve.
            </remarks>
            <param name="s">The length along the tessellated curve.</param>
            <returns>The normal to the line segment at the specified length along the tessellated curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the tessellated curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the tessellated curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the segment at the specified length along the tessellated
            curve.
            </summary>
            <param name="s">The length along the line.</param>
            <returns>The (unsigned) curvature of the segment at the specified length along the tessellated curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the tessellated curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TessellatedCurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the tessellated curve.
            </remarks>
            <param name="closed">Whether the line should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.TransformedCurve3D">
            <summary>
            An affine transformation of a 3D curve.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.TransformedCurve3D.Length">
            <summary>
            The length of the curve.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.#ctor(Demo3D.Common.Geometry.ICurve3D,Demo3D.Common.Geometry.Frame3D@)">
            <summary>
            Constructs a curve that is an affine transformation of the specified curve.
            </summary>
            <param name="curve">The curve.</param>
            <param name="transform">The transform.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.Point(System.Double)">
            <summary>
            The point on the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The point on the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.Tangent(System.Double)">
            <summary>
            The unit tangent to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The tangent to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.Normal(System.Double)">
            <summary>
            The unit normal to the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The normal to the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.Curvature(System.Double)">
            <summary>
            The (unsigned) curvature of the curve at the specified length along the curve.
            </summary>
            <param name="s">The length along the curve.</param>
            <returns>The (unsigned) curvature of the curve at the specified length along the curve.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.ProjectedLength(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length along the curve closest to the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>The length along the curve closest to the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.MaximumClosureViolation">
            <summary>
            Determines the maximum closure violation.
            </summary>
            <remarks>
            This is the maximum distance violation from a perfectly closed curve.
            </remarks>
            <returns>The maximum closure violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.MaximumTangentContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum tangent continuity violation.
            </summary>
            <remarks>
            This is the maximum angle between the tangents at two infinitesimally close points on
            the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum tangent continuity violation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.TransformedCurve3D.MaximumCurvatureContinuityViolation(System.Boolean)">
            <summary>
            Determines the maximum curvature continuity violation.
            </summary>
            <remarks>
            This is the maximum difference between the curvature at two infinitesimally close points
            on the curve.
            </remarks>
            <param name="closed">Whether the curve should be considered closed.</param>
            <returns>The maximum curvature continuity violation.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Triangle2D">
            <summary>
            A 2D triangle.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Triangle2D.P1">
            <summary>
            The first point that forms the triangle.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Triangle2D.P2">
            <summary>
            The second point that forms the triangle.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Triangle2D.P3">
            <summary>
            The third point that forms the triangle.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle2D.#ctor(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Contructor.
            </summary>
            <param name="p1">The first point that forms the triangle.</param>
            <param name="p2">The second point that forms the triangle.</param>
            <param name="p3">The third point that forms the triangle.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle2D.Deconstruct(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Deconstructs the triangle into the three points that form the triangle.
            </summary>
            <param name="p1">The first point that forms the triangle.</param>
            <param name="p2">The second point that forms the triangle.</param>
            <param name="p3">The third point that forms the triangle.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle2D.Area">
            <summary>
            Determines the (unsigned) area of the triangle.
            </summary>
            <returns>The area of the triangle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle2D.Clockwise">
            <summary>
            Determines whether the triangle is clockwise winded.
            </summary>
            <returns>True if the triangle is clockwise winded, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle2D.CounterClockwise">
            <summary>
            Determines whether the triangle is counter-clockwise winded.
            </summary>
            <returns>True if the triangle is counter-clockwise winded, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle2D.BarycentricCoordinates(Demo3D.Common.Geometry.Triangle2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the Barycentric coordinates for the specified point.
            </summary>
            <param name="triangle">The triangle that defines the Barycentric coordinate system.</param>
            <param name="point">The point for which Barycentric coordinates are to be determined.</param>
            <returns>The Barycentric coordines (u, v, w) for the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle2D.Contains(Demo3D.Common.Geometry.Triangle2D,Demo3D.Common.Geometry.Vector2D)">
            <summary>
            Whether the provided triangle encloses the specified point.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="point">The point that is to be tested.</param>
            <returns>True if the triangle encloses the point, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Triangle3D">
            <summary>
            A 3D triangle.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Geometry.Triangle3D.P1">
            <summary>
            The first point that forms the triangle.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Triangle3D.P2">
            <summary>
            The second point that forms the triangle.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Geometry.Triangle3D.P3">
            <summary>
            The third point that forms the triangle.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.#ctor(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Contructor.
            </summary>
            <param name="p1">The first point that forms the triangle.</param>
            <param name="p2">The second point that forms the triangle.</param>
            <param name="p3">The third point that forms the triangle.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.Deconstruct(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Deconstructs the triangle into the three points that form the triangle.
            </summary>
            <param name="p1">The first point that forms the triangle.</param>
            <param name="p2">The second point that forms the triangle.</param>
            <param name="p3">The third point that forms the triangle.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.Normal">
            <summary>
            Determines a unit normal vector to the triangle.
            </summary>
            <returns>A unit normal vector to the triangle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.Area">
            <summary>
            Determines the (unsigned) area of the triangle.
            </summary>
            <returns>The area of the triangle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.Clockwise(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines whether the triangle is clockwise with respect to the plane specified by the
            provided unit <paramref name="normal"/> vector.
            </summary>
            <param name="normal">The unit normal vector for a plane.</param>
            <returns>True if the triangle is clockwise with respect to the reference plane, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.CounterClockwise(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines whether the triangle is counter-clockwise with respect to the plane specified
            by the provided unit <paramref name="normal"/> vector.
            </summary>
            <param name="normal">The unit normal vector for a plane.</param>
            <returns>True if the triangle is counter-clockwise with respect to the reference plane, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.BarycentricCoordinates(Demo3D.Common.Geometry.Triangle3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the Barycentric coordinates for the specified point.
            </summary>
            <param name="triangle">The triangle that defines the Barycentric coordinate system.</param>
            <param name="point">The point for which Barycentric coordinates are to be determined.</param>
            <returns>The Barycentric coordines (u, v, w) for the point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Triangle3D.Contains(Demo3D.Common.Geometry.Triangle3D,Demo3D.Common.Geometry.Vector3D)">
            <summary>
            Whether the provided triangle encloses the specified point.
            </summary>
            <param name="triangle">The triangle.</param>
            <param name="point">The point that is to be tested.</param>
            <returns>True if the triangle encloses the point, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Util">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps the specified value to the interval [min, max].
            </summary>
            <param name="value">The value to be clamped.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.Mod(System.Int32,System.Int32)">
            <summary>
            Detemines k (mod n).
            </summary>
            <param name="k">The first operand.</param>
            <param name="n">The second operand.</param>
            <returns>The result k (mod n).</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.Log2(System.Int32)">
            <summary>
            Determines the logarithm to the base 2 of n.
            </summary>
            <param name="n">The number, n.</param>
            <returns>The logarith to the base 2 of n.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.NormaliseWrapAroundRange(System.Double,System.Double,System.Double)">
            <summary>
            Normalizes the provided value to the wrap-around range defined by the provided
            <paramref name="start"/> and <paramref name="end"/> values.
            </summary>
            <param name="value">The value to normalize.</param>
            <param name="start">The starting value for the range.</param>
            <param name="end">The ending value for the range.</param>
            <returns>The normalized value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.NormalizeZeroTwoPI(System.Double)">
            <summary>
            Normalizes the provided angle to the interval [0, 2*PI].
            </summary>
            <param name="angle">The angle to normalize.</param>
            <returns>The normalized angle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.NormalizePlusMinusPI(System.Double)">
            <summary>
            Normalizes the provided angle to the range [-PI, PI].
            </summary>
            <param name="angle">The angle to normalize.</param>
            <returns>The normalized angle.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.SignedAngularDifference(System.Double,System.Double)">
            <summary>
            Determines the signed angular distance between two angles. The returned value is in the
            interval [-<see cref="F:System.Math.PI"/>, <see cref="F:System.Math.PI"/>].
            </summary>
            <param name="a">The first angle.</param>
            <param name="b">The second angle.</param>
            <returns>The difference in angles.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.PlanarCoordinates2D(Demo3D.Common.Geometry.Vector3D[],Demo3D.Common.Geometry.Plane3D@)">
            <summary>
            Projects each provided 3D point into the plane and returns the corresponding array of
            planar 2D points.
            </summary>
            <param name="points">The points to be projected.</param>
            <param name="plane">The plane into which the points are to be projected.</param>
            <returns>The projected planar points.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.CartesianCoordinates(Demo3D.Common.Geometry.Vector2D[],Demo3D.Common.Geometry.Plane3D@)">
            <summary>
            Converts each profiled 2D planar coordinate to 3D cartesian coordinates,
            </summary>
            <param name="points">The planar points.</param>
            <param name="plane">The plane in which the planar points lie..</param>
            <returns>The cartesian points.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.MengerCurvature(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the Menger curvature for the provided triple of points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="p3">The third point.</param>
            <returns>The (unsigned) curvature.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.Closest(Demo3D.Common.Geometry.Circle2D,Demo3D.Common.Geometry.Ray2D@,System.Double@,System.Double@)">
            <summary>
            Finds the closest points on the circle and ray.
            </summary>
            <remarks>
            Assumes that the circle and ray are non-intersecting.
            </remarks>
            <param name="circle">The circle</param>
            <param name="ray">The ray.</param>
            <param name="s1">The distance along the circle to the closest point on the circle.</param>
            <param name="s2">The distance along the ray to the closest point on the ray.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.InterpolateBinarySearch(System.Double[],System.Double,System.Int32@)">
            <summary>
            Determines the index <paramref name="left"/> such that the parameter value
            <paramref name="t"/> falls in the range arr[left] &lt;= t &lt;= arr[left + 1].
            </summary>
            <remarks>
            Assumes that the array is ordered such that arr[i+1] &gt; arr[i]
            </remarks>
            <param name="arr">The array to be searched.</param>
            <param name="t">The parameter value to seach for.</param>
            <param name="left">The index for the greatest element less than or equal to the parameter value.</param>
            <returns>The interpolation parameter indicating how far between the left and right elements that the parameter value falls.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.InterpolateBinarySearch(System.Double[],System.Double)">
            <summary>
            Determines the index "i" such that the parameter value <paramref name="t"/> falls in the
            range arr[i] &lt;= t &lt;= arr[i + 1].
            </summary>
            <param name="arr">The array to be searched.</param>
            <param name="t">The parameter value to seach for.</param>
            <returns>The index for the greatest element less than or equal to the parameter value.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Util.Gaussian(System.Random,System.Double,System.Double)">
            <summary>
            Generates a random number with the specified mean and standard deviation using a
            Gaussian distribution.
            </summary>
            <param name="rng">The random number generator.</param>
            <param name="mean">The mean.</param>
            <param name="stdDev">The standard deviation.</param>
            <returns>The generated random number.</returns>
        </member>
        <member name="T:Demo3D.Common.Geometry.Vector2D">
            <summary>
            A 2D vector.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <remarks>
            The coordinate system is assumed to be left-handed, with cross(x, y) = z, where z is the
            imaginary z-axis given by the left-hand rule. This yields the following axes, where the
            imaginary z-axis is pointing out of the screen.
            
              (0,0)
                +-----> x = (1,0)
                |
                |
                v
                y = (0,1)
            
            This might be different from what you would expect. This choice was made so as to be able
            to easily work with planar coordinates. Without this, 2D angles and angles in a 3D plane
            would be opposite signed.
            </remarks>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector2D.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector2D.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.#ctor(System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Deconstruct(System.Double@,System.Double@)">
            <summary>
            Deconstructs the vector into its constituent coordinates.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Equals(System.Object)">
            <summary>
            Whether the vector is exactly equal to the provided vector.
            </summary>
            <param name="obj">The other vector.</param>
            <returns>True if the two vectors are exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.GetHashCode">
            <summary>
            The hash code for the vector.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.ToString">
            <summary>
            The string representation of the vector.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_Equality(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines whether the two vectors are exactly equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_Inequality(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines whether the two vectors are not exactly equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are not exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_UnaryNegation(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Unary negation.
            </summary>
            <param name="v">The vector.</param>
            <returns>The negation of the vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_Addition(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Addition.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_Subtraction(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Subtraction.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The subtraction of the second vector from the first.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_Multiply(Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">The scale factor.</param>
            <returns>The provided vector scaled by the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_Multiply(System.Double,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="s">The scale factor.</param>
            <param name="v">The vector.</param>
            <returns>The provided vector scaled by the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.op_Division(Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Scalar division.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">The scale factor.</param>
            <returns>The provided vector scaled by the reciprocal of the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.LengthSq(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the squared length of the vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>The length of the vector squared.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Length(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the length of the vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Normalized(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the unit vector equal in direction to the provided vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>The equivalent unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Normalized(Demo3D.Common.Geometry.Vector2D@,System.Double@)">
            <summary>
            Determines the unit vector equal in direction to the provided vector.
            </summary>
            <param name="v">The vector.</param>
            <param name="length">The length of the provided vector.</param>
            <returns>The equivalent unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Distance(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the (unsigned) distance between the two specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The (unsigned) distance.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.DistanceSq(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the square of the (unsigned) distance between the two specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The (unsigned) distance squared.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.MidPoint(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the point midway between the two specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The midway point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Dot(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the dot product of the two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Cross(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Pseudo cross-product.
            </summary>
            <remarks>
            The value returned is positive if <paramref name="v2"/> is clockwise from
            <paramref name="v1"/>, negative if <paramref name="v2"/> is counter-clockwise from
            <paramref name="v1"/> and zero otherwise.
            </remarks>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The signed area of the parallelogram formed by v1 and v2.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Clockwise(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Whether the vector <paramref name="v2"/> is clockwise from <paramref name="v1"/>.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>True if v2 is clockwise from v1, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.CounterClockwise(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Whether the vector <paramref name="v2"/> is counter-clockwise from <paramref name="v1"/>.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>True if v2 is counter-clockwise from v1, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.AngleUnitVectors(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the (unsigned) smallest angle between the two unit vectors.
            </summary>
            <param name="n1">The first unit vector.</param>
            <param name="n2">The second unit vector.</param>
            <returns>The smallest angle between the unit vectors in the interval [0, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Angle(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the (unsigned) smallest angle between the two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The smallest angle between the vectors in the interval [0, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.SignedAngleUnitVectors(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the (signed) angle from the unit vector <paramref name="n1"/> to the unit
            vector <paramref name="n2"/>.
            </summary>
            <param name="n1">The first unit vector.</param>
            <param name="n2">The second unit vector.</param>
            <returns>The (signed) angle between the two unit vectors in the interval [-PI, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.SignedAngle(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the (signed) angle from the vector <paramref name="v1"/> to the vector
            <paramref name="v2"/>.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The (signed) angle between the two vectors in the interval [-PI, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.ParallelUnitVectors(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Determines whether the the two unit vectors are close to being (anti-)parallel.
            </summary>
            <param name="n1">The first unit vector.</param>
            <param name="n2">The second unit vector.</param>
            <param name="eps">The angular tolerance.</param>
            <returns>True if the two vectors are close to (anti-)parallel, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Parallel(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Determines whether the the two vectors are close to being (anti-)parallel.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="eps">The angular tolerance.</param>
            <returns>True if the two vectors are close to (anti-)parallel, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.OrthogonalUnitVectors(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Determines whether the the two unit vectors are close to being orthogonal.
            </summary>
            <param name="n1">The first unit vector.</param>
            <param name="n2">The second unit vector.</param>
            <param name="eps">The angular tolerance.</param>
            <returns>True if the two vectors are close to orthogonal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Orthogonal(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Determines whether the the two vectors are close to being orthogonal.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="eps">The angular tolerance.</param>
            <returns>True if the two vectors are close to orthogonal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Orthogonal(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the vector PI/2 radians clockwise from the specified vector.
            </summary>
            <remarks>
            The orthogonal vector returned has the same length as the provided vector.
            </remarks>
            <param name="v">The vector.</param>
            <returns>An orthogonal vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.IsZero(Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Whether the specifed vector is close to zero.
            </summary>
            <param name="v">The vector.</param>
            <param name="eps">The tolerance in the length of the vector.</param>
            <returns>True if the vector is close to zero, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Coincident(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Whether the specified points are close to coincident.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="eps">The tolerance in the distance between the two points.</param>
            <returns>True if the points are close to coincident, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.ScalarProjection(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the (signed) length of the vector <paramref name="v"/> when projected onto
            the unit direction vector <paramref name="normal"/>.
            </summary>
            <remarks>
            The <paramref name="normal"/> provided must be a unit vector. The scalar projection,
            denoted `s` is the length of the vector <paramref name="v"/> once projected into the
            direction of the unit vector <paramref name="normal"/>. Note that the scalar projection
            is signed and will be negative if the unsigned angle between <paramref name="v"/> and
            <paramref name="normal"/> is greater than PI radians.
            
                     v
                    +
                   /
                  /
                 /
                /
               /
            0 +--------------+ n
              |-----|
                 s
            </remarks>
            <param name="v">The vector that is to be projected.</param>
            <param name="normal">The unit direction vector onto which the vector is to be projected.</param>
            <returns>The length of the vector once projected.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Project(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Projects the provided vector onto the unit direction vector <paramref name="normal"/>.
            </summary>
            <param name="v">The vector to be projected.</param>
            <param name="normal">The unit direction vector onto which the vector is to be projected.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Direction(Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines a unit vector with direction equal to that of the specified vector.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:Demo3D.Common.Geometry.Vector2D.Normalized(Demo3D.Common.Geometry.Vector2D@)"/>.
            </remarks>
            <param name="v">The vector.</param>
            <returns>The equivalent unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Direction(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Determines the unit direction vector from the first vector to the second vector.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The (unit) direction vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Rotate(Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Determines the vector obtained by rotating the provided vector by the specified (signed)
            angle.
            </summary>
            <param name="v">The vector.</param>
            <param name="angle">The (signed) rotation angle.</param>
            <returns>The rotated unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Lerp(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@,System.Double)">
            <summary>
            Linearly interpolates between the provided first and second vectors according to the
            interpolation factor, <paramref name="t"/>.
            </summary>
            <remarks>
            The interpolation factor specifies how far to interpolate along from the
            <paramref name="start"/> vector to the <paramref name="end"/> vector.
            </remarks>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="t">The interpolation factor.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector2D.Orthonormalize(Demo3D.Common.Geometry.Vector2D@,Demo3D.Common.Geometry.Vector2D@)">
            <summary>
            Orthonormalizes the two vectors using the Gram-Schmidt process.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector2D.Zero">
            <summary>
            The zero vector.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector2D.One">
            <summary>
            The vector of all ones.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector2D.UnitX">
            <summary>
            The unit x-axis vector.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector2D.UnitY">
            <summary>
            The unit y-axis vector.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Geometry.Vector3D">
            <summary>
            A 3D vector.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Geometry.Vector3D.Axis">
            <summary>
            Principal axes.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.Z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.#ctor(Demo3D.Common.Geometry.Vector3D,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="xy">The x and y coordinates.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Deconstruct(System.Double@,System.Double@,System.Double@)">
            <summary>
            Deconstructs the vector into its constituent coordinates.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Equals(System.Object)">
            <summary>
            Whether the vector is exactly equal to the provided vector.
            </summary>
            <param name="obj">The other vector.</param>
            <returns>True if the two vectors are exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.GetHashCode">
            <summary>
            The hash code for the vector.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.ToString">
            <summary>
            The string representation of the vector.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_Equality(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines whether the two vectors are exactly equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_Inequality(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines whether the two vectors are not exactly equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are not exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_UnaryNegation(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Unary negation.
            </summary>
            <param name="v">The vector.</param>
            <returns>The negation of the vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_Addition(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Addition.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_Subtraction(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Subtraction.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The subtraction of the second vector from the first.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_Multiply(Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">The scale factor.</param>
            <returns>The provided vector scaled by the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_Multiply(System.Double,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="s">The scale factor.</param>
            <param name="v">The vector.</param>
            <returns>The provided vector scaled by the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.op_Division(Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Scalar division.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">The scale factor.</param>
            <returns>The provided vector scaled by the reciprocal of the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.LengthSq(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the squared length of the vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>The length of the vector squared.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Length(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length of the vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Normalized(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the unit vector equal in direction to the provided vector.
            </summary>
            <param name="v">The vector.</param>
            <returns>The equivalent unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Normalized(Demo3D.Common.Geometry.Vector3D@,System.Double@)">
            <summary>
            Determines the unit vector equal in direction to the provided vector.
            </summary>
            <param name="v">The vector.</param>
            <param name="length">The length of the provided vector.</param>
            <returns>The equivalent unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Distance(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the (unsigned) distance between the two specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The (unsigned) distance.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.DistanceSq(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the square of the (unsigned) distance between the two specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The (unsigned) distance squared.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.MidPoint(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the point midway between the two specified points.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <returns>The midway point.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Dot(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the dot product of the two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Cross(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the cross-product of the two vectors according to the left-hand rule.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross-product of the two vectors (v1 x v2).</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.AngleUnitVectors(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the (unsigned) smallest angle between the two unit vectors.
            </summary>
            <param name="n1">The first unit vector.</param>
            <param name="n2">The second unit vector.</param>
            <returns>The smallest angle between the unit vectors in the interval [0, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Angle(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the (unsigned) smallest angle between the two vectors.
            </summary>
            <remarks>
            You should use <see cref="M:Demo3D.Common.Geometry.Vector3D.AngleUnitVectors(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)"/> if the two
            vectors are unit vectors.
            </remarks>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The smallest angle between the vectors in the interval [0, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.SignedAngleUnitVectors(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the (signed) angle from the unit vector <paramref name="n1"/> to the unit
            vector <paramref name="n2"/> in the plane with the specified unit
            <paramref name="normal"/> vector.
            </summary>
            <param name="n1">The first unit vector.</param>
            <param name="n2">The second unit vector.</param>
            <param name="normal">The unit normal vector for the plane in which the (signed) angle is measured.</param>
            <returns>The (signed) angle between the two unit vectors in the interval [-PI, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.SignedAngle(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the (signed) angle from the vector <paramref name="v1"/> to the vector
            <paramref name="v2"/>.
            </summary>
            <remarks>
            Use <see cref="M:Demo3D.Common.Geometry.Vector3D.SignedAngleUnitVectors(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)"/> if the
            two vectors are unit vectors.
            </remarks>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="normal">The normal direction for the plane in which the (signed) angle is measured.</param>
            <returns>The (signed) angle between the two vectors in the interval [-PI, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.ParallelUnitVectors(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Determines whether the the two unit vectors are close to being (anti-)parallel.
            </summary>
            <param name="n1">The first unit vector.</param>
            <param name="n2">The second unit vector.</param>
            <param name="eps">The angular tolerance.</param>
            <returns>True if the two vectors are close to (anti-)parallel, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Parallel(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Determines whether the the two vectors are close to being (anti-)parallel.
            </summary>
            <remarks>
            You should use <see cref="M:Demo3D.Common.Geometry.Vector3D.ParallelUnitVectors(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)"/> if
            the two vectors are unit vectors.
            </remarks>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="eps">The angular tolerance.</param>
            <returns>True if the two vectors are close to (anti-)parallel, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.OrthogonalUnitVector(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Returns a unit vector orthogonal to the specified unit vector.
            </summary>
            <remarks>
            Infinite such orthogonal vectors exist. The only guarantee is that the unit vector
            returned is orthogonal to the specified unit vector.
            </remarks>
            <param name="n">The unit vector.</param>
            <returns>An orthogonal unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Orthogonal(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Returns a unit vector orthogonal to the specified vector.
            </summary>
            <remarks>
            Infinite such orthogonal vectors exist. The only guarantee is that the unit vector
            returned is orthogonal to the specified vector, providing that vector is non-zero.
            You should use <see cref="M:Demo3D.Common.Geometry.Vector3D.OrthogonalUnitVector(Demo3D.Common.Geometry.Vector3D@)"/> if the specified vector
            is a unit vector.
            </remarks>
            <param name="v">The (non-zero length) vector.</param>
            <returns>An orthogonal unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.IsZero(Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Whether the specifed vector is close to zero.
            </summary>
            <remarks>
            To check for exact equality, please use the equality operator to check for equality
            with the <see cref="F:Demo3D.Common.Geometry.Vector3D.Zero"/> vector.
            </remarks>
            <param name="v">The vector.</param>
            <param name="eps">The tolerance in the length of the vector.</param>
            <returns>True if the vector is close to zero, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Coincident(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Whether the specified points are close to coincident.
            </summary>
            <param name="p1">The first point.</param>
            <param name="p2">The second point.</param>
            <param name="eps">The tolerance in the distance between the two points.</param>
            <returns>True if the points are close to coincident, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.ScalarProjection(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the length of the vector <paramref name="v"/> when projected onto the unit
            direction vector <paramref name="normal"/>.
            </summary>
            <remarks>
            The <paramref name="normal"/> provided must be a unit vector. The scalar projection,
            denoted `s` is the length of the vector <paramref name="v"/> once projected into the
            direction of the unit vector <paramref name="normal"/>. Note that the scalar projection
            is signed and will be negative if the unsigned angle between <paramref name="v"/> and
            <paramref name="normal"/> is greater than PI radians.
            
                     v
                    +
                   /
                  /
                 /
                /
               /
            0 +--------------+ n
              |-----|
                 s
            </remarks>
            <param name="v">The vector that is to be projected.</param>
            <param name="normal">The unit direction vector onto which the vector is to be projected.</param>
            <returns>The length of the vector once projected.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Project(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Projects the provided vector onto the unit direction vector <paramref name="normal"/>.
            </summary>
            <param name="v">The vector to be projected.</param>
            <param name="normal">The unit direction vector onto which the vector is to be projected.</param>
            <returns>The projected vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Direction(Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines a unit vector with direction equal to that of the specified vector.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:Demo3D.Common.Geometry.Vector3D.Normalized(Demo3D.Common.Geometry.Vector3D@)"/>.
            </remarks>
            <param name="v">The vector.</param>
            <returns>The equivalent unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Direction(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Determines the unit direction vector from the first vector to the second vector.
            </summary>
            <param name="from">The first vector.</param>
            <param name="to">The second vector.</param>
            <returns>The (unit) direction vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Lerp(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Linearly interpolates between the provided first and second vectors according to the
            interpolation factor, <paramref name="t"/>.
            </summary>
            <remarks>
            The interpolation factor specifies how far to interpolate along from the
            <paramref name="start"/> vector to the <paramref name="end"/> vector.
            </remarks>
            <param name="start">The first vector.</param>
            <param name="end">The second vector.</param>
            <param name="t">The interpolation factor.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Nlerp(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Non-linearly interpolates between the provided unit direction vectors.
            </summary>
            <remarks>
            Unlike <see cref="M:Demo3D.Common.Geometry.Vector3D.Slerp(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double,System.Double)"/>, this function does
            not maintain a constant velocity with respect to <paramref name="t"/>. However, it is
            guaranteed to take the torque-minimal path and the function is commutative. It is also
            more efficient.
            </remarks>
            <param name="start">The first unit vector.</param>
            <param name="end">The second unit vector.</param>
            <param name="t">The interpolation factor.</param>
            <returns>The interpolated unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Slerp(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,System.Double,System.Double)">
            <summary>
            Spherically linearly interpolates between the provided unit direction vectors.
            </summary>
            <param name="start">The first unit vector.</param>
            <param name="end">The second unit vector.</param>
            <param name="t">The interpolation factor.</param>
            <param name="eps">The angular tolerance (in radians) below which two vectors are considered parallel.</param>
            <returns>The interpolated unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Orthonormalize(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Orthonormalizes the two vectors using the Gram-Schmidt process.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.Orthonormalize(Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@,Demo3D.Common.Geometry.Vector3D@)">
            <summary>
            Orthonormalizes the three vectors using the Gram-Schmidt process.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="v3">The third vector.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.FromAxis(Demo3D.Common.Geometry.Vector3D.Axis)">
            <summary>
            Returns the unit vector parallel to the specified axis.
            </summary>
            <param name="axis">The axis.</param>
            <returns>The corresponding unit vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector3D.FromAxis(System.Int32)">
            <summary>
            Returns the unit vector parallel to the specified axis index.
            </summary>
            <remarks>
            The principal axes are indexed: X=0, Y=1, Z=1.
            </remarks>
            <param name="axis">The axis index.</param>
            <returns>The corresponding unit vector.</returns>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.Zero">
            <summary>
            The zero vector.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.One">
            <summary>
            The vector of all ones.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.UnitX">
            <summary>
            The unit x-axis vector.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.UnitY">
            <summary>
            The unit y-axis vector.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector3D.UnitZ">
            <summary>
            The unit z-axis vector.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Geometry.Vector4D">
            <summary>
            A 4D vector.
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector4D.X">
            <summary>
            The X coordinate.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector4D.Y">
            <summary>
            The Y coordinate.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector4D.Z">
            <summary>
            The Z coordinate.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector4D.W">
            <summary>
            The W coordinate.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="x">The x coordinate.</param>
            <param name="y">The y coordinate.</param>
            <param name="z">The z coordinate.</param>
            <param name="w">The w coordinate.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.#ctor(Demo3D.Common.Geometry.Vector3D@,System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="xyz">The x, y and z coordinates.</param>
            <param name="w">The w coordinate.</param>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.Equals(System.Object)">
            <summary>
            Whether the vector is exactly equal to the provided vector.
            </summary>
            <param name="obj">The other vector.</param>
            <returns>True if the two vectors are exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.GetHashCode">
            <summary>
            The hash code for the vector.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.ToString">
            <summary>
            The string representation of the vector.
            </summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_Equality(Demo3D.Common.Geometry.Vector4D@,Demo3D.Common.Geometry.Vector4D@)">
            <summary>
            Determines whether the two vectors are exactly equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_Inequality(Demo3D.Common.Geometry.Vector4D@,Demo3D.Common.Geometry.Vector4D@)">
            <summary>
            Determines whether the two vectors are not exactly equal.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>True if the vectors are not exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_UnaryNegation(Demo3D.Common.Geometry.Vector4D@)">
            <summary>
            Unary negation.
            </summary>
            <param name="v">The vector.</param>
            <returns>The negation of the vector.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_Addition(Demo3D.Common.Geometry.Vector4D@,Demo3D.Common.Geometry.Vector4D@)">
            <summary>
            Addition.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_Subtraction(Demo3D.Common.Geometry.Vector4D@,Demo3D.Common.Geometry.Vector4D@)">
            <summary>
            Subtraction.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The subtraction of the second vector from the first.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_Multiply(Demo3D.Common.Geometry.Vector4D@,System.Double)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">The scale factor.</param>
            <returns>The provided vector scaled by the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_Multiply(System.Double,Demo3D.Common.Geometry.Vector4D@)">
            <summary>
            Scalar multiplication.
            </summary>
            <param name="s">The scale factor.</param>
            <param name="v">The vector.</param>
            <returns>The provided vector scaled by the specified scale factor.</returns>
        </member>
        <member name="M:Demo3D.Common.Geometry.Vector4D.op_Division(Demo3D.Common.Geometry.Vector4D@,System.Double)">
            <summary>
            Scalar division.
            </summary>
            <param name="v">The vector.</param>
            <param name="s">The scale factor.</param>
            <returns>The provided vector scaled by the reciprocal of the specified scale factor.</returns>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector4D.Zero">
            <summary>
            The zero vector.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Geometry.Vector4D.One">
            <summary>
            The vector of all ones.
            </summary>
        </member>
        <member name="T:Demo3D.Common.SimpleCustomTypeDescriptor">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            The simplest implementation of ICustomTypeDescriptor, from which classes
            can derive and override just the parts they need to.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.CustomPropertyCollectionBase">
            <summary>
            GlobalizedProperties will look for this and expand its properties inline in GetProperties
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.GlobalizedExpandableObjectConverter">
            <summary>
            ExpandableObjectConverter that makes sure properties are globalizable (this includes allowing things like
            Min, Max, Range, Distance, etc).
            This might be useful from user scripting.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.GlobalizedEnumConverter">
            <summary>
            Allow enumerations to be globalized.
            Add [TypeConverter(typeof(GlobalizedEnumConverter))] in front of the enum
            declaration to get it to work in the property grid.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.GlobalizedEnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            We can only convert enums to/from strings.
            </summary>
        </member>
        <member name="M:Demo3D.Common.GlobalizedEnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Convert a string to an enum value.
            </summary>
        </member>
        <member name="M:Demo3D.Common.GlobalizedEnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Convert an enum to a string.
            </summary>
        </member>
        <member name="M:Demo3D.Common.GlobalizedEnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Indicate that this object supports a standard set of values that can be picked from a list
            </summary>
        </member>
        <member name="M:Demo3D.Common.GlobalizedEnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Return all the possible enumeration values.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.GlobalizedEnumConverter.GlobalizeString(System.Type,System.String)">
            <summary>
            Lookup EnumName.EnumValue in the globalized resource files.
            </summary>
        </member>
        <member name="T:Demo3D.Common.GlobalizedPropertyDescriptor">
            <summary>
            GlobalizedPropertyDescriptor enhances the base class bay obtaining the display name and description
            for a property from the resource.
            It also forces all attributes to have a RefreshProperties(RefreshProperties.All) attribute.
            </summary>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.GlobalizedPropertyDescriptor.BasePropertyDescriptor">
            <summary>
            Gets the PropertyDescriptor that this GlobalizedPropertyDescriptor is wrapping up.
            </summary>
        </member>
        <member name="M:Demo3D.Common.GlobalizedPropertyDescriptor.GetValueIgnoringExists(System.Object)">
            <summary>
            Bypass the Util.PropertyExists call (see above GetValue), and always
            return the base value. This is because a lot of properties (i.e. script
            references) are lazily created.
            </summary>
            <param name="component">Object to look up</param>
            <returns>returned value</returns>
        </member>
        <member name="T:Demo3D.Common.GlobalizedProperties">
            <summary>
            <para>FOR INTERNAL USE ONLY</para>
            GlobalizedProperties implements ICustomTypeDescriptor to enable 
            required functionality to describe a type (class).<br></br>
            The main task of this class is to instantiate our own property descriptor 
            of type GlobalizedPropertyDescriptor.  
            This class also implements IClonable and does a memberwise clone
            to return a copy.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.GlobalizedProperties.GetProperties(System.Attribute[])">
            <summary>
            Called to get the properties of a type.
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="F:Demo3D.Common.GlobalizedProperties.staticPropsCache">
            <summary>
            Mapping of type to set of globalized static property descriptors and the optional property descriptor for dynamic custom properties on the type.
            </summary>
        </member>
        <member name="T:Demo3D.Common.GlobalizedPropertiesAttribute">
            <summary>
            This attribute may be added to properties to control the key prefix 
            for accessing the property name and description.
            e.g. GlobalizedProperties("Straight") gives Straight.Width instead of Width
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.GlobalizedCategoryAttribute">
            <summary>
            This attribute class extends the CategoryAttribute class from the .NET framework
            to support localization.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.GlobalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            This method will be called by the component framework to get a localized
            string. Note: Only called once on first access.
            </summary>
        </member>
        <member name="T:Demo3D.Common.CatAttribute">
            <summary>
            CatAttribute is a short form of GlobalizedCategoryAttribute to reduce code bloat.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.FlattenPropertyBag">
            <summary>
            Flatten the property bag.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.GlobalizeString.Find(System.String,System.Boolean)">
            <summary>
            Convert a culture neutral string to the current culture string, if possible.
            </summary>
            <param name="original">Untranslated string</param>
            <param name="tryAlternatives">If true, then also lookup versions with or without trailing "...", containing "&amp;" or with trailing ":"</param>
            <returns>Translated string, or null if no translation exists</returns>
        </member>
        <member name="M:Demo3D.Common.GlobalizeString.Find(System.String)">
            <summary>
            Convert a culture neutral string to the current culture string, if possible.
            </summary>
            <param name="original">Untranslated string</param>
            <returns>Translated string, or null if no translation exists</returns>
        </member>
        <member name="M:Demo3D.Common.GlobalizeString.GetGlobalizedString(System.String)">
            <summary>
            Convert a culture neutral string to the current culture string.
            </summary>
            <param name="original">Untranslated string</param>
            <returns>Translated string, or the original string if no translation exists</returns>
        </member>
        <member name="M:Demo3D.Common.GlobalizeString.Get(System.String)">
            <summary>
            Convert a culture neutral string to the current culture string.
            </summary>
            <param name="original">Untranslated string</param>
            <returns>Translated string, or the original string if no translation exists</returns>
        </member>
        <member name="M:Demo3D.Common.GlobalizeString.Format(System.String,System.Object[])">
            <summary>
            Convert a culture neutral string to the current culture string, with optional format parameters <see cref="M:System.String.Format(System.String,System.Object[])"/>.
            If there are no args the neutral string is taken without format markup.
            </summary>
            <param name="original">Untranslated string with optional format markup</param>
            <param name="args">Optional arguments for string format markup</param>
            <returns>Translated result string, or the original result string if no translation exists</returns>
        </member>
        <member name="T:Demo3D.Common.IGraph`2">
            <summary>
            Graph interface.
            </summary>
            <typeparam name="NodeType">The node type.</typeparam>
            <typeparam name="ArcType">The arc type.</typeparam>
        </member>
        <member name="P:Demo3D.Common.IGraph`2.Nodes">
            <summary>
            The array of nodes that form the graph.
            </summary>
        </member>
        <member name="P:Demo3D.Common.IGraph`2.Arcs">
            <summary>
            The array of arcs that form the graph.
            </summary>
        </member>
        <member name="P:Demo3D.Common.IGraph`2.Empty">
            <summary>
            Whether the graph contains any arcs (and by virtue any nodes).
            </summary>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Where(System.Predicate{`1})">
            <summary>
            Finds all arcs in the graph that satisfy the specified predicate.
            </summary>
            <remarks>
            Returns an empty array if no arcs were found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The array of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Where(System.Predicate{`0})">
            <summary>
            Finds all nodes in the graph that satisfy the specified predicate.
            </summary>
            <remarks>
            Returns an empty array if no nodes were found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The array of nodes.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Find(System.Predicate{`1})">
            <summary>
            Finds an arc in the graph that satisfies the specified predicate.
            </summary>
            <remarks>
            Returns null if no arc was found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The arc.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Find(System.Predicate{`0})">
            <summary>
            Finds a node in the graph that satisfies the specified predicate.
            </summary>
            <remarks>
            Returns null if no node was found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Clear">
            <summary>
            Clears the graph so that it contains no nodes or arcs.
            </summary>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Add(`0,`0,`1)">
            <summary>
            Adds an arc between the two specified nodes.
            </summary>
            <remarks>
            Will return false if the specified <paramref name="payload"/> already exists in the set
            of arcs between the two specified nodes.
            </remarks>
            <param name="from">The first node.</param>
            <param name="to">The second node.</param>
            <param name="payload">The payload for the arc.</param>
            <returns>True if the arc was added, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Remove(`0,`0)">
            <summary>
            Removes any arcs between the two specified nodes.
            </summary>
            <param name="from">The first node.</param>
            <param name="to">The second node.</param>
            <returns>The number of arcs that were removed.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Remove(`1)">
            <summary>
            Removes all arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>The number of arcs that were removed.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Remove(`0)">
            <summary>
            Removes the specified node along with any arcs connecting the node to/from any other
            nodes.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>True if the node was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Count(`0,`0)">
            <summary>
            The number of arcs between the two specifed nodes. 
            </summary>
            <param name="from">The first node.</param>
            <param name="to">The second node.</param>
            <returns>The number of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Count(`1)">
            <summary>
            The number of arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>The number of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Contains(`0,`0)">
            <summary>
            Whether the graph contains one or more arcs between the two specified nodes.
            </summary>
            <param name="from">The first node.</param>
            <param name="to">The second node.</param>
            <returns>True if the graph contains one or more arcs between the two nodes, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Contains(`1)">
            <summary>
            Whether the graph contains one or more arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>True if the graph contains one or more arcs with the payload, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Contains(`0)">
            <summary>
            Whether the graph contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>True if the graph contains the node, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.TryGet(`0,`0,`1[]@)">
            <summary>
            Gets the arcs between the two specified nodes.
            </summary>
            <param name="from">The first node.</param>
            <param name="to">The second node.</param>
            <param name="arcs">The array of arcs between the two nodes.</param>
            <returns>True if one or more arcs were found, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.ConnectedTo(`0)">
            <summary>
            The array of nodes that connect to the specified node.
            </summary>
            <remarks>
            For nodes `A` and `B` connected with a single directed arc:
            
               A ---------> B
            
            The array returned by `ConnectedTo(B)` will contain `A` as a single entry. If no nodes
            connect to the specified node than an empty array is returned.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected to.</param>
            <returns>The array of nodes that connect to the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.ConnectedFrom(`0)">
            <summary>
            The array of nodes that the specified node is connected to.
            </summary>
            <remarks>
            For nodes `A` and `B` connected with a single directed arc:
            
               A ---------> B
            
            The array returned by `ConnectedFrom(A)` will contain `B` as a single entry. If no nodes
            are connected from the specified node than an empty array is returned.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected from.</param>
            <returns>The array of nodes that are connected from the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.IGraph`2.Connected(`0)">
            <summary>
            The array of nodes that the specified node is connected to  or from (i.e. the adjacent
            nodes).
            </summary>
            <remarks>
            For nodes `A`, `B` and `C` connected with directed arcs:
            
               A --------> B --------> C
            
            The array returned by `Connected(A)` will contain the node `B`.
            The array returned by `Connected(B)` will contain the nodes `A` and `C`.
            The array returned by `Connected(C)` will contain the node `B`.
            
            If no nodes are connected to/from the specified node than an empty array is returned.
            Note that this method will return the union of <see cref="M:Demo3D.Common.IGraph`2.ConnectedTo(`0)"/> and
            <see cref="M:Demo3D.Common.IGraph`2.ConnectedFrom(`0)"/>.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected to/from.</param>
            <returns>The array of nodes that are connected to/from the specified node.</returns>
        </member>
        <member name="T:Demo3D.Common.UndirectedGraph`2">
            <summary>
            A graph where arcs are undirected between two nodes.
            </summary>
            <typeparam name="NodeType">The node type.</typeparam>
            <typeparam name="ArcType">The arc type.</typeparam>
        </member>
        <member name="F:Demo3D.Common.UndirectedGraph`2.nodes">
            <summary>
            The set of nodes that compose the graph.
            </summary>
        </member>
        <member name="F:Demo3D.Common.UndirectedGraph`2.arcs">
            <summary>
            The arcs that compose the graph.
            </summary>
            <remarks>
            Maps from the unordered pair of nodes to the set of arcs between those two nodes.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.UndirectedGraph`2.connections">
            <summary>
            Mappings from a node to all the nodes that the node connects from/to.
            </summary>
            <remarks>
            For nodes `A`, `B` and `C` connected by undirected arcs:
            
                A --------- B --------- C
            
            The hashset `connections[A]` will contain the node `B`.
            The hashset `connections[B]` will contain the nodes `A` and `C`.
            The hashset `connections[C]` will contain the node `B`.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.UndirectedGraph`2.Nodes">
            <summary>
            The array of nodes that form the graph.
            </summary>
        </member>
        <member name="P:Demo3D.Common.UndirectedGraph`2.Arcs">
            <summary>
            The array of arcs that form the graph.
            </summary>
        </member>
        <member name="P:Demo3D.Common.UndirectedGraph`2.Empty">
            <summary>
            Whether the graph contains any arcs (and by virtue any nodes).
            </summary>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Add(`0,`0,`1)">
            <summary>
            Adds an arc between nodes <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <remarks>
            Will return false if the specified <paramref name="payload"/> already exists in the set
            of arcs between the two specified nodes.
            </remarks>
            <param name="a">The first node that the arc connects.</param>
            <param name="b">The second node that the arc connects.</param>
            <param name="payload">The payload for the arc.</param>
            <returns>True if the arc was added, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Clear">
            <summary>
            Clears the graph so that it contains no nodes or arcs.
            </summary>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.ConnectedFrom(`0)">
            <summary>
            The array of nodes that the specified node is connected to/from.
            </summary>
            <remarks>
            For nodes `A`, `B` and `C` connected with undirected arcs:
            
               A --------- B --------- C
            
            The array returned by `ConnectedFrom(A)` will contain the node `B`.
            The array returned by `ConnectedFrom(B)` will contain the nodes `A` and `C`.
            The array returned by `ConnectedFrom(C)` will contain the node `B`.
            
            If no nodes are connected to/from the specified node than an empty array is returned.
            Note that this method will return identical results to <see cref="M:Demo3D.Common.UndirectedGraph`2.ConnectedTo(`0)"/> and
            <see cref="M:Demo3D.Common.UndirectedGraph`2.Connected(`0)"/> for undirected graphs.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected to/from.</param>
            <returns>The array of nodes that are connected to/from the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.ConnectedTo(`0)">
            <summary>
            The array of nodes that the specified node is connected to/from.
            </summary>
            <remarks>
            For nodes `A`, `B` and `C` connected with undirected arcs:
            
               A --------- B --------- C
            
            The array returned by `ConnectedTo(A)` will contain the node `B`.
            The array returned by `ConnectedTo(B)` will contain the nodes `A` and `C`.
            The array returned by `ConnectedTo(C)` will contain the node `B`.
            
            If no nodes are connected to/from the specified node than an empty array is returned.
            Note that this method will return identical results to <see cref="M:Demo3D.Common.UndirectedGraph`2.ConnectedFrom(`0)"/> and
            <see cref="M:Demo3D.Common.UndirectedGraph`2.Connected(`0)"/> for undirected graphs.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected to/from.</param>
            <returns>The array of nodes that are connected to/from the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Connected(`0)">
            <summary>
            The array of nodes that the specified node is connected to/from.
            </summary>
            <remarks>
            For nodes `A`, `B` and `C` connected with undirected arcs:
            
               A --------- B --------- C
            
            The array returned by `Connected(A)` will contain the node `B`.
            The array returned by `Connected(B)` will contain the nodes `A` and `C`.
            The array returned by `Connected(C)` will contain the node `B`.
            
            If no nodes are connected to/from the specified node than an empty array is returned.
            Note that this method will return identical results to <see cref="M:Demo3D.Common.UndirectedGraph`2.ConnectedTo(`0)"/> and
            <see cref="M:Demo3D.Common.UndirectedGraph`2.ConnectedFrom(`0)"/> for undirected graphs.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected to/from.</param>
            <returns>The array of nodes that are connected to/from the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Count(`0,`0)">
            <summary>
            The number of arcs that connect the nodes <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">The first node that the arcs should connect.</param>
            <param name="b">The second node that the arcs should connect.</param>
            <returns>The number of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Count(`1)">
            <summary>
            The number of arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>The number of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Contains(`0)">
            <summary>
            Whether the graph contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>True if the graph contains the node, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Find(System.Predicate{`1})">
            <summary>
            Finds an arc in the graph that satisfies the specified predicate.
            </summary>
            <remarks>
            Returns null if no arc was found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The arc.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Find(System.Predicate{`0})">
            <summary>
            Finds a node in the graph that satisfies the specified predicate.
            </summary>
            <remarks>
            Returns null if no node was found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Remove(`0,`0)">
            <summary>
            Removes any arcs between nodes <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">The first node that the arcs should connect.</param>
            <param name="b">The second node that the arcs should connect.</param>
            <returns>The number of arcs that were removed.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Remove(`1)">
            <summary>
            Removes all arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>The number of arcs that were removed.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Remove(`0)">
            <summary>
            Removes the specified node along with any arcs connecting the node to/from any other
            nodes.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>True if the node was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.TryGet(`0,`0,`1[]@)">
            <summary>
            Gets the arcs that connect the nodes <paramref name="a"/> and <paramref name="b"/>
            node.
            </summary>
            <param name="a">The first node that the arcs should connect.</param>
            <param name="b">The second node that the arcs should connect.</param>
            <param name="arcs">The array of arcs.</param>
            <returns>True if one or more arcs were found, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Where(System.Predicate{`1})">
            <summary>
            Finds all arcs in the graph that satisfy the specified predicate.
            </summary>
            <remarks>
            Returns an empty array if no arcs were found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The array of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Where(System.Predicate{`0})">
            <summary>
            Finds all nodes in the graph that satisfy the specified predicate.
            </summary>
            <remarks>
            Returns an empty array if no nodes were found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The array of nodes.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Contains(`0,`0)">
            <summary>
            Whether the graph contains one or more arcs between the two specified nodes.
            </summary>
            <param name="a">The first node.</param>
            <param name="b">The second node.</param>
            <returns>True if the graph contains one or more arcs between the two nodes, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.UndirectedGraph`2.Contains(`1)">
            <summary>
            Whether the graph contains one or more arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>True if the graph contains one or more arcs with the payload, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Common.DirectedGraph`2">
            <summary>
            A graph where arcs are directed from one node to another.
            </summary>
            <typeparam name="NodeType">The node type.</typeparam>
            <typeparam name="ArcType">The arc type.</typeparam>
        </member>
        <member name="F:Demo3D.Common.DirectedGraph`2.nodes">
            <summary>
            The set of nodes that compose the graph.
            </summary>
        </member>
        <member name="F:Demo3D.Common.DirectedGraph`2.arcs">
            <summary>
            The arcs that compose the graph.
            </summary>
            <remarks>
            Maps from the ordered pair of nodes to the set of arcs between those two nodes.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.DirectedGraph`2.connectedTo">
            <summary>
            Mappings from a node to all the nodes that connect to that node.
            </summary>
            <remarks>
            For nodes `A` and `B` connected by a directed arc:
            
                A ---------> B
            
            The hashset `connectedTo[B]` will contain the node `A`.
            </remarks>
        </member>
        <member name="F:Demo3D.Common.DirectedGraph`2.connectedFrom">
            <summary>
            Mappings from a node to all the nodes that the node connects to.
            </summary>
            <remarks>
            For nodes `A` and `B` connected by a directed arc:
            
                A ---------> B
            
            The hashset `connectedFrom[A]` will contain the node `B`.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.DirectedGraph`2.Nodes">
            <summary>
            The array of nodes that form the graph.
            </summary>
        </member>
        <member name="P:Demo3D.Common.DirectedGraph`2.Arcs">
            <summary>
            The array of arcs that form the graph.
            </summary>
        </member>
        <member name="P:Demo3D.Common.DirectedGraph`2.Empty">
            <summary>
            Whether the graph contains any arcs (and by virtue any nodes).
            </summary>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Add(`0,`0,`1)">
            <summary>
            Adds an arc that connects the <paramref name="from"/> node to the <paramref name="to"/>
            node.
            </summary>
            <remarks>
            Will return false if the specified <paramref name="payload"/> already exists in the set
            of arcs between the two specified nodes.
            </remarks>
            <param name="from">The node that the arc connects from.</param>
            <param name="to">The node that the arc connects to.</param>
            <param name="payload">The payload for the arc.</param>
            <returns>True if the arc was added, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Clear">
            <summary>
            Clears the graph so that it contains no nodes or arcs.
            </summary>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Count(`0,`0)">
            <summary>
            The number of arcs that connect the <paramref name="from"/> node to the
            <paramref name="to"/> node. 
            </summary>
            <param name="from">The node that the arcs should connect from.</param>
            <param name="to">The node that the arcs should connect to.</param>
            <returns>The number of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Count(`1)">
            <summary>
            The number of arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>The number of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Contains(`0)">
            <summary>
            Whether the graph contains the specified node.
            </summary>
            <param name="node">The node.</param>
            <returns>True if the graph contains the node, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Find(System.Predicate{`1})">
            <summary>
            Finds an arc in the graph that satisfies the specified predicate.
            </summary>
            <remarks>
            Returns null if no arc was found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The arc.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Find(System.Predicate{`0})">
            <summary>
            Finds a node in the graph that satisfies the specified predicate.
            </summary>
            <remarks>
            Returns null if no node was found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Remove(`0,`0)">
            <summary>
            Removes any arcs that connect the <paramref name="from"/> node to the
            <paramref name="to"/> node.
            </summary>
            <param name="from">The node that the arcs should connect from.</param>
            <param name="to">The node that the arcs should connect to.</param>
            <returns>The number of arcs that were removed.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Remove(`1)">
            <summary>
            Removes all arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>The number of arcs that were removed.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Remove(`0)">
            <summary>
            Removes the specified node along with any arcs connecting the node to/from any other
            nodes.
            </summary>
            <param name="node">The node to remove.</param>
            <returns>True if the node was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.TryGet(`0,`0,`1[]@)">
            <summary>
            Gets the arcs that connect the <paramref name="from"/> node to the <paramref name="to"/>
            node.
            </summary>
            <param name="from">The node that the arcs should connect from.</param>
            <param name="to">The node that the arcs should connect to.</param>
            <param name="arcs">The array of arcs.</param>
            <returns>True if one or more arcs were found, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Where(System.Predicate{`1})">
            <summary>
            Finds all arcs in the graph that satisfy the specified predicate.
            </summary>
            <remarks>
            Returns an empty array if no arcs were found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The array of arcs.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Where(System.Predicate{`0})">
            <summary>
            Finds all nodes in the graph that satisfy the specified predicate.
            </summary>
            <remarks>
            Returns an empty array if no nodes were found satisfying the specified predicate.
            </remarks>
            <param name="predicate">The predicate.</param>
            <returns>The array of nodes.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.ConnectedTo(`0)">
            <summary>
            The array of nodes that connect to the specified node.
            </summary>
            <remarks>
            For nodes `A` and `B` connected with a single directed arc:
            
               A ---------> B
            
            The array returned by `ConnectedTo(B)` will contain `A` as a single entry. If no nodes
            connect to the specified node than an empty array is returned.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected to.</param>
            <returns>The array of nodes that connect to the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.ConnectedFrom(`0)">
            <summary>
            The array of nodes that the specified node is connected to.
            </summary>
            <remarks>
            For nodes `A` and `B` connected with a single directed arc:
            
               A ---------> B
            
            The array returned by `ConnectedFrom(A)` will contain `B` as a single entry. If no nodes
            are connected from the specified node than an empty array is returned.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected from.</param>
            <returns>The array of nodes that are connected from the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Connected(`0)">
            <summary>
            The array of nodes that the specified node is connected to  or from (i.e. the adjacent
            nodes).
            </summary>
            <remarks>
            For nodes `A`, `B` and `C` connected with directed arcs:
            
               A --------> B --------> C
            
            The array returned by `Connected(A)` will contain the node `B`.
            The array returned by `Connected(B)` will contain the nodes `A` and `C`.
            The array returned by `Connected(C)` will contain the node `B`.
            
            If no nodes are connected to/from the specified node than an empty array is returned.
            Note that this method will return the union of <see cref="M:Demo3D.Common.DirectedGraph`2.ConnectedTo(`0)"/> and
            <see cref="M:Demo3D.Common.DirectedGraph`2.ConnectedFrom(`0)"/>.
            </remarks>
            <param name="node">The node that the array of returned nodes must all be connected to/from.</param>
            <returns>The array of nodes that are connected to/from the specified node.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Contains(`0,`0)">
            <summary>
            Whether the graph contains one or more arcs that connect the <paramref name="from"/>
            node to the <paramref name="to"/> node. 
            </summary>
            <param name="from">The node that the arc should connect from.</param>
            <param name="to">The node that the arc should connect to.</param>
            <returns>True if the graph contains one or more arcs such arcs, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.DirectedGraph`2.Contains(`1)">
            <summary>
            Whether the graph contains one or more arcs with the specified payload.
            </summary>
            <param name="payload">The payload.</param>
            <returns>True if the graph contains one or more arcs with the payload, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Common.GraphUtilities`2">
            <summary>
            Utility functions for graphs.
            </summary>
            <typeparam name="NodeType">The node type.</typeparam>
            <typeparam name="ArcType">The arc type.</typeparam>
        </member>
        <member name="M:Demo3D.Common.GraphUtilities`2.Decompose(Demo3D.Common.IGraph{`0,`1})">
            <summary>
            Decomposes the supplied graph into a set of disconnected subgraphs.
            </summary>
            <param name="graph">The graph to decompose.</param>
            <returns>The set of disconnected subgraphs.</returns>
        </member>
        <member name="T:Demo3D.Common.HelpUrlAttribute">
            <summary>
            When added to an aspect class, this attribute overrides the help button on the aspect in the Aspect Viewer
            to link to the help website instead of the api website.
            </summary>
        </member>
        <member name="P:Demo3D.Common.HelpUrlAttribute.Url">
            <summary>
            The page name to link to in the help website.
            </summary>
        </member>
        <member name="M:Demo3D.Common.HelpUrlAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Demo3D.Common.HelpUrlAttribute"/> class
            </summary>
            <param name="url">The page name to link to in the help website.</param>
        </member>
        <member name="T:Demo3D.Common.ImageExtensions">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.ImageExtensions.ToImgSrc(System.Drawing.Image)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.ImageExtensions.GetFilenameExtension(System.Drawing.Image)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.IGuiCommand">
            <summary>
            Interface for classes that can invoke a GUI tool using a URI-style string.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.IGuiCommand.Command(System.String)">
            <summary>
            Invoke a gui tool, allow arguments to be passed URI-style.
            For example:
               Command( "Open?edits=discard&amp;file=/path/to/project.demo3d" );
            Note that it's not necessary to escape the '/' characters.
            </summary>
        </member>
        <member name="T:Demo3D.Common.INeedsInitializing">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.InjectiveMapping`2">
            <summary>
            A single injective mapping.
            </summary>
            <typeparam name="TLeft">The type for left value.</typeparam>
            <typeparam name="TRight">The type for right value.</typeparam>
        </member>
        <member name="P:Demo3D.Common.InjectiveMapping`2.Left">
            <summary>
            The left value in the mapping.
            </summary>
        </member>
        <member name="P:Demo3D.Common.InjectiveMapping`2.Right">
            <summary>
            The right value in the mapping.
            </summary>
        </member>
        <member name="M:Demo3D.Common.InjectiveMapping`2.#ctor(`0,`1)">
            <summary>
            Constructor.
            </summary>
            <param name="left">The left value for the mapping.</param>
            <param name="right">The right value for the mapping.</param>
        </member>
        <member name="T:Demo3D.Common.InjectiveMapEnumerator`2">
            <summary>
            Enumerator for an injective map (that doesn't dynamically allocate memory).
            </summary>
            <typeparam name="TLeft">The type for left values.</typeparam>
            <typeparam name="TRight">The type for right values.</typeparam>
        </member>
        <member name="T:Demo3D.Common.InjectiveMap`2">
            <summary>
            A collection of injective (bidirectional one-to-one) mappings.
            </summary>
            <typeparam name="TLeft">The type for left values.</typeparam>
            <typeparam name="TRight">The type for right values.</typeparam>
        </member>
        <member name="F:Demo3D.Common.InjectiveMap`2.leftToRight">
            <summary>
            The injective mapping from left to right.
            </summary>
        </member>
        <member name="F:Demo3D.Common.InjectiveMap`2.rightToLeft">
            <summary>
            The injective mapping from right to left.
            </summary>
        </member>
        <member name="P:Demo3D.Common.InjectiveMap`2.Left">
            <summary>
            The domain for the mapping.
            </summary>
        </member>
        <member name="P:Demo3D.Common.InjectiveMap`2.Right">
            <summary>
            The codomain for the mapping.
            </summary>
        </member>
        <member name="P:Demo3D.Common.InjectiveMap`2.Count">
            <summary>
            The number of injective mappings contained.
            </summary>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity.</param>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.Clear">
            <summary>
            Removes all injective mappings.
            </summary>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.MapLeftRight(`0,`1)">
            <summary>
            Specifies an injective mapping between <paramref name="left"/> and
            <paramref name="right"/>.
            </summary>
            <remarks>
            Does nothing if a mapping already exists for either the <paramref name="left"/> or
            <paramref name="right"/> values. The only difference between this method and
            <see cref="M:Demo3D.Common.InjectiveMap`2.MapRightLeft(`1,`0)"/> is the order in which the arguments are
            passed.
            </remarks>
            <param name="left">The left value to be mapped to the right value.</param>
            <param name="right">The right value to be mapped to the left value.</param>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.MapRightLeft(`1,`0)">
            <summary>
            Specifies an injective mapping between <paramref name="right"/> and
            <paramref name="left"/>.
            </summary>
            <remarks>
            Does nothing if a mapping already exists for either the <paramref name="right"/> or
            <paramref name="left"/> values. The only difference between this method and
            <see cref="M:Demo3D.Common.InjectiveMap`2.MapLeftRight(`0,`1)"/> is the order in which the arguments are
            passed.
            </remarks>
            <param name="right">The right value to be mapped to the left value.</param>
            <param name="left">The left value to be mapped to the right value.</param>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.MapLeftRight(`0)">
            <summary>
            Accessor for the right value mapped to the specified <paramref name="left"/> value.
            </summary>
            <param name="left">The left value for which to obtain the corresponding right value.</param>
            <returns>The right value that is mapped to the specified left value.</returns>
            <exception cref="T:System.ArgumentException">Throws if an injective mapping does not exist for the specified left value.</exception>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.MapRightLeft(`1)">
            <summary>
            Accessor for the left value mapped to the specified <paramref name="right"/> value.
            </summary>
            <param name="right">The right value for which to obtain the corresponding left value.</param>
            <returns>The left value that is mapped to the specified right value.</returns>
            <exception cref="T:System.ArgumentException">Throws if an injective mapping does not exist for the specified right value.</exception>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.TryMapLeftRight(`0,`1@)">
            <summary>
            Accessor for the right value mapped to the specified <paramref name="left"/> value.
            </summary>
            <param name="left">The left value for which to obtain the corresponding right value.</param>
            <param name="right">The right value that is mapped to the specified left value.</param>
            <returns>True if a mapping was found, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.TryMapRightLeft(`1,`0@)">
            <summary>
            Accessor for the left value mapped to the specified <paramref name="right"/> value.
            </summary>
            <param name="right">The right value for which to obtain the corresponding left value.</param>
            <param name="left">The left value that is mapped to the specified right value.</param>
            <returns>True if a mapping was found, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.ContainsLeftRight(`0,`1)">
            <summary>
            Determines whether an injective mapping exists between the specified
            <paramref name="left"/> and <paramref name="right"/> values.
            </summary>
            <remarks>
            The only difference between this method and
            <see cref="M:Demo3D.Common.InjectiveMap`2.ContainsRightLeft(`1,`0)"/> is the order in which the arguments are
            passed.
            </remarks>
            <param name="left">The left value.</param>
            <param name="right">The right value.</param>
            <returns>True if an injective mapping exists between the specified left and right values, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.ContainsRightLeft(`1,`0)">
            <summary>
            Determines whether an injective mapping exists between the specified
            <paramref name="right"/> and <paramref name="left"/> values.
            </summary>
            <remarks>
            The only difference between this method and
            <see cref="M:Demo3D.Common.InjectiveMap`2.ContainsLeftRight(`0,`1)"/> is the order in which the arguments are
            passed.
            </remarks>
            <param name="right">The right value.</param>
            <param name="left">The left value.</param>
            <returns>True if an injective mapping exists between the specified right and left values, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.ContainsLeft(`0)">
            <summary>
            Determines whether an injective mapping exists between the specified
            <paramref name="left"/> value and some right value.
            </summary>
            <param name="left">The left value.</param>
            <returns>True if an injective mapping exists between the specified left value and some other right value, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.ContainsRight(`1)">
            <summary>
            Determines whether an injective mapping exists between the specified
            <paramref name="right"/> value and some left value.
            </summary>
            <param name="right">The right value.</param>
            <returns>True if an injective mapping exists between the specified right value and some other left value, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.RemoveLeftRight(`0,`1)">
            <summary>
            Removes the injective mapping between the specified <paramref name="left"/> and
            <paramref name="right"/> values.
            </summary>
            <remarks>
            This is a fast version of <see cref="M:Demo3D.Common.InjectiveMap`2.RemoveLeftRight(`0)"/> and
            <see cref="M:Demo3D.Common.InjectiveMap`2.RemoveRightLeft(`1)"/>. Note that invariants of the injective map will be
            broken if a mapping does not exist between the specified <paramref name="left"/> and
            <paramref name="right"/> values (unless neither value is mapped to any other value). The
            only difference between this method and <see cref="M:Demo3D.Common.InjectiveMap`2.RemoveRightLeft(`1,`0)"/> is
            the order in which the arguments are passed.
            </remarks>
            <param name="left">The left value for the mapping that is to be removed.</param>
            <param name="right">The right value for the mapping that is to be removed.</param>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.RemoveRightLeft(`1,`0)">
            <summary>
            Removes the injective mapping between the specified <paramref name="right"/> and
            <paramref name="left"/> values.
            </summary>
            <remarks>
            This is a fast version of <see cref="M:Demo3D.Common.InjectiveMap`2.RemoveRightLeft(`1)"/> and
            <see cref="M:Demo3D.Common.InjectiveMap`2.RemoveLeftRight(`0)"/>. Note that invariants of the injective map
            will be broken if a mapping does not exist between the specified
            <paramref name="right"/> and <paramref name="left"/> values (unless neither value is
            mapped to any other value). The only difference between this method and
            <see cref="M:Demo3D.Common.InjectiveMap`2.RemoveRightLeft(`1,`0)"/> is the order in which the arguments are
            passed.
            </remarks>
            <param name="right">The right value for the mapping that is to be removed.</param>
            <param name="left">The left value for the mapping that is to be removed.</param>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.RemoveLeftRight(`0)">
            <summary>
            Removes the injective mapping between the specified <paramref name="left"/> value and
            the corresponding right value.
            </summary>
            <param name="left">The left value.</param>
            <returns>True if an injective mapping was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.RemoveRightLeft(`1)">
            <summary>
            Removes the injective mapping between the specified <paramref name="right"/> value and
            the corresponding left value.
            </summary>
            <param name="right">The right value.</param>
            <returns>True if an injective mapping was found and removed, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.System#Collections#Generic#IEnumerable{Demo3D#Common#InjectiveMapping{TLeft,TRight}}#GetEnumerator">
            <summary>
            Enumerator for the injective mappings.
            </summary>
            <returns>Injective mapping enumerator.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.GetEnumerator">
            <summary>
            Enumerator for the injective mapping.
            </summary>
            <returns>Injective mapping enumerator.</returns>
        </member>
        <member name="M:Demo3D.Common.InjectiveMap`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerator for the injective mappings.
            </summary>
            <returns>Injective mapping enumerator.</returns>
        </member>
        <member name="T:Demo3D.Common.LicenseException">
            <summary>
            Generic exception for licensing failures.
            </summary>
        </member>
        <member name="T:Demo3D.Common.LiteArray`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.LiteArrayList">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.LiteDictionary`2">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.LiteHashSet`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.LiteList`1">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.LiteNullable`1">
            <summary>
            A lightweight Nullable<typeparamref name="T"/> type, useful if you have a rarely used large struct as a member,
            e.g. a <see cref="T:Microsoft.DirectX.Matrix"/>
            <para>The idea is that it is a class, so can be null without any extra storage, you only use the memory for the
            struct if you actually instantiate an instance of the class.</para>
            </summary>
            <typeparam name="T">Struct type.</typeparam>
        </member>
        <member name="M:Demo3D.Common.LiteNullable`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="v">Value to copy.</param>
        </member>
        <member name="P:Demo3D.Common.LiteNullable`1.Value">
            <summary>
            Return contained value (by reference).
            </summary>
        </member>
        <member name="T:Demo3D.Common.LiteNullableExtensions">
            <summary>
            Extension methods for <see cref="T:Demo3D.Common.LiteNullable`1"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Common.LiteNullableExtensions.HasValue``1(Demo3D.Common.LiteNullable{``0})">
            <summary>
            Does the <see cref="T:Demo3D.Common.LiteNullable`1"/> have a value.
            </summary>
            <remarks>Unfortunately, C# does not (yet) have extension properties, so I have had to add this as a method.</remarks>
            <typeparam name="T">Struct type.</typeparam>
            <param name="n">LiteNullable object.</param>
            <returns>true if it has a value, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Common.LockReentrantAsync">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.InterpolatorHelpers.IInterpolator">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.InterpolatorHelpers.ScaleRotationTranslationInterpolator">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.InterpolatorHelpers.RotationTranslationInterpolator">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.InterpolatorHelpers.RotationInterpolator">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.InterpolatorHelpers.TranslationInterpolator">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MatrixInterpolator">
            <summary>
            Class to interpolate between a start Matrix and an end Matrix.
            </summary>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.#ctor(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            Constructor.
            </summary>
            <param name="from">Start Matrix.</param>
            <param name="to">End Matrix.</param>
        </member>
        <member name="P:Demo3D.Common.MatrixInterpolator.Interpolator">
            <summary>
            Create the correct interpolater object.
            </summary>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Double,System.Double,System.Double)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation, rotation, and scale.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation component to include.</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include.</param>
            <param name="s">Value between 0 and 1 for how much scale component to include.</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>It is assumed that the values passed in are in the range [0, 1].</remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Single,System.Single,System.Single)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation, rotation, and scale.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation component to include.</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include.</param>
            <param name="s">Value between 0 and 1 for how much scale component to include.</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is assumed that the values passed in are in the range [0, 1].</para>
            <para>It is recommended to use <see cref="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Double,System.Double,System.Double)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Double,System.Double,System.Double)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation, rotation, and scale.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation component to include (snapped to range [0, 1]).</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include (snapped to range [0, 1]).</param>
            <param name="s">Value between 0 and 1 for how much scale component to include (snapped to range [0, 1]).</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Single,System.Single,System.Single)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation, rotation, and scale.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation component to include (snapped to range [0, 1]).</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include (snapped to range [0, 1]).</param>
            <param name="s">Value between 0 and 1 for how much scale component to include (snapped to range [0, 1]).</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is recommended to use <see cref="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Double,System.Double,System.Double)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Double,System.Double)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation/scale and rotation.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation and scale component to include.</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include.</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is assumed that the values passed in are in the range [0, 1].</para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Single,System.Single)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation/scale and rotation.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation and scale component to include.</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include.</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is assumed that the values passed in are in the range [0, 1].</para>
            <para>It is recommended to use <see cref="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Double,System.Double)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Double,System.Double)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation/scale and rotation.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation and scale component to include (snapped to range [0, 1]).</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include (snapped to range [0, 1]).</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Single,System.Single)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based on the 0..1 components of the
            translation/scale and rotation.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation and scale component to include (snapped to range [0, 1]).</param>
            <param name="r">Value between 0 and 1 for how much rotation component to include (snapped to range [0, 1]).</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is recommended to use <see cref="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Double,System.Double)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Double)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based the 0..1 interval.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation, rotation and scale component to include.</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is assumed that the values passed in are in the range [0, 1].</para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Single)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based the 0..1 interval.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation, rotation and scale component to include.</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is assumed that the values passed in are in the range [0, 1].</para>
            <para>It is recommended to use <see cref="M:Demo3D.Common.MatrixInterpolator.InterpolateNoSnap(System.Double)"/> instead.</para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Double)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based the 0..1 interval.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation, rotation and scale component to include (snapped to range [0, 1]).</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
        </member>
        <member name="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Single)">
            <summary>
            Return the interpolated matrix "between" <see cref="P:Demo3D.Common.MatrixInterpolator.From"/> and <see cref="P:Demo3D.Common.MatrixInterpolator.To"/> based the 0..1 interval.
            </summary>
            <param name="t">Value between 0 and 1 for how much translation, rotation and scale component to include (snapped to range [0, 1]).</param>
            <returns>if &lt;= 0 return <see cref="P:Demo3D.Common.MatrixInterpolator.From"/>, if >= 1 return <see cref="P:Demo3D.Common.MatrixInterpolator.To"/>, otherwise interpolated matrix.</returns>
            <remarks>
            <para>It is recommended to use <see cref="M:Demo3D.Common.MatrixInterpolator.Interpolate(System.Double)"/> instead.</para>
            </remarks>
        </member>
        <member name="P:Demo3D.Common.MatrixInterpolator.From">
            <summary>
            Start <see cref="T:Microsoft.DirectX.Matrix"/>.
            </summary>
        </member>
        <member name="P:Demo3D.Common.MatrixInterpolator.To">
            <summary>
            End <see cref="T:Microsoft.DirectX.Matrix"/>.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Namespace">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Namespace.ShouldCacheTypes(System.Reflection.Assembly)">
            <summary>
            Should we attempt to cache the types contained in this assembly?
            We don't if
            a) We are a "dynamic" assembly
            b) We are an assembly from a C# scripting dll
            </summary>
            <param name="a">Assembly to test</param>
            <returns>true if we should attempt to cache types, false if not</returns>
        </member>
        <member name="M:Demo3D.Common.Namespace.ShouldCacheType(System.Type)">
            <summary>
            Should we attempt to cache the type?
            We don't if
            a) We shouldn't cache the assembly this type is in
            b) If there are any generic parameters that we should not cache
            </summary>
            <param name="t">Type to test</param>
            <returns>true if we should attempt to cache type, false if not</returns>
        </member>
        <member name="M:Demo3D.Common.Namespace.CacheType(System.String,System.Type,System.Boolean)">
            <summary>
            Add a string->System.Type mapping for given string and System.Type
            Optionally also add (a) Type.ToString()->Type and (b) Type.FullName->Type mappings if given typeName is different from these
            e.g.
            
            a) System.Collections.Generic.List`1[[Demo3D.Visuals.RackShelfBinLocation, Demo3D.Core, Version=10.0.0.6263, Culture=neutral, PublicKeyToken=null]]
               System.Collections.Generic.List`1[Demo3D.Visuals.RackShelfBinLocation]
               
            b) System.Collections.Generic.List`1[[Demo3D.Visuals.RackShelfBinLocation, Demo3D.Core, Version=10.0.0.6263, Culture=neutral, PublicKeyToken=null]]
               System.Collections.Generic.List`1[[Demo3D.Visuals.RackShelfBinLocation, Demo3D.Core, Version=10.0.0.6284, Culture=neutral, PublicKeyToken=null]]
            </summary>
            <param name="typeName">"name" for System.Type</param>
            <param name="type">System.Type</param>
            <param name="includeAlternateTypeNames">Also include the type.ToString()->type and type.FullName->type, if different from given typeName</param>
        </member>
        <member name="M:Demo3D.Common.Namespace.CacheType(System.Type)">
            <summary>
            Add a System.Type.FullName->System.Type mapping for given System.Type
            </summary>
            <param name="type">System.Type to insert mapping for</param>
        </member>
        <member name="T:Demo3D.Common.Namespace.LoadAssemblyDelegate">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Namespace.ExceptionWithStackTrace">
            <summary>
            Capture the stack trace BEFORE (or WITHOUT) throwing an exception.
            http://stackoverflow.com/questions/37093261/attach-stacktrace-to-exception-without-throwing-in-c-sharp-net
            </summary>
        </member>
        <member name="M:Demo3D.Common.Namespace.FindUsingAssemblyName(System.String)">
            <summary>
            It is possible to compile up an external dll where the DefaultNamespace is not the same as the AssemblyName
            We use this when handling the "import" JScript statement
            </summary>
            <param name="name">Assembly Name</param>
            <returns>Default Namespace for this assembly</returns>
        </member>
        <member name="F:Demo3D.Common.Namespace.FindTypeFunc">
            <summary>
            Pre-generated func storage for a call to <see cref="M:Demo3D.Common.Namespace.FindType(System.String)"/> to avoid runtime
            memory allocation
            </summary>
        </member>
        <member name="M:Demo3D.Common.Namespace.Import(System.String)">
            <summary>
            Return a list of assemblies that contain the namespace.
            If the namespace isn't loaded look for a {namespace}.dll.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Namespace.Import(System.String,System.String)">
            <summary>
            Return a list of assemblies that contain the namespace.
            If the namespace isn't loaded look for fullName in the GAC.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Namespace.AddCompatibilityTypeMapping(System.String,System.Type)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.NextId`1">
            <summary>
            Class for managing object id's in a consistent way.
            Use it like this:
            
               public class A {
                   private readonly int id = NextId&lt;A>.Get();
                   public int Id { get { return id; } }
                   ...
               }
               
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="E:Demo3D.Common.NotifyPropertyChangedBase.PropertyChanged">
            <summary>
            Event fired when a property changes.
            </summary>
        </member>
        <member name="M:Demo3D.Common.NotifyPropertyChangedBase.UpdateProperty``1(``0@,``0,System.String)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="M:Demo3D.Common.NotifyPropertyChangedBase.UpdateProperty``1(``0@,``0,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Change a property value and notify any listeners of the change.
            </summary>
        </member>
        <member name="M:Demo3D.Common.NotifyPropertyChangedBase.CheckUpdateProperty``1(``0@,``0)">
            <summary>
            Change a property value, and return a true or false indicating
            whether the value actually changed. It is the responsibility of the 
            property setter to then call OnPropertyChanged(propertyName).
            </summary>
        </member>
        <member name="M:Demo3D.Common.NotifyPropertyChangedBase.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Propagate any property changes to listeners.
            </summary>
        </member>
        <member name="M:Demo3D.Common.NotifyPropertyChangedBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Propagate any property changes to listeners.
            </summary>
        </member>
        <member name="M:Demo3D.Common.NotifyPropertyChangedBase.OnPropertyChanged(System.String)">
            <summary>
            Propagate any property changes to listeners.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PriorityQueue`2">
            <summary>
            Priority queue based on binary heap,
            Elements with minimum priority dequeued first
            </summary>
            <typeparam name="TPriority">Type of priorities</typeparam>
            <typeparam name="TValue">Type of values</typeparam>
        </member>
        <member name="P:Demo3D.Common.PriorityQueue`2.BaseHeap">
            <summary>
            Allow access to internal list and reassignment for garbage collection of unwanted events.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.#ctor">
            <summary>
            Initializes a new instance of priority queue with default initial capacity and default priority comparer
            </summary>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of priority queue with specified initial capacity and default priority comparer
            </summary>
            <param name="capacity">initial capacity</param>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of priority queue with specified initial capacity and specified priority comparer
            </summary>
            <param name="capacity">initial capacity</param>
            <param name="comparer">priority comparer</param>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of priority queue with default initial capacity and specified priority comparer
            </summary>
            <param name="comparer">priority comparer</param>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
            <summary>
            Initializes a new instance of priority queue with specified data and default priority comparer
            </summary>
            <param name="data">data to be inserted into priority queue</param>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IComparer{`0})">
            <summary>
            Initializes a new instance of priority queue with specified data and specified priority comparer
            </summary>
            <param name="data">data to be inserted into priority queue</param>
            <param name="comparer">priority comparer</param>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.MergeQueues(Demo3D.Common.PriorityQueue{`0,`1},Demo3D.Common.PriorityQueue{`0,`1})">
            <summary>
            Merges two priority queues
            </summary>
            <param name="pq1">first priority queue</param>
            <param name="pq2">second priority queue</param>
            <returns>resultant priority queue</returns>
            <remarks>
            source priority queues must have equal comparers,
            otherwise <see cref="T:System.InvalidOperationException"/> will be thrown
            </remarks>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.MergeQueues(Demo3D.Common.PriorityQueue{`0,`1},Demo3D.Common.PriorityQueue{`0,`1},System.Collections.Generic.IComparer{`0})">
            <summary>
            Merges two priority queues and sets specified comparer for resultant priority queue
            </summary>
            <param name="pq1">first priority queue</param>
            <param name="pq2">second priority queue</param>
            <param name="comparer">comparer for resultant priority queue</param>
            <returns>resultant priority queue</returns>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Enqueues element into priority queue
            </summary>
            <param name="priority">element priority</param>
            <param name="value">element value</param>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.Dequeue">
            <summary>
            Dequeues element with minimum priority and return its priority and value as <see cref="T:System.Collections.Generic.KeyValuePair`2"/> 
            </summary>
            <returns>priority and value of the dequeued element</returns>
            <remarks>
            Method throws <see cref="T:System.InvalidOperationException"/> if priority queue is empty
            </remarks>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.DequeueValue">
            <summary>
            Dequeues element with minimum priority and return its value
            </summary>
            <returns>value of the dequeued element</returns>
            <remarks>
            Method throws <see cref="T:System.InvalidOperationException"/> if priority queue is empty
            </remarks>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.Peek">
            <summary>
            Returns priority and value of the element with minimun priority, without removing it from the queue
            </summary>
            <returns>priority and value of the element with minimum priority</returns>
            <remarks>
            Method throws <see cref="T:System.InvalidOperationException"/> if priority queue is empty
            </remarks>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.PeekValue">
            <summary>
            Returns value of the element with minimun priority, without removing it from the queue
            </summary>
            <returns>value of the element with minimum priority</returns>
            <remarks>
            Method throws <see cref="T:System.InvalidOperationException"/> if priority queue is empty
            </remarks>
        </member>
        <member name="P:Demo3D.Common.PriorityQueue`2.IsEmpty">
            <summary>
            Gets whether priority queue is empty
            </summary>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Enqueus element into priority queue
            </summary>
            <param name="item">element to add</param>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.Clear">
            <summary>
            Clears the collection
            </summary>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the priority queue contains a specific element
            </summary>
            <param name="item">The object to locate in the priority queue</param>
            <returns><c>true</c> if item is found in the priority queue; otherwise, <c>false.</c> </returns>
        </member>
        <member name="P:Demo3D.Common.PriorityQueue`2.Count">
            <summary>
            Gets number of elements in the priority queue
            </summary>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the priority queue to an Array, starting at a particular Array index. 
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from the priority queue. The Array must have zero-based indexing. </param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <remarks>
            It is not guaranteed that items will be copied in the sorted order.
            </remarks>
        </member>
        <member name="P:Demo3D.Common.PriorityQueue`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only. 
            </summary>
            <remarks>
            For priority queue this property returns <c>false</c>.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the priority queue. 
            </summary>
            <param name="item">The object to remove from the ICollection&lt;(Of&lt;(T>)>). </param>
            <returns><c>true</c> if item was successfully removed from the priority queue.
            This method returns false if item is not found in the collection. </returns>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator</returns>
            <remarks>
            Returned enumerator does not iterate elements in sorted order.</remarks>
        </member>
        <member name="M:Demo3D.Common.PriorityQueue`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>Enumerator</returns>
            <remarks>
            Returned enumerator does not iterate elements in sorted order.</remarks>
        </member>
        <member name="M:Demo3D.Common.PropertyList.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.PropertyList.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Common.DescriptorForXML">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Random.NamespaceDoc">
            <summary>
            The Demo3D.Common.Random namespace.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Random.GeneratorReference">
            <summary>
            Indirect reference to a generator via a name
            </summary>
        </member>
        <member name="T:Demo3D.Common.Random.GeneratorRegistry">
            <summary>
            The collection of random number streams currently in use.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.GeneratorTypes">
            <summary>
            The mapping of generator type names to .NET types.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.GeneratorType">
            <summary>
            The type of random number stream to create.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.InitialSeed">
            <summary>
            The initial random number stream seed offset for the current replication.
            This is added to the seed parameter when calling CreateStream.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.Replication">
            <summary>
            The current replication number (starting at 1).
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.ReplicationSeedIncrement">
            <summary>
            The initial seed offset for the current replication.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.GeneratorSeedIncrement">
            <summary>
            Each random number stream beyond the first is offset from the InitialSeed by this amount,
            based on their index in the GeneratorOrder list.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.GeneratorOrder">
            <summary>
            The implicit index of each generator name.
            The index is used to offset the seed for each generator using GeneratorSeedIncrement.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.ReplicationInitialSeed">
            <summary>
            The base initial seed for the current replication.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.GeneratorRegistry.AddStream(System.String,System.Random)">
            <summary>
            Add a new random number stream by name.
            </summary>
            <param name="name">The name of the random number stream.</param>
            <param name="stream">The random number stream.</param>
        </member>
        <member name="M:Demo3D.Common.Random.GeneratorRegistry.GetStream(System.String)">
            <summary>
            Get the existing, or create a new, random number stream by name.
            </summary>
            <param name="name">The name of the random number stream.</param>
            <returns>The new or existing random number stream.</returns>
        </member>
        <member name="M:Demo3D.Common.Random.GeneratorRegistry.GetStream(Demo3D.Common.Random.GeneratorReference)">
            <summary>
            Get the existing, or create a new, random number stream by reference (Name).
            </summary>
            <param name="generator">The name of the random number stream.</param>
            <returns>The new or existing random number stream.</returns>
        </member>
        <member name="M:Demo3D.Common.Random.GeneratorRegistry.Clear">
            <summary>
            Remove all existing random number streams.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.Count">
            <summary>
            The number of random numbers streams currently in use.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.GeneratorRegistry.Streams">
            <summary>
            The collection of all random number streams currently in use.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.GeneratorRegistry.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,System#Random}}#GetEnumerator">
            <summary>
            Implement IEnumerable interface to access random number streams collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.Random.GeneratorRegistry.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Implement IEnumerable interface to access random number streams collection.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Common.Random.RandomWithStats">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Random.RandomExtensionMethods">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Random.DistributionRegistry">
            <summary>
            The registry of distributions types.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.DistributionBase.Read(Demo3D.Common.SerializerEntryReader)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.Random.DistributionBase.Write(Demo3D.Common.Serializer,System.Object)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.Random.DistributionBase.DT">
            <summary>
            Distribution Type needed to allow models to be loaded in previous versions.
            </summary>
            <returns>Distribution Type from previous releases.</returns>
        </member>
        <member name="F:Demo3D.Common.Random.ContinuousUniformDistribution.DefaultMinimum">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ContinuousUniformDistribution.Minimum"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.ContinuousUniformDistribution.DefaultMaximum">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ContinuousUniformDistribution.Maximum"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.NormalDistribution.DefaultMean">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.NormalDistribution.Mean"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.NormalDistribution.DefaultStandardDeviation">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.NormalDistribution.StandardDeviation"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.WeibullDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.WeibullDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.WeibullDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.WeibullDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LognormalDistribution.DefaultMu">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.LognormalDistribution.Mu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LognormalDistribution.DefaultSigma">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.LognormalDistribution.Sigma"/> if none is specified.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Random.LogisticDistribution">
            <summary>
            Logistic distribution - <a href="http://en.wikipedia.org/wiki/Logistic_distribution">Logistic Distribution</a>.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.LogisticDistribution.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.LogisticDistribution.#ctor(Demo3D.Common.Random.GeneratorRegistry)">
            <summary>
            Constructor.
            </summary>
            <param name="generatorRegistry">The collection of random number streams currently in use./></param>
        </member>
        <member name="M:Demo3D.Common.Random.LogisticDistribution.#ctor(System.Object[])">
            <summary>
            Constructor.
            </summary>
            <param name="distributionParameters">The parameters to use.</param>
        </member>
        <member name="F:Demo3D.Common.Random.LogisticDistribution.DefaultLocation">
            <summary>
            Default value for <see cref="P:Demo3D.Common.Random.LogisticDistribution.Location"/> parameter.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LogisticDistribution.location">
            <summary>
            Storage for <see cref="P:Demo3D.Common.Random.LogisticDistribution.Location"/> parameter.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.LogisticDistribution.Location">
            <summary>
            The "Location" parameter for the distribution.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LogisticDistribution.DefaultScale">
            <summary>
            Default value for <see cref="P:Demo3D.Common.Random.LogisticDistribution.Scale"/> parameter.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LogisticDistribution.scale">
            <summary>
            Storage for <see cref="P:Demo3D.Common.Random.LogisticDistribution.Scale"/> parameter.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.LogisticDistribution.Scale">
            <summary>
            The "Scale" parameter for the distribution.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LogisticDistribution.dist">
            <summary>
            Storage for the distribution implementation.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.LogisticDistribution.Initialize">
            <summary>
            Initialize the distribution implementation.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Random.LogisticDistribution.DT">
            <summary>
            Underlying <see cref="T:System.Type"/> implementing the distribution.
            </summary>
            <returns>Underlying <see cref="T:System.Type"/> implementing the distribution.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Random.LogisticDistribution.NextDouble">
            <summary>
            Generate distributed number in range [0, 1).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.Random.LogisticDistribution.ToString">
            <summary>
            String representaion of distribution.
            </summary>
            <returns>String representaion of distribution.</returns>
        </member>
        <member name="T:Demo3D.Common.Random.LoglogisticDistribution">
            <summary>
            Loglogistic distribution - <a href="http://en.wikipedia.org/wiki/Log-logistic_distribution">Log-Logistic Distribution</a>, with
            additional location parameter shifting it
            (<a href="http://en.wikipedia.org/wiki/Shifted_log-logistic_distribution#Alternate_parameterization">Shifted Log-Logistic Distribution</a>.)
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.LoglogisticDistribution.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.LoglogisticDistribution.#ctor(Demo3D.Common.Random.GeneratorRegistry)">
            <summary>
            Constructor.
            </summary>
            <param name="generatorRegistry">The collection of random number streams currently in use./></param>
        </member>
        <member name="F:Demo3D.Common.Random.LoglogisticDistribution.DefaultLocation">
            <summary>
            Default value for <see cref="P:Demo3D.Common.Random.LoglogisticDistribution.Location"/> parameter.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LoglogisticDistribution.location">
            <summary>
            Storage for <see cref="P:Demo3D.Common.Random.LoglogisticDistribution.Location"/> parameter.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.LoglogisticDistribution.Location">
            <summary>
            The "Location" parameter for the distribution.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LoglogisticDistribution.DefaultScale">
            <summary>
            Default value for <see cref="P:Demo3D.Common.Random.LoglogisticDistribution.Scale"/> parameter.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LoglogisticDistribution.scale">
            <summary>
            Storage for <see cref="P:Demo3D.Common.Random.LoglogisticDistribution.Scale"/> parameter.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.LoglogisticDistribution.Scale">
            <summary>
            The "Scale" parameter for the distribution.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LoglogisticDistribution.DefaultShape">
            <summary>
            Default value for <see cref="P:Demo3D.Common.Random.LoglogisticDistribution.Shape"/> parameter.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LoglogisticDistribution.shape">
            <summary>
            Storage for <see cref="P:Demo3D.Common.Random.LoglogisticDistribution.Shape"/> parameter.
            </summary>
        </member>
        <member name="P:Demo3D.Common.Random.LoglogisticDistribution.Shape">
            <summary>
            The "Shape" parameter for the distribution.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.LoglogisticDistribution.dist">
            <summary>
            Storage for the distribution implementation..
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.LoglogisticDistribution.Initialize">
            <summary>
            Initialize the distribution implementation..
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Random.LoglogisticDistribution.DT">
            <summary>
            Underlying <see cref="T:System.Type"/> implementing the distribution.
            </summary>
            <returns>Underlying <see cref="T:System.Type"/> implementing the distribution.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Random.LoglogisticDistribution.NextDouble">
            <summary>
            Generate distributed number in range [0, 1).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.Random.LoglogisticDistribution.ToString">
            <summary>
            String representaion of distribution.
            </summary>
            <returns>String representaion of distribution.</returns>
        </member>
        <member name="F:Demo3D.Common.Random.ExponentialDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ExponentialDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.BernoulliDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.BernoulliDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.PoissonDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.PoissonDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.DiscreteUniformDistribution.DefaultMinimum">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.DiscreteUniformDistribution.Minimum"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.DiscreteUniformDistribution.DefaultMaximum">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.DiscreteUniformDistribution.Maximum"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.GeometricDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.GeometricDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.BinomialDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.BinomialDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.BinomialDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.BinomialDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.GammaDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.GammaDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.GammaDistribution.DefaultTheta">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.GammaDistribution.Theta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.ErlangDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ErlangDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.ErlangDistribution.DefaultLambda">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ErlangDistribution.Lambda"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.BetaDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.BetaDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.BetaDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.BetaDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.ChiSquareDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ChiSquareDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.StudentsTDistribution.DefaultNu">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.StudentsTDistribution.Nu"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.TriangularDistribution.DefaultMinimum">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.TriangularDistribution.Minimum"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.TriangularDistribution.DefaultMaximum">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.TriangularDistribution.Maximum"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.TriangularDistribution.DefaultMode">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.TriangularDistribution.Mode"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.ParetoDistribution.DefaultAlpha">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ParetoDistribution.Alpha"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.ParetoDistribution.DefaultBeta">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ParetoDistribution.Beta"/> if none is specified.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Random.ConstantDistribution.DefaultValue">
            <summary>
              The default value assigned to <see cref="P:Demo3D.Common.Random.ConstantDistribution.Value"/> if none is specified.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Random.IDistribution">
            <summary>
            Produce a stream of numbers. Implementations of this interface will include distributions and predefined sequences of numbers
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.DistributionParser.ConvertDistributionStringCultures(System.String,System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Random.MT19937">
            <summary>
            Random number generator using the Mersenne Twister 19937 algorithm.
            This is the default random number generator used.
            To change the default, set the static type value of Demo3D.Common.Random.GeneratorRegistry.DefaultGeneratorType.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.MT19937.#ctor">
            <summary>
            Initializes a new instance of the MersenneTwister class, using a time-dependent default seed value.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.MT19937.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MersenneTwister class, using the specified seed value.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Random.MT19937.Sample">
            <summary>
            Returns a random floating-point number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Demo3D.Common.Random.MT19937.Next">
            <summary>
            Returns a non-negative random integer.
            </summary>
            <returns>A 32-bit signed integer that is greater than or equal to 0 and less than Int32.MaxValue.</returns>
        </member>
        <member name="M:Demo3D.Common.Random.MT19937.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random integer that is within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.</param>
            <returns>A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.</returns>
        </member>
        <member name="M:Demo3D.Common.Random.MT19937.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="T:Demo3D.Common.RoundTripExtensions">
            <summary>
            Methods to correctly convert floating point values to a string for round-trip purposes.
            </summary>
        </member>
        <member name="M:Demo3D.Common.RoundTripExtensions.ToStringRoundTrip(System.Double)">
            <summary>
            Correctly convert a double value to a string for round-trip purposes.
            </summary>
            <param name="v">Double value to convert to a string.</param>
            <remarks>
            <externalLink>
            <linkText>See MSDN "Notes to Callers".</linkText>
            <linkUri>https://docs.microsoft.com/en-us/dotnet/api/system.double.tostring?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System_Double_ToString_System_String_</linkUri>
            </externalLink>
            </remarks>
            <returns>Round-trip string version of double value</returns>
        </member>
        <member name="M:Demo3D.Common.RoundTripExtensions.ToStringRoundTrip(System.Single)">
            <summary>
            Correctly convert a float value to a string for round-trip purposes.
            </summary>
            <param name="v">Float value to convert to a string.</param>
            <remarks>
            <externalLink>
            <linkText>See MSDN "Notes to Callers".</linkText>
            <linkUri>https://docs.microsoft.com/en-us/dotnet/api/system.double.tostring?redirectedfrom=MSDN&amp;view=netframework-4.7.2#System_Double_ToString_System_String_</linkUri>
            </externalLink>
            </remarks>
            <returns>Round-trip string version of float value</returns>
        </member>
        <member name="T:Demo3D.Common.SafeHashCode">
            <summary>
            Class for providing hash codes that are not implementation specific.
            The .NET implementations for Object.GetHashCode are not guaranteed to remain the same between different versions of .NET.
            For some cases (such as hashes used for authentication in the NLS protocol) we need to know that a given value will always give the same hash.
            For this reason, we use our own hashing functions that we know won't change.
            These are all copies of the respective GetHashCode functions in .NET 3.5 SP1 at the time of writing, to maintain compatibility.
            </summary>
        </member>
        <member name="M:Demo3D.Common.SafeHashCode.Get(System.String)">
            <summary>
            Gets a hash value for a given string.
            </summary>
            <param name="value">The string to get a hash value for.</param>
            <returns>A 32-bit signed integer hash value.</returns>
        </member>
        <member name="M:Demo3D.Common.SafeHashCode.Get(System.Byte[])">
            <summary>
            Gets a hash value for a given byte array.
            Not suitable for GetHashCode, since it's not designed to be fast.
            </summary>
            <param name="value">The array to get a hash value for.</param>
            <returns>A 32-bit signed integer hash value.</returns>
        </member>
        <member name="M:Demo3D.Common.SafeHashCode.Get(System.DateTime)">
            <summary>
            Gets a hash value for a DateTime object.
            <param name="value">The DateTime instance to get a hash value for.</param>
            <returns>A 32-bit signed integer hash value.</returns>
            </summary>
        </member>
        <member name="M:Demo3D.Common.SafeHashCode.Get(System.Boolean)">
            <summary>
            Gets a hash value for a boolean value.
            </summary>
            <param name="value">The boolean value to get a hash value for.</param>
            <returns>A 32-bit signed integer hash value.</returns>
        </member>
        <member name="T:Demo3D.Common.Search">
            <summary>
            Utilities for performing text-based searching.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Search.LongestCommonSubstring(System.String,System.String)">
            <summary>
            Finds and returns the longest substring common to both <paramref name="a"/> and
            <paramref name="b"/>. Will return the empty string if no common substring exists.
            </summary>
            <param name="a">The first string.</param>
            <param name="b">The second string.</param>
            <returns>The longest substring common to both supplied strings.</returns>
        </member>
        <member name="M:Demo3D.Common.Search.Bitap(System.String,System.String,System.Single)">
            <summary>
            Fuzzy Bitap search.
            </summary>
            <remarks>
            There is a limit on the length of the pattern to search for. This is currently 32
            characters. The function will return 1.0 when provided with any pattern longer than this
            limit.
            </remarks>
            <param name="text">The text to search in.</param>
            <param name="pattern">The text to search for.</param>
            <param name="threshold">The point at which we succeed (0 = perfect match needed, 1 = match anything)</param>
            <returns>Score between 0 (perfect match) and 1 (no match) inclusive.</returns>
        </member>
        <member name="M:Demo3D.Common.Search.BitapScore(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the Bitap search score based on the number of errors and how far along in the
            text the match is.
            </summary>
            <param name="errors">The number of errors</param>
            <param name="location">The starting position in the text string for the match.</param>
            <param name="patternLength">The length of the pattern text.</param>
            <returns>The search score in the interval [0, 1].</returns>
        </member>
        <member name="T:Demo3D.Common.MAPI">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MapiMessage">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MapiFileDesc">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MapiRecipDesc">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.SerializationMethod">
            <summary>
            Represents a method used to serialize a document.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.SerializationMethod.XmlDom">
            <summary>
            Use an XML DOM structure to serialize the document, optionally to a stream.
            This will use more memory than XmlStream, but the DOM document itself can be used afterwards.
            </summary>
        </member>
        <member name="F:Demo3D.Common.SerializationMethod.XmlStream">
            <summary>
            Stream the document as XML to a pre-existing stream.
            No DOM structures are used and so far less memory is required than with XmlDom.
            </summary>
        </member>
        <member name="T:Demo3D.Common.SerializerNodeType">
            <summary>
            Represents what type of node the reader is currently positioned at.
            </summary>
        </member>
        <member name="F:Demo3D.Common.SerializerNodeType.StartOfEntry">
            <summary>
            The reader is positioned at the start of a new entry.
            </summary>
        </member>
        <member name="F:Demo3D.Common.SerializerNodeType.EntryContent">
            <summary>
            The reader is positioned at the text content of the current entry.
            </summary>
        </member>
        <member name="F:Demo3D.Common.SerializerNodeType.EndOfEntry">
            <summary>
            The reader is positioned at the end of an entry.
            </summary>
        </member>
        <member name="T:Demo3D.Common.InvalidSignatureException">
            <summary>
            Class for exceptions caused by the lack of a valid signature on a serialized document.
            </summary>
        </member>
        <member name="M:Demo3D.Common.InvalidSignatureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidSignatureException class.
            </summary>
            <param name="message">A message for the exception.</param>
        </member>
        <member name="T:Demo3D.Common.OldStyleSignatureException">
            <summary>
            Class for exceptions caused by an old style signature found on a serialized document.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.OldStyleSignatureException.#ctor">
            <summary>
            Initializes a new instance of the OldStyleSignatureException class.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer">
            <summary>
            Class for serializing and deserializing documents or objects of any kind.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.PWSerializer.safeTypesOnly">
            <summary>
            Only serialize value types or known types.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.findTypeThrowOnFail">
            <summary>
            Make FindType throw an exception on an unknown type (overridden by options loading code to unknown option types)
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.StripRedundantXmlnsAttributes">
            <summary>
            In <see cref="M:Demo3D.Common.PWSerializer.WriteUsingDom(System.Xml.XmlElement,System.String,System.Object)"/>, remove outer layer "xmlns:" attributes
            We have this here because stripping them "breaks" clients older than 10.0.0.6062 talking to the latest
            NLS servers... It seems that the NLS can just not strip them all the time.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.Upgraded">
            <summary>
            Gets or sets a value indicating that a document being deserialized has been upgraded.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.ComputeTextHash">
            <summary>
            Skip computing text hash for Xml if only used in memory (e.g. copy/paste).
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.#ctor">
            <summary>
            Initializes a new instance of the Serializer class.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CloneViaSerializer(System.Object)">
            <summary>
            Clones the specified object by serializing and then deserializing it.
            </summary>
            <param name="obj">The object to clone.</param>
            <returns>A clone of the specified object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.IgnoreEntry(System.Reflection.MemberInfo)">
            <summary>
            Determines whether to ignore a member.
            </summary>
            <param name="mi">Member.</param>
            <returns>True to ignore a member.</returns>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.TypeSerializerOverride">
            <summary>
            Class for automatically setting and resetting the value of a type serializer override. 
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PWSerializer.TypeSerializerOverride.#ctor(Demo3D.Common.PWSerializer,System.Type,Demo3D.Common.ISerializable)">
            <summary>
            Initializes a new instance of the TypeOverride class.
            </summary>
            <param name="serializer">The Serializer instance whose context variable to set.</param>
            <param name="type">The name of the context variable to set.</param>
            <param name="serializable">A new value for the context variable.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.TypeSerializerOverride.Dispose">
            <summary>
            Resets the context variable back to its previous value.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.typeSerializerOverrides">
            <summary>
            A set of context values which can be stored on the serializer and accessed by any individual serializers/deserializers.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.TypeSerializerOverrides">
            <summary>
            Gets a set of stored values which be accessed by serializers/deserializers.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.SetTypeSerializerOverride(System.Type,Demo3D.Common.ISerializable)">
            <summary>
            Temporarily sets overrides the serializer for a type.
            Read(E3DSerializerEntryReader entryReader) {
                using (serializer.SetTypeSerializerOverride(type, replacementSerializer)) {
                    base.Read(entryReader);
                }
            }
            This allows an owner/parent object to temporarily modify the default serializer for a type for all entries beneath it.
            </summary>
            <param name="type">The type to set.</param>
            <param name="serializable">A new value for the serializer.</param>
            <returns>An IDisposable which will set the serializer back to its previous value when disposed.</returns>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.PublicKey">
            <summary>
            Used for verifying documents. 
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.PrivateKey">
            <summary>
            Used for signing documents.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.Writer">
            <summary>
            Abstract base class for classes which handle the mechanics of writing out a document.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.StartEntry(System.String,System.String,System.Boolean)">
            <summary>
            When overridden in a derived class, starts writing out an entry.
            </summary>
            <param name="name">The name of the new entry.</param>
            <param name="uri">A URI to qualify the new entry, or null if none.</param>
            <param name="pruneIfEmpty">A value indicating whether this entry can be removed if no value is written for it.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.EndEntry">
            <summary>
            When overridden in a derived class, closes out the current entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.SetMetaValue(System.String,System.String,System.String)">
            <summary>
            When overridden in a derived class, sets a meta-value on the entry currently being written.
            </summary>
            <param name="name">The name of the meta-value.</param>
            <param name="uri">A URI to qualify the name.</param>
            <param name="value">The content of the meta-value.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.WriteValue(System.String)">
            <summary>
            When overridden in a derived class, writes the textual content of the current entry.
            </summary>
            <param name="value">The textual content for the entry currently being written.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.WriteValue(System.Xml.XmlElement)">
            <summary>
            When overridden in a derived class, writes some XML as the content of the current entry.
            </summary>
            <param name="value">The XmlElement to write as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.WriteValueAlreadySerialized(System.String)">
            <summary>
            When overridden in a derived class, writes some already serialized text as the content of the current entry.
            </summary>
            <param name="serialized">The serialized text to write out as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.LookupPrefix(System.String)">
            <summary>
            Looks up a prefix for the specified URI.
            </summary>
            <param name="uri">The URI to lookup a prefix for.</param>
            <returns>The prefix associated with the given uri.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Writer.Close">
            <summary>
            Finishes the writing process.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.XmlDomWriter">
            <summary>
            Represents a writer for writing a document using XML DOM.
            This using a lot more memory than XML streaming but a DOM document is available at the end.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.XmlDomWriter.textWriter">
            <summary>
            The TextWriter to write the document out to at the end (or null if not using one).
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.XmlDomWriter.currentEntryElement">
            <summary>
            The XML element currently being constructed.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.XmlDomWriter.canWriteValue">
            <summary>
            Whether we can write a value or meta-value at this point.
            Basically, whether an entry has been started but has had no value written yet.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlDomWriter.XmlDocument">
            <summary>
            Gets the XmlDocument created by this object.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.#ctor(System.IO.TextWriter,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the XmlDomWriter class.
            </summary>
            <param name="textWriter">A TextWriter instance to write the serialized document out to, or null if none is being used.</param>
            <param name="prefix">A prefix for the base entry name, or null for none.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry, or null for none.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.StartEntry(System.String,System.String,System.Boolean)">
            <summary>
            Starts writing out an entry.
            </summary>
            <param name="name">The name of the new entry.</param>
            <param name="uri">A URI to qualify the new entry, or null if none.</param>
            /// <param name="pruneIfEmpty">A value indicating whether this entry can be removed if no value is written for it.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.EndEntry">
            <summary>
            Closes out the current entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.SetMetaValue(System.String,System.String,System.String)">
            <summary>
            Sets a meta-value on the entry currently being written.
            </summary>
            <param name="name">The name of the meta-value.</param>
            <param name="uri">A URI to qualify the name.</param>
            <param name="value">The content of the meta-value.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.WriteValue(System.String)">
            <summary>
            Writes the textual content of the current entry.
            </summary>
            <param name="value">The textual content for the entry currently being written.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.WriteValue(System.Xml.XmlElement)">
            <summary>
            Writes some XML as the content of the current entry.
            </summary>
            <param name="value">The XmlElement to write as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.WriteValueAlreadySerialized(System.String)">
            <summary>
            Writes some already serialized text as the content of the current entry.
            </summary>
            <param name="serialized">The serialized text to write out as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.LookupPrefix(System.String)">
            <summary>
            Looks up a prefix for the specified URI.
            </summary>
            <param name="uri">The URI to lookup a prefix for.</param>
            <returns>The prefix associated with the given URI.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlDomWriter.Close">
            <summary>
            Finishes the writing process.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.XmlSigningDomWriter">
            <summary>
            A version of XmlDomWriter which adds a signature to the document.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningDomWriter.#ctor(System.IO.TextWriter,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the XmSigninglDomWriter class.
            </summary>
            <param name="textWriter">A TextWriter instance to write the serialized text out to, or null if none is used.</param>
            <param name="prefix">A prefix for the base entry name, or null for none.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry, or null for none.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningDomWriter.Close">
            <summary>
            Signs the document and finishes the writing process.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.XmlStreamWriter">
            <summary>
            Represents a writer for writing a document out as an XML stream.
            This saves memory (lots) over using the DOM approach.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.XmlStreamWriter.EntryInfo">
            <summary>
            Stores the information about an entry needed to start writing the entry out.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlStreamWriter.EntryInfo.Name">
            <summary>
            Gets the name of this entry.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlStreamWriter.EntryInfo.Uri">
            <summary>
            Gets a URI to qualify this entry, or null if there is none.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlStreamWriter.EntryInfo.MetaValues">
            <summary>
            Gets the meta-values associated with this entry.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlStreamWriter.EntryInfo.SkipIfEmpty">
            <summary>
            Gets a value indicating whether this entry can be skipped if it has no content.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlStreamWriter.EntryInfo.ContentWritten">
            <summary>
            Gets or sets a value indicating whether any content has been written for this entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.EntryInfo.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the EntryInfo class.
            </summary>
            <param name="name">The name of this entry.</param>
            <param name="uri">A URI to qualify this entry, or null if there is none.</param>
            <param name="skipIfEmpty">A value indicating whether this entry can be skipped if it has no content.</param>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.XmlStreamWriter.writer">
            <summary>
            The XmlWriter we're using to write the document out.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.XmlStreamWriter.entryStack">
            <summary>
            Stores information about each nested entry currently being written.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlStreamWriter.CurrentMetaValues">
            <summary>
            Gets the meta-values associated with the entry currently being written.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlStreamWriter.ContentWritten">
            <summary>
            Gets or sets a value representing whether content has been written for the current entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.#ctor(System.IO.TextWriter,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the XmlStreamWriter class.
            </summary>
            <param name="textWriter">A TextWriter instance to write the serialized text out to.</param>
            <param name="prefix">A prefix for the base entry name, or null if none.</param>
            <param name="name">The name of the base entry, or null if none.</param>
            <param name="uri">A URI to qualify the base entry, or null if none.</param>
            <param name="indent">If true, use indentation to pretty-print the XML.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.StartEntry(System.String,System.String,System.Boolean)">
            <summary>
            Starts writing out an entry.
            </summary>
            <param name="name">The name of the new entry.</param>
            <param name="uri">A URI to qualify the new entry, or null if none.</param>
            <param name="pruneIfEmpty">A value indicating whether this entry can be removed if no value is written for it.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.ActuallyStartEntry">
            <summary>
            Actually starts writing the current entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.EndEntry">
            <summary>
            Closes out the current entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.SetMetaValue(System.String,System.String,System.String)">
            <summary>
            Sets a meta-value on the entry currently being written.
            </summary>
            <param name="name">The name of the meta-value.</param>
            <param name="uri">A URI to qualify the name.</param>
            <param name="value">The content of the meta-value.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.WriteValue(System.String)">
            <summary>
            Writes the textual content of the current entry.
            </summary>
            <param name="value">The textual content for the entry currently being written.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.WriteValue(System.Xml.XmlElement)">
            <summary>
            Writes some XML as the content of the current entry.
            </summary>
            <param name="value">The XmlElement to write as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.WriteValueAlreadySerialized(System.String)">
            <summary>
            Writes some already serialized text as the content of the current entry.
            </summary>
            <param name="serialized">The serialized text to write out as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.LookupPrefix(System.String)">
            <summary>
            Looks up a prefix for the specified URI.
            </summary>
            <param name="uri">The URI to lookup a prefix for.</param>
            <returns>The prefix associated with the given uri.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlStreamWriter.Close">
            <summary>
            Finishes the writing process.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.XmlSigningStreamWriter">
            <summary>
            A version of XmlStreamWriter which adds a signature to the document.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningStreamWriter.#ctor(System.IO.TextWriter,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the XmlStreamWriter class.
            </summary>
            <param name="textWriter">A TextWriter instance to write the serialized text out to.</param>
            <param name="prefix">A prefix for the base entry name, or null if none.</param>
            <param name="name">The name of the base entry, or null if none.</param>
            <param name="uri">A URI to qualify the base entry, or null if none.</param>
            <param name="indent">If true, use indentation to pretty-print the XML.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningStreamWriter.ActuallyStartEntry">
            <summary>
            Actually starts writing the current entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningStreamWriter.WriteValue(System.String)">
            <summary>
            Writes the textual content of the current entry.
            </summary>
            <param name="value">The textual content for the entry currently being written.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningStreamWriter.WriteValue(System.Xml.XmlElement)">
            <summary>
            Writes some XML as the content of the current entry.
            </summary>
            <param name="value">The XmlElement to write as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningStreamWriter.WriteValueAlreadySerialized(System.String)">
            <summary>
            Writes some already serialized text as the content of the current entry.
            </summary>
            <param name="serialized">The serialized text to write out as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.XmlSigningStreamWriter.Close">
            <summary>
            Finishes the writing process and signs the document.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.writer">
            <summary>
            The Writer instance to use to write documents.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.streamWriter">
            <summary>
            If we are passed a Stream rather than a TextWriter, then we need to create a StreamWriter to read it from, and this is it.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.XmlDocument">
            <summary>
            Gets the current XML document if the chosen serialization method uses one, null otherwise.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Serialize(Demo3D.Common.ISerializable,System.String)">
            <summary>
            Serializes an object in its entirety and returns the serialized version.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="name">The name of the base entry to create.</param>
            <returns>The serialized version of the object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.SerializeValue(Demo3D.Common.ISerializableValue,System.String)">
            <summary>
            Serializes an objects value in its entirety and returns the serialized version.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="name">The name of the base entry to create.</param>
            <returns>The serialized version of the object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Serialize(System.Object,System.String)">
            <summary>
            Serializes an object in its entirety and returns the serialized version.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="name">The name of the base entry to create.</param>
            <returns>The serialized version of the object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartWriting(Demo3D.Common.SerializationMethod,System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Start the process of writing a document and create a base entry.
            </summary>
            <param name="method">The serialization method to use to write the document.</param>
            <param name="stream">A Stream instance to write the output to.  This can be null if method is XmlDom.</param>
            <param name="name">The name of the base entry.</param>
            <param name="indent">If true, use indentation to pretty-print the XML.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartWriting(Demo3D.Common.SerializationMethod,System.IO.TextWriter,System.String)">
            <summary>
            Start the process of writing a document and create a base entry.
            </summary>
            <param name="method">The serialization method to use to write the document.</param>
            <param name="textWriter">A TextWriter instance to write the output to (this can be null if method is XmlDom).</param>
            <param name="name">The name of the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartWriting(System.String,System.String,System.String)">
            <summary>
            Start the process of writing a document and create a base entry, using XML DOM with no stream.
            </summary>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartWriting(System.String)">
            <summary>
            Start the process of writing a document and create a base entry, using XML DOM with no stream.
            </summary>
            <param name="name">The name of the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartWriting(Demo3D.Common.SerializationMethod,System.IO.Stream,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Start the process of writing a document and create a base entry.
            </summary>
            <param name="method">The serialization method to use to write the document.</param>
            <param name="stream">A Stream instance to write the output to.  This can be null if method is XmlDom.</param>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
            <param name="sign">A value indicating whether to sign the document.</param>
            <param name="indent">If true, use indentation to pretty-print the XML.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartWriting(Demo3D.Common.SerializationMethod,System.IO.TextWriter,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Start the process of writing a document and create a base entry.
            </summary>
            <param name="method">The serialization method to use to write the document.</param>
            <param name="textWriter">A TextWriter instance to write the output to (this can be null if method is SerializationMethod.XmlDom).</param>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
            <param name="sign">A value indicating whether to sign the document.</param>
            <param name="indent">If true, use indentation to pretty-print the XML.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartWriting(Demo3D.Common.PWSerializer.Writer)">
            <summary>
            Start the process of writing a document and create a base entry.
            </summary>
            <param name="writer">Writer instance to use.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.FinishWriting">
            <summary>
            Finishes the process of writing out the current document.
            This must be called after all entries have been created.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ValidateEntryName(System.String)">
            <summary>
            Validates the name of a new entry, throwing appropriate exceptions.
            </summary>
            <param name="name">The potential new entry name.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateValueEntry(System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            Force an entrys value to be written rather than a reference, if value is ISerializableValue
            </summary>
            <param name="pruneIfEmpty"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="withType"></param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateValueEntry(System.String,System.String,System.Object)">
            <summary>
            Force an entrys value to be written rather than a reference, if value is ISerializableValue
            </summary>
            <param name="name"></param>
            <param name="uri"></param>
            <param name="value"></param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateEntry(System.String,System.String,System.Object)">
            <summary>
            Creates and writes a new entry.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="uri">A URI to qualify the entry name.</param>
            <param name="value">The object to be serialized as the entry's content.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateEntry(System.Boolean,System.String,System.Object,System.Boolean)">
            <summary>
            Creates and writes a new entry.
            </summary>
            <param name="pruneIfEmpty">A value indicating whether this entry can be removed if no value is written.</param>
            <param name="name">The name of the entry.</param>
            <param name="value">The object to be serialized as the entry's content.</param>
            <param name="withType">A value indicating if the type is written to the MetaData.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateEntry(System.String,System.Type)">
            <summary>
            Creates and writes an entry containing a type.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="type">The Type to be serialized as the entry's content.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateEntry(System.String,System.Object,System.Boolean,System.Boolean)">
            <summary>
            Creates and writes a new entry.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="value">The object to be serialized as the entry's content.</param>
            <param name="withType">A value indicating whether to write a meta-value for the object's type.</param>
            <param name="safely">A value indicating whether to check that only safe types are used.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateEntry(Demo3D.Common.ISerializable,System.String,System.Object)">
            <summary>
            Creates and writes a new entry using a specific ISerializable instance.
            </summary>
            <param name="serializer">The ISerializable instance to be used to serialize the specified object.</param>
            <param name="name">The name of the entry.</param>
            <param name="value">The object to be serialized as the entry's content.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateEntry(Demo3D.Common.ISerializable,System.String,System.String,System.Object)">
            <summary>
            Creates and writes a new entry using a specific ISerializable instance.
            </summary>
            <param name="serializer">The ISerializable instance to be used to serialize the specified object.</param>
            <param name="name">The name of the entry.</param>
            <param name="uri">A URI to qualify the entry name.</param>
            <param name="value">The object to be serialized as the entry's content.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateEntryAlreadySerialized(System.String,System.String)">
            <summary>
            Creates and writes an entry containing already serialized data.
            </summary>
            <param name="name">The name of the entry.</param>
            <param name="serialized">Already serialized text to be written out as the entry's content.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.SetMetaValue(System.String,System.String)">
            <summary>
            Sets a meta-value of the entry currently being written.
            </summary>
            <param name="name">The name of the meta-value.</param>
            <param name="value">The value of the meta-value.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.SetTypeMetaValue(System.Type)">
            <summary>
            Stores a type in the "type" meta-value of the entry currently being written.
            </summary>
            <param name="type">The type to write a meta-value for.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.WriteValue(System.String)">
            <summary>
            Writes the textual content of the current entry.
            </summary>
            <param name="value">The textual content for the entry currently being written.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.WriteValue(System.Xml.XmlElement)">
            <summary>
            Writes some XML as the content of the current entry.
            </summary>
            <param name="value">The XmlElement to write as the content of the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.WriteValue(System.Object,System.Boolean)">
            <summary>
            Writes a serialized version of an object as the content of the current entry.
            </summary>
            <param name="value">The object to serialize as the content of the current entry.</param>
            <param name="withType">Write out the xsi type attribute for this value in the parent element.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.WriteProperties(System.Object,System.Boolean)">
            <summary>
            Writes the properties of an object as the content of the current entry.
            </summary>
            <param name="value">The object whose properties to serialize as the content of the current entry.</param>
            <param name="withType">A value indicating if the type is written to the MetaData.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.HasXMLDefault(System.Reflection.PropertyInfo)">
            <summary>
            Returns a value indicating whether a specified property has an XMLDefulatValue.
            </summary>
            <param name="propertyInfo">The PropertyInfo object representing the property to check for the presence of an XMLDefaultValue.</param>
            <returns>true if the supplied value property has an XMLDefaultValue attribute; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetPrefixedName(System.Xml.XmlQualifiedName)">
            <summary>
            Gets the "prefix:name" form of a qualified name in the current context.
            </summary>
            <param name="qualifiedName">An XmlQualifiedName representing the qualified name.</param>
            <returns>A string of the form "prefix:name" for the given qualified name in the current context.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.IsSafe(System.Object)">
            <summary>
            Is the property value safe to serialize (prevent infinite recursion).
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.WriteUsingDom(System.Xml.XmlElement,System.String,System.Object)">
            <summary>
            Serializes an object using XML DOM as the child of a specified parent element.
            </summary>
            <param name="parent">The parent element.</param>
            <param name="localName">The local name for the new element.</param>
            <param name="value">An object to be serialized as the content of the new element.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetSerializer(System.Type)">
            <summary>
            Gets an ISerializable object to serialize objects of a specified type.
            </summary>
            <param name="type">The type to obtain a serializer for.</param>
            <returns>An ISerializable instance which can be used to serialize objects of the specified type.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Sign(System.Xml.XmlDocument)">
            <summary>
            Adds a signature to an XML document.
            </summary>
            <param name="document">The XML document to sign.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Verify(System.Xml.XmlDocument)">
            <summary>
            Verifies the signature on an XML document.
            </summary>
            <param name="document">The XML document whose signature to verify.</param>
            <returns>true if the document's signature is value; otherwise, false.</returns>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.PropertyIdentifier">
            <summary>
            Structure containing information identifying a property.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyIdentifier.Instance">
            <summary>
            Gets the instance that owns the property.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyIdentifier.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.PropertyIdentifier.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the PropertyIdentifier structure.
            </summary>
            <param name="instance">The instance that owns the property.</param>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.PropertyIdentifier.Equals(System.Object)">
            <summary>
             Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>true if obj and this instance are the same type and represent the same value; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.PropertyIdentifier.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.Tracked`1">
            <summary>
            Class for storing objects that are associated with specific instances of SerializerEntryReader.
            This is so that we can keep track of various items that a SerializerEntryReader is interested in, and throw them away when that SerializerEntryReader finishes reading.
            </summary>
            <typeparam name="T">The type of object to track.</typeparam>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.Tracked`1.Value">
            <summary>
            Gets the object being tracked.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.Tracked`1.Owner">
            <summary>
            Gets the SerializerEntryReader associated with the tracked object.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Tracked`1.#ctor(`0,Demo3D.Common.SerializerEntryReader)">
            <summary>
            Initializes a new instance of the Tracked class.
            </summary>
            <param name="value">The object to track.</param>
            <param name="owner">The SerializerEntryReader associated with the object to track.</param>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.TrackedPropertyInfo">
            <summary>
            Class containing information about a property name that's being tracked.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.TrackedPropertyInfo.Type">
            <summary>
            Gets the explicit type to use when deserializing this property if no type information is found, or null if no explicit type is specified.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.TrackedPropertyInfo.#ctor(System.Type,Demo3D.Common.SerializerEntryReader)">
            <summary>
            Initializes a new instance of the TrackedPropertyInfo class.
            </summary>
            <param name="type">A type to use when deserializing the property if no type information is found, or null if no explicit deserialization type is required.</param>
            <param name="entryReader">The SerializerEntryReader instance which is interested the property.</param>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.reader">
            <summary>
            The XmlReader to use for reading documents.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.baseEntryReader">
            <summary>
            The SerializerEntryReader which we will pass back to the caller to read the base entry.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.entryCount">
            <summary>
            Keeps track of the number of entries read, so we can generate a signature for verification.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.totalTextLength">
            <summary>
            Keeps track of the total length of the text contained within entries, so we can generate a signature for verification.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.textHash">
            <summary>
            Keeps a hash of all the text contained within entries, so we can generate a signature for verification.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.currentEntryName">
            <summary>
            The name of the current entry being read.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.currentEntryIsEmpty">
            <summary>
            Indicates whether the current entry is complete empty (e.g. &lt;Element /&gt;).
            We keep track of this so we can emulate a fake EndOfEntry node to maintain the consistency of the interface.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.trackedProperties">
            <summary>
            A reference counted collection of names of properties to track in ReadProperties.
            To save memory, we will remove the associated tracking information when the reference count hits 0.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.trackedPropertyStatuses">
            <summary>
            Keeps track of tracked properties that have been found/assigned values.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.propertyTypeOverrides">
            <summary>
            Maps property names to the types they should be deserialized as in ReadProperties.
            This is for occasions when we want to specify a type other than the property type (generally a dervied type) that we want to use when deserializing specific properties.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.alternativePropertyNames">
            <summary>
            Maps alternate property names to the names of the properties they represent when encountered by ReadProperties.
            This is generally for compatibility cases where a property name has changed and we want to look out for the old name as well as the new name.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.propertyHandlers">
            <summary>
            Maps property names to handlers for the properties when encountered by ReadProperties.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.oldStyleSignatureFound">
            <summary>
            Whether we found an old XmlSigning type signature.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.signature">
            <summary>
            When we find the signature entry (if there is one), we put it here, to be verified later.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.postProcessors">
            <summary>
            A list of post-process delegates to call after the initial read pass.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.deserializationDocument">
            <summary>
            This is for use by forms of the Deserialize method that take an XmlElement, and this is the element's owner document.
            We keep this because if we're passed in an element that is not the root, then it won't have the namespace definitions, and lookups will fail.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.CurrentEntryName">
            <summary>
            Gets the name of the entry currently being read.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.CurrentNodeType">
            <summary>
            Gets the type of node the reader is currently positioned at.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.FinishedReading">
            <summary>
            Gets a value indicating whether the document being read has been read to the end.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateXmlReader(System.IO.TextReader)">
            <summary>
            Creates an XmlReader with which to read a document.
            </summary>
            <param name="textReader">A TextReader to use to actually read the document.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateXmlReader(System.IO.Stream,System.Xml.WhitespaceHandling)">
            <summary>
            Creates an XmlReader with which to read a document.
            </summary>
            <param name="stream">A Stream to use to actually read the document.</param>
            <param name="ws">Flag indicating how to handle whitespace.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetReadyToRead">
            <summary>
            Prepares to start reading a document.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetBaseEntryReader">
            <summary>
            Creates a SerializerEntryReader with which to read the base entry.
            </summary>
            <returns>A SerializerEntryReader instance which can be used to read the base entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartReading(System.IO.Stream,System.String,System.Xml.WhitespaceHandling)">
            <summary>
            Starts the process of deserializing a document.
            This must be called before any entries are read.
            </summary>
            <param name="stream">A Stream from which to read the serialized document.</param>
            <param name="name">The expected name of the base entry.</param>
            <returns>A SerializerEntryReader instance with which to read the base entry.</returns>
            <param name="ws">Flag indicating how to handle whitespace.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartReading(System.IO.TextReader,System.String)">
            <summary>
            Starts the process of deserializing a document.
            This must be called before any entries are read.
            </summary>
            <param name="textReader">A TextReader from which to read the serialized document.</param>
            <param name="name">The expected name of the base entry.</param>
            <returns>A SerializerEntryReader instance with which to read the base entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.StartReading(System.IO.TextReader)">
            <summary>
            Starts the process of deserializing a document.
            This must be called before any entries are read.
            </summary>
            <param name="textReader">A TextReader from which to read the serialized document.</param>
            <returns>A SerializerEntryReader instance with which to read the base entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.DeserializeInternal(System.IO.TextReader,System.String,System.Type)">
            <summary>
            Helper function for Deserialize methods; deserializes a document in its entirety.
            </summary>
            <param name="textReader">The TextReader instance with which to read the serialized text.</param>
            <param name="name">The expected name of the base entry, or null if we don't care.</param>
            <param name="type">The type to deserialize the object as, or null if we should read it from the type meta-value.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.DeserializeInternal(System.IO.TextReader,System.String,System.Type,System.Boolean)">
            <summary>
            Helper function for Deserialize methods; deserializes a document in its entirety.
            </summary>
            <param name="textReader">The TextReader instance with which to read the serialized text.</param>
            <param name="name">The expected name of the base entry, or null if we don't care.</param>
            <param name="type">The type to deserialize the object as, or null if we should read it from the type meta-value.</param>
            <param name="forceValueDeserialization">When true forces value deserialization, rather than reference deserialization</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.DeserializeInternal``1(System.IO.TextReader,System.String)">
            <summary>
            Helper function for Deserialize methods; deserializes a document in its entirety.
            </summary>
            <typeparam name="T">The type to deserialize the object as.</typeparam>
            <param name="textReader">The TextReader instance with which to read the serialized text.</param>
            <param name="name">The expected name of the base entry, or null if we don't care.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize``1(System.String,System.String)">
            <summary>
            Deserializes a serialized object in its entirety.
            </summary>
            <typeparam name="T">The type to deserialize the object as.</typeparam>
            <param name="serialized">The serialized version of the object.</param>
            <param name="name">The expected name of the base entry.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize``1(System.String)">
            <summary>
            Deserializes a serialized object in its entirety.
            </summary>
            <typeparam name="T">The type to deserialize the object as.</typeparam>
            <param name="serialized">The serialized version of the object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes a serialized object in its entirety.
            </summary>
            <param name="serialized">The serialized version of the object.</param>
            <param name="type">The type to deserialize the object as.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize(System.String,System.String)">
            <summary>
            Deserializes a serialized object in its entirety.
            Note that type information must be contained in the base entry so that it may be deserialized properly.
            </summary>
            <param name="serialized">The serialized version of the object.</param>
            <param name="name">The expected name of the base entry.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize``1(System.IO.Stream,System.String)">
            <summary>
            Deserializes a document in its entirety and returns the deserialized object.
            </summary>
            <typeparam name="T">The type to deserialize the object as.</typeparam>
            <param name="stream">A Stream from which to read the serialized document.</param>
            <param name="name">The expected name of the base entry.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize(System.IO.TextReader,System.String)">
            <summary>
            Deserializes a document in its entirety and returns the deserialized object.
            Note that type information must be contained in the base entry so that it may be deserialized properly.
            </summary>
            <param name="textReader">A TextReader from which to read the serialized document.</param>
            <param name="name">The expected name of the base entry.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize``1(System.IO.TextReader,System.String)">
            <summary>
            Deserializes a document in its entirety and returns the deserialized object.
            </summary>
            <typeparam name="T">The type to deserialize the object as.</typeparam>
            <param name="textReader">A TextReader from which to read the serialized document.</param>
            <param name="name">The expected name of the base entry.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize``1(System.Xml.XmlElement)">
            <summary>
            Deserializes a serialized object in its entirety.
            </summary>
            <typeparam name="T">The type to deserialize the object as.</typeparam>
            <param name="element">An XmlElement containing the serialized object.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Deserialize(System.Xml.XmlElement,System.Type)">
            <summary>
            Deserializes a serialized object in its entirety.
            </summary>
            <param name="element">An XmlElement containing the serialized object.</param>
            <param name="type">The type to deserialize the object as.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetCurrentEntryReader(System.Boolean)">
            <summary>
            Gets a SerializerEntryReader which can be used to read the current entry.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.CurrentEntryIsSignature">
            <summary>
            Gets a value indicating whether the current entry is the signature entry for this document.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.MoveReaderOn">
            <summary>
            Moves the reader onto the next entity, which could be the next entry, sub-entry or entry content.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetMetaValues">
            <summary>
            Gets a collection containing the meta-values of the current entry.
            </summary>
            <returns>An instance of SerializerMetaValueCollection containing the meta-values of the current entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ParseType(System.String)">
            <summary>
            Parses the supplied text as a type name and returns the relevant Type instance.
            </summary>
            <param name="text">The text representing the type name.</param>
            <returns>An instance of Type corresponding to the type name supplied if one is found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ParseType(System.String,Demo3D.Xml.ITypeRegistry)">
            <summary>
            Parses the supplied text as a type name and returns the relevant Type instance.
            </summary>
            <param name="text">The text representing the type name.</param>
            <param name="prioritizedTypeRegistry">The type registry to check first before falling back to <see cref="F:Demo3D.Common.PWSerializer.typeRegistry"/></param>
            <returns>An instance of Type corresponding to the type name supplied if one is found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetTypeMetaValue">
            <summary>
            Checks for a type meta-value on the current entry and return the type it represents.
            </summary>
            <returns>A Type instance representing the type indicated by the type meta-value, or null if no type meta-value is found.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.SkipEntry">
            <summary>
            Skips past the current entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadString">
            <summary>
            Reads the content of the current entry as a string.
            This assumes that the start of the current entry has already been read.
            </summary>
            <returns>The textual content of the current entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateActivator(System.Type)">
            <summary>
            Use cached constructor lambdas for performance.
            https://vagifabilov.wordpress.com/2010/04/02/dont-use-activator-createinstance-or-constructorinfo-invoke-use-compiled-lambda-expressions/
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadEntry(Demo3D.Common.SerializerEntryReader,System.Type,System.Boolean)">
            <summary>
            Deserializes the entry associated with a specified SerializerEntryReader instance into an object of a specified type.
            </summary>
            <param name="entryReader">The SerializerEntryReader instance to use to read the entry.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="forceValueSerialization"></param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadEntry(System.Type,System.Boolean)">
             <summary>
             Deserializes the current entry into an object of a specified type.
             </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="forceValueSerialization"></param>
             <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadEntry``1">
            <summary>
            Deserializes the current entry into an object of type T.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadTypeEntry">
            <summary>
            Deserializes the current entry as a Type instance.
            </summary>
            <returns>The Type object represented by the current entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadEntryWithoutDeserializing">
            <summary>
            Reads the contents of the current entry but doesn't deserialize it.
            </summary>
            <returns>The contents of the current entry, still in serialized form.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadXmlEntry">
            <summary>
            Deserializes the current entry as an XML node.
            This is deprecated, DO NOT use it.
            </summary>
            <returns>The XML node that was read.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ParseQualifiedName(System.String)">
            <summary>
             Parses a qualified name of the form "prefix:name" in the current context.
            </summary>
            <param name="name">The qualified name string.</param>
            <returns>An XmlQualifiedName instance representing the qualified name if one is found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetXsiType">
            <summary>
            Gets the XSI type of the current entry.
            </summary>
            <returns>A Type instance for the type of the current entry if one is specified; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.TrackProperty(System.String,Demo3D.Common.SerializerEntryReader)">
            <summary>
            Adds the specified property name to the list of property names to track in the ReadProperties method.
            </summary>
            <param name="propertyName">The name of the property to track.</param>
            <param name="entryReader">The SerializerEntryReader instance that is interested in this property.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.TrackProperty(System.String,System.Type,Demo3D.Common.SerializerEntryReader)">
            <summary>
            Adds the specified property name to the list of property names to track in the ReadProperties method.
            </summary>
            <param name="propertyName">The name of the property to track.</param>
            <param name="type">A type to use for deserialization if no other type information is available.</param>
            <param name="entryReader">The SerializerEntryReader instance that is interested in this property.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetTrackedPropertyStatus(System.Object,System.String)">
            <summary>
            Gets the status of a tracked property.
            </summary>
            <param name="instance">The object who owns the property.</param>
            <param name="propertyName">The name of the property.</param>
            <returns>A TrackedPropertyStatus instance containing information about the status of the specified tracked property.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.OverridePropertyType(System.String,System.Type,Demo3D.Common.SerializerEntryReader)">
            <summary>
            Specifies an override type for a specific property to be used when it is encountered by ReadProperties method.
            </summary>
            <param name="propertyName">The name of the property whose type to override.</param>
            <param name="type">The type to use when deserializing this property.</param>
            <param name="entryReader">The SerializerEntryReader instance who is specifying this override.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.SetAlternativePropertyName(System.String,System.String,Demo3D.Common.SerializerEntryReader)">
            <summary>
            Specifies an alternative name for a property, allowing entries with this alternative name to be deserialized into the specified property by the ReadProperties method.
            </summary>
            <param name="propertyName">The name of the property to provide an alternative name for.</param>
            <param name="alternativeName">An alternative entry name, which if encountered will be deserialized into the specified property.</param>
            <param name="entryReader">The SerializerEntryReader instance that is providing the override.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.SetPropertyHandler(System.String,System.Action{Demo3D.Common.SerializerEntryReader,System.Object},Demo3D.Common.SerializerEntryReader)">
            <summary>
            Specified a handler method for a specific property during calls to the ReadProperties method.
            Note that the handler takes responsibility for reading the property in its entirety and storing it.
            </summary>
            <param name="propertyName">The name of the property which will invoke the handler.</param>
            <param name="handler">The method to call when the property is found by ReadProperties.</param>
            <param name="entryReader">The SerializerEntryReader instance that is providing the handler.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ReadProperties(Demo3D.Common.SerializerEntryReader,System.Object,System.Boolean)">
            <summary>
            Reads sub-entries read using a SerializerEntryReader instance into the properties of an object.
            </summary>
            <param name="entryReader">The SerializerEntryReader instance that is providing the properties.</param>
            <param name="value">The object whose properties to populate.</param>
            <param name="forceValueSerialization"></param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CreateXmlElement(Demo3D.Common.PWSerializerEntryReader)">
            <summary>
            Creates an XML element representing the entry being read by a specified SerializerEntryReader instance.
            Note this is deprecated, and should NOT be used where possible.
            </summary>
            <param name="entryReader">The SerializerEntryReader whose entry to create an XmlElement for.</param>
            <returns>An XmlElement representing the entry being read by the specified SerializerEntryReader.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CleanUp(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Cleans up any tracked properties, property type overrides and alternate property names defined by a specified SerializerEntryReader instance.
            </summary>
            <param name="entryReader">The SerializerEntryReader instance whose tracked properties, property type overrides and alternate property names to clean up.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.CheckSignature">
            <summary>
            Checks the signature of the current document and throws an exception if it is missing or invalid.
            Note that this will read to the end of the document, so don't call it until everything you need has been read.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.FinishReading">
            <summary>
            Finishes reading the current document.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.AddPostProcessor(Demo3D.Xml.PostProcessDelegate)">
            <summary>
            Add a callback which will be called after the initial read pass has been completed.
            The method managing the Serializer instance must call PostProcess after the initial read. 
            The AutoDeserializer class will do this for you, however.
            </summary>
            <param name="processor">The delegate to call in the post-process step after the read pass.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.PostProcess">
            <summary>
            Process any post-processors that were added during the initial read pass.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.AddSerializableReferenceData(System.Guid,System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Add a serialized reference which will need to be resolved after deserialization.
            </summary>
            <param name="id">The original id of the reference</param>
            <param name="property">The property that needs to be updated</param>
            <param name="value">The owning object of the property</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Single)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToSingle(System.String)">
            <summary>
            Parses the specified text as a float for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A float representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Double)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToDouble(System.String)">
            <summary>
            Parses the specified text as a double for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A double representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Boolean)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToBoolean(System.String)">
            <summary>
            Parses the specified text as a boolean for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A boolean representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Byte)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToSByte(System.String)">
            <summary>
            Parses the specified text as a sbyte for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A sbyte representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToByte(System.String)">
            <summary>
            Parses the specified text as a byte for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A byte representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Int16)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToInt16(System.String)">
            <summary>
            Parses the specified text as an Int16 for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>An Int16 representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.UInt16)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToUInt16(System.String)">
            <summary>
            Parses the specified text as a UInt16 for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A UInt16 representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Int32)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToInt32(System.String)">
            <summary>
            Parses the specified text as an Int32 for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>An Int32 representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.UInt32)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToUInt32(System.String)">
            <summary>
            Parses the specified text as a UInt32 for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A UInt32 representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Int64)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToInt64(System.String)">
            <summary>
            Parses the specified text as an Int64 for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>An Int64 representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.UInt64)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToUInt64(System.String)">
            <summary>
            Parses the specified text as a UInt64 for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A UInt64 representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToDecimal(System.String)">
            <summary>
            Parses the specified text as a Decimal for deserialization.
            </summary>
            <param name="text">The text to parse.</param>
            <returns>A Decimal representation of the supplied text.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ToString(System.Decimal)">
            <summary>
            Converts the specified value to a string for serialization.
            </summary>
            <param name="value">The value to convert to a string.</param>
            <returns>A string representation of the specified value.</returns>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.typeRegistry">
            <summary>
            Keeps track of type mappings.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.TypeRegistry">
            <summary>
            Gets the TypeRegistry containing type mappings.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Register(System.Type,Demo3D.Common.ISerializable)">
            <summary>
            Registers a type with an ISerializer instance can be used to serialize/deserialize instances of that type.
            </summary>
            <param name="type">The type to register a serializer for.</param>
            <param name="serializer">The serializer for the specified type.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetQualifiedTypeName(System.Type)">
            <summary>
            Returns an XML qualified type name for a specified .NET type.
            </summary>
            <param name="type">The type to get an XML qualified type name for.</param>
            <returns>An XmlQualifiedTypeName for the specified .NET type.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.FindType(System.Xml.XmlQualifiedName,System.Boolean)">
            <summary>
            Returns the .NET type associated with an XML qualified type name.
            </summary>
            <param name="qualifiedTypeName">The XML qualified type name whose associated .NET type to find.</param>
            <param name="throwOnFail">Whether to thrown an exception if no type is found.</param>
            <returns>A Type representing the specified XML type if found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.FindType(System.Xml.XmlQualifiedName,Demo3D.Xml.ITypeRegistry,System.Boolean)">
            <summary>
            Returns the .NET type associated with an XML qualified type name.
            </summary>
            <param name="qualifiedTypeName">The XML qualified type name whose associated .NET type to find.</param>
            <param name="prioritizedTypeRegistry">The type registry to check first before falling back to <see cref="F:Demo3D.Common.PWSerializer.typeRegistry"/></param>
            <param name="throwOnFail">Whether to thrown an exception if no type is found.</param>
            <returns>A Type representing the specified XML type if found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.FindInternalTypeNoThrow(System.String)">
            <summary>
            Returns a Type object for a specified type name.
            </summary>
            <param name="typeName">The name of the type to find a Type object for.</param>
            <returns>A Type object representing the type with the specified name; otherwise, null.</returns>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.FindInternalTypeNoThrowFunc">
            <summary>
            Pre-generated func storage for a call to <see cref="M:Demo3D.Common.PWSerializer.FindInternalTypeNoThrow(System.String)"/> to avoid runtime
            memory allocation
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.FindInternalType(System.String,System.Boolean)">
            <summary>
            Returns a Type object for a specified type name.
            </summary>
            <param name="typeName">The name of the type to find a Type object for.</param>
            <param name="throwOnFail">Whether to throw an exception if no type is found.</param>
            <returns>A Type object representing the type with the specified name; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.IsISerializable(System.Type)">
            <summary>
            Returns a value indicating whether the specified type implements ISerializable.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if this type implements ISerializable; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.ScanForSerializers(System.Reflection.Assembly)">
            <summary>
            Scans an assembly for serializer classes.
            </summary>
            <param name="assembly">The assembly to scan for serializer classes.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.RemoveFromActiveAssemblies(System.Reflection.Assembly)">
            <summary>
            Scans an assembly for serializer classes.
            </summary>
            <param name="assembly">The assembly to scan for serializer classes.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.Initialize">
            <summary>
            Initializes the type registry.
            </summary>
        </member>
        <member name="T:Demo3D.Common.PWSerializer.PropertyInfoCache">
            <summary>
            Class for storing cached information about a property.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.Name">
            <summary>
            Gets the name of the property.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.PropertyType">
            <summary>
            Gets the property's declared type.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.CanRead">
            <summary>
            Gets a value indicating whether the property is readable.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.CanWrite">
            <summary>
            Gets a value indicating whether the property is writeable.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.IgnoreRead">
            <summary>
            Gets a value indicating whether the property should be ignored when deserializing.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.IgnoreWrite">
            <summary>
            Gets a value indicating whether the property should be ignored when serializing.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.Info">
            <summary>
            Gets the PropertyInfo object associated with this property.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializer.PropertyInfoCache.EntryName">
            <summary>
            Gets the name of the entry associated with this property.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.PropertyInfoCache.#ctor(System.Reflection.PropertyInfo,System.Boolean,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the PropertyInfoCache class.
            </summary>
            <param name="info">The PropertyInfo object associated with the property.</param>
            <param name="ignoreRead">Whether to ignore the property when deserializing.</param>
            <param name="ignoreWrite">Whether to ignore the property when serializing.</param>
            <param name="entryName">The name of the entry associated with the property.</param>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.typeCache">
            <summary>
            Our cache of property information for any types we end up cycling through the properties of.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.defaultValueCache">
            <summary>
            Caches the default values (as specified by DefaultValueAttribute) for properties.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializer.skipIfEmptyCache">
            <summary>
            Caches whether to skip if empty.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.GetPropertyInfoCache(System.Type)">
            <summary>
            Gets the cached property information for a type.
            </summary>
            <param name="type">The type whose property information to retrieve.</param>
            <returns>A PropertyInfoCache containing property information for the specified type.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializer.IsDefaultValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Returns a value indicating whether a specified value is the default value for a specified property.
            </summary>
            <param name="propertyInfo">The PropertyInfo object representing the property whose default value to check.</param>
            <param name="value">The value to check against the property's default value.</param>
            <returns>true if the supplied value is the property's default value; otherwise, false.</returns>
        </member>
        <member name="T:Demo3D.Common.PWSerializerEntryReader">
            <summary>
            Represents a serializer which can read information from a single entry (which can contain sub-entries).
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.serializer">
            <summary>
            The Serializer whose current entry we're reading.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.mainEntryName">
            <summary>
            The name of the main entry
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.metaValues">
            <summary>
            The meta-values of the main entry.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.typeMetaValue">
            <summary>
            The type specified by the main entry's type meta-value.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.startedReading">
            <summary>
            Indicates whether we've started reading sub-entries or content.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.hasSubEntries">
            <summary>
            Indicates whether this entry has any sub-entries.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.text">
            <summary>
            The text content of this entry, or null if it has no textual content.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.owner">
            <summary>
            If this instance was generated by calling GetLimitedReader on another instance, then this is that owner instance.
            We keep a reference to it so we can update it if we reach the end of the entry.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.parent">
            <summary>
            If this instance was generated by calling GetSubEntryReader on another instance, then this is that parent instance.
            We keep a reference to it so that after we've finished reading, we can remind it to check if it's finished.
            </summary>
        </member>
        <member name="F:Demo3D.Common.PWSerializerEntryReader.terminators">
            <summary>
            A set of sub-entry names that cannot be read and if encountered mean no further sub-entries can be read.
            This is for instances created by the GetLimitedReader method, which only only a subset of sub-entries to be read.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializerEntryReader.Serializer">
            <summary>
            Gets the Serializer instance being used for deserialization.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializerEntryReader.MainEntryName">
            <summary>
            Gets the name of the main entry this SerializerEntryReader is deserializing.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializerEntryReader.CurrentEntryName">
            <summary>
            Gets the name of the current sub-entry.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializerEntryReader.Text">
            <summary>
            Gets the text content of the main entry, or null if it doesn't have textual content.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializerEntryReader.MetaValues">
            <summary>
            Gets a collection containing the meta-values of the main entry.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializerEntryReader.TypeMetaValue">
            <summary>
            Gets the type of the main entry as specified by the type meta-value, or null if there is no type meta-value.
            </summary>
        </member>
        <member name="P:Demo3D.Common.PWSerializerEntryReader.FinishedReading">
            <summary>
            Gets a value indicating whether there are any more sub-entries to be read from this entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.#ctor(Demo3D.Common.PWSerializer,System.Boolean)">
            <summary>
            Initializes a new instance of the SerializerEntryReader class.
            </summary>
            <param name="serializer">The Serializer instance whose current entry to read.</param>
            <param name="skippingEntry">Flag indicating if we are skipping the current entry.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.#ctor(Demo3D.Common.PWSerializerEntryReader,System.String[])">
            <summary>
            Initializes a new instance of the SerializerEntryReader class which only allows a subset of sub-entries to be read.
            </summary>
            <param name="entryReader">The SerializerEntryReader instance whose sub-entries to read.</param>
            <param name="terminators">The names of a set of sub-entries that cannot be read, and when encountered indicate that no further entries can be read.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.CheckForEndOfEntry">
            <summary>
            Checks whether we are positioned at the end of the current entry and if so sets the appropriate flag and does any necessary clean up.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.MarkAsFinished">
            <summary>
            Marks this entry has having been read completely, and notifies any owners likewise.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntry(System.Type,System.Boolean)">
            <summary>
            Deserializes the current sub-entry into an object of a specified type.
            </summary>
            <param name="type">The type of the object to deserialize.</param>
            <param name="forceValueSerialization"></param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntry``1(System.String,System.Boolean,System.String[])">
            <summary>
            Deserializes a specified sub-entry and returns its value.
            Note that this reads through all sub-entries regardless of when the specified one is found.
            As such this is only intented as a convenience function for cases where only one sub-entry is expected.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="name">The name of the sub-entry to deserialize.</param>
            <param name="forceValueSerialization"></param>
            <param name="alternativeNames">A set of alternative entry names to be used instead if encountered.</param>
            <returns>The deserialized object if the sub-entry was found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntry(System.String,System.Type)">
            <summary>
            Deserializes a specified sub-entry and returns its value.
            Note that this reads through all sub-entries regardless of when the specified one is found.
            As such this is only intented as a convenience function for cases where only one sub-entry is expected.
            </summary>
            <param name="name">The name of the sub-entry to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <returns>The deserialized object if the sub-entry was found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntry(System.String,Demo3D.Common.ISerializable)">
            <summary>
            Deserializes a specified sub entry using a specific serializer.
            Note that this reads through all sub-entries regardless of when the specified one is found.
            As such this is only intented as a convenience function for cases where only one sub-entry is expected.
            </summary>
            <param name="name">The name of the sub-entry to deserialize.</param>
            <param name="serializer">The serializer to use to deserialize it.</param>
            <returns>The deserialized object if the sub-entry was found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntry(Demo3D.Common.ISerializable)">
            <summary>
            Deserializes a specified sub-entry using a specified ISerializable instance and returns its value.
            </summary>
            <param name="serializer">The ISerializable instance to use to deserialize the sub-entry.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntry(Demo3D.Common.SerializerEntryReader,System.Type)">
            <summary>
            Reads the current sub-entry using a SerializerEntryReader already created for it using the GetSubEntryReader method.
            This can be useful where you need meta-values from the sub-entry, but then want to deserialize it.
            </summary>
            <param name="subEntryReader">The SerializerEntryReader created to read this sub-entry.</param>
            <param name="type">The type to deserialize the sub-entry as.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadTypeEntry">
            <summary>
            Deserializes the current sub-entry as a type.
            </summary>
            <returns>The type represented by the current sub-enty.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadTypeEntry(System.String,System.String[])">
            <summary>
            Deserializes a specified sub-entry as a type.
            </summary>
            <param name="name">The name of the sub-entry to deserialize.</param>
            <param name="alternativeNames">A set of alternative names for the sub-entry, which if encountered will be used instead.</param>
            <returns>The type represented by the current sub-enty.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntryWithoutDeserializing">
            <summary>
            Reads the current entry doesn't deserialize it, and returns the contents still in serialized form.
            </summary>
            <returns>The contents of the current entry still in serialized form.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadXmlEntry">
            <summary>
            Deserializes the current sub-entry as an XML node.
            This is deprecated, DO NOT use it.
            </summary>
            <returns>The XML node that was read.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntryValueWithType(System.Type)">
            <summary>
            Deserializes the current sub-entry, using its 'type' meta-value to indicate the type, or a default type if no 'type' meta-value is found.
            </summary>
            <param name="defaultType">A default type to deserialize the current sub-entry as if no 'type' meta-value is found.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntryValueWithType(System.Type@,System.Boolean)">
            <summary>
            Deserializes the current sub-entry, using its 'type' meta-value to indicate the type.
            </summary>
            <param name="type">The type that was indicated by the 'type' meta-value.</param>
            <param name="throwOnFail">A value indicating whether to throw an exception if the entry is non-empty and no 'type' meta-value is found.
            If false is passed in and no type is found, the entry will be skipped.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntryWithType(System.Type)">
            <summary>
            Deserializes the current sub-entry, using its 'type' meta-value to indicate the type, or a default type if no 'type' meta-value is found.
            </summary>
            <param name="defaultType">A default type to deserialize the current sub-entry as if no 'type' meta-value is found.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntryWithType(System.Type@,System.Boolean)">
            <summary>
            Deserializes the current sub-entry, using its 'type' meta-value to indicate the type.
            </summary>
            <param name="type">The type that was indicated by the 'type' meta-value.</param>
            <param name="throwOnFail">A value indicating whether to throw an exception if the entry is non-empty and no 'type' meta-value is found.
            If false is passed in and no type is found, the entry will be skipped.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadEntryAsProperty(System.Object)">
            <summary>
            Deserializes the current sub-entry as a property of a specified object, using the name of the entry to indicate the property.
            </summary>
            <param name="instance">The object containing the property to deserialize.</param>
            <returns>true if a matching property was found and the entry was read; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.TrackProperty(System.String,System.Type)">
            <summary>
            Tracks a specified property name to see if it is found and assigned during calls to the ReadProperties method.
            This overload is intended for cases then there is an entry that is not expected to match an existing property, but its value is required anyway.
            This is generally for compatibility, where older properties have been replaced by newer ones.
            </summary>
            <param name="propertyName">The name of the property to track.</param>
            <param name="type">The type to use when deserializing the property entry, if no matching property is found.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.OverridePropertyType(System.String,System.Type)">
            <summary>
            Overrides the deserialization type of a specified property when encountered by calls to the ReadProperties method.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="type">The type to deserialize this property as.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.SetAlternativePropertyName(System.String,System.String)">
            <summary>
            Specifies an alternative name for a property to be encountered during calls to the ReadProperties method.
            If an entry corresponding to the alternative name is found (and there is not already a property matching it), the property is deserialized from that entry.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="alternativeName">An alternative entry name for the property.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.SetPropertyHandler(System.String,System.Action{Demo3D.Common.SerializerEntryReader,System.Object})">
            <summary>
            Specifies a handler function for reading a specific property when encountered during calls to the ReadProperties method.
            Note that the handler takes responsibility for reading the property in its entirety and storing it.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <param name="handler">The handler to call when the property is encountered.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadProperties(System.Object)">
            <summary>
            Reads the sub-entries as properties of an object.
            </summary>
            <param name="value">The object whose properties to populate from the sub-entries.</param>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.CreateXmlElement">
            <summary>
            Returns an XML element representing this entry, with sub-elements for sub-entries.
            This is deprecated, and should NOT be used where possible.
            </summary>
            <returns>An XmlElement representing this entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.GetTrackedPropertyStatus(System.Object,System.String)">
            <summary>
            Gets the status of a tracked property.
            </summary>
            <param name="instance">The object whose property is being tracked.</param>
            <param name="propertyName">The name of the property being tracked.</param>
            <returns>A TrackedPropertyStatus containing information about the tracked property.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.GetSubEntryReader">
            <summary>
            Gets a SerializerEntryReader instance which can be used to read the current sub-entry.
            </summary>
            <returns>A SerializerEntryReader instance which can be used to read the current sub-entry.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.GetLimitedReader(System.String[])">
            <summary>
            Gets a SerializerEntryReader instance which can be used to read a limited subset of the sub-entries.
            </summary>
            <param name="terminators">A set of sub-entry names which when encountered act as terminators, meaning they can't be read and indicate that no more sub-entries can be read.</param>
            <returns>A SerializerEntryReader instance which can be used to read the subset of sub-entries delimited by the given terminators.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.SkipEntry">
            <summary>
            Skips the current sub-entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.ReadMetaValueAsType(System.String)">
            <summary>
            Reads the specified meta-value as a type and returns the relevant Type instance.
            </summary>
            <param name="name">The name of the meta-value to read.</param>
            <returns>An instance of Type representing the type named by the meta-value if one is found; otherwise, null.</returns>
        </member>
        <member name="M:Demo3D.Common.PWSerializerEntryReader.Finish">
            <summary>
            Skips the remainder of the entry.
            If an ISerializable.Read implementation wishes to exit without FinishedReading being true, then it should call this first.
            </summary>
        </member>
        <member name="T:Demo3D.Common.AutoSerializer">
            <summary>
            Class for handling the clean-up when using a Serializer to serialize something.
            For instance:
                using (AutoSerializer serializer = new AutoSerializer("Root")) {
                    serializer.Serializer.CreateEntry("Value", value);
                    // etc.
                }
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.AutoSerializer.serializer">
            <summary>
            The Serializer instance we're wrapping up.
            </summary>
        </member>
        <member name="F:Demo3D.Common.AutoSerializer.stream">
            <summary>
            If we've created a stream to write to, this is it.
            </summary>
        </member>
        <member name="P:Demo3D.Common.AutoSerializer.Serializer">
            <summary>
            Gets the Serializer instance being wrapped by this object.
            </summary>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize using XML DOM.
            </summary>
            <param name="name">The name of the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize using XML DOM.
            </summary>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(Demo3D.Common.PWSerializer,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize using a specific Serializer via XML DOM.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(Demo3D.Common.PWSerializer,System.String)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize using a specific Serializer via XML DOM.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="name">The name of the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize to a specific file.
            </summary>
            <param name="fileName">The full name and path of the file to serialize to.</param>
            <param name="name">The name of the base entry.</param>
            <param name="indent">If true, use indentation to pretty-print the XML.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize to a specific file.
            </summary>
            <param name="fileName">The full name and path of the file to serialize to.</param>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize to a specific file.
            </summary>
            <param name="fileName">The full name and path of the file to serialize to.</param>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
            <param name="indent">If true, use indentation to pretty-print the XML.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(Demo3D.Common.PWSerializer,Demo3D.Common.SerializationMethod,System.IO.Stream,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize using a specified Serializer instance and serialization method.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="method">The serialization method to use.</param>
            <param name="stream">A Stream instance to serialize to.</param>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
            <param name="sign">A value indicating whether to sign the document.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(Demo3D.Common.PWSerializer,System.IO.TextWriter,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize using a TextWriter without signing.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="textWriter">A TextWriter to serialize to.</param>
            <param name="prefix">A prefix for the name of the base entry.</param>
            <param name="name">The name of the base entry.</param>
            <param name="uri">A URI to qualify the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.#ctor(Demo3D.Common.PWSerializer,Demo3D.Common.PWSerializer.Writer)">
            <summary>
            Initializes a new instance of the AutoSerializer class to serialize using a user provided writer.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="writer">The writer instance to use.</param>
        </member>
        <member name="M:Demo3D.Common.AutoSerializer.Dispose">
            <summary>
            Calls the FinishWriting method on the internal Serializer instance.
            </summary>
        </member>
        <member name="T:Demo3D.Common.AutoDeserializer">
            <summary>
            Class for automatically handling the clean-up when using Serializer to deserialize a document.
            If the document was read to the end then post-processing is automatically performed.
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.AutoDeserializer.serializer">
            <summary>
            The Serializer instance we're looking after.
            </summary>
        </member>
        <member name="F:Demo3D.Common.AutoDeserializer.entryReader">
            <summary>
            The SerializerEntryReader being used to deserialize the base entry.
            </summary>
        </member>
        <member name="F:Demo3D.Common.AutoDeserializer.stream">
            <summary>
            If we created a stream in order to read the serialized text in, then this is it.
            </summary>
        </member>
        <member name="P:Demo3D.Common.AutoDeserializer.EntryReader">
            <summary>
            Gets the SerializerEntryReader instance to be used for reading the base entry.
            </summary>
        </member>
        <member name="M:Demo3D.Common.AutoDeserializer.#ctor(Demo3D.Common.PWSerializer,System.String)">
            <summary>
            Initializes a new instance of the AutoDeserializer class.
            </summary>
            <param name="serializer">The Serializer instance to look after the clean-up for.</param>
            <param name="serialized">The serialized text to deserialize.</param>
        </member>
        <member name="M:Demo3D.Common.AutoDeserializer.#ctor(Demo3D.Common.PWSerializer,System.IO.Stream,System.String,System.Xml.WhitespaceHandling)">
            <summary>
            Initializes a new instance of the AutoDeserializer class.
            </summary>
            <param name="serializer">The Serializer instance to look after the clean-up for.</param>
            <param name="stream">A Stream to use to read the serialized text.</param>
            <param name="name">The expected name of the base entry.</param>
            <param name="ws">Flag indicating how to handle whitespace.</param>
        </member>
        <member name="M:Demo3D.Common.AutoDeserializer.#ctor(Demo3D.Common.PWSerializer,System.IO.TextReader,System.String)">
            <summary>
            Initializes a new instance of the AutoDeserializer class.
            </summary>
            <param name="serializer">The Serializer instance to look after the clean-up for.</param>
            <param name="textReader">A TextReader to use to read the serialized text.</param>
            <param name="name">The expected name of the base entry.</param>
        </member>
        <member name="M:Demo3D.Common.AutoDeserializer.#ctor(Demo3D.Common.PWSerializer,System.IO.TextReader)">
            <summary>
            Initializes a new instance of the AutoDeserializer class.
            </summary>
            <param name="serializer">The Serializer instance to look after the clean-up for.</param>
            <param name="textReader">A TextReader to use to read the serialized text.</param>
        </member>
        <member name="M:Demo3D.Common.AutoDeserializer.#ctor(Demo3D.Common.PWSerializer,System.Xml.XmlElement)">
            <summary>
            Initializes a new instance of the AutoDeserializer class.
            </summary>
            <param name="serializer">The Serialize instance to look after the clean-up for.</param>
            <param name="element">An XmlElement representing the entry to deserialize.</param>
        </member>
        <member name="M:Demo3D.Common.AutoDeserializer.Dispose">
            <summary>
            Calls the FinishReading method on the Serializer instance being looked after, disposes of any other streams being used and carries out any post-processing.
            </summary>
        </member>
        <member name="T:Demo3D.Common.SymmetricCryptographyAes">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Encrypter">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.TemporaryAssign`1">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Class to temporarily change a value.
            </summary>
            <typeparam name="T">Type of the value being changed.</typeparam>
            <remarks>
            I wish there was a nicer way to do this, and if anyone has any bright ideas, let me know! This is why it is not public yet...
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TemporaryAssign`1.#ctor(`0,System.Action{`0},`0)">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            Temporarily change a value.
            <code>
            using var ts = new Demo3D.Common.TemporaryAssign&lt;bool&gt;(renderer.Tool.ViewLocked, (v) => renderer.Tool.ViewLocked = v, false);
            </code>
            </summary>
            <param name="oldVal">Current value.</param>
            <param name="set">Lambda to set a value/</param>
            <param name="newVal">Temporary value to assign.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TemporaryAssign`1.Dispose">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            IDisposable.Dispose() implementation. Reset value back to initial value.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.TemporaryDirectory">
            <summary>
            Create a new temporary directory which is completely removed on Dispose().
            </summary>
        </member>
        <member name="M:Demo3D.Common.TemporaryDirectory.op_Implicit(Demo3D.Common.TemporaryDirectory)~System.String">
            <summary>
            Implicit conversion to string
            </summary>
            <param name="f"><see cref="T:Demo3D.Common.TemporaryDirectory"/> containing the directory path</param>
        </member>
        <member name="M:Demo3D.Common.TemporaryDirectory.ToString">
            <summary>
            Explicit conversion to string
            </summary>
            <returns>The directory path</returns>
        </member>
        <member name="T:Demo3D.Common.TemporaryFile">
            <summary>
            <para>FOR INTERNAL USE ONLY.</para>
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TemporaryFile.#ctor">
            <summary>
            Get (and create) a randomly named file in the temporary directory, which will be automatically
            deleted when this object is disposed. Uses <see cref="M:System.IO.Path.GetTempFileName"/>.
            </summary>
        </member>
        <member name="M:Demo3D.Common.TemporaryFile.#ctor(System.String)">
            <summary>
            If given a filename without a full path, then get a named file in the temporary directory <see cref="M:System.IO.Path.GetTempPath"/>. If given a full path, then just use that.
            Whichever version, the file will be automatically deleted when this object is disposed.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:Demo3D.Common.TemporaryFile.Dispose">
            <summary>
            Delete temporary file if it still exists
            </summary>
        </member>
        <member name="P:Demo3D.Common.TemporaryFile.SuppressDelete">
            <summary>
            By default, delete the temporary file on Dispose/Delete, but set this to true to
            leave the file.
            </summary>
        </member>
        <member name="M:Demo3D.Common.TemporaryFile.Delete">
            <summary>
            Delete temporary file if it still exists
            </summary>
        </member>
        <member name="M:Demo3D.Common.TemporaryFile.op_Implicit(Demo3D.Common.TemporaryFile)~System.String">
            <summary>
            Implicit conversion to string
            </summary>
            <param name="f"><see cref="T:Demo3D.Common.TemporaryFile"/> containing the filename</param>
        </member>
        <member name="M:Demo3D.Common.TemporaryFile.ToString">
            <summary>
            Explicit conversion to string
            </summary>
            <returns>The filename</returns>
        </member>
        <member name="T:Demo3D.Common.ReferencesAttribute">
            <summary>
            Add this attribute to indicate whether a type contains
            mesh, image or script references or not. The default is not.
            This is used to turn off checking for ExpandableObjectConverter's and to turn on
            checking for other classes which aren't directly ExpandableObjectConverter's.
            </summary>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.UnorderedPair`1">
            <summary>
            An unordered pair of items.
            </summary>
            <remarks>
            Similar to a Tuple, but two unordered pairs are equal if they have the equal items
            regardless of the order in which they are stored. Similarly, the hashcode will be equal for
            an unordered pair of two items irrespective of the order in which they are stored.
            </remarks>
            <typeparam name="T">The type of item.</typeparam>
        </member>
        <member name="T:Demo3D.Common.NamespaceGroupDoc">
            <summary>
            The Demo3D.Common namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.Common.NamespaceDoc">
            <summary>
            The Demo3D.Common namespace.
            </summary>
        </member>
        <member name="T:Demo3D.Common.ArrayExtensionMethods">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.ArrayExtensionMethods.Shuffle``1(``0[],System.Random)">
            <summary>
            Performs a Fisher-Yates shuffle of the array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The array.</param>
            <param name="rand">Random number generator.</param>
        </member>
        <member name="M:Demo3D.Common.ArrayExtensionMethods.ReverseCopy``1(``0[])">
            <summary>
            Reverses the supplied array as a copy.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The array.</param>
            <returns>The reversed array.</returns>
        </member>
        <member name="T:Demo3D.Common.ArrayListExtensionMethods">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ListExtensionMethods">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.ListExtensionMethods.RemoveAtFast``1(System.Collections.Generic.List{``0},System.Int32)">
            <summary>
            Removes the element at the specified index efficiently by swapping that element with the
            last element in the list before popping the last element off the list.
            </summary>
            <remarks>
            This method runs in constant time O(1), but does NOT preserve the order of the list.
            </remarks>
            <typeparam name="T">The element type.</typeparam>
            <param name="list">The list.</param>
            <param name="index">The index for the element to remove.</param>
        </member>
        <member name="M:Demo3D.Common.ListExtensionMethods.RemoveFast``1(System.Collections.Generic.List{``0},``0)">
            <summary>
            Removes the specified element by swapping that element with the last element in the list
            before popping the last element off the list.
            </summary>
            <remarks>
            This method runs in linear time O(n) and does NOT preserve the order of the list.
            This method should be faster than the standard <see cref="M:System.Collections.Generic.List`1.Remove(`0)"/>, since it
            does not shift all the elements after the removed element down the list. However,
            <see cref="M:Demo3D.Common.ListExtensionMethods.RemoveAtFast``1(System.Collections.Generic.List{``0},System.Int32)"/> should be preferred when the index is known.
            </remarks>
            <typeparam name="T">The element type.</typeparam>
            <param name="list">The list.</param>
            <param name="obj">The object to be removed.</param>
        </member>
        <member name="T:Demo3D.Common.PropertyInfoExtensionMethods">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.PropertyInfoExtensionMethods.GetFirstCustomAttribute``1(System.Reflection.PropertyInfo,System.Boolean)">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.MemberInfoExtensionMethods">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.MemberInfoExtensionMethods.GetUnlocalizedCategoryAttributeCategory(System.Reflection.MemberInfo)">
            <summary>
            CategoryAttribute.Category "helpfully" localizes the string, meaning "Config" automatically gets changed to "Configuration"
            This attempts to get the "unlocalized" version, but falls back to the "localized" one
            </summary>
            <param name="m">MemberInfo descriptor</param>
            <returns>Category string as initially constructed if available, otherwise "localized" version</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.TypeExtensionMethods">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TypeExtensionMethods.CSharpName(System.Type)">
            <exclude /> 
        </member>
        <member name="M:Demo3D.Common.TypeExtensionMethods.IsAssignableToGenericType(System.Type,System.Type)">
            <summary>
            Type.IsAssignable doesn't handle generics,
              e.g. typeof(List&lt;>).IsAssignableFrom(List&lt;int>) == false (!!!)
            http://stackoverflow.com/a/1075059
            </summary>
        </member>
        <member name="M:Demo3D.Common.TypeExtensionMethods.FullNameWithoutAssembly(System.Type)">
            <summary>
            Basically <see cref="P:System.Type.FullName"/>, but ignoring Assembly information
            </summary>
            <param name="t"><see cref="T:System.Type"/> to inspect</param>
            <returns>Fully qualified type name, but without Assembly information</returns>
        </member>
        <member name="M:Demo3D.Common.TypeExtensionMethods.HasPublicDefaultConstructor(System.Type)">
            <summary>
            Return true if supplied type has a public paramaterless constructor.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>true if <see cref="T:System.Type"/> has a public paramaterless constructor.</returns>
        </member>
        <member name="M:Demo3D.Common.StringExtensionMethods.TrimEnd(System.String,System.String)">
            <summary>
            Trims the specified suffix from the end of the string.
            </summary>
            <param name="source">The source string.</param>
            <param name="suffix">The suffix to remove from the end of the string.</param>
            <returns>The string with the suffix removed.</returns>
        </member>
        <member name="M:Demo3D.Common.GuidExtensions.ToString22(System.Guid)">
            <summary>
            Return a shorter string than the standard <see cref="M:System.Guid.ToString"/> method, that is still valid as part of a filename, directory name or URL.
            </summary>
            <remarks>I haven't tested this for URLs, but it should work!</remarks>
            <param name="guid">Input <see cref="T:System.Guid"/>.</param>
            <returns>22 character string usable in a filename, directory name or a URL.</returns>
        </member>
        <member name="T:Demo3D.Common.DateTimeExtensions">
            <summary>
            Extension methods for <see cref="T:System.DateTime"/> struct.
            </summary>
        </member>
        <member name="M:Demo3D.Common.DateTimeExtensions.ToLocalUtcOffsetString(System.DateTime)">
            <summary>
            This method is like <see cref="M:System.DateTime.ToString"/> except that it always returns the string as local time and
            appends the offset from UTC at the end of the string.
            </summary>
            <param name="dt"><see cref="T:System.DateTime"/> object to format.</param>
            <returns>Formatted result.</returns>
        </member>
        <member name="T:Demo3D.Common.CoordinateSystem">
            <summary>
            Coordinate systems.
            </summary>
        </member>
        <member name="T:Demo3D.Common.Util">
            <summary>
            A collection of Utility methods.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Util.Message(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Message(System.String,System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Swap``1(``0@,``0@)">
            <summary>
            Swap two contents of two variables.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="a">First variable.</param>
            <param name="b">Second variable.</param>
        </member>
        <member name="M:Demo3D.Common.Util.IsNumeric(System.Object)">
            <summary>
            Is the supplied object a "numeric" type? e.g. int, double, etc.
            </summary>
            <param name="val">Object to test.</param>
            <returns>True if it is a "numeric" type, false otherwise.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.EqualsWithNullCheck(System.Object,System.Object)">
            <summary>
            Check if two objects are <see cref="M:System.Object.Equals(System.Object)"/>, protecting against either objects being null.
            </summary>
            <param name="a">First object.</param>
            <param name="b">Second object.</param>
            <returns>True if objects are <see cref="M:System.Object.Equals(System.Object)"/> (or both null), false otherwise.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SuppressUnusedWarning(System.Object)">
            <summary>
            Used to suppress "The variable 'o' is declared but never used" warning, for
            example in "catch (Exception e) {}" - you want the variable to see it easily
            in the debugger, but the warning is annoying. Changing this to
            "catch (Exception e) { Util.SuppressUnusedWarning(e); }" stops the warning.
            It also doesn't generate *any* code at the call site (unless XXX is defined)
            </summary>
            <param name="o">Object to suppress warning for</param>
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Util.IsObfuscated">
            <summary>
            Is this a Release build?
            </summary>
        </member>
        <member name="M:Demo3D.Common.Util.IsNumeric(System.Type)">
            <summary>
            Is the supplied object a "numeric" type? e.g. int, double, etc.
            </summary>
            <param name="t"><see cref="T:System.Type"/> to test.</param>
            <returns>True if it is a "numeric" type, false otherwise.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.VectorArray(System.Double[])">
            <summary>
            Convert an array of doubles (considered in groups of three as X, Y, and Z coordinates) into an array of <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <param name="coords">Array of <see cref="T:System.Double"/>, whose length must be a multiple of 3.</param>
            <returns>Array of <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SideOfPlane(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return 1 for positive side (pointed at by normal), -1 for negative side, 0 if V is on plane
            </summary>
            <param name="N">Plane normal</param>
            <param name="P">Point on plane</param>
            <param name="V">Point in space</param>
            <returns>Side of plane</returns>
        </member>
        <member name="M:Demo3D.Common.Util.PointBetween(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            P is expected to be on the projection of [U1,U2] but this function will return whether
            it is between U1 and U2 (using 10^-6 as the tolerance for comparisons).
            </summary>
            <param name="P">Point to test.</param>
            <param name="U1">Start of line segment.</param>
            <param name="U2">End of line segment.</param>
            <returns>True if the point <paramref name="P"/> (projected onto the line segment) is between the start and end of the segment, false otherwise.</returns>
            <remarks>If <paramref name="U1"/> is equal to <paramref name="U2"/>, then this will always return true.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.PointBetween(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            P is expected to be on the projection of [U1,U2] but this function will return whether
            it is between U1 and U2 (using the supplied <paramref name="epsilon"/> as the tolerance for comparisons).
            </summary>
            <param name="P">Point to test.</param>
            <param name="U1">Start of line segment.</param>
            <param name="U2">End of line segment.</param>
            <param name="epsilon">Tolerance to use in the comparisons.</param>
            <returns>True if the point <paramref name="P"/> (projected onto the line segment) is between the start and end of the segment, false otherwise.</returns>
            <remarks>If <paramref name="U1"/> is equal to <paramref name="U2"/>, then this will always return true.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.TriangleIntersectsPlane(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Does the supplied triangle intersect the plane.
            </summary>
            <param name="N">Normal to the plane.</param>
            <param name="P">Point on the plane.</param>
            <param name="V1">First vertex of triangle.</param>
            <param name="V2">Second vertex of triangle.</param>
            <param name="V3">Third vertex of triangle.</param>
            <returns>True if the triangle intersects the plane (including being co-planar with the plane, or one or two of the vertices being on the plane), false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.TrianglePlaneIntersection(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Return the intersection line of a triangle and a plane.
            </summary>
            <param name="N">Normal to the plane.</param>
            <param name="P">Point on the plane.</param>
            <param name="V1">First vertex of triangle.</param>
            <param name="V2">Second vertex of triangle.</param>
            <param name="V3">Third vertex of triangle.</param>
            <param name="I1">Calculated start of intersection line.</param>
            <param name="I2">Calculated end intersection line.</param>
            <returns>true if they intersect, and <paramref name="I1"/> and <paramref name="I2"/> have been set, false otherwise.</returns>
            <remarks>
            If the triangle only touches the plane, then <paramref name="I1"/> and <paramref name="I2"/> will be equal.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectTriangleTriangle(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Calculate the intersection line segment of two triangles.
            <para>
            I don't think this works if the triangles only touch at a single vertex.
            </para>
            </summary>
            <param name="U1">First vertex of second triangle.</param>
            <param name="U2">Second vertex of second triangle.</param>
            <param name="U3">Third vertex of second triangle.</param>
            <param name="V1">First vertex of second triangle.</param>
            <param name="V2">Second vertex of second triangle.</param>
            <param name="V3">Third vertex of second triangle.</param>
            <param name="I1">Calculated start of intersection line segment.</param>
            <param name="I2">Calculated end of intersection line segment.</param>
            <returns>true if they intersect and <paramref name="I1"/> and <paramref name="I2"/> have been set, false otherwise.</returns>
            <remarks>
            I don't think this works if the triangles only touch at a single vertex.
            </remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.TriangleIntersectsTriangle(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Do two triangles intersect?
            </summary>
            <param name="U1">First vertex of second triangle.</param>
            <param name="U2">Second vertex of second triangle.</param>
            <param name="U3">Third vertex of second triangle.</param>
            <param name="V1">First vertex of second triangle.</param>
            <param name="V2">Second vertex of second triangle.</param>
            <param name="V3">Third vertex of second triangle.</param>
            <returns>true if they intersect, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.RotationAngle(Microsoft.DirectX.Matrix)">
            <summary>
            Determines the (unsigned) rotation angle for the upper 3x3 rotation part of the specified matrix.
            </summary>
            <remarks>
            This returns the shortest angle of rotation required in order to align the indentity rotation with the upper
            3x3 rotation part of the specified matrix. The redturned angle is guaranteed to be in the interval [0, PI].
            </remarks>
            <param name="m">The matrix.</param>
            <returns>The (unsigned) rotation angle, in the interval [0, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenMatrices(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            Determines the shortest (unsigned) rotation angle between the upper 3x3 rotation parts of the specified
            matrices.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>The shortest (unsigned) rotation angle, in the interval [0, PI].</returns>
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenLineAndPlane(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Returns the angle (in radians) between a unit <see cref="T:Microsoft.DirectX.Vector3"/> direction, and a plane (specified by the unit normal <see cref="T:Microsoft.DirectX.Vector3"/> to the plane).
            </summary>
            <param name="normalToPlane">Plane unit <see cref="T:Microsoft.DirectX.Vector3"/> normal.</param>
            <param name="direction">Line unit <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>The angle (in radians) between direction and the plane.</returns>
            <remarks>A unit <see cref="T:Microsoft.DirectX.Vector3"/> is one such that <see cref="M:Microsoft.DirectX.Vector3.Length"/> equals one.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenUnitVectors(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Returns the angle (in radians) between two unit <see cref="T:Microsoft.DirectX.Vector3"/> directions.
            </summary>
            <param name="v1">First unit <see cref="T:Microsoft.DirectX.Vector3"/> direction.</param>
            <param name="v2">Second unit <see cref="T:Microsoft.DirectX.Vector3"/> direction.</param>
            <returns>The angle (in radians) between the unit <see cref="T:Microsoft.DirectX.Vector3"/> directions.</returns>
            <remarks>A unit <see cref="T:Microsoft.DirectX.Vector3"/> is one such that <see cref="M:Microsoft.DirectX.Vector3.Length"/> equals one.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenUnitVectors(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Returns the angle (in radians) between two unit <see cref="T:Microsoft.DirectX.Vector2"/> directions.
            </summary>
            <param name="v1">First unit <see cref="T:Microsoft.DirectX.Vector2"/> direction.</param>
            <param name="v2">Second unit <see cref="T:Microsoft.DirectX.Vector2"/> direction.</param>
            <returns>The angle (in radians) between the unit <see cref="T:Microsoft.DirectX.Vector2"/> directions.</returns>
            <remarks>A unit <see cref="T:Microsoft.DirectX.Vector2"/> is one such that <see cref="M:Microsoft.DirectX.Vector2.Length"/> equals one.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenVectors(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Returns the angle (in radians) between two <see cref="T:Microsoft.DirectX.Vector3"/> directions.
            </summary>
            <param name="v1">First <see cref="T:Microsoft.DirectX.Vector3"/> direction.</param>
            <param name="v2">Second <see cref="T:Microsoft.DirectX.Vector3"/> direction.</param>
            <returns>The angle (in radians) between the <see cref="T:Microsoft.DirectX.Vector3"/> directions.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenVectors(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Returns the angle (in radians) between two <see cref="T:Microsoft.DirectX.Vector2"/> directions.
            </summary>
            <param name="v1">First <see cref="T:Microsoft.DirectX.Vector2"/> direction.</param>
            <param name="v2">Second <see cref="T:Microsoft.DirectX.Vector2"/> directions.</param>
            <returns>The angle (in radians) between the <see cref="T:Microsoft.DirectX.Vector2"/> directions.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenLines(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Returns the angle (in radians) between two <see cref="T:Microsoft.DirectX.Vector3"/> directions.
            </summary>
            <param name="v1">First <see cref="T:Microsoft.DirectX.Vector3"/> direction.</param>
            <param name="v2">Second <see cref="T:Microsoft.DirectX.Vector3"/> direction.</param>
            <returns>The angle (in radians) between the <see cref="T:Microsoft.DirectX.Vector3"/> directions.</returns>
            <remarks>Exactly the same as <see cref="M:Demo3D.Common.Util.AngleBetweenVectors(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/>.</remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.AngleBetweenLines(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Returns the angle (in radians) between two <see cref="T:Microsoft.DirectX.Vector3"/> directions.
            </summary>
            <param name="v1">First <see cref="T:Microsoft.DirectX.Vector2"/> direction.</param>
            <param name="v2">Second <see cref="T:Microsoft.DirectX.Vector2"/> direction.</param>
            <returns>The angle (in radians) between the <see cref="T:Microsoft.DirectX.Vector2"/> directions.</returns>
            <remarks>Exactly the same as <see cref="M:Demo3D.Common.Util.AngleBetweenVectors(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)"/>.</remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SignedAngleBetweenUnitVectors(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Calculates the signed angle between two vectors in radians (must be unit vectors).
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="n">Normal of the reference plane.</param>
            <returns>The signed angle between the two supplied unit vectors.</returns>
            <remarks>A unit <see cref="T:Microsoft.DirectX.Vector3"/> is one such that <see cref="M:Microsoft.DirectX.Vector3.Length"/> equals one.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.AngularDifference(System.Double,System.Double)">
            <summary>
            Distance between two angles (in radians). Returned value is in the range [-<see cref="F:System.Math.PI"/>, <see cref="F:System.Math.PI"/>].
            </summary>
            <param name="a">First angle (in radians).</param>
            <param name="b">Second angle (in radians).</param>
            <returns>Difference in angles (in radians)</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.AngularDifference(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Distance between two sets of angles (in radians). Returned values are in the range [-<see cref="F:System.Math.PI"/>, <see cref="F:System.Math.PI"/>].
            </summary>
            <param name="a">First angles (in radians).</param>
            <param name="b">Second angles (in radians).</param>
            <returns>Difference in angles (in radians)</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.LineLineNearestPoints(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Finds a point on each line that determines the shortest line segment between the two
            lines.
            </summary>
            <param name="p1">A point on the first line.</param>
            <param name="d1">The direction of the first line (must be unit vector).</param>
            <param name="p2">A point on the second line.</param>
            <param name="d2">The direction of the second line (must be unit vector).</param>
            <param name="c1">The determined closest point on the first line.</param>
            <param name="c2">The determined closest point on the second line.</param>
        </member>
        <member name="M:Demo3D.Common.Util.CalculateLineLineIntersection(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Calculates the intersection line segment between 2 lines (not segments).
            </summary>
            <param name="line1Point1">Start of the first line.</param>
            <param name="line1Point2">End of the first line.</param>
            <param name="line2Point1">Start of the second line.</param>
            <param name="line2Point2">End of the second line.</param>
            <returns>
            Returns null if no solution is found (lines are parallel or co-incident), or a <see cref="T:Microsoft.DirectX.Vector3"/>[] containing the start and end point of the
            intersection segment; noting that if the lines actually do intersect, these two values will be the same.
            </returns>
            <remarks>
            It returns a line segment, because in general, two 3D lines will not actually intersect, but there is a line segment which joins the two
            lines at the point where the distance between them is minimised.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.CalculateLineLineIntersection(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Calculates the intersection line segment between 2 lines (not segments).
            </summary>
            <param name="line1Point1">Start of the first line.</param>
            <param name="line1Point2">End of the first line.</param>
            <param name="line2Point1">Start of the second line.</param>
            <param name="line2Point2">End of the second line.</param>
            <param name="resultSegmentPoint1">Start of the resulting line segment.</param>
            <param name="resultSegmentPoint2">End of the resulting line segment.</param>
            <returns>
            Returns false if no solution is found (lines are parallel or co-incident) or true if <paramref name="resultSegmentPoint1"/> and
            <paramref name="resultSegmentPoint2"/> are filled in; noting that if the lines actually do intersect, these two values will be the same.
            </returns>
            <remarks>
            It returns a line segment, because in general, two 3D lines will not actually intersect, but there is a line segment which joins the two
            lines at the point where the distance between them is minimised.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectLinePlane(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return intersection of line [L1,L2] with plane defined by normal N, and P being a point on the plane.
            </summary>
            <param name="L1">First point on line.</param>
            <param name="L2">Second point on line.</param>
            <param name="P">Point on plane.</param>
            <param name="N">Normal to the plane.</param>
            <returns>The intersection point.</returns>
            <remarks>
            <para>
            Note however, that if the line is parallel to the plane, some or all of the components of the <see cref="T:Microsoft.DirectX.Vector3"/> will be <see cref="F:System.Single.PositiveInfinity"/>,
            <see cref="F:System.Single.NegativeInfinity"/> or <see cref="F:System.Single.NaN"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectRayPlane(Demo3D.Visuals.Ray,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return intersection of the ray with plane defined by normal N, and P being a point on the plane.
            </summary>
            <param name="ray">The ray.</param>
            <param name="P">Point on plane.</param>
            <param name="N">Normal to the plane.</param>
            <returns>The intersection point.</returns>
            <remarks>
            <para>
            Note however, that if the line is parallel to the plane, some or all of the components of the <see cref="T:Microsoft.DirectX.Vector3"/> will be <see cref="F:System.Single.PositiveInfinity"/>,
            <see cref="F:System.Single.NegativeInfinity"/> or <see cref="F:System.Single.NaN"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.Duration(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the time taken to change speeds with a given acceleration.
            </summary>
            <param name="u">Start speed.</param>
            <param name="v">End speed.</param>
            <param name="a">Acceleration.</param>
            <returns>Time taken.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Distance(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the distance traveled when starting at a speed and accelerating, over a given time.
            </summary>
            <param name="u">Start speed.</param>
            <param name="a">Acceleration.</param>
            <param name="t">Time taken.</param>
            <returns>Distance traveled.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.CalculateSeparate(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.CalculateIntersect(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.TimeOfIntersection(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Load and Blocker separated by distance, how long until they touch?
            </summary>
            <param name="s0">Distance between Load and Blocker</param>
            <param name="u1">Speed of Load</param>
            <param name="u2">Speed of Blocker</param>
            <param name="a1">Acceleration of Load</param>
            <param name="a2">Acceleration of Blocker</param>
            <returns>null if they won't intersect, time to intersect if they will</returns>
        </member>
        <member name="M:Demo3D.Common.Util.TimeOfSeparation(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Load and blocker are touching, how long till they separate given new speeds and accelerations?
            </summary>
            <param name="u1">Speed of Load</param>
            <param name="u2">Speed of Blocker</param>
            <param name="a1">Acceleration of Load</param>
            <param name="a2">Acceleration of Blocker</param>
            <returns>null if they won't separate, time to separate if they will</returns>
        </member>
        <member name="M:Demo3D.Common.Util.TimeToTravel(System.Double,System.Double,System.Double)">
            <summary>
            Time to travel distance given starting speed and acceleration, or null if travel not possible
            </summary>
            <param name="s">Distance to Travel</param>
            <param name="u">Initial Speed</param>
            <param name="a">Acceleration</param>
            <returns>Time to travel, or null if travel not possible</returns>
        </member>
        <member name="M:Demo3D.Common.Util.MinNonNegative(System.Double,System.Double)">
            <summary>
            Return the minimum non negative value of the two given values, or null if neither of them are non negative.
            </summary>
            <param name="a">First value.</param>
            <param name="b">Second value.</param>
            <returns>Mininum non negative value, or null.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.GetSmoothTranslationDuration(System.Double,System.Double,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ExpandEnvVars(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SetProperty(System.Collections.ICollection,System.String,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.OnSameLine(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ToSeparatedList(System.Char,System.Double[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ToSeparatedList(System.Char,System.Single[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ToSeparatedList(System.Char,System.Int32[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ToSeparatedList(System.Char,System.Boolean[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ParseSeparatedList(System.String,System.Char,System.Double[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ParseSeparatedList(System.String,System.Char,System.Single[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ParseSeparatedList(System.String,System.Char,System.Int32[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ParseSeparatedList(System.String,System.Char,System.Boolean[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ParseVector3(System.String,System.Char)">
            <summary>
            Convert a string to a Vector3 with a given separator.
            </summary>
            <remarks>The numbers in the string must be CultureInvariant (use . instead of ,).</remarks>
            <param name="s">The string representing the vector with x, y and z components.</param>
            <param name="separator">The character to use to separate the x from the y, and the y from the z.</param>
            <returns>A Vector3 converted from the string.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Format(Microsoft.DirectX.Vector3,System.Char)">
            <summary>
            Convert a Vector3 value to a string with the given separator character.
            </summary>
            <remarks>The numbers in the string will be CultureInvariant (use . instead of ,).</remarks>
            <param name="v">The Vector3 to convert to s string.</param>
            <param name="separator">The character to use to separate the x from the y, and the y from the z.</param>
            <returns>A string representing the Vector3.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Normalize02PI(System.Double)">
            <summary>
            Change angle (in radians) to be equivalent angle in the range [0, 2 * <see cref="F:System.Math.PI"/>].
            </summary>
            <param name="radians">Angle (in radians).</param>
            <returns>Angle (in radians) in range [0, 2 * <see cref="F:System.Math.PI"/>].</returns>
        </member>
        <member name="M:Demo3D.Common.Util.NormalizeMinusPiToPlusPi(System.Double)">
            <summary>
            Change angle (in radians) to be equivalent angle in the range [-<see cref="F:System.Math.PI"/>, <see cref="F:System.Math.PI"/>].
            </summary>
            <param name="radians">Angle (in radians).</param>
            <returns>Angle (in radians) in range [-<see cref="F:System.Math.PI"/>, <see cref="F:System.Math.PI"/>].</returns>
        </member>
        <member name="M:Demo3D.Common.Util.NormaliseWrapAroundRange(System.Double,System.Double,System.Double)">
            <summary>
            Normalizes the provided value to the wrap-around range defined by the provided
            <paramref name="start"/> and <paramref name="end"/> values.
            </summary>
            <param name="value">The value to normalize.</param>
            <param name="start">The starting value for the range.</param>
            <param name="end">The ending value for the range.</param>
            <returns>The normalized value.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ZeroNaN(Microsoft.DirectX.Vector3)">
            <summary>
            Return a <see cref="T:Microsoft.DirectX.Vector3"/> replacing all instances of <see cref="F:System.Single.PositiveInfinity"/>, <see cref="F:System.Single.NegativeInfinity"/>
            and <see cref="F:System.Single.NaN"/> with 0.
            </summary>
            <param name="v">Input <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IgnoreNaN(Microsoft.DirectX.Vector3)">
            <summary>
            If any of the elements of a <see cref="T:Microsoft.DirectX.Vector3"/> are <see cref="F:System.Single.NaN"/>, then return <see cref="F:Microsoft.DirectX.Vector3.Zero"/>.
            </summary>
            <param name="v">Input <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IsNaN(Microsoft.DirectX.Vector3)">
            <summary>
            Are any of the elements of a <see cref="T:Microsoft.DirectX.Vector3"/> a <see cref="F:System.Single.NaN"/>?
            </summary>
            <param name="v">Input <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>True if any element is a <see cref="F:System.Single.NaN"/>, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IsInfinity(Microsoft.DirectX.Vector3)">
            <summary>
            Are any of the elements of a <see cref="T:Microsoft.DirectX.Vector3"/> a <see cref="F:System.Single.NegativeInfinity"/> or <see cref="F:System.Single.PositiveInfinity"/>?
            </summary>
            <param name="v">Input <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>True if any element is a <see cref="F:System.Single.NegativeInfinity"/> or <see cref="F:System.Single.PositiveInfinity"/>, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IsNaN(Microsoft.DirectX.Quaternion)">
            <summary>
            Are any of the elements of a <see cref="T:Microsoft.DirectX.Quaternion"/> a <see cref="F:System.Single.NaN"/>?
            </summary>
            <param name="q">Input <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="M:Demo3D.Common.Util.IsInfinity(Microsoft.DirectX.Quaternion)">
            <summary>
            Are any of the elements of a <see cref="T:Microsoft.DirectX.Quaternion"/> a <see cref="F:System.Single.NegativeInfinity"/> or <see cref="F:System.Single.PositiveInfinity"/>?
            </summary>
            <param name="q">Input <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="M:Demo3D.Common.Util.IsNaN(System.Double[])">
            <summary>
            Whether any of the element of the provided array is NaN.
            </summary>
            <param name="arr">The array.</param>
            <returns>True if the array contains NaN values, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ToBase64(System.String)">
            <summary>
            Convert a string into a base-64 encoded string.
            </summary>
            <param name="s"><see cref="T:System.String"/> to encode.</param>
            <returns>Encoded <see cref="T:System.String"/>.</returns>
            <remarks>See <see cref="M:System.Convert.ToBase64String(System.Byte[])"/>.</remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.FromBase64(System.String)">
            <summary>
            Convert a base-64 encoded string into a string.
            </summary>
            <param name="s"><see cref="T:System.String"/> to decode.</param>
            <returns>Decoded <see cref="T:System.String"/>.</returns>
            <remarks>See <see cref="M:System.Convert.FromBase64String(System.String)"/>.</remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.MatrixEquals(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            Are two <see cref="T:Microsoft.DirectX.Matrix"/> objects exactly equal.
            </summary>
            <param name="a">First <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <param name="b">Second <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <returns>Are they equal.</returns>
            <remarks>Use <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Double)"/> with a zero tolerance instead.</remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeCoordinateSystem(Microsoft.DirectX.Matrix,Demo3D.Common.CoordinateSystem,Demo3D.Common.CoordinateSystem)">
            <summary>
            Converts a matrix from one coordinate system to another.
            </summary>
            <param name="m">The matrix in the coordinate system of <paramref name="from"/>.</param>
            <param name="from">The coordinate system for the matrix to convert from.</param>
            <param name="to">The coordinate system for the resulting matrix.</param>
            <returns>The matrix in the coordinate system of <paramref name="to"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Multiply(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Scale elements of a <see cref="T:Microsoft.DirectX.Vector3"/> by the corresponding elements of another <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale.</param>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector3"/> to scale by.</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
            <remarks>Equivalent to <code>Vector3.Multiply(v, s)</code>.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.LocationOf(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.GetLocationOf(Microsoft.DirectX.Matrix@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SetLocationOf(Microsoft.DirectX.Matrix@,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.RotateTranslate(Microsoft.DirectX.Matrix@,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandednessEuler(Microsoft.DirectX.Vector3@)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> of angles to change (in radians).</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandednessEuler(Microsoft.DirectX.Vector3)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="v">Input <see cref="T:Microsoft.DirectX.Vector3"/> angles (in radians).</param>
            <returns>Output <see cref="T:Microsoft.DirectX.Vector3"/> angles (in radians).</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandedness(Microsoft.DirectX.Vector3@)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> coordinate to change.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandedness(Microsoft.DirectX.Vector3)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="v">Input <see cref="T:Microsoft.DirectX.Vector3"/> coordinate.</param>
            <returns>Output <see cref="T:Microsoft.DirectX.Vector3"/> coordinate.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandedness(Microsoft.DirectX.Matrix@)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="m"><see cref="T:Microsoft.DirectX.Matrix"/> to change.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandedness(Microsoft.DirectX.Matrix)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="m">Input <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <returns>Output <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandedness(Microsoft.DirectX.Quaternion@)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> to change.</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ChangeHandedness(Microsoft.DirectX.Quaternion)">
            <summary>
            Interchange between a Left Handed Y Up coordinate system and a Right Handed Y Up coordinate system.
            </summary>
            <param name="q">Input <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <returns>Output <see cref="T:Microsoft.DirectX.Quaternion"/>.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Decompose(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix@,Microsoft.DirectX.Matrix@)">
            <summary>
            Extract the translation and rotation matrices from the given matrix. Matrix
            is assumed to contain no scaling or shear components.
            </summary>
            <param name="matrix">Input <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="translation">Translation component of input <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="rotation">Rotation component of input <see cref="T:Microsoft.DirectX.Matrix"/></param>
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeTranslation(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeScale(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeRotation(Microsoft.DirectX.Matrix)">
            <summary>
            Return a <see cref="T:Microsoft.DirectX.Matrix"/> that only contains the Rotation component of the supplied matrix.
            </summary>
            <param name="m">Input <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <returns>Output <see cref="T:Microsoft.DirectX.Matrix"/> containing the rotation component.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeRotationByRef(Microsoft.DirectX.Matrix@)">
            <summary>
            Change a <see cref="T:Microsoft.DirectX.Matrix"/> so that only contains the Rotation component.
            </summary>
            <param name="m"><see cref="T:Microsoft.DirectX.Matrix"/> to alter.</param>
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeAnglesUsingInvert(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3@)">
            <summary>
            Not much use really, other than for extracting values to build the
            rotation matrix in isolation.
            Assuming Yaw=Y, Pitch=X, Roll=Z
            ms-help://MS.VSCC.2003/MS.DirectX9.1033/DirectX9_m/directx/ref/ns/microsoft.directx/s/matrix/m/rotateyawpitchroll.htm
            </summary>
            <param name="yawPitchRoll"></param>
            <param name="angles"></param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeAngles(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3@)">
            <summary>
            Return the Yaw (Y rotation), Pitch (X rotation), and Roll (Z rotation) Euler angles for the supplied <see cref="T:Microsoft.DirectX.Matrix"/>.
            </summary>
            <param name="m">Input <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <param name="angles">Output <see cref="T:Microsoft.DirectX.Vector3"/> passed by reference, containing the X, Y and Z rotations.</param>
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeAngles(Microsoft.DirectX.Matrix)">
            <summary>
            Return the Yaw (Y rotation), Pitch (X rotation), and Roll (Z rotation) Euler angles for the supplied <see cref="T:Microsoft.DirectX.Matrix"/>.
            </summary>
            <param name="m">Input <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <returns><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y, and Z rotations.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.DecomposeRollPitchYawZXYMatrix(Microsoft.DirectX.Matrix)">
            <summary>
            Return the Yaw (Y rotation), Pitch (X rotation), and Roll (Z rotation) Euler angles for the supplied <see cref="T:Microsoft.DirectX.Matrix"/>.
            </summary>
            <param name="m">Input <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <returns><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y, and Z rotations.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.FixMinusZero(System.Double)">
            <summary>
            Remove the negative sign bit of input if it is 0. This is due to a recent change in .Net Core 3.0 where the negative sign bit is now set for 0. While -0 isn't incorrect it looks odd. 
            https://devblogs.microsoft.com/dotnet/floating-point-parsing-and-formatting-improvements-in-net-core-3-0/
            https://stackoverflow.com/questions/62768060/net-core-3-returns-0-string-when-a-near-0-negative-number-is-rounded/62768234#62768234
            </summary>
            <param name="input">The input which may be -0</param>
            <returns>This will return the input which may have the negative sign removed if it is 0.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.EulerXYZToZXY(Microsoft.DirectX.Vector3)">
            <summary>
            Convert from Euler Angles in X, Y, Z order to Euler Angles in Z, X, Y order
            </summary>
            <param name="v">XYZ Angles</param>
            <returns>ZXY Angles</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.EulerZXYToXYZ(Microsoft.DirectX.Vector3)">
            <summary>
            Convert from Euler Angles in Z, X, Y order to Euler Angles in X, Y, Z order
            </summary>
            <param name="v">ZXY Angles</param>
            <returns>XYZ Angles</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.TranslationOf(Microsoft.DirectX.Matrix)">
            <summary>
            Returns the translation <see cref="T:Microsoft.DirectX.Matrix"/> component of the given matrix.
            </summary>
            <param name="m">Input <see cref="T:Microsoft.DirectX.Matrix"/>.</param>
            <returns>Translation <see cref="T:Microsoft.DirectX.Matrix"/> component.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.AnglesOf(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ToAxisAngle(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3@,System.Single@)">
            <summary>
            Convert a matrix to an axis angle for use with VRML Export.
            Handles singularities at 0 and 180 degrees.
            http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.TestToAxisAngle">
            <summary>
            Test ToAxisAngle for reference angles:
            http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/examples/index.htm
            TODO: Move into UnitTests
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.QuaternionToEulerAngles(Microsoft.DirectX.Quaternion)">
            <summary>
            Convert a <see cref="T:Microsoft.DirectX.Quaternion"/> rotation into Yaw (Y rotation), Pitch (X rotation) and Roll (Z rotation) values.
            <para>Use <see cref="M:Demo3D.Common.Util.QuaternionToPitchYawRoll(Microsoft.DirectX.Quaternion)"/> instead.</para>
            </summary>
            <param name="input">Input <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <returns>Output <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
            <remarks>Use <see cref="M:Demo3D.Common.Util.QuaternionToPitchYawRoll(Microsoft.DirectX.Quaternion)"/> instead.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.QuaternionToPitchYawRoll(Microsoft.DirectX.Quaternion)">
            <summary>
            Convert a <see cref="T:Microsoft.DirectX.Quaternion"/> rotation into Yaw (Y rotation), Pitch (X rotation) and Roll (Z rotation) values.
            </summary>
            <param name="input">Input <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <returns>Output <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ComposeAngles(Microsoft.DirectX.Vector3)">
            <summary>
            Create a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from the Yaw (Y rotation), Pitch (X rotation) and Roll (Z rotation) contained in the given <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <param name="angles"><see cref="T:Microsoft.DirectX.Vector3"/> containing angles (in radians).</param>
            <returns>Rotation <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ComposeAnglesDegrees(Microsoft.DirectX.Vector3)">
            <summary>
            Create a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from the Yaw (Y rotation), Pitch (X rotation) and Roll (Z rotation) contained in the given <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <param name="angles"><see cref="T:Microsoft.DirectX.Vector3"/> containing angles (in degrees).</param>
            <returns>Rotation <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ClearEventListeners(System.Object,System.String,System.Delegate[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.GetHashCodeFor(System.Object[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.GetHashCodeForProperties(System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.AllPropsShallowEqual(System.Object,System.Object)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.DeclaredPropsShallowEqual(System.Object,System.Object,System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.PropsShallowEqual(System.Object,System.Object,System.Boolean,System.Type)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.CollectionEquals(System.Collections.ICollection,System.Collections.ICollection)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ArrayListEquals(System.Collections.ArrayList,System.Collections.ArrayList)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ShallowCopy(System.Object)">
            <summary>
            Shallow copying facility. A new instance is created and
            public properties are copied
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Copy(System.Object)">
            <summary>
            Generalized deep-copy. ICloneable interface is used if present, ArrayLists
            are copied deep, value types are not copied, otherwise a new object is instantiated
            and copied field-by-field, using Util.Copy() for each field value.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Util.CopyFlags">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Util.CopyOptionsAttribute">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.CopyPropertiesTo(System.Object,System.Object)">
            <summary>
            Create a new instance and deep-copy each public field and property (using Util.Copy)
            </summary>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="M:Demo3D.Common.Util.CopyMembers(System.Object)">
            <summary>
            Create a new instance and deep-copy each public field and property (using Util.Copy)
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.FindNearest(System.Double,System.Double[])">
            <summary>
            Find the closest value to v in the list of allowed values.
            Not suitable for large lists, since it's an O(N) search
            </summary>
            <param name="v">Value to look for.</param>
            <param name="allowed">Values to compare against.</param>
            <returns>Closest value.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Cosine(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Asinh(System.Double)">
            <summary>
            Returns the angle (in radians) whose hyperbolic sine is the specified number.
            </summary>
            <param name="d">Hyperbolic sine value.</param>
            <returns>Angle (in radians).</returns>
            <remarks>This is the inverse of <see cref="M:System.Math.Sinh(System.Double)"/>.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.Acosh(System.Double)">
            <summary>
            Returns the angle (in radians) whose hyperbolic cosine is the specified number.
            </summary>
            <param name="d">Hyperbolic cosine value.</param>
            <returns>Angle (in radians).</returns>
            <remarks>This is the inverse of <see cref="M:System.Math.Cosh(System.Double)"/>.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.Atanh(System.Double)">
            <summary>
            Returns the angle (in radians) whose hyperbolic tangent is the specified number.
            </summary>
            <param name="d">Hyperbolic tangent value.</param>
            <returns>Angle (in radians).</returns>
            <remarks>This is the inverse of <see cref="M:System.Math.Tanh(System.Double)"/>.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.ToString(Microsoft.DirectX.Vector2)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ToString(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.FormatVelocity(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.AngleYOf(Microsoft.DirectX.Vector3)">
            <summary>
            Angle of the vector in the XZ plane. Angle increases in clockwise direction
            in accordance with behaviour of Matrix.RotationY(). i.e. positive angle moves
            the Z-Axis towards the X-Axis.
            That is: rotate([0,0,1], 90deg) = [1,0,0]
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to test</param>
            <returns>Angle around Y-Axis in radians</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.AngleXOf(Microsoft.DirectX.Vector3)">
            <summary>
            Angle of the vector in the YZ plane. Angle increases in clockwise direction
            in accordance with behaviour of Matrix.RotationX(). i.e. positive angle moves
            the Y-Axis towards the Z-Axis.
            That is: rotate([0,1,0], 90deg) = [0,0,1]
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to test</param>
            <returns>Angle around X-Axis in radians</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.AngleZOf(Microsoft.DirectX.Vector3)">
            <summary>
            Angle of the vector in the XY plane. Angle increases in clockwise direction
            in accordance with behaviour of Matrix.RotationZ(). i.e. positive angle moves
            the X-Axis towards the Y-Axis.
            That is: rotate([1,0,0], 90deg) = [0,1,0]
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to test</param>
            <returns>Angle around Z-Axis in radians</returns>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Util.XRotationReference">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Util.YRotationReference">
            <exclude />
        </member>
        <member name="F:Demo3D.Common.Util.ZRotationReference">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.RotationZOf(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.RotationYOf(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.RotationXOf(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.RotationOf(Microsoft.DirectX.Matrix,Demo3D.Common.Axis)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.RotationOf(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.GetAxisVector(Demo3D.Common.Axis)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.GetAxisRotationReference(Demo3D.Common.Axis)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Degrees(System.Double)">
            <summary>
            Convert an angle in Radians to an angle in Degrees.
            </summary>
            <param name="radians">Angle in Radians.</param>
            <returns>Angle in Degrees.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Degrees(Microsoft.DirectX.Vector3@)">
            <summary>
            Convert (by reference) a <see cref="T:Microsoft.DirectX.Vector3"/> of angles in Radians to angles in Degrees.
            </summary>
            <param name="radians"><see cref="T:Microsoft.DirectX.Vector3"/> of angles in Radians to convert to Degrees.</param>
        </member>
        <member name="M:Demo3D.Common.Util.Degrees(Microsoft.DirectX.Vector3)">
            <summary>
            Convert a <see cref="T:Microsoft.DirectX.Vector3"/> of angles in Radians to angles in Degrees.
            </summary>
            <param name="radians"><see cref="T:Microsoft.DirectX.Vector3"/> of angles in Radians.</param>
            <returns><see cref="T:Microsoft.DirectX.Vector3"/> of angles in Degrees.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Radians(System.Double)">
            <summary>
            Convert an angle in Degrees to an angle in Radians.
            </summary>
            <param name="degrees">Angle in Degrees.</param>
            <returns>Angle in Radians.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Radians(Microsoft.DirectX.Vector3@)">
            <summary>
            Convert (by reference) a <see cref="T:Microsoft.DirectX.Vector3"/> of angles in Degrees to angles in Radians.
            </summary>
            <param name="degrees"><see cref="T:Microsoft.DirectX.Vector3"/> of angles in Degrees to convert to Radians.</param>
        </member>
        <member name="M:Demo3D.Common.Util.Radians(Microsoft.DirectX.Vector3)">
            <summary>
            Convert a <see cref="T:Microsoft.DirectX.Vector3"/> of angles in Degrees to angles in Radians.
            </summary>
            <param name="degrees"><see cref="T:Microsoft.DirectX.Vector3"/> of angles in Degrees.</param>
            <returns><see cref="T:Microsoft.DirectX.Vector3"/> of angles in Radians.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Transform(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Normalize(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> normalization - make its length be 1
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to normalize</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> normalization</returns>
            <remarks>Use <see cref="M:Microsoft.DirectX.Vector3.Normalize(Microsoft.DirectX.Vector3)"/> instead, this is just a wrapper</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.Normalize(Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> normalization - make its length be 1
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to normalize</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> normalization</returns>
            <remarks>Use <see cref="M:Microsoft.DirectX.Vector2.Normalize(Microsoft.DirectX.Vector2)"/> instead, this is just a wrapper</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.IsUnitVector(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Whether the vector has length approximately equal to 1.
            </summary>
            <param name="v">The vector.</param>
            <param name="epsilon">The tolerance.</param>
            <returns>True if the vector has unit length within the specified tolerance, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Distance(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            The distance between the two supplied points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.DistanceSq(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            The square of the distance between the two supplied points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>The square of the distance between the two points.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Distance(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            The distance between the two supplied points.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.CalculateSurfaceNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Determine the normal to the plane defined by 3 points
            (origin, left and right).
            </summary>
            <param name="v1">Origin point</param>
            <param name="v2">Left point</param>
            <param name="v3">Right point</param>
            <returns>Surface normal</returns>
        </member>
        <member name="M:Demo3D.Common.Util.GetXOnLineGivenY(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SnapTo(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return the point on the line going through [v1,v2] that is closest to the point 'p'
            </summary>
            <param name="p">Value to test</param>
            <param name="v1">Lower bound</param>
            <param name="v2">Upper bound</param>
            <returns>Closest value</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapTo(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Return the point on the line going through [v1,v2] that is closest to the point 'p'
            </summary>
            <param name="p">Value to test</param>
            <param name="v1">Lower bound</param>
            <param name="v2">Upper bound</param>
            <returns>Closest value</returns>
        </member>
        <member name="M:Demo3D.Common.Util.BoundedSnapTo(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return the point in the line segment [v1,v2] that is closest to the point 'p' 
            </summary>
            <param name="p">Value to test</param>
            <param name="v1">Lower bound</param>
            <param name="v2">Upper bound</param>
            <returns>Closest value</returns>
        </member>
        <member name="M:Demo3D.Common.Util.BoundedSnapTo(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Return the point in the line segment [v1,v2] that is closest to the point 'p' 
            </summary>
            <param name="p">Value to test</param>
            <param name="v1">Lower bound</param>
            <param name="v2">Upper bound</param>
            <returns>Closest value</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapTo(System.Single,System.Single,System.Single)">
            <summary>
            Return the value between [v1,v2] that is closest to 'p'
            </summary>
            <param name="p">Value to test</param>
            <param name="v1">Lower bound</param>
            <param name="v2">Upper bound</param>
            <returns>Closest value</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapTo(System.Double,System.Double,System.Double)">
            <summary>
            Return the value between [v1,v2] that is closest to 'p'
            </summary>
            <param name="p">Value to test</param>
            <param name="v1">Lower bound</param>
            <param name="v2">Upper bound</param>
            <returns>Closest value</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapTo(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return the value between [v1,v2] that is closest to 'p'
            </summary>
            <param name="p">Value to test</param>
            <param name="v1">Lower bound</param>
            <param name="v2">Upper bound</param>
            <returns>Closest value</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapToZero(System.Single)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/> to 0, make it zero
            </summary>
            <param name="v">Number to test</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapToZero(System.Single,System.Single)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> to 0, make it zero
            </summary>
            <param name="v">Number to test</param>
            <param name="e">Epsilon used in comparison</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapToZero(System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/> to 0, make it zero
            </summary>
            <param name="v">Number to test</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapToZero(System.Double,System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> to 0, make it zero
            </summary>
            <param name="v">Number to test</param>
            <param name="e">Epsilon used in comparison</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapLowerTo(System.Double,System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/> to <paramref name="t"/> but less than <paramref name="t"/>, make it <paramref name="t"/>
            </summary>
            <param name="v">Number to test</param>
            <param name="t">Number to test against</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapLowerTo(System.Double,System.Double,System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> to <paramref name="t"/> but less than <paramref name="t"/>, make it <paramref name="t"/>
            </summary>
            <param name="v">Number to test</param>
            <param name="t">Number to test against</param>
            <param name="e">Epsilon used in comparison</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapUpperTo(System.Double,System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/> to <paramref name="t"/> but greater than <paramref name="t"/>, make it <paramref name="t"/>
            </summary>
            <param name="v">Number to test</param>
            <param name="t">Number to test against</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapUpperTo(System.Double,System.Double,System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> to <paramref name="t"/> but greater than <paramref name="t"/>, make it <paramref name="t"/>
            </summary>
            <param name="v">Number to test</param>
            <param name="t">Number to test against</param>
            <param name="e">Epsilon used in comparison</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapLowerToZero(System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/> to 0 but less than 0, make it 0
            </summary>
            <param name="v">Number to test</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapLowerToZero(System.Double,System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> to 0 but less than 0, make it 0
            </summary>
            <param name="v">Number to test</param>
            <param name="e">Epsilon used in comparison</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapUpperToZero(System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/> to 0 but greater than 0, make it 0
            </summary>
            <param name="v">Number to test</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SnapUpperToZero(System.Double,System.Double)">
            <summary>
            If given number is <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> to 0 but greater than 0, make it 0
            </summary>
            <param name="v">Number to test</param>
            <param name="e">Epsilon used in comparison</param>
            <returns>Snapped number</returns>
        </member>
        <member name="M:Demo3D.Common.Util.DistanceAlong(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Return the signed distance of point from origin, with vector defining
            the direction for positive distance.
            <para>[point,origin] should be parallel to [vector].</para>
            </summary>
            <param name="point">Point to test.</param>
            <param name="origin">Origin.</param>
            <param name="vector">Direction.</param>
            <returns>Distance from <paramref name="origin"/>.</returns>
            <remarks>If <paramref name="vector"/> is <see cref="F:Microsoft.DirectX.Vector3.Zero"/>, then this will always return zero.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.DistanceTo(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Find the distance of a point from a line.
            <para>
            See <see href="http://mathworld.wolfram.com/Point-LineDistance3-Dimensional.html">this page</see>.
            </para>
            </summary>
            <param name="p">Point to test.</param>
            <param name="v1">First point on line.</param>
            <param name="v2">Second point on line.</param>
            <returns>Distance of point from line.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.DistanceTo(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Find the distance of a point from a line.
            <para>
            See <see href="http://mathworld.wolfram.com/Point-LineDistance2-Dimensional.html">this page</see>.
            </para>
            </summary>
            <param name="p">Point to test.</param>
            <param name="v1">First point on line.</param>
            <param name="v2">Second point on line.</param>
            <returns>Distance of point from line.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.BoundedDistanceTo(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Find the distance of a point from a line segment.
            </summary>
            <param name="p">Point to test.</param>
            <param name="v1">Start of line segment.</param>
            <param name="v2">End of line segment.</param>
            <returns>Distance of point from line segment.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.BoundedDistanceTo(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Find the distance of a point from a line segment.
            </summary>
            <param name="p">Point to test.</param>
            <param name="v1">Start of line segment.</param>
            <param name="v2">End of line segment.</param>
            <returns>Distance of point from line segment.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Orthonormalize(Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Makes the vector <paramref name="v2"/> orthogonal to the vector <paramref name="v1"/>
            and normalizes both vectors.
            </summary>
            <param name="v1">The first vector (direction remains unchanged).</param>
            <param name="v2">The second vector.</param>
        </member>
        <member name="M:Demo3D.Common.Util.Orthonormalize(Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@)">
            <summary>
            Makes the vector <paramref name="v2"/> orthogonal to the vector <paramref name="v1"/>
            and the vector <paramref name="v3"/> orthogonal to both.
            </summary>
            <param name="v1">The first vector (direction remains unchanged).</param>
            <param name="v2">The second vector.</param>
            <param name="v3">The third vector.</param>
        </member>
        <member name="M:Demo3D.Common.Util.PerpendicularComponent(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Finds P, the component of V that is perpendicular to W.
            </summary>
            <param name="V">First <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="W">Second <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>Component of <paramref name="V"/> perpendicular to <paramref name="W"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ParallelComponent(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Finds P, the component of V that is parallel to W.
            </summary>
            <param name="V">First <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="W">Second <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>Component of <paramref name="V"/> parallel to <paramref name="W"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ProjectPointToPlane(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Project a point onto a plane.
            </summary>
            <param name="PointToProject">The point to project.</param>
            <param name="PlaneNormal">The normal to the plane.</param>
            <param name="PointOnPlane">A point on the plane.</param>
            <returns>The projected point.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ProjectPointToLine(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Projects the specified <paramref name="point"/> onto the infinite line passing through
            the two points <paramref name="p1"/> and <paramref name="p2"/>.
            </summary>
            <param name="point">The point to project.</param>
            <param name="p1">The first point on the infinite line.</param>
            <param name="p2">The second point on the infinite line.</param>
            <returns>The projected point.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ProjectedLength(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Calculates the length of the vector <paramref name="v"/> when projected in the direction
            of the unit normal <paramref name="unitNormal"/>.
            </summary>
            <param name="v">The vector that is to be projected.</param>
            <param name="unitNormal">The direction in which the vector is to be projected (must be a unit vector).</param>
            <returns>The length of the vector after being projected in the specified direction.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Project(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Projects the vector <paramref name="v"/> in the direction of the unit normal
            <paramref name="unitNormal"/>.
            </summary>
            <param name="v">The vector that is to be projected.</param>
            <param name="unitNormal">The direction in which the vector is to be projected (must be a unit vector).</param>
            <returns>The vector after being projected in the specified direction.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.MidPoint(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Return a <see cref="T:Microsoft.DirectX.Vector3"/> that is midPoint units along the line from a to b.
            Eg, midPoint=0.5 returns the point half way between a and b
            </summary>
            <param name="a">Start</param>
            <param name="b">End</param>
            <param name="midPoint">Fraction along line</param>
            <returns>Result</returns>
            <remarks>Equivalent to <see cref="M:Microsoft.DirectX.Vector3.Lerp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)"/></remarks>
        </member>
        <member name="T:Demo3D.Common.Util.Quadratic">
            <summary>
            Class to "solve" a quadratic equation "a x^2 + b x + c = 0".
            </summary>
        </member>
        <member name="F:Demo3D.Common.Util.Quadratic.a">
            <summary>
            Coefficient of the x^2 component.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Util.Quadratic.b">
            <summary>
            Coefficient of the x component.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Util.Quadratic.c">
            <summary>
            Constant component.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Util.Quadratic.SolutionLower">
            <summary>
            The smaller of the two solutions once <see cref="M:Demo3D.Common.Util.Quadratic.Solve"/> has been called, and <see cref="P:Demo3D.Common.Util.Quadratic.HasRealSolutions"/> is true.
            </summary>
        </member>
        <member name="F:Demo3D.Common.Util.Quadratic.SolutionUpper">
            <summary>
            The larger of the two solutions once <see cref="M:Demo3D.Common.Util.Quadratic.Solve"/> has been called, and <see cref="P:Demo3D.Common.Util.Quadratic.HasRealSolutions"/> is true.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Util.Quadratic.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Construct the quadratic equation "a x^2 + b x + c = 0".
            </summary>
            <param name="a">Coefficient of the x^2 component.</param>
            <param name="b">Coefficient of the x component.</param>
            <param name="c">Constant component.</param>
        </member>
        <member name="P:Demo3D.Common.Util.Quadratic.Discriminant">
            <summary>
            Returns the discriminant of the quadratic equation.
            </summary>
        </member>
        <member name="M:Demo3D.Common.Util.Quadratic.Determinant">
            <exclude />
        </member>
        <member name="P:Demo3D.Common.Util.Quadratic.HasRealSolutions">
            <summary>
            Does the equation have real solutions?
            </summary>
            <returns>True if the equation has real solutions, false otherwise.</returns>
            <remarks>Equivalent to <see cref="P:Demo3D.Common.Util.Quadratic.Discriminant"/> being greater or equal to zero.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.Quadratic.HasRealSolution">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Quadratic.Solve">
            <summary>
            Solve the equation.
            <para>If <see cref="P:Demo3D.Common.Util.Quadratic.HasRealSolutions"/> is false, then <see cref="F:Demo3D.Common.Util.Quadratic.SolutionLower"/> and <see cref="F:Demo3D.Common.Util.Quadratic.SolutionUpper"/> will be invalid.</para>
            </summary>
        </member>
        <member name="M:Demo3D.Common.Util.SphereIntersectsFrustum(Microsoft.DirectX.Plane[],Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Check to see if the supplied <paramref name="frustum"/> defined by a set of planes intersects 
            with the supplied sphere centered at <paramref name="sphereCenter"/> with a given <paramref name="sphereRadius"/>.
            <para>
            The frustum planes are usually Near, Far, Left, Right, Top, Bottom but 
            Far can be ommitted in certain cases (selection to infinity).
            </para>
            </summary>
            <param name="frustum">Array of <see cref="T:Microsoft.DirectX.Plane"/> representing the frustum.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <returns>True if they intersect, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SphereIntersectsFrustum(Microsoft.DirectX.Plane[],Demo3D.Visuals.BSphere)">
            <summary>
            Check to see if the supplied <paramref name="frustum"/> defined by a set of planes intersects
            with the supplied sphere/>.
            <para>
            The frustum planes are usually Near, Far, Left, Right, Top, Bottom but
            Far can be ommitted in certain cases (selection to infinity).
            </para>
            </summary>
            <param name="frustum">Array of <see cref="T:Microsoft.DirectX.Plane"/> representing the frustum.</param>
            <param name="sphere">The sphere.</param>
            <returns>True if they intersect, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.SphereIntersectSphere(Demo3D.Visuals.BSphere,Demo3D.Visuals.BSphere)">
            <summary>
            Test if Sphere <paramref name="a"/> intersects with Sphere <paramref name="b"/>.
            </summary>
            <param name="a">The first sphere.</param>
            <param name="b">The second sphere.</param>
            <returns>
            <returns>True if they intersect, false otherwise.</returns>
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.NormalsAreParallel(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.LinesAreParallel(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NormalsAreOrthogonal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.LinesAreOrthogonal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.IntersectionYOf(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Absolutely no idea!
            </summary>
            <param name="P1">Start of first line.</param>
            <param name="P2">End of first line.</param>
            <param name="Q1">Start of second line.</param>
            <param name="Q2">End of second line.</param>
            <returns>Absolutely no idea!</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.FileExists(System.String)">
            <summary>
            If the file length is > 260 chars File.Exists throws a file name too long
            exception. This is to avoid a try/catch clause everywhere.
            Can also get an exception if it's not a valid filename.
            </summary>
            <param name="path"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.MakeRelativePath(System.String,System.String)">
            <summary>
            Make the relative path needed to go from root to path.
            </summary>
            <param name="root"></param>
            <param name="path"></param>
            <returns></returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ArgbToKnownColor(System.Int32)">
            <summary>
            The color structure remembers how it was constructed so the GUI can only
            show "White" and not "255;255;255" if the right Color object is returned.
            http://www.dotnet247.com/247reference/msgs/54/270841.aspx
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ColorToKnownColor(System.Drawing.Color)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ImageFromFile(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.GetImageFormat(System.Drawing.Image)">
            <summary>
            For some reason comparing an image format with the static image formats
            doesn't work. We need to go through the ImageFormatConverter instead.
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.BlendImageColor(System.Drawing.Image,System.Drawing.Color,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.ResizeImageWithCrop(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            Resize an image (and crop difference to maintain aspect ratio favouring the middle)
            </summary>
            <param name="image">input image to be resized</param>
            <param name="width">output image width</param>
            <param name="height">output image height</param>
            <returns>The resized image</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Min``1(``0[])">
            <summary>
            Return the smallest element of <paramref name="values"/>.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="values">Array of values.</param>
            <returns>Smallest element of <paramref name="values"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.MinIndex``1(``0[])">
            <summary>
            Return the index for the smallest element of <paramref name="values"/>.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="values">Array of values.</param>
            <returns>Index for the smallest element of <paramref name="values"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.MinIndex``1(System.Collections.Generic.List{``0})">
            <summary>
            Return the index for the smallest element of <paramref name="values"/>.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="values">List of values.</param>
            <returns>Index for the smallest element of <paramref name="values"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Max``1(``0[])">
            <summary>
            Return the largest element of <paramref name="values"/>.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="values">Array of values.</param>
            <returns>Largest element of <paramref name="values"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.MaxIndex``1(``0[])">
            <summary>
            Return the index for the largest element of <paramref name="values"/>.
            </summary>
            <typeparam name="T">Type of the values.</typeparam>
            <param name="values">Array of values.</param>
            <returns>Index for the largest element of <paramref name="values"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.Min(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> minimization - combination of the smallest components.
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> minimization.</returns>
            <remarks>Use <see cref="M:Microsoft.DirectX.Vector3.Minimize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/> instead.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.Max(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> maximization - combination of the largest components.
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> maximization.</returns>
            <remarks>Use <see cref="M:Microsoft.DirectX.Vector3.Maximize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/> instead.</remarks>
        </member>
        <member name="T:Demo3D.Common.Util.ArcCorner">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.CalculateArc(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SmoothWithRadius(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SmoothWithRadius(System.Collections.ArrayList,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NearestPowerOf2(System.Int32)">
            <summary>
            Round the value up to the nearest power of two.
            </summary>
            <param name="v">Value to round up.</param>
            <returns>The nearest power of two greater than or equal to supplied value.</returns>
            <remarks>The results only make real sense if the <paramref name="v"/> is in the range [1, 1073741823].</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToRotation(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to convert from world co-ordinates to a co-ordinate frame defined by a set of vectors.
            </summary>
            <param name="xAxis">A vector defining the direction of the X-axis.</param>
            <param name="yAxis">A vector defining the direction of the Y-axis.</param>
            <param name="zAxis">A vector defining the direction of the Z-axis.</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToRotationLeft(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to point in a certain direction defined by two vectors.
            </summary>
            <param name="forward">A vector defining the forward direction (X axis).</param>
            <param name="left">A vector defining the left direction (Z axis).</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToRotationRight(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to point in a certain direction defined by two vectors.
            </summary>
            <param name="forward">A vector defining the forward direction (X axis).</param>
            <param name="right">A vector defining the right direction (-Z axis).</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToRotationUp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to point in a certain direction defined by two vectors.
            </summary>
            <param name="forward">A vector defining the forward direction.</param>
            <param name="up">A vector defining the up direction.</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToInverseRotation(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to convert from a co-ordinate frame defined by a set of vectors to world co-ordinates.
            </summary>
            <param name="xAxis">A vector defining the direction of the X-axis.</param>
            <param name="yAxis">A vector defining the direction of the Y-axis.</param>
            <param name="zAxis">A vector defining the direction of the Z-axis.</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToInverseRotationLeft(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to point opposite to a direction defined by two vectors.
            </summary>
            <param name="forward">A vector defining the forward direction (X axis).</param>
            <param name="left">A vector defining the left direction (Z axis).</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToInverseRotationRight(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to point opposite to a direction defined by two vectors.
            </summary>
            <param name="forward">A vector defining the forward direction (X axis).</param>
            <param name="right">A vector defining the right direction (-Z axis).</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.VectorToInverseRotationUp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Creates a rotation matrix to point opposite to a direction defined by two vectors.
            </summary>
            <param name="forward">A vector defining the forward direction.</param>
            <param name="up">A vector defining the up direction.</param>
            <returns>The rotation matrix created.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.GT(System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is greater than <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.GT(System.Double,System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is greater than <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.GE(System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is greater than or equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.GE(System.Double,System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is greater than or equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.LT(System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is less than <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.LT(System.Double,System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is less than <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.LE(System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is less than or equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.LE(System.Double,System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is less than or equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" greater than "1.0/3" returns true, but logically it should be false)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" equals "1.0/3" returns false, but logically it should be true)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" equals "1.0/3" returns false, but logically it should be true)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Single)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane,System.Single)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane,System.Double)">
            <summary>
            Test if <paramref name="a"/> is equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" equals "1.0/3" returns false, but logically it should be true)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First number</param>
            <param name="b">Second number</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>Use for floating point comparisons (e.g. "1.0f/3" equals "1.0/3" returns false, but logically it should be true)</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Single)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within 1e-6 tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane,System.Single)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane,System.Double)">
            <summary>
            Test if <paramref name="a"/> is not equal to <paramref name="b"/> (within <paramref name="e"/> tolerance)
            </summary>
            <param name="a">First value</param>
            <param name="b">Second value</param>
            <param name="e">Epsilon for test</param>
            <returns>Logical result of comparing <paramref name="a"/> and <paramref name="b"/></returns>
            <remarks>See <see cref="M:Demo3D.Common.Util.NE(System.Double,System.Double,System.Double)"/></remarks>
        </member>
        <member name="M:Demo3D.Common.Util.NearlyEqual(System.Single,System.Single,System.Single)">
            <summary>Use <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> instead.</summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NearlyEqual(System.Double,System.Double,System.Double)">
            <summary>Use <see cref="M:Demo3D.Common.Util.EQ(System.Double,System.Double,System.Double)"/> instead.</summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NearlyEqual(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
            <summary>Use <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Double)"/> instead.</summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NearlyEqual(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
            <summary>Use <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)"/> instead.</summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NearlyEqual(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
            <summary>Use <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Double)"/> instead.</summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NearlyEqual(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
            <summary>Use <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Double)"/> instead.</summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.NearlyEqual(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Single)">
            <summary>Use <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Double)"/> instead.</summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Clamp``1(``0,``0,``0)">
            <summary>
            Clamps the supplied value to the specified inclusive range.
            </summary>
            <typeparam name="T">The comparable type.</typeparam>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value in the range.</param>
            <param name="max">The maximum value in the range.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IncreaseMagnitude(System.Double,System.Double)">
            <summary>
            Returns the <paramref name="value"/> with its magnitude increased by the specified
            <paramref name="magnitude"/>.
            </summary>
            <remarks>
            If the value is negative then the returned value will be more negative. Conversely,
            if the value is positive then the returned value will be more positive. The sign
            of the specified <paramref name="magnitude"/> is ignored.
            </remarks>
            <param name="value">The value to increase in magnitude.</param>
            <param name="magnitude">The magnitude by which to increase the value.</param>
            <returns>The value increased in magnitude.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.DistanceToPlane(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Calculate the distance of a <see cref="T:Microsoft.DirectX.Vector3"/> from a plane.
            </summary>
            <param name="point"><see cref="T:Microsoft.DirectX.Vector3"/> point to test.</param>
            <param name="pointOnPlane"><see cref="T:Microsoft.DirectX.Vector3"/> point on the plane.</param>
            <param name="planeNormal"><see cref="T:Microsoft.DirectX.Vector3"/> normal to the plane.</param>
            <returns>Distance from the plane.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectCircleYSphere(System.Double,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Calculate the intersection points of a circle (centered at <see cref="F:Microsoft.DirectX.Vector3.Origin"/> and in the XZ plane) and a sphere surface (using 10^-6 as a tolerance in equality).
            </summary>
            <param name="circleRadius">Radius of the circle.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <returns>
            null meaning no intersections (includes case where circle is contained in the sphere, or circle is completely on the surface),
            or a <see cref="T:Microsoft.DirectX.Vector3"/>[2], containing the two intersections (which could be the same).
            </returns>
            <remarks>Equivalent to <see cref="M:Demo3D.Common.Util.IntersectCircleSphere(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3,System.Double)"/> with first two arguments being <see cref="F:Microsoft.DirectX.Vector3.Origin"/> and <see cref="F:Microsoft.DirectX.Vector3.YAxis"/>.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectCircleYSphere(System.Double,Microsoft.DirectX.Vector3,System.Double,System.Double)">
            <summary>
            Calculate the intersection points of a circle (centered at <see cref="F:Microsoft.DirectX.Vector3.Origin"/> and in the XZ plane) and a sphere surface (using 10^-6 as a tolerance in equality).
            </summary>
            <param name="circleRadius">Radius of the circle.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <param name="epsilon">Tolerance for floating point comparisons.</param>
            <returns>
            null meaning no intersections (includes case where circle is contained in the sphere, or circle is completely on the surface),
            or a <see cref="T:Microsoft.DirectX.Vector3"/>[2], containing the two intersections (which could be the same).
            </returns>
            <remarks>Equivalent to <see cref="M:Demo3D.Common.Util.IntersectCircleSphere(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3,System.Double,System.Double)"/> with first two arguments being <see cref="F:Microsoft.DirectX.Vector3.Origin"/> and <see cref="F:Microsoft.DirectX.Vector3.YAxis"/>.</remarks>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectPlaneSphere(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3@,System.Double@)">
            <summary>
            Calculate the intersection circle of a plane and a sphere surface.
            </summary>
            <param name="pointOnPlane">Point on the plane.</param>
            <param name="planeNormal">Normal to the plane.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <param name="intersectCenter">Calculated center of the intersection circle.</param>
            <param name="intersectRadius">Calculated radies of the intersection circle.</param>
            <returns>
            false if no intersection, true if intersection. <paramref name="intersectCenter"/> and <paramref name="intersectRadius"/> are only set if true is returned.
            <para>
            Note, the intersection circle may have zero radius, meaning the plane just touches the
            sphere surface.
            </para>
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.Intersects(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.RectangleF)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Intersects(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Drawing.RectangleF)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.EdgesForSat(System.Drawing.RectangleF)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Vertexes(System.Drawing.RectangleF)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.EdgesForSat(Microsoft.DirectX.Vector2[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Enumerate``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Helper function to let you enumerate over two <see cref="T:System.Collections.Generic.IEnumerable`1"/> sequences.
            </summary>
            <typeparam name="T">Type.</typeparam>
            <param name="a">First <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="b">Second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>Combined <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.ProjectPolygonToAxis(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Vector2,System.Single@,System.Single@)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.IntervalDistance(System.Single,System.Single,System.Single,System.Single)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Intersects(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Vector2[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SatAxisSeesBetween(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Vector2[],Microsoft.DirectX.Vector2)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.IntersectsAabb(Microsoft.DirectX.Vector2[],Microsoft.DirectX.Vector2[])">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Intersects(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Collections.Generic.IList{Microsoft.DirectX.Vector2})">
            <summary>
            Test for line-polygon intersection
            </summary>
            <param name="p1">Start point for line</param>
            <param name="p2">End point for line</param>
            <param name="polygon">Closed polygon as list of connected points</param>
            <returns>true if line p1-p2 intersects an edge of the polygon, false otherwise</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.Intersects(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Do two line segments intersect?
            </summary>
            <param name="p0">Start of first line segment.</param>
            <param name="p1">End of first line segment.</param>
            <param name="q0">Start of second line segment.</param>
            <param name="q1">End of second line segment.</param>
            <returns>True if they intersect, false otherwise.</returns>
            <remarks>I don't think this actually works for line segments that are co-linear but not overlapping.</remarks>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.IntersectLineLine(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Calculate the intersection point of two line segments.
            </summary>
            <param name="p1">Start of first line segment.</param>
            <param name="p2">End of first line segment.</param>
            <param name="q1">Start of second line segment.</param>
            <param name="q2">End of second line segment.</param>
            <returns>null if no intersection, or a <see cref="T:Microsoft.DirectX.Vector2"/> containing the intersection point.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectLineLine(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Boolean)">
            <summary>
            Calculate the intersection point of two lines or two line segments.
            <para>
            If <paramref name="bounded"/> is true, this acts like <see cref="M:Demo3D.Common.Util.IntersectLineLine(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)"/>, otherwise, it considers both
            lines to extend indefinitely.
            </para>
            </summary>
            <param name="p1">First point on first line or start of first line segment.</param>
            <param name="p2">Second point on first line or end of first line segment.</param>
            <param name="q1">First point on second line or start of second line segment.</param>
            <param name="q2">Second point on second line or end of second line segment.</param>
            <param name="bounded">If true, then consider as line segments, otherwise consider as lines.</param>
            <returns>null if no intersection, or a <see cref="T:Microsoft.DirectX.Vector2"/> containing the intersection point.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectCircleCircle(Microsoft.DirectX.Vector2,System.Double,Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Calculate the intersection points of two circles.
            </summary>
            <param name="center1">Center of the first circle.</param>
            <param name="radius1">Radius of the first circle.</param>
            <param name="center2">Center of the second circle.</param>
            <param name="radius2">Radius of the second circle.</param>
            <returns>
            null meaning no intersections (includes case where one circle is contained in the other, or circles are co-incident),
            or a <see cref="T:Microsoft.DirectX.Vector2"/>[], containing the two intersections, or just a single intersection if the circles are just touching.
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectCircleSphere(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Calculate the intersection points of a circle (in a given plane) and a sphere surface (using 10^-6 as a tolerance in equality).
            </summary>
            <param name="circleCenter">Center of the circle.</param>
            <param name="circleNormal">Normal to the plane that the circle is in.</param>
            <param name="circleRadius">Radius of the circle.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <returns>
            null meaning no intersections (includes case where circle is contained in the sphere, or circle is completely on the surface),
            or a <see cref="T:Microsoft.DirectX.Vector3"/>[2], containing the two intersections (which could be the same).
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectCircleSphere(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3,System.Double,System.Double)">
            <summary>
            Calculate the intersection points of a circle (in a given plane) and a sphere surface (using supplied epsilon as a tolerance in equality).
            </summary>
            <param name="circleCenter">Center of the circle.</param>
            <param name="circleNormal">Normal to the plane that the circle is in.</param>
            <param name="circleRadius">Radius of the circle.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <param name="epsilon">Tolerance for floating point comparisons.</param>
            <returns>
            null meaning no intersections (includes case where circle is contained in the sphere, or circle is completely on the surface),
            or a <see cref="T:Microsoft.DirectX.Vector3"/>[2], containing the two intersections (which could be the same).
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectCirclePlane(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Calculate the intersection points of a circle (in a given plane) and a plane (using 10^-6 as a tolerance in equality).
            </summary>
            <param name="plane">Plane.</param>
            <param name="circleCenter">Center of the circle.</param>
            <param name="circleNormal">Normal to the plane that the circle is in.</param>
            <param name="circleRadius">Radius of the circle.</param>
            <returns>
            null meaning no intersections (includes case where circle is contained in the sphere, or circle is completely on the surface),
            or a <see cref="T:Microsoft.DirectX.Vector3"/>[2], containing the two intersections (which could be the same).
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectRaySphere(Demo3D.Visuals.Ray,Demo3D.Visuals.BSphere,System.Single@)">
            <summary>
            Intersects a ray with a sphere.
            </summary>
            <param name="ray">The ray. Note: The ray's direction must be normalized.</param>
            <param name="sphere">The sphere.</param>
            <param name="distance">The distance along the ray at which the first point of intersection occurs.</param>
            <returns>Whether the ray intersects the sphere.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectLineSphere(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Intersect a line with a sphere (using 10^-6 as a tolerance in equality).
            </summary>
            <param name="A">First point on line.</param>
            <param name="B">Second point on line.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <returns>
            null meaning no intersections, or a <see cref="T:Microsoft.DirectX.Vector3"/>[], containing the two intersections, or just a single intersection
            if the line and sphere are just touching.
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectLineSphere(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double,System.Double)">
            <summary>
            Intersect a line with a sphere (using supplied epsilon as a tolerance in equality).
            </summary>
            <param name="A">First point on line.</param>
            <param name="B">Second point on line.</param>
            <param name="sphereCenter">Center of the sphere.</param>
            <param name="sphereRadius">Radius of the sphere.</param>
            <param name="epsilon">Tolerance for floating point comparisons.</param>
            <returns>
            null meaning no intersections, or a <see cref="T:Microsoft.DirectX.Vector3"/>[], containing the two intersections, or just a single intersection
            if the line and sphere are just touching.
            </returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectRayBBox(Demo3D.Visuals.Ray,Demo3D.Visuals.BBox,System.Double@)">
            <summary>
            Performs an intersection test between a ray and a BBox.
            </summary>
            <param name="ray">The ray.</param>
            <param name="box">The bounding box.</param>
            <param name="distance">The distance to the nearest intersection</param>
            <returns>Whether the ray intersects the bounding box.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectLineBBox(Demo3D.Visuals.Ray,Demo3D.Visuals.BBox,System.Double@,System.Double@)">
            <summary>
            Performs an intersection test between a line and a BBox.
            </summary>
            <param name="ray">The ray used to create the line.</param>
            <param name="box">The bounding box.</param>
            <param name="smin">The first intersection distance.</param>
            <param name="smax">The second intersection distance.</param>
            <returns>Whether the ray intersects the bounding box.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectRayTriangle(Demo3D.Visuals.Ray,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Numerics.Vector3@,System.Double@)">
            <summary>
            Performs an intersection test between a ray and a triangle.
            </summary>
            <remarks>
            Note that this intersection test in directed. If the ray direction and triangle normal
            are not opposed then this function will return false.
            </remarks>
            <param name="ray">The ray.</param>
            <param name="p1">The first point of the triangle.</param>
            <param name="p2">The second point of the triangle.</param>
            <param name="p3">The thrid point of the triangle.</param>
            <param name="distance">The distance along the ray at which the intersection occurs.</param>
            <returns>True if the ray intersects the triangle, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectRayTriangle(Demo3D.Visuals.Ray,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@,Microsoft.DirectX.Vector3@,System.Double@)">
            <summary>
            Performs an intersection test between a ray and a triangle.
            </summary>
            <remarks>
            Note that this intersection test in directed. If the ray direction and triangle normal
            are not opposed then this function will return false.
            </remarks>
            <param name="ray">The ray.</param>
            <param name="p1">The first point of the triangle.</param>
            <param name="p2">The second point of the triangle.</param>
            <param name="p3">The thrid point of the triangle.</param>
            <param name="distance">The distance along the ray at which the intersection occurs.</param>
            <returns>True if the ray intersects the triangle, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.MostOrthogonalVector(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.MostOrthogonalAxis(Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.RotationToAlign(Microsoft.DirectX.Matrix,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Returns a matrix that when applied to myMatrix aligns the object with the forward (X) and
            up (Y) axes
            </summary>
            <param name="myMatrix">Initial matrix rotation</param>
            <param name="targetForward">Forward axis (X)</param>
            <param name="targetUp">Up axis (Y)</param>
            <returns>Align matrix.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.GetAlignMatrix(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
             Get the rotation matrix needed to align the initial vector with the target vector.
            </summary>
            <param name="initial">Initial vector</param>
            <param name="target">Vector to align with</param>
            <param name="fallbackAxis">Axis to rotate around when initial and target are nearly parallel</param>
            <returns>Alignment matrix</returns>
        </member>
        <member name="M:Demo3D.Common.Util.GetAlignMatrix(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Get the rotation matrix needed to align the initial vector with the target vector.
            </summary>
            <remarks>
            This function will arbitrarily select a rotation axis in the case where the two vectors
            are antiparallel. Use <see cref="M:Demo3D.Common.Util.GetAlignMatrix(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/> to
            manually specify a fallback axis instead.
            </remarks>
            <param name="initial">Initial vector</param>
            <param name="target">Vector to align with</param>
            <returns>Alignment matrix</returns>
        </member>
        <member name="M:Demo3D.Common.Util.IntersectPlanePlane(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
            <summary>
            Returns the intersection line of two planes.
            </summary>
            <param name="p1">First <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="p2">Second <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <returns>Intersection <see cref="T:Demo3D.Common.Line"/>, which is <see cref="P:Demo3D.Common.Line.Empty"/> if planes are parallel or co-incident.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.QuoteCommandLineArgument(System.String,System.Boolean)">
            <summary>
                This routine appends the given argument to a command line such that
                CommandLineToArgvW will return the argument string unchanged. Arguments
                in a command line should be separated by spaces; this function does
                not add these spaces.
            </summary>
            <param name="argument">Supplies the argument to encode.</param>
            <param name="force">
                Supplies an indication of whether we should quote the argument even if it 
                does not contain any characters that would ordinarily require quoting.
            </param>
        </member>
        <member name="M:Demo3D.Common.Util.HashCombine(System.Int32@,System.Int32)">
            <summary>
            Utility function to combine together two hash codes (<see cref="M:System.Object.GetHashCode"/>)
            </summary>
            <param name="hash">First hash code (passed by reference)</param>
            <param name="additionalHash">Second hash code (passed by value)</param>
            <returns>Combined hash code (the first hash code has also been changed)</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.HashCombine(System.Int32,System.Int32)">
            <summary>
            Utility function to combine together two hash codes (<see cref="M:System.Object.GetHashCode"/>)
            </summary>
            <param name="hash">First hash code (passed by value)</param>
            <param name="additionalHash">Second hash code (passed by value)</param>
            <returns>Combined hash code</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.HashCombine(System.Int32@,System.Int32[])">
            <summary>
            Utility function to combine together multiple hash codes (<see cref="M:System.Object.GetHashCode"/>)
            </summary>
            <param name="hash">First hash code (passed by reference)</param>
            <param name="additionalHashes">Additional hash codes (passed by a "params" array of values)</param>
            <returns>Combined hash code (the first hash code has also been changed)</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.HashCombine(System.Int32@,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Utility function to combine together multiple hash codes (<see cref="M:System.Object.GetHashCode"/>)
            </summary>
            <param name="hash">First hash code (passed by reference)</param>
            <param name="additionalHashes">Additional hash codes (passed as an <see cref="T:System.Collections.IEnumerable"/>)</param>
            <returns>Combined hash code (the first hash code has also been changed)</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.HashCombine(System.Int32,System.Int32[])">
            <summary>
            Utility function to combine together multiple hash codes (<see cref="M:System.Object.GetHashCode"/>)
            </summary>
            <param name="hash">First hash code (passed by value)</param>
            <param name="additionalHashes">Additional hash codes (passed by a "params" array of values)</param>
            <returns>Combined hash code</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SinDegrees(System.Int32)">
            <summary>
            Returns the sine of the specified (in degrees) angle.
            </summary>
            <param name="angle">Angle in Degrees.</param>
            <returns>The sine of the angle.</returns>
            <remarks>
            This method avoids problems like <c>Math.Sin(Util.Radians(180))</c> not returning exactly 0.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.SinDegrees(System.Double)">
            <summary>
            Returns the sine of the specified (in degrees) angle.
            </summary>
            <param name="angle">Angle in Degrees.</param>
            <returns>The sine of the angle.</returns>
            <remarks>
            This method avoids problems like <c>Math.Sin(Util.Radians(180))</c> not returning exactly 0.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.CosDegrees(System.Int32)">
            <summary>
            Returns the cosine of the specified (in degrees) angle.
            </summary>
            <param name="angle">Angle in Degrees.</param>
            <returns>The cosine of the angle.</returns>
            <remarks>
            This method avoids problems like <c>Math.Cos(Util.Radians(90))</c> not returning exactly 0.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.CosDegrees(System.Double)">
            <summary>
            Returns the cosine of the specified (in degrees) angle.
            </summary>
            <param name="angle">Angle in Degrees.</param>
            <returns>The cosine of the angle.</returns>
            <remarks>
            This method avoids problems like <c>Math.Cos(Util.Radians(90))</c> not returning exactly 0.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.TanDegrees(System.Int32)">
            <summary>
            Returns the tangent of the specified (in degrees) angle.
            </summary>
            <param name="angle">Angle in Degrees.</param>
            <returns>The tangent of the angle.</returns>
            <remarks>
            This method avoids problems like <c>Math.Tan(Util.Radians(45))</c> not returning exactly 1.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.TanDegrees(System.Double)">
            <summary>
            Returns the tangent of the specified (in degrees) angle.
            </summary>
            <param name="angle">Angle in Degrees.</param>
            <returns>The tangent of the angle.</returns>
            <remarks>
            This method avoids problems like <c>Math.Tan(Util.Radians(45))</c> not returning exactly 1.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.SinRadians(System.Double)">
            <summary>
            Returns the sine of the specified (in radians) angle.
            </summary>
            <param name="angle">Angle in Radians.</param>
            <returns>The sine of the angle.</returns>
            <remarks>
            This just forwards to <see cref="M:System.Math.Sin(System.Double)"/>, it is here to complement <see cref="M:Demo3D.Common.Util.SinDegrees(System.Double)"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.CosRadians(System.Double)">
            <summary>
            Returns the cosine of the specified (in radians) angle.
            </summary>
            <param name="angle">Angle in Radians.</param>
            <returns>The cosine of the angle.</returns>
            <remarks>
            This just forwards to <see cref="M:System.Math.Cos(System.Double)"/>, it is here to complement <see cref="M:Demo3D.Common.Util.CosDegrees(System.Double)"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.TanRadians(System.Double)">
            <summary>
            Returns the tangent of the specified (in radians) angle.
            </summary>
            <param name="angle">Angle in Radians.</param>
            <returns>The tangent of the angle.</returns>
            <remarks>
            This just forwards to <see cref="M:System.Math.Tan(System.Double)"/>, it is here to complement <see cref="M:Demo3D.Common.Util.TanDegrees(System.Double)"/>.
            </remarks>
        </member>
        <member name="M:Demo3D.Common.Util.BinomialCoefficient(System.Int32,System.Int32)">
            <summary>
            The binomial coefficient (n choose k) is the number of ways of picking k unordered
            outcomes from n possibilities.
            </summary>
            <param name="n">The number of possibilities.</param>
            <param name="k">The number of unordered outcomes.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.Util.EscapePath(System.String[])">
            <summary>
            Join an array of path parts with a '.' escaping the following:
            @"\" is replaced with @"\\"
            @"." is replaced with @"\."
            </summary>
            <param name="parts">Array of path parts.</param>
            <returns>Period separated path.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.UnescapePath(System.String)">
            <summary>
            Split a '.' separated path into path parts while unescaping the following:
            @"\\" is replaced with @"\"
            @"\." is replaced with @"."
            </summary>
            <param name="path">Path to split.</param>
            <returns>Array of path parts.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.TypeNameAliasToType(System.String)">
            <summary>
            Convert the C# keyword types into the equivalent Framework <see cref="T:System.Type"/> (e.g. int -> typeof(System.Int32)).
            </summary>
            <param name="typeName">C# type keyword.</param>
            <returns>Equivalent framework <see cref="T:System.Type"/>.</returns>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.Util.SmallestPositive(System.Single,System.Single,System.Single@)">
            <summary>
            Whether one or more of the input values are strictly positive. The output value is set
            to the smallest strictly positive input value.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
            <param name="output">The output value.</param>
            <returns>The number of positive values.</returns>
        </member>
        <member name="M:Demo3D.Common.Util.GetWorldRay(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Single,System.Single,System.Boolean)">
            <summary>
            Get's the world ray from a point on the screen
            </summary>
            <param name="screenPoint">The point on the screen</param>
            <param name="screenSize">The size of the screen</param>
            <param name="viewMatrix">The View matrix</param>
            <param name="projectionMatrix">The projection matrix</param>
            <param name="zNear">The Z Near of the camera</param>
            <param name="zFar">The Z Far of the the camera</param>
            <param name="isPerspective">Is the view in perspective</param>
            <returns>The world ray from a point on the screen</returns>
        </member>
        <member name="M:Demo3D.Common.Util.CopyDirectory(System.String,System.String)">
            <summary>
            Copies <paramref name="sourceDir"/> and its contents to <paramref name="targetDir"/>, recursively.
            </summary>
            <param name="sourceDir">The source directory.</param>
            <param name="targetDir">The target directory.</param>
        </member>
        <member name="T:Demo3D.Common.CopyAttribute">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.CopyAttribute.#ctor(System.Boolean)">
            <summary>
            The default is true, only set to false if you want to ignore the copy.
            </summary>
        </member>
        <member name="T:Demo3D.Common.CopyShallowAttribute">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.CopyShallowAttribute.#ctor">
            <summary>
            The default is true, only set to false if you want to ignore the copy.
            </summary>
        </member>
        <member name="T:Demo3D.Common.ElementTypeAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Vector2Util">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Vector3Ext">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.TextWriterExtensionMethod">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.Line">
            <exclude />
        </member>
        <member name="T:Demo3D.Common.TempCWD">
            <summary>
            Class to allow the temporary setting of the current working directory, it resets on Dispose()
            </summary>
            <exclude />
        </member>
        <member name="F:Demo3D.Common.TempCWD.oldCwd">
            <summary>
            Saved old current working directory, or null
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TempCWD.SetCwd(System.String)">
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TempCWD.#ctor(System.String)">
            <summary>
            Temporarily set current directory to provided directory
            </summary>
            <param name="newCwd">New current directory</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TempCWD.#ctor(System.Reflection.Assembly)">
            <summary>
            Temporarily set current directory to directory that assembly is contained in
            </summary>
            <param name="a">Assembly</param>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TempCWD.Dispose">
            <summary>
            If directory has been changed, reset it to original
            </summary>
            <exclude />
        </member>
        <member name="M:Demo3D.Common.TempCWD.ToString">
            <summary>
            Get current working directory
            </summary>
            <returns>Current Working Directory</returns>
            <exclude />
        </member>
        <member name="T:Demo3D.Common.ValueList`1">
            <summary>
            Wrapper around <see cref="T:System.Collections.Generic.List`1"/> which overrides <see cref="M:System.Object.Equals(System.Object)"/> and <see cref="M:System.Object.GetHashCode"/> to
            do equality and hashes using contents of the list.
            <para>
            Usable as a key in a <see cref="T:System.Collections.Generic.Dictionary`2"/>.
            </para>
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the list entries.</typeparam>
        </member>
        <member name="M:Demo3D.Common.ValueList`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Demo3D.Common.ValueList`1.Equals(System.Object)">
            <summary>
            Test for equality of the members of the list, and not the list itself.
            </summary>
            <param name="obj"><see cref="T:System.Object"/> to compare to.</param>
            <returns>true if equal, false if not.</returns>
        </member>
        <member name="M:Demo3D.Common.ValueList`1.Equals(Demo3D.Common.ValueList{`0})">
            <summary>
            Test for equality of the members of the list, and not the list itself.
            </summary>
            <param name="other"><see cref="T:Demo3D.Common.ValueList`1"/>to compare to.</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.ValueList`1.GetHashCode">
            <summary>
            Get the hashcode.
            </summary>
            <returns>The hashcode.</returns>
        </member>
        <member name="M:Demo3D.Common.XmlSigning.Sign(System.String,System.Xml.XmlDocument)">
            <summary>
            Attach a signature to the XmlDocument.
            </summary>
            <param name="privateKey">RSA Private key used for signing</param>
            <param name="doc">XMLDocument to sign</param>
        </member>
        <member name="M:Demo3D.Common.XmlSigning.VerifyUsingSignedXml(System.String,System.Xml.XmlDocument)">
            <summary>
            Verify that the document has not been edited since it was signed
            </summary>
            <param name="publicKey">RSA public key</param>
            <param name="doc">XmlDocument to verify</param>
            <returns></returns>
        </member>
        <member name="M:Demo3D.Common.XmlSigning.GetSignatureString(System.Int32,System.Int32,System.Int64)">
            <summary>
            Creates a plain-text signature string from pre-calculated entry count, text length and text hash values.
            </summary>
            <param name="entryCount">The number of entries in the document.</param>
            <param name="totalTextLength">The total cumulative length of all of the text contained within entries.</param>
            <param name="textHash">A hash value created from the all the text contained within entries.</param>
            <returns>A plain-text signature containing the supplied values.</returns>
        </member>
        <member name="M:Demo3D.Common.XmlSigning.CreateSignature(System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Creates a signature using a given entry count, total text length and text hash.
            </summary>
            <param name="privateKey">The private key to encode the signature with.</param>
            <param name="entryCount">The number of entries in the document.</param>
            <param name="totalTextLength">The total cumulative length of all of the text contained within entries.</param>
            <param name="textHash">A hash value created from the all the text contained within entries.</param>
            <returns>The signature representing the specified values.</returns>
        </member>
        <member name="M:Demo3D.Common.XmlSigning.VerifySignature(System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Verifies a signature using a given entry count, total text length and text hash.
            </summary>
            <param name="signature">The signature to verify.</param>
            <param name="publicKey">The public key to use to verify the signature.</param>
            <param name="entryCount">The number of entries in the document.</param>
            <param name="totalTextLength">The total cumulative length of all of the text contained within entries.</param>
            <param name="textHash">A hash value created from the all the text contained within entries.</param>
            <returns>true if the signature is valid; otherwise, false.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Bits.ToULong(System.Int32)">
            <summary>
            Convert a signed 32-bit integer to an unsigned 64 bit integer without extending the sign.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Bits.CountBits(System.UInt64)">
            <summary>
            Return number of bits set in a 64 bit unsigned integer.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.Pair`2">
            <summary>
            A generic pair class.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="P:Demo3D.Utilities.Pair`2.Key">
            <summary>
            The key.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.Pair`2.Value">
            <summary>
            The value.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Pair`2.#ctor(Demo3D.Utilities.Pair{`0,`1})">
            <summary>
            Constructor
            </summary>
            <param name="pair"></param>
        </member>
        <member name="M:Demo3D.Utilities.Pair`2.#ctor(`0,`1)">
            <summary>
            Constructor
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Demo3D.Utilities.Pair`2.Equals(Demo3D.Utilities.Pair{`0,`1})">
            <summary>
            Indicates whether the current object is equal to 
            another object of the same type.
            </summary>
            <param name="other">The pair to compare.</param>
            <returns>True if the key and value identities are the same.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Pair`2.HasSameKey(Demo3D.Utilities.Pair{`0,`1})">
            <summary>
            Indicates whether the current object share its
            key with another object of the same type.
            </summary>
            <param name="pair">The pair with the key to compare.</param>
            <returns>True if the key identities are the same.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Pair`2.HasSameValue(Demo3D.Utilities.Pair{`0,`1})">
            <summary>
            Indicates whether the current object share its
            value with another object of the same type.
            </summary>
            <param name="pair">The pair with the value to compare.</param>
            <returns>True if the value identities are the same.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Pair`2.ToString">
            <summary>
            Converts the key of the current pair to its 
            equivalent <see cref="T:System.String"/> representation.
            </summary>
            <returns>A String representation.</returns>
        </member>
        <member name="T:Demo3D.Utilities.NamespaceGroupDoc">
            <summary>
            The Demo3D.Utilities namespaces.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.NamespaceDoc">
            <summary>
            The Demo3D.Utilities namespace contains useful classes and functions.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.UnitsOverrideAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.UnitsAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.CustomUnitsAttribute">
            <summary>
             Specifies a custom <see cref="T:Demo3D.Utilities.UnitType"/> to use when displaying the property.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.CustomUnitsAttribute.#ctor(System.String,Demo3D.Utilities.UnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:Demo3D.Utilities.CustomUnitsAttribute"/> class.
            </summary>
            <param name="unitName">The name of the unit to use</param>
            <param name="defaultUnitType">The unit type to use if a unit with the specified name can't</param>
        </member>
        <member name="M:Demo3D.Utilities.CustomUnitsAttribute.#ctor(Demo3D.Utilities.UnitDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:Demo3D.Utilities.CustomUnitsAttribute"/> class.
            </summary>
            <param name="unitDescriptor">The unit descriptor to use</param>
        </member>
        <member name="T:Demo3D.Utilities.UnitsArrayAttribute">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.NoUnitsAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.FrequencyAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.AngleAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.AngularSpeedAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.AngularAccelerationAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.AreaAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.VolumeAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.TorqueAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.DensityAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.DistanceAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.TimeAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.SpeedAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.AccelerationAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.MassAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.ForceAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.PercentageAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.DistanceArrayAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.VolumeFlowRateAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.VoltageAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.CurrentAttribute">
            <exclude /> 
        </member>
        <member name="T:Demo3D.Utilities.UnitSystem">
            <summary>
            Represents the system that a particular unit belongs to.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.IUnitConverter">
            <summary>
            Interface providing the functionality to convert between a specific unit and internal units.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.IUnitConverter.ConvertToInternal(System.Double)">
            <summary>
            Converts a value from the specific unit to internal units.
            </summary>
            <param name="value">The value in specific units.</param>
            <returns>The supplied value converted to internal units.</returns>
        </member>
        <member name="M:Demo3D.Utilities.IUnitConverter.ConvertFromInternal(System.Double)">
            <summary>
            Converts a value from internal units to the specific unit.
            </summary>
            <param name="value">The value in internal units.</param>
            <returns>The supplied value converted to the specific unit.</returns>
        </member>
        <member name="P:Demo3D.Utilities.UnitDescriptor.System">
            <summary>
            Gets the unit system to which this unit belongs.
            </summary>
        </member>
        <member name="P:Demo3D.Utilities.UnitDescriptor.GlobalizedName">
            <summary>
            Gets an internationalized version of the name of this unit.
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.UnitDescriptor.#ctor(System.String,Demo3D.Utilities.UnitType,System.String)">
            <summary>
            Initializes a new instance of the UnitDescriptor class.
            </summary>
            <param name="name">The name of the unit.</param>
            <param name="type">The UnitType this unit is used in conjunction with.</param>
            <param name="suffix">The unit's suffix.</param>
        </member>
        <member name="M:Demo3D.Utilities.UnitDescriptor.#ctor(System.String,Demo3D.Utilities.UnitType,System.String,System.Double)">
            <summary>
            Initializes a new instance of the UnitDescriptor class with a multiplier for conversion.
            </summary>
            <param name="name">The name of the unit.</param>
            <param name="type">The UnitType this unit is used in conjunction with.</param>
            <param name="suffix">The unit's suffix.</param>
            <param name="multiplier">The multiplier used to convert from this unit type to the internal units for this unit type.</param>
        </member>
        <member name="M:Demo3D.Utilities.UnitDescriptor.#ctor(System.String,Demo3D.Utilities.UnitType,System.String,System.Double,Demo3D.Utilities.UnitSystem)">
            <summary>
            Initializes a new instance of the UnitDescriptor class with a multiplier for conversion and a specific unit system.
            </summary>
            <param name="name">The name of the unit.</param>
            <param name="type">The UnitType this unit is used in conjunction with.</param>
            <param name="suffix">The unit's suffix.</param>
            <param name="multiplier">The multiplier used to convert from this unit type to the internal units for this unit type.</param>
            <param name="system">The UnitSystem representing the system this unit belongs to.</param>
        </member>
        <member name="M:Demo3D.Utilities.UnitDescriptor.#ctor(System.String,Demo3D.Utilities.UnitType,System.String,Demo3D.Utilities.IUnitConverter)">
            <summary>
            Initializes a new instance of the UnitDescriptor class with an IUnitConvertor for conversion.
            </summary>
            <param name="name">The name of the unit.</param>
            <param name="type">The UnitType this unit is used in conjunction with.</param>
            <param name="suffix">The unit's suffix.</param>
            <param name="converter">An IUnitConverter to be used to convert between this unit and the internal units for this unit type.</param>
        </member>
        <member name="M:Demo3D.Utilities.UnitDescriptor.#ctor(System.String,Demo3D.Utilities.UnitType,System.String,Demo3D.Utilities.IUnitConverter,Demo3D.Utilities.UnitSystem)">
            <summary>
            Initializes a new instance of the UnitDescriptor class with an IUnitConvertor for conversion and a specific unit system.
            </summary>
            <param name="name">The name of the unit.</param>
            <param name="type">The UnitType this unit is used in conjunction with.</param>
            <param name="suffix">The unit's suffix.</param>
            <param name="converter">An IUnitConverter to be used to convert between this unit and the internal units for this unit type.</param>
            <param name="system">The UnitSystem representing the system this unit belongs to.</param>
        </member>
        <member name="M:Demo3D.Utilities.UnitDescriptor.ToUnits(System.Double)">
            <summary>
            Convert value from internal units (eg metres) to units for this descriptor (eg inches).
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.UnitDescriptor.ToInternal(System.Double)">
            <summary>
            Convert value from units (eg inches) to internal value (eg metres)
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Units.GetUnits(Demo3D.Utilities.UnitType)">
            <summary>
            Gets all the units corresponding to a specified unit type.
            </summary>
            <param name="unitType">The UnitType to retrieve units for.</param>
            <returns>A list of UnitDescriptor instances representing the units corresponding to the specified unit type.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Units.GetUnits(Demo3D.Utilities.UnitType,Demo3D.Utilities.UnitSystem)">
            <summary>
            Gets all the units corresponding to a specified unit type and system.
            </summary>
            <param name="unitType">The UnitType to retrieve units for.</param>
            <param name="unitSystem">The UnitSystem to retrieve units for.</param>
            <returns>A list of UnitDescriptor instances representing the units corresponding to the specified unit type and system.</returns>
        </member>
        <member name="T:Demo3D.Utilities.Units.FahrenheitConverter">
            <summary>
            Converts from degrees Fahrenheit to the internal temperature units (degrees Celsius).
            </summary>
        </member>
        <member name="M:Demo3D.Utilities.Units.FahrenheitConverter.ConvertToInternal(System.Double)">
            <summary>
            Converts from degrees Fahrenheit to the internal temperature units.
            </summary>
            <param name="value">The value in Fahrenheit to convert.</param>
            <returns>The specified value in internal temperature units.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Units.FahrenheitConverter.ConvertFromInternal(System.Double)">
            <summary>
            Converts from internal temperature units to degrees Fahrenheit.
            </summary>
            <param name="value">The value in internal temperature units to convert.</param>
            <returns>The specified value in degrees Fahrenheit.</returns>
        </member>
        <member name="M:Demo3D.Utilities.Units.Split(System.String,System.Int32)">
            <summary>
            <para>
            Split a string representation of a Vector (e.g a <see cref="T:Microsoft.DirectX.Vector3"/> will be represented as "1.1,1.2,1.3" or "1.1;1.2;1.3") using the Current Culture's
            "list separator" character into the individual components.
            </para>
            Fall back to trying the Invariant Culture separator (",") if different to the Current Culture one.
            </summary>
            <param name="text">Text to split.</param>
            <param name="componentCount">The number of components for the Vector. This is 3 by default to handle <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <returns>Array of strings returned after the split.</returns>
        </member>
        <member name="T:Demo3D.Utilities.CustomUnitStringConverter">
            <summary>
            A converter which uses the specified UnitDescriptor to convert the unit.
            </summary>
        </member>
        <member name="T:Demo3D.Utilities.UnitStringConverter">
            <exclude />
        </member>
        <member name="M:Demo3D.Utilities.UnitStringConverter.GetUnit(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Gets the units to use for the conversion.
            This should always be called to get the correct units (instead of just looking it up from the specified unit type).
            </summary>
            <param name="property">The PropertyDescriptor for the property being converted.</param>
            <returns>A UnitDescriptor representing the units to use for the conversion.</returns>
        </member>
        <member name="T:Demo3D.Utilities.UnitArrayStringConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Utilities.UnitStringExpandableObjectConverter">
            <exclude />
        </member>
        <member name="T:Demo3D.Visuals.BBox">
            <summary>
            Store the bounding box of a mesh and expose center and radius of a bounding sphere.
            </summary>
        </member>
        <member name="F:Demo3D.Visuals.BBox.Pmax">
            The bottom corner
        </member>
        <member name="F:Demo3D.Visuals.BBox.Center">
            The top corner
        </member>
        <member name="F:Demo3D.Visuals.BBox.Size">
            The center
        </member>
        <member name="P:Demo3D.Visuals.BBox.BoxCenter">
            The size
            <exclude /> 
        </member>
        <member name="M:Demo3D.Visuals.BBox.#ctor(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Create a bounding box.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BBox.#ctor(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Create a bounding sphere.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BBox.Transform(Demo3D.Visuals.BBox,Microsoft.DirectX.Matrix)">
            <summary>
            Get the bounding box and transform it into parent coordinates.
            Bounding cube needs all 8 points to be transformed in case of rotation
              p3      p0/pMax
                p7      p4
            
              p2      p1
                p6/pMin p5
            And then new bounding box computed to be axis aligned.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BBox.Intersects(Demo3D.Visuals.Ray)">
            <summary>
            Whether the specified ray intersects the bounding box.
            </summary>
            <param name="ray">The ray.</param>
            <returns>True if the ray intersects the bounding box, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.BBox.Intersects(Demo3D.Visuals.Ray,System.Single@)">
            <summary>
            Whether the specified ray intersects the bounding box.
            </summary>
            <param name="ray">The ray.</param>
            <param name="distance">The distance along the ray at which an intersection occurs.</param>
            <returns>True if the ray intersects the bounding box, false otherwise.</returns>
        </member>
        <member name="T:Demo3D.Visuals.BSphere">
            <summary>
            The bounding sphere of a mesh/visual. A zero radius sphere is
            ignored when combining two spheres.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BSphere.Intersects(Demo3D.Visuals.Ray)">
            <summary>
            Whether the specified ray intersects the bounding box.
            </summary>
            <param name="ray">The ray.</param>
            <returns>True if the ray intersects the bounding box, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.BSphere.Intersects(Demo3D.Visuals.Ray,System.Single@)">
            <summary>
            Whether the specified ray intersects the bounding box.
            </summary>
            <param name="ray">The ray.</param>
            <param name="distance">The distance along the ray at which an intersection occurs.</param>
            <returns>True if the ray intersects the bounding box, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Visuals.BSphere.Add(Demo3D.Visuals.BSphere)">
            <summary>
            Add the bounding sphere s2 to this bounding sphere, growing and
            re-centering it if needed.
            </summary>
        </member>
        <member name="M:Demo3D.Visuals.BSphere.Add(Demo3D.Visuals.BSphere,Demo3D.Visuals.BSphere)">
            <summary>
            Add two bounding spheres and return the resulting sphere
            that encompasses the two input bounding spheres.
            </summary>
        </member>
        <member name="T:Demo3D.Visuals.Ray">
            <summary>
            Encapsulate the position and direction of a ray.
            </summary>
        </member>
        <member name="M:Demo3D.Expression.Numeric.Supports(System.Object)">
            <summary>
            Does the <see cref="T:Demo3D.Expression.Numeric"/> type support an object with a certain <see cref="P:Demo3D.Expression.Numeric.Type"/>.
            </summary>
            <param name="a">Object to test it's <see cref="P:Demo3D.Expression.Numeric.Type"/>.</param>
            <returns>True if <see cref="T:Demo3D.Expression.Numeric"/> supports objects of this <see cref="P:Demo3D.Expression.Numeric.Type"/>.</returns>
        </member>
        <member name="T:Demo3D.Maths.Jacobian">
            <summary>
            Utility functions for computing the Jacobian.
            </summary>
        </member>
        <member name="M:Demo3D.Maths.Jacobian.ForwardDifferences(Demo3D.Maths.Optimization.ObjectiveFunction,Demo3D.Maths.MatrixMN,System.Double)">
            <summary>
            Numerically approximates the Jacobian of the supplied object function at the specified
            variable values by using the forward differences approximation with the specified step.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variable values from which the objective function is evaluated.</param>
            <param name="step">The step over which the approximate the first partial derivatives to the objective function.</param>
            <returns>A matrix of approximate evaluated first partial derivatives to the objective function at the supplied variable values.</returns>
            <exception cref="T:System.DivideByZeroException">If the specified <paramref name="step"/> is zero.</exception>
        </member>
        <member name="M:Demo3D.Maths.Jacobian.BackwardDifferences(Demo3D.Maths.Optimization.ObjectiveFunction,Demo3D.Maths.MatrixMN,System.Double)">
            <summary>
            Numerically approximates the Jacobian of the supplied objective function at the
            specified variable values by using the backward differences approximation with the
            specified step.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variable values from which the objective function is evaluated.</param>
            <param name="step">The step over which the approximate the first partial derivatives to the objective function.</param>
            <returns>A matrix of approximate evaluated first partial derivatives to the objective function at the supplied variable values.</returns>
            <exception cref="T:System.DivideByZeroException">If the specified <paramref name="step"/> is zero.</exception>
        </member>
        <member name="M:Demo3D.Maths.Jacobian.ForwardDifferences(Demo3D.Maths.Solver.ObjectiveFunction,Demo3D.Maths.MatrixMN,System.Double)">
            <summary>
            Numerically approximates the Jacobian of the supplied objective function at the
            specified variable values by using the forward differences approximation with the
            specified step.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variable values from which the objective function is evaluated.</param>
            <param name="step">The step over which the approximate the first partial derivatives to the objective function.</param>
            <returns>A matrix of approximate evaluated first partial derivatives to the objective function at the supplied variable values.</returns>
            <exception cref="T:System.DivideByZeroException">If the specified <paramref name="step"/> is zero.</exception>
        </member>
        <member name="M:Demo3D.Maths.Jacobian.BackwardDifferences(Demo3D.Maths.Solver.ObjectiveFunction,Demo3D.Maths.MatrixMN,System.Double)">
            <summary>
            Numerically approximates the Jacobian of the supplied objective function at the
            specified variable values by using the backward differences approximation with the
            specified step.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variable values from which the objective function is evaluated.</param>
            <param name="step">The step over which the approximate the first partial derivatives to the objective function.</param>
            <returns>A matrix of approximate evaluated first partial derivatives to the objective function at the supplied variable values.</returns>
            <exception cref="T:System.DivideByZeroException">If the specified <paramref name="step"/> is zero.</exception>
        </member>
        <member name="T:Demo3D.Maths.NamespaceGroupDoc">
            <summary>
            Namespaces containing mathematics (mostly linear algebra) related structures, associated
            operations and algorithms.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.NamespaceDoc">
            <summary>
            The mathematics namespace.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.MaximumIterationsException">
            <summary>
            Exception that is thrown when the maximum number of iterations has been reached.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.MatrixMN">
            <summary>
            M-by-N (row-major) matrix.
            </summary>
        </member>
        <member name="F:Demo3D.Maths.MatrixMN.m">
            <summary>
            The matrix elements (row-major).
            </summary>
        </member>
        <member name="P:Demo3D.Maths.MatrixMN.RowCount">
            <summary>
            The number of rows in the matrix.
            </summary>
        </member>
        <member name="P:Demo3D.Maths.MatrixMN.ColumnCount">
            <summary>
            The number of columns in the matrix.
            </summary>
        </member>
        <member name="P:Demo3D.Maths.MatrixMN.Item(System.Int32,System.Int32)">
            <summary>
            The element at the specified row and column.
            </summary>
            <param name="row">The row in which the element is contained.</param>
            <param name="column">The column in which the element is contained.</param>
            <returns>The element at the specified row and column.</returns>
        </member>
        <member name="P:Demo3D.Maths.MatrixMN.Item(System.Int32)">
            <summary>
            The element at the specified index (row-major).
            </summary>
            <param name="index">The (row-major) index for the element.</param>
            <returns>The element at the specified (row-major) index.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.#ctor(System.Int32,System.Int32,System.Double[])">
            <summary>
            Constructor.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="elements">The elements for the matrix (row-major).</param>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs a matrix filed uniformly with the specified value.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
            <param name="value">The initial value for each element of the matrix.</param>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a matrix filled uniformly with zeros.
            </summary>
            <param name="rows">The number of rows.</param>
            <param name="columns">The number of columns.</param>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.#ctor(Demo3D.Maths.MatrixMN)">
            <summary>
            Constructs a matrix by copying the elements from the supplied matrix.
            </summary>
            <param name="other">The matrix from which the copy.</param>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Identity(System.Int32)">
            <summary>
            Constructs a square identity matrix of the specified size.
            </summary>
            <param name="size">The size of the square identify matrix (the number of rows and columns).</param>
            <returns>The identity matrix.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Scalar(Demo3D.Maths.MatrixMN)">
            <summary>
            Conversion of a 1-by-1 matrix to a double.
            </summary>
            <param name="matrix">The 1-by-1 matrix to convert.</param>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the matrix is not 1-by-1.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Transpose">
            <summary>
            Generates a matrix that is equal to the transpose of this matrix.
            </summary>
            <returns>The matrix equal to the transpose of this matrix.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Determinant">
            <summary>
            Computes the determinant of the matrix.
            </summary>
            <remarks>
            <list type="bullet">
            <item><description>The matrix must be square.</description></item>
            <item><description>Uses LU decomposition.</description></item>
            <item><description>Has time complexity O(n^3).</description></item>
            </list>
            </remarks>
            <returns>The determinant.</returns>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the matrix is not square.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Inverse">
            <summary>
            Computes the inverse of the matrix.
            </summary>
            <remarks>
            <list type="bullet">
            <item><description>This method will fail and throw an exception if the matrix is singular (non-invertible).</description></item>
            <item><description>Uses LU-decomposition with forward and back substitution.</description></item>
            <item><description>Has time complexity O(n^3).</description></item>
            </list>
            </remarks>
            <returns>The inverse of this matrix.</returns>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the matrix is not square.</exception>
            <exception cref="T:Demo3D.Maths.MatrixSingularException">If the matrix is singular (non-invertible).</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Invert">
            <summary>
            Inverts the matrix.
            </summary>
            <remarks>
            <list type="bullet">
            <item><description>This method will fail and throw an exception if the matrix is singular (non-invertible).</description></item>
            <item><description>Uses LU-decomposition with forward and back substitution.</description></item>
            <item><description>Has time complexity O(n^3).</description></item>
            </list>
            </remarks>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the matrix is not square.</exception>
            <exception cref="T:Demo3D.Maths.MatrixSingularException">If the matrix is singular (non-invertible).</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Add(Demo3D.Maths.MatrixMN)">
            <summary>
            Adds the specified matrix to this matrix.
            </summary>
            <param name="other">The other matrix to add to this matrix.</param>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the two matrices do not have equal dimensions.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Subtract(Demo3D.Maths.MatrixMN)">
            <summary>
            Subtracts the specified matrix from this matrix.
            </summary>
            <param name="other">The other matrix to subtract from this matrix.</param>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the two matrices do not have equal dimensions.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Multiply(System.Double)">
            <summary>
            Multiplies each element of the matrix by the supplied scalar value.
            </summary>
            <param name="scalar">The scalar value.</param>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Divide(System.Double)">
            <summary>
            Divides each element of the matrix by the supplied scalar value.
            </summary>
            <param name="scalar">The scalar value.</param>
            <exception cref="T:System.DivideByZeroException">If the provided scalar is zero.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Multiply(Demo3D.Maths.MatrixMN)">
            <summary>
            Multiplies this matrix by the specified matrix on the right.
            </summary>
            <param name="other">The matrix to multiply this matrix by on the right.</param>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the two matrices do not have consistent dimensions.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_UnaryNegation(Demo3D.Maths.MatrixMN)">
            <summary>
            The negation of the specified matrix, obtained by flipping the sign of each element in
            the matrix.
            </summary>
            <param name="matrix">The matrix.</param>
            <returns>The additive inverse of the specified matrix.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_Addition(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN)">
            <summary>
            The sum of the two specified matrices.
            </summary>
            <param name="m1">The left matrix operand.</param>
            <param name="m2">The right matrix operand.</param>
            <returns>The sum of the two matrices.</returns>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the two matrices do not have equal dimensions.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_Subtraction(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN)">
            <summary>
            The subtraction of the right matrix operand from the left matrix operand.
            </summary>
            <param name="m1">The left matrix operand.</param>
            <param name="m2">The right matrix operand.</param>
            <returns>The result upon subtracting the right matrix operand from the left matrix operand.</returns>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the two matrices do not have equal dimensions.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_Multiply(Demo3D.Maths.MatrixMN,System.Double)">
            <summary>
            The result of multiplying each element in the specified matrix by the provided scalar
            value.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar value.</param>
            <returns>The result upon multiplying the specified matrix by the provided scalar value.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_Division(Demo3D.Maths.MatrixMN,System.Double)">
            <summary>
            The the result of dividing each element of the specified matrix by the provided scalar
            value.
            </summary>
            <param name="matrix">The matrix.</param>
            <param name="scalar">The scalar value.</param>
            <returns>The result upon dividing the specified matrix by the provided scalar value.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_Multiply(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN)">
            <summary>
            The result upon performing the matrix multiplication of the two specified matrices.
            </summary>
            <param name="m1">The left matrix operand.</param>
            <param name="m2">The right matrix operand.</param>
            <returns>The product of the two matrices.</returns>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the two matrices do not have consistent dimensions.</exception>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.GetHashCode">
            <summary>
            Hash code for the matrix.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Equals(System.Object)">
            <summary>
            Whether the two matrices are exactly equal.
            </summary>
            <remarks>
            Checks whether the corresponding elements from each matrix are exactly equal.
            </remarks>
            <param name="obj">The other matrix to check for equality against.</param>
            <returns>True if the matrices are exactly equal, false othewise.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.Equals(System.Object,System.Double)">
            <summary>
            Whether the two matrices are equal to within a given tolerance.
            </summary>
            <remarks>
            Checks whether the corresponding elements from each matrix are equal to within a given
            tolerance. The default tolerance is 1e-5.
            </remarks>
            <param name="obj">The other matrix to check for equality against.</param>
            <param name="epsilon">The tollerance for determining element equality.</param>
            <returns>True if the matrices are approximately equal, false othewise.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_Equality(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN)">
            <summary>
            Whether the two matrices are exactly equal.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>True if the matrices are exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.op_Inequality(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN)">
            <summary>
            Whether the two matrices are not exactly equal.
            </summary>
            <param name="m1">The first matrix.</param>
            <param name="m2">The second matrix.</param>
            <returns>True if the matrices are not exactly equal, false otherwise.</returns>
        </member>
        <member name="M:Demo3D.Maths.MatrixMN.ToString">
            <summary>
            String representation of the matrix.
            </summary>
            <returns>A string representation of the matrix.</returns>
        </member>
        <member name="T:Demo3D.Maths.MatrixSingularException">
            <summary>
            Exception that is thrown when attempting to invert a singular matrix.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.MatrixDimensionException">
            <summary>
            Exception that is thrown when the dimensions of a matrix are invalid.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.GradientDescent">
            <summary>
            Optimization using gradient/steepest descent type methods.
            </summary>
            <remarks>
            Gradient descent methods evaluate the partial derivatives (gradients) of the objective
            function and take a step along the (negative) gradient direction.
            </remarks>
        </member>
        <member name="M:Demo3D.Maths.Optimization.NonLinear.GradientDescent.Minimize(Demo3D.Maths.Optimization.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Optimization.NonLinear.JacobianComputationFunction,System.Double,System.Int32)">
            <summary>
            Minimizes the objective function, <paramref name="F"/>.
            </summary>
            <remarks>
            Performs a backtracking linesearch to determine the step length.
            </remarks>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="J">The function to use for evaluating the Jacobian of <paramref name="F"/> at <paramref name="x"/>.</param>
            <param name="epsilon">The norm of the gradient of <paramref name="F"/> at <paramref name="x"/> below which the solver is determined to have converged.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <returns>The final evaluated objective function at the solution, <paramref name="x"/>.</returns>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before the convergence condition has been satisfied.</exception>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.AugmentedLagrange">
            <summary>
            The AugmentedLagrange class.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.Lagrange">
            <summary>
            The Lagrange class.
            </summary>
        </member>
        <member name="M:Demo3D.Maths.Optimization.NonLinear.Lagrange.Minimize(Demo3D.Maths.Optimization.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Optimization.EqualityConstraintFunction,Demo3D.Maths.Optimization.UnconstrainedMinimizationFunction,Demo3D.Maths.Optimization.NonLinear.JacobianComputationFunction)">
            <summary>
            Minimizes the objective function, <paramref name="F"/>, subject to the equality
            constraints, <paramref name="G"/>.
            </summary>
            <remarks>
            The critical points of the Lagrangian of <paramref name="F"/> are saddle points, rather
            than local maxima or minima. So, in order to allow the usual gradient descent and
            Quasi-Newton methods to be used, we minimize the sum-of-squares of the partial
            derivatives of the Lagrangian. This has critical points at the local maxima and minima.
            
            Note that this method is extremely sensitive to the accuracy of the evaluated Jacobian.
            If you are getting sub-optimal or infeasible results then there is a good chance that
            this is due to the accuracy of the Jacobian computation method.
            </remarks>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="G">The equality constraints to satisfy with equality to zero.</param>
            <param name="M">The minimization function to use when minimizing the Lagrangian.</param>
            <param name="J">The function to use for evaluating the Jacobian of the sum of squares of the Lagrangian partial derivatives at <paramref name="x"/>.</param>
            <returns>The final evaluated objective function at the solution, <paramref name="x"/>.</returns>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.LineSearch">
            <summary>
            Linesearch techniques, commonly used for determining the step length in optimization
            algorithms.
            </summary>
        </member>
        <member name="M:Demo3D.Maths.Optimization.NonLinear.LineSearch.InexactBacktracking(Demo3D.Maths.Optimization.ObjectiveFunction,Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN,System.Double,System.Double,System.Int32)">
            <summary>
            Performs an inexact backtracking-Armijo line search to find a "reasonable" step size.
            </summary>
            <remarks>
            Armijo's rule only works when the the search direction provided is a descent direction.
            If it isn't, then you will hit the maximum iteration limit. This can often occur when
            using finite differences approximations when determining the gradient and search
            direction.
            </remarks>
            <param name="F">The optimization objective function that is being minimized.</param>
            <param name="x">The variable values.</param>
            <param name="g">The gradients (partial derivatives) of <paramref name="F"/> evaluated at <paramref name="x"/>.</param>
            <param name="p">The search direction.</param>
            <param name="beta">The multiplicitive factor in the interval (0, 1) by which the step size is reduced in each iteration.</param>
            <param name="sigma">The multiplicitive factor in the interval (0, 0.5) that restricts the maximum step relative to the decrease in the objective function value.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <returns>A reasonable step length in the specified direction that reduces the objective function value.</returns>
            <exception cref="T:System.ArgumentException">If the provided <paramref name="beta"/> or <paramref name="sigma"/> values are not in the required intervals.</exception>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before a reasonable reduction in the evaluated objective function was attainable.</exception>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.NamespaceDoc">
            <summary>
            Namespaces containing non-linear optimization methods.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.JacobianComputationFunction">
            <summary>
            Jacobian computation function.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">Variables values from which the objective function is evaluated.</param>
            <returns>The evaluated Jacobian.</returns>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.InverseJacobianComputationFunction">
            <summary>
            Inverse Jacobian computation function.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">Variables values from which the objective function is evaluated.</param>
            <returns>The evaluated inverted Jacobian.</returns>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NonLinear.QuasiNewton">
            <summary>
            Optimization using Quasi-Newton methods.
            </summary>
        </member>
        <member name="M:Demo3D.Maths.Optimization.NonLinear.QuasiNewton.MinimizeBFGS(Demo3D.Maths.Optimization.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Optimization.NonLinear.JacobianComputationFunction,System.Double,System.Int32,Demo3D.Maths.MatrixMN)">
            <summary>
            Minimizes the objective function, <paramref name="F"/>.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="J">The function to use for evaluating the Jacobian of <paramref name="F"/> at <paramref name="x"/>.</param>
            <param name="epsilon">The norm of the gradient of <paramref name="F"/> at <paramref name="x"/> below which the solver is determined to have converged.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <param name="B0">Initial starting approximation to the Hessian (if null the identify matrix is used).</param>
            <returns>The final evaluated objective function at the solution, <paramref name="x"/>.</returns>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before the convergence condition has been satisfied.</exception>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NamespaceGroupDoc">
            <summary>
            Namespaces containing optimization methods.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Optimization.NamespaceDoc">
            <summary>
            The optimization namespace.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Optimization.ObjectiveFunction">
            <summary>
            Optimization objective function delegate.
            </summary>
            <param name="variables">The variables on which the objective function is evaluated.</param>
            <returns>The evaluated objective function value.</returns>
        </member>
        <member name="T:Demo3D.Maths.Optimization.EqualityConstraintFunction">
            <summary>
            Optimization equality constraint function delegate.
            </summary>
            <param name="variables">The variables on which the constraint function is evaluated.</param>
            <returns>The evaluated constraint function value.</returns>
        </member>
        <member name="T:Demo3D.Maths.Optimization.InequalityConstraintFunction">
            <summary>
            Optimization inequality constraint function delegate.
            </summary>
            <param name="variables">The variables on which the constraint function is evaluated.</param>
            <returns>The evaluated constraint function value.</returns>
        </member>
        <member name="T:Demo3D.Maths.Optimization.UnconstrainedMinimizationFunction">
            <summary>
            Unconstrained minimization optimization function delegate.
            </summary>
            <param name="objectiveFunction">The objective function to minimize with respect to the <paramref name="variables"/>.</param>
            <param name="variables">The variables on which the objective function is evaluated.</param>
            <param name="startingVariables">The starting values for the variables.</param>
            <returns>The minimum objective function value found.</returns>
        </member>
        <member name="T:Demo3D.Maths.Solver.Linear.GaussElimination">
            <summary>
            Gauss-Elimination related methods, used mainly for solving systems of linear equations.
            </summary>
        </member>
        <member name="M:Demo3D.Maths.Solver.Linear.GaussElimination.Solve(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN)">
            <summary>
            Solves the system of linear equations Ax=b using Gaussian elimination.
            </summary>
            <param name="A">The matrix.</param>
            <param name="x">The variables to solve.</param>
            <param name="b">The right-hand side of the equation, Ax=b.</param>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the dimensions of the matrices provided are not consistent.</exception>
            <exception cref="T:Demo3D.Maths.MatrixSingularException">If the matrix <paramref name="A"/> is singular (non-invertible).</exception>
        </member>
        <member name="M:Demo3D.Maths.Solver.Linear.GaussElimination.Solve(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN)">
            <summary>
            Solves the system of linear equations (LU)x=Pb, where L is a lower triangular
            non-singular square matrix, U is an upper triangular non-singular square matrix and P
            is a partial pivoting permutation matrix.
            </summary>
            <remarks>
            Given (LU)x=Pb, we have also L(Ux)=Pb.
            Let d = Ux, so that we have two equations:
            <list type="number">
            <item><description>Ld=Pb</description></item>
            <item><description>Ux=d</description></item>
            </list>
            We can solve for d in the first equation by using forward substitution. Then we can
            solve for x in the second equation by using backward substitution.
            </remarks>
            <param name="lower">The lower-triangular non-singular square matrix, L.</param>
            <param name="upper">The upper-triangular non-singular square matrix, U.</param>
            <param name="permutation">The partial pivoting permutation matrix.</param>
            <param name="x">The variables to solve.</param>
            <param name="b">The part of the right-hand side of the equation that is premultiplied by P.</param>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the dimensions of the matrices provided are not consistent.</exception>
            <exception cref="T:Demo3D.Maths.MatrixSingularException">If the <paramref name="upper"/> triangular matrix is singular.</exception>
        </member>
        <member name="M:Demo3D.Maths.Solver.Linear.GaussElimination.Solve(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN)">
            <summary>
            Solves the system of linear equations (LU)x=b, where L is a lower triangular
            non-singular square matrix and U is an upper triangular non-singular square matrix.
            </summary>
            <param name="x">The variables to solve.</param>
            <param name="b">The right-hand side of the equation, (LU)x=b.</param>
            <param name="lower">The lower-triangular non-singular square matrix, L.</param>
            <param name="upper">The upper-triangular non-singular square matrix, U.</param>
            <remarks>
            Given (LU)x=b, we have also L(Ux)=b.
            Let d = Ux, so that we have two equations:
            <list type="number">
            <item><description>Ld=b</description></item>
            <item><description>Ux=d</description></item>
            </list>
            We can solve for d in the first equation by using forward substitution. Then we can
            solve for x in the second equation by using backward substitution.
            </remarks>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the dimensions of the matrices provided are not consistent.</exception>
            <exception cref="T:Demo3D.Maths.MatrixSingularException">If the <paramref name="upper"/> triangular matrix is singular.</exception>
        </member>
        <member name="M:Demo3D.Maths.Solver.Linear.GaussElimination.DecomposeWithPartialPivot(Demo3D.Maths.MatrixMN,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN@,System.Int32@)">
            <summary>
            Decomposes the matrix <paramref name="A"/> into a <paramref name="lower"/> triangular
            matrix and an <paramref name="upper"/> triangular matrix such that the product of the
            <paramref name="lower"/> and <paramref name="upper"/> triangular matrices is equal to
            the matrix obtained when permuting <paramref name="A"/> by the
            <paramref name="permutation"/> matrix.
            </summary>
            <remarks>
            <list type="bullet">
            <item><description>The matrix must be square.</description></item>
            <item><description>Has time complexity O(n^3).</description></item>
            <item><description>Will fail and throw an exception if the matrix is singular.</description></item>
            </list>
            
            This method yields the matrices L, U and P such that: PA = LU, where:
            
            <list type="bullet">
            <item><description>A is the matrix provided.</description></item>
            <item><description>P is a permtation matrix.</description></item>
            <item><description>L is a lower triangular matrix.</description></item>
            <item><description>U is an upper triangular matrix.</description></item>
            </list>
            </remarks>
            <param name="A">The matrix to decompose.</param>
            <param name="lower">The lower triangular matrix.</param>
            <param name="upper">The upper triangulat matrix.</param>
            <param name="permutation">The permutation matrix.</param>
            <param name="swaps">The number of row swpas that the partial pivoting permutation matrix performs.</param>
            <exception cref="T:Demo3D.Maths.MatrixDimensionException">If the dimensions of the matrices provided are not consistent.</exception>
            <exception cref="T:Demo3D.Maths.MatrixSingularException">If the matrix <paramref name="A"/> is singular.</exception>
        </member>
        <member name="T:Demo3D.Maths.Solver.Linear.NamespaceDoc">
            <summary>
            Namespaces containing linear system solving methods.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Solver.Linear.SolverFunction">
            <summary>
            Linear equation solving function, solving the system of linear equations given by:
            <paramref name="A"/><paramref name="x"/> = <paramref name="b"/>.
            </summary>
            <param name="A">The matrix.</param>
            <param name="x">The variables to solve.</param>
            <param name="b">The right-hand side of the equation, Ax=b.</param>
        </member>
        <member name="T:Demo3D.Maths.Solver.NonLinear.NewtonRaphson">
            <summary>
            Newton-Raphson root finding solver.
            </summary>
        </member>
        <member name="M:Demo3D.Maths.Solver.NonLinear.NewtonRaphson.OverdeterminedMoorePenrosePseudoinverse(Demo3D.Maths.MatrixMN)">
            <summary>
            Computes the Moore-Penrose pseudoinverse of the supplied matrix for use in solving
            overdetermined systems of equations where the number of rows in <paramref name="A"/> is
            greater than the number of columns in <paramref name="A"/>.
            </summary>
            <param name="A">The matrix.</param>
            <returns>The (Moore-Penrose) pseudoinverse.</returns>
        </member>
        <member name="M:Demo3D.Maths.Solver.NonLinear.NewtonRaphson.UnderdeterminedMoorePenrosePseudoinverse(Demo3D.Maths.MatrixMN)">
            <summary>
            Computes the Moore-Penrose pseudoinverse of the supplied matrix for use in solving
            underdetermined systems of equations where the number of rows in <paramref name="A"/> is
            less than the number of columns in <paramref name="A"/>.
            </summary>
            <param name="A">The matrix.</param>
            <returns>The (Moore-Penrose) pseudoinverse.</returns>
        </member>
        <member name="M:Demo3D.Maths.Solver.NonLinear.NewtonRaphson.SolveOverdetermined(Demo3D.Maths.Solver.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Solver.NonLinear.JacobianComputationFunction,Demo3D.Maths.MatrixMN,System.Int32)">
            <summary>
            Solves the system of non-linear equations F(x) = 0 using the Newton-Raphson method,
            supporting overdetermined systems.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="J">The function to use for evaluating the Jacobian of <paramref name="F"/> at <paramref name="x"/>.</param>
            <param name="epsilon">The magnitude of <paramref name="F"/>(<paramref name="x"/>) below which the solver is determined to have converged.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before the convergence condition has been satisfied.</exception>
        </member>
        <member name="M:Demo3D.Maths.Solver.NonLinear.NewtonRaphson.SolveUnderdetermined(Demo3D.Maths.Solver.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Solver.NonLinear.JacobianComputationFunction,Demo3D.Maths.MatrixMN,System.Int32)">
            <summary>
            Solves the system of non-linear equations F(x) = 0 using the Newton-Raphson method,
            supporting underdetermined systems.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="J">The function to use for evaluating the Jacobian of <paramref name="F"/> at <paramref name="x"/>.</param>
            <param name="epsilon">The magnitude of <paramref name="F"/>(<paramref name="x"/>) below which the solver is determined to have converged.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before the convergence condition has been satisfied.</exception>
        </member>
        <member name="M:Demo3D.Maths.Solver.NonLinear.NewtonRaphson.Solve(Demo3D.Maths.Solver.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Solver.NonLinear.InverseJacobianComputationFunction,Demo3D.Maths.MatrixMN,System.Int32)">
            <summary>
            Solves the system of non-linear equations F(x) = 0 using the Newton-Raphson method,
            taking the full step at each iteration.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="J">The function to use for evaluating the inverted Jacobian of <paramref name="F"/> at <paramref name="x"/>.</param>
            <param name="epsilon">The magnitude of <paramref name="F"/>(<paramref name="x"/>) below which the solver is determined to have converged.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before the convergence condition has been satisfied.</exception>
        </member>
        <member name="M:Demo3D.Maths.Solver.NonLinear.NewtonRaphson.Solve(Demo3D.Maths.Solver.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Solver.NonLinear.InverseJacobianComputationFunction,System.Double,Demo3D.Maths.MatrixMN,System.Int32)">
            <summary>
            Solves the system of non-linear equations F(x) = 0 using the Newton-Raphson method.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="J">The function to use for evaluating the inverted Jacobian of <paramref name="F"/> at <paramref name="x"/>.</param>
            <param name="alpha">The fraction of the full step to take at each iteration.</param>
            <param name="epsilon">The magnitude of <paramref name="F"/>(<paramref name="x"/>) below which the solver is determined to have converged.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before the convergence condition has been satisfied.</exception>
        </member>
        <member name="M:Demo3D.Maths.Solver.NonLinear.NewtonRaphson.Solve(Demo3D.Maths.Solver.ObjectiveFunction,Demo3D.Maths.MatrixMN@,Demo3D.Maths.MatrixMN,Demo3D.Maths.Solver.Linear.SolverFunction,Demo3D.Maths.Solver.NonLinear.JacobianComputationFunction,Demo3D.Maths.MatrixMN,System.Int32)">
            <summary>
            Solves the system of non-linear equations F(x) = 0 using the Newton-Raphson method.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">The variables to solve.</param>
            <param name="x0">The starting values for the variables.</param>
            <param name="S">The function to use for solving a system of linear equations of the form Ax=b.</param>
            <param name="J">The function to use for evaluating the Jacobian of <paramref name="F"/> at <paramref name="x"/>.</param>
            <param name="epsilon">The magnitude of <paramref name="F"/>(<paramref name="x"/>) below which the solver is determined to have converged.</param>
            <param name="maxiter">The maximum number of iterations to perform.</param>
            <exception cref="T:Demo3D.Maths.MaximumIterationsException">If the maximum number of iterations has been reached before the convergence condition has been satisfied.</exception>
        </member>
        <member name="T:Demo3D.Maths.Solver.NonLinear.NamespaceDoc">
            <summary>
            Namespaces containing non-linear system solving methods.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Solver.NonLinear.JacobianComputationFunction">
            <summary>
            Jacobian computation function.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">Variables values from which the objective function is evaluated.</param>
            <returns>The evaluated Jacobian.</returns>
        </member>
        <member name="T:Demo3D.Maths.Solver.NonLinear.InverseJacobianComputationFunction">
            <summary>
            Inverse Jacobian computation function.
            </summary>
            <param name="F">The objective function.</param>
            <param name="x">Variables values from which the objective function is evaluated.</param>
            <returns>The evaluated inverted Jacobian.</returns>
        </member>
        <member name="T:Demo3D.Maths.Solver.NamespaceGroupDoc">
            <summary>
            Namespaces containing methods for solving systems of equations.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Solver.NamespaceDoc">
            <summary>
            The solver namespace.
            </summary>
        </member>
        <member name="T:Demo3D.Maths.Solver.ObjectiveFunction">
            <summary>
            Solver objective function delegate.
            </summary>
            <param name="variables">Variables on which the objective function is evaluated.</param>
            <returns>The evaluated objective function value.</returns>
        </member>
        <member name="T:Demo3D.StateMachine.StateMachine`3">
            <summary>
            FOR INTERNAL USE ONLY.
            </summary>
            <remarks>Used in the VFW.</remarks>
            <exclude/>
        </member>
        <member name="T:Demo3D.Xml.ITypeRegistry">
            <summary>
            FOR INTERNAL USE ONLY
            </summary>
            <exclude/>
        </member>
        <member name="P:Demo3D.Xml.ITypeRegistry.ActiveAssemblies">
            <summary>
            The currently active assemblies used to resolve types
            </summary>
        </member>
        <member name="P:Demo3D.Xml.ITypeRegistry.OverriddenAssemblies">
            <summary>
            Set of assemblies that have had a type overriden by another assembly
            </summary>
        </member>
        <member name="M:Demo3D.Xml.SerializerExtensions.GetFor(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Find SerializerAttribute instances.
            Optionally return a fake attribute for anything implementing ISerializable 
            or derived from the base property bag class (GlobalizedProperties)
            </summary>
            <param name="mi"></param>
            <param name="createDefault"></param>
            <returns></returns>
        </member>
        <member name="T:Demo3D.Xml.MethodInfoVisibleForSerializerAttribute">
            <summary>
            Attribute to let the MethodInfo serializer see certain private/internal methods
            </summary>
        </member>
        <member name="T:Demo3D.Xml.DataTableSerializer.ColumnSerializer">
            <summary>
            Class for serializing columns of a specific DataTable instance.
            </summary>
        </member>
        <member name="M:Demo3D.Xml.DataTableSerializer.ColumnSerializer.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the ColumnSerializer class to serialize a column.
            </summary>
            <param name="table">The DataTable instance being serialized.</param>
        </member>
        <member name="M:Demo3D.Xml.DataTableSerializer.ColumnSerializer.#ctor(System.Data.DataTable,System.Collections.Generic.List{System.Collections.Generic.List{System.Object}})">
            <summary>
            Initializes a new instance of the ColumnSerializer class to deserialize a column.
            </summary>
            <param name="table">The DataTable instance to deserialize into.</param>
            <param name="columnData">A list of column data lists to which the column data should be added.</param>
        </member>
        <member name="M:Demo3D.Xml.DataTableSerializer.ColumnSerializer.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Deserializes a DataColumn instance.
            </summary>
        </member>
        <member name="M:Demo3D.Xml.DataTableSerializer.ColumnSerializer.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes a DataColumn instance.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="value">The DataColumn instance to be serialized.</param>
        </member>
        <member name="M:Demo3D.Xml.ListGSerializer.ReadItems(Demo3D.Common.SerializerEntryReader,System.Type,System.Type,System.Boolean)">
            <summary>
            Reads the items as sub-entries from a SerializerEntryReader and creates a list of the appropriate type from them.
            </summary>
            <param name="entryReader">The SerializerEntryReader to read the sub-entries from.</param>
            <param name="listType">The type of generic list to create.</param>
            <param name="valueType">The type of the items in the list.</param>
            <param name="forceValueSerialization"></param>
            <returns>An instance of the specified list type containing the deserialized list items.</returns>
        </member>
        <member name="M:Demo3D.Xml.ListGSerializer.Read(Demo3D.Common.SerializerEntryReader,System.Type,System.Boolean)">
            <summary>
            Deserializes a list of a specified type.
            </summary>
            <param name="entryReader">A SerializerEntryReader which can be used to read the entry representing the list.</param>
            <param name="listType"></param>
            <param name="forceValueSerialization"></param>
            <returns>An instance of the appropriate list type containing the deserialized list items.</returns>
        </member>
        <member name="T:Demo3D.Xml.DictionaryGSerializer.CollectionSerializer">
            <summary>
            Class for serializing the contents of a generic Dictionary instance.
            </summary>
        </member>
        <member name="M:Demo3D.Xml.DictionaryGSerializer.CollectionSerializer.#ctor">
            <summary>
            Initializes a new instance of the CollectionSerializer class to serialize the contents of a generic dictionary.
            </summary>
        </member>
        <member name="M:Demo3D.Xml.DictionaryGSerializer.CollectionSerializer.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the CollectionSerializer class to deserialize the contents of a generic dictionary.
            </summary>
            <param name="keyType">The key type of the dictionary.</param>
            <param name="valueType">The value type of the dictionary.</param>
        </member>
        <member name="M:Demo3D.Xml.DictionaryGSerializer.CollectionSerializer.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Deserializes the contents of a generic Dictionary.
            </summary>
            <returns>A generic dictionary instance containing the deserialized items.</returns>
        </member>
        <member name="M:Demo3D.Xml.DictionaryGSerializer.CollectionSerializer.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes the contents (entries) of a generic Dictionary instance.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="value">The generic Dictionary instance to serialize.</param>
        </member>
        <member name="T:Demo3D.Xml.DictionaryGSerializer.EntrySerializer">
            <summary>
            Class for serializing an entry from a generic Dictionary instance.
            </summary>
        </member>
        <member name="M:Demo3D.Xml.DictionaryGSerializer.EntrySerializer.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the EntrySerializer class.
            </summary>
            <param name="keyType">The key type for the dictionary.</param>
            <param name="valueType">The value type for the dictionary.</param>
        </member>
        <member name="M:Demo3D.Xml.DictionaryGSerializer.EntrySerializer.Read(Demo3D.Common.SerializerEntryReader)">
            <summary>
            Deserializes a dictionary entry.
            </summary>
            <returns>An object containing Key and Value properties representing the key and value, respectively.</returns>
        </member>
        <member name="M:Demo3D.Xml.DictionaryGSerializer.EntrySerializer.Write(Demo3D.Common.Serializer,System.Object)">
            <summary>
            Serializes an entry from a generic Dictionary instance.
            </summary>
            <param name="serializer">The Serializer instance to use.</param>
            <param name="value">The DictionaryEntry instance to serialize.</param>
        </member>
        <member name="T:Demo3D.Xml.DoubleAsSingleSerializer">
            <summary>
            Serializer used to read/write a Double Property which has a backing member that is only a float. This
            stops a number like 0.1 being written out as 0.10000000149011612. Used in MeshMaterial since the underlying
            members were changed from double to float.
            </summary>
        </member>
        <member name="T:Microsoft.DirectX.DirectInput.Key">
            <summary>
            Copy of SlimDX.DirectInput.Key.
            </summary>
            <exclude />
        </member>
        <member name="T:Microsoft.DirectX.NamespaceDoc">
            <summary>
            The Microsoft.DirectX namespace contains structures for representing and manipulating objects in the 3D scene
            </summary>
        </member>
        <member name="T:Microsoft.DirectX.Vector4">
            <summary>
            <para>Defines a four component vector.</para>
            <para>A default constructed one is <see cref="F:Microsoft.DirectX.Vector4.Zero"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.v">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Vector4.X">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.XD">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.Y">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.YD">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.Z">
            <summary>
            Gets or sets the Z component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.ZD">
            <summary>
            Gets or sets the Z component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.W">
            <summary>
            Gets or sets the W component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.WD">
            <summary>
            Gets or sets the W component of the <see cref="T:Microsoft.DirectX.Vector4"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
            <param name="z">Initial value for the Z component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
            <param name="w">Initial value for the W component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
            <param name="z">Initial value for the Z component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
            <param name="w">Initial value for the W component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.#ctor(Microsoft.DirectX.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4"/> class.
            </summary>
            <param name="v">Initial value for all components of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4"/> struct.
            </summary>
            <param name="v">Initial value for all components of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.#ctor(Microsoft.DirectX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4"/> struct.
            </summary>
            <param name="v">Initial value for the X, Y and Z components of the <see cref="T:Microsoft.DirectX.Vector4"/>, the W component is zero.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.#ctor(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector4"/> struct.
            </summary>
            <param name="v">Initial value for the X, Y and Z components of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
            <param name="w">Initial value for the W component of the <see cref="T:Microsoft.DirectX.Vector4"/>.</param>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.One">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.Zero">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.Empty">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.Origin">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.XAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> representing the unit X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.YAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> representing the unit Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.ZAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> representing the unit Z-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.WAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> representing the unit W-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.MinValue">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> with the minimum value
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector4.MaxValue">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector4"/> with the maximum value
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.DirectX.Vector4"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Microsoft.DirectX.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Microsoft.DirectX.Vector4"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Microsoft.DirectX.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Equals(System.Object)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)"/> for alternative
            </summary>
            <param name="o"><see cref="T:Microsoft.DirectX.Vector4"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Equals(Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)"/> for alternative
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Equality(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Inequality(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> exact inequality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> comparision</returns> 
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Length">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.LengthD">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Length(Microsoft.DirectX.Vector4)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/> </param>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.LengthD(Microsoft.DirectX.Vector4)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/> </param>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.LengthSq">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.LengthSqD">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.LengthSq(Microsoft.DirectX.Vector4)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/> </param>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.LengthSqD(Microsoft.DirectX.Vector4)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/> </param>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Dot(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector4"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.DotD(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector4"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Dot(Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector4"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.DotD(Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector4"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Addition(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Add(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side<see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Add(Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> addition
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to add</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Subtraction(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Subtract(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side<see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Subtract(Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> subtraction
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to subtract</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_UnaryNegation(Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> unary negation
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to negate</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> negation</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Negate">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> in-place negation.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Multiply(System.Single,Microsoft.DirectX.Vector4)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="s">Scale</param>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Multiply(System.Double,Microsoft.DirectX.Vector4)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="s">Scale</param>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Multiply(Microsoft.DirectX.Vector4,System.Single)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.op_Multiply(Microsoft.DirectX.Vector4,System.Double)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Multiply(System.Single)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Multiply(System.Double)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Multiply(Microsoft.DirectX.Vector4,System.Single)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Multiply(Microsoft.DirectX.Vector4,System.Double)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Multiply(Microsoft.DirectX.Vector4)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/>.
            </summary>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector4"/> containing the X, Y, Z and W scale components.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Multiply(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector4"/> .
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale.</param>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector4"/> containing the X, Y, Z, and W scale components.</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Scale(System.Single)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Scale(System.Double)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Scale(Microsoft.DirectX.Vector4,System.Single)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Scale(Microsoft.DirectX.Vector4,System.Double)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Scale(Microsoft.DirectX.Vector4)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/>.
            </summary>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y, Z and W scale components.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Scale(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            Scale the X, Y, Z and W components of <see cref="T:Microsoft.DirectX.Vector4"/> .
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to scale.</param>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector4"/> containing the X, Y, Z and W scale components.</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector4"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Minimize(Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> minimization - combination of the smallest components
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Minimize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> minimization - combination of the smallest components
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> minimization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Maximize(Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> maximization - combination of the largest components
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Maximize(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> maximization - combination of the largest components
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> maximization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Lerp(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Single)">
            <summary>
            Linear interpolation between two <see cref="T:Microsoft.DirectX.Vector4"/>s
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns the point midway between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Lerp(Microsoft.DirectX.Vector4,Microsoft.DirectX.Vector4,System.Double)">
            <summary>
            Linear interpolation between two <see cref="T:Microsoft.DirectX.Vector4"/>s
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns the point midway between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Lerp(Microsoft.DirectX.Vector4,System.Double)">
            <summary>
            Linear interpolation between this <see cref="T:Microsoft.DirectX.Vector4"/> and another <see cref="T:Microsoft.DirectX.Vector4"/>
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns this. When t = 1 returns b. When t = 0.5 returns the point midway between this and b.
            </para>
            </summary>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Normalize">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> normalization - make its length be 1
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Normalize(Microsoft.DirectX.Vector4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> normalization - make its length be 1
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector4"/> to normalize</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> normalization</returns>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.Normalized">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector4"/> normalization - make its length be 1
            </summary>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector4"/> normalization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.Transform(Microsoft.DirectX.Vector4,Microsoft.DirectX.Matrix)">
            <summary>
            Transforms a <see cref="T:Microsoft.DirectX.Vector4"/> by the given <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <param name="v">The source <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="m">The transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>The resulting <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector4.MultiplyAdd(Microsoft.DirectX.Vector4,System.Double,Microsoft.DirectX.Vector4)">
            <summary>
            Combined multiplication and addition
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <param name="s">Scale</param>
            <param name="o">Offset <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector4"/> of <paramref name="v"/> * <paramref name="s"/> + <paramref name="o"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Vector4.Item(System.Int32)">
            <exclude />
        </member>
        <member name="T:Microsoft.DirectX.Vector3">
            <summary>
            <para>Defines a three component vector.</para>
            <para>A default constructed one is <see cref="F:Microsoft.DirectX.Vector3.Zero"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.v">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Vector3.X">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Vector3"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector3.XD">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Vector3"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector3.Y">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Vector3"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector3.YD">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Vector3"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector3.Z">
            <summary>
            Gets or sets the Z component of the <see cref="T:Microsoft.DirectX.Vector3"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector3.ZD">
            <summary>
            Gets or sets the Z component of the <see cref="T:Microsoft.DirectX.Vector3"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="z">Initial value for the Z component of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3"/> struct.
            </summary>
            <param name="value">Initial value for the X,Y and Z components of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
            <param name="z">Initial value for the Z component of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3"/> struct.
            </summary>
            <param name="value">Initial value for the X,Y and Z components of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.#ctor(Microsoft.DirectX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3"/> struct.
            </summary>
            <param name="v">Initial value for all components of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.#ctor(System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector3"/> struct.
            </summary>
            <param name="v">Initial value for all components of the <see cref="T:Microsoft.DirectX.Vector3"/>.</param>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.One">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.Zero">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.Empty">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.Origin">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.XAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> representing the unit X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.YAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> representing the unit Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.ZAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> representing the unit Z-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.MinValue">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> with the minimum value
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector3.MaxValue">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector3"/> with the maximum value
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Equals(System.Object)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/> for alternative
            </summary>
            <param name="o"><see cref="T:Microsoft.DirectX.Vector3"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Equals(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/> for alternative
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Equality(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Inequality(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> exact inequality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Length">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.LengthD">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Length(Microsoft.DirectX.Vector3)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/> </param>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.LengthD(Microsoft.DirectX.Vector3)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/> </param>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.LengthSq">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.LengthSqD">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.LengthSq(Microsoft.DirectX.Vector3)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/> </param>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.LengthSqD(Microsoft.DirectX.Vector3)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/> </param>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Dot(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector3"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.DotD(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector3"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Dot(Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector3"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.DotD(Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector3"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Cross(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Cross product of two <see cref="T:Microsoft.DirectX.Vector3"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Cross product</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Cross(Microsoft.DirectX.Vector3)">
            <summary>
            Cross product of two <see cref="T:Microsoft.DirectX.Vector3"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Cross product</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.ScalarTriple(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Scalar triple product of three <see cref="T:Microsoft.DirectX.Vector3"/>s
            </summary>
            <param name="a">First <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="b">Second <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="c">Third <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Scalar triple product as a <see cref="T:System.Double"/></returns>
            <remarks>Equivalent to <code>a.DotD(b.Cross(c))</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.ScalarTriple(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Scalar triple product of three <see cref="T:Microsoft.DirectX.Vector3"/>s
            </summary>
            <param name="b">Second <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="c">Third <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Scalar triple product as a <see cref="T:System.Double"/></returns>
            <remarks>Equivalent to <code>this.DotD(b.Cross(c))</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.VectorTriple(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Vector triple product of three <see cref="T:Microsoft.DirectX.Vector3"/>s
            </summary>
            <param name="a">First <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="b">Second <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="c">Third <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Vector triple product</returns>
            <remarks>Equivalent to <code>a.Cross(b.Cross(c))</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.VectorTriple(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Vector triple product of three <see cref="T:Microsoft.DirectX.Vector3"/>s
            </summary>
            <param name="b">Second <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="c">Third <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Vector triple product</returns>
            <remarks>Equivalent to <code>this.Cross(b.Cross(c))</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Addition(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Add(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Add(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> addition
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to add</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Subtraction(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Subtract(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Subtract(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> subtraction
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to subtract</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_UnaryNegation(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> unary negation
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to negate</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> negation</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Negate">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> in-place negation.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Multiply(System.Single,Microsoft.DirectX.Vector3)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="s">Scale</param>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Multiply(System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="s">Scale</param>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Multiply(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.op_Multiply(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Multiply(System.Single)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Multiply(System.Double)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Multiply(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Multiply(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Scale the X, Y and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Multiply(Microsoft.DirectX.Vector3)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y, and Z scale components.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Multiply(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> .
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale.</param>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y, and Z scale components.</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Scale(System.Single)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Scale(System.Double)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Scale(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Scale(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Scale(Microsoft.DirectX.Vector3)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/>.
            </summary>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y, and Z scale components.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Scale(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Scale the X, Y, and Z components of <see cref="T:Microsoft.DirectX.Vector3"/> .
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to scale.</param>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y, and Z scale components.</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector3"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Minimize(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> minimization - combination of the smallest components
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Minimize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> minimization - combination of the smallest components
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> minimization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Maximize(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> maximization - combination of the largest components
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Maximize(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> maximization - combination of the largest components
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> maximization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Lerp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Linear interpolation between two <see cref="T:Microsoft.DirectX.Vector3"/>s
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns the point midway between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Lerp(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Linear interpolation between two <see cref="T:Microsoft.DirectX.Vector3"/>s
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns the point midway between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Lerp(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Linear interpolation between this <see cref="T:Microsoft.DirectX.Vector3"/> and another <see cref="T:Microsoft.DirectX.Vector3"/>
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns this. When t = 1 returns b. When t = 0.5 returns the point midway between this and b.
            </para>
            </summary>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Normalize">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> normalization - make its length be 1
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Normalize(Microsoft.DirectX.Vector3)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> normalization - make its length be 1
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> to normalize</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> normalization</returns>
        </member>
        <member name="P:Microsoft.DirectX.Vector3.Normalized">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector3"/> normalization - make its length be 1
            </summary>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector3"/> normalization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Transform(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
            <summary>
            Transforms a <see cref="T:Microsoft.DirectX.Vector3"/> by the given <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <param name="v">The source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="m">The transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>The resulting <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Matrix)">
            <summary>
            Transform this <see cref="T:Microsoft.DirectX.Vector3"/> coordinate by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.TransformCoordinate(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector3"/> coordinate by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Matrix)">
            <summary>
            Transform this <see cref="T:Microsoft.DirectX.Vector3"/> normal by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Matrix)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector3"/> normal by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Quaternion)">
            <summary>
            Transform this <see cref="T:Microsoft.DirectX.Vector3"/> normal by <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <param name="q">Transformation <see cref="T:Microsoft.DirectX.Quaternion"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.TransformNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector3"/> normal by <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="q">Transformation <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.MultiplyAdd(Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Combined multiplication and addition
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="s">Scale</param>
            <param name="o">Offset <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/> of <paramref name="v"/> * <paramref name="s"/> + <paramref name="o"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Convert(Microsoft.DirectX.Vector3[])">
            <summary>
            Convert the Vector3[] array to a System.Numerics.Vector3[] array
            </summary>
            <param name="array">Input Vector3[] array</param>
            <returns>Output System.Numerics.Vector3[] array</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector3.Convert(System.Numerics.Vector3[])">
            <summary>
            Convert the System.Numerics.Vector3[] array to a Vector3[] array
            </summary>
            <param name="array">Input System.Numerics.Vector3[] array</param>
            <returns>Output Vector3[] array</returns>
        </member>
        <member name="P:Microsoft.DirectX.Vector3.Item(System.Int32)">
            <exclude />
        </member>
        <member name="T:Microsoft.DirectX.Vector2">
            <summary>
            <para>Defines a two component vector.</para>
            <para>A default constructed one is <see cref="F:Microsoft.DirectX.Vector2.Zero"/>.</para>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.v">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Vector2.X">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Vector2"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector2.XD">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Vector2"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector2.Y">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Vector2"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Vector2.YD">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Vector2"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Vector2"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Vector2"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector2"/> struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Vector2"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Vector2"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.#ctor(Microsoft.DirectX.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector2"/> struct.
            </summary>
            <param name="v">Initial value for all components of the <see cref="T:Microsoft.DirectX.Vector2"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Vector2"/> struct.
            </summary>
            <param name="v">Initial value for all components of the <see cref="T:Microsoft.DirectX.Vector2"/>.</param>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.One">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> with all of its components set to one.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.Zero">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.Empty">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.Origin">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.XAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> representing the unit X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.YAxis">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> representing the unit Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.MinValue">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> with the minimum value
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Vector2.MaxValue">
            <summary>
            A <see cref="T:Microsoft.DirectX.Vector2"/> with the maximum value
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.DirectX.Vector2"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Microsoft.DirectX.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Microsoft.DirectX.Vector2"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Microsoft.DirectX.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Equals(System.Object)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)"/> for alternative
            </summary>
            <param name="o"><see cref="T:Microsoft.DirectX.Vector2"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Equals(Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)"/> for alternative
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Equality(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Inequality(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> exact inequality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Length">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.LengthD">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Length(Microsoft.DirectX.Vector2)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/> </param>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.LengthD(Microsoft.DirectX.Vector2)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/> </param>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.LengthSq">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.LengthSqD">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.LengthSq(Microsoft.DirectX.Vector2)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/> </param>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.LengthSqD(Microsoft.DirectX.Vector2)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Vector3"/> 
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/> </param>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Dot(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.DotD(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Dot(Microsoft.DirectX.Vector2)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.DotD(Microsoft.DirectX.Vector2)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Ccw(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Cross product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Cross product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.CcwD(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Cross product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Cross product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Ccw(Microsoft.DirectX.Vector2)">
            <summary>
            Cross product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Cross product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.CcwD(Microsoft.DirectX.Vector2)">
            <summary>
            Cross product of two <see cref="T:Microsoft.DirectX.Vector2"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Cross product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Addition(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Add(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Add(Microsoft.DirectX.Vector2)">
            <summary>
            Add <see cref="T:Microsoft.DirectX.Vector2"/> to this <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to add</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Subtraction(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Subtract(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Subtract(Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> subtraction
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to subtract</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_UnaryNegation(Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> unary negation
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to negate</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> negation</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Negate">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> in-place negation.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Multiply(System.Single,Microsoft.DirectX.Vector2)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="s">Scale</param>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Multiply(System.Double,Microsoft.DirectX.Vector2)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="s">Scale</param>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Multiply(Microsoft.DirectX.Vector2,System.Single)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.op_Multiply(Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Multiply(System.Single)">
            <summary>
            Scale the X, and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Multiply(System.Double)">
            <summary>
            Scale the X, and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Multiply(Microsoft.DirectX.Vector2,System.Single)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Multiply(Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Multiply(Microsoft.DirectX.Vector2)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/>.
            </summary>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector2"/> containing the X and Y scale components.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Multiply(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> .
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale.</param>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector2"/> containing the X and Y scale components.</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Scale(System.Single)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Scale(System.Double)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Scale(Microsoft.DirectX.Vector2,System.Single)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Scale(Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> 
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Scale(Microsoft.DirectX.Vector2)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/>.
            </summary>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector2"/> containing the X and Y scale components.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Scale(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            Scale the X and Y components of <see cref="T:Microsoft.DirectX.Vector2"/> .
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to scale.</param>
            <param name="s"><see cref="T:Microsoft.DirectX.Vector2"/> containing the X and Y scale components.</param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Minimize(Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> minimization - combination of the smallest components
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Minimize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> minimization - combination of the smallest components
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> minimization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Maximize(Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> maximization - combination of the largest components
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Maximize(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> maximization - combination of the largest components
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> maximization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Lerp(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Single)">
            <summary>
            Linear interpolation between two <see cref="T:Microsoft.DirectX.Vector2"/>s
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns the point midway between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Lerp(Microsoft.DirectX.Vector2,Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Linear interpolation between two <see cref="T:Microsoft.DirectX.Vector2"/>s
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns the point midway between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Lerp(Microsoft.DirectX.Vector2,System.Double)">
            <summary>
            Linear interpolation between this <see cref="T:Microsoft.DirectX.Vector2"/> and another <see cref="T:Microsoft.DirectX.Vector2"/>
            <para>
            This is most commonly used to find a point some fraction of the way along a line between two endpoints
            When t = 0 returns this. When t = 1 returns b. When t = 0.5 returns the point midway between this and b.
            </para>
            </summary>
            <param name="b">End <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Normalize">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> normalization - make its length be 1
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Normalize(Microsoft.DirectX.Vector2)">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> normalization - make its length be 1
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector2"/> to normalize</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> normalization</returns>
        </member>
        <member name="P:Microsoft.DirectX.Vector2.Normalized">
            <summary>
            <see cref="T:Microsoft.DirectX.Vector2"/> normalization - make its length be 1
            </summary>
            <returns>Result of <see cref="T:Microsoft.DirectX.Vector2"/> normalization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.Transform(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
            <summary>
            Transforms a <see cref="T:Microsoft.DirectX.Vector2"/> by the given <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <param name="v">The source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="m">The transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>The resulting <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Matrix)">
            <summary>
            Transform this <see cref="T:Microsoft.DirectX.Vector2"/> coordinate by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.TransformCoordinate(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector2"/> coordinate by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Matrix)">
            <summary>
            Transform this <see cref="T:Microsoft.DirectX.Vector2"/> normal by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Vector2,Microsoft.DirectX.Matrix)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector2"/> normal by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="m">Transformation <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Quaternion)">
            <summary>
            Transform this <see cref="T:Microsoft.DirectX.Vector2"/> normal by <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <param name="q">Transformation <see cref="T:Microsoft.DirectX.Quaternion"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.TransformNormal(Microsoft.DirectX.Vector2,Microsoft.DirectX.Quaternion)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector2"/> normal by <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="q">Transformation <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Vector2.MultiplyAdd(Microsoft.DirectX.Vector2,System.Double,Microsoft.DirectX.Vector2)">
            <summary>
            Combined multiplication and addition
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <param name="s">Scale</param>
            <param name="o">Offset <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector2"/> of <paramref name="v"/> * <paramref name="s"/> + <paramref name="o"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Vector2.Item(System.Int32)">
            <exclude />
        </member>
        <member name="T:Microsoft.DirectX.Matrix">
            <summary>
            <para>Defines a 4x4 matrix.</para>
            <para>A default constructed one is <see cref="F:Microsoft.DirectX.Matrix.Zero"/>.</para>
            <para>You are unlikely to ever directly construct one, you'd use one of the static methods returning a <see cref="T:Microsoft.DirectX.Matrix"/>, e.g. <see cref="M:Microsoft.DirectX.Matrix.RotationAxis(Microsoft.DirectX.Vector3,System.Double)"/></para>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M11">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M12">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M13">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M14">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M21">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M22">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M23">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M24">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M31">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M32">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M33">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M34">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M41">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M42">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M43">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.M44">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.#ctor(Microsoft.DirectX.Matrix)">
            <summary>
            Initializes a new instance of the Matrix struct.
            </summary>
            <param name="m">Initial value for all components of the matrix.</param>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.#ctor(System.Numerics.Matrix4x4)">
            <summary>
            Initializes a new instance of the Matrix struct.
            </summary>
            <param name="m">Initial value for all components of the matrix.</param>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.Zero">
            <summary>
            A <see cref="T:Microsoft.DirectX.Matrix"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.Identity">
            <summary>
            A <see cref="T:Microsoft.DirectX.Matrix"/> representing the "Identity" matrix
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.DirectX.Matrix"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Microsoft.DirectX.Matrix"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Equals(System.Object)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)"/> for alternative
            </summary>
            <param name="o"><see cref="T:Microsoft.DirectX.Matrix"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Equals(Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)"/> for alternative
            </summary>
            <param name="m"><see cref="T:Microsoft.DirectX.Matrix"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.op_Equality(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.op_Inequality(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> exact inequality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.op_Addition(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Add(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.op_Subtraction(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Subtract(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.op_Multiply(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> multiplication
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> multiplication</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Multiply(Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> multiplication
            </summary>
            <param name="m"><see cref="T:Microsoft.DirectX.Matrix"/> to multiply by</param>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Multiply(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> multiplication
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> multiplication</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Multiply(System.Numerics.Matrix4x4,Microsoft.DirectX.Matrix)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> multiplication
            </summary>
            <param name="l">Left-hand side <see cref="T:System.Numerics.Matrix4x4"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> multiplication</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Multiply(Microsoft.DirectX.Matrix,System.Numerics.Matrix4x4)">
            <summary>
            <see cref="T:Microsoft.DirectX.Matrix"/> multiplication
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <param name="r">Right-hand side <see cref="T:System.Numerics.Matrix4x4"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Matrix"/> multiplication</returns>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.Determinant">
            <summary>
            Determinant of this <see cref="T:Microsoft.DirectX.Matrix"/> as a <see cref="T:System.Single"/>
            </summary>
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Matrix.DeterminantD">
            <summary>
            Determinant of this <see cref="T:Microsoft.DirectX.Matrix"/> as a <see cref="T:System.Double"/>
            </summary>
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Invert">
            <summary>
            Invert this <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Invert(Microsoft.DirectX.Matrix)">
            <summary>
            Invert given <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m"><see cref="T:Microsoft.DirectX.Matrix"/> to invert</param>
            <returns>Inverted <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.Inverted">
            <summary>
            Invert this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <returns>Inverted <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Scaling(System.Double)">
            <summary>
            Form a scaling <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="scale">The X, Y, and Z scale</param>
            <returns>Resulting scaling <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Scaling(Microsoft.DirectX.Vector3)">
            <summary>
            Form a scaling <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y and Z scales</param>
            <returns>Resulting scaling <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Scaling(System.Single,System.Single,System.Single)">
            <summary>
            Form a scaling <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="x">The X scale</param>
            <param name="y">The Y scale</param>
            <param name="z">The Z scale</param>
            <returns>Resulting scaling <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Scaling(System.Double,System.Double,System.Double)">
            <summary>
            Form a scaling <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="x">The X scale</param>
            <param name="y">The Y scale</param>
            <param name="z">The Z scale</param>
            <returns>Resulting scaling <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Translation(Microsoft.DirectX.Vector3)">
            <summary>
            Form a translation <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v"><see cref="T:Microsoft.DirectX.Vector3"/> containing the X, Y and Z translations</param>
            <returns>Resulting translation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Translation(System.Single,System.Single,System.Single)">
            <summary>
            Form a translation <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="x">The X translation</param>
            <param name="y">The Y translation</param>
            <param name="z">The Z translation</param>
            <returns>Resulting translation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Form a translation <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="x">The X translation</param>
            <param name="y">The Y translation</param>
            <param name="z">The Z translation</param>
            <returns>Resulting translation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationX(System.Single)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the X-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationX(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the X-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationXDegrees(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the X-Axis
            </summary>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationX(System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the X-Axis, offset from the origin
            </summary>
            <param name="radians">Angle in radians</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationX(radians) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationXDegrees(System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the X-Axis, offset from the origin
            </summary>
            <param name="degrees">Angle in degrees</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationXDegrees(degrees) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationY(System.Single)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Y-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationY(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Y-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYDegrees(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Y-Axis
            </summary>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationY(System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Y-Axis, offset from the origin
            </summary>
            <param name="radians">Angle in radians</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationY(radians) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYDegrees(System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Y-Axis, offset from the origin
            </summary>
            <param name="degrees">Angle in degrees</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationYDegrees(degrees) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationZ(System.Single)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Z-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationZ(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Z-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationZDegrees(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Z-Axis
            </summary>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationZ(System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Z-Axis, offset from the origin
            </summary>
            <param name="radians">Angle in radians</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationZ(radians) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationZDegrees(System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about the Z-Axis, offset from the origin
            </summary>
            <param name="degrees">Angle in degrees</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationZDegrees(degrees) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationX0">
            <summary>
            Equivalent to <see cref="F:Microsoft.DirectX.Matrix.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationX90">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 90 degrees (or -270 degrees) about the X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationX180">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 180 degrees (or -180 degrees) about the X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationX270">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 270 degrees (or -90 degrees) about the X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationX360">
            <summary>
            Equivalent to <see cref="F:Microsoft.DirectX.Matrix.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationY0">
            <summary>
            Equivalent to <see cref="F:Microsoft.DirectX.Matrix.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationY90">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 90 degrees (or -270 degrees) about the Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationY180">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 180 degrees (or -180 degrees) about the Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationY270">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 270 degrees (or -90 degrees) about the Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationY360">
            <summary>
            Equivalent to <see cref="F:Microsoft.DirectX.Matrix.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationZ0">
            <summary>
            Equivalent to <see cref="F:Microsoft.DirectX.Matrix.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationZ90">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 90 degrees (or -270 degrees) about the Z-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationZ180">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 180 degrees (or -180 degrees) about the Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationZ270">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Matrix"/> of 270 degrees (or -90 degrees) about the Z-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.RotationZ360">
            <summary>
            Equivalent to <see cref="F:Microsoft.DirectX.Matrix.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Matrix.ReflectionXY">
            <summary>
            Precomputed reflection <see cref="T:Microsoft.DirectX.Matrix"/> in XY plane
            </summary>
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.ReflectionXZ">
            <summary>
            Precomputed reflection <see cref="T:Microsoft.DirectX.Matrix"/> in XZ plane
            </summary>
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Matrix.ReflectionYZ">
            <summary>
            Precomputed reflection <see cref="T:Microsoft.DirectX.Matrix"/> in YZ plane
            </summary>
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationAxis(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about given axis
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationAxis(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about given axis
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationAxis(Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about given axis, offset from the origin
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="radians">Angle in radians</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationAxis(axis, radians) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationAxisDegrees(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about given axis
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationAxisDegrees(Microsoft.DirectX.Vector3,System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> rotating about given axis, offset from the origin
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="degrees">Angle in degrees</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationAxisDegrees(axis, degrees) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationQuaternion(Microsoft.DirectX.Quaternion)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            </summary>
            <param name="yaw">Yaw in radians</param>
            <param name="pitch">Pitch in radians</param>
            <param name="roll">Roll in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            </summary>
            <param name="yaw">Yaw in radians</param>
            <param name="pitch">Pitch in radians</param>
            <param name="roll">Roll in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRoll(Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            contained within the <see cref="T:Microsoft.DirectX.Vector3"/> with Yaw being the <see cref="P:Microsoft.DirectX.Vector3.Y"/> component,
            Pitch being the <see cref="P:Microsoft.DirectX.Vector3.X"/> component and Roll being the the <see cref="P:Microsoft.DirectX.Vector3.Z"/> component.
            </summary>
            <param name="ypr"><see cref="T:Microsoft.DirectX.Vector3"/> containing the Yaw/Pitch/Roll in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRollDegrees(System.Double,System.Double,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            </summary>
            <param name="yaw">Yaw in radians</param>
            <param name="pitch">Pitch in radians</param>
            <param name="roll">Roll in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRollDegrees(Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            contained within the <see cref="T:Microsoft.DirectX.Vector3"/> with Yaw being the <see cref="P:Microsoft.DirectX.Vector3.Y"/> component,
            Pitch being the <see cref="P:Microsoft.DirectX.Vector3.X"/> component and Roll being the the <see cref="P:Microsoft.DirectX.Vector3.Z"/> component.
            </summary>
            <param name="ypr"><see cref="T:Microsoft.DirectX.Vector3"/> containing the Yaw/Pitch/Roll in degrees.</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRoll(System.Double,System.Double,System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation), offset from the origin
            </summary>
            <param name="yaw">Yaw in radians</param>
            <param name="pitch">Pitch in radians</param>
            <param name="roll">Roll in radians</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationYawPitchRoll(yaw, pitch, roll) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRoll(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            contained within the <see cref="T:Microsoft.DirectX.Vector3"/> with Yaw being the <see cref="P:Microsoft.DirectX.Vector3.Y"/> component,
            Pitch being the <see cref="P:Microsoft.DirectX.Vector3.X"/> component and Roll being the the <see cref="P:Microsoft.DirectX.Vector3.Z"/> component,
            offset from the origin.
            </summary>
            <param name="ypr"><see cref="T:Microsoft.DirectX.Vector3"/> containing the Yaw/Pitch/Roll in radians.</param>
            <param name="o">Origin of rotation.</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationYawPitchRoll(ypr) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRollDegrees(System.Double,System.Double,System.Double,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation), offset from the origin
            </summary>
            <param name="yaw">Yaw in degrees</param>
            <param name="pitch">Pitch in degrees</param>
            <param name="roll">Roll in degrees</param>
            <param name="o">Origin of rotation</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationYawPitchRollDegrees(yaw, pitch, roll) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.RotationYawPitchRollDegrees(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Matrix"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            contained within the <see cref="T:Microsoft.DirectX.Vector3"/> with Yaw being the <see cref="P:Microsoft.DirectX.Vector3.Y"/> component,
            Pitch being the <see cref="P:Microsoft.DirectX.Vector3.X"/> component and Roll being the the <see cref="P:Microsoft.DirectX.Vector3.Z"/> component,
            offset from the origin.
            </summary>
            <param name="ypr"><see cref="T:Microsoft.DirectX.Vector3"/> containing the Yaw/Pitch/Roll in degrees.</param>
            <param name="o">Origin of rotation.</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Matrix"/>.</returns>
            <remarks>Equivalent to <code>Matrix.Translation(-o) * Matrix.RotationYawPitchRollDegrees(ypr) * Matrix.Translation(o)</code></remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Transformation(Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Transform(Microsoft.DirectX.Vector2)">
            <summary>
            Transforms a <see cref="T:Microsoft.DirectX.Vector2"/> by this <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <param name="v">The source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>The resulting <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.TransformCoordinate(Microsoft.DirectX.Vector2)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector2"/> coordinate by this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.TransformNormal(Microsoft.DirectX.Vector2)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector2"/> normal by this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Transform(Microsoft.DirectX.Vector3)">
            <summary>
            Transforms a <see cref="T:Microsoft.DirectX.Vector3"/> by this <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <param name="v">The source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>The resulting <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.TransformCoordinate(Microsoft.DirectX.Vector3)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector3"/> coordinate by this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.TransformNormal(Microsoft.DirectX.Vector3)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector3"/> normal by this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Transform(Microsoft.DirectX.Vector4)">
            <summary>
            Transforms a <see cref="T:Microsoft.DirectX.Vector4"/> by this <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <param name="v">The source <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>The resulting <see cref="T:Microsoft.DirectX.Vector4"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Transform(Microsoft.DirectX.Plane)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Plane"/> by this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Plane"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.LookAtLH(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.PerspectiveLH(System.Double,System.Double,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.PerspectiveFovLH(System.Double,System.Double,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.PerspectiveOffCenterLH(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.OrthoLH(System.Double,System.Double,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.OrthoOffCenterLH(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Transpose">
            <summary>
            Transpose this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.TransposeMatrix(Microsoft.DirectX.Matrix)">
            <summary>
            Transpose given <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m"><see cref="T:Microsoft.DirectX.Matrix"/> to transpose</param>
            <returns>Transposed <see cref="T:Microsoft.DirectX.Matrix"/></returns>
            <remarks>Obsolete, use <see cref="M:Microsoft.DirectX.Matrix.Transpose(Microsoft.DirectX.Matrix)"/> instead</remarks>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Transpose(Microsoft.DirectX.Matrix)">
            <summary>
            Transpose given <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m"><see cref="T:Microsoft.DirectX.Matrix"/> to transpose</param>
            <returns>Transposed <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.Transposed">
            <summary>
            Transpose this <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <returns>Transposed <see cref="T:Microsoft.DirectX.Matrix"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.XAxis">
            <summary>
            The X-Axis of the <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <remarks>Equivalent to <code>Vector3.TransformNormal(m, Vector3.XAxis)</code></remarks>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.YAxis">
            <summary>
            The Y-Axis of the <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <remarks>Equivalent to <code>Vector3.TransformNormal(m, Vector3.YAxis)</code></remarks>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.ZAxis">
            <summary>
            The Z-Axis of the <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <remarks>Equivalent to <code>Vector3.TransformNormal(m, Vector3.ZAxis)</code></remarks>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.Origin">
            <summary>
            The Origin of the <see cref="T:Microsoft.DirectX.Matrix"/> 
            </summary>
            <remarks>Equivalent to <code>Vector3.TransformCoordinate(m, Vector3.Zero)</code></remarks>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.OriginX">
            <summary>
            The X component of <see cref="P:Microsoft.DirectX.Matrix.Origin"/> as a <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.OriginXD">
            <summary>
            The X component of <see cref="P:Microsoft.DirectX.Matrix.Origin"/> as a <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.OriginY">
            <summary>
            The Y component of <see cref="P:Microsoft.DirectX.Matrix.Origin"/> as a <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.OriginYD">
            <summary>
            The Y component of <see cref="P:Microsoft.DirectX.Matrix.Origin"/> as a <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.OriginZ">
            <summary>
            The Z component of <see cref="P:Microsoft.DirectX.Matrix.Origin"/> as a <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Matrix.OriginZD">
            <summary>
            The Z component of <see cref="P:Microsoft.DirectX.Matrix.Origin"/> as a <see cref="T:System.Double"/>
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Descale(Microsoft.DirectX.Matrix)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Shadow(Microsoft.DirectX.Vector4,Microsoft.DirectX.Plane)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Reflection(Microsoft.DirectX.Plane)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Decompose(Microsoft.DirectX.Vector3@,Microsoft.DirectX.Quaternion@,Microsoft.DirectX.Vector3@)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Interpolate(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Single)">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Matrix.Interpolate(Microsoft.DirectX.Matrix,Microsoft.DirectX.Matrix,System.Double)">
            <exclude />
        </member>
        <member name="T:Microsoft.DirectX.Quaternion">
            <summary>
            <para>Defines a four dimensional mathematical <see cref="T:Microsoft.DirectX.Quaternion"/>.</para>
            <para>A default constructed one is <see cref="P:Microsoft.DirectX.Quaternion.Zero"/>.</para>
            <para>You are unlikely to ever directly construct one, you'd use one of the static methods returning a <see cref="T:Microsoft.DirectX.Quaternion"/>, e.g. <see cref="M:Microsoft.DirectX.Quaternion.RotationAxis(Microsoft.DirectX.Vector3,System.Double)"/></para>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.X">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Single"/>.
            </summary>
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.XD">
            <summary>
            Gets or sets the X component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.Y">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Single"/>.
            </summary>
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.YD">
            <summary>
            Gets or sets the Y component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Double"/>.
            </summary>
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.Z">
            <summary>
            Gets or sets the Z component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Single"/>.
            </summary>
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.ZD">
            <summary>
            Gets or sets the Z component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Double"/>.
            </summary>
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.W">
            <summary>
            Gets or sets the W component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Single"/>.
            </summary>
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.WD">
            <summary>
            Gets or sets the W component of the <see cref="T:Microsoft.DirectX.Quaternion"/> as a <see cref="T:System.Double"/>.
            </summary>
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(Microsoft.DirectX.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion"/> struct.
            </summary>
            <param name="v">Initial value for the X and Y components of the <see cref="T:Microsoft.DirectX.Quaternion"/>, Z and W components are zero.</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(Microsoft.DirectX.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion"/> struct.
            </summary>
            <param name="v">Initial value for the X, Y, and Z components of the <see cref="T:Microsoft.DirectX.Quaternion"/>, W component is zero.</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion"/> struct.
            </summary>
            <param name="v">Initial value for the X, Y, and Z components of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="w">Initial value for the W component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion"/> struct.
            </summary>
            <param name="v">Initial value for the X, Y, and Z components of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="w">Initial value for the W component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Quaternion struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="z">Initial value for the Z component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="w">Initial value for the W component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Quaternion struct.
            </summary>
            <param name="x">Initial value for the X component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="y">Initial value for the Y component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="z">Initial value for the Z component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
            <param name="w">Initial value for the W component of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(Microsoft.DirectX.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion"/> struct.
            </summary>
            <param name="q">Initial value for all components of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.#ctor(System.Numerics.Quaternion)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Quaternion"/> struct.
            </summary>
            <param name="q">Initial value for all components of the <see cref="T:Microsoft.DirectX.Quaternion"/>.</param>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.Zero">
            <summary>
            A <see cref="T:Microsoft.DirectX.Quaternion"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.Identity">
            <summary>
            The "Identity" <see cref="T:Microsoft.DirectX.Quaternion"/> representing no rotation.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.DirectX.Quaternion"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Microsoft.DirectX.Quaternion"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Microsoft.DirectX.Quaternion"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Microsoft.DirectX.Quaternion"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Equals(System.Object)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)"/> for alternative
            </summary>
            <param name="o"><see cref="T:Microsoft.DirectX.Quaternion"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Equals(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)"/> for alternative
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.op_Equality(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.op_Inequality(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> exact inequality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Length">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.LengthD">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Length(Microsoft.DirectX.Quaternion)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/> </param>
            <returns>Length as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.LengthD(Microsoft.DirectX.Quaternion)">
            <summary>
            Length of <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/> </param>
            <returns>Length as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.LengthSq">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.LengthSqD">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.LengthSq(Microsoft.DirectX.Quaternion)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/> </param>
            <returns>Length squared as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.LengthSqD(Microsoft.DirectX.Quaternion)">
            <summary>
            Length squared of <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/> </param>
            <returns>Length squared as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Dot(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Quaternion"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.DotD(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Quaternion"/>s 
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Dot(Microsoft.DirectX.Quaternion)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Quaternion"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.DotD(Microsoft.DirectX.Quaternion)">
            <summary>
            Dot product of two <see cref="T:Microsoft.DirectX.Quaternion"/>s 
            </summary>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.Axis">
            <summary>
            Extract the rotation axis from <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <returns>The axis</returns>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.Angle">
            <summary>
            Extract the rotation angle from <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <returns>The angle (in radians) as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.AngleD">
            <summary>
            Extract the rotation angle from <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <returns>The angle (in radians) as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.ToAxisAngle(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3@,System.Single@)">
            <summary>
            Extract axis and angle from <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/> </param>
            <param name="axis">Reference to <see cref="T:Microsoft.DirectX.Vector3"/> to store the axis in</param>
            <param name="angle">Reference to a <see cref="T:System.Single"/> variable to store the angle (in radians) in</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.ToAxisAngle(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Vector3@,System.Double@)">
            <summary>
            Extract axis and angle from <see cref="T:Microsoft.DirectX.Quaternion"/> 
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/> </param>
            <param name="axis">Reference to <see cref="T:Microsoft.DirectX.Vector3"/> to store the axis in</param>
            <param name="angle">Reference to a <see cref="T:System.Double"/> variable to store the angle (in radians) in</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.op_Addition(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Add(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> addition
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> addition</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Add(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> addition
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> to add</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.op_Subtraction(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Subtract(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> subtraction
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> subtraction</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Subtract(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> subtraction
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> to subtract</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.op_UnaryNegation(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> unary negation
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> to negate</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> negation</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Negate">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> in-place negation.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Conjugate">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> conjugation
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Conjugate(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> conjugation
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> conjugation</returns>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.Conjugated">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> conjugation
            </summary>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> conjugation</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationMatrix(Microsoft.DirectX.Matrix)">
            <summary>
            Create a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> from a rotation <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m">Source <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationX(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about the X-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationXDegrees(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about the X-Axis
            </summary>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationY(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about the Y-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationYDegrees(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about the Y-Axis
            </summary>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationZ(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about the Z-Axis
            </summary>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationZDegrees(System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about the Z-Axis
            </summary>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.onedivsqrt2">
            <exclude />
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationX0">
            <summary>
            Equivalent to <see cref="P:Microsoft.DirectX.Quaternion.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationX90">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 90 degrees (or -270 degrees) about the X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationX180">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 180 degrees (or -180 degrees) about the X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationX270">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 270 degrees (or -90 degrees) about the X-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationX360">
            <summary>
            Equivalent to -<see cref="P:Microsoft.DirectX.Quaternion.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationY0">
            <summary>
            Equivalent to <see cref="P:Microsoft.DirectX.Quaternion.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationY90">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 90 degrees (or -270 degrees) about the Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationY180">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 180 degrees (or -180 degrees) about the Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationY270">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 270 degrees (or -90 degrees) about the Y-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationY360">
            <summary>
            Equivalent to -<see cref="P:Microsoft.DirectX.Quaternion.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationZ0">
            <summary>
            Equivalent to <see cref="P:Microsoft.DirectX.Quaternion.Identity"/>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationZ90">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 90 degrees (or -270 degrees) about the Z-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationZ180">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 180 degrees (or -180 degrees) about the Z-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationZ270">
            <summary>
            Precomputed rotation <see cref="T:Microsoft.DirectX.Quaternion"/> of 270 degrees (or -90 degrees) about the Z-Axis
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Quaternion.RotationZ360">
            <summary>
            Equivalent to -<see cref="P:Microsoft.DirectX.Quaternion.Identity"/>
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationAxis(Microsoft.DirectX.Vector3,System.Single)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about given axis
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationAxis(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about given axis
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="radians">Angle in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationAxisDegrees(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> rotating about given axis
            </summary>
            <param name="axis">Axis to rotate about</param>
            <param name="degrees">Angle in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationYawPitchRoll(System.Single,System.Single,System.Single)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            </summary>
            <param name="yaw">Yaw in radians</param>
            <param name="pitch">Pitch in radians</param>
            <param name="roll">Roll in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationYawPitchRoll(System.Double,System.Double,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            </summary>
            <param name="yaw">Yaw in radians</param>
            <param name="pitch">Pitch in radians</param>
            <param name="roll">Roll in radians</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.RotationYawPitchRollDegrees(System.Double,System.Double,System.Double)">
            <summary>
            Form a rotation <see cref="T:Microsoft.DirectX.Quaternion"/> from Yaw (Y-Axis rotation), Pitch (X-Axis rotation) and Roll (Z-Axis rotation)
            </summary>
            <param name="yaw">Yaw in degrees</param>
            <param name="pitch">Pitch in degrees</param>
            <param name="roll">Roll in degrees</param>
            <returns>Resulting rotation <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.op_Multiply(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> multiplication
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> multiplication</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Multiply(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> multiplication
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> multiplication</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Multiply(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> multiplication
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> to multiply by</param>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Normalize">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> normalization - make its length be 1
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Normalize(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> normalization - make its length be 1
            </summary>
            <param name="q"><see cref="T:Microsoft.DirectX.Quaternion"/> to normalize</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> normalization</returns>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.Normalized">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> normalization - make its length be 1
            </summary>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> normalization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.TransformNormal(Microsoft.DirectX.Vector2)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector2"/> normal by this <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector2"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector2"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.TransformNormal(Microsoft.DirectX.Vector3)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Vector3"/> normal by this <see cref="T:Microsoft.DirectX.Quaternion"/>
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Invert">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> inversion
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Invert(Microsoft.DirectX.Quaternion)">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> inversion
            </summary>
            <param name="q">Source <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> inversion</returns>
        </member>
        <member name="P:Microsoft.DirectX.Quaternion.Inverted">
            <summary>
            <see cref="T:Microsoft.DirectX.Quaternion"/> inversion
            </summary>
            <returns>Result of <see cref="T:Microsoft.DirectX.Quaternion"/> inversion</returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Slerp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Single)">
            <summary>
            Spherical interpolation between two <see cref="T:Microsoft.DirectX.Quaternion"/>s
            <para>
            This is most commonly used to find an intermediate rotation between a start and an end rotation.
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns a rotation "midway" between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Slerp(Microsoft.DirectX.Quaternion,Microsoft.DirectX.Quaternion,System.Double)">
            <summary>
            Spherical interpolation between two <see cref="T:Microsoft.DirectX.Quaternion"/>s
            <para>
            This is most commonly used to find an intermediate rotation between between a start and an end rotation.
            When t = 0 returns a. When t = 1 returns b. When t = 0.5 returns a rotation "midway" between a and b.
            </para>
            </summary>
            <param name="a">Start <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="b">End <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Quaternion.Slerp(Microsoft.DirectX.Quaternion,System.Double)">
            <summary>
            Spherical interpolation between this <see cref="T:Microsoft.DirectX.Quaternion"/> and another <see cref="T:Microsoft.DirectX.Quaternion"/>
            <para>
            This is most commonly used to find an intermediate rotation between between a start and an end rotation.
            When t = 0 returns this. When t = 1 returns b. When t = 0.5 returns a rotation "midway" between this and b.
            </para>
            </summary>
            <param name="b">End <see cref="T:Microsoft.DirectX.Quaternion"/></param>
            <param name="t">Interpolant</param>
            <returns>Interpolated <see cref="T:Microsoft.DirectX.Quaternion"/></returns>
        </member>
        <member name="T:Microsoft.DirectX.Plane">
            <summary>
            <para>Defines a plane in three dimensions.</para>
            <para>A default constructed one is <see cref="P:Microsoft.DirectX.Plane.Empty"/>.</para>
            <para>You are unlikely to ever directly construct one, you'd use one of the static methods returning a <see cref="T:Microsoft.DirectX.Plane"/>, e.g. <see cref="M:Microsoft.DirectX.Plane.FromPointNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)"/></para>
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Plane.X">
            <summary>
            Gets or sets the X component of the normal to the <see cref="T:Microsoft.DirectX.Plane"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Plane.XD">
            <summary>
            Gets or sets the X component of the normal to the <see cref="T:Microsoft.DirectX.Plane"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Plane.Y">
            <summary>
            Gets or sets the Y component of the normal to the <see cref="T:Microsoft.DirectX.Plane"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Plane.YD">
            <summary>
            Gets or sets the Y component of the normal to the <see cref="T:Microsoft.DirectX.Plane"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Plane.Z">
            <summary>
            Gets or sets the Z component of the normal to the <see cref="T:Microsoft.DirectX.Plane"/> as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Plane.ZD">
            <summary>
            Gets or sets the Z component of the normal to the <see cref="T:Microsoft.DirectX.Plane"/> as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Microsoft.DirectX.Plane.D">
            <summary>
            Gets or sets the distance of the <see cref="T:Microsoft.DirectX.Plane"/> along its normal from the origin as a <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Plane.DD">
            <summary>
            Gets or sets the distance of the <see cref="T:Microsoft.DirectX.Plane"/> along its normal from the origin as a <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="P:Microsoft.DirectX.Plane.A">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Plane.AD">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Plane.B">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Plane.BD">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Plane.C">
            <exclude />
        </member>
        <member name="P:Microsoft.DirectX.Plane.CD">
            <exclude />
        </member>
        <member name="M:Microsoft.DirectX.Plane.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Plane"/> struct.
            </summary>
            <param name="x">X component of the normal defining the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="y">Y component of the normal defining the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="z">Z component of the normal defining the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="d">Distance of the <see cref="T:Microsoft.DirectX.Plane"/> along its normal from the origin.</param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Plane"/> struct.
            </summary>
            <param name="x">X component of the normal defining the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="y">Y component of the normal defining the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="z">Z component of the normal defining the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="d">Distance of the <see cref="T:Microsoft.DirectX.Plane"/> along its normal from the origin.</param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.#ctor(Microsoft.DirectX.Vector3,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Plane"/> struct.
            </summary>
            <param name="n">The normal defining the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
            <param name="d">Distance of the <see cref="T:Microsoft.DirectX.Plane"/> along its normal from the origin.</param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.#ctor(Microsoft.DirectX.Plane)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Plane"/> struct.
            </summary>
            <param name="p">Initial value for all components of the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.#ctor(System.Numerics.Plane)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.DirectX.Plane"/> struct.
            </summary>
            <param name="p">Initial value for all components of the <see cref="T:Microsoft.DirectX.Plane"/>.</param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.FromPointNormal(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Create a <see cref="T:Microsoft.DirectX.Plane"/> from a <see cref="T:Microsoft.DirectX.Vector3"/> coordinate and <see cref="T:Microsoft.DirectX.Vector3"/> normal 
            </summary>
            <param name="p"><see cref="T:Microsoft.DirectX.Vector3"/> coordinate</param>
            <param name="n"><see cref="T:Microsoft.DirectX.Vector3"/> normal</param>
            <returns>Result <see cref="T:Microsoft.DirectX.Plane"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.FromPoints(Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Create a <see cref="T:Microsoft.DirectX.Plane"/> from three <see cref="T:Microsoft.DirectX.Vector3"/> coordinates  
            </summary>
            <param name="p1">First <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="p2">Second <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <param name="p3">Third <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Plane"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Plane.Empty">
            <summary>
            A <see cref="T:Microsoft.DirectX.Plane"/> with all of its components set to zero.
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Plane.GetHashCode">
            <summary>
            Returns the hash code for the current <see cref="T:Microsoft.DirectX.Plane"/>.
            </summary>
            <returns>A hash code for the current <see cref="T:Microsoft.DirectX.Plane"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.ToString">
            <summary>
            Returns a string that represents the current <see cref="T:Microsoft.DirectX.Plane"/>.
            </summary>
            <returns>A string that represents the current <see cref="T:Microsoft.DirectX.Plane"/>.</returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Equals(System.Object)">
            <summary>
            <see cref="T:Microsoft.DirectX.Plane"/> exact equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)"/> for alternative
            </summary>
            <param name="o"><see cref="T:Microsoft.DirectX.Plane"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Plane"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Equals(Microsoft.DirectX.Plane)">
            <summary>
            Exact value equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)"/> for alternative
            </summary>
            <param name="p"><see cref="T:Microsoft.DirectX.Plane"/> to test against</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Plane"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.op_Equality(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
            <summary>
            Exact value equality - see <see cref="M:Demo3D.Common.Util.EQ(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Plane"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Plane"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.op_Inequality(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)">
            <summary>
            Exact value inequality - see <see cref="M:Demo3D.Common.Util.NE(Microsoft.DirectX.Plane,Microsoft.DirectX.Plane)"/> for alternative
            </summary>
            <param name="l">Left-hand side <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="r">Right-hand side <see cref="T:Microsoft.DirectX.Plane"/></param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Plane"/> comparision</returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotNormal(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> and <see cref="T:Microsoft.DirectX.Plane"/> normal   
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotNormalD(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> and <see cref="T:Microsoft.DirectX.Plane"/> normal   
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotNormal(Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> and this <see cref="T:Microsoft.DirectX.Plane"/> normal   
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotNormalD(Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> and this <see cref="T:Microsoft.DirectX.Plane"/> normal   
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> as a coordinate and <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotD(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> as a coordinate and <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> as a coordinate and this <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotD(Microsoft.DirectX.Vector3)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector3"/> as a coordinate and this <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector3"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector4"/> and <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotD(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector4"/> and <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Dot(Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector4"/> and this <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Single"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.DotD(Microsoft.DirectX.Vector4)">
            <summary>
            Dot product of <see cref="T:Microsoft.DirectX.Vector4"/> and this <see cref="T:Microsoft.DirectX.Plane"/>   
            </summary>
            <param name="v">Source <see cref="T:Microsoft.DirectX.Vector4"/></param>
            <returns>Dot product as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Normalize">
            <summary>
            <see cref="T:Microsoft.DirectX.Plane"/> normalization - make length of normal be 1
            </summary>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Normalize(Microsoft.DirectX.Plane)">
            <summary>
            <see cref="T:Microsoft.DirectX.Plane"/> normalization - make length of normal be 1
            </summary>
            <param name="p"><see cref="T:Microsoft.DirectX.Plane"/> to normalize</param>
            <returns>Result of <see cref="T:Microsoft.DirectX.Plane"/> normalization</returns>
        </member>
        <member name="P:Microsoft.DirectX.Plane.Normalized">
            <summary>
            <see cref="T:Microsoft.DirectX.Plane"/> normalization - make length of normal be 1
            </summary>
            <returns>Result of <see cref="T:Microsoft.DirectX.Plane"/> normalization</returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.IntersectLine(Microsoft.DirectX.Plane,Microsoft.DirectX.Vector3,Microsoft.DirectX.Vector3)">
            <summary>
            Find intersection <see cref="T:Microsoft.DirectX.Vector3"/> on <see cref="T:Microsoft.DirectX.Plane"/> of the line segment between two <see cref="T:Microsoft.DirectX.Vector3"/>s
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="v1">Start <see cref="T:Microsoft.DirectX.Vector3"/> of line segment</param>
            <param name="v2">End <see cref="T:Microsoft.DirectX.Vector3"/> of line segment</param>
            <returns>Intersection <see cref="T:Microsoft.DirectX.Vector3"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Transform(Microsoft.DirectX.Matrix)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Plane"/> by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="m">Source <see cref="T:Microsoft.DirectX.Matrix"/></param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Transform(Microsoft.DirectX.Plane,Microsoft.DirectX.Matrix)">
            <summary>
            Transform <see cref="T:Microsoft.DirectX.Plane"/> by <see cref="T:Microsoft.DirectX.Matrix"/>
            </summary>
            <param name="p">Source <see cref="T:Microsoft.DirectX.Plane"/></param>
            <param name="m">Source <see cref="T:Microsoft.DirectX.Matrix"/></param>
            <returns>Result <see cref="T:Microsoft.DirectX.Plane"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Scale(System.Single)">
            <summary>
            Scale the <see cref="T:Microsoft.DirectX.Plane"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Scale(System.Double)">
            <summary>
            Scale the <see cref="T:Microsoft.DirectX.Plane"/> 
            </summary>
            <param name="s">Scale</param>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Scale(Microsoft.DirectX.Plane,System.Single)">
            <summary>
            Scale the <see cref="T:Microsoft.DirectX.Plane"/> 
            </summary>
            <param name="p"><see cref="T:Microsoft.DirectX.Plane"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Plane"/></returns>
        </member>
        <member name="M:Microsoft.DirectX.Plane.Scale(Microsoft.DirectX.Plane,System.Double)">
            <summary>
            Scale the <see cref="T:Microsoft.DirectX.Plane"/> 
            </summary>
            <param name="p"><see cref="T:Microsoft.DirectX.Plane"/> to scale</param>
            <param name="s">Scale</param>
            <returns>Scaled <see cref="T:Microsoft.DirectX.Plane"/></returns>
        </member>
        <member name="P:Microsoft.DirectX.Plane.Normal">
            <summary>
            Return the <see cref="T:Microsoft.DirectX.Plane"/> normal
            </summary>
            <returns>The <see cref="T:Microsoft.DirectX.Plane"/> normal</returns>
        </member>
        <member name="M:SharpFactory.DMDDemo.DynamicMethodDelegateFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Generates a DynamicMethodDelegate delegate from a MethodInfo object.
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ObjectPool`1">
            <summary>
            Generic implementation of object pooling pattern with predefined pool size limit. The main
            purpose is that limited number of frequently used objects can be kept in the pool for
            further recycling.
            
            Notes: 
            1) it is not the goal to keep all returned objects. Pool is not meant for storage. If there
               is no space in the pool, extra returned objects will be dropped.
            
            2) it is implied that if object was obtained from a pool, the caller will return it back in
               a relatively short time. Keeping checked out objects for long durations is ok, but 
               reduces usefulness of pooling. Just new up your own.
            
            Not returning objects to the pool in not detrimental to the pool's work, but is a bad practice. 
            Rationale: 
               If there is no intent for reusing the object, do not use pool - just use "new". 
            </summary>
        </member>
        <member name="T:Roslyn.Utilities.ObjectPool`1.Factory">
            <remarks>
            Not using System.Func{T} because this file is linked into the (debugger) Formatter,
            which does not have that type (since it compiles against .NET 2.0).
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.ObjectPool`1.Allocate">
            <summary>
            Produces an instance.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.ObjectPool`1.Free(`0)">
            <summary>
            Returns objects to the pool.
            </summary>
            <remarks>
            Search strategy is a simple linear probing which is chosen for it cache-friendliness.
            Note that Free will try to store recycled objects close to the start thus statistically 
            reducing how far we will typically search in Allocate.
            </remarks>
        </member>
        <member name="M:Roslyn.Utilities.ObjectPool`1.ForgetTrackedObject(`0,`0)">
            <summary>
            Removes an object from leak tracking.  
            
            This is called when an object is returned to the pool.  It may also be explicitly 
            called if an object allocated from the pool is intentionally not being returned
            to the pool.  This can be of use with pooled arrays if the consumer wants to 
            return a larger array to the pool than was originally allocated.
            </summary>
        </member>
        <member name="T:Rfc822DateTime">
            <summary>
            Provides methods for converting <see cref="T:System.DateTime"/> structures 
            to and from the equivalent <a href="http://www.w3.org/Protocols/rfc822/#z28">RFC 822</a> 
            string representation.
            </summary>
        </member>
        <member name="F:Rfc822DateTime.formats">
            <summary>
            Private member to hold array of formats that RFC 822 date-time representations conform to.
            </summary>
        </member>
        <member name="F:Rfc822DateTime.format">
            <summary>
            Private member to hold the DateTime format string for representing a DateTime in the RFC 822 format.
            </summary>
        </member>
        <member name="P:Rfc822DateTime.Rfc822DateTimeFormat">
            <summary>
            Gets the custom format specifier that may be used to represent a <see cref="T:System.DateTime"/> in the RFC 822 format.
            </summary>
            <value>A <i>DateTime format string</i> that may be used to represent a <see cref="T:System.DateTime"/> in the RFC 822 format.</value>
            <remarks>
            <para>
            This method returns a string representation of a <see cref="T:System.DateTime"/> that utilizes the time zone 
            offset (local differential) to represent the offset from Greenwich mean time in hours and minutes. 
            The <see cref="P:Rfc822DateTime.Rfc822DateTimeFormat"/> is a valid date-time format string for use 
            in the <see cref="M:System.DateTime.ToString(System.String,System.IFormatProvider)"/> method.
            </para>
            <para>
            The <a href="http://www.w3.org/Protocols/rfc822/#z28">RFC 822</a> Date and Time specification 
            specifies that the year will be represented as a two-digit value, but the 
            <a href="http://www.rssboard.org/rss-profile#data-types-datetime">RSS Profile</a> recommends that 
            all date-time values should use a four-digit year. The <see cref="T:Rfc822DateTime"/> class 
            follows the RSS Profile recommendation when converting a <see cref="T:System.DateTime"/> to the equivalent 
            RFC 822 string representation.
            </para>
            </remarks>
        </member>
        <member name="P:Rfc822DateTime.Rfc822DateTimePatterns">
            <summary>
            Gets an array of the expected formats for RFC 822 date-time string representations.
            </summary>
            <value>
            An array of the expected formats for RFC 822 date-time string representations 
            that may used in the <see cref="M:System.DateTime.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles,System.DateTime@)"/> method.
            </value>
            <remarks>
            The array of the expected formats that is returned assumes that the RFC 822 time zone 
            is represented as or converted to a local differential representation.
            </remarks>
            <seealso cref="M:Rfc822DateTime.ConvertZoneToLocalDifferential(System.String)"/>
        </member>
        <member name="M:Rfc822DateTime.Parse(System.String)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <returns>
            A <see cref="T:System.DateTime"/> equivalent to the date and time contained in <paramref name="s"/>, 
            expressed as <i>Coordinated Universal Time (UTC)</i>.
            </returns>
            <remarks>
            The string <paramref name="s"/> is parsed using formatting information in the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object.
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is a <b>null</b> reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is an empty string.</exception>
            <exception cref="T:System.FormatException"><paramref name="s"/> does not contain a valid RFC 822 string representation of a date and time.</exception>
        </member>
        <member name="M:Rfc822DateTime.ConvertZoneToLocalDifferential(System.String)">
            <summary>
            Converts the time zone component of an RFC 822 date and time string representation to its local differential (time zone offset).
            </summary>
            <param name="s">A string containing an RFC 822 date and time to convert.</param>
            <returns>A date and time string that uses local differential to describe the time zone equivalent to the date and time contained in <paramref name="s"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is a <b>null</b> reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="s"/> is an empty string.</exception>
        </member>
        <member name="M:Rfc822DateTime.ToString(System.DateTime)">
            <summary>
            Converts the value of the specified <see cref="T:System.DateTime"/> object to its equivalent string representation.
            </summary>
            <param name="utcDateTime">The Coordinated Universal Time (UTC) <see cref="T:System.DateTime"/> to convert.</param>
            <returns>A RFC 822 string representation of the value of the <paramref name="utcDateTime"/>.</returns>
            <exception cref="T:System.ArgumentException">The specified <paramref name="utcDateTime"/> object does not represent a <see cref="F:System.DateTimeKind.Utc">Coordinated Universal Time (UTC)</see> value.</exception>
        </member>
        <member name="M:Rfc822DateTime.TryParse(System.String,System.DateTime@)">
            <summary>
            Converts the specified string representation of a date and time to its <see cref="T:System.DateTime"/> equivalent.
            </summary>
            <param name="s">A string containing a date and time to convert.</param>
            <param name="result">
            When this method returns, contains the <see cref="T:System.DateTime"/> value equivalent to the date and time 
            contained in <paramref name="s"/>, expressed as <i>Coordinated Universal Time (UTC)</i>, 
            if the conversion succeeded, or <see cref="F:System.DateTime.MinValue">MinValue</see> if the conversion failed. 
            The conversion fails if the s parameter is a <b>null</b> reference (Nothing in Visual Basic), 
            or does not contain a valid string representation of a date and time. 
            This parameter is passed uninitialized.
            </param>
            <returns><b>true</b> if the <paramref name="s"/> parameter was converted successfully; otherwise, <b>false</b>.</returns>
            <remarks>
            The string <paramref name="s"/> is parsed using formatting information in the <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo"/> object. 
            </remarks>
        </member>
    </members>
</doc>
